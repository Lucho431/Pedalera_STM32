
MONOFONICO_STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  08003374  08003374  00013374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003698  08003698  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08003698  08003698  00013698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036a0  080036a0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036a0  080036a0  000136a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036a4  080036a4  000136a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080036a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  200001dc  08003884  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08003884  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0fc  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f72  00000000  00000000  0002d308  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  0002f280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb8  00000000  00000000  0002ff50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002137a  00000000  00000000  00030b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aa29  00000000  00000000  00051e82  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9b54  00000000  00000000  0005c8ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001263ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000363c  00000000  00000000  0012647c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800335c 	.word	0x0800335c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	0800335c 	.word	0x0800335c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80004ce:	463b      	mov	r3, r7
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80004d6:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <MX_DAC_Init+0x4c>)
 80004d8:	4a0f      	ldr	r2, [pc, #60]	; (8000518 <MX_DAC_Init+0x50>)
 80004da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80004dc:	480d      	ldr	r0, [pc, #52]	; (8000514 <MX_DAC_Init+0x4c>)
 80004de:	f000 fcd2 	bl	8000e86 <HAL_DAC_Init>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80004e8:	f000 f9ac 	bl	8000844 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80004ec:	2300      	movs	r3, #0
 80004ee:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004f0:	2300      	movs	r3, #0
 80004f2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004f4:	463b      	mov	r3, r7
 80004f6:	2200      	movs	r2, #0
 80004f8:	4619      	mov	r1, r3
 80004fa:	4806      	ldr	r0, [pc, #24]	; (8000514 <MX_DAC_Init+0x4c>)
 80004fc:	f000 fd4b 	bl	8000f96 <HAL_DAC_ConfigChannel>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000506:	f000 f99d 	bl	8000844 <Error_Handler>
  }

}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000208 	.word	0x20000208
 8000518:	40007400 	.word	0x40007400

0800051c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	; 0x28
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a17      	ldr	r2, [pc, #92]	; (8000598 <HAL_DAC_MspInit+0x7c>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d127      	bne.n	800058e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
 8000542:	4b16      	ldr	r3, [pc, #88]	; (800059c <HAL_DAC_MspInit+0x80>)
 8000544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000546:	4a15      	ldr	r2, [pc, #84]	; (800059c <HAL_DAC_MspInit+0x80>)
 8000548:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800054c:	6413      	str	r3, [r2, #64]	; 0x40
 800054e:	4b13      	ldr	r3, [pc, #76]	; (800059c <HAL_DAC_MspInit+0x80>)
 8000550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000552:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000556:	613b      	str	r3, [r7, #16]
 8000558:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <HAL_DAC_MspInit+0x80>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a0e      	ldr	r2, [pc, #56]	; (800059c <HAL_DAC_MspInit+0x80>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <HAL_DAC_MspInit+0x80>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000576:	2310      	movs	r3, #16
 8000578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800057a:	2303      	movs	r3, #3
 800057c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	4805      	ldr	r0, [pc, #20]	; (80005a0 <HAL_DAC_MspInit+0x84>)
 800058a:	f000 fd99 	bl	80010c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800058e:	bf00      	nop
 8000590:	3728      	adds	r7, #40	; 0x28
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40007400 	.word	0x40007400
 800059c:	40023800 	.word	0x40023800
 80005a0:	40020000 	.word	0x40020000

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	4b26      	ldr	r3, [pc, #152]	; (8000658 <MX_GPIO_Init+0xb4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a25      	ldr	r2, [pc, #148]	; (8000658 <MX_GPIO_Init+0xb4>)
 80005c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b23      	ldr	r3, [pc, #140]	; (8000658 <MX_GPIO_Init+0xb4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_GPIO_Init+0xb4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a1e      	ldr	r2, [pc, #120]	; (8000658 <MX_GPIO_Init+0xb4>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_GPIO_Init+0xb4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <MX_GPIO_Init+0xb4>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a17      	ldr	r2, [pc, #92]	; (8000658 <MX_GPIO_Init+0xb4>)
 80005fc:	f043 0308 	orr.w	r3, r3, #8
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <MX_GPIO_Init+0xb4>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0308 	and.w	r3, r3, #8
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000614:	4811      	ldr	r0, [pc, #68]	; (800065c <MX_GPIO_Init+0xb8>)
 8000616:	f000 feed 	bl	80013f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800061a:	2301      	movs	r3, #1
 800061c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	4619      	mov	r1, r3
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <MX_GPIO_Init+0xbc>)
 800062e:	f000 fd47 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000632:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000636:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	2301      	movs	r3, #1
 800063a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	4619      	mov	r1, r3
 800064a:	4804      	ldr	r0, [pc, #16]	; (800065c <MX_GPIO_Init+0xb8>)
 800064c:	f000 fd38 	bl	80010c0 <HAL_GPIO_Init>

}
 8000650:	bf00      	nop
 8000652:	3720      	adds	r7, #32
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40020c00 	.word	0x40020c00
 8000660:	40020000 	.word	0x40020000

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f000 fa8a 	bl	8000b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f83a 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f7ff ff98 	bl	80005a4 <MX_GPIO_Init>
  MX_DAC_Init();
 8000674:	f7ff ff28 	bl	80004c8 <MX_DAC_Init>
  MX_TIM2_Init();
 8000678:	f000 f96c 	bl	8000954 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800067c:	f000 f9dc 	bl	8000a38 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000680:	4811      	ldr	r0, [pc, #68]	; (80006c8 <main+0x64>)
 8000682:	f001 fb5e 	bl	8001d42 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000686:	2100      	movs	r1, #0
 8000688:	4810      	ldr	r0, [pc, #64]	; (80006cc <main+0x68>)
 800068a:	f000 fc1e 	bl	8000eca <HAL_DAC_Start>
  HAL_UART_Receive_IT(&huart1, (uint8_t*) rx_buff, 4);
 800068e:	2204      	movs	r2, #4
 8000690:	490f      	ldr	r1, [pc, #60]	; (80006d0 <main+0x6c>)
 8000692:	4810      	ldr	r0, [pc, #64]	; (80006d4 <main+0x70>)
 8000694:	f001 ff77 	bl	8002586 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag_rx != 0){
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <main+0x74>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d0fb      	beq.n	8000698 <main+0x34>

		  if (rx_buff[0] == 'n'){
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <main+0x6c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b6e      	cmp	r3, #110	; 0x6e
 80006a6:	d106      	bne.n	80006b6 <main+0x52>
			  note = atoi(&rx_buff[1]);
 80006a8:	480c      	ldr	r0, [pc, #48]	; (80006dc <main+0x78>)
 80006aa:	f002 fd73 	bl	8003194 <atoi>
 80006ae:	4603      	mov	r3, r0
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <main+0x7c>)
 80006b4:	601a      	str	r2, [r3, #0]
		  }

		  HAL_UART_Receive_IT(&huart1, (uint8_t*) rx_buff, 4);
 80006b6:	2204      	movs	r2, #4
 80006b8:	4905      	ldr	r1, [pc, #20]	; (80006d0 <main+0x6c>)
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <main+0x70>)
 80006bc:	f001 ff63 	bl	8002586 <HAL_UART_Receive_IT>
		  flag_rx = 0;
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <main+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
	  if (flag_rx != 0){
 80006c6:	e7e7      	b.n	8000698 <main+0x34>
 80006c8:	20000220 	.word	0x20000220
 80006cc:	20000208 	.word	0x20000208
 80006d0:	2000021c 	.word	0x2000021c
 80006d4:	20000260 	.word	0x20000260
 80006d8:	20000206 	.word	0x20000206
 80006dc:	2000021d 	.word	0x2000021d
 80006e0:	200001fc 	.word	0x200001fc

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	; 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	2230      	movs	r2, #48	; 0x30
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fd76 	bl	80031e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <SystemClock_Config+0xcc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	4a27      	ldr	r2, [pc, #156]	; (80007b0 <SystemClock_Config+0xcc>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	; 0x40
 8000718:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <SystemClock_Config+0xcc>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <SystemClock_Config+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <SystemClock_Config+0xd0>)
 800072e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <SystemClock_Config+0xd0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000740:	2301      	movs	r3, #1
 8000742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074a:	2302      	movs	r3, #2
 800074c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000754:	2304      	movs	r3, #4
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000758:	23a8      	movs	r3, #168	; 0xa8
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000760:	2307      	movs	r3, #7
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 0320 	add.w	r3, r7, #32
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fe5d 	bl	8001428 <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000774:	f000 f866 	bl	8000844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2302      	movs	r3, #2
 800077e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000784:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000788:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2105      	movs	r1, #5
 8000796:	4618      	mov	r0, r3
 8000798:	f001 f8b6 	bl	8001908 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007a2:	f000 f84f 	bl	8000844 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3750      	adds	r7, #80	; 0x50
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM2){
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007c8:	d11b      	bne.n	8000802 <HAL_TIM_PeriodElapsedCallback+0x4a>
		sample = ((phase >> 20) * vel) >> 7;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	0d1b      	lsrs	r3, r3, #20
 80007d0:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80007d2:	7812      	ldrb	r2, [r2, #0]
 80007d4:	fb02 f303 	mul.w	r3, r2, r3
 80007d8:	09db      	lsrs	r3, r3, #7
 80007da:	b29a      	uxth	r2, r3
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80007de:	801a      	strh	r2, [r3, #0]
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sample);
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	2200      	movs	r2, #0
 80007e6:	2100      	movs	r1, #0
 80007e8:	480b      	ldr	r0, [pc, #44]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80007ea:	f000 fc21 	bl	8001030 <HAL_DAC_SetValue>
		phase += freqIncTab[note];
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a0b      	ldr	r2, [pc, #44]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80007f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4413      	add	r3, r2
 80007fe:	4a03      	ldr	r2, [pc, #12]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000800:	6013      	str	r3, [r2, #0]
	}
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000200 	.word	0x20000200
 8000810:	200001f8 	.word	0x200001f8
 8000814:	20000204 	.word	0x20000204
 8000818:	20000208 	.word	0x20000208
 800081c:	200001fc 	.word	0x200001fc
 8000820:	08003374 	.word	0x08003374

08000824 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	flag_rx = 1;
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <HAL_UART_RxCpltCallback+0x1c>)
 800082e:	2201      	movs	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	20000206 	.word	0x20000206

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
	...

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	4a0f      	ldr	r2, [pc, #60]	; (80008a0 <HAL_MspInit+0x4c>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	6453      	str	r3, [r2, #68]	; 0x44
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <HAL_MspInit+0x4c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <HAL_MspInit+0x4c>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	; 0x40
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000892:	2007      	movs	r0, #7
 8000894:	f000 fab6 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <HardFault_Handler+0x4>

080008b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <MemManage_Handler+0x4>

080008be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <BusFault_Handler+0x4>

080008c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <UsageFault_Handler+0x4>

080008ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f8:	f000 f994 	bl	8000c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}

08000900 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <TIM2_IRQHandler+0x10>)
 8000906:	f001 fa40 	bl	8001d8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000220 	.word	0x20000220

08000914 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <USART1_IRQHandler+0x10>)
 800091a:	f001 fe89 	bl	8002630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000260 	.word	0x20000260

08000928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <SystemInit+0x28>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000932:	4a07      	ldr	r2, [pc, #28]	; (8000950 <SystemInit+0x28>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <SystemInit+0x28>)
 800093e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000942:	609a      	str	r2, [r3, #8]
#endif
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000968:	463b      	mov	r3, r7
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8000970:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <MX_TIM2_Init+0x94>)
 8000972:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000976:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119-1;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_TIM2_Init+0x94>)
 800097a:	2276      	movs	r2, #118	; 0x76
 800097c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_TIM2_Init+0x94>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16-1;
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_TIM2_Init+0x94>)
 8000986:	220f      	movs	r2, #15
 8000988:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <MX_TIM2_Init+0x94>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_TIM2_Init+0x94>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000996:	4814      	ldr	r0, [pc, #80]	; (80009e8 <MX_TIM2_Init+0x94>)
 8000998:	f001 f9a8 	bl	8001cec <HAL_TIM_Base_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80009a2:	f7ff ff4f 	bl	8000844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ac:	f107 0308 	add.w	r3, r7, #8
 80009b0:	4619      	mov	r1, r3
 80009b2:	480d      	ldr	r0, [pc, #52]	; (80009e8 <MX_TIM2_Init+0x94>)
 80009b4:	f001 faf1 	bl	8001f9a <HAL_TIM_ConfigClockSource>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80009be:	f7ff ff41 	bl	8000844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ca:	463b      	mov	r3, r7
 80009cc:	4619      	mov	r1, r3
 80009ce:	4806      	ldr	r0, [pc, #24]	; (80009e8 <MX_TIM2_Init+0x94>)
 80009d0:	f001 fcfc 	bl	80023cc <HAL_TIMEx_MasterConfigSynchronization>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80009da:	f7ff ff33 	bl	8000844 <Error_Handler>
  }

}
 80009de:	bf00      	nop
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000220 	.word	0x20000220

080009ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009fc:	d115      	bne.n	8000a2a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <HAL_TIM_Base_MspInit+0x48>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <HAL_TIM_Base_MspInit+0x48>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_TIM_Base_MspInit+0x48>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	201c      	movs	r0, #28
 8000a20:	f000 f9fb 	bl	8000e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a24:	201c      	movs	r0, #28
 8000a26:	f000 fa14 	bl	8000e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <MX_USART1_UART_Init+0x50>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a70:	f001 fd3c 	bl	80024ec <HAL_UART_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a7a:	f7ff fee3 	bl	8000844 <Error_Handler>
  }

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000260 	.word	0x20000260
 8000a88:	40011000 	.word	0x40011000

08000a8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a1d      	ldr	r2, [pc, #116]	; (8000b20 <HAL_UART_MspInit+0x94>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d134      	bne.n	8000b18 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <HAL_UART_MspInit+0x98>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	4a1b      	ldr	r2, [pc, #108]	; (8000b24 <HAL_UART_MspInit+0x98>)
 8000ab8:	f043 0310 	orr.w	r3, r3, #16
 8000abc:	6453      	str	r3, [r2, #68]	; 0x44
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <HAL_UART_MspInit+0x98>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	f003 0310 	and.w	r3, r3, #16
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_UART_MspInit+0x98>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <HAL_UART_MspInit+0x98>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_UART_MspInit+0x98>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ae6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000af8:	2307      	movs	r3, #7
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	4809      	ldr	r0, [pc, #36]	; (8000b28 <HAL_UART_MspInit+0x9c>)
 8000b04:	f000 fadc 	bl	80010c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2025      	movs	r0, #37	; 0x25
 8000b0e:	f000 f984 	bl	8000e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b12:	2025      	movs	r0, #37	; 0x25
 8000b14:	f000 f99d 	bl	8000e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b18:	bf00      	nop
 8000b1a:	3728      	adds	r7, #40	; 0x28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40011000 	.word	0x40011000
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000

08000b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b32:	e003      	b.n	8000b3c <LoopCopyDataInit>

08000b34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b3a:	3104      	adds	r1, #4

08000b3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b44:	d3f6      	bcc.n	8000b34 <CopyDataInit>
  ldr  r2, =_sbss
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b48:	e002      	b.n	8000b50 <LoopFillZerobss>

08000b4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b4c:	f842 3b04 	str.w	r3, [r2], #4

08000b50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b54:	d3f9      	bcc.n	8000b4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b56:	f7ff fee7 	bl	8000928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f002 fb1f 	bl	800319c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5e:	f7ff fd81 	bl	8000664 <main>
  bx  lr    
 8000b62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b68:	080036a8 	.word	0x080036a8
  ldr  r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b70:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8000b74:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8000b78:	200002a4 	.word	0x200002a4

08000b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC_IRQHandler>
	...

08000b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <HAL_Init+0x40>)
 8000b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <HAL_Init+0x40>)
 8000b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <HAL_Init+0x40>)
 8000ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f000 f92b 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f000 f808 	bl	8000bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb4:	f7ff fe4e 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023c00 	.word	0x40023c00

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_InitTick+0x54>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_InitTick+0x58>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f943 	bl	8000e6e <HAL_SYSTICK_Config>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00e      	b.n	8000c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b0f      	cmp	r3, #15
 8000bf6:	d80a      	bhi.n	8000c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f000 f90b 	bl	8000e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c04:	4a06      	ldr	r2, [pc, #24]	; (8000c20 <HAL_InitTick+0x5c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e000      	b.n	8000c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	20000004 	.word	0x20000004

08000c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x20>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_IncTick+0x24>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <HAL_IncTick+0x24>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008
 8000c48:	200002a0 	.word	0x200002a0

08000c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <HAL_GetTick+0x14>)
 8000c52:	681b      	ldr	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	200002a0 	.word	0x200002a0

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db0b      	blt.n	8000cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 021f 	and.w	r2, r3, #31
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <__NVIC_EnableIRQ+0x38>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	2001      	movs	r0, #1
 8000cea:	fa00 f202 	lsl.w	r2, r0, r2
 8000cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	; (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	; (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	; 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd0:	d301      	bcc.n	8000dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00f      	b.n	8000df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <SysTick_Config+0x40>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dde:	210f      	movs	r1, #15
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f7ff ff8e 	bl	8000d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <SysTick_Config+0x40>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SysTick_Config+0x40>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e000e010 	.word	0xe000e010

08000e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff29 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2c:	f7ff ff3e 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff8e 	bl	8000d58 <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5d 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff31 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffa2 	bl	8000dc0 <SysTick_Config>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d101      	bne.n	8000e98 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e014      	b.n	8000ec2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	791b      	ldrb	r3, [r3, #4]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d105      	bne.n	8000eae <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff fb37 	bl	800051c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b085      	sub	sp, #20
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	795b      	ldrb	r3, [r3, #5]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d101      	bne.n	8000ee8 <HAL_DAC_Start+0x1e>
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	e050      	b.n	8000f8a <HAL_DAC_Start+0xc0>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2201      	movs	r2, #1
 8000eec:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6819      	ldr	r1, [r3, #0]
 8000efa:	2201      	movs	r2, #1
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	409a      	lsls	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	430a      	orrs	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d11a      	bne.n	8000f44 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f24:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2b04      	cmp	r3, #4
 8000f2a:	d127      	bne.n	8000f7c <HAL_DAC_Start+0xb2>
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	2b38      	cmp	r3, #56	; 0x38
 8000f30:	d124      	bne.n	8000f7c <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f042 0201 	orr.w	r2, r2, #1
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	e01b      	b.n	8000f7c <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f4e:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8000f5a:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000f62:	d10b      	bne.n	8000f7c <HAL_DAC_Start+0xb2>
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8000f6a:	d107      	bne.n	8000f7c <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f042 0202 	orr.w	r2, r2, #2
 8000f7a:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b087      	sub	sp, #28
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	60f8      	str	r0, [r7, #12]
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	795b      	ldrb	r3, [r3, #5]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d101      	bne.n	8000fb6 <HAL_DAC_ConfigChannel+0x20>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e036      	b.n	8001024 <HAL_DAC_ConfigChannel+0x8e>
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000fca:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6819      	ldr	r1, [r3, #0]
 8001004:	22c0      	movs	r2, #192	; 0xc0
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43da      	mvns	r2, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	400a      	ands	r2, r1
 8001014:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2201      	movs	r2, #1
 800101a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2200      	movs	r2, #0
 8001020:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	371c      	adds	r7, #28
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d105      	bne.n	800105a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4413      	add	r3, r2
 8001054:	3308      	adds	r3, #8
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	e004      	b.n	8001064 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4413      	add	r3, r2
 8001060:	3314      	adds	r3, #20
 8001062:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	461a      	mov	r2, r3
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	371c      	adds	r7, #28
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d004      	beq.n	8001098 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e00c      	b.n	80010b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2205      	movs	r2, #5
 800109c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0201 	bic.w	r2, r2, #1
 80010ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
 80010da:	e16b      	b.n	80013b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010dc:	2201      	movs	r2, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	f040 815a 	bne.w	80013ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d00b      	beq.n	800111a <HAL_GPIO_Init+0x5a>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b02      	cmp	r3, #2
 8001108:	d007      	beq.n	800111a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800110e:	2b11      	cmp	r3, #17
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b12      	cmp	r3, #18
 8001118:	d130      	bne.n	800117c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	2203      	movs	r2, #3
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001150:	2201      	movs	r2, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	091b      	lsrs	r3, r3, #4
 8001166:	f003 0201 	and.w	r2, r3, #1
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0xfc>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b12      	cmp	r3, #18
 80011ba:	d123      	bne.n	8001204 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	08da      	lsrs	r2, r3, #3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3208      	adds	r2, #8
 80011c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	220f      	movs	r2, #15
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	691a      	ldr	r2, [r3, #16]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	08da      	lsrs	r2, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3208      	adds	r2, #8
 80011fe:	69b9      	ldr	r1, [r7, #24]
 8001200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0203 	and.w	r2, r3, #3
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 80b4 	beq.w	80013ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b5f      	ldr	r3, [pc, #380]	; (80013c8 <HAL_GPIO_Init+0x308>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	4a5e      	ldr	r2, [pc, #376]	; (80013c8 <HAL_GPIO_Init+0x308>)
 8001250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001254:	6453      	str	r3, [r2, #68]	; 0x44
 8001256:	4b5c      	ldr	r3, [pc, #368]	; (80013c8 <HAL_GPIO_Init+0x308>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001262:	4a5a      	ldr	r2, [pc, #360]	; (80013cc <HAL_GPIO_Init+0x30c>)
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	089b      	lsrs	r3, r3, #2
 8001268:	3302      	adds	r3, #2
 800126a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	220f      	movs	r2, #15
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a51      	ldr	r2, [pc, #324]	; (80013d0 <HAL_GPIO_Init+0x310>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d02b      	beq.n	80012e6 <HAL_GPIO_Init+0x226>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a50      	ldr	r2, [pc, #320]	; (80013d4 <HAL_GPIO_Init+0x314>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d025      	beq.n	80012e2 <HAL_GPIO_Init+0x222>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4f      	ldr	r2, [pc, #316]	; (80013d8 <HAL_GPIO_Init+0x318>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d01f      	beq.n	80012de <HAL_GPIO_Init+0x21e>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4e      	ldr	r2, [pc, #312]	; (80013dc <HAL_GPIO_Init+0x31c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d019      	beq.n	80012da <HAL_GPIO_Init+0x21a>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a4d      	ldr	r2, [pc, #308]	; (80013e0 <HAL_GPIO_Init+0x320>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d013      	beq.n	80012d6 <HAL_GPIO_Init+0x216>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4c      	ldr	r2, [pc, #304]	; (80013e4 <HAL_GPIO_Init+0x324>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d00d      	beq.n	80012d2 <HAL_GPIO_Init+0x212>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4b      	ldr	r2, [pc, #300]	; (80013e8 <HAL_GPIO_Init+0x328>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d007      	beq.n	80012ce <HAL_GPIO_Init+0x20e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4a      	ldr	r2, [pc, #296]	; (80013ec <HAL_GPIO_Init+0x32c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d101      	bne.n	80012ca <HAL_GPIO_Init+0x20a>
 80012c6:	2307      	movs	r3, #7
 80012c8:	e00e      	b.n	80012e8 <HAL_GPIO_Init+0x228>
 80012ca:	2308      	movs	r3, #8
 80012cc:	e00c      	b.n	80012e8 <HAL_GPIO_Init+0x228>
 80012ce:	2306      	movs	r3, #6
 80012d0:	e00a      	b.n	80012e8 <HAL_GPIO_Init+0x228>
 80012d2:	2305      	movs	r3, #5
 80012d4:	e008      	b.n	80012e8 <HAL_GPIO_Init+0x228>
 80012d6:	2304      	movs	r3, #4
 80012d8:	e006      	b.n	80012e8 <HAL_GPIO_Init+0x228>
 80012da:	2303      	movs	r3, #3
 80012dc:	e004      	b.n	80012e8 <HAL_GPIO_Init+0x228>
 80012de:	2302      	movs	r3, #2
 80012e0:	e002      	b.n	80012e8 <HAL_GPIO_Init+0x228>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <HAL_GPIO_Init+0x228>
 80012e6:	2300      	movs	r3, #0
 80012e8:	69fa      	ldr	r2, [r7, #28]
 80012ea:	f002 0203 	and.w	r2, r2, #3
 80012ee:	0092      	lsls	r2, r2, #2
 80012f0:	4093      	lsls	r3, r2
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f8:	4934      	ldr	r1, [pc, #208]	; (80013cc <HAL_GPIO_Init+0x30c>)
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	3302      	adds	r3, #2
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001306:	4b3a      	ldr	r3, [pc, #232]	; (80013f0 <HAL_GPIO_Init+0x330>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800132a:	4a31      	ldr	r2, [pc, #196]	; (80013f0 <HAL_GPIO_Init+0x330>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001330:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <HAL_GPIO_Init+0x330>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001354:	4a26      	ldr	r2, [pc, #152]	; (80013f0 <HAL_GPIO_Init+0x330>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135a:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <HAL_GPIO_Init+0x330>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800137e:	4a1c      	ldr	r2, [pc, #112]	; (80013f0 <HAL_GPIO_Init+0x330>)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <HAL_GPIO_Init+0x330>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a8:	4a11      	ldr	r2, [pc, #68]	; (80013f0 <HAL_GPIO_Init+0x330>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3301      	adds	r3, #1
 80013b2:	61fb      	str	r3, [r7, #28]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	2b0f      	cmp	r3, #15
 80013b8:	f67f ae90 	bls.w	80010dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013bc:	bf00      	nop
 80013be:	3724      	adds	r7, #36	; 0x24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40013800 	.word	0x40013800
 80013d0:	40020000 	.word	0x40020000
 80013d4:	40020400 	.word	0x40020400
 80013d8:	40020800 	.word	0x40020800
 80013dc:	40020c00 	.word	0x40020c00
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40021400 	.word	0x40021400
 80013e8:	40021800 	.word	0x40021800
 80013ec:	40021c00 	.word	0x40021c00
 80013f0:	40013c00 	.word	0x40013c00

080013f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	807b      	strh	r3, [r7, #2]
 8001400:	4613      	mov	r3, r2
 8001402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001404:	787b      	ldrb	r3, [r7, #1]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800140a:	887a      	ldrh	r2, [r7, #2]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001410:	e003      	b.n	800141a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001412:	887b      	ldrh	r3, [r7, #2]
 8001414:	041a      	lsls	r2, r3, #16
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	619a      	str	r2, [r3, #24]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e25b      	b.n	80018f2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d075      	beq.n	8001532 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001446:	4ba3      	ldr	r3, [pc, #652]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b04      	cmp	r3, #4
 8001450:	d00c      	beq.n	800146c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001452:	4ba0      	ldr	r3, [pc, #640]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800145a:	2b08      	cmp	r3, #8
 800145c:	d112      	bne.n	8001484 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145e:	4b9d      	ldr	r3, [pc, #628]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800146a:	d10b      	bne.n	8001484 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146c:	4b99      	ldr	r3, [pc, #612]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d05b      	beq.n	8001530 <HAL_RCC_OscConfig+0x108>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d157      	bne.n	8001530 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e236      	b.n	80018f2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800148c:	d106      	bne.n	800149c <HAL_RCC_OscConfig+0x74>
 800148e:	4b91      	ldr	r3, [pc, #580]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a90      	ldr	r2, [pc, #576]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e01d      	b.n	80014d8 <HAL_RCC_OscConfig+0xb0>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x98>
 80014a6:	4b8b      	ldr	r3, [pc, #556]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a8a      	ldr	r2, [pc, #552]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b88      	ldr	r3, [pc, #544]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a87      	ldr	r2, [pc, #540]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e00b      	b.n	80014d8 <HAL_RCC_OscConfig+0xb0>
 80014c0:	4b84      	ldr	r3, [pc, #528]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a83      	ldr	r2, [pc, #524]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 80014c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b81      	ldr	r3, [pc, #516]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a80      	ldr	r2, [pc, #512]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 80014d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d013      	beq.n	8001508 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fbb4 	bl	8000c4c <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff fbb0 	bl	8000c4c <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	; 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e1fb      	b.n	80018f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	4b76      	ldr	r3, [pc, #472]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0xc0>
 8001506:	e014      	b.n	8001532 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fba0 	bl	8000c4c <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fb9c 	bl	8000c4c <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	; 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e1e7      	b.n	80018f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001522:	4b6c      	ldr	r3, [pc, #432]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0xe8>
 800152e:	e000      	b.n	8001532 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d063      	beq.n	8001606 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800153e:	4b65      	ldr	r3, [pc, #404]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00b      	beq.n	8001562 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154a:	4b62      	ldr	r3, [pc, #392]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001552:	2b08      	cmp	r3, #8
 8001554:	d11c      	bne.n	8001590 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001556:	4b5f      	ldr	r3, [pc, #380]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d116      	bne.n	8001590 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001562:	4b5c      	ldr	r3, [pc, #368]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d005      	beq.n	800157a <HAL_RCC_OscConfig+0x152>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d001      	beq.n	800157a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e1bb      	b.n	80018f2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157a:	4b56      	ldr	r3, [pc, #344]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4952      	ldr	r1, [pc, #328]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158e:	e03a      	b.n	8001606 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d020      	beq.n	80015da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001598:	4b4f      	ldr	r3, [pc, #316]	; (80016d8 <HAL_RCC_OscConfig+0x2b0>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159e:	f7ff fb55 	bl	8000c4c <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a6:	f7ff fb51 	bl	8000c4c <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e19c      	b.n	80018f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b8:	4b46      	ldr	r3, [pc, #280]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c4:	4b43      	ldr	r3, [pc, #268]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4940      	ldr	r1, [pc, #256]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]
 80015d8:	e015      	b.n	8001606 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015da:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <HAL_RCC_OscConfig+0x2b0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff fb34 	bl	8000c4c <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e8:	f7ff fb30 	bl	8000c4c <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e17b      	b.n	80018f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fa:	4b36      	ldr	r3, [pc, #216]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d030      	beq.n	8001674 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d016      	beq.n	8001648 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161a:	4b30      	ldr	r3, [pc, #192]	; (80016dc <HAL_RCC_OscConfig+0x2b4>)
 800161c:	2201      	movs	r2, #1
 800161e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001620:	f7ff fb14 	bl	8000c4c <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001628:	f7ff fb10 	bl	8000c4c <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e15b      	b.n	80018f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 800163c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x200>
 8001646:	e015      	b.n	8001674 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001648:	4b24      	ldr	r3, [pc, #144]	; (80016dc <HAL_RCC_OscConfig+0x2b4>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164e:	f7ff fafd 	bl	8000c4c <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001656:	f7ff faf9 	bl	8000c4c <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e144      	b.n	80018f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001668:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 800166a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f0      	bne.n	8001656 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80a0 	beq.w	80017c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10f      	bne.n	80016b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ae:	2301      	movs	r3, #1
 80016b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_RCC_OscConfig+0x2b8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d121      	bne.n	8001702 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <HAL_RCC_OscConfig+0x2b8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a07      	ldr	r2, [pc, #28]	; (80016e0 <HAL_RCC_OscConfig+0x2b8>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fabf 	bl	8000c4c <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d0:	e011      	b.n	80016f6 <HAL_RCC_OscConfig+0x2ce>
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800
 80016d8:	42470000 	.word	0x42470000
 80016dc:	42470e80 	.word	0x42470e80
 80016e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e4:	f7ff fab2 	bl	8000c4c <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e0fd      	b.n	80018f2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f6:	4b81      	ldr	r3, [pc, #516]	; (80018fc <HAL_RCC_OscConfig+0x4d4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d106      	bne.n	8001718 <HAL_RCC_OscConfig+0x2f0>
 800170a:	4b7d      	ldr	r3, [pc, #500]	; (8001900 <HAL_RCC_OscConfig+0x4d8>)
 800170c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170e:	4a7c      	ldr	r2, [pc, #496]	; (8001900 <HAL_RCC_OscConfig+0x4d8>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6713      	str	r3, [r2, #112]	; 0x70
 8001716:	e01c      	b.n	8001752 <HAL_RCC_OscConfig+0x32a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b05      	cmp	r3, #5
 800171e:	d10c      	bne.n	800173a <HAL_RCC_OscConfig+0x312>
 8001720:	4b77      	ldr	r3, [pc, #476]	; (8001900 <HAL_RCC_OscConfig+0x4d8>)
 8001722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001724:	4a76      	ldr	r2, [pc, #472]	; (8001900 <HAL_RCC_OscConfig+0x4d8>)
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	6713      	str	r3, [r2, #112]	; 0x70
 800172c:	4b74      	ldr	r3, [pc, #464]	; (8001900 <HAL_RCC_OscConfig+0x4d8>)
 800172e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001730:	4a73      	ldr	r2, [pc, #460]	; (8001900 <HAL_RCC_OscConfig+0x4d8>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6713      	str	r3, [r2, #112]	; 0x70
 8001738:	e00b      	b.n	8001752 <HAL_RCC_OscConfig+0x32a>
 800173a:	4b71      	ldr	r3, [pc, #452]	; (8001900 <HAL_RCC_OscConfig+0x4d8>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173e:	4a70      	ldr	r2, [pc, #448]	; (8001900 <HAL_RCC_OscConfig+0x4d8>)
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	6713      	str	r3, [r2, #112]	; 0x70
 8001746:	4b6e      	ldr	r3, [pc, #440]	; (8001900 <HAL_RCC_OscConfig+0x4d8>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174a:	4a6d      	ldr	r2, [pc, #436]	; (8001900 <HAL_RCC_OscConfig+0x4d8>)
 800174c:	f023 0304 	bic.w	r3, r3, #4
 8001750:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d015      	beq.n	8001786 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175a:	f7ff fa77 	bl	8000c4c <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001760:	e00a      	b.n	8001778 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001762:	f7ff fa73 	bl	8000c4c <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001770:	4293      	cmp	r3, r2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e0bc      	b.n	80018f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001778:	4b61      	ldr	r3, [pc, #388]	; (8001900 <HAL_RCC_OscConfig+0x4d8>)
 800177a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0ee      	beq.n	8001762 <HAL_RCC_OscConfig+0x33a>
 8001784:	e014      	b.n	80017b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001786:	f7ff fa61 	bl	8000c4c <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178c:	e00a      	b.n	80017a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178e:	f7ff fa5d 	bl	8000c4c <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f241 3288 	movw	r2, #5000	; 0x1388
 800179c:	4293      	cmp	r3, r2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e0a6      	b.n	80018f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a4:	4b56      	ldr	r3, [pc, #344]	; (8001900 <HAL_RCC_OscConfig+0x4d8>)
 80017a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1ee      	bne.n	800178e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d105      	bne.n	80017c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b6:	4b52      	ldr	r3, [pc, #328]	; (8001900 <HAL_RCC_OscConfig+0x4d8>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	4a51      	ldr	r2, [pc, #324]	; (8001900 <HAL_RCC_OscConfig+0x4d8>)
 80017bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 8092 	beq.w	80018f0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017cc:	4b4c      	ldr	r3, [pc, #304]	; (8001900 <HAL_RCC_OscConfig+0x4d8>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d05c      	beq.n	8001892 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d141      	bne.n	8001864 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e0:	4b48      	ldr	r3, [pc, #288]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e6:	f7ff fa31 	bl	8000c4c <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ee:	f7ff fa2d 	bl	8000c4c <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e078      	b.n	80018f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001800:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <HAL_RCC_OscConfig+0x4d8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f0      	bne.n	80017ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69da      	ldr	r2, [r3, #28]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	019b      	lsls	r3, r3, #6
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001822:	085b      	lsrs	r3, r3, #1
 8001824:	3b01      	subs	r3, #1
 8001826:	041b      	lsls	r3, r3, #16
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182e:	061b      	lsls	r3, r3, #24
 8001830:	4933      	ldr	r1, [pc, #204]	; (8001900 <HAL_RCC_OscConfig+0x4d8>)
 8001832:	4313      	orrs	r3, r2
 8001834:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001836:	4b33      	ldr	r3, [pc, #204]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 8001838:	2201      	movs	r2, #1
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fa06 	bl	8000c4c <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff fa02 	bl	8000c4c <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e04d      	b.n	80018f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001856:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <HAL_RCC_OscConfig+0x4d8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x41c>
 8001862:	e045      	b.n	80018f0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001864:	4b27      	ldr	r3, [pc, #156]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff f9ef 	bl	8000c4c <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001872:	f7ff f9eb 	bl	8000c4c <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e036      	b.n	80018f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <HAL_RCC_OscConfig+0x4d8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x44a>
 8001890:	e02e      	b.n	80018f0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d101      	bne.n	800189e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e029      	b.n	80018f2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <HAL_RCC_OscConfig+0x4d8>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d11c      	bne.n	80018ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d115      	bne.n	80018ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018c6:	4013      	ands	r3, r2
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d10d      	bne.n	80018ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80018da:	429a      	cmp	r2, r3
 80018dc:	d106      	bne.n	80018ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40007000 	.word	0x40007000
 8001900:	40023800 	.word	0x40023800
 8001904:	42470060 	.word	0x42470060

08001908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0cc      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800191c:	4b68      	ldr	r3, [pc, #416]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 030f 	and.w	r3, r3, #15
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d90c      	bls.n	8001944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192a:	4b65      	ldr	r3, [pc, #404]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001932:	4b63      	ldr	r3, [pc, #396]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d001      	beq.n	8001944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0b8      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d020      	beq.n	8001992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800195c:	4b59      	ldr	r3, [pc, #356]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	4a58      	ldr	r2, [pc, #352]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001966:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001974:	4b53      	ldr	r3, [pc, #332]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4a52      	ldr	r2, [pc, #328]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800197e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001980:	4b50      	ldr	r3, [pc, #320]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	494d      	ldr	r1, [pc, #308]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d044      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	4b47      	ldr	r3, [pc, #284]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d119      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e07f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d003      	beq.n	80019c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c6:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d109      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e06f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d6:	4b3b      	ldr	r3, [pc, #236]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e067      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019e6:	4b37      	ldr	r3, [pc, #220]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f023 0203 	bic.w	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4934      	ldr	r1, [pc, #208]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f8:	f7ff f928 	bl	8000c4c <HAL_GetTick>
 80019fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a00:	f7ff f924 	bl	8000c4c <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e04f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a16:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 020c 	and.w	r2, r3, #12
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d1eb      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d20c      	bcs.n	8001a50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a36:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e032      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4916      	ldr	r1, [pc, #88]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d009      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	490e      	ldr	r1, [pc, #56]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a8e:	f000 f821 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8001a92:	4601      	mov	r1, r0
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa0:	5cd3      	ldrb	r3, [r2, r3]
 8001aa2:	fa21 f303 	lsr.w	r3, r1, r3
 8001aa6:	4a09      	ldr	r2, [pc, #36]	; (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff f888 	bl	8000bc4 <HAL_InitTick>

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023c00 	.word	0x40023c00
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	08003574 	.word	0x08003574
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	20000004 	.word	0x20000004

08001ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aea:	4b63      	ldr	r3, [pc, #396]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d007      	beq.n	8001b06 <HAL_RCC_GetSysClockFreq+0x32>
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d008      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x38>
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f040 80b4 	bne.w	8001c68 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b00:	4b5e      	ldr	r3, [pc, #376]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b02:	60bb      	str	r3, [r7, #8]
       break;
 8001b04:	e0b3      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b06:	4b5e      	ldr	r3, [pc, #376]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001b08:	60bb      	str	r3, [r7, #8]
      break;
 8001b0a:	e0b0      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b0c:	4b5a      	ldr	r3, [pc, #360]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b16:	4b58      	ldr	r3, [pc, #352]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d04a      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b22:	4b55      	ldr	r3, [pc, #340]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	099b      	lsrs	r3, r3, #6
 8001b28:	f04f 0400 	mov.w	r4, #0
 8001b2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	ea03 0501 	and.w	r5, r3, r1
 8001b38:	ea04 0602 	and.w	r6, r4, r2
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	4632      	mov	r2, r6
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	f04f 0400 	mov.w	r4, #0
 8001b48:	0154      	lsls	r4, r2, #5
 8001b4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b4e:	014b      	lsls	r3, r1, #5
 8001b50:	4619      	mov	r1, r3
 8001b52:	4622      	mov	r2, r4
 8001b54:	1b49      	subs	r1, r1, r5
 8001b56:	eb62 0206 	sbc.w	r2, r2, r6
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	f04f 0400 	mov.w	r4, #0
 8001b62:	0194      	lsls	r4, r2, #6
 8001b64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b68:	018b      	lsls	r3, r1, #6
 8001b6a:	1a5b      	subs	r3, r3, r1
 8001b6c:	eb64 0402 	sbc.w	r4, r4, r2
 8001b70:	f04f 0100 	mov.w	r1, #0
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	00e2      	lsls	r2, r4, #3
 8001b7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b7e:	00d9      	lsls	r1, r3, #3
 8001b80:	460b      	mov	r3, r1
 8001b82:	4614      	mov	r4, r2
 8001b84:	195b      	adds	r3, r3, r5
 8001b86:	eb44 0406 	adc.w	r4, r4, r6
 8001b8a:	f04f 0100 	mov.w	r1, #0
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	0262      	lsls	r2, r4, #9
 8001b94:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001b98:	0259      	lsls	r1, r3, #9
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4614      	mov	r4, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	4621      	mov	r1, r4
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f04f 0400 	mov.w	r4, #0
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4623      	mov	r3, r4
 8001bac:	f7fe fb0c 	bl	80001c8 <__aeabi_uldivmod>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	460c      	mov	r4, r1
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	e049      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb8:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	099b      	lsrs	r3, r3, #6
 8001bbe:	f04f 0400 	mov.w	r4, #0
 8001bc2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	ea03 0501 	and.w	r5, r3, r1
 8001bce:	ea04 0602 	and.w	r6, r4, r2
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	4632      	mov	r2, r6
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	f04f 0400 	mov.w	r4, #0
 8001bde:	0154      	lsls	r4, r2, #5
 8001be0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001be4:	014b      	lsls	r3, r1, #5
 8001be6:	4619      	mov	r1, r3
 8001be8:	4622      	mov	r2, r4
 8001bea:	1b49      	subs	r1, r1, r5
 8001bec:	eb62 0206 	sbc.w	r2, r2, r6
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	f04f 0400 	mov.w	r4, #0
 8001bf8:	0194      	lsls	r4, r2, #6
 8001bfa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001bfe:	018b      	lsls	r3, r1, #6
 8001c00:	1a5b      	subs	r3, r3, r1
 8001c02:	eb64 0402 	sbc.w	r4, r4, r2
 8001c06:	f04f 0100 	mov.w	r1, #0
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	00e2      	lsls	r2, r4, #3
 8001c10:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c14:	00d9      	lsls	r1, r3, #3
 8001c16:	460b      	mov	r3, r1
 8001c18:	4614      	mov	r4, r2
 8001c1a:	195b      	adds	r3, r3, r5
 8001c1c:	eb44 0406 	adc.w	r4, r4, r6
 8001c20:	f04f 0100 	mov.w	r1, #0
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	02a2      	lsls	r2, r4, #10
 8001c2a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c2e:	0299      	lsls	r1, r3, #10
 8001c30:	460b      	mov	r3, r1
 8001c32:	4614      	mov	r4, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	4621      	mov	r1, r4
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f04f 0400 	mov.w	r4, #0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4623      	mov	r3, r4
 8001c42:	f7fe fac1 	bl	80001c8 <__aeabi_uldivmod>
 8001c46:	4603      	mov	r3, r0
 8001c48:	460c      	mov	r4, r1
 8001c4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	0c1b      	lsrs	r3, r3, #16
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	3301      	adds	r3, #1
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c64:	60bb      	str	r3, [r7, #8]
      break;
 8001c66:	e002      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c6a:	60bb      	str	r3, [r7, #8]
      break;
 8001c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	00f42400 	.word	0x00f42400
 8001c80:	007a1200 	.word	0x007a1200

08001c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000000 	.word	0x20000000

08001c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ca0:	f7ff fff0 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001ca4:	4601      	mov	r1, r0
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	0a9b      	lsrs	r3, r3, #10
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb2:	5cd3      	ldrb	r3, [r2, r3]
 8001cb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	08003584 	.word	0x08003584

08001cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cc8:	f7ff ffdc 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001ccc:	4601      	mov	r1, r0
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	0b5b      	lsrs	r3, r3, #13
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	4a03      	ldr	r2, [pc, #12]	; (8001ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cda:	5cd3      	ldrb	r3, [r2, r3]
 8001cdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	08003584 	.word	0x08003584

08001cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e01d      	b.n	8001d3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7fe fe6a 	bl	80009ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3304      	adds	r3, #4
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	f000 fa14 	bl	8002158 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b085      	sub	sp, #20
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0201 	orr.w	r2, r2, #1
 8001d58:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2b06      	cmp	r3, #6
 8001d6a:	d007      	beq.n	8001d7c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d122      	bne.n	8001de6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d11b      	bne.n	8001de6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f06f 0202 	mvn.w	r2, #2
 8001db6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f9a5 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 8001dd2:	e005      	b.n	8001de0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f997 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f9a8 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d122      	bne.n	8001e3a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d11b      	bne.n	8001e3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f06f 0204 	mvn.w	r2, #4
 8001e0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f97b 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 8001e26:	e005      	b.n	8001e34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f96d 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f97e 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d122      	bne.n	8001e8e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d11b      	bne.n	8001e8e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f06f 0208 	mvn.w	r2, #8
 8001e5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2204      	movs	r2, #4
 8001e64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f951 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 8001e7a:	e005      	b.n	8001e88 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f943 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f954 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b10      	cmp	r3, #16
 8001e9a:	d122      	bne.n	8001ee2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f003 0310 	and.w	r3, r3, #16
 8001ea6:	2b10      	cmp	r3, #16
 8001ea8:	d11b      	bne.n	8001ee2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f06f 0210 	mvn.w	r2, #16
 8001eb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2208      	movs	r2, #8
 8001eb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f927 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 8001ece:	e005      	b.n	8001edc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f919 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f92a 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d10e      	bne.n	8001f0e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d107      	bne.n	8001f0e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f06f 0201 	mvn.w	r2, #1
 8001f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7fe fc55 	bl	80007b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f18:	2b80      	cmp	r3, #128	; 0x80
 8001f1a:	d10e      	bne.n	8001f3a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f26:	2b80      	cmp	r3, #128	; 0x80
 8001f28:	d107      	bne.n	8001f3a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 facf 	bl	80024d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f44:	2b40      	cmp	r3, #64	; 0x40
 8001f46:	d10e      	bne.n	8001f66 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f52:	2b40      	cmp	r3, #64	; 0x40
 8001f54:	d107      	bne.n	8001f66 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f8ef 	bl	8002144 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	2b20      	cmp	r3, #32
 8001f72:	d10e      	bne.n	8001f92 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f003 0320 	and.w	r3, r3, #32
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	d107      	bne.n	8001f92 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f06f 0220 	mvn.w	r2, #32
 8001f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 fa99 	bl	80024c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_TIM_ConfigClockSource+0x18>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e0a6      	b.n	8002100 <HAL_TIM_ConfigClockSource+0x166>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001fd0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fd8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b40      	cmp	r3, #64	; 0x40
 8001fe8:	d067      	beq.n	80020ba <HAL_TIM_ConfigClockSource+0x120>
 8001fea:	2b40      	cmp	r3, #64	; 0x40
 8001fec:	d80b      	bhi.n	8002006 <HAL_TIM_ConfigClockSource+0x6c>
 8001fee:	2b10      	cmp	r3, #16
 8001ff0:	d073      	beq.n	80020da <HAL_TIM_ConfigClockSource+0x140>
 8001ff2:	2b10      	cmp	r3, #16
 8001ff4:	d802      	bhi.n	8001ffc <HAL_TIM_ConfigClockSource+0x62>
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d06f      	beq.n	80020da <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001ffa:	e078      	b.n	80020ee <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d06c      	beq.n	80020da <HAL_TIM_ConfigClockSource+0x140>
 8002000:	2b30      	cmp	r3, #48	; 0x30
 8002002:	d06a      	beq.n	80020da <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002004:	e073      	b.n	80020ee <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002006:	2b70      	cmp	r3, #112	; 0x70
 8002008:	d00d      	beq.n	8002026 <HAL_TIM_ConfigClockSource+0x8c>
 800200a:	2b70      	cmp	r3, #112	; 0x70
 800200c:	d804      	bhi.n	8002018 <HAL_TIM_ConfigClockSource+0x7e>
 800200e:	2b50      	cmp	r3, #80	; 0x50
 8002010:	d033      	beq.n	800207a <HAL_TIM_ConfigClockSource+0xe0>
 8002012:	2b60      	cmp	r3, #96	; 0x60
 8002014:	d041      	beq.n	800209a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002016:	e06a      	b.n	80020ee <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800201c:	d066      	beq.n	80020ec <HAL_TIM_ConfigClockSource+0x152>
 800201e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002022:	d017      	beq.n	8002054 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002024:	e063      	b.n	80020ee <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6899      	ldr	r1, [r3, #8]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	f000 f9a9 	bl	800238c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002048:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	609a      	str	r2, [r3, #8]
      break;
 8002052:	e04c      	b.n	80020ee <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6899      	ldr	r1, [r3, #8]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f000 f992 	bl	800238c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002076:	609a      	str	r2, [r3, #8]
      break;
 8002078:	e039      	b.n	80020ee <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	6859      	ldr	r1, [r3, #4]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	461a      	mov	r2, r3
 8002088:	f000 f906 	bl	8002298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2150      	movs	r1, #80	; 0x50
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f95f 	bl	8002356 <TIM_ITRx_SetConfig>
      break;
 8002098:	e029      	b.n	80020ee <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	6859      	ldr	r1, [r3, #4]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	461a      	mov	r2, r3
 80020a8:	f000 f925 	bl	80022f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2160      	movs	r1, #96	; 0x60
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f94f 	bl	8002356 <TIM_ITRx_SetConfig>
      break;
 80020b8:	e019      	b.n	80020ee <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	6859      	ldr	r1, [r3, #4]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	461a      	mov	r2, r3
 80020c8:	f000 f8e6 	bl	8002298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2140      	movs	r1, #64	; 0x40
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 f93f 	bl	8002356 <TIM_ITRx_SetConfig>
      break;
 80020d8:	e009      	b.n	80020ee <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4619      	mov	r1, r3
 80020e4:	4610      	mov	r0, r2
 80020e6:	f000 f936 	bl	8002356 <TIM_ITRx_SetConfig>
      break;
 80020ea:	e000      	b.n	80020ee <HAL_TIM_ConfigClockSource+0x154>
      break;
 80020ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a40      	ldr	r2, [pc, #256]	; (800226c <TIM_Base_SetConfig+0x114>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d013      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002176:	d00f      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a3d      	ldr	r2, [pc, #244]	; (8002270 <TIM_Base_SetConfig+0x118>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00b      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3c      	ldr	r2, [pc, #240]	; (8002274 <TIM_Base_SetConfig+0x11c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d007      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a3b      	ldr	r2, [pc, #236]	; (8002278 <TIM_Base_SetConfig+0x120>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d003      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a3a      	ldr	r2, [pc, #232]	; (800227c <TIM_Base_SetConfig+0x124>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d108      	bne.n	80021aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a2f      	ldr	r2, [pc, #188]	; (800226c <TIM_Base_SetConfig+0x114>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d02b      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b8:	d027      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2c      	ldr	r2, [pc, #176]	; (8002270 <TIM_Base_SetConfig+0x118>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d023      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a2b      	ldr	r2, [pc, #172]	; (8002274 <TIM_Base_SetConfig+0x11c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d01f      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2a      	ldr	r2, [pc, #168]	; (8002278 <TIM_Base_SetConfig+0x120>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d01b      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a29      	ldr	r2, [pc, #164]	; (800227c <TIM_Base_SetConfig+0x124>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d017      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a28      	ldr	r2, [pc, #160]	; (8002280 <TIM_Base_SetConfig+0x128>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a27      	ldr	r2, [pc, #156]	; (8002284 <TIM_Base_SetConfig+0x12c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00f      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a26      	ldr	r2, [pc, #152]	; (8002288 <TIM_Base_SetConfig+0x130>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00b      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a25      	ldr	r2, [pc, #148]	; (800228c <TIM_Base_SetConfig+0x134>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a24      	ldr	r2, [pc, #144]	; (8002290 <TIM_Base_SetConfig+0x138>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d003      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a23      	ldr	r2, [pc, #140]	; (8002294 <TIM_Base_SetConfig+0x13c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d108      	bne.n	800221c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <TIM_Base_SetConfig+0x114>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d003      	beq.n	8002250 <TIM_Base_SetConfig+0xf8>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a0c      	ldr	r2, [pc, #48]	; (800227c <TIM_Base_SetConfig+0x124>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d103      	bne.n	8002258 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	615a      	str	r2, [r3, #20]
}
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40010000 	.word	0x40010000
 8002270:	40000400 	.word	0x40000400
 8002274:	40000800 	.word	0x40000800
 8002278:	40000c00 	.word	0x40000c00
 800227c:	40010400 	.word	0x40010400
 8002280:	40014000 	.word	0x40014000
 8002284:	40014400 	.word	0x40014400
 8002288:	40014800 	.word	0x40014800
 800228c:	40001800 	.word	0x40001800
 8002290:	40001c00 	.word	0x40001c00
 8002294:	40002000 	.word	0x40002000

08002298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	f023 0201 	bic.w	r2, r3, #1
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f023 030a 	bic.w	r3, r3, #10
 80022d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	4313      	orrs	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	621a      	str	r2, [r3, #32]
}
 80022ea:	bf00      	nop
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b087      	sub	sp, #28
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	f023 0210 	bic.w	r2, r3, #16
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002320:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	031b      	lsls	r3, r3, #12
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002332:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	621a      	str	r2, [r3, #32]
}
 800234a:	bf00      	nop
 800234c:	371c      	adds	r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002356:	b480      	push	{r7}
 8002358:	b085      	sub	sp, #20
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800236c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4313      	orrs	r3, r2
 8002374:	f043 0307 	orr.w	r3, r3, #7
 8002378:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	609a      	str	r2, [r3, #8]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	021a      	lsls	r2, r3, #8
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	431a      	orrs	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	609a      	str	r2, [r3, #8]
}
 80023c0:	bf00      	nop
 80023c2:	371c      	adds	r7, #28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e05a      	b.n	800249a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a21      	ldr	r2, [pc, #132]	; (80024a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d022      	beq.n	800246e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002430:	d01d      	beq.n	800246e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a1d      	ldr	r2, [pc, #116]	; (80024ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d018      	beq.n	800246e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a1b      	ldr	r2, [pc, #108]	; (80024b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d013      	beq.n	800246e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a1a      	ldr	r2, [pc, #104]	; (80024b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d00e      	beq.n	800246e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a18      	ldr	r2, [pc, #96]	; (80024b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d009      	beq.n	800246e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a17      	ldr	r2, [pc, #92]	; (80024bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d004      	beq.n	800246e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d10c      	bne.n	8002488 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002474:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	4313      	orrs	r3, r2
 800247e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40010000 	.word	0x40010000
 80024ac:	40000400 	.word	0x40000400
 80024b0:	40000800 	.word	0x40000800
 80024b4:	40000c00 	.word	0x40000c00
 80024b8:	40010400 	.word	0x40010400
 80024bc:	40014000 	.word	0x40014000
 80024c0:	40001800 	.word	0x40001800

080024c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e03f      	b.n	800257e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7fe faba 	bl	8000a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2224      	movs	r2, #36	; 0x24
 800251c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800252e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fab3 	bl	8002a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002544:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695a      	ldr	r2, [r3, #20]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002586:	b480      	push	{r7}
 8002588:	b085      	sub	sp, #20
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	4613      	mov	r3, r2
 8002592:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b20      	cmp	r3, #32
 800259e:	d140      	bne.n	8002622 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <HAL_UART_Receive_IT+0x26>
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e039      	b.n	8002624 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_UART_Receive_IT+0x38>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e032      	b.n	8002624 <HAL_UART_Receive_IT+0x9e>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	88fa      	ldrh	r2, [r7, #6]
 80025d0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	88fa      	ldrh	r2, [r7, #6]
 80025d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2222      	movs	r2, #34	; 0x22
 80025e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025fc:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 0201 	orr.w	r2, r2, #1
 800260c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0220 	orr.w	r2, r2, #32
 800261c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	e000      	b.n	8002624 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002622:	2302      	movs	r3, #2
  }
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10d      	bne.n	8002682 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_UART_IRQHandler+0x52>
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f98c 	bl	8002998 <UART_Receive_IT>
      return;
 8002680:	e0d1      	b.n	8002826 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 80b0 	beq.w	80027ea <HAL_UART_IRQHandler+0x1ba>
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d105      	bne.n	80026a0 <HAL_UART_IRQHandler+0x70>
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 80a5 	beq.w	80027ea <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_UART_IRQHandler+0x90>
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b8:	f043 0201 	orr.w	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_UART_IRQHandler+0xb0>
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d8:	f043 0202 	orr.w	r2, r3, #2
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_UART_IRQHandler+0xd0>
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f8:	f043 0204 	orr.w	r2, r3, #4
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00f      	beq.n	800272a <HAL_UART_IRQHandler+0xfa>
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	f003 0320 	and.w	r3, r3, #32
 8002710:	2b00      	cmp	r3, #0
 8002712:	d104      	bne.n	800271e <HAL_UART_IRQHandler+0xee>
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002722:	f043 0208 	orr.w	r2, r3, #8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272e:	2b00      	cmp	r3, #0
 8002730:	d078      	beq.n	8002824 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f003 0320 	and.w	r3, r3, #32
 8002738:	2b00      	cmp	r3, #0
 800273a:	d007      	beq.n	800274c <HAL_UART_IRQHandler+0x11c>
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f926 	bl	8002998 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002756:	2b40      	cmp	r3, #64	; 0x40
 8002758:	bf0c      	ite	eq
 800275a:	2301      	moveq	r3, #1
 800275c:	2300      	movne	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d102      	bne.n	8002774 <HAL_UART_IRQHandler+0x144>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d031      	beq.n	80027d8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f86f 	bl	8002858 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002784:	2b40      	cmp	r3, #64	; 0x40
 8002786:	d123      	bne.n	80027d0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695a      	ldr	r2, [r3, #20]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002796:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279c:	2b00      	cmp	r3, #0
 800279e:	d013      	beq.n	80027c8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a4:	4a21      	ldr	r2, [pc, #132]	; (800282c <HAL_UART_IRQHandler+0x1fc>)
 80027a6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fe fc64 	bl	800107a <HAL_DMA_Abort_IT>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d016      	beq.n	80027e6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027c2:	4610      	mov	r0, r2
 80027c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c6:	e00e      	b.n	80027e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f83b 	bl	8002844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ce:	e00a      	b.n	80027e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f837 	bl	8002844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d6:	e006      	b.n	80027e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f833 	bl	8002844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80027e4:	e01e      	b.n	8002824 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e6:	bf00      	nop
    return;
 80027e8:	e01c      	b.n	8002824 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_UART_IRQHandler+0x1d6>
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f85c 	bl	80028bc <UART_Transmit_IT>
    return;
 8002804:	e00f      	b.n	8002826 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <HAL_UART_IRQHandler+0x1f6>
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f8a4 	bl	8002968 <UART_EndTransmit_IT>
    return;
 8002820:	bf00      	nop
 8002822:	e000      	b.n	8002826 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002824:	bf00      	nop
  }
}
 8002826:	3720      	adds	r7, #32
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	08002895 	.word	0x08002895

08002830 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800286e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f7ff ffc8 	bl	8002844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028b4:	bf00      	nop
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b21      	cmp	r3, #33	; 0x21
 80028ce:	d144      	bne.n	800295a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d8:	d11a      	bne.n	8002910 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028ee:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d105      	bne.n	8002904 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	1c9a      	adds	r2, r3, #2
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	621a      	str	r2, [r3, #32]
 8002902:	e00e      	b.n	8002922 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	621a      	str	r2, [r3, #32]
 800290e:	e008      	b.n	8002922 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	1c59      	adds	r1, r3, #1
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6211      	str	r1, [r2, #32]
 800291a:	781a      	ldrb	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29b      	uxth	r3, r3
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	4619      	mov	r1, r3
 8002930:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10f      	bne.n	8002956 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002944:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002954:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	e000      	b.n	800295c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800295a:	2302      	movs	r3, #2
  }
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800297e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff ff51 	bl	8002830 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b22      	cmp	r3, #34	; 0x22
 80029aa:	d171      	bne.n	8002a90 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b4:	d123      	bne.n	80029fe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10e      	bne.n	80029e2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029da:	1c9a      	adds	r2, r3, #2
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	629a      	str	r2, [r3, #40]	; 0x28
 80029e0:	e029      	b.n	8002a36 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	629a      	str	r2, [r3, #40]	; 0x28
 80029fc:	e01b      	b.n	8002a36 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10a      	bne.n	8002a1c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6858      	ldr	r0, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	1c59      	adds	r1, r3, #1
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6291      	str	r1, [r2, #40]	; 0x28
 8002a16:	b2c2      	uxtb	r2, r0
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	e00c      	b.n	8002a36 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a28:	1c58      	adds	r0, r3, #1
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	6288      	str	r0, [r1, #40]	; 0x28
 8002a2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	4619      	mov	r1, r3
 8002a44:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d120      	bne.n	8002a8c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0220 	bic.w	r2, r2, #32
 8002a58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695a      	ldr	r2, [r3, #20]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0201 	bic.w	r2, r2, #1
 8002a78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fd fece 	bl	8000824 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e002      	b.n	8002a92 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	e000      	b.n	8002a92 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002a90:	2302      	movs	r3, #2
  }
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002ade:	f023 030c 	bic.w	r3, r3, #12
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	68f9      	ldr	r1, [r7, #12]
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b0a:	f040 818b 	bne.w	8002e24 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4ac1      	ldr	r2, [pc, #772]	; (8002e18 <UART_SetConfig+0x37c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d005      	beq.n	8002b24 <UART_SetConfig+0x88>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4abf      	ldr	r2, [pc, #764]	; (8002e1c <UART_SetConfig+0x380>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	f040 80bd 	bne.w	8002c9e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b24:	f7ff f8ce 	bl	8001cc4 <HAL_RCC_GetPCLK2Freq>
 8002b28:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	461d      	mov	r5, r3
 8002b2e:	f04f 0600 	mov.w	r6, #0
 8002b32:	46a8      	mov	r8, r5
 8002b34:	46b1      	mov	r9, r6
 8002b36:	eb18 0308 	adds.w	r3, r8, r8
 8002b3a:	eb49 0409 	adc.w	r4, r9, r9
 8002b3e:	4698      	mov	r8, r3
 8002b40:	46a1      	mov	r9, r4
 8002b42:	eb18 0805 	adds.w	r8, r8, r5
 8002b46:	eb49 0906 	adc.w	r9, r9, r6
 8002b4a:	f04f 0100 	mov.w	r1, #0
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b56:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b5a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b5e:	4688      	mov	r8, r1
 8002b60:	4691      	mov	r9, r2
 8002b62:	eb18 0005 	adds.w	r0, r8, r5
 8002b66:	eb49 0106 	adc.w	r1, r9, r6
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	461d      	mov	r5, r3
 8002b70:	f04f 0600 	mov.w	r6, #0
 8002b74:	196b      	adds	r3, r5, r5
 8002b76:	eb46 0406 	adc.w	r4, r6, r6
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4623      	mov	r3, r4
 8002b7e:	f7fd fb23 	bl	80001c8 <__aeabi_uldivmod>
 8002b82:	4603      	mov	r3, r0
 8002b84:	460c      	mov	r4, r1
 8002b86:	461a      	mov	r2, r3
 8002b88:	4ba5      	ldr	r3, [pc, #660]	; (8002e20 <UART_SetConfig+0x384>)
 8002b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	461d      	mov	r5, r3
 8002b98:	f04f 0600 	mov.w	r6, #0
 8002b9c:	46a9      	mov	r9, r5
 8002b9e:	46b2      	mov	sl, r6
 8002ba0:	eb19 0309 	adds.w	r3, r9, r9
 8002ba4:	eb4a 040a 	adc.w	r4, sl, sl
 8002ba8:	4699      	mov	r9, r3
 8002baa:	46a2      	mov	sl, r4
 8002bac:	eb19 0905 	adds.w	r9, r9, r5
 8002bb0:	eb4a 0a06 	adc.w	sl, sl, r6
 8002bb4:	f04f 0100 	mov.w	r1, #0
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bc8:	4689      	mov	r9, r1
 8002bca:	4692      	mov	sl, r2
 8002bcc:	eb19 0005 	adds.w	r0, r9, r5
 8002bd0:	eb4a 0106 	adc.w	r1, sl, r6
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	461d      	mov	r5, r3
 8002bda:	f04f 0600 	mov.w	r6, #0
 8002bde:	196b      	adds	r3, r5, r5
 8002be0:	eb46 0406 	adc.w	r4, r6, r6
 8002be4:	461a      	mov	r2, r3
 8002be6:	4623      	mov	r3, r4
 8002be8:	f7fd faee 	bl	80001c8 <__aeabi_uldivmod>
 8002bec:	4603      	mov	r3, r0
 8002bee:	460c      	mov	r4, r1
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4b8b      	ldr	r3, [pc, #556]	; (8002e20 <UART_SetConfig+0x384>)
 8002bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf8:	095b      	lsrs	r3, r3, #5
 8002bfa:	2164      	movs	r1, #100	; 0x64
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	3332      	adds	r3, #50	; 0x32
 8002c06:	4a86      	ldr	r2, [pc, #536]	; (8002e20 <UART_SetConfig+0x384>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c14:	4498      	add	r8, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	461d      	mov	r5, r3
 8002c1a:	f04f 0600 	mov.w	r6, #0
 8002c1e:	46a9      	mov	r9, r5
 8002c20:	46b2      	mov	sl, r6
 8002c22:	eb19 0309 	adds.w	r3, r9, r9
 8002c26:	eb4a 040a 	adc.w	r4, sl, sl
 8002c2a:	4699      	mov	r9, r3
 8002c2c:	46a2      	mov	sl, r4
 8002c2e:	eb19 0905 	adds.w	r9, r9, r5
 8002c32:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c36:	f04f 0100 	mov.w	r1, #0
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c4a:	4689      	mov	r9, r1
 8002c4c:	4692      	mov	sl, r2
 8002c4e:	eb19 0005 	adds.w	r0, r9, r5
 8002c52:	eb4a 0106 	adc.w	r1, sl, r6
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	461d      	mov	r5, r3
 8002c5c:	f04f 0600 	mov.w	r6, #0
 8002c60:	196b      	adds	r3, r5, r5
 8002c62:	eb46 0406 	adc.w	r4, r6, r6
 8002c66:	461a      	mov	r2, r3
 8002c68:	4623      	mov	r3, r4
 8002c6a:	f7fd faad 	bl	80001c8 <__aeabi_uldivmod>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	460c      	mov	r4, r1
 8002c72:	461a      	mov	r2, r3
 8002c74:	4b6a      	ldr	r3, [pc, #424]	; (8002e20 <UART_SetConfig+0x384>)
 8002c76:	fba3 1302 	umull	r1, r3, r3, r2
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	2164      	movs	r1, #100	; 0x64
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	3332      	adds	r3, #50	; 0x32
 8002c88:	4a65      	ldr	r2, [pc, #404]	; (8002e20 <UART_SetConfig+0x384>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	f003 0207 	and.w	r2, r3, #7
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4442      	add	r2, r8
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	e26f      	b.n	800317e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c9e:	f7fe fffd 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 8002ca2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	461d      	mov	r5, r3
 8002ca8:	f04f 0600 	mov.w	r6, #0
 8002cac:	46a8      	mov	r8, r5
 8002cae:	46b1      	mov	r9, r6
 8002cb0:	eb18 0308 	adds.w	r3, r8, r8
 8002cb4:	eb49 0409 	adc.w	r4, r9, r9
 8002cb8:	4698      	mov	r8, r3
 8002cba:	46a1      	mov	r9, r4
 8002cbc:	eb18 0805 	adds.w	r8, r8, r5
 8002cc0:	eb49 0906 	adc.w	r9, r9, r6
 8002cc4:	f04f 0100 	mov.w	r1, #0
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002cd0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002cd4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002cd8:	4688      	mov	r8, r1
 8002cda:	4691      	mov	r9, r2
 8002cdc:	eb18 0005 	adds.w	r0, r8, r5
 8002ce0:	eb49 0106 	adc.w	r1, r9, r6
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	461d      	mov	r5, r3
 8002cea:	f04f 0600 	mov.w	r6, #0
 8002cee:	196b      	adds	r3, r5, r5
 8002cf0:	eb46 0406 	adc.w	r4, r6, r6
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4623      	mov	r3, r4
 8002cf8:	f7fd fa66 	bl	80001c8 <__aeabi_uldivmod>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	460c      	mov	r4, r1
 8002d00:	461a      	mov	r2, r3
 8002d02:	4b47      	ldr	r3, [pc, #284]	; (8002e20 <UART_SetConfig+0x384>)
 8002d04:	fba3 2302 	umull	r2, r3, r3, r2
 8002d08:	095b      	lsrs	r3, r3, #5
 8002d0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	461d      	mov	r5, r3
 8002d12:	f04f 0600 	mov.w	r6, #0
 8002d16:	46a9      	mov	r9, r5
 8002d18:	46b2      	mov	sl, r6
 8002d1a:	eb19 0309 	adds.w	r3, r9, r9
 8002d1e:	eb4a 040a 	adc.w	r4, sl, sl
 8002d22:	4699      	mov	r9, r3
 8002d24:	46a2      	mov	sl, r4
 8002d26:	eb19 0905 	adds.w	r9, r9, r5
 8002d2a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d2e:	f04f 0100 	mov.w	r1, #0
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d42:	4689      	mov	r9, r1
 8002d44:	4692      	mov	sl, r2
 8002d46:	eb19 0005 	adds.w	r0, r9, r5
 8002d4a:	eb4a 0106 	adc.w	r1, sl, r6
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	461d      	mov	r5, r3
 8002d54:	f04f 0600 	mov.w	r6, #0
 8002d58:	196b      	adds	r3, r5, r5
 8002d5a:	eb46 0406 	adc.w	r4, r6, r6
 8002d5e:	461a      	mov	r2, r3
 8002d60:	4623      	mov	r3, r4
 8002d62:	f7fd fa31 	bl	80001c8 <__aeabi_uldivmod>
 8002d66:	4603      	mov	r3, r0
 8002d68:	460c      	mov	r4, r1
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4b2c      	ldr	r3, [pc, #176]	; (8002e20 <UART_SetConfig+0x384>)
 8002d6e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	2164      	movs	r1, #100	; 0x64
 8002d76:	fb01 f303 	mul.w	r3, r1, r3
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	3332      	adds	r3, #50	; 0x32
 8002d80:	4a27      	ldr	r2, [pc, #156]	; (8002e20 <UART_SetConfig+0x384>)
 8002d82:	fba2 2303 	umull	r2, r3, r2, r3
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d8e:	4498      	add	r8, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	461d      	mov	r5, r3
 8002d94:	f04f 0600 	mov.w	r6, #0
 8002d98:	46a9      	mov	r9, r5
 8002d9a:	46b2      	mov	sl, r6
 8002d9c:	eb19 0309 	adds.w	r3, r9, r9
 8002da0:	eb4a 040a 	adc.w	r4, sl, sl
 8002da4:	4699      	mov	r9, r3
 8002da6:	46a2      	mov	sl, r4
 8002da8:	eb19 0905 	adds.w	r9, r9, r5
 8002dac:	eb4a 0a06 	adc.w	sl, sl, r6
 8002db0:	f04f 0100 	mov.w	r1, #0
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dbc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dc0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dc4:	4689      	mov	r9, r1
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	eb19 0005 	adds.w	r0, r9, r5
 8002dcc:	eb4a 0106 	adc.w	r1, sl, r6
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	461d      	mov	r5, r3
 8002dd6:	f04f 0600 	mov.w	r6, #0
 8002dda:	196b      	adds	r3, r5, r5
 8002ddc:	eb46 0406 	adc.w	r4, r6, r6
 8002de0:	461a      	mov	r2, r3
 8002de2:	4623      	mov	r3, r4
 8002de4:	f7fd f9f0 	bl	80001c8 <__aeabi_uldivmod>
 8002de8:	4603      	mov	r3, r0
 8002dea:	460c      	mov	r4, r1
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <UART_SetConfig+0x384>)
 8002df0:	fba3 1302 	umull	r1, r3, r3, r2
 8002df4:	095b      	lsrs	r3, r3, #5
 8002df6:	2164      	movs	r1, #100	; 0x64
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	3332      	adds	r3, #50	; 0x32
 8002e02:	4a07      	ldr	r2, [pc, #28]	; (8002e20 <UART_SetConfig+0x384>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	f003 0207 	and.w	r2, r3, #7
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4442      	add	r2, r8
 8002e14:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002e16:	e1b2      	b.n	800317e <UART_SetConfig+0x6e2>
 8002e18:	40011000 	.word	0x40011000
 8002e1c:	40011400 	.word	0x40011400
 8002e20:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4ad7      	ldr	r2, [pc, #860]	; (8003188 <UART_SetConfig+0x6ec>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d005      	beq.n	8002e3a <UART_SetConfig+0x39e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4ad6      	ldr	r2, [pc, #856]	; (800318c <UART_SetConfig+0x6f0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	f040 80d1 	bne.w	8002fdc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e3a:	f7fe ff43 	bl	8001cc4 <HAL_RCC_GetPCLK2Freq>
 8002e3e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	469a      	mov	sl, r3
 8002e44:	f04f 0b00 	mov.w	fp, #0
 8002e48:	46d0      	mov	r8, sl
 8002e4a:	46d9      	mov	r9, fp
 8002e4c:	eb18 0308 	adds.w	r3, r8, r8
 8002e50:	eb49 0409 	adc.w	r4, r9, r9
 8002e54:	4698      	mov	r8, r3
 8002e56:	46a1      	mov	r9, r4
 8002e58:	eb18 080a 	adds.w	r8, r8, sl
 8002e5c:	eb49 090b 	adc.w	r9, r9, fp
 8002e60:	f04f 0100 	mov.w	r1, #0
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e6c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e70:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e74:	4688      	mov	r8, r1
 8002e76:	4691      	mov	r9, r2
 8002e78:	eb1a 0508 	adds.w	r5, sl, r8
 8002e7c:	eb4b 0609 	adc.w	r6, fp, r9
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	4619      	mov	r1, r3
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	f04f 0400 	mov.w	r4, #0
 8002e92:	0094      	lsls	r4, r2, #2
 8002e94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e98:	008b      	lsls	r3, r1, #2
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4623      	mov	r3, r4
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	4631      	mov	r1, r6
 8002ea2:	f7fd f991 	bl	80001c8 <__aeabi_uldivmod>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	460c      	mov	r4, r1
 8002eaa:	461a      	mov	r2, r3
 8002eac:	4bb8      	ldr	r3, [pc, #736]	; (8003190 <UART_SetConfig+0x6f4>)
 8002eae:	fba3 2302 	umull	r2, r3, r3, r2
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	469b      	mov	fp, r3
 8002ebc:	f04f 0c00 	mov.w	ip, #0
 8002ec0:	46d9      	mov	r9, fp
 8002ec2:	46e2      	mov	sl, ip
 8002ec4:	eb19 0309 	adds.w	r3, r9, r9
 8002ec8:	eb4a 040a 	adc.w	r4, sl, sl
 8002ecc:	4699      	mov	r9, r3
 8002ece:	46a2      	mov	sl, r4
 8002ed0:	eb19 090b 	adds.w	r9, r9, fp
 8002ed4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ed8:	f04f 0100 	mov.w	r1, #0
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ee4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ee8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002eec:	4689      	mov	r9, r1
 8002eee:	4692      	mov	sl, r2
 8002ef0:	eb1b 0509 	adds.w	r5, fp, r9
 8002ef4:	eb4c 060a 	adc.w	r6, ip, sl
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4619      	mov	r1, r3
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	f04f 0400 	mov.w	r4, #0
 8002f0a:	0094      	lsls	r4, r2, #2
 8002f0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f10:	008b      	lsls	r3, r1, #2
 8002f12:	461a      	mov	r2, r3
 8002f14:	4623      	mov	r3, r4
 8002f16:	4628      	mov	r0, r5
 8002f18:	4631      	mov	r1, r6
 8002f1a:	f7fd f955 	bl	80001c8 <__aeabi_uldivmod>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	460c      	mov	r4, r1
 8002f22:	461a      	mov	r2, r3
 8002f24:	4b9a      	ldr	r3, [pc, #616]	; (8003190 <UART_SetConfig+0x6f4>)
 8002f26:	fba3 1302 	umull	r1, r3, r3, r2
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	2164      	movs	r1, #100	; 0x64
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	3332      	adds	r3, #50	; 0x32
 8002f38:	4a95      	ldr	r2, [pc, #596]	; (8003190 <UART_SetConfig+0x6f4>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f44:	4498      	add	r8, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	469b      	mov	fp, r3
 8002f4a:	f04f 0c00 	mov.w	ip, #0
 8002f4e:	46d9      	mov	r9, fp
 8002f50:	46e2      	mov	sl, ip
 8002f52:	eb19 0309 	adds.w	r3, r9, r9
 8002f56:	eb4a 040a 	adc.w	r4, sl, sl
 8002f5a:	4699      	mov	r9, r3
 8002f5c:	46a2      	mov	sl, r4
 8002f5e:	eb19 090b 	adds.w	r9, r9, fp
 8002f62:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f66:	f04f 0100 	mov.w	r1, #0
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f7a:	4689      	mov	r9, r1
 8002f7c:	4692      	mov	sl, r2
 8002f7e:	eb1b 0509 	adds.w	r5, fp, r9
 8002f82:	eb4c 060a 	adc.w	r6, ip, sl
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	f04f 0400 	mov.w	r4, #0
 8002f98:	0094      	lsls	r4, r2, #2
 8002f9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f9e:	008b      	lsls	r3, r1, #2
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4623      	mov	r3, r4
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	4631      	mov	r1, r6
 8002fa8:	f7fd f90e 	bl	80001c8 <__aeabi_uldivmod>
 8002fac:	4603      	mov	r3, r0
 8002fae:	460c      	mov	r4, r1
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b77      	ldr	r3, [pc, #476]	; (8003190 <UART_SetConfig+0x6f4>)
 8002fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb8:	095b      	lsrs	r3, r3, #5
 8002fba:	2164      	movs	r1, #100	; 0x64
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	3332      	adds	r3, #50	; 0x32
 8002fc6:	4a72      	ldr	r2, [pc, #456]	; (8003190 <UART_SetConfig+0x6f4>)
 8002fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fcc:	095b      	lsrs	r3, r3, #5
 8002fce:	f003 020f 	and.w	r2, r3, #15
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4442      	add	r2, r8
 8002fd8:	609a      	str	r2, [r3, #8]
 8002fda:	e0d0      	b.n	800317e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fdc:	f7fe fe5e 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 8002fe0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	469a      	mov	sl, r3
 8002fe6:	f04f 0b00 	mov.w	fp, #0
 8002fea:	46d0      	mov	r8, sl
 8002fec:	46d9      	mov	r9, fp
 8002fee:	eb18 0308 	adds.w	r3, r8, r8
 8002ff2:	eb49 0409 	adc.w	r4, r9, r9
 8002ff6:	4698      	mov	r8, r3
 8002ff8:	46a1      	mov	r9, r4
 8002ffa:	eb18 080a 	adds.w	r8, r8, sl
 8002ffe:	eb49 090b 	adc.w	r9, r9, fp
 8003002:	f04f 0100 	mov.w	r1, #0
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800300e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003012:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003016:	4688      	mov	r8, r1
 8003018:	4691      	mov	r9, r2
 800301a:	eb1a 0508 	adds.w	r5, sl, r8
 800301e:	eb4b 0609 	adc.w	r6, fp, r9
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4619      	mov	r1, r3
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	f04f 0400 	mov.w	r4, #0
 8003034:	0094      	lsls	r4, r2, #2
 8003036:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800303a:	008b      	lsls	r3, r1, #2
 800303c:	461a      	mov	r2, r3
 800303e:	4623      	mov	r3, r4
 8003040:	4628      	mov	r0, r5
 8003042:	4631      	mov	r1, r6
 8003044:	f7fd f8c0 	bl	80001c8 <__aeabi_uldivmod>
 8003048:	4603      	mov	r3, r0
 800304a:	460c      	mov	r4, r1
 800304c:	461a      	mov	r2, r3
 800304e:	4b50      	ldr	r3, [pc, #320]	; (8003190 <UART_SetConfig+0x6f4>)
 8003050:	fba3 2302 	umull	r2, r3, r3, r2
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	469b      	mov	fp, r3
 800305e:	f04f 0c00 	mov.w	ip, #0
 8003062:	46d9      	mov	r9, fp
 8003064:	46e2      	mov	sl, ip
 8003066:	eb19 0309 	adds.w	r3, r9, r9
 800306a:	eb4a 040a 	adc.w	r4, sl, sl
 800306e:	4699      	mov	r9, r3
 8003070:	46a2      	mov	sl, r4
 8003072:	eb19 090b 	adds.w	r9, r9, fp
 8003076:	eb4a 0a0c 	adc.w	sl, sl, ip
 800307a:	f04f 0100 	mov.w	r1, #0
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003086:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800308a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800308e:	4689      	mov	r9, r1
 8003090:	4692      	mov	sl, r2
 8003092:	eb1b 0509 	adds.w	r5, fp, r9
 8003096:	eb4c 060a 	adc.w	r6, ip, sl
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4619      	mov	r1, r3
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	f04f 0400 	mov.w	r4, #0
 80030ac:	0094      	lsls	r4, r2, #2
 80030ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030b2:	008b      	lsls	r3, r1, #2
 80030b4:	461a      	mov	r2, r3
 80030b6:	4623      	mov	r3, r4
 80030b8:	4628      	mov	r0, r5
 80030ba:	4631      	mov	r1, r6
 80030bc:	f7fd f884 	bl	80001c8 <__aeabi_uldivmod>
 80030c0:	4603      	mov	r3, r0
 80030c2:	460c      	mov	r4, r1
 80030c4:	461a      	mov	r2, r3
 80030c6:	4b32      	ldr	r3, [pc, #200]	; (8003190 <UART_SetConfig+0x6f4>)
 80030c8:	fba3 1302 	umull	r1, r3, r3, r2
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	2164      	movs	r1, #100	; 0x64
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	3332      	adds	r3, #50	; 0x32
 80030da:	4a2d      	ldr	r2, [pc, #180]	; (8003190 <UART_SetConfig+0x6f4>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030e6:	4498      	add	r8, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	469b      	mov	fp, r3
 80030ec:	f04f 0c00 	mov.w	ip, #0
 80030f0:	46d9      	mov	r9, fp
 80030f2:	46e2      	mov	sl, ip
 80030f4:	eb19 0309 	adds.w	r3, r9, r9
 80030f8:	eb4a 040a 	adc.w	r4, sl, sl
 80030fc:	4699      	mov	r9, r3
 80030fe:	46a2      	mov	sl, r4
 8003100:	eb19 090b 	adds.w	r9, r9, fp
 8003104:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003108:	f04f 0100 	mov.w	r1, #0
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003114:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003118:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800311c:	4689      	mov	r9, r1
 800311e:	4692      	mov	sl, r2
 8003120:	eb1b 0509 	adds.w	r5, fp, r9
 8003124:	eb4c 060a 	adc.w	r6, ip, sl
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	4619      	mov	r1, r3
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	f04f 0400 	mov.w	r4, #0
 800313a:	0094      	lsls	r4, r2, #2
 800313c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003140:	008b      	lsls	r3, r1, #2
 8003142:	461a      	mov	r2, r3
 8003144:	4623      	mov	r3, r4
 8003146:	4628      	mov	r0, r5
 8003148:	4631      	mov	r1, r6
 800314a:	f7fd f83d 	bl	80001c8 <__aeabi_uldivmod>
 800314e:	4603      	mov	r3, r0
 8003150:	460c      	mov	r4, r1
 8003152:	461a      	mov	r2, r3
 8003154:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <UART_SetConfig+0x6f4>)
 8003156:	fba3 1302 	umull	r1, r3, r3, r2
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2164      	movs	r1, #100	; 0x64
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	3332      	adds	r3, #50	; 0x32
 8003168:	4a09      	ldr	r2, [pc, #36]	; (8003190 <UART_SetConfig+0x6f4>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	f003 020f 	and.w	r2, r3, #15
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4442      	add	r2, r8
 800317a:	609a      	str	r2, [r3, #8]
}
 800317c:	e7ff      	b.n	800317e <UART_SetConfig+0x6e2>
 800317e:	bf00      	nop
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003188:	40011000 	.word	0x40011000
 800318c:	40011400 	.word	0x40011400
 8003190:	51eb851f 	.word	0x51eb851f

08003194 <atoi>:
 8003194:	220a      	movs	r2, #10
 8003196:	2100      	movs	r1, #0
 8003198:	f000 b8a8 	b.w	80032ec <strtol>

0800319c <__libc_init_array>:
 800319c:	b570      	push	{r4, r5, r6, lr}
 800319e:	4e0d      	ldr	r6, [pc, #52]	; (80031d4 <__libc_init_array+0x38>)
 80031a0:	4c0d      	ldr	r4, [pc, #52]	; (80031d8 <__libc_init_array+0x3c>)
 80031a2:	1ba4      	subs	r4, r4, r6
 80031a4:	10a4      	asrs	r4, r4, #2
 80031a6:	2500      	movs	r5, #0
 80031a8:	42a5      	cmp	r5, r4
 80031aa:	d109      	bne.n	80031c0 <__libc_init_array+0x24>
 80031ac:	4e0b      	ldr	r6, [pc, #44]	; (80031dc <__libc_init_array+0x40>)
 80031ae:	4c0c      	ldr	r4, [pc, #48]	; (80031e0 <__libc_init_array+0x44>)
 80031b0:	f000 f8d4 	bl	800335c <_init>
 80031b4:	1ba4      	subs	r4, r4, r6
 80031b6:	10a4      	asrs	r4, r4, #2
 80031b8:	2500      	movs	r5, #0
 80031ba:	42a5      	cmp	r5, r4
 80031bc:	d105      	bne.n	80031ca <__libc_init_array+0x2e>
 80031be:	bd70      	pop	{r4, r5, r6, pc}
 80031c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031c4:	4798      	blx	r3
 80031c6:	3501      	adds	r5, #1
 80031c8:	e7ee      	b.n	80031a8 <__libc_init_array+0xc>
 80031ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031ce:	4798      	blx	r3
 80031d0:	3501      	adds	r5, #1
 80031d2:	e7f2      	b.n	80031ba <__libc_init_array+0x1e>
 80031d4:	080036a0 	.word	0x080036a0
 80031d8:	080036a0 	.word	0x080036a0
 80031dc:	080036a0 	.word	0x080036a0
 80031e0:	080036a4 	.word	0x080036a4

080031e4 <memset>:
 80031e4:	4402      	add	r2, r0
 80031e6:	4603      	mov	r3, r0
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d100      	bne.n	80031ee <memset+0xa>
 80031ec:	4770      	bx	lr
 80031ee:	f803 1b01 	strb.w	r1, [r3], #1
 80031f2:	e7f9      	b.n	80031e8 <memset+0x4>

080031f4 <_strtol_l.isra.0>:
 80031f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031f8:	4680      	mov	r8, r0
 80031fa:	4689      	mov	r9, r1
 80031fc:	4692      	mov	sl, r2
 80031fe:	461e      	mov	r6, r3
 8003200:	460f      	mov	r7, r1
 8003202:	463d      	mov	r5, r7
 8003204:	9808      	ldr	r0, [sp, #32]
 8003206:	f815 4b01 	ldrb.w	r4, [r5], #1
 800320a:	f000 f885 	bl	8003318 <__locale_ctype_ptr_l>
 800320e:	4420      	add	r0, r4
 8003210:	7843      	ldrb	r3, [r0, #1]
 8003212:	f013 0308 	ands.w	r3, r3, #8
 8003216:	d132      	bne.n	800327e <_strtol_l.isra.0+0x8a>
 8003218:	2c2d      	cmp	r4, #45	; 0x2d
 800321a:	d132      	bne.n	8003282 <_strtol_l.isra.0+0x8e>
 800321c:	787c      	ldrb	r4, [r7, #1]
 800321e:	1cbd      	adds	r5, r7, #2
 8003220:	2201      	movs	r2, #1
 8003222:	2e00      	cmp	r6, #0
 8003224:	d05d      	beq.n	80032e2 <_strtol_l.isra.0+0xee>
 8003226:	2e10      	cmp	r6, #16
 8003228:	d109      	bne.n	800323e <_strtol_l.isra.0+0x4a>
 800322a:	2c30      	cmp	r4, #48	; 0x30
 800322c:	d107      	bne.n	800323e <_strtol_l.isra.0+0x4a>
 800322e:	782b      	ldrb	r3, [r5, #0]
 8003230:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003234:	2b58      	cmp	r3, #88	; 0x58
 8003236:	d14f      	bne.n	80032d8 <_strtol_l.isra.0+0xe4>
 8003238:	786c      	ldrb	r4, [r5, #1]
 800323a:	2610      	movs	r6, #16
 800323c:	3502      	adds	r5, #2
 800323e:	2a00      	cmp	r2, #0
 8003240:	bf14      	ite	ne
 8003242:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003246:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800324a:	2700      	movs	r7, #0
 800324c:	fbb1 fcf6 	udiv	ip, r1, r6
 8003250:	4638      	mov	r0, r7
 8003252:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003256:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800325a:	2b09      	cmp	r3, #9
 800325c:	d817      	bhi.n	800328e <_strtol_l.isra.0+0x9a>
 800325e:	461c      	mov	r4, r3
 8003260:	42a6      	cmp	r6, r4
 8003262:	dd23      	ble.n	80032ac <_strtol_l.isra.0+0xb8>
 8003264:	1c7b      	adds	r3, r7, #1
 8003266:	d007      	beq.n	8003278 <_strtol_l.isra.0+0x84>
 8003268:	4584      	cmp	ip, r0
 800326a:	d31c      	bcc.n	80032a6 <_strtol_l.isra.0+0xb2>
 800326c:	d101      	bne.n	8003272 <_strtol_l.isra.0+0x7e>
 800326e:	45a6      	cmp	lr, r4
 8003270:	db19      	blt.n	80032a6 <_strtol_l.isra.0+0xb2>
 8003272:	fb00 4006 	mla	r0, r0, r6, r4
 8003276:	2701      	movs	r7, #1
 8003278:	f815 4b01 	ldrb.w	r4, [r5], #1
 800327c:	e7eb      	b.n	8003256 <_strtol_l.isra.0+0x62>
 800327e:	462f      	mov	r7, r5
 8003280:	e7bf      	b.n	8003202 <_strtol_l.isra.0+0xe>
 8003282:	2c2b      	cmp	r4, #43	; 0x2b
 8003284:	bf04      	itt	eq
 8003286:	1cbd      	addeq	r5, r7, #2
 8003288:	787c      	ldrbeq	r4, [r7, #1]
 800328a:	461a      	mov	r2, r3
 800328c:	e7c9      	b.n	8003222 <_strtol_l.isra.0+0x2e>
 800328e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003292:	2b19      	cmp	r3, #25
 8003294:	d801      	bhi.n	800329a <_strtol_l.isra.0+0xa6>
 8003296:	3c37      	subs	r4, #55	; 0x37
 8003298:	e7e2      	b.n	8003260 <_strtol_l.isra.0+0x6c>
 800329a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800329e:	2b19      	cmp	r3, #25
 80032a0:	d804      	bhi.n	80032ac <_strtol_l.isra.0+0xb8>
 80032a2:	3c57      	subs	r4, #87	; 0x57
 80032a4:	e7dc      	b.n	8003260 <_strtol_l.isra.0+0x6c>
 80032a6:	f04f 37ff 	mov.w	r7, #4294967295
 80032aa:	e7e5      	b.n	8003278 <_strtol_l.isra.0+0x84>
 80032ac:	1c7b      	adds	r3, r7, #1
 80032ae:	d108      	bne.n	80032c2 <_strtol_l.isra.0+0xce>
 80032b0:	2322      	movs	r3, #34	; 0x22
 80032b2:	f8c8 3000 	str.w	r3, [r8]
 80032b6:	4608      	mov	r0, r1
 80032b8:	f1ba 0f00 	cmp.w	sl, #0
 80032bc:	d107      	bne.n	80032ce <_strtol_l.isra.0+0xda>
 80032be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032c2:	b102      	cbz	r2, 80032c6 <_strtol_l.isra.0+0xd2>
 80032c4:	4240      	negs	r0, r0
 80032c6:	f1ba 0f00 	cmp.w	sl, #0
 80032ca:	d0f8      	beq.n	80032be <_strtol_l.isra.0+0xca>
 80032cc:	b10f      	cbz	r7, 80032d2 <_strtol_l.isra.0+0xde>
 80032ce:	f105 39ff 	add.w	r9, r5, #4294967295
 80032d2:	f8ca 9000 	str.w	r9, [sl]
 80032d6:	e7f2      	b.n	80032be <_strtol_l.isra.0+0xca>
 80032d8:	2430      	movs	r4, #48	; 0x30
 80032da:	2e00      	cmp	r6, #0
 80032dc:	d1af      	bne.n	800323e <_strtol_l.isra.0+0x4a>
 80032de:	2608      	movs	r6, #8
 80032e0:	e7ad      	b.n	800323e <_strtol_l.isra.0+0x4a>
 80032e2:	2c30      	cmp	r4, #48	; 0x30
 80032e4:	d0a3      	beq.n	800322e <_strtol_l.isra.0+0x3a>
 80032e6:	260a      	movs	r6, #10
 80032e8:	e7a9      	b.n	800323e <_strtol_l.isra.0+0x4a>
	...

080032ec <strtol>:
 80032ec:	4b08      	ldr	r3, [pc, #32]	; (8003310 <strtol+0x24>)
 80032ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80032f0:	681c      	ldr	r4, [r3, #0]
 80032f2:	4d08      	ldr	r5, [pc, #32]	; (8003314 <strtol+0x28>)
 80032f4:	6a23      	ldr	r3, [r4, #32]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	bf08      	it	eq
 80032fa:	462b      	moveq	r3, r5
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	4613      	mov	r3, r2
 8003300:	460a      	mov	r2, r1
 8003302:	4601      	mov	r1, r0
 8003304:	4620      	mov	r0, r4
 8003306:	f7ff ff75 	bl	80031f4 <_strtol_l.isra.0>
 800330a:	b003      	add	sp, #12
 800330c:	bd30      	pop	{r4, r5, pc}
 800330e:	bf00      	nop
 8003310:	2000000c 	.word	0x2000000c
 8003314:	20000070 	.word	0x20000070

08003318 <__locale_ctype_ptr_l>:
 8003318:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800331c:	4770      	bx	lr

0800331e <__ascii_mbtowc>:
 800331e:	b082      	sub	sp, #8
 8003320:	b901      	cbnz	r1, 8003324 <__ascii_mbtowc+0x6>
 8003322:	a901      	add	r1, sp, #4
 8003324:	b142      	cbz	r2, 8003338 <__ascii_mbtowc+0x1a>
 8003326:	b14b      	cbz	r3, 800333c <__ascii_mbtowc+0x1e>
 8003328:	7813      	ldrb	r3, [r2, #0]
 800332a:	600b      	str	r3, [r1, #0]
 800332c:	7812      	ldrb	r2, [r2, #0]
 800332e:	1c10      	adds	r0, r2, #0
 8003330:	bf18      	it	ne
 8003332:	2001      	movne	r0, #1
 8003334:	b002      	add	sp, #8
 8003336:	4770      	bx	lr
 8003338:	4610      	mov	r0, r2
 800333a:	e7fb      	b.n	8003334 <__ascii_mbtowc+0x16>
 800333c:	f06f 0001 	mvn.w	r0, #1
 8003340:	e7f8      	b.n	8003334 <__ascii_mbtowc+0x16>

08003342 <__ascii_wctomb>:
 8003342:	b149      	cbz	r1, 8003358 <__ascii_wctomb+0x16>
 8003344:	2aff      	cmp	r2, #255	; 0xff
 8003346:	bf85      	ittet	hi
 8003348:	238a      	movhi	r3, #138	; 0x8a
 800334a:	6003      	strhi	r3, [r0, #0]
 800334c:	700a      	strbls	r2, [r1, #0]
 800334e:	f04f 30ff 	movhi.w	r0, #4294967295
 8003352:	bf98      	it	ls
 8003354:	2001      	movls	r0, #1
 8003356:	4770      	bx	lr
 8003358:	4608      	mov	r0, r1
 800335a:	4770      	bx	lr

0800335c <_init>:
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	bf00      	nop
 8003360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003362:	bc08      	pop	{r3}
 8003364:	469e      	mov	lr, r3
 8003366:	4770      	bx	lr

08003368 <_fini>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	bf00      	nop
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr
