
PEDALERA_beta_V04_STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a350  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00033f34  0800a4d8  0800a4d8  0001a4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803e40c  0803e40c  000501e4  2**0
                  CONTENTS
  4 .ARM          00000008  0803e40c  0803e40c  0004e40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803e414  0803e414  000501e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803e414  0803e414  0004e414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803e418  0803e418  0004e418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0803e41c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ed0  200001e4  0803e600  000501e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  200010b4  0803e600  000510b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000501e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cfee  00000000  00000000  00050214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f11  00000000  00000000  0006d202  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015d0  00000000  00000000  00071118  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013f8  00000000  00000000  000726e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025741  00000000  00000000  00073ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000155a0  00000000  00000000  00099221  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cfe0a  00000000  00000000  000ae7c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017e5cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005984  00000000  00000000  0017e648  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a4c0 	.word	0x0800a4c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	0800a4c0 	.word	0x0800a4c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <makeChord>:

	Parameter: fchord		Number of the chord sent. It was made by setChord() and store in "chordSet[]" vector.

	Returns:	unsigned long	(0xXXXXXX) A 3-byte number that contains the fundamental note in the least significant byte, followed by the 2nd and 3rd notes of the chord.
*/
unsigned long makeChord(unsigned long bnote, uint8_t fchord){
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]

	unsigned long notes;

	notes = bnote;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	60fb      	str	r3, [r7, #12]
	notes += (bnote << 8);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	021b      	lsls	r3, r3, #8
 80004dc:	68fa      	ldr	r2, [r7, #12]
 80004de:	4413      	add	r3, r2
 80004e0:	60fb      	str	r3, [r7, #12]
	notes += (bnote << 16);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	041b      	lsls	r3, r3, #16
 80004e6:	68fa      	ldr	r2, [r7, #12]
 80004e8:	4413      	add	r3, r2
 80004ea:	60fb      	str	r3, [r7, #12]


	notes += chordSet[fchord];
 80004ec:	78fb      	ldrb	r3, [r7, #3]
 80004ee:	4a06      	ldr	r2, [pc, #24]	; (8000508 <makeChord+0x40>)
 80004f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004f4:	68fa      	ldr	r2, [r7, #12]
 80004f6:	4413      	add	r3, r2
 80004f8:	60fb      	str	r3, [r7, #12]


	return notes;
 80004fa:	68fb      	ldr	r3, [r7, #12]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3714      	adds	r7, #20
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	20000204 	.word	0x20000204

0800050c <setChord>:

	Parameter: fnote		id of the pressed note.

	Returns:	void
*/
void setChord(uint8_t fnote){
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]

chordSet[fnote] = hex_chord[chord] - hex_chordInv[chordInv];
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <setChord+0x34>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <setChord+0x38>)
 800051c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <setChord+0x3c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a09      	ldr	r2, [pc, #36]	; (800054c <setChord+0x40>)
 8000526:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	1a8a      	subs	r2, r1, r2
 800052e:	4908      	ldr	r1, [pc, #32]	; (8000550 <setChord+0x44>)
 8000530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	200002a4 	.word	0x200002a4
 8000544:	0800a6e4 	.word	0x0800a6e4
 8000548:	200002a8 	.word	0x200002a8
 800054c:	0800a704 	.word	0x0800a704
 8000550:	20000204 	.word	0x20000204

08000554 <turnOnScreen>:
	Parameters: void

	Returns:	void
*/

void turnOnScreen(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0

	/////////////CARACTERES ESPECIALES

	lcd_cursor_buff(5, 2);
 8000558:	2102      	movs	r1, #2
 800055a:	2005      	movs	r0, #5
 800055c:	f000 fbee 	bl	8000d3c <lcd_cursor_buff>
	lcd_string_buff("BASS  PEDAL");
 8000560:	4808      	ldr	r0, [pc, #32]	; (8000584 <turnOnScreen+0x30>)
 8000562:	f000 fc6f 	bl	8000e44 <lcd_string_buff>
	lcd_cursor_buff(5, 3);
 8000566:	2103      	movs	r1, #3
 8000568:	2005      	movs	r0, #5
 800056a:	f000 fbe7 	bl	8000d3c <lcd_cursor_buff>
	lcd_string_buff("SYNTHESIZER");
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <turnOnScreen+0x34>)
 8000570:	f000 fc68 	bl	8000e44 <lcd_string_buff>
	lcd_upDate_IT();
 8000574:	f000 fd12 	bl	8000f9c <lcd_upDate_IT>


	HAL_Delay(3000);
 8000578:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800057c:	f001 febe 	bl	80022fc <HAL_Delay>
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	0800a584 	.word	0x0800a584
 8000588:	0800a590 	.word	0x0800a590

0800058c <chordScreen>:
	Parameters: void

	Returns:	void
*/

void chordScreen(void){
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	lcd_clearScreen_buff();
 8000590:	f000 fbbe 	bl	8000d10 <lcd_clearScreen_buff>
	lcd_cursor_buff(1,0);
 8000594:	2100      	movs	r1, #0
 8000596:	2001      	movs	r0, #1
 8000598:	f000 fbd0 	bl	8000d3c <lcd_cursor_buff>
	lcd_string_buff("Acorde: ");
 800059c:	4815      	ldr	r0, [pc, #84]	; (80005f4 <chordScreen+0x68>)
 800059e:	f000 fc51 	bl	8000e44 <lcd_string_buff>
	lcd_string_buff( str_chord[chord]);
 80005a2:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <chordScreen+0x6c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a15      	ldr	r2, [pc, #84]	; (80005fc <chordScreen+0x70>)
 80005a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fc49 	bl	8000e44 <lcd_string_buff>
	lcd_cursor_buff(1,1);
 80005b2:	2101      	movs	r1, #1
 80005b4:	2001      	movs	r0, #1
 80005b6:	f000 fbc1 	bl	8000d3c <lcd_cursor_buff>
	lcd_string_buff("Pos:");
 80005ba:	4811      	ldr	r0, [pc, #68]	; (8000600 <chordScreen+0x74>)
 80005bc:	f000 fc42 	bl	8000e44 <lcd_string_buff>
	lcd_string_buff( str_chordInv[chordInv]);
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <chordScreen+0x78>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a10      	ldr	r2, [pc, #64]	; (8000608 <chordScreen+0x7c>)
 80005c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 fc3a 	bl	8000e44 <lcd_string_buff>
	lcd_cursor_buff(1,2);
 80005d0:	2102      	movs	r1, #2
 80005d2:	2001      	movs	r0, #1
 80005d4:	f000 fbb2 	bl	8000d3c <lcd_cursor_buff>
	lcd_string_buff("Grabar acorde");
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <chordScreen+0x80>)
 80005da:	f000 fc33 	bl	8000e44 <lcd_string_buff>

	lcd_cursor_buff(0, chordSelect_cursor);
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <chordScreen+0x84>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4619      	mov	r1, r3
 80005e4:	2000      	movs	r0, #0
 80005e6:	f000 fba9 	bl	8000d3c <lcd_cursor_buff>
	lcd_string_buff(">");
 80005ea:	480a      	ldr	r0, [pc, #40]	; (8000614 <chordScreen+0x88>)
 80005ec:	f000 fc2a 	bl	8000e44 <lcd_string_buff>

}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	0800a59c 	.word	0x0800a59c
 80005f8:	200002a4 	.word	0x200002a4
 80005fc:	20000030 	.word	0x20000030
 8000600:	0800a5a8 	.word	0x0800a5a8
 8000604:	200002a8 	.word	0x200002a8
 8000608:	20000050 	.word	0x20000050
 800060c:	0800a5b0 	.word	0x0800a5b0
 8000610:	2000029c 	.word	0x2000029c
 8000614:	0800a5c0 	.word	0x0800a5c0

08000618 <mainScreen>:
	Parameters: void

	Returns:	void
*/

void mainScreen(void){
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

	extern uint8_t sustainMode;
	extern uint8_t acorde;

  	lcd_clearScreen_buff();
 800061c:	f000 fb78 	bl	8000d10 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 8000620:	2100      	movs	r1, #0
 8000622:	2000      	movs	r0, #0
 8000624:	f000 fb8a 	bl	8000d3c <lcd_cursor_buff>
	lcd_string_buff("Afinacion: ");
 8000628:	4827      	ldr	r0, [pc, #156]	; (80006c8 <mainScreen+0xb0>)
 800062a:	f000 fc0b 	bl	8000e44 <lcd_string_buff>
	lcd_string_buff(str_tunne[firstDoTunning - 48]);
 800062e:	4b27      	ldr	r3, [pc, #156]	; (80006cc <mainScreen+0xb4>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	3b30      	subs	r3, #48	; 0x30
 8000634:	4a26      	ldr	r2, [pc, #152]	; (80006d0 <mainScreen+0xb8>)
 8000636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fc02 	bl	8000e44 <lcd_string_buff>
	lcd_cursor_buff(0,1);
 8000640:	2101      	movs	r1, #1
 8000642:	2000      	movs	r0, #0
 8000644:	f000 fb7a 	bl	8000d3c <lcd_cursor_buff>
	lcd_string_buff("Octava: ");
 8000648:	4822      	ldr	r0, [pc, #136]	; (80006d4 <mainScreen+0xbc>)
 800064a:	f000 fbfb 	bl	8000e44 <lcd_string_buff>
	lcd_string_buff(str_octava[octava + 1]);
 800064e:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <mainScreen+0xc0>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	3301      	adds	r3, #1
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <mainScreen+0xc4>)
 8000656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fbf2 	bl	8000e44 <lcd_string_buff>
	lcd_cursor_buff(0,2);
 8000660:	2102      	movs	r1, #2
 8000662:	2000      	movs	r0, #0
 8000664:	f000 fb6a 	bl	8000d3c <lcd_cursor_buff>
	lcd_string_buff("Sustain: ");
 8000668:	481d      	ldr	r0, [pc, #116]	; (80006e0 <mainScreen+0xc8>)
 800066a:	f000 fbeb 	bl	8000e44 <lcd_string_buff>
	switch (sustainMode){
 800066e:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <mainScreen+0xcc>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d007      	beq.n	8000686 <mainScreen+0x6e>
 8000676:	2b02      	cmp	r3, #2
 8000678:	d009      	beq.n	800068e <mainScreen+0x76>
 800067a:	2b00      	cmp	r3, #0
 800067c:	d10b      	bne.n	8000696 <mainScreen+0x7e>
		case 0:
			lcd_string_buff("OFF");
 800067e:	481a      	ldr	r0, [pc, #104]	; (80006e8 <mainScreen+0xd0>)
 8000680:	f000 fbe0 	bl	8000e44 <lcd_string_buff>
		break;
 8000684:	e007      	b.n	8000696 <mainScreen+0x7e>
		case 1:
			lcd_string_buff("smart");
 8000686:	4819      	ldr	r0, [pc, #100]	; (80006ec <mainScreen+0xd4>)
 8000688:	f000 fbdc 	bl	8000e44 <lcd_string_buff>
		break;
 800068c:	e003      	b.n	8000696 <mainScreen+0x7e>
		case 2:
			lcd_string_buff("clasico");
 800068e:	4818      	ldr	r0, [pc, #96]	; (80006f0 <mainScreen+0xd8>)
 8000690:	f000 fbd8 	bl	8000e44 <lcd_string_buff>
		break;
 8000694:	bf00      	nop
	}//end switch.
	lcd_cursor_buff(0,3);
 8000696:	2103      	movs	r1, #3
 8000698:	2000      	movs	r0, #0
 800069a:	f000 fb4f 	bl	8000d3c <lcd_cursor_buff>
	lcd_string_buff("Acordes: ");
 800069e:	4815      	ldr	r0, [pc, #84]	; (80006f4 <mainScreen+0xdc>)
 80006a0:	f000 fbd0 	bl	8000e44 <lcd_string_buff>
	switch (acorde){
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <mainScreen+0xe0>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <mainScreen+0x9a>
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d004      	beq.n	80006ba <mainScreen+0xa2>
			lcd_string_buff("ON");
		break;
	}//end switch.


}
 80006b0:	e007      	b.n	80006c2 <mainScreen+0xaa>
			lcd_string_buff("OFF");
 80006b2:	480d      	ldr	r0, [pc, #52]	; (80006e8 <mainScreen+0xd0>)
 80006b4:	f000 fbc6 	bl	8000e44 <lcd_string_buff>
		break;
 80006b8:	e003      	b.n	80006c2 <mainScreen+0xaa>
			lcd_string_buff("ON");
 80006ba:	4810      	ldr	r0, [pc, #64]	; (80006fc <mainScreen+0xe4>)
 80006bc:	f000 fbc2 	bl	8000e44 <lcd_string_buff>
		break;
 80006c0:	bf00      	nop
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	0800a5c4 	.word	0x0800a5c4
 80006cc:	200002a0 	.word	0x200002a0
 80006d0:	20000000 	.word	0x20000000
 80006d4:	0800a5d0 	.word	0x0800a5d0
 80006d8:	20000200 	.word	0x20000200
 80006dc:	2000005c 	.word	0x2000005c
 80006e0:	0800a5dc 	.word	0x0800a5dc
 80006e4:	20000278 	.word	0x20000278
 80006e8:	0800a5e8 	.word	0x0800a5e8
 80006ec:	0800a5ec 	.word	0x0800a5ec
 80006f0:	0800a5f4 	.word	0x0800a5f4
 80006f4:	0800a5fc 	.word	0x0800a5fc
 80006f8:	20000279 	.word	0x20000279
 80006fc:	0800a608 	.word	0x0800a608

08000700 <tunneScreen>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void tunneScreen(void){
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 8000704:	f000 fb04 	bl	8000d10 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 8000708:	2100      	movs	r1, #0
 800070a:	2000      	movs	r0, #0
 800070c:	f000 fb16 	bl	8000d3c <lcd_cursor_buff>
	lcd_string_buff("AFINACION: ");
 8000710:	4806      	ldr	r0, [pc, #24]	; (800072c <tunneScreen+0x2c>)
 8000712:	f000 fb97 	bl	8000e44 <lcd_string_buff>
	lcd_string_buff(str_tunne[firstDoTunning - 48]);
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <tunneScreen+0x30>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	3b30      	subs	r3, #48	; 0x30
 800071c:	4a05      	ldr	r2, [pc, #20]	; (8000734 <tunneScreen+0x34>)
 800071e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000722:	4618      	mov	r0, r3
 8000724:	f000 fb8e 	bl	8000e44 <lcd_string_buff>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	0800a60c 	.word	0x0800a60c
 8000730:	200002a0 	.word	0x200002a0
 8000734:	20000000 	.word	0x20000000

08000738 <on_off_octave>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void on_off_octave (void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 800073c:	f000 fae8 	bl	8000d10 <lcd_clearScreen_buff>
	lcd_cursor_buff(3,2);
 8000740:	2102      	movs	r1, #2
 8000742:	2003      	movs	r0, #3
 8000744:	f000 fafa 	bl	8000d3c <lcd_cursor_buff>
	lcd_string_buff("Octava:  ");
 8000748:	4806      	ldr	r0, [pc, #24]	; (8000764 <on_off_octave+0x2c>)
 800074a:	f000 fb7b 	bl	8000e44 <lcd_string_buff>
	lcd_string_buff(str_octava[octava + 1]);
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <on_off_octave+0x30>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	3301      	adds	r3, #1
 8000754:	4a05      	ldr	r2, [pc, #20]	; (800076c <on_off_octave+0x34>)
 8000756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fb72 	bl	8000e44 <lcd_string_buff>

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	0800a630 	.word	0x0800a630
 8000768:	20000200 	.word	0x20000200
 800076c:	2000005c 	.word	0x2000005c

08000770 <recuest_footkey>:
	Parameter: void

	Returns:	void
*/

void recuest_footkey (void){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 8000774:	f000 facc 	bl	8000d10 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 8000778:	2100      	movs	r1, #0
 800077a:	2000      	movs	r0, #0
 800077c:	f000 fade 	bl	8000d3c <lcd_cursor_buff>
	lcd_string_buff("Pulse una tecla para");
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <recuest_footkey+0x28>)
 8000782:	f000 fb5f 	bl	8000e44 <lcd_string_buff>
	lcd_cursor_buff(0,1);
 8000786:	2101      	movs	r1, #1
 8000788:	2000      	movs	r0, #0
 800078a:	f000 fad7 	bl	8000d3c <lcd_cursor_buff>
	lcd_string_buff("grabar el acorde...");
 800078e:	4803      	ldr	r0, [pc, #12]	; (800079c <recuest_footkey+0x2c>)
 8000790:	f000 fb58 	bl	8000e44 <lcd_string_buff>

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	0800a63c 	.word	0x0800a63c
 800079c:	0800a654 	.word	0x0800a654

080007a0 <pop_up_savedChord>:
	Parameter: void

	Returns:	void
*/

void pop_up_savedChord (uint8_t fk){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]

	lcd_clearScreen_buff();
 80007aa:	f000 fab1 	bl	8000d10 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,1);
 80007ae:	2101      	movs	r1, #1
 80007b0:	2000      	movs	r0, #0
 80007b2:	f000 fac3 	bl	8000d3c <lcd_cursor_buff>
	lcd_string_buff("ACORDE GRABADO EN LA");
 80007b6:	480a      	ldr	r0, [pc, #40]	; (80007e0 <pop_up_savedChord+0x40>)
 80007b8:	f000 fb44 	bl	8000e44 <lcd_string_buff>
	lcd_cursor_buff(0,2);
 80007bc:	2102      	movs	r1, #2
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 fabc 	bl	8000d3c <lcd_cursor_buff>
	lcd_string_buff("TECLA ");
 80007c4:	4807      	ldr	r0, [pc, #28]	; (80007e4 <pop_up_savedChord+0x44>)
 80007c6:	f000 fb3d 	bl	8000e44 <lcd_string_buff>
	lcd_string_buff(str_tunne[fk]);
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4a06      	ldr	r2, [pc, #24]	; (80007e8 <pop_up_savedChord+0x48>)
 80007ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fb36 	bl	8000e44 <lcd_string_buff>

}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	0800a668 	.word	0x0800a668
 80007e4:	0800a680 	.word	0x0800a680
 80007e8:	20000000 	.word	0x20000000

080007ec <pop_up_sustain>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void pop_up_sustain (void){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

	extern uint8_t sustainMode;

	lcd_clearScreen_buff();
 80007f0:	f000 fa8e 	bl	8000d10 <lcd_clearScreen_buff>
	lcd_cursor_buff(2,1);
 80007f4:	2101      	movs	r1, #1
 80007f6:	2002      	movs	r0, #2
 80007f8:	f000 faa0 	bl	8000d3c <lcd_cursor_buff>
	lcd_string_buff("Sustain: ");
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <pop_up_sustain+0x44>)
 80007fe:	f000 fb21 	bl	8000e44 <lcd_string_buff>
	switch (sustainMode){
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <pop_up_sustain+0x48>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d008      	beq.n	800081c <pop_up_sustain+0x30>
 800080a:	2b02      	cmp	r3, #2
 800080c:	d00a      	beq.n	8000824 <pop_up_sustain+0x38>
 800080e:	2b00      	cmp	r3, #0
 8000810:	d000      	beq.n	8000814 <pop_up_sustain+0x28>
		case 2:
			lcd_string_buff("clasico");
		break;
	}//end switch.

}
 8000812:	e00b      	b.n	800082c <pop_up_sustain+0x40>
			lcd_string_buff("OFF");
 8000814:	4808      	ldr	r0, [pc, #32]	; (8000838 <pop_up_sustain+0x4c>)
 8000816:	f000 fb15 	bl	8000e44 <lcd_string_buff>
		break;
 800081a:	e007      	b.n	800082c <pop_up_sustain+0x40>
			lcd_string_buff("smart");
 800081c:	4807      	ldr	r0, [pc, #28]	; (800083c <pop_up_sustain+0x50>)
 800081e:	f000 fb11 	bl	8000e44 <lcd_string_buff>
		break;
 8000822:	e003      	b.n	800082c <pop_up_sustain+0x40>
			lcd_string_buff("clasico");
 8000824:	4806      	ldr	r0, [pc, #24]	; (8000840 <pop_up_sustain+0x54>)
 8000826:	f000 fb0d 	bl	8000e44 <lcd_string_buff>
		break;
 800082a:	bf00      	nop
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	0800a5dc 	.word	0x0800a5dc
 8000834:	20000278 	.word	0x20000278
 8000838:	0800a5e8 	.word	0x0800a5e8
 800083c:	0800a5ec 	.word	0x0800a5ec
 8000840:	0800a5f4 	.word	0x0800a5f4

08000844 <pop_up_cancel>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void pop_up_cancel (void){
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 8000848:	f000 fa62 	bl	8000d10 <lcd_clearScreen_buff>
	lcd_cursor_buff(2,1);
 800084c:	2101      	movs	r1, #1
 800084e:	2002      	movs	r0, #2
 8000850:	f000 fa74 	bl	8000d3c <lcd_cursor_buff>
	lcd_string_buff("ACCION CANCELADA");
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <pop_up_cancel+0x1c>)
 8000856:	f000 faf5 	bl	8000e44 <lcd_string_buff>

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	0800a688 	.word	0x0800a688

08000864 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800086a:	463b      	mov	r3, r7
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_DAC_Init+0x60>)
 8000874:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <MX_DAC_Init+0x64>)
 8000876:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000878:	4812      	ldr	r0, [pc, #72]	; (80008c4 <MX_DAC_Init+0x60>)
 800087a:	f001 fe72 	bl	8002562 <HAL_DAC_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000884:	f001 fa22 	bl	8001ccc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000888:	2300      	movs	r3, #0
 800088a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	480b      	ldr	r0, [pc, #44]	; (80008c4 <MX_DAC_Init+0x60>)
 8000898:	f001 feeb 	bl	8002672 <HAL_DAC_ConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80008a2:	f001 fa13 	bl	8001ccc <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80008a6:	463b      	mov	r3, r7
 80008a8:	2210      	movs	r2, #16
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_DAC_Init+0x60>)
 80008ae:	f001 fee0 	bl	8002672 <HAL_DAC_ConfigChannel>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80008b8:	f001 fa08 	bl	8001ccc <Error_Handler>
  }

}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200002b0 	.word	0x200002b0
 80008c8:	40007400 	.word	0x40007400

080008cc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a17      	ldr	r2, [pc, #92]	; (8000948 <HAL_DAC_MspInit+0x7c>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d127      	bne.n	800093e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <HAL_DAC_MspInit+0x80>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a15      	ldr	r2, [pc, #84]	; (800094c <HAL_DAC_MspInit+0x80>)
 80008f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <HAL_DAC_MspInit+0x80>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_DAC_MspInit+0x80>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <HAL_DAC_MspInit+0x80>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <HAL_DAC_MspInit+0x80>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000926:	2330      	movs	r3, #48	; 0x30
 8000928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800092a:	2303      	movs	r3, #3
 800092c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <HAL_DAC_MspInit+0x84>)
 800093a:	f001 ff3d 	bl	80027b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800093e:	bf00      	nop
 8000940:	3728      	adds	r7, #40	; 0x28
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40007400 	.word	0x40007400
 800094c:	40023800 	.word	0x40023800
 8000950:	40020000 	.word	0x40020000

08000954 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08c      	sub	sp, #48	; 0x30
 8000958:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
 800096e:	4b5b      	ldr	r3, [pc, #364]	; (8000adc <MX_GPIO_Init+0x188>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a5a      	ldr	r2, [pc, #360]	; (8000adc <MX_GPIO_Init+0x188>)
 8000974:	f043 0310 	orr.w	r3, r3, #16
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b58      	ldr	r3, [pc, #352]	; (8000adc <MX_GPIO_Init+0x188>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0310 	and.w	r3, r3, #16
 8000982:	61bb      	str	r3, [r7, #24]
 8000984:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	4b54      	ldr	r3, [pc, #336]	; (8000adc <MX_GPIO_Init+0x188>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a53      	ldr	r2, [pc, #332]	; (8000adc <MX_GPIO_Init+0x188>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b51      	ldr	r3, [pc, #324]	; (8000adc <MX_GPIO_Init+0x188>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b4d      	ldr	r3, [pc, #308]	; (8000adc <MX_GPIO_Init+0x188>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a4c      	ldr	r2, [pc, #304]	; (8000adc <MX_GPIO_Init+0x188>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b4a      	ldr	r3, [pc, #296]	; (8000adc <MX_GPIO_Init+0x188>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b46      	ldr	r3, [pc, #280]	; (8000adc <MX_GPIO_Init+0x188>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a45      	ldr	r2, [pc, #276]	; (8000adc <MX_GPIO_Init+0x188>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b43      	ldr	r3, [pc, #268]	; (8000adc <MX_GPIO_Init+0x188>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	4b3f      	ldr	r3, [pc, #252]	; (8000adc <MX_GPIO_Init+0x188>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a3e      	ldr	r2, [pc, #248]	; (8000adc <MX_GPIO_Init+0x188>)
 80009e4:	f043 0308 	orr.w	r3, r3, #8
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b3c      	ldr	r3, [pc, #240]	; (8000adc <MX_GPIO_Init+0x188>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0308 	and.w	r3, r3, #8
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b38      	ldr	r3, [pc, #224]	; (8000adc <MX_GPIO_Init+0x188>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a37      	ldr	r2, [pc, #220]	; (8000adc <MX_GPIO_Init+0x188>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b35      	ldr	r3, [pc, #212]	; (8000adc <MX_GPIO_Init+0x188>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_VERDE_Pin|LED_NARANJA_Pin|LED_ROJO_Pin|LED_AZUL_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a18:	4831      	ldr	r0, [pc, #196]	; (8000ae0 <MX_GPIO_Init+0x18c>)
 8000a1a:	f002 f87f 	bl	8002b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = MIb_Pin|LA_Pin|RE_Pin|LAb_Pin
 8000a1e:	237f      	movs	r3, #127	; 0x7f
 8000a20:	61fb      	str	r3, [r7, #28]
                          |REb_Pin|MI_Pin|SIb_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	482c      	ldr	r0, [pc, #176]	; (8000ae4 <MX_GPIO_Init+0x190>)
 8000a32:	f001 fec1 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SOL_Pin|DO_Pin|SOLb_Pin|CHORD_Pin
 8000a36:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8000a3a:	61fb      	str	r3, [r7, #28]
                          |PRESET0_Pin|PRESET1_Pin|LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4827      	ldr	r0, [pc, #156]	; (8000ae8 <MX_GPIO_Init+0x194>)
 8000a4c:	f001 feb4 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOTON_AZUL_Pin;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOTON_AZUL_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	4822      	ldr	r0, [pc, #136]	; (8000aec <MX_GPIO_Init+0x198>)
 8000a64:	f001 fea8 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_VERDE_Pin|LED_NARANJA_Pin|LED_ROJO_Pin|LED_AZUL_Pin;
 8000a68:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4817      	ldr	r0, [pc, #92]	; (8000ae0 <MX_GPIO_Init+0x18c>)
 8000a82:	f001 fe99 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PRESET5_Pin|PRESET4_Pin|PRESET3_Pin|PRESET2_Pin;
 8000a86:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4814      	ldr	r0, [pc, #80]	; (8000aec <MX_GPIO_Init+0x198>)
 8000a9c:	f001 fe8c 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = RIGHT_Pin|UP_Pin|DOWN_Pin|TUNNE_Pin
 8000aa0:	23ef      	movs	r3, #239	; 0xef
 8000aa2:	61fb      	str	r3, [r7, #28]
                          |SUST_MIDI_Pin|OCT_A_Pin|SUST_PROP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <MX_GPIO_Init+0x18c>)
 8000ab4:	f001 fe80 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = OCT_M_Pin|DO8_Pin|OCT_G_Pin|FA_Pin
 8000ab8:	f44f 734e 	mov.w	r3, #824	; 0x338
 8000abc:	61fb      	str	r3, [r7, #28]
                          |SI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	4808      	ldr	r0, [pc, #32]	; (8000af0 <MX_GPIO_Init+0x19c>)
 8000ace:	f001 fe73 	bl	80027b8 <HAL_GPIO_Init>

}
 8000ad2:	bf00      	nop
 8000ad4:	3730      	adds	r7, #48	; 0x30
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020c00 	.word	0x40020c00
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40020800 	.word	0x40020800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40020400 	.word	0x40020400

08000af4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000afa:	4a13      	ldr	r2, [pc, #76]	; (8000b48 <MX_I2C1_Init+0x54>)
 8000afc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b00:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <MX_I2C1_Init+0x58>)
 8000b02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b32:	f002 f80d 	bl	8002b50 <HAL_I2C_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b3c:	f001 f8c6 	bl	8001ccc <Error_Handler>
  }

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200002c4 	.word	0x200002c4
 8000b48:	40005400 	.word	0x40005400
 8000b4c:	00061a80 	.word	0x00061a80

08000b50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a21      	ldr	r2, [pc, #132]	; (8000bf4 <HAL_I2C_MspInit+0xa4>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d13b      	bne.n	8000bea <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <HAL_I2C_MspInit+0xa8>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a1f      	ldr	r2, [pc, #124]	; (8000bf8 <HAL_I2C_MspInit+0xa8>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <HAL_I2C_MspInit+0xa8>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b8e:	23c0      	movs	r3, #192	; 0xc0
 8000b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b92:	2312      	movs	r3, #18
 8000b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4814      	ldr	r0, [pc, #80]	; (8000bfc <HAL_I2C_MspInit+0xac>)
 8000baa:	f001 fe05 	bl	80027b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_I2C_MspInit+0xa8>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <HAL_I2C_MspInit+0xa8>)
 8000bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <HAL_I2C_MspInit+0xa8>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	201f      	movs	r0, #31
 8000bd0:	f001 fc91 	bl	80024f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000bd4:	201f      	movs	r0, #31
 8000bd6:	f001 fcaa 	bl	800252e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2020      	movs	r0, #32
 8000be0:	f001 fc89 	bl	80024f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000be4:	2020      	movs	r0, #32
 8000be6:	f001 fca2 	bl	800252e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bea:	bf00      	nop
 8000bec:	3728      	adds	r7, #40	; 0x28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40005400 	.word	0x40005400
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020400 	.word	0x40020400

08000c00 <__lcd_send_cmd>:
uint8_t flag_sendLcd = 1;
uint8_t I2CtxComplete = 1;

/*Used by lcd_init() only*/
void __lcd_send_cmd (char cmd)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af02      	add	r7, sp, #8
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f023 030f 	bic.w	r3, r3, #15
 8000c10:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	f043 030c 	orr.w	r3, r3, #12
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000c2c:	7bbb      	ldrb	r3, [r7, #14]
 8000c2e:	f043 030c 	orr.w	r3, r3, #12
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000c36:	7bbb      	ldrb	r3, [r7, #14]
 8000c38:	f043 0308 	orr.w	r3, r3, #8
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <__lcd_send_cmd+0x60>)
 8000c42:	6818      	ldr	r0, [r3, #0]
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <__lcd_send_cmd+0x64>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b299      	uxth	r1, r3
 8000c4a:	f107 0208 	add.w	r2, r7, #8
 8000c4e:	2364      	movs	r3, #100	; 0x64
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	2304      	movs	r3, #4
 8000c54:	f002 f8b4 	bl	8002dc0 <HAL_I2C_Master_Transmit>
}
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	200005c4 	.word	0x200005c4
 8000c64:	200005c0 	.word	0x200005c0

08000c68 <__lcd_send_cmd_buff>:

void __lcd_send_cmd_buff (char cmd)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f023 030f 	bic.w	r3, r3, #15
 8000c78:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	011b      	lsls	r3, r3, #4
 8000c7e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	f043 030c 	orr.w	r3, r3, #12
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	f043 030c 	orr.w	r3, r3, #12
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000c9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ca0:	f043 0308 	orr.w	r3, r3, #8
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
	__add_to_lcdBuff((uint8_t*)data_t,4);
 8000ca8:	f107 0308 	add.w	r3, r7, #8
 8000cac:	2104      	movs	r1, #4
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f8dc 	bl	8000e6c <__add_to_lcdBuff>
}
 8000cb4:	bf00      	nop
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <__lcd_send_data_buff>:


void __lcd_send_data_buff (char data)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f023 030f 	bic.w	r3, r3, #15
 8000ccc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	011b      	lsls	r3, r3, #4
 8000cd2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	f043 030d 	orr.w	r3, r3, #13
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	f043 0309 	orr.w	r3, r3, #9
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000ce8:	7bbb      	ldrb	r3, [r7, #14]
 8000cea:	f043 030d 	orr.w	r3, r3, #13
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000cf2:	7bbb      	ldrb	r3, [r7, #14]
 8000cf4:	f043 0309 	orr.w	r3, r3, #9
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
	__add_to_lcdBuff((uint8_t*)data_t,4);
 8000cfc:	f107 0308 	add.w	r3, r7, #8
 8000d00:	2104      	movs	r1, #4
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f8b2 	bl	8000e6c <__add_to_lcdBuff>
}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <lcd_clearScreen_buff>:


void lcd_clearScreen_buff (void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
	__lcd_send_cmd_buff (0x80);
 8000d16:	2080      	movs	r0, #128	; 0x80
 8000d18:	f7ff ffa6 	bl	8000c68 <__lcd_send_cmd_buff>
	for (int i=0; i<80; i++)
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	e005      	b.n	8000d2e <lcd_clearScreen_buff+0x1e>
	{
		__lcd_send_data_buff (' ');
 8000d22:	2020      	movs	r0, #32
 8000d24:	f7ff ffca 	bl	8000cbc <__lcd_send_data_buff>
	for (int i=0; i<80; i++)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b4f      	cmp	r3, #79	; 0x4f
 8000d32:	ddf6      	ble.n	8000d22 <lcd_clearScreen_buff+0x12>
	}
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <lcd_cursor_buff>:


void lcd_cursor_buff(int x, int y)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
    switch (y){
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	2b03      	cmp	r3, #3
 8000d4a:	d82b      	bhi.n	8000da4 <lcd_cursor_buff+0x68>
 8000d4c:	a201      	add	r2, pc, #4	; (adr r2, 8000d54 <lcd_cursor_buff+0x18>)
 8000d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d52:	bf00      	nop
 8000d54:	08000d65 	.word	0x08000d65
 8000d58:	08000d75 	.word	0x08000d75
 8000d5c:	08000d85 	.word	0x08000d85
 8000d60:	08000d95 	.word	0x08000d95
    	case 0:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE1 + x);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	3b80      	subs	r3, #128	; 0x80
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff7b 	bl	8000c68 <__lcd_send_cmd_buff>
    	break;
 8000d72:	e017      	b.n	8000da4 <lcd_cursor_buff+0x68>
    	case 1:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE2 + x);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	3b40      	subs	r3, #64	; 0x40
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff73 	bl	8000c68 <__lcd_send_cmd_buff>
    	break;
 8000d82:	e00f      	b.n	8000da4 <lcd_cursor_buff+0x68>
    	case 2:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE3 + x);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	3b6c      	subs	r3, #108	; 0x6c
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff6b 	bl	8000c68 <__lcd_send_cmd_buff>
    	break;
 8000d92:	e007      	b.n	8000da4 <lcd_cursor_buff+0x68>
    	case 3:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE4 + x);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	3b2c      	subs	r3, #44	; 0x2c
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff63 	bl	8000c68 <__lcd_send_cmd_buff>
    	break;
 8000da2:	bf00      	nop
    }
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <lcd_init>:


void lcd_init (I2C_HandleTypeDef* hi2c, uint8_t i2c_address)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	70fb      	strb	r3, [r7, #3]
	i2c_handler = hi2c; //set the i2c handler struct.
 8000db8:	4a20      	ldr	r2, [pc, #128]	; (8000e3c <lcd_init+0x90>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6013      	str	r3, [r2, #0]
	SLAVE_ADDRESS_LCD = (i2c_address << 1); //set the lcd i2c address (left alignment).
 8000dbe:	78fb      	ldrb	r3, [r7, #3]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <lcd_init+0x94>)
 8000dc6:	701a      	strb	r2, [r3, #0]

	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000dc8:	2032      	movs	r0, #50	; 0x32
 8000dca:	f001 fa97 	bl	80022fc <HAL_Delay>
	__lcd_send_cmd (0x30);
 8000dce:	2030      	movs	r0, #48	; 0x30
 8000dd0:	f7ff ff16 	bl	8000c00 <__lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000dd4:	2005      	movs	r0, #5
 8000dd6:	f001 fa91 	bl	80022fc <HAL_Delay>
	__lcd_send_cmd (0x30);
 8000dda:	2030      	movs	r0, #48	; 0x30
 8000ddc:	f7ff ff10 	bl	8000c00 <__lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000de0:	2001      	movs	r0, #1
 8000de2:	f001 fa8b 	bl	80022fc <HAL_Delay>
	__lcd_send_cmd (0x30);
 8000de6:	2030      	movs	r0, #48	; 0x30
 8000de8:	f7ff ff0a 	bl	8000c00 <__lcd_send_cmd>
	HAL_Delay(10);
 8000dec:	200a      	movs	r0, #10
 8000dee:	f001 fa85 	bl	80022fc <HAL_Delay>
	__lcd_send_cmd (0x20);  // 4bit mode
 8000df2:	2020      	movs	r0, #32
 8000df4:	f7ff ff04 	bl	8000c00 <__lcd_send_cmd>
	HAL_Delay(10);
 8000df8:	200a      	movs	r0, #10
 8000dfa:	f001 fa7f 	bl	80022fc <HAL_Delay>

  // dislay initialisation
	__lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000dfe:	2028      	movs	r0, #40	; 0x28
 8000e00:	f7ff fefe 	bl	8000c00 <__lcd_send_cmd>
	HAL_Delay(1);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f001 fa79 	bl	80022fc <HAL_Delay>
	__lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000e0a:	2008      	movs	r0, #8
 8000e0c:	f7ff fef8 	bl	8000c00 <__lcd_send_cmd>
	HAL_Delay(1);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f001 fa73 	bl	80022fc <HAL_Delay>
	__lcd_send_cmd (0x01);  // clear display
 8000e16:	2001      	movs	r0, #1
 8000e18:	f7ff fef2 	bl	8000c00 <__lcd_send_cmd>
	HAL_Delay(2);
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f001 fa6d 	bl	80022fc <HAL_Delay>
	__lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000e22:	2006      	movs	r0, #6
 8000e24:	f7ff feec 	bl	8000c00 <__lcd_send_cmd>
	HAL_Delay(1);
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f001 fa67 	bl	80022fc <HAL_Delay>
	__lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000e2e:	200c      	movs	r0, #12
 8000e30:	f7ff fee6 	bl	8000c00 <__lcd_send_cmd>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200005c4 	.word	0x200005c4
 8000e40:	200005c0 	.word	0x200005c0

08000e44 <lcd_string_buff>:


void lcd_string_buff (char *str)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	while (*str) __lcd_send_data_buff(*str++);
 8000e4c:	e006      	b.n	8000e5c <lcd_string_buff+0x18>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	1c5a      	adds	r2, r3, #1
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ff30 	bl	8000cbc <__lcd_send_data_buff>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1f4      	bne.n	8000e4e <lcd_string_buff+0xa>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <__add_to_lcdBuff>:


void __add_to_lcdBuff(uint8_t* data, uint8_t sizeData){
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	73fb      	strb	r3, [r7, #15]
	while (i < sizeData){
 8000e7c:	e018      	b.n	8000eb0 <__add_to_lcdBuff+0x44>
		lcd_circ_buffer[lcd_circ_buff_in] = *(data + i);
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a11      	ldr	r2, [pc, #68]	; (8000ecc <__add_to_lcdBuff+0x60>)
 8000e86:	8812      	ldrh	r2, [r2, #0]
 8000e88:	7819      	ldrb	r1, [r3, #0]
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <__add_to_lcdBuff+0x64>)
 8000e8c:	5499      	strb	r1, [r3, r2]
		lcd_circ_buff_in++;
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <__add_to_lcdBuff+0x60>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	3301      	adds	r3, #1
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <__add_to_lcdBuff+0x60>)
 8000e98:	801a      	strh	r2, [r3, #0]
		i++;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
		if (lcd_circ_buff_in == LCD_CIRCBUFF_MAX){
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <__add_to_lcdBuff+0x60>)
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8000ea8:	d102      	bne.n	8000eb0 <__add_to_lcdBuff+0x44>
			lcd_circ_buff_in = 0;
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <__add_to_lcdBuff+0x60>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	801a      	strh	r2, [r3, #0]
	while (i < sizeData){
 8000eb0:	7bfa      	ldrb	r2, [r7, #15]
 8000eb2:	78fb      	ldrb	r3, [r7, #3]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d3e2      	bcc.n	8000e7e <__add_to_lcdBuff+0x12>
		}
	}
	flag_sendLcd = 1;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <__add_to_lcdBuff+0x68>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000238 	.word	0x20000238
 8000ed0:	20000318 	.word	0x20000318
 8000ed4:	20000068 	.word	0x20000068

08000ed8 <__lcd_sendBuff_IT>:


void __lcd_sendBuff_IT (void){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
	extern uint8_t I2CtxComplete;

	uint16_t I2C_Tx_ptr;
	uint16_t I2C_Tx_length;

	if (I2CtxComplete != 0){ //si no termino la transmision anterior...
 8000ede:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <__lcd_sendBuff_IT+0xa4>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d046      	beq.n	8000f74 <__lcd_sendBuff_IT+0x9c>

		if (lcd_circ_buff_out == LCD_CIRCBUFF_MAX){
 8000ee6:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <__lcd_sendBuff_IT+0xa8>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8000eee:	d102      	bne.n	8000ef6 <__lcd_sendBuff_IT+0x1e>
			lcd_circ_buff_out = 0;
 8000ef0:	4b23      	ldr	r3, [pc, #140]	; (8000f80 <__lcd_sendBuff_IT+0xa8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	801a      	strh	r2, [r3, #0]
		}

		if (lcd_circ_buff_out == lcd_circ_buff_in){
 8000ef6:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <__lcd_sendBuff_IT+0xa8>)
 8000ef8:	881a      	ldrh	r2, [r3, #0]
 8000efa:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <__lcd_sendBuff_IT+0xac>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d103      	bne.n	8000f0a <__lcd_sendBuff_IT+0x32>
			//no hay transmisión acá
			flag_sendLcd = 0;
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <__lcd_sendBuff_IT+0xb0>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
			return;
 8000f08:	e034      	b.n	8000f74 <__lcd_sendBuff_IT+0x9c>
		}

		if (lcd_circ_buff_out > lcd_circ_buff_in){
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <__lcd_sendBuff_IT+0xa8>)
 8000f0c:	881a      	ldrh	r2, [r3, #0]
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <__lcd_sendBuff_IT+0xac>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d907      	bls.n	8000f26 <__lcd_sendBuff_IT+0x4e>
			lcd_tx_length = LCD_CIRCBUFF_MAX - lcd_circ_buff_out;//transmite solo hasta el final del buffer, para luego reacomodar los punteros.
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <__lcd_sendBuff_IT+0xa8>)
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	f5c3 732a 	rsb	r3, r3, #680	; 0x2a8
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <__lcd_sendBuff_IT+0xb4>)
 8000f22:	801a      	strh	r2, [r3, #0]
 8000f24:	e007      	b.n	8000f36 <__lcd_sendBuff_IT+0x5e>
		}else{
			lcd_tx_length = lcd_circ_buff_in - lcd_circ_buff_out;
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <__lcd_sendBuff_IT+0xac>)
 8000f28:	881a      	ldrh	r2, [r3, #0]
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <__lcd_sendBuff_IT+0xa8>)
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <__lcd_sendBuff_IT+0xb4>)
 8000f34:	801a      	strh	r2, [r3, #0]
		}

		I2C_Tx_ptr = lcd_circ_buff_out;
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <__lcd_sendBuff_IT+0xa8>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	80fb      	strh	r3, [r7, #6]
		I2C_Tx_length = lcd_tx_length;
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <__lcd_sendBuff_IT+0xb4>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	80bb      	strh	r3, [r7, #4]
		lcd_circ_buff_out += lcd_tx_length;
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <__lcd_sendBuff_IT+0xa8>)
 8000f44:	881a      	ldrh	r2, [r3, #0]
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <__lcd_sendBuff_IT+0xb4>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <__lcd_sendBuff_IT+0xa8>)
 8000f50:	801a      	strh	r2, [r3, #0]
		lcd_tx_length = 0;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <__lcd_sendBuff_IT+0xb4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	801a      	strh	r2, [r3, #0]

		I2CtxComplete = 0;
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <__lcd_sendBuff_IT+0xa4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) &lcd_circ_buffer[I2C_Tx_ptr],I2C_Tx_length);
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <__lcd_sendBuff_IT+0xb8>)
 8000f60:	6818      	ldr	r0, [r3, #0]
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <__lcd_sendBuff_IT+0xbc>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b299      	uxth	r1, r3
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <__lcd_sendBuff_IT+0xc0>)
 8000f6c:	441a      	add	r2, r3
 8000f6e:	88bb      	ldrh	r3, [r7, #4]
 8000f70:	f002 f824 	bl	8002fbc <HAL_I2C_Master_Transmit_IT>
	}

}
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000069 	.word	0x20000069
 8000f80:	2000023a 	.word	0x2000023a
 8000f84:	20000238 	.word	0x20000238
 8000f88:	20000068 	.word	0x20000068
 8000f8c:	2000023c 	.word	0x2000023c
 8000f90:	200005c4 	.word	0x200005c4
 8000f94:	200005c0 	.word	0x200005c0
 8000f98:	20000318 	.word	0x20000318

08000f9c <lcd_upDate_IT>:


void lcd_upDate_IT(void){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	if (flag_sendLcd) __lcd_sendBuff_IT();
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <lcd_upDate_IT+0x14>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <lcd_upDate_IT+0x10>
 8000fa8:	f7ff ff96 	bl	8000ed8 <__lcd_sendBuff_IT>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000068 	.word	0x20000068

08000fb4 <_lcd_ISR>:


/* Insert the next function in your ISR*/
void _lcd_ISR (void){
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
	I2CtxComplete=1;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <_lcd_ISR+0x14>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	20000069 	.word	0x20000069

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd0:	f001 f922 	bl	8002218 <HAL_Init>

  /* USER CODE BEGIN Init */
  firstDoTunning = 36;
 8000fd4:	4b7c      	ldr	r3, [pc, #496]	; (80011c8 <main+0x1fc>)
 8000fd6:	2224      	movs	r2, #36	; 0x24
 8000fd8:	701a      	strb	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fda:	f000 f911 	bl	8001200 <SystemClock_Config>
   */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fde:	f7ff fcb9 	bl	8000954 <MX_GPIO_Init>
  MX_DAC_Init();
 8000fe2:	f7ff fc3f 	bl	8000864 <MX_DAC_Init>
  MX_I2C1_Init();
 8000fe6:	f7ff fd85 	bl	8000af4 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000fea:	f008 fd63 	bl	8009ab4 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000fee:	f001 f80d 	bl	800200c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ff2:	f001 f857 	bl	80020a4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2); // 1 ms tick timer.
 8000ff6:	4875      	ldr	r0, [pc, #468]	; (80011cc <main+0x200>)
 8000ff8:	f005 fc79 	bl	80068ee <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); // 44100Hz timer.
 8000ffc:	4874      	ldr	r0, [pc, #464]	; (80011d0 <main+0x204>)
 8000ffe:	f005 fc76 	bl	80068ee <HAL_TIM_Base_Start_IT>

  osc_dac_init(&hdac, DAC_CHANNEL_1);
 8001002:	2100      	movs	r1, #0
 8001004:	4873      	ldr	r0, [pc, #460]	; (80011d4 <main+0x208>)
 8001006:	f000 fe69 	bl	8001cdc <osc_dac_init>
  osc_setRatios(100, 100, 100);
 800100a:	2264      	movs	r2, #100	; 0x64
 800100c:	2164      	movs	r1, #100	; 0x64
 800100e:	2064      	movs	r0, #100	; 0x64
 8001010:	f000 ff32 	bl	8001e78 <osc_setRatios>

  lcd_init(&hi2c1, 0x3f);
 8001014:	213f      	movs	r1, #63	; 0x3f
 8001016:	4870      	ldr	r0, [pc, #448]	; (80011d8 <main+0x20c>)
 8001018:	f7ff fec8 	bl	8000dac <lcd_init>
  turnOnScreen();
 800101c:	f7ff fa9a 	bl	8000554 <turnOnScreen>
  mainScreen();
 8001020:	f7ff fafa 	bl	8000618 <mainScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	switch (screenNum){
 8001024:	4b6d      	ldr	r3, [pc, #436]	; (80011dc <main+0x210>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	3b03      	subs	r3, #3
 800102a:	2b08      	cmp	r3, #8
 800102c:	d855      	bhi.n	80010da <main+0x10e>
 800102e:	a201      	add	r2, pc, #4	; (adr r2, 8001034 <main+0x68>)
 8001030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001034:	08001059 	.word	0x08001059
 8001038:	08001067 	.word	0x08001067
 800103c:	08001075 	.word	0x08001075
 8001040:	080010db 	.word	0x080010db
 8001044:	08001083 	.word	0x08001083
 8001048:	0800109f 	.word	0x0800109f
 800104c:	08001091 	.word	0x08001091
 8001050:	080010b9 	.word	0x080010b9
 8001054:	080010c7 	.word	0x080010c7
	  		case MAIN_SCREEN:
	  			mainScreen();
 8001058:	f7ff fade 	bl	8000618 <mainScreen>
	  			last_screenNum = screenNum;
 800105c:	4b5f      	ldr	r3, [pc, #380]	; (80011dc <main+0x210>)
 800105e:	781a      	ldrb	r2, [r3, #0]
 8001060:	4b5f      	ldr	r3, [pc, #380]	; (80011e0 <main+0x214>)
 8001062:	701a      	strb	r2, [r3, #0]
	  		break;
 8001064:	e03a      	b.n	80010dc <main+0x110>
	  		case CHORD_SCREEN:
	  			chordScreen();
 8001066:	f7ff fa91 	bl	800058c <chordScreen>
	  			last_screenNum = screenNum;
 800106a:	4b5c      	ldr	r3, [pc, #368]	; (80011dc <main+0x210>)
 800106c:	781a      	ldrb	r2, [r3, #0]
 800106e:	4b5c      	ldr	r3, [pc, #368]	; (80011e0 <main+0x214>)
 8001070:	701a      	strb	r2, [r3, #0]
	  		break;
 8001072:	e033      	b.n	80010dc <main+0x110>
	  		case TUNNE_SCREEN:
	  			tunneScreen();
 8001074:	f7ff fb44 	bl	8000700 <tunneScreen>
	  			last_screenNum = screenNum;
 8001078:	4b58      	ldr	r3, [pc, #352]	; (80011dc <main+0x210>)
 800107a:	781a      	ldrb	r2, [r3, #0]
 800107c:	4b58      	ldr	r3, [pc, #352]	; (80011e0 <main+0x214>)
 800107e:	701a      	strb	r2, [r3, #0]
	  		break;
 8001080:	e02c      	b.n	80010dc <main+0x110>
	  		case RECUEST_FOOTKEY_SCREEN:
	  			recuest_footkey();
 8001082:	f7ff fb75 	bl	8000770 <recuest_footkey>
	  			last_screenNum = screenNum; //this variable must store the CHORD_SCREEN value, to use it as return point.
 8001086:	4b55      	ldr	r3, [pc, #340]	; (80011dc <main+0x210>)
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	4b55      	ldr	r3, [pc, #340]	; (80011e0 <main+0x214>)
 800108c:	701a      	strb	r2, [r3, #0]
	  		break;
 800108e:	e025      	b.n	80010dc <main+0x110>
	  		case POPUP_OCTAVE:
	  			on_off_octave();
 8001090:	f7ff fb52 	bl	8000738 <on_off_octave>
	  			popup_time = 2000;
 8001094:	4b53      	ldr	r3, [pc, #332]	; (80011e4 <main+0x218>)
 8001096:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800109a:	601a      	str	r2, [r3, #0]
	  		break;
 800109c:	e01e      	b.n	80010dc <main+0x110>
	  		case POPUP_SAVED_CHORD:
	  			pop_up_savedChord(lastKey_pos);
 800109e:	4b52      	ldr	r3, [pc, #328]	; (80011e8 <main+0x21c>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fb7c 	bl	80007a0 <pop_up_savedChord>
	  			last_screenNum = CHORD_SCREEN;
 80010a8:	4b4d      	ldr	r3, [pc, #308]	; (80011e0 <main+0x214>)
 80010aa:	2204      	movs	r2, #4
 80010ac:	701a      	strb	r2, [r3, #0]
	  			popup_time = 2000;
 80010ae:	4b4d      	ldr	r3, [pc, #308]	; (80011e4 <main+0x218>)
 80010b0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010b4:	601a      	str	r2, [r3, #0]
	  		break;
 80010b6:	e011      	b.n	80010dc <main+0x110>
	  		case POPUP_SUSTAIN:
	  			pop_up_sustain();
 80010b8:	f7ff fb98 	bl	80007ec <pop_up_sustain>
	  			popup_time = 2000;
 80010bc:	4b49      	ldr	r3, [pc, #292]	; (80011e4 <main+0x218>)
 80010be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010c2:	601a      	str	r2, [r3, #0]
	  		break;
 80010c4:	e00a      	b.n	80010dc <main+0x110>
	  		case POPUP_CANCEL:
	  			pop_up_cancel();
 80010c6:	f7ff fbbd 	bl	8000844 <pop_up_cancel>
	  			popup_time = 2000;
 80010ca:	4b46      	ldr	r3, [pc, #280]	; (80011e4 <main+0x218>)
 80010cc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010d0:	601a      	str	r2, [r3, #0]
	  			last_screenNum = CHORD_SCREEN;
 80010d2:	4b43      	ldr	r3, [pc, #268]	; (80011e0 <main+0x214>)
 80010d4:	2204      	movs	r2, #4
 80010d6:	701a      	strb	r2, [r3, #0]
	  		break;
 80010d8:	e000      	b.n	80010dc <main+0x110>
	  		default:
	  		break;
 80010da:	bf00      	nop
	  	}
	  	screenNum = NO_SCREEN;
 80010dc:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <main+0x210>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]

	  	if (popup_timeUp){
 80010e2:	4b42      	ldr	r3, [pc, #264]	; (80011ec <main+0x220>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00a      	beq.n	8001102 <main+0x136>
	  		if (screenNum == NO_SCREEN) screenNum = last_screenNum;
 80010ec:	4b3b      	ldr	r3, [pc, #236]	; (80011dc <main+0x210>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d103      	bne.n	80010fc <main+0x130>
 80010f4:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <main+0x214>)
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	4b38      	ldr	r3, [pc, #224]	; (80011dc <main+0x210>)
 80010fa:	701a      	strb	r2, [r3, #0]
	  		popup_timeUp = 0;
 80010fc:	4b3b      	ldr	r3, [pc, #236]	; (80011ec <main+0x220>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
	  	}


	  	inputCursor();
 8001102:	f000 f8e7 	bl	80012d4 <inputCursor>
	  	inputSustains();
 8001106:	f000 f939 	bl	800137c <inputSustains>
	  	inputChord();
 800110a:	f000 f9eb 	bl	80014e4 <inputChord>
	  	inputOctave();
 800110e:	f000 fa29 	bl	8001564 <inputOctave>
	  	inputTunne();
 8001112:	f000 fa87 	bl	8001624 <inputTunne>
	  	inputPresets();
 8001116:	f000 fac5 	bl	80016a4 <inputPresets>
	  		default:
	  		break;
	  	}
	  	*/

	    switch (menu){ //manage the recuested menu function.
 800111a:	4b35      	ldr	r3, [pc, #212]	; (80011f0 <main+0x224>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	3b03      	subs	r3, #3
 8001120:	2b04      	cmp	r3, #4
 8001122:	d81c      	bhi.n	800115e <main+0x192>
 8001124:	a201      	add	r2, pc, #4	; (adr r2, 800112c <main+0x160>)
 8001126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112a:	bf00      	nop
 800112c:	08001141 	.word	0x08001141
 8001130:	08001147 	.word	0x08001147
 8001134:	08001151 	.word	0x08001151
 8001138:	0800115f 	.word	0x0800115f
 800113c:	0800115b 	.word	0x0800115b
	    	case MAIN_SCREEN:
	    		inputNotes();
 8001140:	f000 fb02 	bl	8001748 <inputNotes>
	    	break;
 8001144:	e00c      	b.n	8001160 <main+0x194>
	  		case CHORD_SCREEN:
	  			chordSelect();
 8001146:	f000 fc4f 	bl	80019e8 <chordSelect>
	  			inputNotes();
 800114a:	f000 fafd 	bl	8001748 <inputNotes>
	  		break;
 800114e:	e007      	b.n	8001160 <main+0x194>
	  		case TUNNE_SCREEN:
	  			tunneSelect();
 8001150:	f000 fcfc 	bl	8001b4c <tunneSelect>
	  			inputNotes();
 8001154:	f000 faf8 	bl	8001748 <inputNotes>
	  		break;
 8001158:	e002      	b.n	8001160 <main+0x194>
	  		case RECUEST_FOOTKEY_SCREEN:
	  			inputSaveChord(); // @suppress("No break at end of case")
 800115a:	f000 fbc7 	bl	80018ec <inputSaveChord>
	  		default:
	  		break;
 800115e:	bf00      	nop

	    }

	    MIDI_SendCheck();
 8001160:	f008 fe82 	bl	8009e68 <MIDI_SendCheck>

		if (flag_dac != 0){
 8001164:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <main+0x228>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d004      	beq.n	8001176 <main+0x1aa>
		  osc_dac_update();
 800116c:	f000 fdd2 	bl	8001d14 <osc_dac_update>
		  flag_dac = 0;
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <main+0x228>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
		}

	    if (flag_tick != 0){
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <main+0x22c>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	f43f af52 	beq.w	8001024 <main+0x58>

	    	if (lcd_refresh_time != 0){
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <main+0x230>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <main+0x1ca>
	    		lcd_refresh_time--;
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <main+0x230>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	3b01      	subs	r3, #1
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <main+0x230>)
 8001192:	701a      	strb	r2, [r3, #0]
 8001194:	e004      	b.n	80011a0 <main+0x1d4>
	    	}else{
	    		lcd_upDate_IT();
 8001196:	f7ff ff01 	bl	8000f9c <lcd_upDate_IT>
	    		lcd_refresh_time = 25;
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <main+0x230>)
 800119c:	2219      	movs	r2, #25
 800119e:	701a      	strb	r2, [r3, #0]
	    	}//end if lcd_refresh_time

	    	if (popup_time != 0){
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <main+0x218>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00b      	beq.n	80011c0 <main+0x1f4>
				popup_time--;
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <main+0x218>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <main+0x218>)
 80011b0:	6013      	str	r3, [r2, #0]
				if (popup_time == 1) popup_timeUp = 1;
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <main+0x218>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d102      	bne.n	80011c0 <main+0x1f4>
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <main+0x220>)
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
			}//end if popup_time

	    	flag_tick = 0;
 80011c0:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <main+0x22c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
	  	switch (screenNum){
 80011c6:	e72d      	b.n	8001024 <main+0x58>
 80011c8:	200002a0 	.word	0x200002a0
 80011cc:	20000658 	.word	0x20000658
 80011d0:	20000618 	.word	0x20000618
 80011d4:	200002b0 	.word	0x200002b0
 80011d8:	200002c4 	.word	0x200002c4
 80011dc:	2000027b 	.word	0x2000027b
 80011e0:	200000c9 	.word	0x200000c9
 80011e4:	2000027c 	.word	0x2000027c
 80011e8:	200005e7 	.word	0x200005e7
 80011ec:	20000280 	.word	0x20000280
 80011f0:	200000c8 	.word	0x200000c8
 80011f4:	20000283 	.word	0x20000283
 80011f8:	20000282 	.word	0x20000282
 80011fc:	200000ca 	.word	0x200000ca

08001200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b094      	sub	sp, #80	; 0x50
 8001204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001206:	f107 0320 	add.w	r3, r7, #32
 800120a:	2230      	movs	r2, #48	; 0x30
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f009 f94e 	bl	800a4b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	4b28      	ldr	r3, [pc, #160]	; (80012cc <SystemClock_Config+0xcc>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	4a27      	ldr	r2, [pc, #156]	; (80012cc <SystemClock_Config+0xcc>)
 800122e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001232:	6413      	str	r3, [r2, #64]	; 0x40
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <SystemClock_Config+0xcc>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <SystemClock_Config+0xd0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a21      	ldr	r2, [pc, #132]	; (80012d0 <SystemClock_Config+0xd0>)
 800124a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <SystemClock_Config+0xd0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800125c:	2301      	movs	r3, #1
 800125e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001266:	2302      	movs	r3, #2
 8001268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800126a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800126e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001270:	2304      	movs	r3, #4
 8001272:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001274:	23a8      	movs	r3, #168	; 0xa8
 8001276:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001278:	2302      	movs	r3, #2
 800127a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800127c:	2307      	movs	r3, #7
 800127e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001280:	f107 0320 	add.w	r3, r7, #32
 8001284:	4618      	mov	r0, r3
 8001286:	f004 feb9 	bl	8005ffc <HAL_RCC_OscConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001290:	f000 fd1c 	bl	8001ccc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001294:	230f      	movs	r3, #15
 8001296:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001298:	2302      	movs	r3, #2
 800129a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	2105      	movs	r1, #5
 80012b2:	4618      	mov	r0, r3
 80012b4:	f005 f912 	bl	80064dc <HAL_RCC_ClockConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012be:	f000 fd05 	bl	8001ccc <Error_Handler>
  }
}
 80012c2:	bf00      	nop
 80012c4:	3750      	adds	r7, #80	; 0x50
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40007000 	.word	0x40007000

080012d4 <inputCursor>:

/* USER CODE BEGIN 4 */


void inputCursor(void){
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0


	for (int i = 0; i < 4; i++){     //from the lowest CURSOR value, to the highest one.                                    // 4 presets en total.
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	e03b      	b.n	8001358 <inputCursor+0x84>
	buttonFlag = digitalRead(i + CURSOR_UP);

    //buttonState[1] = buttonFlag << (i + _UP);    //bit field method
	*/

	buttonState[i + _UP] = HAL_GPIO_ReadPin(cursorPort_list[i], cursorPin_list[i]);//digitalRead(i + CURSOR_UP);
 80012e0:	4a21      	ldr	r2, [pc, #132]	; (8001368 <inputCursor+0x94>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012e8:	4a20      	ldr	r2, [pc, #128]	; (800136c <inputCursor+0x98>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f103 0413 	add.w	r4, r3, #19
 80012f6:	4611      	mov	r1, r2
 80012f8:	f001 fbf8 	bl	8002aec <HAL_GPIO_ReadPin>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <inputCursor+0x9c>)
 8001302:	551a      	strb	r2, [r3, r4]

    if(!buttonState[i + _UP] && lastState[i + _UP]){                                // If we read 0, and the last time we read 1, means button was just pressed
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3313      	adds	r3, #19
 8001308:	4a19      	ldr	r2, [pc, #100]	; (8001370 <inputCursor+0x9c>)
 800130a:	5cd3      	ldrb	r3, [r2, r3]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d114      	bne.n	800133a <inputCursor+0x66>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3313      	adds	r3, #19
 8001314:	4a17      	ldr	r2, [pc, #92]	; (8001374 <inputCursor+0xa0>)
 8001316:	5cd3      	ldrb	r3, [r2, r3]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00e      	beq.n	800133a <inputCursor+0x66>

		d_pad = i + _UP;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3313      	adds	r3, #19
 8001320:	461a      	mov	r2, r3
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <inputCursor+0xa4>)
 8001324:	601a      	str	r2, [r3, #0]
        lastState[i + _UP] = buttonState[i + _UP];
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f103 0213 	add.w	r2, r3, #19
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3313      	adds	r3, #19
 8001330:	490f      	ldr	r1, [pc, #60]	; (8001370 <inputCursor+0x9c>)
 8001332:	5c89      	ldrb	r1, [r1, r2]
 8001334:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <inputCursor+0xa0>)
 8001336:	54d1      	strb	r1, [r2, r3]
		break;
 8001338:	e011      	b.n	800135e <inputCursor+0x8a>
    }else{
		d_pad = 0;
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <inputCursor+0xa4>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
	}

    lastState[i + _UP] = buttonState[i + _UP];                                        // Update last button state.
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f103 0213 	add.w	r2, r3, #19
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3313      	adds	r3, #19
 800134a:	4909      	ldr	r1, [pc, #36]	; (8001370 <inputCursor+0x9c>)
 800134c:	5c89      	ldrb	r1, [r1, r2]
 800134e:	4a09      	ldr	r2, [pc, #36]	; (8001374 <inputCursor+0xa0>)
 8001350:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 4; i++){     //from the lowest CURSOR value, to the highest one.                                    // 4 presets en total.
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3301      	adds	r3, #1
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b03      	cmp	r3, #3
 800135c:	ddc0      	ble.n	80012e0 <inputCursor+0xc>
  }
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bd90      	pop	{r4, r7, pc}
 8001366:	bf00      	nop
 8001368:	2000006c 	.word	0x2000006c
 800136c:	0800a710 	.word	0x0800a710
 8001370:	200005c8 	.word	0x200005c8
 8001374:	200005ec 	.word	0x200005ec
 8001378:	200005e8 	.word	0x200005e8

0800137c <inputSustains>:


void inputSustains (void){
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0

	buttonState[_SUST_PROP] = HAL_GPIO_ReadPin(SUST_PROP_GPIO_Port, SUST_PROP_Pin);
 8001382:	2180      	movs	r1, #128	; 0x80
 8001384:	484e      	ldr	r0, [pc, #312]	; (80014c0 <inputSustains+0x144>)
 8001386:	f001 fbb1 	bl	8002aec <HAL_GPIO_ReadPin>
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	4b4d      	ldr	r3, [pc, #308]	; (80014c4 <inputSustains+0x148>)
 8001390:	741a      	strb	r2, [r3, #16]

	if(!buttonState[_SUST_PROP] && lastState[_SUST_PROP]){
 8001392:	4b4c      	ldr	r3, [pc, #304]	; (80014c4 <inputSustains+0x148>)
 8001394:	7c1b      	ldrb	r3, [r3, #16]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d13f      	bne.n	800141a <inputSustains+0x9e>
 800139a:	4b4b      	ldr	r3, [pc, #300]	; (80014c8 <inputSustains+0x14c>)
 800139c:	7c1b      	ldrb	r3, [r3, #16]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d03b      	beq.n	800141a <inputSustains+0x9e>

		for (int j = 0; j <= 12; j++){
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	e00b      	b.n	80013c0 <inputSustains+0x44>
			sendChord(lastSendNote[j], 0, 1); // silents all notes
 80013a8:	4a48      	ldr	r2, [pc, #288]	; (80014cc <inputSustains+0x150>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b0:	2201      	movs	r2, #1
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fc07 	bl	8001bc8 <sendChord>
		for (int j = 0; j <= 12; j++){
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3301      	adds	r3, #1
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b0c      	cmp	r3, #12
 80013c4:	ddf0      	ble.n	80013a8 <inputSustains+0x2c>
		}

		switch (sustainMode){
 80013c6:	4b42      	ldr	r3, [pc, #264]	; (80014d0 <inputSustains+0x154>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d01b      	beq.n	8001406 <inputSustains+0x8a>
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d002      	beq.n	80013d8 <inputSustains+0x5c>
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d010      	beq.n	80013f8 <inputSustains+0x7c>
 80013d6:	e01d      	b.n	8001414 <inputSustains+0x98>
			case 2:
				//event = {0x0B, 0xB0 | MIDI_CHANNEL, 64, 0};
				//MidiUSB.sendMIDI(event);
				midi_msg[0] = 0x0B; //0x0B == type event (control change)
 80013d8:	4b3e      	ldr	r3, [pc, #248]	; (80014d4 <inputSustains+0x158>)
 80013da:	220b      	movs	r2, #11
 80013dc:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 80013de:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <inputSustains+0x158>)
 80013e0:	22b1      	movs	r2, #177	; 0xb1
 80013e2:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	// 64 == sustain.
 80013e4:	4b3b      	ldr	r3, [pc, #236]	; (80014d4 <inputSustains+0x158>)
 80013e6:	2240      	movs	r2, #64	; 0x40
 80013e8:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 0;
 80013ea:	4b3a      	ldr	r3, [pc, #232]	; (80014d4 <inputSustains+0x158>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4); // @suppress("No break at end of case")
 80013f0:	2104      	movs	r1, #4
 80013f2:	4838      	ldr	r0, [pc, #224]	; (80014d4 <inputSustains+0x158>)
 80013f4:	f008 fd02 	bl	8009dfc <MIDI_SendBuffer>
			case 0:
				lastSustainNote = 0;
 80013f8:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <inputSustains+0x15c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
				sustainMode = 1; //prop
 80013fe:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <inputSustains+0x154>)
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
			break;
 8001404:	e006      	b.n	8001414 <inputSustains+0x98>

			case 1:
				sustainFlag = 1;
 8001406:	4b35      	ldr	r3, [pc, #212]	; (80014dc <inputSustains+0x160>)
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
				sustainMode = 0;
 800140c:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <inputSustains+0x154>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
			break;
 8001412:	bf00      	nop
		} //end switch

		screenNum = POPUP_SUSTAIN;
 8001414:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <inputSustains+0x164>)
 8001416:	220a      	movs	r2, #10
 8001418:	701a      	strb	r2, [r3, #0]
	}
	lastState[_SUST_PROP] = buttonState[_SUST_PROP];
 800141a:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <inputSustains+0x148>)
 800141c:	7c1a      	ldrb	r2, [r3, #16]
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <inputSustains+0x14c>)
 8001420:	741a      	strb	r2, [r3, #16]


	buttonState[_SUST_MIDI] = HAL_GPIO_ReadPin(SUST_MIDI_GPIO_Port, SUST_MIDI_Pin);
 8001422:	2120      	movs	r1, #32
 8001424:	4826      	ldr	r0, [pc, #152]	; (80014c0 <inputSustains+0x144>)
 8001426:	f001 fb61 	bl	8002aec <HAL_GPIO_ReadPin>
 800142a:	4603      	mov	r3, r0
 800142c:	461a      	mov	r2, r3
 800142e:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <inputSustains+0x148>)
 8001430:	745a      	strb	r2, [r3, #17]

	if(!buttonState[_SUST_MIDI] && lastState[_SUST_MIDI]){
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <inputSustains+0x148>)
 8001434:	7c5b      	ldrb	r3, [r3, #17]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d13a      	bne.n	80014b0 <inputSustains+0x134>
 800143a:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <inputSustains+0x14c>)
 800143c:	7c5b      	ldrb	r3, [r3, #17]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d036      	beq.n	80014b0 <inputSustains+0x134>

		switch (sustainMode){
 8001442:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <inputSustains+0x154>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db2f      	blt.n	80014aa <inputSustains+0x12e>
 800144a:	2b01      	cmp	r3, #1
 800144c:	dd02      	ble.n	8001454 <inputSustains+0xd8>
 800144e:	2b02      	cmp	r3, #2
 8001450:	d017      	beq.n	8001482 <inputSustains+0x106>
 8001452:	e02a      	b.n	80014aa <inputSustains+0x12e>
			case 0:
			case 1:
				sustainFlag = 1;	// needed to normal notes functioning.
 8001454:	4b21      	ldr	r3, [pc, #132]	; (80014dc <inputSustains+0x160>)
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
				//event = {0x0B, 0xB0 | MIDI_CHANNEL, 64, 127}; //64 == sustain.
				//MidiUSB.sendMIDI(event);
				midi_msg[0] = 0x0B;		//0x0B == type event (control change),
 800145a:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <inputSustains+0x158>)
 800145c:	220b      	movs	r2, #11
 800145e:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <inputSustains+0x158>)
 8001462:	22b1      	movs	r2, #177	; 0xb1
 8001464:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	//64 == sustain.
 8001466:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <inputSustains+0x158>)
 8001468:	2240      	movs	r2, #64	; 0x40
 800146a:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 127;
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <inputSustains+0x158>)
 800146e:	227f      	movs	r2, #127	; 0x7f
 8001470:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4);
 8001472:	2104      	movs	r1, #4
 8001474:	4817      	ldr	r0, [pc, #92]	; (80014d4 <inputSustains+0x158>)
 8001476:	f008 fcc1 	bl	8009dfc <MIDI_SendBuffer>
				sustainMode = 2;
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <inputSustains+0x154>)
 800147c:	2202      	movs	r2, #2
 800147e:	701a      	strb	r2, [r3, #0]
			break;
 8001480:	e013      	b.n	80014aa <inputSustains+0x12e>
			case 2:
				//event = {0x0B, 0xB0 | MIDI_CHANNEL, 64, 0};
				//MidiUSB.sendMIDI(event);
				midi_msg[0] = 0x0B;	//0x0B == type event (control change)
 8001482:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <inputSustains+0x158>)
 8001484:	220b      	movs	r2, #11
 8001486:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <inputSustains+0x158>)
 800148a:	22b1      	movs	r2, #177	; 0xb1
 800148c:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	//64 == sustain.
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <inputSustains+0x158>)
 8001490:	2240      	movs	r2, #64	; 0x40
 8001492:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 0;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <inputSustains+0x158>)
 8001496:	2200      	movs	r2, #0
 8001498:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4);
 800149a:	2104      	movs	r1, #4
 800149c:	480d      	ldr	r0, [pc, #52]	; (80014d4 <inputSustains+0x158>)
 800149e:	f008 fcad 	bl	8009dfc <MIDI_SendBuffer>
				sustainMode = 0;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <inputSustains+0x154>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
			break;
 80014a8:	bf00      	nop
		} //end switch

		screenNum = POPUP_SUSTAIN;
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <inputSustains+0x164>)
 80014ac:	220a      	movs	r2, #10
 80014ae:	701a      	strb	r2, [r3, #0]
	}
	lastState[_SUST_MIDI] = buttonState[_SUST_MIDI];
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <inputSustains+0x148>)
 80014b2:	7c5a      	ldrb	r2, [r3, #17]
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <inputSustains+0x14c>)
 80014b6:	745a      	strb	r2, [r3, #17]
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40020c00 	.word	0x40020c00
 80014c4:	200005c8 	.word	0x200005c8
 80014c8:	200005ec 	.word	0x200005ec
 80014cc:	20000240 	.word	0x20000240
 80014d0:	20000278 	.word	0x20000278
 80014d4:	2000060c 	.word	0x2000060c
 80014d8:	20000274 	.word	0x20000274
 80014dc:	2000006a 	.word	0x2000006a
 80014e0:	2000027b 	.word	0x2000027b

080014e4 <inputChord>:


void inputChord (void){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0

	buttonState[_CHORD] = HAL_GPIO_ReadPin(CHORD_GPIO_Port, CHORD_Pin);
 80014e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ec:	4817      	ldr	r0, [pc, #92]	; (800154c <inputChord+0x68>)
 80014ee:	f001 fafd 	bl	8002aec <HAL_GPIO_ReadPin>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <inputChord+0x6c>)
 80014f8:	749a      	strb	r2, [r3, #18]

	if(!buttonState[_CHORD] && lastState[_CHORD]){
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <inputChord+0x6c>)
 80014fc:	7c9b      	ldrb	r3, [r3, #18]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d11e      	bne.n	8001540 <inputChord+0x5c>
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <inputChord+0x70>)
 8001504:	7c9b      	ldrb	r3, [r3, #18]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d01a      	beq.n	8001540 <inputChord+0x5c>

      acorde = !acorde;
 800150a:	4b13      	ldr	r3, [pc, #76]	; (8001558 <inputChord+0x74>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	bf0c      	ite	eq
 8001512:	2301      	moveq	r3, #1
 8001514:	2300      	movne	r3, #0
 8001516:	b2db      	uxtb	r3, r3
 8001518:	461a      	mov	r2, r3
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <inputChord+0x74>)
 800151c:	701a      	strb	r2, [r3, #0]

	  if (acorde){
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <inputChord+0x74>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d006      	beq.n	8001534 <inputChord+0x50>
		screenNum = CHORD_SCREEN;
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <inputChord+0x78>)
 8001528:	2204      	movs	r2, #4
 800152a:	701a      	strb	r2, [r3, #0]
		menu = CHORD_SCREEN;
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <inputChord+0x7c>)
 800152e:	2204      	movs	r2, #4
 8001530:	701a      	strb	r2, [r3, #0]
 8001532:	e005      	b.n	8001540 <inputChord+0x5c>
	  }else{
		screenNum = MAIN_SCREEN;
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <inputChord+0x78>)
 8001536:	2203      	movs	r2, #3
 8001538:	701a      	strb	r2, [r3, #0]
		menu = MAIN_SCREEN;
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <inputChord+0x7c>)
 800153c:	2203      	movs	r2, #3
 800153e:	701a      	strb	r2, [r3, #0]
	/*
	if (acorde){
		chordSelect();
	}
*/
	lastState[_CHORD] = buttonState[_CHORD];
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <inputChord+0x6c>)
 8001542:	7c9a      	ldrb	r2, [r3, #18]
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <inputChord+0x70>)
 8001546:	749a      	strb	r2, [r3, #18]
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40020800 	.word	0x40020800
 8001550:	200005c8 	.word	0x200005c8
 8001554:	200005ec 	.word	0x200005ec
 8001558:	20000279 	.word	0x20000279
 800155c:	2000027b 	.word	0x2000027b
 8001560:	200000c8 	.word	0x200000c8

08001564 <inputOctave>:


void inputOctave (void){
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0

  buttonState[_OCT_G] = HAL_GPIO_ReadPin(OCT_G_GPIO_Port, OCT_G_Pin); //octava grave
 8001568:	2120      	movs	r1, #32
 800156a:	4828      	ldr	r0, [pc, #160]	; (800160c <inputOctave+0xa8>)
 800156c:	f001 fabe 	bl	8002aec <HAL_GPIO_ReadPin>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	4b26      	ldr	r3, [pc, #152]	; (8001610 <inputOctave+0xac>)
 8001576:	735a      	strb	r2, [r3, #13]
  if(!buttonState[_OCT_G] && lastState[_OCT_G]){
 8001578:	4b25      	ldr	r3, [pc, #148]	; (8001610 <inputOctave+0xac>)
 800157a:	7b5b      	ldrb	r3, [r3, #13]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10a      	bne.n	8001596 <inputOctave+0x32>
 8001580:	4b24      	ldr	r3, [pc, #144]	; (8001614 <inputOctave+0xb0>)
 8001582:	7b5b      	ldrb	r3, [r3, #13]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <inputOctave+0x32>
      octava = -1;
 8001588:	4b23      	ldr	r3, [pc, #140]	; (8001618 <inputOctave+0xb4>)
 800158a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800158e:	601a      	str	r2, [r3, #0]
	  screenNum=POPUP_OCTAVE;
 8001590:	4b22      	ldr	r3, [pc, #136]	; (800161c <inputOctave+0xb8>)
 8001592:	2209      	movs	r2, #9
 8001594:	701a      	strb	r2, [r3, #0]
  }

  lastState[_OCT_G] = buttonState[_OCT_G];
 8001596:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <inputOctave+0xac>)
 8001598:	7b5a      	ldrb	r2, [r3, #13]
 800159a:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <inputOctave+0xb0>)
 800159c:	735a      	strb	r2, [r3, #13]


  buttonState[_OCT_M] = HAL_GPIO_ReadPin(OCT_M_GPIO_Port, OCT_M_Pin);//octava central
 800159e:	2108      	movs	r1, #8
 80015a0:	481a      	ldr	r0, [pc, #104]	; (800160c <inputOctave+0xa8>)
 80015a2:	f001 faa3 	bl	8002aec <HAL_GPIO_ReadPin>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <inputOctave+0xac>)
 80015ac:	739a      	strb	r2, [r3, #14]
  if(!buttonState[_OCT_M] && lastState[_OCT_M]){
 80015ae:	4b18      	ldr	r3, [pc, #96]	; (8001610 <inputOctave+0xac>)
 80015b0:	7b9b      	ldrb	r3, [r3, #14]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d109      	bne.n	80015ca <inputOctave+0x66>
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <inputOctave+0xb0>)
 80015b8:	7b9b      	ldrb	r3, [r3, #14]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <inputOctave+0x66>
      octava = 0;
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <inputOctave+0xb4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
	  screenNum=POPUP_OCTAVE;
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <inputOctave+0xb8>)
 80015c6:	2209      	movs	r2, #9
 80015c8:	701a      	strb	r2, [r3, #0]
  }

  lastState[_OCT_M] = buttonState[_OCT_M];
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <inputOctave+0xac>)
 80015cc:	7b9a      	ldrb	r2, [r3, #14]
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <inputOctave+0xb0>)
 80015d0:	739a      	strb	r2, [r3, #14]


  buttonState[_OCT_A] = HAL_GPIO_ReadPin(OCT_A_GPIO_Port, OCT_A_Pin);//octava aguda
 80015d2:	2140      	movs	r1, #64	; 0x40
 80015d4:	4812      	ldr	r0, [pc, #72]	; (8001620 <inputOctave+0xbc>)
 80015d6:	f001 fa89 	bl	8002aec <HAL_GPIO_ReadPin>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <inputOctave+0xac>)
 80015e0:	73da      	strb	r2, [r3, #15]
  if(!buttonState[_OCT_A] && lastState[_OCT_A]){
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <inputOctave+0xac>)
 80015e4:	7bdb      	ldrb	r3, [r3, #15]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d109      	bne.n	80015fe <inputOctave+0x9a>
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <inputOctave+0xb0>)
 80015ec:	7bdb      	ldrb	r3, [r3, #15]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d005      	beq.n	80015fe <inputOctave+0x9a>
      octava = 1;
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <inputOctave+0xb4>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
      screenNum=POPUP_OCTAVE;
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <inputOctave+0xb8>)
 80015fa:	2209      	movs	r2, #9
 80015fc:	701a      	strb	r2, [r3, #0]
  }

  lastState[_OCT_A] = buttonState[_OCT_A];
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <inputOctave+0xac>)
 8001600:	7bda      	ldrb	r2, [r3, #15]
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <inputOctave+0xb0>)
 8001604:	73da      	strb	r2, [r3, #15]
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40020400 	.word	0x40020400
 8001610:	200005c8 	.word	0x200005c8
 8001614:	200005ec 	.word	0x200005ec
 8001618:	20000200 	.word	0x20000200
 800161c:	2000027b 	.word	0x2000027b
 8001620:	40020c00 	.word	0x40020c00

08001624 <inputTunne>:


void inputTunne(void){
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  	buttonState[_TUNNE] = HAL_GPIO_ReadPin(TUNNE_GPIO_Port, TUNNE_Pin);
 8001628:	2108      	movs	r1, #8
 800162a:	4818      	ldr	r0, [pc, #96]	; (800168c <inputTunne+0x68>)
 800162c:	f001 fa5e 	bl	8002aec <HAL_GPIO_ReadPin>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <inputTunne+0x6c>)
 8001636:	779a      	strb	r2, [r3, #30]

	if(!buttonState[_TUNNE] && lastState[_TUNNE]){
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <inputTunne+0x6c>)
 800163a:	7f9b      	ldrb	r3, [r3, #30]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d11e      	bne.n	800167e <inputTunne+0x5a>
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <inputTunne+0x70>)
 8001642:	7f9b      	ldrb	r3, [r3, #30]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d01a      	beq.n	800167e <inputTunne+0x5a>
      tunne = !tunne;
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <inputTunne+0x74>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	bf0c      	ite	eq
 8001650:	2301      	moveq	r3, #1
 8001652:	2300      	movne	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	461a      	mov	r2, r3
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <inputTunne+0x74>)
 800165a:	701a      	strb	r2, [r3, #0]

	  if (tunne){
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <inputTunne+0x74>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d006      	beq.n	8001672 <inputTunne+0x4e>
		screenNum = TUNNE_SCREEN;
 8001664:	4b0d      	ldr	r3, [pc, #52]	; (800169c <inputTunne+0x78>)
 8001666:	2205      	movs	r2, #5
 8001668:	701a      	strb	r2, [r3, #0]
		menu = TUNNE_SCREEN;
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <inputTunne+0x7c>)
 800166c:	2205      	movs	r2, #5
 800166e:	701a      	strb	r2, [r3, #0]
 8001670:	e005      	b.n	800167e <inputTunne+0x5a>
	  }else{
		screenNum = MAIN_SCREEN;
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <inputTunne+0x78>)
 8001674:	2203      	movs	r2, #3
 8001676:	701a      	strb	r2, [r3, #0]
		menu = MAIN_SCREEN;
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <inputTunne+0x7c>)
 800167a:	2203      	movs	r2, #3
 800167c:	701a      	strb	r2, [r3, #0]
	/*
	if (acorde){
		menu = TUNNE_SCREEN;
	}
*/
	lastState[_TUNNE] = buttonState[_TUNNE];
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <inputTunne+0x6c>)
 8001680:	7f9a      	ldrb	r2, [r3, #30]
 8001682:	4b04      	ldr	r3, [pc, #16]	; (8001694 <inputTunne+0x70>)
 8001684:	779a      	strb	r2, [r3, #30]
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40020c00 	.word	0x40020c00
 8001690:	200005c8 	.word	0x200005c8
 8001694:	200005ec 	.word	0x200005ec
 8001698:	2000027a 	.word	0x2000027a
 800169c:	2000027b 	.word	0x2000027b
 80016a0:	200000c8 	.word	0x200000c8

080016a4 <inputPresets>:


void inputPresets (void){
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0

  for (int i = 0; i < 6; i++){                                         // 6 presets en total.
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	e03a      	b.n	8001726 <inputPresets+0x82>

    buttonState[i + _PRESET0] = HAL_GPIO_ReadPin(presetPort_list[i], presetPin_list[i]);  //internal pullup
 80016b0:	4a20      	ldr	r2, [pc, #128]	; (8001734 <inputPresets+0x90>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016b8:	4a1f      	ldr	r2, [pc, #124]	; (8001738 <inputPresets+0x94>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f103 0418 	add.w	r4, r3, #24
 80016c6:	4611      	mov	r1, r2
 80016c8:	f001 fa10 	bl	8002aec <HAL_GPIO_ReadPin>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <inputPresets+0x98>)
 80016d2:	551a      	strb	r2, [r3, r4]

    if(!buttonState[i + _PRESET0] && lastState[i + _PRESET0]){                                // If we read 0, and the last time we read 1, means button was just pressed
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3318      	adds	r3, #24
 80016d8:	4a18      	ldr	r2, [pc, #96]	; (800173c <inputPresets+0x98>)
 80016da:	5cd3      	ldrb	r3, [r2, r3]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d116      	bne.n	800170e <inputPresets+0x6a>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3318      	adds	r3, #24
 80016e4:	4a16      	ldr	r2, [pc, #88]	; (8001740 <inputPresets+0x9c>)
 80016e6:	5cd3      	ldrb	r3, [r2, r3]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d010      	beq.n	800170e <inputPresets+0x6a>

        //MIDI.sendProgramChange(i - PRESET0, MIDI_CHANNEL);

		//event = {0x0C, 0xC0 | MIDI_CHANNEL, i, 0};
		//MidiUSB.sendMIDI(event);
		midi_msg[0] = 0x0C;	//0x0C == type event (program change)
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <inputPresets+0xa0>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	701a      	strb	r2, [r3, #0]
		midi_msg[1] = 0xC0 | 1;
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <inputPresets+0xa0>)
 80016f4:	22c1      	movs	r2, #193	; 0xc1
 80016f6:	705a      	strb	r2, [r3, #1]
		midi_msg[2] = i;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <inputPresets+0xa0>)
 80016fe:	709a      	strb	r2, [r3, #2]
		midi_msg[3] = 0;	//last param == 0 (unused in program change).
 8001700:	4b10      	ldr	r3, [pc, #64]	; (8001744 <inputPresets+0xa0>)
 8001702:	2200      	movs	r2, #0
 8001704:	70da      	strb	r2, [r3, #3]
		MIDI_SendBuffer(midi_msg, 4);
 8001706:	2104      	movs	r1, #4
 8001708:	480e      	ldr	r0, [pc, #56]	; (8001744 <inputPresets+0xa0>)
 800170a:	f008 fb77 	bl	8009dfc <MIDI_SendBuffer>

    } //end if

    lastState[i + _PRESET0] = buttonState[i + _PRESET0];                                        // Update last button state.
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f103 0218 	add.w	r2, r3, #24
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3318      	adds	r3, #24
 8001718:	4908      	ldr	r1, [pc, #32]	; (800173c <inputPresets+0x98>)
 800171a:	5c89      	ldrb	r1, [r1, r2]
 800171c:	4a08      	ldr	r2, [pc, #32]	; (8001740 <inputPresets+0x9c>)
 800171e:	54d1      	strb	r1, [r2, r3]
  for (int i = 0; i < 6; i++){                                         // 6 presets en total.
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3301      	adds	r3, #1
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b05      	cmp	r3, #5
 800172a:	ddc1      	ble.n	80016b0 <inputPresets+0xc>
  } //end for

} //end inputPresets
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	bd90      	pop	{r4, r7, pc}
 8001734:	2000007c 	.word	0x2000007c
 8001738:	0800a718 	.word	0x0800a718
 800173c:	200005c8 	.word	0x200005c8
 8001740:	200005ec 	.word	0x200005ec
 8001744:	2000060c 	.word	0x2000060c

08001748 <inputNotes>:


void inputNotes(void){
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0

  uint8_t pressedNote;

  for (int i = 0; i <= 12; i++){
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	e0ad      	b.n	80018b0 <inputNotes+0x168>

    buttonState[i + _DO] = HAL_GPIO_ReadPin(notePort_list[i], notePin_list[i]); //read current button pin.
 8001754:	4a5a      	ldr	r2, [pc, #360]	; (80018c0 <inputNotes+0x178>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800175c:	4a59      	ldr	r2, [pc, #356]	; (80018c4 <inputNotes+0x17c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001764:	4619      	mov	r1, r3
 8001766:	f001 f9c1 	bl	8002aec <HAL_GPIO_ReadPin>
 800176a:	4603      	mov	r3, r0
 800176c:	4619      	mov	r1, r3
 800176e:	4a56      	ldr	r2, [pc, #344]	; (80018c8 <inputNotes+0x180>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4413      	add	r3, r2
 8001774:	460a      	mov	r2, r1
 8001776:	701a      	strb	r2, [r3, #0]

    if(!buttonState[i + _DO] && lastState[i + _DO]){  // If we read 1, and the last time we read 0, means button was just pressed.
 8001778:	4a53      	ldr	r2, [pc, #332]	; (80018c8 <inputNotes+0x180>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d16d      	bne.n	8001860 <inputNotes+0x118>
 8001784:	4a51      	ldr	r2, [pc, #324]	; (80018cc <inputNotes+0x184>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d067      	beq.n	8001860 <inputNotes+0x118>

        pressedNote = firstDoTunning + i + 12 * octava; //detects the pressed note.
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	4b4e      	ldr	r3, [pc, #312]	; (80018d0 <inputNotes+0x188>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4413      	add	r3, r2
 800179a:	b2da      	uxtb	r2, r3
 800179c:	4b4d      	ldr	r3, [pc, #308]	; (80018d4 <inputNotes+0x18c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	4619      	mov	r1, r3
 80017a4:	0049      	lsls	r1, r1, #1
 80017a6:	440b      	add	r3, r1
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	70fb      	strb	r3, [r7, #3]

    	if (acorde){ //If chord mode is on...
 80017b0:	4b49      	ldr	r3, [pc, #292]	; (80018d8 <inputNotes+0x190>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d00c      	beq.n	80017d2 <inputNotes+0x8a>
            lastSendNote[i] = makeChord(pressedNote, i); // saves the current chord config. on pressed note.
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fe81 	bl	80004c8 <makeChord>
 80017c6:	4601      	mov	r1, r0
 80017c8:	4a44      	ldr	r2, [pc, #272]	; (80018dc <inputNotes+0x194>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80017d0:	e004      	b.n	80017dc <inputNotes+0x94>

        }else{ //If chord mode is off...

            lastSendNote[i] = pressedNote; // saves nothing but pressed note.
 80017d2:	78fa      	ldrb	r2, [r7, #3]
 80017d4:	4941      	ldr	r1, [pc, #260]	; (80018dc <inputNotes+0x194>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        } //end if acorde


        if (sustainMode == 1){ // If proprietary sustain mode on...
 80017dc:	4b40      	ldr	r3, [pc, #256]	; (80018e0 <inputNotes+0x198>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d122      	bne.n	800182a <inputNotes+0xe2>

			if (lastSustainNote != lastSendNote[i]){ // If last sustained note differs from the current pressed one...
 80017e4:	4a3d      	ldr	r2, [pc, #244]	; (80018dc <inputNotes+0x194>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017ec:	4b3d      	ldr	r3, [pc, #244]	; (80018e4 <inputNotes+0x19c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d010      	beq.n	8001816 <inputNotes+0xce>

				sendChord(lastSustainNote, 0, 1); // mute current chord. 0 in second param means "noteOff".
 80017f4:	4b3b      	ldr	r3, [pc, #236]	; (80018e4 <inputNotes+0x19c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2201      	movs	r2, #1
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 f9e3 	bl	8001bc8 <sendChord>
				lastSustainNote = lastSendNote[i]; // and saves the current sustained note.
 8001802:	4a36      	ldr	r2, [pc, #216]	; (80018dc <inputNotes+0x194>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180a:	4a36      	ldr	r2, [pc, #216]	; (80018e4 <inputNotes+0x19c>)
 800180c:	6013      	str	r3, [r2, #0]
				sustainFlag = 1; // turn sustained note on
 800180e:	4b36      	ldr	r3, [pc, #216]	; (80018e8 <inputNotes+0x1a0>)
 8001810:	2201      	movs	r2, #1
 8001812:	701a      	strb	r2, [r3, #0]
 8001814:	e009      	b.n	800182a <inputNotes+0xe2>

			}else{ // If last sustained note and the current pressed one are the same...

				sustainFlag = !sustainFlag; // turn sustained note off.
 8001816:	4b34      	ldr	r3, [pc, #208]	; (80018e8 <inputNotes+0x1a0>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	bf0c      	ite	eq
 800181e:	2301      	moveq	r3, #1
 8001820:	2300      	movne	r3, #0
 8001822:	b2db      	uxtb	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <inputNotes+0x1a0>)
 8001828:	701a      	strb	r2, [r3, #0]

			}//end if lastSustainNote...
        }//end if sustainMode


        sendChord(lastSendNote[i], 127 * sustainFlag, 1); //send the appropriate midi message.
 800182a:	4a2c      	ldr	r2, [pc, #176]	; (80018dc <inputNotes+0x194>)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001832:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <inputNotes+0x1a0>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	4613      	mov	r3, r2
 800183a:	01db      	lsls	r3, r3, #7
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	2201      	movs	r2, #1
 8001840:	4619      	mov	r1, r3
 8001842:	f000 f9c1 	bl	8001bc8 <sendChord>

        if (sustainFlag != 0){
 8001846:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <inputNotes+0x1a0>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d004      	beq.n	8001858 <inputNotes+0x110>
        	osc_setNote(pressedNote);
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	4618      	mov	r0, r3
 8001852:	f000 faeb 	bl	8001e2c <osc_setNote>
        if (sustainFlag != 0){
 8001856:	e01f      	b.n	8001898 <inputNotes+0x150>
        }else{
        	osc_setNote(0);
 8001858:	2000      	movs	r0, #0
 800185a:	f000 fae7 	bl	8001e2c <osc_setNote>
        if (sustainFlag != 0){
 800185e:	e01b      	b.n	8001898 <inputNotes+0x150>
        }

    }
    else if(buttonState[i] && !lastState[i]){  // If we read 0, and the last time we read 1, means button was just released
 8001860:	4a19      	ldr	r2, [pc, #100]	; (80018c8 <inputNotes+0x180>)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d015      	beq.n	8001898 <inputNotes+0x150>
 800186c:	4a17      	ldr	r2, [pc, #92]	; (80018cc <inputNotes+0x184>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10f      	bne.n	8001898 <inputNotes+0x150>

    	if (sustainMode != 1){ // If proprietary sustain mode off...
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <inputNotes+0x198>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d00b      	beq.n	8001898 <inputNotes+0x150>
			sendChord(lastSendNote[i], 0, 1); // 0 in second param means "noteOff".
 8001880:	4a16      	ldr	r2, [pc, #88]	; (80018dc <inputNotes+0x194>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001888:	2201      	movs	r2, #1
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f000 f99b 	bl	8001bc8 <sendChord>
			osc_setNote(0); // turn DAC off.
 8001892:	2000      	movs	r0, #0
 8001894:	f000 faca 	bl	8001e2c <osc_setNote>
        }
    }

    lastState[i] = buttonState[i];  // Update last button state.
 8001898:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <inputNotes+0x180>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	7819      	ldrb	r1, [r3, #0]
 80018a0:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <inputNotes+0x184>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	460a      	mov	r2, r1
 80018a8:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i <= 12; i++){
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3301      	adds	r3, #1
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b0c      	cmp	r3, #12
 80018b4:	f77f af4e 	ble.w	8001754 <inputNotes+0xc>
  }
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000094 	.word	0x20000094
 80018c4:	0800a724 	.word	0x0800a724
 80018c8:	200005c8 	.word	0x200005c8
 80018cc:	200005ec 	.word	0x200005ec
 80018d0:	200002a0 	.word	0x200002a0
 80018d4:	20000200 	.word	0x20000200
 80018d8:	20000279 	.word	0x20000279
 80018dc:	20000240 	.word	0x20000240
 80018e0:	20000278 	.word	0x20000278
 80018e4:	20000274 	.word	0x20000274
 80018e8:	2000006a 	.word	0x2000006a

080018ec <inputSaveChord>:


void inputSaveChord(void){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0

uint8_t flag = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	71fb      	strb	r3, [r7, #7]

	for (int i = 0; i <= 12; i++){
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	e04c      	b.n	8001996 <inputSaveChord+0xaa>

		buttonState[i + _DO] = HAL_GPIO_ReadPin(notePort_list[i], notePin_list[i]);
 80018fc:	4a31      	ldr	r2, [pc, #196]	; (80019c4 <inputSaveChord+0xd8>)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001904:	4a30      	ldr	r2, [pc, #192]	; (80019c8 <inputSaveChord+0xdc>)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800190c:	4619      	mov	r1, r3
 800190e:	f001 f8ed 	bl	8002aec <HAL_GPIO_ReadPin>
 8001912:	4603      	mov	r3, r0
 8001914:	4619      	mov	r1, r3
 8001916:	4a2d      	ldr	r2, [pc, #180]	; (80019cc <inputSaveChord+0xe0>)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	4413      	add	r3, r2
 800191c:	460a      	mov	r2, r1
 800191e:	701a      	strb	r2, [r3, #0]

		if(!buttonState[i + _DO] && lastState[i + _DO]){       // If we read 1, and the last time we read 0, means button was just pressed
 8001920:	4a2a      	ldr	r2, [pc, #168]	; (80019cc <inputSaveChord+0xe0>)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	4413      	add	r3, r2
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d128      	bne.n	800197e <inputSaveChord+0x92>
 800192c:	4a28      	ldr	r2, [pc, #160]	; (80019d0 <inputSaveChord+0xe4>)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	4413      	add	r3, r2
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d01d      	beq.n	8001974 <inputSaveChord+0x88>

			//storing the selected chord:
			setChord(i);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fde5 	bl	800050c <setChord>
			footKey = NORMAL;
 8001942:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <inputSaveChord+0xe8>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
			screenNum = POPUP_SAVED_CHORD;
 8001948:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <inputSaveChord+0xec>)
 800194a:	2208      	movs	r2, #8
 800194c:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN; 				//return point to chordSelect().
 800194e:	4b23      	ldr	r3, [pc, #140]	; (80019dc <inputSaveChord+0xf0>)
 8001950:	2204      	movs	r2, #4
 8001952:	701a      	strb	r2, [r3, #0]
			lastKey_pos = i; 					// to show in screen the foot key pressed.
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <inputSaveChord+0xf4>)
 800195a:	701a      	strb	r2, [r3, #0]
			lastState[i] = buttonState[i];       // Update last button state.
 800195c:	4a1b      	ldr	r2, [pc, #108]	; (80019cc <inputSaveChord+0xe0>)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	4413      	add	r3, r2
 8001962:	7819      	ldrb	r1, [r3, #0]
 8001964:	4a1a      	ldr	r2, [pc, #104]	; (80019d0 <inputSaveChord+0xe4>)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	4413      	add	r3, r2
 800196a:	460a      	mov	r2, r1
 800196c:	701a      	strb	r2, [r3, #0]
			flag = 1;
 800196e:	2301      	movs	r3, #1
 8001970:	71fb      	strb	r3, [r7, #7]
			break; 								 //it must exit from function.
 8001972:	e013      	b.n	800199c <inputSaveChord+0xb0>
		}
		else if(buttonState[i] && !lastState[i]){                           // If we read 0, and the last time we read 1, means button was just released
 8001974:	4a15      	ldr	r2, [pc, #84]	; (80019cc <inputSaveChord+0xe0>)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	4413      	add	r3, r2
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
			//POR AHORA NADA
		}
		lastState[i] = buttonState[i];                                        // Update last button state.
 800197e:	4a13      	ldr	r2, [pc, #76]	; (80019cc <inputSaveChord+0xe0>)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	4413      	add	r3, r2
 8001984:	7819      	ldrb	r1, [r3, #0]
 8001986:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <inputSaveChord+0xe4>)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	4413      	add	r3, r2
 800198c:	460a      	mov	r2, r1
 800198e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <= 12; i++){
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	3301      	adds	r3, #1
 8001994:	603b      	str	r3, [r7, #0]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	2b0c      	cmp	r3, #12
 800199a:	ddaf      	ble.n	80018fc <inputSaveChord+0x10>
	}

	if (!flag){
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10c      	bne.n	80019bc <inputSaveChord+0xd0>
		if (d_pad == _LEFT){
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <inputSaveChord+0xf8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b15      	cmp	r3, #21
 80019a8:	d108      	bne.n	80019bc <inputSaveChord+0xd0>
			footKey = NORMAL;
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <inputSaveChord+0xe8>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
			screenNum = POPUP_CANCEL;
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <inputSaveChord+0xec>)
 80019b2:	220b      	movs	r2, #11
 80019b4:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN;
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <inputSaveChord+0xf0>)
 80019b8:	2204      	movs	r2, #4
 80019ba:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000094 	.word	0x20000094
 80019c8:	0800a724 	.word	0x0800a724
 80019cc:	200005c8 	.word	0x200005c8
 80019d0:	200005ec 	.word	0x200005ec
 80019d4:	20000281 	.word	0x20000281
 80019d8:	2000027b 	.word	0x2000027b
 80019dc:	200000c8 	.word	0x200000c8
 80019e0:	200005e7 	.word	0x200005e7
 80019e4:	200005e8 	.word	0x200005e8

080019e8 <chordSelect>:

void chordSelect(void){
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0

  uint8_t flag = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	71fb      	strb	r3, [r7, #7]

  switch (chordSelect_cursor){
 80019f2:	4b4f      	ldr	r3, [pc, #316]	; (8001b30 <chordSelect+0x148>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d034      	beq.n	8001a64 <chordSelect+0x7c>
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d302      	bcc.n	8001a04 <chordSelect+0x1c>
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d06f      	beq.n	8001ae2 <chordSelect+0xfa>
 8001a02:	e089      	b.n	8001b18 <chordSelect+0x130>

		case 0:

			switch (d_pad){
 8001a04:	4b4b      	ldr	r3, [pc, #300]	; (8001b34 <chordSelect+0x14c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b15      	cmp	r3, #21
 8001a0a:	d00c      	beq.n	8001a26 <chordSelect+0x3e>
 8001a0c:	2b16      	cmp	r3, #22
 8001a0e:	d019      	beq.n	8001a44 <chordSelect+0x5c>
 8001a10:	2b14      	cmp	r3, #20
 8001a12:	d000      	beq.n	8001a16 <chordSelect+0x2e>
					if (chord > 7)
						chord = 0;
					flag = 1;
					break;
			}
			break;
 8001a14:	e080      	b.n	8001b18 <chordSelect+0x130>
					chordSelect_cursor++;
 8001a16:	4b46      	ldr	r3, [pc, #280]	; (8001b30 <chordSelect+0x148>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	4a44      	ldr	r2, [pc, #272]	; (8001b30 <chordSelect+0x148>)
 8001a1e:	6013      	str	r3, [r2, #0]
					flag = 1;
 8001a20:	2301      	movs	r3, #1
 8001a22:	71fb      	strb	r3, [r7, #7]
					break;
 8001a24:	e01d      	b.n	8001a62 <chordSelect+0x7a>
					chord--;
 8001a26:	4b44      	ldr	r3, [pc, #272]	; (8001b38 <chordSelect+0x150>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	4a42      	ldr	r2, [pc, #264]	; (8001b38 <chordSelect+0x150>)
 8001a2e:	6013      	str	r3, [r2, #0]
					if (chord < 0)
 8001a30:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <chordSelect+0x150>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	da02      	bge.n	8001a3e <chordSelect+0x56>
						chord = 7;
 8001a38:	4b3f      	ldr	r3, [pc, #252]	; (8001b38 <chordSelect+0x150>)
 8001a3a:	2207      	movs	r2, #7
 8001a3c:	601a      	str	r2, [r3, #0]
					flag = 1;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	71fb      	strb	r3, [r7, #7]
					break;
 8001a42:	e00e      	b.n	8001a62 <chordSelect+0x7a>
					chord++;
 8001a44:	4b3c      	ldr	r3, [pc, #240]	; (8001b38 <chordSelect+0x150>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	4a3b      	ldr	r2, [pc, #236]	; (8001b38 <chordSelect+0x150>)
 8001a4c:	6013      	str	r3, [r2, #0]
					if (chord > 7)
 8001a4e:	4b3a      	ldr	r3, [pc, #232]	; (8001b38 <chordSelect+0x150>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b07      	cmp	r3, #7
 8001a54:	dd02      	ble.n	8001a5c <chordSelect+0x74>
						chord = 0;
 8001a56:	4b38      	ldr	r3, [pc, #224]	; (8001b38 <chordSelect+0x150>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
					flag = 1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	71fb      	strb	r3, [r7, #7]
					break;
 8001a60:	bf00      	nop
			break;
 8001a62:	e059      	b.n	8001b18 <chordSelect+0x130>
		case 1:

			switch (d_pad){
 8001a64:	4b33      	ldr	r3, [pc, #204]	; (8001b34 <chordSelect+0x14c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	3b13      	subs	r3, #19
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d853      	bhi.n	8001b16 <chordSelect+0x12e>
 8001a6e:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <chordSelect+0x8c>)
 8001a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a74:	08001a85 	.word	0x08001a85
 8001a78:	08001a95 	.word	0x08001a95
 8001a7c:	08001aa5 	.word	0x08001aa5
 8001a80:	08001ac3 	.word	0x08001ac3
				case _UP:
					chordSelect_cursor--;
 8001a84:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <chordSelect+0x148>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	4a29      	ldr	r2, [pc, #164]	; (8001b30 <chordSelect+0x148>)
 8001a8c:	6013      	str	r3, [r2, #0]
					flag = 1;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	71fb      	strb	r3, [r7, #7]
					break;
 8001a92:	e025      	b.n	8001ae0 <chordSelect+0xf8>
				case _DOWN:
					chordSelect_cursor++;
 8001a94:	4b26      	ldr	r3, [pc, #152]	; (8001b30 <chordSelect+0x148>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	4a25      	ldr	r2, [pc, #148]	; (8001b30 <chordSelect+0x148>)
 8001a9c:	6013      	str	r3, [r2, #0]
					flag = 1;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	71fb      	strb	r3, [r7, #7]
					break;
 8001aa2:	e01d      	b.n	8001ae0 <chordSelect+0xf8>
				case _LEFT:
					chordInv--;
 8001aa4:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <chordSelect+0x154>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	4a24      	ldr	r2, [pc, #144]	; (8001b3c <chordSelect+0x154>)
 8001aac:	6013      	str	r3, [r2, #0]
					if (chordInv < 0)
 8001aae:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <chordSelect+0x154>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	da02      	bge.n	8001abc <chordSelect+0xd4>
						chordInv = 2;
 8001ab6:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <chordSelect+0x154>)
 8001ab8:	2202      	movs	r2, #2
 8001aba:	601a      	str	r2, [r3, #0]
					flag = 1;
 8001abc:	2301      	movs	r3, #1
 8001abe:	71fb      	strb	r3, [r7, #7]
					break;
 8001ac0:	e00e      	b.n	8001ae0 <chordSelect+0xf8>
				case _RIGHT:
					chordInv++;
 8001ac2:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <chordSelect+0x154>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <chordSelect+0x154>)
 8001aca:	6013      	str	r3, [r2, #0]
					if (chordInv > 2)
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <chordSelect+0x154>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	dd02      	ble.n	8001ada <chordSelect+0xf2>
						chordInv = 0;
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <chordSelect+0x154>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
					flag = 1;
 8001ada:	2301      	movs	r3, #1
 8001adc:	71fb      	strb	r3, [r7, #7]
					break;
 8001ade:	bf00      	nop
			}
			break;
 8001ae0:	e019      	b.n	8001b16 <chordSelect+0x12e>
		case 2:

			switch (d_pad){
 8001ae2:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <chordSelect+0x14c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b13      	cmp	r3, #19
 8001ae8:	d002      	beq.n	8001af0 <chordSelect+0x108>
 8001aea:	2b16      	cmp	r3, #22
 8001aec:	d008      	beq.n	8001b00 <chordSelect+0x118>
					footKey = SAVE_CHORD; //
					menu = RECUEST_FOOTKEY_SCREEN;
					screenNum = RECUEST_FOOTKEY_SCREEN;
					break;
			}
			break;
 8001aee:	e013      	b.n	8001b18 <chordSelect+0x130>
					chordSelect_cursor--;
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <chordSelect+0x148>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	3b01      	subs	r3, #1
 8001af6:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <chordSelect+0x148>)
 8001af8:	6013      	str	r3, [r2, #0]
					flag = 1;
 8001afa:	2301      	movs	r3, #1
 8001afc:	71fb      	strb	r3, [r7, #7]
					break;
 8001afe:	e009      	b.n	8001b14 <chordSelect+0x12c>
					footKey = SAVE_CHORD; //
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <chordSelect+0x158>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]
					menu = RECUEST_FOOTKEY_SCREEN;
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <chordSelect+0x15c>)
 8001b08:	2207      	movs	r2, #7
 8001b0a:	701a      	strb	r2, [r3, #0]
					screenNum = RECUEST_FOOTKEY_SCREEN;
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <chordSelect+0x160>)
 8001b0e:	2207      	movs	r2, #7
 8001b10:	701a      	strb	r2, [r3, #0]
					break;
 8001b12:	bf00      	nop
			break;
 8001b14:	e000      	b.n	8001b18 <chordSelect+0x130>
			break;
 8001b16:	bf00      	nop
	}

  if (flag){        ///flag de impresion
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <chordSelect+0x13c>

      screenNum = CHORD_SCREEN;
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <chordSelect+0x160>)
 8001b20:	2204      	movs	r2, #4
 8001b22:	701a      	strb	r2, [r3, #0]
  }
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	2000029c 	.word	0x2000029c
 8001b34:	200005e8 	.word	0x200005e8
 8001b38:	200002a4 	.word	0x200002a4
 8001b3c:	200002a8 	.word	0x200002a8
 8001b40:	20000281 	.word	0x20000281
 8001b44:	200000c8 	.word	0x200000c8
 8001b48:	2000027b 	.word	0x2000027b

08001b4c <tunneSelect>:


void tunneSelect(void){
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
	uint8_t flag = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	71fb      	strb	r3, [r7, #7]

	switch (d_pad){
 8001b56:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <tunneSelect+0x70>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b15      	cmp	r3, #21
 8001b5c:	d011      	beq.n	8001b82 <tunneSelect+0x36>
 8001b5e:	2b16      	cmp	r3, #22
 8001b60:	d11f      	bne.n	8001ba2 <tunneSelect+0x56>
		case _RIGHT:
			firstDoTunning++;
 8001b62:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <tunneSelect+0x74>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <tunneSelect+0x74>)
 8001b6c:	701a      	strb	r2, [r3, #0]
			if (firstDoTunning >MIDI_B2)
 8001b6e:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <tunneSelect+0x74>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b2f      	cmp	r3, #47	; 0x2f
 8001b74:	d902      	bls.n	8001b7c <tunneSelect+0x30>
				firstDoTunning = MIDI_C2;
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <tunneSelect+0x74>)
 8001b78:	2224      	movs	r2, #36	; 0x24
 8001b7a:	701a      	strb	r2, [r3, #0]
			flag = 1;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	71fb      	strb	r3, [r7, #7]
			break;
 8001b80:	e00f      	b.n	8001ba2 <tunneSelect+0x56>
		case _LEFT:
			firstDoTunning--;
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <tunneSelect+0x74>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <tunneSelect+0x74>)
 8001b8c:	701a      	strb	r2, [r3, #0]
			if (firstDoTunning < MIDI_C2)
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <tunneSelect+0x74>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b23      	cmp	r3, #35	; 0x23
 8001b94:	d802      	bhi.n	8001b9c <tunneSelect+0x50>
				firstDoTunning = MIDI_B2;
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <tunneSelect+0x74>)
 8001b98:	222f      	movs	r2, #47	; 0x2f
 8001b9a:	701a      	strb	r2, [r3, #0]
			flag = 1;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	71fb      	strb	r3, [r7, #7]
			break;
 8001ba0:	bf00      	nop
	}

	if (flag){
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <tunneSelect+0x62>
		screenNum = TUNNE_SCREEN;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <tunneSelect+0x78>)
 8001baa:	2205      	movs	r2, #5
 8001bac:	701a      	strb	r2, [r3, #0]
	}
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	200005e8 	.word	0x200005e8
 8001bc0:	200002a0 	.word	0x200002a0
 8001bc4:	2000027b 	.word	0x2000027b

08001bc8 <sendChord>:


void sendChord(unsigned long bnotes, int velocity, int channel){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]

  uint8_t note1;
  uint8_t note2;
  uint8_t note3;

  note1 = (bnotes & 0x7f);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bdc:	75fb      	strb	r3, [r7, #23]
  note2 = (bnotes >> 8) & 0x7f;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001be8:	75bb      	strb	r3, [r7, #22]
  note3 = (bnotes >> 16) & 0x7f;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	0c1b      	lsrs	r3, r3, #16
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bf4:	757b      	strb	r3, [r7, #21]

  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <sendChord+0xa8>)
 8001bf8:	2209      	movs	r2, #9
 8001bfa:	701a      	strb	r2, [r3, #0]
  midi_msg[1] = 0x90 | 1;
 8001bfc:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <sendChord+0xa8>)
 8001bfe:	2291      	movs	r2, #145	; 0x91
 8001c00:	705a      	strb	r2, [r3, #1]
  midi_msg[2] = note1;
 8001c02:	4a1b      	ldr	r2, [pc, #108]	; (8001c70 <sendChord+0xa8>)
 8001c04:	7dfb      	ldrb	r3, [r7, #23]
 8001c06:	7093      	strb	r3, [r2, #2]
  midi_msg[3] = velocity;
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <sendChord+0xa8>)
 8001c0e:	70da      	strb	r2, [r3, #3]
  MIDI_SendBuffer(midi_msg, 4);
 8001c10:	2104      	movs	r1, #4
 8001c12:	4817      	ldr	r0, [pc, #92]	; (8001c70 <sendChord+0xa8>)
 8001c14:	f008 f8f2 	bl	8009dfc <MIDI_SendBuffer>

  if (note2 && note3){
 8001c18:	7dbb      	ldrb	r3, [r7, #22]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d024      	beq.n	8001c68 <sendChord+0xa0>
 8001c1e:	7d7b      	ldrb	r3, [r7, #21]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d021      	beq.n	8001c68 <sendChord+0xa0>

	  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <sendChord+0xa8>)
 8001c26:	2209      	movs	r2, #9
 8001c28:	701a      	strb	r2, [r3, #0]
	  midi_msg[1] = 0x90 | 1;
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <sendChord+0xa8>)
 8001c2c:	2291      	movs	r2, #145	; 0x91
 8001c2e:	705a      	strb	r2, [r3, #1]
	  midi_msg[2] = note2;
 8001c30:	4a0f      	ldr	r2, [pc, #60]	; (8001c70 <sendChord+0xa8>)
 8001c32:	7dbb      	ldrb	r3, [r7, #22]
 8001c34:	7093      	strb	r3, [r2, #2]
	  midi_msg[3] = velocity;
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <sendChord+0xa8>)
 8001c3c:	70da      	strb	r2, [r3, #3]
	  MIDI_SendBuffer(midi_msg, 4);
 8001c3e:	2104      	movs	r1, #4
 8001c40:	480b      	ldr	r0, [pc, #44]	; (8001c70 <sendChord+0xa8>)
 8001c42:	f008 f8db 	bl	8009dfc <MIDI_SendBuffer>

	  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <sendChord+0xa8>)
 8001c48:	2209      	movs	r2, #9
 8001c4a:	701a      	strb	r2, [r3, #0]
	  midi_msg[1] = 0x90 | 1;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <sendChord+0xa8>)
 8001c4e:	2291      	movs	r2, #145	; 0x91
 8001c50:	705a      	strb	r2, [r3, #1]
	  midi_msg[2] = note3;
 8001c52:	4a07      	ldr	r2, [pc, #28]	; (8001c70 <sendChord+0xa8>)
 8001c54:	7d7b      	ldrb	r3, [r7, #21]
 8001c56:	7093      	strb	r3, [r2, #2]
	  midi_msg[3] = velocity;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <sendChord+0xa8>)
 8001c5e:	70da      	strb	r2, [r3, #3]
	  MIDI_SendBuffer(midi_msg, 4);
 8001c60:	2104      	movs	r1, #4
 8001c62:	4803      	ldr	r0, [pc, #12]	; (8001c70 <sendChord+0xa8>)
 8001c64:	f008 f8ca 	bl	8009dfc <MIDI_SendBuffer>
  }
}
 8001c68:	bf00      	nop
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	2000060c 	.word	0x2000060c

08001c74 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){ // dac
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d103      	bne.n	8001c8e <HAL_TIM_PeriodElapsedCallback+0x1a>
		flag_dac = 1;
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
	}else if (htim->Instance == TIM2){ //tick
		flag_tick = 1;
	}

}
 8001c8c:	e007      	b.n	8001c9e <HAL_TIM_PeriodElapsedCallback+0x2a>
	}else if (htim->Instance == TIM2){ //tick
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c96:	d102      	bne.n	8001c9e <HAL_TIM_PeriodElapsedCallback+0x2a>
		flag_tick = 1;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40000400 	.word	0x40000400
 8001cb0:	20000283 	.word	0x20000283
 8001cb4:	20000282 	.word	0x20000282

08001cb8 <HAL_I2C_MasterTxCpltCallback>:


void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	_lcd_ISR();
 8001cc0:	f7ff f978 	bl	8000fb4 <_lcd_ISR>
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <osc_dac_init>:
uint8_t ratio_sen = 100;
uint8_t ratio_cuad = 100;
uint8_t ratio_ramp = 100;


void osc_dac_init(DAC_HandleTypeDef *p_hdac, uint32_t ch){
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
	handler_dac = p_hdac;
 8001ce6:	4a09      	ldr	r2, [pc, #36]	; (8001d0c <osc_dac_init+0x30>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6013      	str	r3, [r2, #0]
	dac_ch = ch;
 8001cec:	4a08      	ldr	r2, [pc, #32]	; (8001d10 <osc_dac_init+0x34>)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	6013      	str	r3, [r2, #0]

	HAL_DAC_Start(handler_dac, dac_ch);
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <osc_dac_init+0x30>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <osc_dac_init+0x34>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	f000 fc52 	bl	80025a6 <HAL_DAC_Start>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000614 	.word	0x20000614
 8001d10:	20000610 	.word	0x20000610

08001d14 <osc_dac_update>:

//must be handled with a 44100 Hz timer.
void osc_dac_update(void){
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0

	if (nota_activa!=-1){
 8001d18:	4b37      	ldr	r3, [pc, #220]	; (8001df8 <osc_dac_update+0xe4>)
 8001d1a:	f993 3000 	ldrsb.w	r3, [r3]
 8001d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d22:	d057      	beq.n	8001dd4 <osc_dac_update+0xc0>
		phase+= nota_incrFase[nota_activa];
 8001d24:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <osc_dac_update+0xe4>)
 8001d26:	f993 3000 	ldrsb.w	r3, [r3]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4b33      	ldr	r3, [pc, #204]	; (8001dfc <osc_dac_update+0xe8>)
 8001d2e:	5c9b      	ldrb	r3, [r3, r2]
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	4b33      	ldr	r3, [pc, #204]	; (8001e00 <osc_dac_update+0xec>)
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b31      	ldr	r3, [pc, #196]	; (8001e00 <osc_dac_update+0xec>)
 8001d3c:	801a      	strh	r2, [r3, #0]
		if (phase>OSC_LAST) phase -= OSC_LAST;
 8001d3e:	4b30      	ldr	r3, [pc, #192]	; (8001e00 <osc_dac_update+0xec>)
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	f244 520a 	movw	r2, #17674	; 0x450a
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d907      	bls.n	8001d5a <osc_dac_update+0x46>
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	; (8001e00 <osc_dac_update+0xec>)
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	f5a3 438a 	sub.w	r3, r3, #17664	; 0x4500
 8001d52:	3b0a      	subs	r3, #10
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	4b2a      	ldr	r3, [pc, #168]	; (8001e00 <osc_dac_update+0xec>)
 8001d58:	801a      	strh	r2, [r3, #0]
		dac_out = ratio_sen/100*tabla_seno[phase] + ratio_cuad/100*tabla_cuadrada[phase] + ratio_ramp/100*tabla_sierra[phase];
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <osc_dac_update+0xf0>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	4a2a      	ldr	r2, [pc, #168]	; (8001e08 <osc_dac_update+0xf4>)
 8001d60:	fba2 2303 	umull	r2, r3, r2, r3
 8001d64:	095b      	lsrs	r3, r3, #5
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <osc_dac_update+0xec>)
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <osc_dac_update+0xf8>)
 8001d72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	fb12 f303 	smulbb	r3, r2, r3
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <osc_dac_update+0xfc>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	4921      	ldr	r1, [pc, #132]	; (8001e08 <osc_dac_update+0xf4>)
 8001d84:	fba1 1303 	umull	r1, r3, r1, r3
 8001d88:	095b      	lsrs	r3, r3, #5
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	b299      	uxth	r1, r3
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <osc_dac_update+0xec>)
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <osc_dac_update+0x100>)
 8001d96:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	fb11 f303 	smulbb	r3, r1, r3
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	4413      	add	r3, r2
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <osc_dac_update+0x104>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	4917      	ldr	r1, [pc, #92]	; (8001e08 <osc_dac_update+0xf4>)
 8001dac:	fba1 1303 	umull	r1, r3, r1, r3
 8001db0:	095b      	lsrs	r3, r3, #5
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	b299      	uxth	r1, r3
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <osc_dac_update+0xec>)
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <osc_dac_update+0x108>)
 8001dbe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	fb11 f303 	smulbb	r3, r1, r3
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <osc_dac_update+0x10c>)
 8001dd0:	801a      	strh	r2, [r3, #0]
 8001dd2:	e005      	b.n	8001de0 <osc_dac_update+0xcc>
		//HAL_DAC_SetValue(handler_dac, dac_ch, DAC_ALIGN_12B_R, dac_out);
	}else{
		phase = 0;
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <osc_dac_update+0xec>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	801a      	strh	r2, [r3, #0]
		dac_out = 0;
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <osc_dac_update+0x10c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	801a      	strh	r2, [r3, #0]
	}

	HAL_DAC_SetValue(handler_dac, dac_ch, DAC_ALIGN_12B_R, dac_out);
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <osc_dac_update+0x110>)
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <osc_dac_update+0x114>)
 8001de6:	6819      	ldr	r1, [r3, #0]
 8001de8:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <osc_dac_update+0x10c>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f000 fc8d 	bl	800270c <HAL_DAC_SetValue>

//	flag_dac = 0;
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200000cb 	.word	0x200000cb
 8001dfc:	0803e3c4 	.word	0x0803e3c4
 8001e00:	20000284 	.word	0x20000284
 8001e04:	200000cc 	.word	0x200000cc
 8001e08:	51eb851f 	.word	0x51eb851f
 8001e0c:	0800a740 	.word	0x0800a740
 8001e10:	200000cd 	.word	0x200000cd
 8001e14:	0801bb6c 	.word	0x0801bb6c
 8001e18:	200000ce 	.word	0x200000ce
 8001e1c:	0802cf98 	.word	0x0802cf98
 8001e20:	20000286 	.word	0x20000286
 8001e24:	20000614 	.word	0x20000614
 8001e28:	20000610 	.word	0x20000610

08001e2c <osc_setNote>:


int8_t osc_setNote (uint8_t nn){
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]

	if (!nn){
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d104      	bne.n	8001e46 <osc_setNote+0x1a>
		nota_activa = -1;
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <osc_setNote+0x48>)
 8001e3e:	22ff      	movs	r2, #255	; 0xff
 8001e40:	701a      	strb	r2, [r3, #0]
		return 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	e00f      	b.n	8001e66 <osc_setNote+0x3a>
	}

	if(nn<24 || nn>60){
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	2b17      	cmp	r3, #23
 8001e4a:	d902      	bls.n	8001e52 <osc_setNote+0x26>
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	2b3c      	cmp	r3, #60	; 0x3c
 8001e50:	d902      	bls.n	8001e58 <osc_setNote+0x2c>
		return -1;
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e56:	e006      	b.n	8001e66 <osc_setNote+0x3a>
	}

	nota_activa = nn - NOTA_C1;
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	3b18      	subs	r3, #24
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	b25a      	sxtb	r2, r3
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <osc_setNote+0x48>)
 8001e62:	701a      	strb	r2, [r3, #0]
	return 0;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	200000cb 	.word	0x200000cb

08001e78 <osc_setRatios>:

int8_t osc_setRatios(uint8_t rsen, uint8_t rcuad, uint8_t rsier){
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
 8001e82:	460b      	mov	r3, r1
 8001e84:	71bb      	strb	r3, [r7, #6]
 8001e86:	4613      	mov	r3, r2
 8001e88:	717b      	strb	r3, [r7, #5]

	if (rsen > 100 || rcuad > 100 || rsier > 100){
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	2b64      	cmp	r3, #100	; 0x64
 8001e8e:	d805      	bhi.n	8001e9c <osc_setRatios+0x24>
 8001e90:	79bb      	ldrb	r3, [r7, #6]
 8001e92:	2b64      	cmp	r3, #100	; 0x64
 8001e94:	d802      	bhi.n	8001e9c <osc_setRatios+0x24>
 8001e96:	797b      	ldrb	r3, [r7, #5]
 8001e98:	2b64      	cmp	r3, #100	; 0x64
 8001e9a:	d902      	bls.n	8001ea2 <osc_setRatios+0x2a>
		return -1;
 8001e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ea0:	e009      	b.n	8001eb6 <osc_setRatios+0x3e>
	}

	ratio_sen = rsen; ratio_cuad = rcuad; ratio_ramp = rsier;
 8001ea2:	4a08      	ldr	r2, [pc, #32]	; (8001ec4 <osc_setRatios+0x4c>)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	7013      	strb	r3, [r2, #0]
 8001ea8:	4a07      	ldr	r2, [pc, #28]	; (8001ec8 <osc_setRatios+0x50>)
 8001eaa:	79bb      	ldrb	r3, [r7, #6]
 8001eac:	7013      	strb	r3, [r2, #0]
 8001eae:	4a07      	ldr	r2, [pc, #28]	; (8001ecc <osc_setRatios+0x54>)
 8001eb0:	797b      	ldrb	r3, [r7, #5]
 8001eb2:	7013      	strb	r3, [r2, #0]
	return 0;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	200000cc 	.word	0x200000cc
 8001ec8:	200000cd 	.word	0x200000cd
 8001ecc:	200000ce 	.word	0x200000ce

08001ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_MspInit+0x4c>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	4a0f      	ldr	r2, [pc, #60]	; (8001f1c <HAL_MspInit+0x4c>)
 8001ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <HAL_MspInit+0x4c>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	603b      	str	r3, [r7, #0]
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_MspInit+0x4c>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a08      	ldr	r2, [pc, #32]	; (8001f1c <HAL_MspInit+0x4c>)
 8001efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_MspInit+0x4c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f0e:	2007      	movs	r0, #7
 8001f10:	f000 fae6 	bl	80024e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40023800 	.word	0x40023800

08001f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f32:	e7fe      	b.n	8001f32 <HardFault_Handler+0x4>

08001f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <MemManage_Handler+0x4>

08001f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <BusFault_Handler+0x4>

08001f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <UsageFault_Handler+0x4>

08001f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f74:	f000 f9a2 	bl	80022bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f80:	4802      	ldr	r0, [pc, #8]	; (8001f8c <TIM2_IRQHandler+0x10>)
 8001f82:	f004 fcd8 	bl	8006936 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000658 	.word	0x20000658

08001f90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <TIM3_IRQHandler+0x10>)
 8001f96:	f004 fcce 	bl	8006936 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000618 	.word	0x20000618

08001fa4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <I2C1_EV_IRQHandler+0x10>)
 8001faa:	f001 f8ad 	bl	8003108 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200002c4 	.word	0x200002c4

08001fb8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001fbc:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <I2C1_ER_IRQHandler+0x10>)
 8001fbe:	f001 fa09 	bl	80033d4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200002c4 	.word	0x200002c4

08001fcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001fd0:	4802      	ldr	r0, [pc, #8]	; (8001fdc <OTG_FS_IRQHandler+0x10>)
 8001fd2:	f002 fff8 	bl	8004fc6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000cac 	.word	0x20000cac

08001fe0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <SystemInit+0x28>)
 8001fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fea:	4a07      	ldr	r2, [pc, #28]	; (8002008 <SystemInit+0x28>)
 8001fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ff4:	4b04      	ldr	r3, [pc, #16]	; (8002008 <SystemInit+0x28>)
 8001ff6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ffa:	609a      	str	r2, [r3, #8]
#endif
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002012:	f107 0308 	add.w	r3, r7, #8
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002020:	463b      	mov	r3, r7
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <MX_TIM2_Init+0x94>)
 800202a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800202e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <MX_TIM2_Init+0x94>)
 8002032:	2263      	movs	r2, #99	; 0x63
 8002034:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002036:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <MX_TIM2_Init+0x94>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 840-1;
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <MX_TIM2_Init+0x94>)
 800203e:	f240 3247 	movw	r2, #839	; 0x347
 8002042:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002044:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <MX_TIM2_Init+0x94>)
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <MX_TIM2_Init+0x94>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002050:	4813      	ldr	r0, [pc, #76]	; (80020a0 <MX_TIM2_Init+0x94>)
 8002052:	f004 fc21 	bl	8006898 <HAL_TIM_Base_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800205c:	f7ff fe36 	bl	8001ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002064:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002066:	f107 0308 	add.w	r3, r7, #8
 800206a:	4619      	mov	r1, r3
 800206c:	480c      	ldr	r0, [pc, #48]	; (80020a0 <MX_TIM2_Init+0x94>)
 800206e:	f004 fd6a 	bl	8006b46 <HAL_TIM_ConfigClockSource>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002078:	f7ff fe28 	bl	8001ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002084:	463b      	mov	r3, r7
 8002086:	4619      	mov	r1, r3
 8002088:	4805      	ldr	r0, [pc, #20]	; (80020a0 <MX_TIM2_Init+0x94>)
 800208a:	f004 ff75 	bl	8006f78 <HAL_TIMEx_MasterConfigSynchronization>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002094:	f7ff fe1a 	bl	8001ccc <Error_Handler>
  }

}
 8002098:	bf00      	nop
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000658 	.word	0x20000658

080020a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020aa:	f107 0308 	add.w	r3, r7, #8
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b8:	463b      	mov	r3, r7
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80020c0:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <MX_TIM3_Init+0x90>)
 80020c2:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <MX_TIM3_Init+0x94>)
 80020c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 119-1;
 80020c6:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <MX_TIM3_Init+0x90>)
 80020c8:	2276      	movs	r2, #118	; 0x76
 80020ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <MX_TIM3_Init+0x90>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16-1;
 80020d2:	4b18      	ldr	r3, [pc, #96]	; (8002134 <MX_TIM3_Init+0x90>)
 80020d4:	220f      	movs	r2, #15
 80020d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d8:	4b16      	ldr	r3, [pc, #88]	; (8002134 <MX_TIM3_Init+0x90>)
 80020da:	2200      	movs	r2, #0
 80020dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <MX_TIM3_Init+0x90>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020e4:	4813      	ldr	r0, [pc, #76]	; (8002134 <MX_TIM3_Init+0x90>)
 80020e6:	f004 fbd7 	bl	8006898 <HAL_TIM_Base_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80020f0:	f7ff fdec 	bl	8001ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020fa:	f107 0308 	add.w	r3, r7, #8
 80020fe:	4619      	mov	r1, r3
 8002100:	480c      	ldr	r0, [pc, #48]	; (8002134 <MX_TIM3_Init+0x90>)
 8002102:	f004 fd20 	bl	8006b46 <HAL_TIM_ConfigClockSource>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 800210c:	f7ff fdde 	bl	8001ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002110:	2300      	movs	r3, #0
 8002112:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002118:	463b      	mov	r3, r7
 800211a:	4619      	mov	r1, r3
 800211c:	4805      	ldr	r0, [pc, #20]	; (8002134 <MX_TIM3_Init+0x90>)
 800211e:	f004 ff2b 	bl	8006f78 <HAL_TIMEx_MasterConfigSynchronization>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002128:	f7ff fdd0 	bl	8001ccc <Error_Handler>
  }

}
 800212c:	bf00      	nop
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000618 	.word	0x20000618
 8002138:	40000400 	.word	0x40000400

0800213c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214c:	d116      	bne.n	800217c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <HAL_TIM_Base_MspInit+0x80>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	4a19      	ldr	r2, [pc, #100]	; (80021bc <HAL_TIM_Base_MspInit+0x80>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6413      	str	r3, [r2, #64]	; 0x40
 800215e:	4b17      	ldr	r3, [pc, #92]	; (80021bc <HAL_TIM_Base_MspInit+0x80>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	201c      	movs	r0, #28
 8002170:	f000 f9c1 	bl	80024f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002174:	201c      	movs	r0, #28
 8002176:	f000 f9da 	bl	800252e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800217a:	e01a      	b.n	80021b2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM3)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0f      	ldr	r2, [pc, #60]	; (80021c0 <HAL_TIM_Base_MspInit+0x84>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d115      	bne.n	80021b2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <HAL_TIM_Base_MspInit+0x80>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <HAL_TIM_Base_MspInit+0x80>)
 8002190:	f043 0302 	orr.w	r3, r3, #2
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_TIM_Base_MspInit+0x80>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	201d      	movs	r0, #29
 80021a8:	f000 f9a5 	bl	80024f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021ac:	201d      	movs	r0, #29
 80021ae:	f000 f9be 	bl	800252e <HAL_NVIC_EnableIRQ>
}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40000400 	.word	0x40000400

080021c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021ca:	e003      	b.n	80021d4 <LoopCopyDataInit>

080021cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80021ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021d2:	3104      	adds	r1, #4

080021d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021d4:	480b      	ldr	r0, [pc, #44]	; (8002204 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80021d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80021dc:	d3f6      	bcc.n	80021cc <CopyDataInit>
  ldr  r2, =_sbss
 80021de:	4a0b      	ldr	r2, [pc, #44]	; (800220c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80021e0:	e002      	b.n	80021e8 <LoopFillZerobss>

080021e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80021e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80021e4:	f842 3b04 	str.w	r3, [r2], #4

080021e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80021ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80021ec:	d3f9      	bcc.n	80021e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021ee:	f7ff fef7 	bl	8001fe0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021f2:	f008 f939 	bl	800a468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021f6:	f7fe fee9 	bl	8000fcc <main>
  bx  lr    
 80021fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002200:	0803e41c 	.word	0x0803e41c
  ldr  r0, =_sdata
 8002204:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002208:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 800220c:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8002210:	200010b4 	.word	0x200010b4

08002214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002214:	e7fe      	b.n	8002214 <ADC_IRQHandler>
	...

08002218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800221c:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <HAL_Init+0x40>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0d      	ldr	r2, [pc, #52]	; (8002258 <HAL_Init+0x40>)
 8002222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002226:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_Init+0x40>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <HAL_Init+0x40>)
 800222e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002232:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_Init+0x40>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a07      	ldr	r2, [pc, #28]	; (8002258 <HAL_Init+0x40>)
 800223a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002240:	2003      	movs	r0, #3
 8002242:	f000 f94d 	bl	80024e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002246:	2000      	movs	r0, #0
 8002248:	f000 f808 	bl	800225c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800224c:	f7ff fe40 	bl	8001ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023c00 	.word	0x40023c00

0800225c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_InitTick+0x54>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_InitTick+0x58>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	4619      	mov	r1, r3
 800226e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002272:	fbb3 f3f1 	udiv	r3, r3, r1
 8002276:	fbb2 f3f3 	udiv	r3, r2, r3
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f965 	bl	800254a <HAL_SYSTICK_Config>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e00e      	b.n	80022a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b0f      	cmp	r3, #15
 800228e:	d80a      	bhi.n	80022a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002290:	2200      	movs	r2, #0
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002298:	f000 f92d 	bl	80024f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800229c:	4a06      	ldr	r2, [pc, #24]	; (80022b8 <HAL_InitTick+0x5c>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	e000      	b.n	80022a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	200000d0 	.word	0x200000d0
 80022b4:	200000d8 	.word	0x200000d8
 80022b8:	200000d4 	.word	0x200000d4

080022bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_IncTick+0x20>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_IncTick+0x24>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4413      	add	r3, r2
 80022cc:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <HAL_IncTick+0x24>)
 80022ce:	6013      	str	r3, [r2, #0]
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	200000d8 	.word	0x200000d8
 80022e0:	20000698 	.word	0x20000698

080022e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return uwTick;
 80022e8:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <HAL_GetTick+0x14>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000698 	.word	0x20000698

080022fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7ff ffee 	bl	80022e4 <HAL_GetTick>
 8002308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002314:	d005      	beq.n	8002322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_Delay+0x40>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002322:	bf00      	nop
 8002324:	f7ff ffde 	bl	80022e4 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	429a      	cmp	r2, r3
 8002332:	d8f7      	bhi.n	8002324 <HAL_Delay+0x28>
  {
  }
}
 8002334:	bf00      	nop
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	200000d8 	.word	0x200000d8

08002340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800235c:	4013      	ands	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800236c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002372:	4a04      	ldr	r2, [pc, #16]	; (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	60d3      	str	r3, [r2, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800238c:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <__NVIC_GetPriorityGrouping+0x18>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	f003 0307 	and.w	r3, r3, #7
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	db0b      	blt.n	80023ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	f003 021f 	and.w	r2, r3, #31
 80023bc:	4907      	ldr	r1, [pc, #28]	; (80023dc <__NVIC_EnableIRQ+0x38>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	2001      	movs	r0, #1
 80023c6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000e100 	.word	0xe000e100

080023e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	6039      	str	r1, [r7, #0]
 80023ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	db0a      	blt.n	800240a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	490c      	ldr	r1, [pc, #48]	; (800242c <__NVIC_SetPriority+0x4c>)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	0112      	lsls	r2, r2, #4
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	440b      	add	r3, r1
 8002404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002408:	e00a      	b.n	8002420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	b2da      	uxtb	r2, r3
 800240e:	4908      	ldr	r1, [pc, #32]	; (8002430 <__NVIC_SetPriority+0x50>)
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	3b04      	subs	r3, #4
 8002418:	0112      	lsls	r2, r2, #4
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	440b      	add	r3, r1
 800241e:	761a      	strb	r2, [r3, #24]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000e100 	.word	0xe000e100
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002434:	b480      	push	{r7}
 8002436:	b089      	sub	sp, #36	; 0x24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f1c3 0307 	rsb	r3, r3, #7
 800244e:	2b04      	cmp	r3, #4
 8002450:	bf28      	it	cs
 8002452:	2304      	movcs	r3, #4
 8002454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3304      	adds	r3, #4
 800245a:	2b06      	cmp	r3, #6
 800245c:	d902      	bls.n	8002464 <NVIC_EncodePriority+0x30>
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3b03      	subs	r3, #3
 8002462:	e000      	b.n	8002466 <NVIC_EncodePriority+0x32>
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43da      	mvns	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	401a      	ands	r2, r3
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800247c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	fa01 f303 	lsl.w	r3, r1, r3
 8002486:	43d9      	mvns	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	4313      	orrs	r3, r2
         );
}
 800248e:	4618      	mov	r0, r3
 8002490:	3724      	adds	r7, #36	; 0x24
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024ac:	d301      	bcc.n	80024b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00f      	b.n	80024d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b2:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <SysTick_Config+0x40>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ba:	210f      	movs	r1, #15
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024c0:	f7ff ff8e 	bl	80023e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <SysTick_Config+0x40>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ca:	4b04      	ldr	r3, [pc, #16]	; (80024dc <SysTick_Config+0x40>)
 80024cc:	2207      	movs	r2, #7
 80024ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	e000e010 	.word	0xe000e010

080024e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ff29 	bl	8002340 <__NVIC_SetPriorityGrouping>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002508:	f7ff ff3e 	bl	8002388 <__NVIC_GetPriorityGrouping>
 800250c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	6978      	ldr	r0, [r7, #20]
 8002514:	f7ff ff8e 	bl	8002434 <NVIC_EncodePriority>
 8002518:	4602      	mov	r2, r0
 800251a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff5d 	bl	80023e0 <__NVIC_SetPriority>
}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff31 	bl	80023a4 <__NVIC_EnableIRQ>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff ffa2 	bl	800249c <SysTick_Config>
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e014      	b.n	800259e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	791b      	ldrb	r3, [r3, #4]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d105      	bne.n	800258a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7fe f9a1 	bl	80008cc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2202      	movs	r2, #2
 800258e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	2300      	movs	r3, #0
 80025b6:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	795b      	ldrb	r3, [r3, #5]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_DAC_Start+0x1e>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e050      	b.n	8002666 <HAL_DAC_Start+0xc0>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2202      	movs	r2, #2
 80025ce:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6819      	ldr	r1, [r3, #0]
 80025d6:	2201      	movs	r2, #1
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	409a      	lsls	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d11a      	bne.n	8002620 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002600:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b04      	cmp	r3, #4
 8002606:	d127      	bne.n	8002658 <HAL_DAC_Start+0xb2>
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b38      	cmp	r3, #56	; 0x38
 800260c:	d124      	bne.n	8002658 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0201 	orr.w	r2, r2, #1
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	e01b      	b.n	8002658 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800262a:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8002636:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800263e:	d10b      	bne.n	8002658 <HAL_DAC_Start+0xb2>
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8002646:	d107      	bne.n	8002658 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0202 	orr.w	r2, r2, #2
 8002656:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002672:	b480      	push	{r7}
 8002674:	b087      	sub	sp, #28
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	795b      	ldrb	r3, [r3, #5]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <HAL_DAC_ConfigChannel+0x20>
 800268e:	2302      	movs	r3, #2
 8002690:	e036      	b.n	8002700 <HAL_DAC_ConfigChannel+0x8e>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2201      	movs	r2, #1
 8002696:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2202      	movs	r2, #2
 800269c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80026a6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4013      	ands	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6819      	ldr	r1, [r3, #0]
 80026e0:	22c0      	movs	r2, #192	; 0xc0
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43da      	mvns	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	400a      	ands	r2, r1
 80026f0:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	371c      	adds	r7, #28
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d105      	bne.n	8002736 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4413      	add	r3, r2
 8002730:	3308      	adds	r3, #8
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	e004      	b.n	8002740 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4413      	add	r3, r2
 800273c:	3314      	adds	r3, #20
 800273e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	461a      	mov	r2, r3
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	371c      	adds	r7, #28
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d004      	beq.n	8002774 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2280      	movs	r2, #128	; 0x80
 800276e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e00c      	b.n	800278e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2205      	movs	r2, #5
 8002778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0201 	bic.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027a8:	b2db      	uxtb	r3, r3
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	; 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	e16b      	b.n	8002aac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027d4:	2201      	movs	r2, #1
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	f040 815a 	bne.w	8002aa6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d00b      	beq.n	8002812 <HAL_GPIO_Init+0x5a>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d007      	beq.n	8002812 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002806:	2b11      	cmp	r3, #17
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b12      	cmp	r3, #18
 8002810:	d130      	bne.n	8002874 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	2203      	movs	r2, #3
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002848:	2201      	movs	r2, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 0201 	and.w	r2, r3, #1
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	2203      	movs	r2, #3
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0xfc>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b12      	cmp	r3, #18
 80028b2:	d123      	bne.n	80028fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	08da      	lsrs	r2, r3, #3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3208      	adds	r2, #8
 80028bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	220f      	movs	r2, #15
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	08da      	lsrs	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3208      	adds	r2, #8
 80028f6:	69b9      	ldr	r1, [r7, #24]
 80028f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	2203      	movs	r2, #3
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0203 	and.w	r2, r3, #3
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80b4 	beq.w	8002aa6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	4b5f      	ldr	r3, [pc, #380]	; (8002ac0 <HAL_GPIO_Init+0x308>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	4a5e      	ldr	r2, [pc, #376]	; (8002ac0 <HAL_GPIO_Init+0x308>)
 8002948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800294c:	6453      	str	r3, [r2, #68]	; 0x44
 800294e:	4b5c      	ldr	r3, [pc, #368]	; (8002ac0 <HAL_GPIO_Init+0x308>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800295a:	4a5a      	ldr	r2, [pc, #360]	; (8002ac4 <HAL_GPIO_Init+0x30c>)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	089b      	lsrs	r3, r3, #2
 8002960:	3302      	adds	r3, #2
 8002962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	220f      	movs	r2, #15
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a51      	ldr	r2, [pc, #324]	; (8002ac8 <HAL_GPIO_Init+0x310>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d02b      	beq.n	80029de <HAL_GPIO_Init+0x226>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a50      	ldr	r2, [pc, #320]	; (8002acc <HAL_GPIO_Init+0x314>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d025      	beq.n	80029da <HAL_GPIO_Init+0x222>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4f      	ldr	r2, [pc, #316]	; (8002ad0 <HAL_GPIO_Init+0x318>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d01f      	beq.n	80029d6 <HAL_GPIO_Init+0x21e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4e      	ldr	r2, [pc, #312]	; (8002ad4 <HAL_GPIO_Init+0x31c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d019      	beq.n	80029d2 <HAL_GPIO_Init+0x21a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a4d      	ldr	r2, [pc, #308]	; (8002ad8 <HAL_GPIO_Init+0x320>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d013      	beq.n	80029ce <HAL_GPIO_Init+0x216>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a4c      	ldr	r2, [pc, #304]	; (8002adc <HAL_GPIO_Init+0x324>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00d      	beq.n	80029ca <HAL_GPIO_Init+0x212>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a4b      	ldr	r2, [pc, #300]	; (8002ae0 <HAL_GPIO_Init+0x328>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d007      	beq.n	80029c6 <HAL_GPIO_Init+0x20e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4a      	ldr	r2, [pc, #296]	; (8002ae4 <HAL_GPIO_Init+0x32c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d101      	bne.n	80029c2 <HAL_GPIO_Init+0x20a>
 80029be:	2307      	movs	r3, #7
 80029c0:	e00e      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029c2:	2308      	movs	r3, #8
 80029c4:	e00c      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029c6:	2306      	movs	r3, #6
 80029c8:	e00a      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029ca:	2305      	movs	r3, #5
 80029cc:	e008      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029ce:	2304      	movs	r3, #4
 80029d0:	e006      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029d2:	2303      	movs	r3, #3
 80029d4:	e004      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e002      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029de:	2300      	movs	r3, #0
 80029e0:	69fa      	ldr	r2, [r7, #28]
 80029e2:	f002 0203 	and.w	r2, r2, #3
 80029e6:	0092      	lsls	r2, r2, #2
 80029e8:	4093      	lsls	r3, r2
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029f0:	4934      	ldr	r1, [pc, #208]	; (8002ac4 <HAL_GPIO_Init+0x30c>)
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	089b      	lsrs	r3, r3, #2
 80029f6:	3302      	adds	r3, #2
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029fe:	4b3a      	ldr	r3, [pc, #232]	; (8002ae8 <HAL_GPIO_Init+0x330>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a22:	4a31      	ldr	r2, [pc, #196]	; (8002ae8 <HAL_GPIO_Init+0x330>)
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a28:	4b2f      	ldr	r3, [pc, #188]	; (8002ae8 <HAL_GPIO_Init+0x330>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a4c:	4a26      	ldr	r2, [pc, #152]	; (8002ae8 <HAL_GPIO_Init+0x330>)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a52:	4b25      	ldr	r3, [pc, #148]	; (8002ae8 <HAL_GPIO_Init+0x330>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a76:	4a1c      	ldr	r2, [pc, #112]	; (8002ae8 <HAL_GPIO_Init+0x330>)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <HAL_GPIO_Init+0x330>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aa0:	4a11      	ldr	r2, [pc, #68]	; (8002ae8 <HAL_GPIO_Init+0x330>)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	61fb      	str	r3, [r7, #28]
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	2b0f      	cmp	r3, #15
 8002ab0:	f67f ae90 	bls.w	80027d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	3724      	adds	r7, #36	; 0x24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40013800 	.word	0x40013800
 8002ac8:	40020000 	.word	0x40020000
 8002acc:	40020400 	.word	0x40020400
 8002ad0:	40020800 	.word	0x40020800
 8002ad4:	40020c00 	.word	0x40020c00
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40021400 	.word	0x40021400
 8002ae0:	40021800 	.word	0x40021800
 8002ae4:	40021c00 	.word	0x40021c00
 8002ae8:	40013c00 	.word	0x40013c00

08002aec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	887b      	ldrh	r3, [r7, #2]
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b04:	2301      	movs	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
 8002b08:	e001      	b.n	8002b0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	807b      	strh	r3, [r7, #2]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b2c:	787b      	ldrb	r3, [r7, #1]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b32:	887a      	ldrh	r2, [r7, #2]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b38:	e003      	b.n	8002b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b3a:	887b      	ldrh	r3, [r7, #2]
 8002b3c:	041a      	lsls	r2, r3, #16
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	619a      	str	r2, [r3, #24]
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e11f      	b.n	8002da2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fd ffea 	bl	8000b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2224      	movs	r2, #36	; 0x24
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0201 	bic.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ba2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bb4:	f003 fe5c 	bl	8006870 <HAL_RCC_GetPCLK1Freq>
 8002bb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	4a7b      	ldr	r2, [pc, #492]	; (8002dac <HAL_I2C_Init+0x25c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d807      	bhi.n	8002bd4 <HAL_I2C_Init+0x84>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4a7a      	ldr	r2, [pc, #488]	; (8002db0 <HAL_I2C_Init+0x260>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	bf94      	ite	ls
 8002bcc:	2301      	movls	r3, #1
 8002bce:	2300      	movhi	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	e006      	b.n	8002be2 <HAL_I2C_Init+0x92>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4a77      	ldr	r2, [pc, #476]	; (8002db4 <HAL_I2C_Init+0x264>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	bf94      	ite	ls
 8002bdc:	2301      	movls	r3, #1
 8002bde:	2300      	movhi	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e0db      	b.n	8002da2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4a72      	ldr	r2, [pc, #456]	; (8002db8 <HAL_I2C_Init+0x268>)
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	0c9b      	lsrs	r3, r3, #18
 8002bf4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4a64      	ldr	r2, [pc, #400]	; (8002dac <HAL_I2C_Init+0x25c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d802      	bhi.n	8002c24 <HAL_I2C_Init+0xd4>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	3301      	adds	r3, #1
 8002c22:	e009      	b.n	8002c38 <HAL_I2C_Init+0xe8>
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	4a63      	ldr	r2, [pc, #396]	; (8002dbc <HAL_I2C_Init+0x26c>)
 8002c30:	fba2 2303 	umull	r2, r3, r2, r3
 8002c34:	099b      	lsrs	r3, r3, #6
 8002c36:	3301      	adds	r3, #1
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	4956      	ldr	r1, [pc, #344]	; (8002dac <HAL_I2C_Init+0x25c>)
 8002c54:	428b      	cmp	r3, r1
 8002c56:	d80d      	bhi.n	8002c74 <HAL_I2C_Init+0x124>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1e59      	subs	r1, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c66:	3301      	adds	r3, #1
 8002c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	bf38      	it	cc
 8002c70:	2304      	movcc	r3, #4
 8002c72:	e04f      	b.n	8002d14 <HAL_I2C_Init+0x1c4>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d111      	bne.n	8002ca0 <HAL_I2C_Init+0x150>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1e58      	subs	r0, r3, #1
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6859      	ldr	r1, [r3, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	440b      	add	r3, r1
 8002c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	e012      	b.n	8002cc6 <HAL_I2C_Init+0x176>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1e58      	subs	r0, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6859      	ldr	r1, [r3, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	0099      	lsls	r1, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bf0c      	ite	eq
 8002cc0:	2301      	moveq	r3, #1
 8002cc2:	2300      	movne	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_I2C_Init+0x17e>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e022      	b.n	8002d14 <HAL_I2C_Init+0x1c4>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10e      	bne.n	8002cf4 <HAL_I2C_Init+0x1a4>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1e58      	subs	r0, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6859      	ldr	r1, [r3, #4]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	440b      	add	r3, r1
 8002ce4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce8:	3301      	adds	r3, #1
 8002cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cf2:	e00f      	b.n	8002d14 <HAL_I2C_Init+0x1c4>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1e58      	subs	r0, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6859      	ldr	r1, [r3, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	0099      	lsls	r1, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	6809      	ldr	r1, [r1, #0]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69da      	ldr	r2, [r3, #28]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6911      	ldr	r1, [r2, #16]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68d2      	ldr	r2, [r2, #12]
 8002d4e:	4311      	orrs	r1, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	430b      	orrs	r3, r1
 8002d56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	000186a0 	.word	0x000186a0
 8002db0:	001e847f 	.word	0x001e847f
 8002db4:	003d08ff 	.word	0x003d08ff
 8002db8:	431bde83 	.word	0x431bde83
 8002dbc:	10624dd3 	.word	0x10624dd3

08002dc0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	460b      	mov	r3, r1
 8002dce:	817b      	strh	r3, [r7, #10]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dd4:	f7ff fa86 	bl	80022e4 <HAL_GetTick>
 8002dd8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	f040 80e0 	bne.w	8002fa8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	2319      	movs	r3, #25
 8002dee:	2201      	movs	r2, #1
 8002df0:	4970      	ldr	r1, [pc, #448]	; (8002fb4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f001 fdf5 	bl	80049e2 <I2C_WaitOnFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e0d3      	b.n	8002faa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_I2C_Master_Transmit+0x50>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e0cc      	b.n	8002faa <HAL_I2C_Master_Transmit+0x1ea>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d007      	beq.n	8002e36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 0201 	orr.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2221      	movs	r2, #33	; 0x21
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2210      	movs	r2, #16
 8002e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	893a      	ldrh	r2, [r7, #8]
 8002e66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4a50      	ldr	r2, [pc, #320]	; (8002fb8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e78:	8979      	ldrh	r1, [r7, #10]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	6a3a      	ldr	r2, [r7, #32]
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f001 fcae 	bl	80047e0 <I2C_MasterRequestWrite>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e08d      	b.n	8002faa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e8e:	2300      	movs	r3, #0
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ea4:	e066      	b.n	8002f74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	6a39      	ldr	r1, [r7, #32]
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f001 fe6f 	bl	8004b8e <I2C_WaitOnTXEFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00d      	beq.n	8002ed2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d107      	bne.n	8002ece <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ecc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e06b      	b.n	8002faa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	781a      	ldrb	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d11b      	bne.n	8002f48 <HAL_I2C_Master_Transmit+0x188>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d017      	beq.n	8002f48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	781a      	ldrb	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	6a39      	ldr	r1, [r7, #32]
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f001 fe5f 	bl	8004c10 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00d      	beq.n	8002f74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d107      	bne.n	8002f70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e01a      	b.n	8002faa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d194      	bne.n	8002ea6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e000      	b.n	8002faa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fa8:	2302      	movs	r3, #2
  }
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	00100002 	.word	0x00100002
 8002fb8:	ffff0000 	.word	0xffff0000

08002fbc <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	460b      	mov	r3, r1
 8002fca:	817b      	strh	r3, [r7, #10]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	f040 8085 	bne.w	80030ec <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002fe2:	4b46      	ldr	r3, [pc, #280]	; (80030fc <HAL_I2C_Master_Transmit_IT+0x140>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	08db      	lsrs	r3, r3, #3
 8002fe8:	4a45      	ldr	r2, [pc, #276]	; (8003100 <HAL_I2C_Master_Transmit_IT+0x144>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	0a1a      	lsrs	r2, r3, #8
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009a      	lsls	r2, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d116      	bne.n	8003036 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f043 0220 	orr.w	r2, r3, #32
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e05b      	b.n	80030ee <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b02      	cmp	r3, #2
 8003042:	d0db      	beq.n	8002ffc <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <HAL_I2C_Master_Transmit_IT+0x96>
 800304e:	2302      	movs	r3, #2
 8003050:	e04d      	b.n	80030ee <HAL_I2C_Master_Transmit_IT+0x132>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b01      	cmp	r3, #1
 8003066:	d007      	beq.n	8003078 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003086:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2221      	movs	r2, #33	; 0x21
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2210      	movs	r2, #16
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	893a      	ldrh	r2, [r7, #8]
 80030a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4a13      	ldr	r2, [pc, #76]	; (8003104 <HAL_I2C_Master_Transmit_IT+0x148>)
 80030b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80030ba:	897a      	ldrh	r2, [r7, #10]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ce:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80030e6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	e000      	b.n	80030ee <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 80030ec:	2302      	movs	r3, #2
  }
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	200000d0 	.word	0x200000d0
 8003100:	14f8b589 	.word	0x14f8b589
 8003104:	ffff0000 	.word	0xffff0000

08003108 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003128:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003130:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	2b10      	cmp	r3, #16
 8003136:	d003      	beq.n	8003140 <HAL_I2C_EV_IRQHandler+0x38>
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	2b40      	cmp	r3, #64	; 0x40
 800313c:	f040 80b6 	bne.w	80032ac <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10d      	bne.n	8003176 <HAL_I2C_EV_IRQHandler+0x6e>
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003160:	d003      	beq.n	800316a <HAL_I2C_EV_IRQHandler+0x62>
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003168:	d101      	bne.n	800316e <HAL_I2C_EV_IRQHandler+0x66>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <HAL_I2C_EV_IRQHandler+0x68>
 800316e:	2300      	movs	r3, #0
 8003170:	2b01      	cmp	r3, #1
 8003172:	f000 8127 	beq.w	80033c4 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00c      	beq.n	800319a <HAL_I2C_EV_IRQHandler+0x92>
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	0a5b      	lsrs	r3, r3, #9
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d006      	beq.n	800319a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f001 fdaf 	bl	8004cf0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fd12 	bl	8003bbc <I2C_Master_SB>
 8003198:	e087      	b.n	80032aa <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	08db      	lsrs	r3, r3, #3
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <HAL_I2C_EV_IRQHandler+0xb2>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	0a5b      	lsrs	r3, r3, #9
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fd88 	bl	8003cc8 <I2C_Master_ADD10>
 80031b8:	e077      	b.n	80032aa <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d009      	beq.n	80031da <HAL_I2C_EV_IRQHandler+0xd2>
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	0a5b      	lsrs	r3, r3, #9
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fda2 	bl	8003d1c <I2C_Master_ADDR>
 80031d8:	e067      	b.n	80032aa <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	089b      	lsrs	r3, r3, #2
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d030      	beq.n	8003248 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f4:	f000 80e8 	beq.w	80033c8 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	09db      	lsrs	r3, r3, #7
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00f      	beq.n	8003224 <HAL_I2C_EV_IRQHandler+0x11c>
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	0a9b      	lsrs	r3, r3, #10
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d009      	beq.n	8003224 <HAL_I2C_EV_IRQHandler+0x11c>
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	089b      	lsrs	r3, r3, #2
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d103      	bne.n	8003224 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f9de 	bl	80035de <I2C_MasterTransmit_TXE>
 8003222:	e042      	b.n	80032aa <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	089b      	lsrs	r3, r3, #2
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80cb 	beq.w	80033c8 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	0a5b      	lsrs	r3, r3, #9
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80c4 	beq.w	80033c8 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 fa68 	bl	8003716 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003246:	e0bf      	b.n	80033c8 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003256:	f000 80b7 	beq.w	80033c8 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	099b      	lsrs	r3, r3, #6
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00f      	beq.n	8003286 <HAL_I2C_EV_IRQHandler+0x17e>
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	0a9b      	lsrs	r3, r3, #10
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <HAL_I2C_EV_IRQHandler+0x17e>
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	089b      	lsrs	r3, r3, #2
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 fb30 	bl	80038e4 <I2C_MasterReceive_RXNE>
 8003284:	e011      	b.n	80032aa <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	089b      	lsrs	r3, r3, #2
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 809a 	beq.w	80033c8 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	0a5b      	lsrs	r3, r3, #9
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 8093 	beq.w	80033c8 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fba0 	bl	80039e8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032a8:	e08e      	b.n	80033c8 <HAL_I2C_EV_IRQHandler+0x2c0>
 80032aa:	e08d      	b.n	80033c8 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d004      	beq.n	80032be <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	61fb      	str	r3, [r7, #28]
 80032bc:	e007      	b.n	80032ce <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	085b      	lsrs	r3, r3, #1
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d012      	beq.n	8003300 <HAL_I2C_EV_IRQHandler+0x1f8>
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	0a5b      	lsrs	r3, r3, #9
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00c      	beq.n	8003300 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80032f6:	69b9      	ldr	r1, [r7, #24]
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 ff5e 	bl	80041ba <I2C_Slave_ADDR>
 80032fe:	e066      	b.n	80033ce <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	091b      	lsrs	r3, r3, #4
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d009      	beq.n	8003320 <HAL_I2C_EV_IRQHandler+0x218>
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	0a5b      	lsrs	r3, r3, #9
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 ff93 	bl	8004244 <I2C_Slave_STOPF>
 800331e:	e056      	b.n	80033ce <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003320:	7bbb      	ldrb	r3, [r7, #14]
 8003322:	2b21      	cmp	r3, #33	; 0x21
 8003324:	d002      	beq.n	800332c <HAL_I2C_EV_IRQHandler+0x224>
 8003326:	7bbb      	ldrb	r3, [r7, #14]
 8003328:	2b29      	cmp	r3, #41	; 0x29
 800332a:	d125      	bne.n	8003378 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	09db      	lsrs	r3, r3, #7
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00f      	beq.n	8003358 <HAL_I2C_EV_IRQHandler+0x250>
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	0a9b      	lsrs	r3, r3, #10
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d009      	beq.n	8003358 <HAL_I2C_EV_IRQHandler+0x250>
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	089b      	lsrs	r3, r3, #2
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d103      	bne.n	8003358 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 fe74 	bl	800403e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003356:	e039      	b.n	80033cc <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	089b      	lsrs	r3, r3, #2
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d033      	beq.n	80033cc <HAL_I2C_EV_IRQHandler+0x2c4>
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	0a5b      	lsrs	r3, r3, #9
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d02d      	beq.n	80033cc <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fea1 	bl	80040b8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003376:	e029      	b.n	80033cc <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	099b      	lsrs	r3, r3, #6
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00f      	beq.n	80033a4 <HAL_I2C_EV_IRQHandler+0x29c>
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	0a9b      	lsrs	r3, r3, #10
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d009      	beq.n	80033a4 <HAL_I2C_EV_IRQHandler+0x29c>
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	089b      	lsrs	r3, r3, #2
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d103      	bne.n	80033a4 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 feac 	bl	80040fa <I2C_SlaveReceive_RXNE>
 80033a2:	e014      	b.n	80033ce <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	089b      	lsrs	r3, r3, #2
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00e      	beq.n	80033ce <HAL_I2C_EV_IRQHandler+0x2c6>
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	0a5b      	lsrs	r3, r3, #9
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 feda 	bl	8004176 <I2C_SlaveReceive_BTF>
 80033c2:	e004      	b.n	80033ce <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 80033c4:	bf00      	nop
 80033c6:	e002      	b.n	80033ce <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033c8:	bf00      	nop
 80033ca:	e000      	b.n	80033ce <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033cc:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80033ce:	3720      	adds	r7, #32
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80033ec:	2300      	movs	r3, #0
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033f6:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	0a1b      	lsrs	r3, r3, #8
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00e      	beq.n	8003422 <HAL_I2C_ER_IRQHandler+0x4e>
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	0a1b      	lsrs	r3, r3, #8
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003420:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	0a5b      	lsrs	r3, r3, #9
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00e      	beq.n	800344c <HAL_I2C_ER_IRQHandler+0x78>
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	0a1b      	lsrs	r3, r3, #8
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	f043 0302 	orr.w	r3, r3, #2
 8003440:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800344a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	0a9b      	lsrs	r3, r3, #10
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d03f      	beq.n	80034d8 <HAL_I2C_ER_IRQHandler+0x104>
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	0a1b      	lsrs	r3, r3, #8
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d039      	beq.n	80034d8 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003464:	7efb      	ldrb	r3, [r7, #27]
 8003466:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346c:	b29b      	uxth	r3, r3
 800346e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003476:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800347e:	7ebb      	ldrb	r3, [r7, #26]
 8003480:	2b20      	cmp	r3, #32
 8003482:	d112      	bne.n	80034aa <HAL_I2C_ER_IRQHandler+0xd6>
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10f      	bne.n	80034aa <HAL_I2C_ER_IRQHandler+0xd6>
 800348a:	7cfb      	ldrb	r3, [r7, #19]
 800348c:	2b21      	cmp	r3, #33	; 0x21
 800348e:	d008      	beq.n	80034a2 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003490:	7cfb      	ldrb	r3, [r7, #19]
 8003492:	2b29      	cmp	r3, #41	; 0x29
 8003494:	d005      	beq.n	80034a2 <HAL_I2C_ER_IRQHandler+0xce>
 8003496:	7cfb      	ldrb	r3, [r7, #19]
 8003498:	2b28      	cmp	r3, #40	; 0x28
 800349a:	d106      	bne.n	80034aa <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b21      	cmp	r3, #33	; 0x21
 80034a0:	d103      	bne.n	80034aa <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fffe 	bl	80044a4 <I2C_Slave_AF>
 80034a8:	e016      	b.n	80034d8 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034b2:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	f043 0304 	orr.w	r3, r3, #4
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80034bc:	7efb      	ldrb	r3, [r7, #27]
 80034be:	2b10      	cmp	r3, #16
 80034c0:	d002      	beq.n	80034c8 <HAL_I2C_ER_IRQHandler+0xf4>
 80034c2:	7efb      	ldrb	r3, [r7, #27]
 80034c4:	2b40      	cmp	r3, #64	; 0x40
 80034c6:	d107      	bne.n	80034d8 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d6:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	0adb      	lsrs	r3, r3, #11
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00e      	beq.n	8003502 <HAL_I2C_ER_IRQHandler+0x12e>
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	0a1b      	lsrs	r3, r3, #8
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	f043 0308 	orr.w	r3, r3, #8
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003500:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f001 f835 	bl	8004584 <I2C_ITError>
  }
}
 800351a:	bf00      	nop
 800351c:	3728      	adds	r7, #40	; 0x28
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	460b      	mov	r3, r1
 8003568:	70fb      	strb	r3, [r7, #3]
 800356a:	4613      	mov	r3, r2
 800356c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b084      	sub	sp, #16
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035f4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	2b00      	cmp	r3, #0
 8003602:	d150      	bne.n	80036a6 <I2C_MasterTransmit_TXE+0xc8>
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	2b21      	cmp	r3, #33	; 0x21
 8003608:	d14d      	bne.n	80036a6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b08      	cmp	r3, #8
 800360e:	d01d      	beq.n	800364c <I2C_MasterTransmit_TXE+0x6e>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b20      	cmp	r3, #32
 8003614:	d01a      	beq.n	800364c <I2C_MasterTransmit_TXE+0x6e>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800361c:	d016      	beq.n	800364c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800362c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2211      	movs	r2, #17
 8003632:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7fe fb37 	bl	8001cb8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800364a:	e060      	b.n	800370e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800365a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800366a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b40      	cmp	r3, #64	; 0x40
 8003684:	d107      	bne.n	8003696 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff ff7d 	bl	800358e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003694:	e03b      	b.n	800370e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7fe fb0a 	bl	8001cb8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036a4:	e033      	b.n	800370e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	2b21      	cmp	r3, #33	; 0x21
 80036aa:	d005      	beq.n	80036b8 <I2C_MasterTransmit_TXE+0xda>
 80036ac:	7bbb      	ldrb	r3, [r7, #14]
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	d12d      	bne.n	800370e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	2b22      	cmp	r3, #34	; 0x22
 80036b6:	d12a      	bne.n	800370e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d108      	bne.n	80036d4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80036d2:	e01c      	b.n	800370e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b40      	cmp	r3, #64	; 0x40
 80036de:	d103      	bne.n	80036e8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f898 	bl	8003816 <I2C_MemoryTransmit_TXE_BTF>
}
 80036e6:	e012      	b.n	800370e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	781a      	ldrb	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800370c:	e7ff      	b.n	800370e <I2C_MasterTransmit_TXE+0x130>
 800370e:	bf00      	nop
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b21      	cmp	r3, #33	; 0x21
 800372e:	d165      	bne.n	80037fc <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d012      	beq.n	8003760 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	781a      	ldrb	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003754:	b29b      	uxth	r3, r3
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800375e:	e056      	b.n	800380e <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b08      	cmp	r3, #8
 8003764:	d01d      	beq.n	80037a2 <I2C_MasterTransmit_BTF+0x8c>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2b20      	cmp	r3, #32
 800376a:	d01a      	beq.n	80037a2 <I2C_MasterTransmit_BTF+0x8c>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003772:	d016      	beq.n	80037a2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003782:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2211      	movs	r2, #17
 8003788:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fe fa8c 	bl	8001cb8 <HAL_I2C_MasterTxCpltCallback>
}
 80037a0:	e035      	b.n	800380e <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037b0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b40      	cmp	r3, #64	; 0x40
 80037da:	d107      	bne.n	80037ec <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff fed2 	bl	800358e <HAL_I2C_MemTxCpltCallback>
}
 80037ea:	e010      	b.n	800380e <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7fe fa5f 	bl	8001cb8 <HAL_I2C_MasterTxCpltCallback>
}
 80037fa:	e008      	b.n	800380e <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b40      	cmp	r3, #64	; 0x40
 8003806:	d102      	bne.n	800380e <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f804 	bl	8003816 <I2C_MemoryTransmit_TXE_BTF>
}
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003822:	2b00      	cmp	r3, #0
 8003824:	d11d      	bne.n	8003862 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382a:	2b01      	cmp	r3, #1
 800382c:	d10b      	bne.n	8003846 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003832:	b2da      	uxtb	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383e:	1c9a      	adds	r2, r3, #2
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003844:	e048      	b.n	80038d8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384a:	b29b      	uxth	r3, r3
 800384c:	121b      	asrs	r3, r3, #8
 800384e:	b2da      	uxtb	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003860:	e03a      	b.n	80038d8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003866:	2b01      	cmp	r3, #1
 8003868:	d10b      	bne.n	8003882 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386e:	b2da      	uxtb	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003880:	e02a      	b.n	80038d8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003886:	2b02      	cmp	r3, #2
 8003888:	d126      	bne.n	80038d8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b22      	cmp	r3, #34	; 0x22
 8003894:	d108      	bne.n	80038a8 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a4:	601a      	str	r2, [r3, #0]
}
 80038a6:	e017      	b.n	80038d8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b21      	cmp	r3, #33	; 0x21
 80038b2:	d111      	bne.n	80038d8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b22      	cmp	r3, #34	; 0x22
 80038f6:	d173      	bne.n	80039e0 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b03      	cmp	r3, #3
 8003904:	d920      	bls.n	8003948 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b03      	cmp	r3, #3
 8003934:	d154      	bne.n	80039e0 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003944:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003946:	e04b      	b.n	80039e0 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	2b02      	cmp	r3, #2
 800394e:	d047      	beq.n	80039e0 <I2C_MasterReceive_RXNE+0xfc>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d002      	beq.n	800395c <I2C_MasterReceive_RXNE+0x78>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d141      	bne.n	80039e0 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800396a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800397a:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d10a      	bne.n	80039cc <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff fdec 	bl	80035a2 <HAL_I2C_MemRxCpltCallback>
}
 80039ca:	e009      	b.n	80039e0 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2212      	movs	r2, #18
 80039d8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff fda1 	bl	8003522 <HAL_I2C_MasterRxCpltCallback>
}
 80039e0:	bf00      	nop
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d11b      	bne.n	8003a38 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a0e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003a36:	e0bd      	b.n	8003bb4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d129      	bne.n	8003a96 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a50:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d00a      	beq.n	8003a6e <I2C_MasterReceive_BTF+0x86>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d007      	beq.n	8003a6e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a6c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a94:	e08e      	b.n	8003bb4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d176      	bne.n	8003b8e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d002      	beq.n	8003aac <I2C_MasterReceive_BTF+0xc4>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d108      	bne.n	8003abe <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	e019      	b.n	8003af2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d002      	beq.n	8003aca <I2C_MasterReceive_BTF+0xe2>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d108      	bne.n	8003adc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	e00a      	b.n	8003af2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b10      	cmp	r3, #16
 8003ae0:	d007      	beq.n	8003af2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b4c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b40      	cmp	r3, #64	; 0x40
 8003b60:	d10a      	bne.n	8003b78 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff fd16 	bl	80035a2 <HAL_I2C_MemRxCpltCallback>
}
 8003b76:	e01d      	b.n	8003bb4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2212      	movs	r2, #18
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff fccb 	bl	8003522 <HAL_I2C_MasterRxCpltCallback>
}
 8003b8c:	e012      	b.n	8003bb4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d117      	bne.n	8003c00 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d109      	bne.n	8003bec <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003be8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003bea:	e067      	b.n	8003cbc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	611a      	str	r2, [r3, #16]
}
 8003bfe:	e05d      	b.n	8003cbc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c08:	d133      	bne.n	8003c72 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b21      	cmp	r3, #33	; 0x21
 8003c14:	d109      	bne.n	8003c2a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c26:	611a      	str	r2, [r3, #16]
 8003c28:	e008      	b.n	8003c3c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d004      	beq.n	8003c4e <I2C_Master_SB+0x92>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d108      	bne.n	8003c60 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d032      	beq.n	8003cbc <I2C_Master_SB+0x100>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d02d      	beq.n	8003cbc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c6e:	605a      	str	r2, [r3, #4]
}
 8003c70:	e024      	b.n	8003cbc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10e      	bne.n	8003c98 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	11db      	asrs	r3, r3, #7
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f003 0306 	and.w	r3, r3, #6
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	f063 030f 	orn	r3, r3, #15
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	611a      	str	r2, [r3, #16]
}
 8003c96:	e011      	b.n	8003cbc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d10d      	bne.n	8003cbc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	11db      	asrs	r3, r3, #7
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	f003 0306 	and.w	r3, r3, #6
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	f063 030e 	orn	r3, r3, #14
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	611a      	str	r2, [r3, #16]
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d103      	bne.n	8003cec <I2C_Master_ADD10+0x24>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d011      	beq.n	8003d10 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d104      	bne.n	8003d00 <I2C_Master_ADD10+0x38>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d007      	beq.n	8003d10 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d0e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b091      	sub	sp, #68	; 0x44
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d38:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b22      	cmp	r3, #34	; 0x22
 8003d44:	f040 8169 	bne.w	800401a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10f      	bne.n	8003d70 <I2C_Master_ADDR+0x54>
 8003d50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d54:	2b40      	cmp	r3, #64	; 0x40
 8003d56:	d10b      	bne.n	8003d70 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d58:	2300      	movs	r3, #0
 8003d5a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	633b      	str	r3, [r7, #48]	; 0x30
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	e160      	b.n	8004032 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d11d      	bne.n	8003db4 <I2C_Master_ADDR+0x98>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d80:	d118      	bne.n	8003db4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d82:	2300      	movs	r3, #0
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003da6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	651a      	str	r2, [r3, #80]	; 0x50
 8003db2:	e13e      	b.n	8004032 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d113      	bne.n	8003de6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	e115      	b.n	8004012 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	f040 808a 	bne.w	8003f06 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003df8:	d137      	bne.n	8003e6a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e08:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e18:	d113      	bne.n	8003e42 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e28:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	e0e7      	b.n	8004012 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e42:	2300      	movs	r3, #0
 8003e44:	623b      	str	r3, [r7, #32]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	623b      	str	r3, [r7, #32]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	623b      	str	r3, [r7, #32]
 8003e56:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	e0d3      	b.n	8004012 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d02e      	beq.n	8003ece <I2C_Master_ADDR+0x1b2>
 8003e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	d02b      	beq.n	8003ece <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e78:	2b12      	cmp	r3, #18
 8003e7a:	d102      	bne.n	8003e82 <I2C_Master_ADDR+0x166>
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d125      	bne.n	8003ece <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d00e      	beq.n	8003ea6 <I2C_Master_ADDR+0x18a>
 8003e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d00b      	beq.n	8003ea6 <I2C_Master_ADDR+0x18a>
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e90:	2b10      	cmp	r3, #16
 8003e92:	d008      	beq.n	8003ea6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	e007      	b.n	8003eb6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003eb4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	e0a1      	b.n	8004012 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003edc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e085      	b.n	8004012 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d14d      	bne.n	8003fac <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d016      	beq.n	8003f44 <I2C_Master_ADDR+0x228>
 8003f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d013      	beq.n	8003f44 <I2C_Master_ADDR+0x228>
 8003f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1e:	2b10      	cmp	r3, #16
 8003f20:	d010      	beq.n	8003f44 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f30:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	e007      	b.n	8003f54 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f52:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f62:	d117      	bne.n	8003f94 <I2C_Master_ADDR+0x278>
 8003f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f6a:	d00b      	beq.n	8003f84 <I2C_Master_ADDR+0x268>
 8003f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d008      	beq.n	8003f84 <I2C_Master_ADDR+0x268>
 8003f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d005      	beq.n	8003f84 <I2C_Master_ADDR+0x268>
 8003f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7a:	2b10      	cmp	r3, #16
 8003f7c:	d002      	beq.n	8003f84 <I2C_Master_ADDR+0x268>
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	d107      	bne.n	8003f94 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f92:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	e032      	b.n	8004012 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fba:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fca:	d117      	bne.n	8003ffc <I2C_Master_ADDR+0x2e0>
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fd2:	d00b      	beq.n	8003fec <I2C_Master_ADDR+0x2d0>
 8003fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d008      	beq.n	8003fec <I2C_Master_ADDR+0x2d0>
 8003fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d005      	beq.n	8003fec <I2C_Master_ADDR+0x2d0>
 8003fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe2:	2b10      	cmp	r3, #16
 8003fe4:	d002      	beq.n	8003fec <I2C_Master_ADDR+0x2d0>
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d107      	bne.n	8003ffc <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ffa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	613b      	str	r3, [r7, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	613b      	str	r3, [r7, #16]
 8004010:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004018:	e00b      	b.n	8004032 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	68fb      	ldr	r3, [r7, #12]
}
 8004030:	e7ff      	b.n	8004032 <I2C_Master_ADDR+0x316>
 8004032:	bf00      	nop
 8004034:	3744      	adds	r7, #68	; 0x44
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d02b      	beq.n	80040b0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	781a      	ldrb	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d114      	bne.n	80040b0 <I2C_SlaveTransmit_TXE+0x72>
 8004086:	7bfb      	ldrb	r3, [r7, #15]
 8004088:	2b29      	cmp	r3, #41	; 0x29
 800408a:	d111      	bne.n	80040b0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800409a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2221      	movs	r2, #33	; 0x21
 80040a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2228      	movs	r2, #40	; 0x28
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff fa43 	bl	8003536 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040b0:	bf00      	nop
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d011      	beq.n	80040ee <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	781a      	ldrb	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004108:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d02c      	beq.n	800416e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d114      	bne.n	800416e <I2C_SlaveReceive_RXNE+0x74>
 8004144:	7bfb      	ldrb	r3, [r7, #15]
 8004146:	2b2a      	cmp	r3, #42	; 0x2a
 8004148:	d111      	bne.n	800416e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004158:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2222      	movs	r2, #34	; 0x22
 800415e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2228      	movs	r2, #40	; 0x28
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff f9ee 	bl	800354a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d012      	beq.n	80041ae <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80041c4:	2300      	movs	r3, #0
 80041c6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041d4:	2b28      	cmp	r3, #40	; 0x28
 80041d6:	d127      	bne.n	8004228 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	089b      	lsrs	r3, r3, #2
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80041f4:	2301      	movs	r3, #1
 80041f6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	09db      	lsrs	r3, r3, #7
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d103      	bne.n	800420c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	81bb      	strh	r3, [r7, #12]
 800420a:	e002      	b.n	8004212 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800421a:	89ba      	ldrh	r2, [r7, #12]
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	4619      	mov	r1, r3
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff f99c 	bl	800355e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004226:	e008      	b.n	800423a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0202 	mvn.w	r2, #2
 8004230:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800423a:	bf00      	nop
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004252:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004262:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004264:	2300      	movs	r3, #0
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	60bb      	str	r3, [r7, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004290:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800429c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a0:	d172      	bne.n	8004388 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
 80042a4:	2b22      	cmp	r3, #34	; 0x22
 80042a6:	d002      	beq.n	80042ae <I2C_Slave_STOPF+0x6a>
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	2b2a      	cmp	r3, #42	; 0x2a
 80042ac:	d135      	bne.n	800431a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f043 0204 	orr.w	r2, r3, #4
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fe fa57 	bl	800279a <HAL_DMA_GetState>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d049      	beq.n	8004386 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f6:	4a69      	ldr	r2, [pc, #420]	; (800449c <I2C_Slave_STOPF+0x258>)
 80042f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fe fa29 	bl	8002756 <HAL_DMA_Abort_IT>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d03d      	beq.n	8004386 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004314:	4610      	mov	r0, r2
 8004316:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004318:	e035      	b.n	8004386 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	b29a      	uxth	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d005      	beq.n	800433e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f043 0204 	orr.w	r2, r3, #4
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800434c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe fa21 	bl	800279a <HAL_DMA_GetState>
 8004358:	4603      	mov	r3, r0
 800435a:	2b01      	cmp	r3, #1
 800435c:	d014      	beq.n	8004388 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004362:	4a4e      	ldr	r2, [pc, #312]	; (800449c <I2C_Slave_STOPF+0x258>)
 8004364:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe f9f3 	bl	8002756 <HAL_DMA_Abort_IT>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d008      	beq.n	8004388 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004380:	4610      	mov	r0, r2
 8004382:	4798      	blx	r3
 8004384:	e000      	b.n	8004388 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004386:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d03e      	beq.n	8004410 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b04      	cmp	r3, #4
 800439e:	d112      	bne.n	80043c6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691a      	ldr	r2, [r3, #16]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d0:	2b40      	cmp	r3, #64	; 0x40
 80043d2:	d112      	bne.n	80043fa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	f043 0204 	orr.w	r2, r3, #4
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f8b3 	bl	8004584 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800441e:	e039      	b.n	8004494 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	2b2a      	cmp	r3, #42	; 0x2a
 8004424:	d109      	bne.n	800443a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2228      	movs	r2, #40	; 0x28
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff f888 	bl	800354a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b28      	cmp	r3, #40	; 0x28
 8004444:	d111      	bne.n	800446a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a15      	ldr	r2, [pc, #84]	; (80044a0 <I2C_Slave_STOPF+0x25c>)
 800444a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff f889 	bl	800357a <HAL_I2C_ListenCpltCallback>
}
 8004468:	e014      	b.n	8004494 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	2b22      	cmp	r3, #34	; 0x22
 8004470:	d002      	beq.n	8004478 <I2C_Slave_STOPF+0x234>
 8004472:	7bfb      	ldrb	r3, [r7, #15]
 8004474:	2b22      	cmp	r3, #34	; 0x22
 8004476:	d10d      	bne.n	8004494 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff f85b 	bl	800354a <HAL_I2C_SlaveRxCpltCallback>
}
 8004494:	bf00      	nop
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	080048e5 	.word	0x080048e5
 80044a0:	ffff0000 	.word	0xffff0000

080044a4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d002      	beq.n	80044c6 <I2C_Slave_AF+0x22>
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d129      	bne.n	800451a <I2C_Slave_AF+0x76>
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
 80044c8:	2b28      	cmp	r3, #40	; 0x28
 80044ca:	d126      	bne.n	800451a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a2c      	ldr	r2, [pc, #176]	; (8004580 <I2C_Slave_AF+0xdc>)
 80044d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044e0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044ea:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044fa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff f831 	bl	800357a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004518:	e02e      	b.n	8004578 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	2b21      	cmp	r3, #33	; 0x21
 800451e:	d126      	bne.n	800456e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a17      	ldr	r2, [pc, #92]	; (8004580 <I2C_Slave_AF+0xdc>)
 8004524:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2221      	movs	r2, #33	; 0x21
 800452a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800454a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004554:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004564:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fe ffe5 	bl	8003536 <HAL_I2C_SlaveTxCpltCallback>
}
 800456c:	e004      	b.n	8004578 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004576:	615a      	str	r2, [r3, #20]
}
 8004578:	bf00      	nop
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	ffff0000 	.word	0xffff0000

08004584 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004592:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b10      	cmp	r3, #16
 800459e:	d10a      	bne.n	80045b6 <I2C_ITError+0x32>
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	2b22      	cmp	r3, #34	; 0x22
 80045a4:	d107      	bne.n	80045b6 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045b4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045bc:	2b28      	cmp	r3, #40	; 0x28
 80045be:	d107      	bne.n	80045d0 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2228      	movs	r2, #40	; 0x28
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045ce:	e015      	b.n	80045fc <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045de:	d006      	beq.n	80045ee <I2C_ITError+0x6a>
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	2b60      	cmp	r3, #96	; 0x60
 80045e4:	d003      	beq.n	80045ee <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800460a:	d162      	bne.n	80046d2 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800461a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b01      	cmp	r3, #1
 8004628:	d020      	beq.n	800466c <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462e:	4a6a      	ldr	r2, [pc, #424]	; (80047d8 <I2C_ITError+0x254>)
 8004630:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004636:	4618      	mov	r0, r3
 8004638:	f7fe f88d 	bl	8002756 <HAL_DMA_Abort_IT>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 8089 	beq.w	8004756 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0201 	bic.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004666:	4610      	mov	r0, r2
 8004668:	4798      	blx	r3
 800466a:	e074      	b.n	8004756 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	4a59      	ldr	r2, [pc, #356]	; (80047d8 <I2C_ITError+0x254>)
 8004672:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	4618      	mov	r0, r3
 800467a:	f7fe f86c 	bl	8002756 <HAL_DMA_Abort_IT>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d068      	beq.n	8004756 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468e:	2b40      	cmp	r3, #64	; 0x40
 8004690:	d10b      	bne.n	80046aa <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0201 	bic.w	r2, r2, #1
 80046b8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046cc:	4610      	mov	r0, r2
 80046ce:	4798      	blx	r3
 80046d0:	e041      	b.n	8004756 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b60      	cmp	r3, #96	; 0x60
 80046dc:	d125      	bne.n	800472a <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f6:	2b40      	cmp	r3, #64	; 0x40
 80046f8:	d10b      	bne.n	8004712 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0201 	bic.w	r2, r2, #1
 8004720:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7fe ff51 	bl	80035ca <HAL_I2C_AbortCpltCallback>
 8004728:	e015      	b.n	8004756 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004734:	2b40      	cmp	r3, #64	; 0x40
 8004736:	d10b      	bne.n	8004750 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7fe ff30 	bl	80035b6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10e      	bne.n	8004784 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800476c:	2b00      	cmp	r3, #0
 800476e:	d109      	bne.n	8004784 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004776:	2b00      	cmp	r3, #0
 8004778:	d104      	bne.n	8004784 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004780:	2b00      	cmp	r3, #0
 8004782:	d007      	beq.n	8004794 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004792:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d113      	bne.n	80047d0 <I2C_ITError+0x24c>
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	2b28      	cmp	r3, #40	; 0x28
 80047ac:	d110      	bne.n	80047d0 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a0a      	ldr	r2, [pc, #40]	; (80047dc <I2C_ITError+0x258>)
 80047b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fe fed5 	bl	800357a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047d0:	bf00      	nop
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	080048e5 	.word	0x080048e5
 80047dc:	ffff0000 	.word	0xffff0000

080047e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af02      	add	r7, sp, #8
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	607a      	str	r2, [r7, #4]
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	460b      	mov	r3, r1
 80047ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d006      	beq.n	800480a <I2C_MasterRequestWrite+0x2a>
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d003      	beq.n	800480a <I2C_MasterRequestWrite+0x2a>
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004808:	d108      	bne.n	800481c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	e00b      	b.n	8004834 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004820:	2b12      	cmp	r3, #18
 8004822:	d107      	bne.n	8004834 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004832:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 f8ce 	bl	80049e2 <I2C_WaitOnFlagUntilTimeout>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00c      	beq.n	8004866 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004860:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e035      	b.n	80048d2 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800486e:	d108      	bne.n	8004882 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004870:	897b      	ldrh	r3, [r7, #10]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	461a      	mov	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800487e:	611a      	str	r2, [r3, #16]
 8004880:	e01b      	b.n	80048ba <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004882:	897b      	ldrh	r3, [r7, #10]
 8004884:	11db      	asrs	r3, r3, #7
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f003 0306 	and.w	r3, r3, #6
 800488c:	b2db      	uxtb	r3, r3
 800488e:	f063 030f 	orn	r3, r3, #15
 8004892:	b2da      	uxtb	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	490f      	ldr	r1, [pc, #60]	; (80048dc <I2C_MasterRequestWrite+0xfc>)
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 f8f5 	bl	8004a90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e010      	b.n	80048d2 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048b0:	897b      	ldrh	r3, [r7, #10]
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	4908      	ldr	r1, [pc, #32]	; (80048e0 <I2C_MasterRequestWrite+0x100>)
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f8e5 	bl	8004a90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e000      	b.n	80048d2 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	00010008 	.word	0x00010008
 80048e0:	00010002 	.word	0x00010002

080048e4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f8:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004906:	2200      	movs	r2, #0
 8004908:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004916:	2200      	movs	r2, #0
 8004918:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004928:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493c:	2200      	movs	r2, #0
 800493e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	2200      	movs	r2, #0
 800494e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0201 	bic.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b60      	cmp	r3, #96	; 0x60
 800496a:	d10e      	bne.n	800498a <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f7fe fe21 	bl	80035ca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004988:	e027      	b.n	80049da <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800498a:	7afb      	ldrb	r3, [r7, #11]
 800498c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004990:	2b28      	cmp	r3, #40	; 0x28
 8004992:	d117      	bne.n	80049c4 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049b2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2228      	movs	r2, #40	; 0x28
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049c2:	e007      	b.n	80049d4 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f7fe fdee 	bl	80035b6 <HAL_I2C_ErrorCallback>
}
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b084      	sub	sp, #16
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	603b      	str	r3, [r7, #0]
 80049ee:	4613      	mov	r3, r2
 80049f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049f2:	e025      	b.n	8004a40 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049fa:	d021      	beq.n	8004a40 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049fc:	f7fd fc72 	bl	80022e4 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d302      	bcc.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d116      	bne.n	8004a40 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	f043 0220 	orr.w	r2, r3, #32
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e023      	b.n	8004a88 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	0c1b      	lsrs	r3, r3, #16
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d10d      	bne.n	8004a66 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	43da      	mvns	r2, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4013      	ands	r3, r2
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	bf0c      	ite	eq
 8004a5c:	2301      	moveq	r3, #1
 8004a5e:	2300      	movne	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	e00c      	b.n	8004a80 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	43da      	mvns	r2, r3
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	4013      	ands	r3, r2
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	bf0c      	ite	eq
 8004a78:	2301      	moveq	r3, #1
 8004a7a:	2300      	movne	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	461a      	mov	r2, r3
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d0b6      	beq.n	80049f4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a9e:	e051      	b.n	8004b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aae:	d123      	bne.n	8004af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004abe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ac8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	f043 0204 	orr.w	r2, r3, #4
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e046      	b.n	8004b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004afe:	d021      	beq.n	8004b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b00:	f7fd fbf0 	bl	80022e4 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d302      	bcc.n	8004b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d116      	bne.n	8004b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	f043 0220 	orr.w	r2, r3, #32
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e020      	b.n	8004b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	0c1b      	lsrs	r3, r3, #16
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d10c      	bne.n	8004b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	43da      	mvns	r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bf14      	ite	ne
 8004b60:	2301      	movne	r3, #1
 8004b62:	2300      	moveq	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	e00b      	b.n	8004b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	43da      	mvns	r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4013      	ands	r3, r2
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	bf14      	ite	ne
 8004b7a:	2301      	movne	r3, #1
 8004b7c:	2300      	moveq	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d18d      	bne.n	8004aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b084      	sub	sp, #16
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	60f8      	str	r0, [r7, #12]
 8004b96:	60b9      	str	r1, [r7, #8]
 8004b98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b9a:	e02d      	b.n	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 f878 	bl	8004c92 <I2C_IsAcknowledgeFailed>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e02d      	b.n	8004c08 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bb2:	d021      	beq.n	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb4:	f7fd fb96 	bl	80022e4 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d302      	bcc.n	8004bca <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d116      	bne.n	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be4:	f043 0220 	orr.w	r2, r3, #32
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e007      	b.n	8004c08 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c02:	2b80      	cmp	r3, #128	; 0x80
 8004c04:	d1ca      	bne.n	8004b9c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c1c:	e02d      	b.n	8004c7a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 f837 	bl	8004c92 <I2C_IsAcknowledgeFailed>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e02d      	b.n	8004c8a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c34:	d021      	beq.n	8004c7a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c36:	f7fd fb55 	bl	80022e4 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d302      	bcc.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d116      	bne.n	8004c7a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	f043 0220 	orr.w	r2, r3, #32
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e007      	b.n	8004c8a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d1ca      	bne.n	8004c1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca8:	d11b      	bne.n	8004ce2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cb2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f043 0204 	orr.w	r2, r3, #4
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004d00:	d103      	bne.n	8004d0a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d08:	e007      	b.n	8004d1a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004d12:	d102      	bne.n	8004d1a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2208      	movs	r2, #8
 8004d18:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d28:	b08f      	sub	sp, #60	; 0x3c
 8004d2a:	af0a      	add	r7, sp, #40	; 0x28
 8004d2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e10f      	b.n	8004f58 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f005 f89e 	bl	8009e94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2203      	movs	r2, #3
 8004d5c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d102      	bne.n	8004d72 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f002 faa3 	bl	80072c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	603b      	str	r3, [r7, #0]
 8004d82:	687e      	ldr	r6, [r7, #4]
 8004d84:	466d      	mov	r5, sp
 8004d86:	f106 0410 	add.w	r4, r6, #16
 8004d8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d96:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d9a:	1d33      	adds	r3, r6, #4
 8004d9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d9e:	6838      	ldr	r0, [r7, #0]
 8004da0:	f002 f97a 	bl	8007098 <USB_CoreInit>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d005      	beq.n	8004db6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2202      	movs	r2, #2
 8004dae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e0d0      	b.n	8004f58 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2100      	movs	r1, #0
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f002 fa91 	bl	80072e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
 8004dc6:	e04a      	b.n	8004e5e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004dc8:	7bfa      	ldrb	r2, [r7, #15]
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	333d      	adds	r3, #61	; 0x3d
 8004dd8:	2201      	movs	r2, #1
 8004dda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ddc:	7bfa      	ldrb	r2, [r7, #15]
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	4613      	mov	r3, r2
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	1a9b      	subs	r3, r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	333c      	adds	r3, #60	; 0x3c
 8004dec:	7bfa      	ldrb	r2, [r7, #15]
 8004dee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004df0:	7bfa      	ldrb	r2, [r7, #15]
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
 8004df4:	b298      	uxth	r0, r3
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	1a9b      	subs	r3, r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	3342      	adds	r3, #66	; 0x42
 8004e04:	4602      	mov	r2, r0
 8004e06:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e08:	7bfa      	ldrb	r2, [r7, #15]
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	1a9b      	subs	r3, r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	333f      	adds	r3, #63	; 0x3f
 8004e18:	2200      	movs	r2, #0
 8004e1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e1c:	7bfa      	ldrb	r2, [r7, #15]
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	4613      	mov	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	1a9b      	subs	r3, r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	3344      	adds	r3, #68	; 0x44
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e30:	7bfa      	ldrb	r2, [r7, #15]
 8004e32:	6879      	ldr	r1, [r7, #4]
 8004e34:	4613      	mov	r3, r2
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	1a9b      	subs	r3, r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	3348      	adds	r3, #72	; 0x48
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e44:	7bfa      	ldrb	r2, [r7, #15]
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	1a9b      	subs	r3, r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	3350      	adds	r3, #80	; 0x50
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	73fb      	strb	r3, [r7, #15]
 8004e5e:	7bfa      	ldrb	r2, [r7, #15]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d3af      	bcc.n	8004dc8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e68:	2300      	movs	r3, #0
 8004e6a:	73fb      	strb	r3, [r7, #15]
 8004e6c:	e044      	b.n	8004ef8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e6e:	7bfa      	ldrb	r2, [r7, #15]
 8004e70:	6879      	ldr	r1, [r7, #4]
 8004e72:	4613      	mov	r3, r2
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	1a9b      	subs	r3, r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004e80:	2200      	movs	r2, #0
 8004e82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e84:	7bfa      	ldrb	r2, [r7, #15]
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	1a9b      	subs	r3, r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004e96:	7bfa      	ldrb	r2, [r7, #15]
 8004e98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e9a:	7bfa      	ldrb	r2, [r7, #15]
 8004e9c:	6879      	ldr	r1, [r7, #4]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	1a9b      	subs	r3, r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	440b      	add	r3, r1
 8004ea8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004eac:	2200      	movs	r2, #0
 8004eae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004eb0:	7bfa      	ldrb	r2, [r7, #15]
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	1a9b      	subs	r3, r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ec6:	7bfa      	ldrb	r2, [r7, #15]
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	1a9b      	subs	r3, r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004edc:	7bfa      	ldrb	r2, [r7, #15]
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	1a9b      	subs	r3, r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]
 8004ef8:	7bfa      	ldrb	r2, [r7, #15]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d3b5      	bcc.n	8004e6e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	687e      	ldr	r6, [r7, #4]
 8004f0a:	466d      	mov	r5, sp
 8004f0c:	f106 0410 	add.w	r4, r6, #16
 8004f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f20:	1d33      	adds	r3, r6, #4
 8004f22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f24:	6838      	ldr	r0, [r7, #0]
 8004f26:	f002 fa07 	bl	8007338 <USB_DevInit>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e00d      	b.n	8004f58 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f003 fa46 	bl	80083e2 <USB_DevDisconnect>

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f60 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_PCD_Start+0x1c>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e020      	b.n	8004fbe <HAL_PCD_Start+0x5e>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d109      	bne.n	8004fa0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d005      	beq.n	8004fa0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f003 fa04 	bl	80083b2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f002 f976 	bl	80072a0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004fc6:	b590      	push	{r4, r7, lr}
 8004fc8:	b08d      	sub	sp, #52	; 0x34
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f003 faab 	bl	8008538 <USB_GetMode>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f040 839d 	bne.w	8005724 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f003 fa0f 	bl	8008412 <USB_ReadInterrupts>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 8393 	beq.w	8005722 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4618      	mov	r0, r3
 8005002:	f003 fa06 	bl	8008412 <USB_ReadInterrupts>
 8005006:	4603      	mov	r3, r0
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b02      	cmp	r3, #2
 800500e:	d107      	bne.n	8005020 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695a      	ldr	r2, [r3, #20]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f002 0202 	and.w	r2, r2, #2
 800501e:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4618      	mov	r0, r3
 8005026:	f003 f9f4 	bl	8008412 <USB_ReadInterrupts>
 800502a:	4603      	mov	r3, r0
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2b10      	cmp	r3, #16
 8005032:	d161      	bne.n	80050f8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699a      	ldr	r2, [r3, #24]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0210 	bic.w	r2, r2, #16
 8005042:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	f003 020f 	and.w	r2, r3, #15
 8005050:	4613      	mov	r3, r2
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	1a9b      	subs	r3, r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	4413      	add	r3, r2
 8005060:	3304      	adds	r3, #4
 8005062:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	0c5b      	lsrs	r3, r3, #17
 8005068:	f003 030f 	and.w	r3, r3, #15
 800506c:	2b02      	cmp	r3, #2
 800506e:	d124      	bne.n	80050ba <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005076:	4013      	ands	r3, r2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d035      	beq.n	80050e8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	091b      	lsrs	r3, r3, #4
 8005084:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005086:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800508a:	b29b      	uxth	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	6a38      	ldr	r0, [r7, #32]
 8005090:	f003 f86c 	bl	800816c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	091b      	lsrs	r3, r3, #4
 800509c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050a0:	441a      	add	r2, r3
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	699a      	ldr	r2, [r3, #24]
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	091b      	lsrs	r3, r3, #4
 80050ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050b2:	441a      	add	r2, r3
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	619a      	str	r2, [r3, #24]
 80050b8:	e016      	b.n	80050e8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	0c5b      	lsrs	r3, r3, #17
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	2b06      	cmp	r3, #6
 80050c4:	d110      	bne.n	80050e8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80050cc:	2208      	movs	r2, #8
 80050ce:	4619      	mov	r1, r3
 80050d0:	6a38      	ldr	r0, [r7, #32]
 80050d2:	f003 f84b 	bl	800816c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	699a      	ldr	r2, [r3, #24]
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	091b      	lsrs	r3, r3, #4
 80050de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050e2:	441a      	add	r2, r3
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0210 	orr.w	r2, r2, #16
 80050f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f003 f988 	bl	8008412 <USB_ReadInterrupts>
 8005102:	4603      	mov	r3, r0
 8005104:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005108:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800510c:	d16e      	bne.n	80051ec <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f003 f98e 	bl	8008438 <USB_ReadDevAllOutEpInterrupt>
 800511c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800511e:	e062      	b.n	80051e6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d057      	beq.n	80051da <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	4611      	mov	r1, r2
 8005134:	4618      	mov	r0, r3
 8005136:	f003 f9b3 	bl	80084a0 <USB_ReadDevOutEPInterrupt>
 800513a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00c      	beq.n	8005160 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005152:	461a      	mov	r2, r3
 8005154:	2301      	movs	r3, #1
 8005156:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005158:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fd98 	bl	8005c90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00c      	beq.n	8005184 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005176:	461a      	mov	r2, r3
 8005178:	2308      	movs	r3, #8
 800517a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800517c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fe92 	bl	8005ea8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f003 0310 	and.w	r3, r3, #16
 800518a:	2b00      	cmp	r3, #0
 800518c:	d008      	beq.n	80051a0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519a:	461a      	mov	r2, r3
 800519c:	2310      	movs	r3, #16
 800519e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d008      	beq.n	80051bc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b6:	461a      	mov	r2, r3
 80051b8:	2320      	movs	r3, #32
 80051ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d009      	beq.n	80051da <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d2:	461a      	mov	r2, r3
 80051d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	3301      	adds	r3, #1
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	085b      	lsrs	r3, r3, #1
 80051e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d199      	bne.n	8005120 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f003 f90e 	bl	8008412 <USB_ReadInterrupts>
 80051f6:	4603      	mov	r3, r0
 80051f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005200:	f040 80c0 	bne.w	8005384 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f003 f92f 	bl	800846c <USB_ReadDevAllInEpInterrupt>
 800520e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005214:	e0b2      	b.n	800537c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80a7 	beq.w	8005370 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	4611      	mov	r1, r2
 800522c:	4618      	mov	r0, r3
 800522e:	f003 f955 	bl	80084dc <USB_ReadDevInEPInterrupt>
 8005232:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d057      	beq.n	80052ee <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	f003 030f 	and.w	r3, r3, #15
 8005244:	2201      	movs	r2, #1
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	43db      	mvns	r3, r3
 8005258:	69f9      	ldr	r1, [r7, #28]
 800525a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800525e:	4013      	ands	r3, r2
 8005260:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526e:	461a      	mov	r2, r3
 8005270:	2301      	movs	r3, #1
 8005272:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d132      	bne.n	80052e2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005280:	4613      	mov	r3, r2
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	3348      	adds	r3, #72	; 0x48
 800528c:	6819      	ldr	r1, [r3, #0]
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005292:	4613      	mov	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	1a9b      	subs	r3, r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4403      	add	r3, r0
 800529c:	3344      	adds	r3, #68	; 0x44
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4419      	add	r1, r3
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a6:	4613      	mov	r3, r2
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	1a9b      	subs	r3, r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4403      	add	r3, r0
 80052b0:	3348      	adds	r3, #72	; 0x48
 80052b2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d113      	bne.n	80052e2 <HAL_PCD_IRQHandler+0x31c>
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052be:	4613      	mov	r3, r2
 80052c0:	00db      	lsls	r3, r3, #3
 80052c2:	1a9b      	subs	r3, r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	440b      	add	r3, r1
 80052c8:	3350      	adds	r3, #80	; 0x50
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d108      	bne.n	80052e2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6818      	ldr	r0, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80052da:	461a      	mov	r2, r3
 80052dc:	2101      	movs	r1, #1
 80052de:	f003 f95d 	bl	800859c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	4619      	mov	r1, r3
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f004 fe54 	bl	8009f96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f003 0308 	and.w	r3, r3, #8
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d008      	beq.n	800530a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005304:	461a      	mov	r2, r3
 8005306:	2308      	movs	r3, #8
 8005308:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b00      	cmp	r3, #0
 8005312:	d008      	beq.n	8005326 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005320:	461a      	mov	r2, r3
 8005322:	2310      	movs	r3, #16
 8005324:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532c:	2b00      	cmp	r3, #0
 800532e:	d008      	beq.n	8005342 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533c:	461a      	mov	r2, r3
 800533e:	2340      	movs	r3, #64	; 0x40
 8005340:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d008      	beq.n	800535e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005358:	461a      	mov	r2, r3
 800535a:	2302      	movs	r3, #2
 800535c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fc03 	bl	8005b76 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	3301      	adds	r3, #1
 8005374:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005378:	085b      	lsrs	r3, r3, #1
 800537a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537e:	2b00      	cmp	r3, #0
 8005380:	f47f af49 	bne.w	8005216 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4618      	mov	r0, r3
 800538a:	f003 f842 	bl	8008412 <USB_ReadInterrupts>
 800538e:	4603      	mov	r3, r0
 8005390:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005394:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005398:	d122      	bne.n	80053e0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053a8:	f023 0301 	bic.w	r3, r3, #1
 80053ac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d108      	bne.n	80053ca <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80053c0:	2100      	movs	r1, #0
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fe0e 	bl	8005fe4 <HAL_PCDEx_LPM_Callback>
 80053c8:	e002      	b.n	80053d0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f004 fe5a 	bl	800a084 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695a      	ldr	r2, [r3, #20]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80053de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f003 f814 	bl	8008412 <USB_ReadInterrupts>
 80053ea:	4603      	mov	r3, r0
 80053ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f4:	d112      	bne.n	800541c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b01      	cmp	r3, #1
 8005404:	d102      	bne.n	800540c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f004 fe16 	bl	800a038 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695a      	ldr	r2, [r3, #20]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800541a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f002 fff6 	bl	8008412 <USB_ReadInterrupts>
 8005426:	4603      	mov	r3, r0
 8005428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800542c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005430:	f040 80c7 	bne.w	80055c2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	69fa      	ldr	r2, [r7, #28]
 800543e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005442:	f023 0301 	bic.w	r3, r3, #1
 8005446:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2110      	movs	r1, #16
 800544e:	4618      	mov	r0, r3
 8005450:	f002 f8d6 	bl	8007600 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005454:	2300      	movs	r3, #0
 8005456:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005458:	e056      	b.n	8005508 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800545a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005466:	461a      	mov	r2, r3
 8005468:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800546c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	4413      	add	r3, r2
 8005476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800547e:	0151      	lsls	r1, r2, #5
 8005480:	69fa      	ldr	r2, [r7, #28]
 8005482:	440a      	add	r2, r1
 8005484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005488:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800548c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800548e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800549e:	0151      	lsls	r1, r2, #5
 80054a0:	69fa      	ldr	r2, [r7, #28]
 80054a2:	440a      	add	r2, r1
 80054a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80054ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ba:	461a      	mov	r2, r3
 80054bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054d2:	0151      	lsls	r1, r2, #5
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	440a      	add	r2, r1
 80054d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054f2:	0151      	lsls	r1, r2, #5
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	440a      	add	r2, r1
 80054f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005500:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005504:	3301      	adds	r3, #1
 8005506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800550e:	429a      	cmp	r2, r3
 8005510:	d3a3      	bcc.n	800545a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	69fa      	ldr	r2, [r7, #28]
 800551c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005520:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005524:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552a:	2b00      	cmp	r3, #0
 800552c:	d016      	beq.n	800555c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005538:	69fa      	ldr	r2, [r7, #28]
 800553a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800553e:	f043 030b 	orr.w	r3, r3, #11
 8005542:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005554:	f043 030b 	orr.w	r3, r3, #11
 8005558:	6453      	str	r3, [r2, #68]	; 0x44
 800555a:	e015      	b.n	8005588 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800556a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800556e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005572:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	69fa      	ldr	r2, [r7, #28]
 800557e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005582:	f043 030b 	orr.w	r3, r3, #11
 8005586:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005596:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800559a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80055ac:	461a      	mov	r2, r3
 80055ae:	f002 fff5 	bl	800859c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695a      	ldr	r2, [r3, #20]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80055c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f002 ff23 	bl	8008412 <USB_ReadInterrupts>
 80055cc:	4603      	mov	r3, r0
 80055ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d6:	d124      	bne.n	8005622 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4618      	mov	r0, r3
 80055de:	f002 ffb9 	bl	8008554 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f002 f86b 	bl	80076c2 <USB_GetDevSpeed>
 80055ec:	4603      	mov	r3, r0
 80055ee:	461a      	mov	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681c      	ldr	r4, [r3, #0]
 80055f8:	f001 f92e 	bl	8006858 <HAL_RCC_GetHCLKFreq>
 80055fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005602:	b2db      	uxtb	r3, r3
 8005604:	461a      	mov	r2, r3
 8005606:	4620      	mov	r0, r4
 8005608:	f001 fda8 	bl	800715c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f004 fcea 	bl	8009fe6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695a      	ldr	r2, [r3, #20]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005620:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4618      	mov	r0, r3
 8005628:	f002 fef3 	bl	8008412 <USB_ReadInterrupts>
 800562c:	4603      	mov	r3, r0
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	2b08      	cmp	r3, #8
 8005634:	d10a      	bne.n	800564c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f004 fcc7 	bl	8009fca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	695a      	ldr	r2, [r3, #20]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f002 0208 	and.w	r2, r2, #8
 800564a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4618      	mov	r0, r3
 8005652:	f002 fede 	bl	8008412 <USB_ReadInterrupts>
 8005656:	4603      	mov	r3, r0
 8005658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800565c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005660:	d10f      	bne.n	8005682 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	b2db      	uxtb	r3, r3
 800566a:	4619      	mov	r1, r3
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f004 fd29 	bl	800a0c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695a      	ldr	r2, [r3, #20]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005680:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f002 fec3 	bl	8008412 <USB_ReadInterrupts>
 800568c:	4603      	mov	r3, r0
 800568e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005692:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005696:	d10f      	bne.n	80056b8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	4619      	mov	r1, r3
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f004 fcfc 	bl	800a0a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695a      	ldr	r2, [r3, #20]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80056b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4618      	mov	r0, r3
 80056be:	f002 fea8 	bl	8008412 <USB_ReadInterrupts>
 80056c2:	4603      	mov	r3, r0
 80056c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056cc:	d10a      	bne.n	80056e4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f004 fd0a 	bl	800a0e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695a      	ldr	r2, [r3, #20]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80056e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f002 fe92 	bl	8008412 <USB_ReadInterrupts>
 80056ee:	4603      	mov	r3, r0
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b04      	cmp	r3, #4
 80056f6:	d115      	bne.n	8005724 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f004 fcfa 	bl	800a104 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6859      	ldr	r1, [r3, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	430a      	orrs	r2, r1
 800571e:	605a      	str	r2, [r3, #4]
 8005720:	e000      	b.n	8005724 <HAL_PCD_IRQHandler+0x75e>
      return;
 8005722:	bf00      	nop
    }
  }
}
 8005724:	3734      	adds	r7, #52	; 0x34
 8005726:	46bd      	mov	sp, r7
 8005728:	bd90      	pop	{r4, r7, pc}

0800572a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b082      	sub	sp, #8
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	460b      	mov	r3, r1
 8005734:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_PCD_SetAddress+0x1a>
 8005740:	2302      	movs	r3, #2
 8005742:	e013      	b.n	800576c <HAL_PCD_SetAddress+0x42>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	78fa      	ldrb	r2, [r7, #3]
 8005750:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	78fa      	ldrb	r2, [r7, #3]
 800575a:	4611      	mov	r1, r2
 800575c:	4618      	mov	r0, r3
 800575e:	f002 fe02 	bl	8008366 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	4608      	mov	r0, r1
 800577e:	4611      	mov	r1, r2
 8005780:	461a      	mov	r2, r3
 8005782:	4603      	mov	r3, r0
 8005784:	70fb      	strb	r3, [r7, #3]
 8005786:	460b      	mov	r3, r1
 8005788:	803b      	strh	r3, [r7, #0]
 800578a:	4613      	mov	r3, r2
 800578c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005792:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005796:	2b00      	cmp	r3, #0
 8005798:	da0f      	bge.n	80057ba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	f003 020f 	and.w	r2, r3, #15
 80057a0:	4613      	mov	r3, r2
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	1a9b      	subs	r3, r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	3338      	adds	r3, #56	; 0x38
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	4413      	add	r3, r2
 80057ae:	3304      	adds	r3, #4
 80057b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	705a      	strb	r2, [r3, #1]
 80057b8:	e00f      	b.n	80057da <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057ba:	78fb      	ldrb	r3, [r7, #3]
 80057bc:	f003 020f 	and.w	r2, r3, #15
 80057c0:	4613      	mov	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	1a9b      	subs	r3, r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	4413      	add	r3, r2
 80057d0:	3304      	adds	r3, #4
 80057d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80057da:	78fb      	ldrb	r3, [r7, #3]
 80057dc:	f003 030f 	and.w	r3, r3, #15
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80057e6:	883a      	ldrh	r2, [r7, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	78ba      	ldrb	r2, [r7, #2]
 80057f0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	785b      	ldrb	r3, [r3, #1]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d004      	beq.n	8005804 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	b29a      	uxth	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005804:	78bb      	ldrb	r3, [r7, #2]
 8005806:	2b02      	cmp	r3, #2
 8005808:	d102      	bne.n	8005810 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_PCD_EP_Open+0xaa>
 800581a:	2302      	movs	r3, #2
 800581c:	e00e      	b.n	800583c <HAL_PCD_EP_Open+0xc8>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68f9      	ldr	r1, [r7, #12]
 800582c:	4618      	mov	r0, r3
 800582e:	f001 ff6d 	bl	800770c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800583a:	7afb      	ldrb	r3, [r7, #11]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	460b      	mov	r3, r1
 800584e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005854:	2b00      	cmp	r3, #0
 8005856:	da0f      	bge.n	8005878 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	f003 020f 	and.w	r2, r3, #15
 800585e:	4613      	mov	r3, r2
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	1a9b      	subs	r3, r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	3338      	adds	r3, #56	; 0x38
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	4413      	add	r3, r2
 800586c:	3304      	adds	r3, #4
 800586e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	705a      	strb	r2, [r3, #1]
 8005876:	e00f      	b.n	8005898 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005878:	78fb      	ldrb	r3, [r7, #3]
 800587a:	f003 020f 	and.w	r2, r3, #15
 800587e:	4613      	mov	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	1a9b      	subs	r3, r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	4413      	add	r3, r2
 800588e:	3304      	adds	r3, #4
 8005890:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005898:	78fb      	ldrb	r3, [r7, #3]
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d101      	bne.n	80058b2 <HAL_PCD_EP_Close+0x6e>
 80058ae:	2302      	movs	r3, #2
 80058b0:	e00e      	b.n	80058d0 <HAL_PCD_EP_Close+0x8c>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68f9      	ldr	r1, [r7, #12]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f001 ffab 	bl	800781c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	607a      	str	r2, [r7, #4]
 80058e2:	603b      	str	r3, [r7, #0]
 80058e4:	460b      	mov	r3, r1
 80058e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058e8:	7afb      	ldrb	r3, [r7, #11]
 80058ea:	f003 020f 	and.w	r2, r3, #15
 80058ee:	4613      	mov	r3, r2
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	1a9b      	subs	r3, r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	4413      	add	r3, r2
 80058fe:	3304      	adds	r3, #4
 8005900:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2200      	movs	r2, #0
 8005912:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2200      	movs	r2, #0
 8005918:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800591a:	7afb      	ldrb	r3, [r7, #11]
 800591c:	f003 030f 	and.w	r3, r3, #15
 8005920:	b2da      	uxtb	r2, r3
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d102      	bne.n	8005934 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005934:	7afb      	ldrb	r3, [r7, #11]
 8005936:	f003 030f 	and.w	r3, r3, #15
 800593a:	2b00      	cmp	r3, #0
 800593c:	d109      	bne.n	8005952 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	b2db      	uxtb	r3, r3
 8005948:	461a      	mov	r2, r3
 800594a:	6979      	ldr	r1, [r7, #20]
 800594c:	f002 fa86 	bl	8007e5c <USB_EP0StartXfer>
 8005950:	e008      	b.n	8005964 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6818      	ldr	r0, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	b2db      	uxtb	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	6979      	ldr	r1, [r7, #20]
 8005960:	f002 f838 	bl	80079d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b086      	sub	sp, #24
 8005972:	af00      	add	r7, sp, #0
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]
 800597a:	460b      	mov	r3, r1
 800597c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800597e:	7afb      	ldrb	r3, [r7, #11]
 8005980:	f003 020f 	and.w	r2, r3, #15
 8005984:	4613      	mov	r3, r2
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	1a9b      	subs	r3, r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	3338      	adds	r3, #56	; 0x38
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4413      	add	r3, r2
 8005992:	3304      	adds	r3, #4
 8005994:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2200      	movs	r2, #0
 80059a6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2201      	movs	r2, #1
 80059ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059ae:	7afb      	ldrb	r3, [r7, #11]
 80059b0:	f003 030f 	and.w	r3, r3, #15
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d102      	bne.n	80059c8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059c8:	7afb      	ldrb	r3, [r7, #11]
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d109      	bne.n	80059e6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6818      	ldr	r0, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	461a      	mov	r2, r3
 80059de:	6979      	ldr	r1, [r7, #20]
 80059e0:	f002 fa3c 	bl	8007e5c <USB_EP0StartXfer>
 80059e4:	e008      	b.n	80059f8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6818      	ldr	r0, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	461a      	mov	r2, r3
 80059f2:	6979      	ldr	r1, [r7, #20]
 80059f4:	f001 ffee 	bl	80079d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a0e:	78fb      	ldrb	r3, [r7, #3]
 8005a10:	f003 020f 	and.w	r2, r3, #15
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d901      	bls.n	8005a20 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e050      	b.n	8005ac2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	da0f      	bge.n	8005a48 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a28:	78fb      	ldrb	r3, [r7, #3]
 8005a2a:	f003 020f 	and.w	r2, r3, #15
 8005a2e:	4613      	mov	r3, r2
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	1a9b      	subs	r3, r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	3338      	adds	r3, #56	; 0x38
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2201      	movs	r2, #1
 8005a44:	705a      	strb	r2, [r3, #1]
 8005a46:	e00d      	b.n	8005a64 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a48:	78fa      	ldrb	r2, [r7, #3]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	1a9b      	subs	r3, r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	4413      	add	r3, r2
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	f003 030f 	and.w	r3, r3, #15
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d101      	bne.n	8005a84 <HAL_PCD_EP_SetStall+0x82>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e01e      	b.n	8005ac2 <HAL_PCD_EP_SetStall+0xc0>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68f9      	ldr	r1, [r7, #12]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f002 fb93 	bl	80081be <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a98:	78fb      	ldrb	r3, [r7, #3]
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10a      	bne.n	8005ab8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6818      	ldr	r0, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	b2d9      	uxtb	r1, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f002 fd72 	bl	800859c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005ad6:	78fb      	ldrb	r3, [r7, #3]
 8005ad8:	f003 020f 	and.w	r2, r3, #15
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d901      	bls.n	8005ae8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e042      	b.n	8005b6e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	da0f      	bge.n	8005b10 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005af0:	78fb      	ldrb	r3, [r7, #3]
 8005af2:	f003 020f 	and.w	r2, r3, #15
 8005af6:	4613      	mov	r3, r2
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	1a9b      	subs	r3, r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	3338      	adds	r3, #56	; 0x38
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	4413      	add	r3, r2
 8005b04:	3304      	adds	r3, #4
 8005b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	705a      	strb	r2, [r3, #1]
 8005b0e:	e00f      	b.n	8005b30 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b10:	78fb      	ldrb	r3, [r7, #3]
 8005b12:	f003 020f 	and.w	r2, r3, #15
 8005b16:	4613      	mov	r3, r2
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	1a9b      	subs	r3, r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	4413      	add	r3, r2
 8005b26:	3304      	adds	r3, #4
 8005b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b36:	78fb      	ldrb	r3, [r7, #3]
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d101      	bne.n	8005b50 <HAL_PCD_EP_ClrStall+0x86>
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	e00e      	b.n	8005b6e <HAL_PCD_EP_ClrStall+0xa4>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68f9      	ldr	r1, [r7, #12]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f002 fb9b 	bl	800829a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b08a      	sub	sp, #40	; 0x28
 8005b7a:	af02      	add	r7, sp, #8
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	1a9b      	subs	r3, r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	3338      	adds	r3, #56	; 0x38
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	4413      	add	r3, r2
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	699a      	ldr	r2, [r3, #24]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d901      	bls.n	8005bae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e06c      	b.n	8005c88 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	695a      	ldr	r2, [r3, #20]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d902      	bls.n	8005bca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	3303      	adds	r3, #3
 8005bce:	089b      	lsrs	r3, r3, #2
 8005bd0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005bd2:	e02b      	b.n	8005c2c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	695a      	ldr	r2, [r3, #20]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	69fa      	ldr	r2, [r7, #28]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d902      	bls.n	8005bf0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	3303      	adds	r3, #3
 8005bf4:	089b      	lsrs	r3, r3, #2
 8005bf6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	68d9      	ldr	r1, [r3, #12]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	6978      	ldr	r0, [r7, #20]
 8005c10:	f002 fa77 	bl	8008102 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	441a      	add	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	699a      	ldr	r2, [r3, #24]
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	441a      	add	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d809      	bhi.n	8005c56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d203      	bcs.n	8005c56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1be      	bne.n	8005bd4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	695a      	ldr	r2, [r3, #20]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d811      	bhi.n	8005c86 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	2201      	movs	r2, #1
 8005c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	43db      	mvns	r3, r3
 8005c7c:	6939      	ldr	r1, [r7, #16]
 8005c7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c82:	4013      	ands	r3, r2
 8005c84:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3720      	adds	r7, #32
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	333c      	adds	r3, #60	; 0x3c
 8005ca8:	3304      	adds	r3, #4
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	f040 80a0 	bne.w	8005e08 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	f003 0308 	and.w	r3, r3, #8
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d015      	beq.n	8005cfe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4a72      	ldr	r2, [pc, #456]	; (8005ea0 <PCD_EP_OutXfrComplete_int+0x210>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	f240 80dd 	bls.w	8005e96 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 80d7 	beq.w	8005e96 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cfa:	6093      	str	r3, [r2, #8]
 8005cfc:	e0cb      	b.n	8005e96 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	f003 0320 	and.w	r3, r3, #32
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d009      	beq.n	8005d1c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d14:	461a      	mov	r2, r3
 8005d16:	2320      	movs	r3, #32
 8005d18:	6093      	str	r3, [r2, #8]
 8005d1a:	e0bc      	b.n	8005e96 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f040 80b7 	bne.w	8005e96 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4a5d      	ldr	r2, [pc, #372]	; (8005ea0 <PCD_EP_OutXfrComplete_int+0x210>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d90f      	bls.n	8005d50 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d46:	461a      	mov	r2, r3
 8005d48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d4c:	6093      	str	r3, [r2, #8]
 8005d4e:	e0a2      	b.n	8005e96 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005d50:	6879      	ldr	r1, [r7, #4]
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	4613      	mov	r3, r2
 8005d56:	00db      	lsls	r3, r3, #3
 8005d58:	1a9b      	subs	r3, r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005d62:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	0159      	lsls	r1, r3, #5
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	440b      	add	r3, r1
 8005d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005d76:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	1a9b      	subs	r3, r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4403      	add	r3, r0
 8005d86:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005d8a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005d8c:	6879      	ldr	r1, [r7, #4]
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	4613      	mov	r3, r2
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	1a9b      	subs	r3, r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	440b      	add	r3, r1
 8005d9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d9e:	6819      	ldr	r1, [r3, #0]
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	4613      	mov	r3, r2
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	1a9b      	subs	r3, r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4403      	add	r3, r0
 8005dae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4419      	add	r1, r3
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	1a9b      	subs	r3, r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4403      	add	r3, r0
 8005dc4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005dc8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d114      	bne.n	8005dfa <PCD_EP_OutXfrComplete_int+0x16a>
 8005dd0:	6879      	ldr	r1, [r7, #4]
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	1a9b      	subs	r3, r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	440b      	add	r3, r1
 8005dde:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d108      	bne.n	8005dfa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6818      	ldr	r0, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005df2:	461a      	mov	r2, r3
 8005df4:	2101      	movs	r1, #1
 8005df6:	f002 fbd1 	bl	800859c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	4619      	mov	r1, r3
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f004 f8ad 	bl	8009f60 <HAL_PCD_DataOutStageCallback>
 8005e06:	e046      	b.n	8005e96 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4a26      	ldr	r2, [pc, #152]	; (8005ea4 <PCD_EP_OutXfrComplete_int+0x214>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d124      	bne.n	8005e5a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e26:	461a      	mov	r2, r3
 8005e28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e2c:	6093      	str	r3, [r2, #8]
 8005e2e:	e032      	b.n	8005e96 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d008      	beq.n	8005e4c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e46:	461a      	mov	r2, r3
 8005e48:	2320      	movs	r3, #32
 8005e4a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f004 f884 	bl	8009f60 <HAL_PCD_DataOutStageCallback>
 8005e58:	e01d      	b.n	8005e96 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d114      	bne.n	8005e8a <PCD_EP_OutXfrComplete_int+0x1fa>
 8005e60:	6879      	ldr	r1, [r7, #4]
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	4613      	mov	r3, r2
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	1a9b      	subs	r3, r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	440b      	add	r3, r1
 8005e6e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d108      	bne.n	8005e8a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6818      	ldr	r0, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e82:	461a      	mov	r2, r3
 8005e84:	2100      	movs	r1, #0
 8005e86:	f002 fb89 	bl	800859c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	4619      	mov	r1, r3
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f004 f865 	bl	8009f60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	4f54300a 	.word	0x4f54300a
 8005ea4:	4f54310a 	.word	0x4f54310a

08005ea8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	333c      	adds	r3, #60	; 0x3c
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4a15      	ldr	r2, [pc, #84]	; (8005f30 <PCD_EP_OutSetupPacket_int+0x88>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d90e      	bls.n	8005efc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d009      	beq.n	8005efc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005efa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f004 f81d 	bl	8009f3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4a0a      	ldr	r2, [pc, #40]	; (8005f30 <PCD_EP_OutSetupPacket_int+0x88>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d90c      	bls.n	8005f24 <PCD_EP_OutSetupPacket_int+0x7c>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d108      	bne.n	8005f24 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	2101      	movs	r1, #1
 8005f20:	f002 fb3c 	bl	800859c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	4f54300a 	.word	0x4f54300a

08005f34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	70fb      	strb	r3, [r7, #3]
 8005f40:	4613      	mov	r3, r2
 8005f42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005f4c:	78fb      	ldrb	r3, [r7, #3]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d107      	bne.n	8005f62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005f52:	883b      	ldrh	r3, [r7, #0]
 8005f54:	0419      	lsls	r1, r3, #16
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	629a      	str	r2, [r3, #40]	; 0x28
 8005f60:	e028      	b.n	8005fb4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	0c1b      	lsrs	r3, r3, #16
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f70:	2300      	movs	r3, #0
 8005f72:	73fb      	strb	r3, [r7, #15]
 8005f74:	e00d      	b.n	8005f92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
 8005f7c:	3340      	adds	r3, #64	; 0x40
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	0c1b      	lsrs	r3, r3, #16
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	4413      	add	r3, r2
 8005f8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	73fb      	strb	r3, [r7, #15]
 8005f92:	7bfa      	ldrb	r2, [r7, #15]
 8005f94:	78fb      	ldrb	r3, [r7, #3]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d3ec      	bcc.n	8005f76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005f9c:	883b      	ldrh	r3, [r7, #0]
 8005f9e:	0418      	lsls	r0, r3, #16
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6819      	ldr	r1, [r3, #0]
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	4302      	orrs	r2, r0
 8005fac:	3340      	adds	r3, #64	; 0x40
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	440b      	add	r3, r1
 8005fb2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	460b      	mov	r3, r1
 8005fcc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	887a      	ldrh	r2, [r7, #2]
 8005fd4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	460b      	mov	r3, r1
 8005fee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e25b      	b.n	80064c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d075      	beq.n	8006106 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800601a:	4ba3      	ldr	r3, [pc, #652]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 030c 	and.w	r3, r3, #12
 8006022:	2b04      	cmp	r3, #4
 8006024:	d00c      	beq.n	8006040 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006026:	4ba0      	ldr	r3, [pc, #640]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800602e:	2b08      	cmp	r3, #8
 8006030:	d112      	bne.n	8006058 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006032:	4b9d      	ldr	r3, [pc, #628]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800603a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800603e:	d10b      	bne.n	8006058 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006040:	4b99      	ldr	r3, [pc, #612]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d05b      	beq.n	8006104 <HAL_RCC_OscConfig+0x108>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d157      	bne.n	8006104 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e236      	b.n	80064c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006060:	d106      	bne.n	8006070 <HAL_RCC_OscConfig+0x74>
 8006062:	4b91      	ldr	r3, [pc, #580]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a90      	ldr	r2, [pc, #576]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 8006068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	e01d      	b.n	80060ac <HAL_RCC_OscConfig+0xb0>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006078:	d10c      	bne.n	8006094 <HAL_RCC_OscConfig+0x98>
 800607a:	4b8b      	ldr	r3, [pc, #556]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a8a      	ldr	r2, [pc, #552]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 8006080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	4b88      	ldr	r3, [pc, #544]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a87      	ldr	r2, [pc, #540]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 800608c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	e00b      	b.n	80060ac <HAL_RCC_OscConfig+0xb0>
 8006094:	4b84      	ldr	r3, [pc, #528]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a83      	ldr	r2, [pc, #524]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 800609a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	4b81      	ldr	r3, [pc, #516]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a80      	ldr	r2, [pc, #512]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 80060a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d013      	beq.n	80060dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b4:	f7fc f916 	bl	80022e4 <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060bc:	f7fc f912 	bl	80022e4 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b64      	cmp	r3, #100	; 0x64
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e1fb      	b.n	80064c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ce:	4b76      	ldr	r3, [pc, #472]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0f0      	beq.n	80060bc <HAL_RCC_OscConfig+0xc0>
 80060da:	e014      	b.n	8006106 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060dc:	f7fc f902 	bl	80022e4 <HAL_GetTick>
 80060e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060e4:	f7fc f8fe 	bl	80022e4 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b64      	cmp	r3, #100	; 0x64
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e1e7      	b.n	80064c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060f6:	4b6c      	ldr	r3, [pc, #432]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1f0      	bne.n	80060e4 <HAL_RCC_OscConfig+0xe8>
 8006102:	e000      	b.n	8006106 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d063      	beq.n	80061da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006112:	4b65      	ldr	r3, [pc, #404]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 030c 	and.w	r3, r3, #12
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00b      	beq.n	8006136 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800611e:	4b62      	ldr	r3, [pc, #392]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006126:	2b08      	cmp	r3, #8
 8006128:	d11c      	bne.n	8006164 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800612a:	4b5f      	ldr	r3, [pc, #380]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d116      	bne.n	8006164 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006136:	4b5c      	ldr	r3, [pc, #368]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d005      	beq.n	800614e <HAL_RCC_OscConfig+0x152>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d001      	beq.n	800614e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e1bb      	b.n	80064c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800614e:	4b56      	ldr	r3, [pc, #344]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	4952      	ldr	r1, [pc, #328]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 800615e:	4313      	orrs	r3, r2
 8006160:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006162:	e03a      	b.n	80061da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d020      	beq.n	80061ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800616c:	4b4f      	ldr	r3, [pc, #316]	; (80062ac <HAL_RCC_OscConfig+0x2b0>)
 800616e:	2201      	movs	r2, #1
 8006170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006172:	f7fc f8b7 	bl	80022e4 <HAL_GetTick>
 8006176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006178:	e008      	b.n	800618c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800617a:	f7fc f8b3 	bl	80022e4 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d901      	bls.n	800618c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e19c      	b.n	80064c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800618c:	4b46      	ldr	r3, [pc, #280]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0f0      	beq.n	800617a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006198:	4b43      	ldr	r3, [pc, #268]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	4940      	ldr	r1, [pc, #256]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	600b      	str	r3, [r1, #0]
 80061ac:	e015      	b.n	80061da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061ae:	4b3f      	ldr	r3, [pc, #252]	; (80062ac <HAL_RCC_OscConfig+0x2b0>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b4:	f7fc f896 	bl	80022e4 <HAL_GetTick>
 80061b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061ba:	e008      	b.n	80061ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061bc:	f7fc f892 	bl	80022e4 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e17b      	b.n	80064c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061ce:	4b36      	ldr	r3, [pc, #216]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1f0      	bne.n	80061bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0308 	and.w	r3, r3, #8
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d030      	beq.n	8006248 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d016      	beq.n	800621c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061ee:	4b30      	ldr	r3, [pc, #192]	; (80062b0 <HAL_RCC_OscConfig+0x2b4>)
 80061f0:	2201      	movs	r2, #1
 80061f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f4:	f7fc f876 	bl	80022e4 <HAL_GetTick>
 80061f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061fa:	e008      	b.n	800620e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061fc:	f7fc f872 	bl	80022e4 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b02      	cmp	r3, #2
 8006208:	d901      	bls.n	800620e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e15b      	b.n	80064c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800620e:	4b26      	ldr	r3, [pc, #152]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 8006210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0f0      	beq.n	80061fc <HAL_RCC_OscConfig+0x200>
 800621a:	e015      	b.n	8006248 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800621c:	4b24      	ldr	r3, [pc, #144]	; (80062b0 <HAL_RCC_OscConfig+0x2b4>)
 800621e:	2200      	movs	r2, #0
 8006220:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006222:	f7fc f85f 	bl	80022e4 <HAL_GetTick>
 8006226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006228:	e008      	b.n	800623c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800622a:	f7fc f85b 	bl	80022e4 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b02      	cmp	r3, #2
 8006236:	d901      	bls.n	800623c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e144      	b.n	80064c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800623c:	4b1a      	ldr	r3, [pc, #104]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 800623e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1f0      	bne.n	800622a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0304 	and.w	r3, r3, #4
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 80a0 	beq.w	8006396 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006256:	2300      	movs	r3, #0
 8006258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800625a:	4b13      	ldr	r3, [pc, #76]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10f      	bne.n	8006286 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006266:	2300      	movs	r3, #0
 8006268:	60bb      	str	r3, [r7, #8]
 800626a:	4b0f      	ldr	r3, [pc, #60]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	4a0e      	ldr	r2, [pc, #56]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 8006270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006274:	6413      	str	r3, [r2, #64]	; 0x40
 8006276:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <HAL_RCC_OscConfig+0x2ac>)
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800627e:	60bb      	str	r3, [r7, #8]
 8006280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006282:	2301      	movs	r3, #1
 8006284:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006286:	4b0b      	ldr	r3, [pc, #44]	; (80062b4 <HAL_RCC_OscConfig+0x2b8>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628e:	2b00      	cmp	r3, #0
 8006290:	d121      	bne.n	80062d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006292:	4b08      	ldr	r3, [pc, #32]	; (80062b4 <HAL_RCC_OscConfig+0x2b8>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a07      	ldr	r2, [pc, #28]	; (80062b4 <HAL_RCC_OscConfig+0x2b8>)
 8006298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800629c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800629e:	f7fc f821 	bl	80022e4 <HAL_GetTick>
 80062a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062a4:	e011      	b.n	80062ca <HAL_RCC_OscConfig+0x2ce>
 80062a6:	bf00      	nop
 80062a8:	40023800 	.word	0x40023800
 80062ac:	42470000 	.word	0x42470000
 80062b0:	42470e80 	.word	0x42470e80
 80062b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062b8:	f7fc f814 	bl	80022e4 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e0fd      	b.n	80064c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062ca:	4b81      	ldr	r3, [pc, #516]	; (80064d0 <HAL_RCC_OscConfig+0x4d4>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0f0      	beq.n	80062b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d106      	bne.n	80062ec <HAL_RCC_OscConfig+0x2f0>
 80062de:	4b7d      	ldr	r3, [pc, #500]	; (80064d4 <HAL_RCC_OscConfig+0x4d8>)
 80062e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e2:	4a7c      	ldr	r2, [pc, #496]	; (80064d4 <HAL_RCC_OscConfig+0x4d8>)
 80062e4:	f043 0301 	orr.w	r3, r3, #1
 80062e8:	6713      	str	r3, [r2, #112]	; 0x70
 80062ea:	e01c      	b.n	8006326 <HAL_RCC_OscConfig+0x32a>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	2b05      	cmp	r3, #5
 80062f2:	d10c      	bne.n	800630e <HAL_RCC_OscConfig+0x312>
 80062f4:	4b77      	ldr	r3, [pc, #476]	; (80064d4 <HAL_RCC_OscConfig+0x4d8>)
 80062f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f8:	4a76      	ldr	r2, [pc, #472]	; (80064d4 <HAL_RCC_OscConfig+0x4d8>)
 80062fa:	f043 0304 	orr.w	r3, r3, #4
 80062fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006300:	4b74      	ldr	r3, [pc, #464]	; (80064d4 <HAL_RCC_OscConfig+0x4d8>)
 8006302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006304:	4a73      	ldr	r2, [pc, #460]	; (80064d4 <HAL_RCC_OscConfig+0x4d8>)
 8006306:	f043 0301 	orr.w	r3, r3, #1
 800630a:	6713      	str	r3, [r2, #112]	; 0x70
 800630c:	e00b      	b.n	8006326 <HAL_RCC_OscConfig+0x32a>
 800630e:	4b71      	ldr	r3, [pc, #452]	; (80064d4 <HAL_RCC_OscConfig+0x4d8>)
 8006310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006312:	4a70      	ldr	r2, [pc, #448]	; (80064d4 <HAL_RCC_OscConfig+0x4d8>)
 8006314:	f023 0301 	bic.w	r3, r3, #1
 8006318:	6713      	str	r3, [r2, #112]	; 0x70
 800631a:	4b6e      	ldr	r3, [pc, #440]	; (80064d4 <HAL_RCC_OscConfig+0x4d8>)
 800631c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631e:	4a6d      	ldr	r2, [pc, #436]	; (80064d4 <HAL_RCC_OscConfig+0x4d8>)
 8006320:	f023 0304 	bic.w	r3, r3, #4
 8006324:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d015      	beq.n	800635a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800632e:	f7fb ffd9 	bl	80022e4 <HAL_GetTick>
 8006332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006334:	e00a      	b.n	800634c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006336:	f7fb ffd5 	bl	80022e4 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	f241 3288 	movw	r2, #5000	; 0x1388
 8006344:	4293      	cmp	r3, r2
 8006346:	d901      	bls.n	800634c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e0bc      	b.n	80064c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800634c:	4b61      	ldr	r3, [pc, #388]	; (80064d4 <HAL_RCC_OscConfig+0x4d8>)
 800634e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0ee      	beq.n	8006336 <HAL_RCC_OscConfig+0x33a>
 8006358:	e014      	b.n	8006384 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800635a:	f7fb ffc3 	bl	80022e4 <HAL_GetTick>
 800635e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006360:	e00a      	b.n	8006378 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006362:	f7fb ffbf 	bl	80022e4 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006370:	4293      	cmp	r3, r2
 8006372:	d901      	bls.n	8006378 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e0a6      	b.n	80064c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006378:	4b56      	ldr	r3, [pc, #344]	; (80064d4 <HAL_RCC_OscConfig+0x4d8>)
 800637a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1ee      	bne.n	8006362 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006384:	7dfb      	ldrb	r3, [r7, #23]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d105      	bne.n	8006396 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800638a:	4b52      	ldr	r3, [pc, #328]	; (80064d4 <HAL_RCC_OscConfig+0x4d8>)
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	4a51      	ldr	r2, [pc, #324]	; (80064d4 <HAL_RCC_OscConfig+0x4d8>)
 8006390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006394:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 8092 	beq.w	80064c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063a0:	4b4c      	ldr	r3, [pc, #304]	; (80064d4 <HAL_RCC_OscConfig+0x4d8>)
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f003 030c 	and.w	r3, r3, #12
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	d05c      	beq.n	8006466 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d141      	bne.n	8006438 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063b4:	4b48      	ldr	r3, [pc, #288]	; (80064d8 <HAL_RCC_OscConfig+0x4dc>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ba:	f7fb ff93 	bl	80022e4 <HAL_GetTick>
 80063be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063c0:	e008      	b.n	80063d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063c2:	f7fb ff8f 	bl	80022e4 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e078      	b.n	80064c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063d4:	4b3f      	ldr	r3, [pc, #252]	; (80064d4 <HAL_RCC_OscConfig+0x4d8>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1f0      	bne.n	80063c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	69da      	ldr	r2, [r3, #28]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	431a      	orrs	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	019b      	lsls	r3, r3, #6
 80063f0:	431a      	orrs	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f6:	085b      	lsrs	r3, r3, #1
 80063f8:	3b01      	subs	r3, #1
 80063fa:	041b      	lsls	r3, r3, #16
 80063fc:	431a      	orrs	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006402:	061b      	lsls	r3, r3, #24
 8006404:	4933      	ldr	r1, [pc, #204]	; (80064d4 <HAL_RCC_OscConfig+0x4d8>)
 8006406:	4313      	orrs	r3, r2
 8006408:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800640a:	4b33      	ldr	r3, [pc, #204]	; (80064d8 <HAL_RCC_OscConfig+0x4dc>)
 800640c:	2201      	movs	r2, #1
 800640e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006410:	f7fb ff68 	bl	80022e4 <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006418:	f7fb ff64 	bl	80022e4 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b02      	cmp	r3, #2
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e04d      	b.n	80064c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800642a:	4b2a      	ldr	r3, [pc, #168]	; (80064d4 <HAL_RCC_OscConfig+0x4d8>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0f0      	beq.n	8006418 <HAL_RCC_OscConfig+0x41c>
 8006436:	e045      	b.n	80064c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006438:	4b27      	ldr	r3, [pc, #156]	; (80064d8 <HAL_RCC_OscConfig+0x4dc>)
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800643e:	f7fb ff51 	bl	80022e4 <HAL_GetTick>
 8006442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006444:	e008      	b.n	8006458 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006446:	f7fb ff4d 	bl	80022e4 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	2b02      	cmp	r3, #2
 8006452:	d901      	bls.n	8006458 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e036      	b.n	80064c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006458:	4b1e      	ldr	r3, [pc, #120]	; (80064d4 <HAL_RCC_OscConfig+0x4d8>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1f0      	bne.n	8006446 <HAL_RCC_OscConfig+0x44a>
 8006464:	e02e      	b.n	80064c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d101      	bne.n	8006472 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e029      	b.n	80064c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006472:	4b18      	ldr	r3, [pc, #96]	; (80064d4 <HAL_RCC_OscConfig+0x4d8>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	429a      	cmp	r2, r3
 8006484:	d11c      	bne.n	80064c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006490:	429a      	cmp	r2, r3
 8006492:	d115      	bne.n	80064c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800649a:	4013      	ands	r3, r2
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d10d      	bne.n	80064c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d106      	bne.n	80064c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80064bc:	429a      	cmp	r2, r3
 80064be:	d001      	beq.n	80064c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e000      	b.n	80064c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3718      	adds	r7, #24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	40007000 	.word	0x40007000
 80064d4:	40023800 	.word	0x40023800
 80064d8:	42470060 	.word	0x42470060

080064dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d101      	bne.n	80064f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e0cc      	b.n	800668a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064f0:	4b68      	ldr	r3, [pc, #416]	; (8006694 <HAL_RCC_ClockConfig+0x1b8>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 030f 	and.w	r3, r3, #15
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d90c      	bls.n	8006518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064fe:	4b65      	ldr	r3, [pc, #404]	; (8006694 <HAL_RCC_ClockConfig+0x1b8>)
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006506:	4b63      	ldr	r3, [pc, #396]	; (8006694 <HAL_RCC_ClockConfig+0x1b8>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 030f 	and.w	r3, r3, #15
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	429a      	cmp	r2, r3
 8006512:	d001      	beq.n	8006518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e0b8      	b.n	800668a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b00      	cmp	r3, #0
 8006522:	d020      	beq.n	8006566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b00      	cmp	r3, #0
 800652e:	d005      	beq.n	800653c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006530:	4b59      	ldr	r3, [pc, #356]	; (8006698 <HAL_RCC_ClockConfig+0x1bc>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	4a58      	ldr	r2, [pc, #352]	; (8006698 <HAL_RCC_ClockConfig+0x1bc>)
 8006536:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800653a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0308 	and.w	r3, r3, #8
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006548:	4b53      	ldr	r3, [pc, #332]	; (8006698 <HAL_RCC_ClockConfig+0x1bc>)
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	4a52      	ldr	r2, [pc, #328]	; (8006698 <HAL_RCC_ClockConfig+0x1bc>)
 800654e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006554:	4b50      	ldr	r3, [pc, #320]	; (8006698 <HAL_RCC_ClockConfig+0x1bc>)
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	494d      	ldr	r1, [pc, #308]	; (8006698 <HAL_RCC_ClockConfig+0x1bc>)
 8006562:	4313      	orrs	r3, r2
 8006564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0301 	and.w	r3, r3, #1
 800656e:	2b00      	cmp	r3, #0
 8006570:	d044      	beq.n	80065fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d107      	bne.n	800658a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800657a:	4b47      	ldr	r3, [pc, #284]	; (8006698 <HAL_RCC_ClockConfig+0x1bc>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d119      	bne.n	80065ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e07f      	b.n	800668a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	2b02      	cmp	r3, #2
 8006590:	d003      	beq.n	800659a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006596:	2b03      	cmp	r3, #3
 8006598:	d107      	bne.n	80065aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800659a:	4b3f      	ldr	r3, [pc, #252]	; (8006698 <HAL_RCC_ClockConfig+0x1bc>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d109      	bne.n	80065ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e06f      	b.n	800668a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065aa:	4b3b      	ldr	r3, [pc, #236]	; (8006698 <HAL_RCC_ClockConfig+0x1bc>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e067      	b.n	800668a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065ba:	4b37      	ldr	r3, [pc, #220]	; (8006698 <HAL_RCC_ClockConfig+0x1bc>)
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f023 0203 	bic.w	r2, r3, #3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	4934      	ldr	r1, [pc, #208]	; (8006698 <HAL_RCC_ClockConfig+0x1bc>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065cc:	f7fb fe8a 	bl	80022e4 <HAL_GetTick>
 80065d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065d2:	e00a      	b.n	80065ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065d4:	f7fb fe86 	bl	80022e4 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e04f      	b.n	800668a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ea:	4b2b      	ldr	r3, [pc, #172]	; (8006698 <HAL_RCC_ClockConfig+0x1bc>)
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f003 020c 	and.w	r2, r3, #12
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d1eb      	bne.n	80065d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065fc:	4b25      	ldr	r3, [pc, #148]	; (8006694 <HAL_RCC_ClockConfig+0x1b8>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 030f 	and.w	r3, r3, #15
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	429a      	cmp	r2, r3
 8006608:	d20c      	bcs.n	8006624 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800660a:	4b22      	ldr	r3, [pc, #136]	; (8006694 <HAL_RCC_ClockConfig+0x1b8>)
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	b2d2      	uxtb	r2, r2
 8006610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006612:	4b20      	ldr	r3, [pc, #128]	; (8006694 <HAL_RCC_ClockConfig+0x1b8>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 030f 	and.w	r3, r3, #15
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	429a      	cmp	r2, r3
 800661e:	d001      	beq.n	8006624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e032      	b.n	800668a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d008      	beq.n	8006642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006630:	4b19      	ldr	r3, [pc, #100]	; (8006698 <HAL_RCC_ClockConfig+0x1bc>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	4916      	ldr	r1, [pc, #88]	; (8006698 <HAL_RCC_ClockConfig+0x1bc>)
 800663e:	4313      	orrs	r3, r2
 8006640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0308 	and.w	r3, r3, #8
 800664a:	2b00      	cmp	r3, #0
 800664c:	d009      	beq.n	8006662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800664e:	4b12      	ldr	r3, [pc, #72]	; (8006698 <HAL_RCC_ClockConfig+0x1bc>)
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	00db      	lsls	r3, r3, #3
 800665c:	490e      	ldr	r1, [pc, #56]	; (8006698 <HAL_RCC_ClockConfig+0x1bc>)
 800665e:	4313      	orrs	r3, r2
 8006660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006662:	f000 f821 	bl	80066a8 <HAL_RCC_GetSysClockFreq>
 8006666:	4601      	mov	r1, r0
 8006668:	4b0b      	ldr	r3, [pc, #44]	; (8006698 <HAL_RCC_ClockConfig+0x1bc>)
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	091b      	lsrs	r3, r3, #4
 800666e:	f003 030f 	and.w	r3, r3, #15
 8006672:	4a0a      	ldr	r2, [pc, #40]	; (800669c <HAL_RCC_ClockConfig+0x1c0>)
 8006674:	5cd3      	ldrb	r3, [r2, r3]
 8006676:	fa21 f303 	lsr.w	r3, r1, r3
 800667a:	4a09      	ldr	r2, [pc, #36]	; (80066a0 <HAL_RCC_ClockConfig+0x1c4>)
 800667c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800667e:	4b09      	ldr	r3, [pc, #36]	; (80066a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4618      	mov	r0, r3
 8006684:	f7fb fdea 	bl	800225c <HAL_InitTick>

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	40023c00 	.word	0x40023c00
 8006698:	40023800 	.word	0x40023800
 800669c:	0803e3f4 	.word	0x0803e3f4
 80066a0:	200000d0 	.word	0x200000d0
 80066a4:	200000d4 	.word	0x200000d4

080066a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	607b      	str	r3, [r7, #4]
 80066b2:	2300      	movs	r3, #0
 80066b4:	60fb      	str	r3, [r7, #12]
 80066b6:	2300      	movs	r3, #0
 80066b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066be:	4b63      	ldr	r3, [pc, #396]	; (800684c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f003 030c 	and.w	r3, r3, #12
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	d007      	beq.n	80066da <HAL_RCC_GetSysClockFreq+0x32>
 80066ca:	2b08      	cmp	r3, #8
 80066cc:	d008      	beq.n	80066e0 <HAL_RCC_GetSysClockFreq+0x38>
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f040 80b4 	bne.w	800683c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066d4:	4b5e      	ldr	r3, [pc, #376]	; (8006850 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80066d6:	60bb      	str	r3, [r7, #8]
       break;
 80066d8:	e0b3      	b.n	8006842 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066da:	4b5e      	ldr	r3, [pc, #376]	; (8006854 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80066dc:	60bb      	str	r3, [r7, #8]
      break;
 80066de:	e0b0      	b.n	8006842 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066e0:	4b5a      	ldr	r3, [pc, #360]	; (800684c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066ea:	4b58      	ldr	r3, [pc, #352]	; (800684c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d04a      	beq.n	800678c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066f6:	4b55      	ldr	r3, [pc, #340]	; (800684c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	099b      	lsrs	r3, r3, #6
 80066fc:	f04f 0400 	mov.w	r4, #0
 8006700:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006704:	f04f 0200 	mov.w	r2, #0
 8006708:	ea03 0501 	and.w	r5, r3, r1
 800670c:	ea04 0602 	and.w	r6, r4, r2
 8006710:	4629      	mov	r1, r5
 8006712:	4632      	mov	r2, r6
 8006714:	f04f 0300 	mov.w	r3, #0
 8006718:	f04f 0400 	mov.w	r4, #0
 800671c:	0154      	lsls	r4, r2, #5
 800671e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006722:	014b      	lsls	r3, r1, #5
 8006724:	4619      	mov	r1, r3
 8006726:	4622      	mov	r2, r4
 8006728:	1b49      	subs	r1, r1, r5
 800672a:	eb62 0206 	sbc.w	r2, r2, r6
 800672e:	f04f 0300 	mov.w	r3, #0
 8006732:	f04f 0400 	mov.w	r4, #0
 8006736:	0194      	lsls	r4, r2, #6
 8006738:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800673c:	018b      	lsls	r3, r1, #6
 800673e:	1a5b      	subs	r3, r3, r1
 8006740:	eb64 0402 	sbc.w	r4, r4, r2
 8006744:	f04f 0100 	mov.w	r1, #0
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	00e2      	lsls	r2, r4, #3
 800674e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006752:	00d9      	lsls	r1, r3, #3
 8006754:	460b      	mov	r3, r1
 8006756:	4614      	mov	r4, r2
 8006758:	195b      	adds	r3, r3, r5
 800675a:	eb44 0406 	adc.w	r4, r4, r6
 800675e:	f04f 0100 	mov.w	r1, #0
 8006762:	f04f 0200 	mov.w	r2, #0
 8006766:	0262      	lsls	r2, r4, #9
 8006768:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800676c:	0259      	lsls	r1, r3, #9
 800676e:	460b      	mov	r3, r1
 8006770:	4614      	mov	r4, r2
 8006772:	4618      	mov	r0, r3
 8006774:	4621      	mov	r1, r4
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f04f 0400 	mov.w	r4, #0
 800677c:	461a      	mov	r2, r3
 800677e:	4623      	mov	r3, r4
 8006780:	f7f9 fd22 	bl	80001c8 <__aeabi_uldivmod>
 8006784:	4603      	mov	r3, r0
 8006786:	460c      	mov	r4, r1
 8006788:	60fb      	str	r3, [r7, #12]
 800678a:	e049      	b.n	8006820 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800678c:	4b2f      	ldr	r3, [pc, #188]	; (800684c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	099b      	lsrs	r3, r3, #6
 8006792:	f04f 0400 	mov.w	r4, #0
 8006796:	f240 11ff 	movw	r1, #511	; 0x1ff
 800679a:	f04f 0200 	mov.w	r2, #0
 800679e:	ea03 0501 	and.w	r5, r3, r1
 80067a2:	ea04 0602 	and.w	r6, r4, r2
 80067a6:	4629      	mov	r1, r5
 80067a8:	4632      	mov	r2, r6
 80067aa:	f04f 0300 	mov.w	r3, #0
 80067ae:	f04f 0400 	mov.w	r4, #0
 80067b2:	0154      	lsls	r4, r2, #5
 80067b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80067b8:	014b      	lsls	r3, r1, #5
 80067ba:	4619      	mov	r1, r3
 80067bc:	4622      	mov	r2, r4
 80067be:	1b49      	subs	r1, r1, r5
 80067c0:	eb62 0206 	sbc.w	r2, r2, r6
 80067c4:	f04f 0300 	mov.w	r3, #0
 80067c8:	f04f 0400 	mov.w	r4, #0
 80067cc:	0194      	lsls	r4, r2, #6
 80067ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80067d2:	018b      	lsls	r3, r1, #6
 80067d4:	1a5b      	subs	r3, r3, r1
 80067d6:	eb64 0402 	sbc.w	r4, r4, r2
 80067da:	f04f 0100 	mov.w	r1, #0
 80067de:	f04f 0200 	mov.w	r2, #0
 80067e2:	00e2      	lsls	r2, r4, #3
 80067e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80067e8:	00d9      	lsls	r1, r3, #3
 80067ea:	460b      	mov	r3, r1
 80067ec:	4614      	mov	r4, r2
 80067ee:	195b      	adds	r3, r3, r5
 80067f0:	eb44 0406 	adc.w	r4, r4, r6
 80067f4:	f04f 0100 	mov.w	r1, #0
 80067f8:	f04f 0200 	mov.w	r2, #0
 80067fc:	02a2      	lsls	r2, r4, #10
 80067fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006802:	0299      	lsls	r1, r3, #10
 8006804:	460b      	mov	r3, r1
 8006806:	4614      	mov	r4, r2
 8006808:	4618      	mov	r0, r3
 800680a:	4621      	mov	r1, r4
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f04f 0400 	mov.w	r4, #0
 8006812:	461a      	mov	r2, r3
 8006814:	4623      	mov	r3, r4
 8006816:	f7f9 fcd7 	bl	80001c8 <__aeabi_uldivmod>
 800681a:	4603      	mov	r3, r0
 800681c:	460c      	mov	r4, r1
 800681e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006820:	4b0a      	ldr	r3, [pc, #40]	; (800684c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	0c1b      	lsrs	r3, r3, #16
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	3301      	adds	r3, #1
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	fbb2 f3f3 	udiv	r3, r2, r3
 8006838:	60bb      	str	r3, [r7, #8]
      break;
 800683a:	e002      	b.n	8006842 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800683c:	4b04      	ldr	r3, [pc, #16]	; (8006850 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800683e:	60bb      	str	r3, [r7, #8]
      break;
 8006840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006842:	68bb      	ldr	r3, [r7, #8]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800684c:	40023800 	.word	0x40023800
 8006850:	00f42400 	.word	0x00f42400
 8006854:	007a1200 	.word	0x007a1200

08006858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006858:	b480      	push	{r7}
 800685a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800685c:	4b03      	ldr	r3, [pc, #12]	; (800686c <HAL_RCC_GetHCLKFreq+0x14>)
 800685e:	681b      	ldr	r3, [r3, #0]
}
 8006860:	4618      	mov	r0, r3
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	200000d0 	.word	0x200000d0

08006870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006874:	f7ff fff0 	bl	8006858 <HAL_RCC_GetHCLKFreq>
 8006878:	4601      	mov	r1, r0
 800687a:	4b05      	ldr	r3, [pc, #20]	; (8006890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	0a9b      	lsrs	r3, r3, #10
 8006880:	f003 0307 	and.w	r3, r3, #7
 8006884:	4a03      	ldr	r2, [pc, #12]	; (8006894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006886:	5cd3      	ldrb	r3, [r2, r3]
 8006888:	fa21 f303 	lsr.w	r3, r1, r3
}
 800688c:	4618      	mov	r0, r3
 800688e:	bd80      	pop	{r7, pc}
 8006890:	40023800 	.word	0x40023800
 8006894:	0803e404 	.word	0x0803e404

08006898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e01d      	b.n	80068e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d106      	bne.n	80068c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7fb fc3c 	bl	800213c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3304      	adds	r3, #4
 80068d4:	4619      	mov	r1, r3
 80068d6:	4610      	mov	r0, r2
 80068d8:	f000 fa14 	bl	8006d04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b085      	sub	sp, #20
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0201 	orr.w	r2, r2, #1
 8006904:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b06      	cmp	r3, #6
 8006916:	d007      	beq.n	8006928 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0201 	orr.w	r2, r2, #1
 8006926:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b082      	sub	sp, #8
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b02      	cmp	r3, #2
 800694a:	d122      	bne.n	8006992 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b02      	cmp	r3, #2
 8006958:	d11b      	bne.n	8006992 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f06f 0202 	mvn.w	r2, #2
 8006962:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	f003 0303 	and.w	r3, r3, #3
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f9a5 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 800697e:	e005      	b.n	800698c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f997 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f9a8 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	f003 0304 	and.w	r3, r3, #4
 800699c:	2b04      	cmp	r3, #4
 800699e:	d122      	bne.n	80069e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f003 0304 	and.w	r3, r3, #4
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d11b      	bne.n	80069e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f06f 0204 	mvn.w	r2, #4
 80069b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f97b 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 80069d2:	e005      	b.n	80069e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f96d 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f97e 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	f003 0308 	and.w	r3, r3, #8
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d122      	bne.n	8006a3a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	f003 0308 	and.w	r3, r3, #8
 80069fe:	2b08      	cmp	r3, #8
 8006a00:	d11b      	bne.n	8006a3a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f06f 0208 	mvn.w	r2, #8
 8006a0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2204      	movs	r2, #4
 8006a10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	f003 0303 	and.w	r3, r3, #3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d003      	beq.n	8006a28 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f951 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 8006a26:	e005      	b.n	8006a34 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f943 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f954 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	f003 0310 	and.w	r3, r3, #16
 8006a44:	2b10      	cmp	r3, #16
 8006a46:	d122      	bne.n	8006a8e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f003 0310 	and.w	r3, r3, #16
 8006a52:	2b10      	cmp	r3, #16
 8006a54:	d11b      	bne.n	8006a8e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f06f 0210 	mvn.w	r2, #16
 8006a5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2208      	movs	r2, #8
 8006a64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d003      	beq.n	8006a7c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f927 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 8006a7a:	e005      	b.n	8006a88 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f919 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f92a 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d10e      	bne.n	8006aba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d107      	bne.n	8006aba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f06f 0201 	mvn.w	r2, #1
 8006ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7fb f8dd 	bl	8001c74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac4:	2b80      	cmp	r3, #128	; 0x80
 8006ac6:	d10e      	bne.n	8006ae6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad2:	2b80      	cmp	r3, #128	; 0x80
 8006ad4:	d107      	bne.n	8006ae6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 facf 	bl	8007084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af0:	2b40      	cmp	r3, #64	; 0x40
 8006af2:	d10e      	bne.n	8006b12 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afe:	2b40      	cmp	r3, #64	; 0x40
 8006b00:	d107      	bne.n	8006b12 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 f8ef 	bl	8006cf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	f003 0320 	and.w	r3, r3, #32
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	d10e      	bne.n	8006b3e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f003 0320 	and.w	r3, r3, #32
 8006b2a:	2b20      	cmp	r3, #32
 8006b2c:	d107      	bne.n	8006b3e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f06f 0220 	mvn.w	r2, #32
 8006b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fa99 	bl	8007070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b3e:	bf00      	nop
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d101      	bne.n	8006b5e <HAL_TIM_ConfigClockSource+0x18>
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	e0a6      	b.n	8006cac <HAL_TIM_ConfigClockSource+0x166>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2202      	movs	r2, #2
 8006b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b7c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b84:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b40      	cmp	r3, #64	; 0x40
 8006b94:	d067      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x120>
 8006b96:	2b40      	cmp	r3, #64	; 0x40
 8006b98:	d80b      	bhi.n	8006bb2 <HAL_TIM_ConfigClockSource+0x6c>
 8006b9a:	2b10      	cmp	r3, #16
 8006b9c:	d073      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x140>
 8006b9e:	2b10      	cmp	r3, #16
 8006ba0:	d802      	bhi.n	8006ba8 <HAL_TIM_ConfigClockSource+0x62>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d06f      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006ba6:	e078      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006ba8:	2b20      	cmp	r3, #32
 8006baa:	d06c      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x140>
 8006bac:	2b30      	cmp	r3, #48	; 0x30
 8006bae:	d06a      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006bb0:	e073      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006bb2:	2b70      	cmp	r3, #112	; 0x70
 8006bb4:	d00d      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x8c>
 8006bb6:	2b70      	cmp	r3, #112	; 0x70
 8006bb8:	d804      	bhi.n	8006bc4 <HAL_TIM_ConfigClockSource+0x7e>
 8006bba:	2b50      	cmp	r3, #80	; 0x50
 8006bbc:	d033      	beq.n	8006c26 <HAL_TIM_ConfigClockSource+0xe0>
 8006bbe:	2b60      	cmp	r3, #96	; 0x60
 8006bc0:	d041      	beq.n	8006c46 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006bc2:	e06a      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc8:	d066      	beq.n	8006c98 <HAL_TIM_ConfigClockSource+0x152>
 8006bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bce:	d017      	beq.n	8006c00 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006bd0:	e063      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6818      	ldr	r0, [r3, #0]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	6899      	ldr	r1, [r3, #8]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	f000 f9a9 	bl	8006f38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bf4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	609a      	str	r2, [r3, #8]
      break;
 8006bfe:	e04c      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6818      	ldr	r0, [r3, #0]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	6899      	ldr	r1, [r3, #8]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	f000 f992 	bl	8006f38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	689a      	ldr	r2, [r3, #8]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c22:	609a      	str	r2, [r3, #8]
      break;
 8006c24:	e039      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6818      	ldr	r0, [r3, #0]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	6859      	ldr	r1, [r3, #4]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	461a      	mov	r2, r3
 8006c34:	f000 f906 	bl	8006e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2150      	movs	r1, #80	; 0x50
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 f95f 	bl	8006f02 <TIM_ITRx_SetConfig>
      break;
 8006c44:	e029      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6818      	ldr	r0, [r3, #0]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	6859      	ldr	r1, [r3, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	461a      	mov	r2, r3
 8006c54:	f000 f925 	bl	8006ea2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2160      	movs	r1, #96	; 0x60
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 f94f 	bl	8006f02 <TIM_ITRx_SetConfig>
      break;
 8006c64:	e019      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6818      	ldr	r0, [r3, #0]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	6859      	ldr	r1, [r3, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	461a      	mov	r2, r3
 8006c74:	f000 f8e6 	bl	8006e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2140      	movs	r1, #64	; 0x40
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 f93f 	bl	8006f02 <TIM_ITRx_SetConfig>
      break;
 8006c84:	e009      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	4610      	mov	r0, r2
 8006c92:	f000 f936 	bl	8006f02 <TIM_ITRx_SetConfig>
      break;
 8006c96:	e000      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006c98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a40      	ldr	r2, [pc, #256]	; (8006e18 <TIM_Base_SetConfig+0x114>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d013      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d22:	d00f      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a3d      	ldr	r2, [pc, #244]	; (8006e1c <TIM_Base_SetConfig+0x118>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00b      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a3c      	ldr	r2, [pc, #240]	; (8006e20 <TIM_Base_SetConfig+0x11c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d007      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a3b      	ldr	r2, [pc, #236]	; (8006e24 <TIM_Base_SetConfig+0x120>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a3a      	ldr	r2, [pc, #232]	; (8006e28 <TIM_Base_SetConfig+0x124>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d108      	bne.n	8006d56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a2f      	ldr	r2, [pc, #188]	; (8006e18 <TIM_Base_SetConfig+0x114>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d02b      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d64:	d027      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a2c      	ldr	r2, [pc, #176]	; (8006e1c <TIM_Base_SetConfig+0x118>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d023      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a2b      	ldr	r2, [pc, #172]	; (8006e20 <TIM_Base_SetConfig+0x11c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d01f      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a2a      	ldr	r2, [pc, #168]	; (8006e24 <TIM_Base_SetConfig+0x120>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d01b      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a29      	ldr	r2, [pc, #164]	; (8006e28 <TIM_Base_SetConfig+0x124>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d017      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a28      	ldr	r2, [pc, #160]	; (8006e2c <TIM_Base_SetConfig+0x128>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d013      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a27      	ldr	r2, [pc, #156]	; (8006e30 <TIM_Base_SetConfig+0x12c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d00f      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a26      	ldr	r2, [pc, #152]	; (8006e34 <TIM_Base_SetConfig+0x130>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d00b      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a25      	ldr	r2, [pc, #148]	; (8006e38 <TIM_Base_SetConfig+0x134>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d007      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a24      	ldr	r2, [pc, #144]	; (8006e3c <TIM_Base_SetConfig+0x138>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d003      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a23      	ldr	r2, [pc, #140]	; (8006e40 <TIM_Base_SetConfig+0x13c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d108      	bne.n	8006dc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a0a      	ldr	r2, [pc, #40]	; (8006e18 <TIM_Base_SetConfig+0x114>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d003      	beq.n	8006dfc <TIM_Base_SetConfig+0xf8>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a0c      	ldr	r2, [pc, #48]	; (8006e28 <TIM_Base_SetConfig+0x124>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d103      	bne.n	8006e04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	691a      	ldr	r2, [r3, #16]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	615a      	str	r2, [r3, #20]
}
 8006e0a:	bf00      	nop
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	40010000 	.word	0x40010000
 8006e1c:	40000400 	.word	0x40000400
 8006e20:	40000800 	.word	0x40000800
 8006e24:	40000c00 	.word	0x40000c00
 8006e28:	40010400 	.word	0x40010400
 8006e2c:	40014000 	.word	0x40014000
 8006e30:	40014400 	.word	0x40014400
 8006e34:	40014800 	.word	0x40014800
 8006e38:	40001800 	.word	0x40001800
 8006e3c:	40001c00 	.word	0x40001c00
 8006e40:	40002000 	.word	0x40002000

08006e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	f023 0201 	bic.w	r2, r3, #1
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	011b      	lsls	r3, r3, #4
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f023 030a 	bic.w	r3, r3, #10
 8006e80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	621a      	str	r2, [r3, #32]
}
 8006e96:	bf00      	nop
 8006e98:	371c      	adds	r7, #28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b087      	sub	sp, #28
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	f023 0210 	bic.w	r2, r3, #16
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ecc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	031b      	lsls	r3, r3, #12
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ede:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	011b      	lsls	r3, r3, #4
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	621a      	str	r2, [r3, #32]
}
 8006ef6:	bf00      	nop
 8006ef8:	371c      	adds	r7, #28
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b085      	sub	sp, #20
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	f043 0307 	orr.w	r3, r3, #7
 8006f24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	609a      	str	r2, [r3, #8]
}
 8006f2c:	bf00      	nop
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b087      	sub	sp, #28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
 8006f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	021a      	lsls	r2, r3, #8
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	609a      	str	r2, [r3, #8]
}
 8006f6c:	bf00      	nop
 8006f6e:	371c      	adds	r7, #28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d101      	bne.n	8006f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	e05a      	b.n	8007046 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a21      	ldr	r2, [pc, #132]	; (8007054 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d022      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fdc:	d01d      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a1d      	ldr	r2, [pc, #116]	; (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d018      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a1b      	ldr	r2, [pc, #108]	; (800705c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d013      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a1a      	ldr	r2, [pc, #104]	; (8007060 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d00e      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a18      	ldr	r2, [pc, #96]	; (8007064 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d009      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a17      	ldr	r2, [pc, #92]	; (8007068 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d004      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a15      	ldr	r2, [pc, #84]	; (800706c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d10c      	bne.n	8007034 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007020:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	4313      	orrs	r3, r2
 800702a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	40010000 	.word	0x40010000
 8007058:	40000400 	.word	0x40000400
 800705c:	40000800 	.word	0x40000800
 8007060:	40000c00 	.word	0x40000c00
 8007064:	40010400 	.word	0x40010400
 8007068:	40014000 	.word	0x40014000
 800706c:	40001800 	.word	0x40001800

08007070 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007098:	b084      	sub	sp, #16
 800709a:	b580      	push	{r7, lr}
 800709c:	b084      	sub	sp, #16
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	f107 001c 	add.w	r0, r7, #28
 80070a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d122      	bne.n	80070f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80070c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80070d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d105      	bne.n	80070ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 fab4 	bl	8008658 <USB_CoreReset>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73fb      	strb	r3, [r7, #15]
 80070f4:	e01a      	b.n	800712c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f001 faa8 	bl	8008658 <USB_CoreReset>
 8007108:	4603      	mov	r3, r0
 800710a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800710c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007116:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	639a      	str	r2, [r3, #56]	; 0x38
 800711e:	e005      	b.n	800712c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007124:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712e:	2b01      	cmp	r3, #1
 8007130:	d10b      	bne.n	800714a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f043 0206 	orr.w	r2, r3, #6
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f043 0220 	orr.w	r2, r3, #32
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800714a:	7bfb      	ldrb	r3, [r7, #15]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007156:	b004      	add	sp, #16
 8007158:	4770      	bx	lr
	...

0800715c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800715c:	b480      	push	{r7}
 800715e:	b087      	sub	sp, #28
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	4613      	mov	r3, r2
 8007168:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800716a:	79fb      	ldrb	r3, [r7, #7]
 800716c:	2b02      	cmp	r3, #2
 800716e:	d165      	bne.n	800723c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	4a41      	ldr	r2, [pc, #260]	; (8007278 <USB_SetTurnaroundTime+0x11c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d906      	bls.n	8007186 <USB_SetTurnaroundTime+0x2a>
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	4a40      	ldr	r2, [pc, #256]	; (800727c <USB_SetTurnaroundTime+0x120>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d802      	bhi.n	8007186 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007180:	230f      	movs	r3, #15
 8007182:	617b      	str	r3, [r7, #20]
 8007184:	e062      	b.n	800724c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	4a3c      	ldr	r2, [pc, #240]	; (800727c <USB_SetTurnaroundTime+0x120>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d906      	bls.n	800719c <USB_SetTurnaroundTime+0x40>
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	4a3b      	ldr	r2, [pc, #236]	; (8007280 <USB_SetTurnaroundTime+0x124>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d802      	bhi.n	800719c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007196:	230e      	movs	r3, #14
 8007198:	617b      	str	r3, [r7, #20]
 800719a:	e057      	b.n	800724c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	4a38      	ldr	r2, [pc, #224]	; (8007280 <USB_SetTurnaroundTime+0x124>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d906      	bls.n	80071b2 <USB_SetTurnaroundTime+0x56>
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	4a37      	ldr	r2, [pc, #220]	; (8007284 <USB_SetTurnaroundTime+0x128>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d802      	bhi.n	80071b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80071ac:	230d      	movs	r3, #13
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	e04c      	b.n	800724c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	4a33      	ldr	r2, [pc, #204]	; (8007284 <USB_SetTurnaroundTime+0x128>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d906      	bls.n	80071c8 <USB_SetTurnaroundTime+0x6c>
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	4a32      	ldr	r2, [pc, #200]	; (8007288 <USB_SetTurnaroundTime+0x12c>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d802      	bhi.n	80071c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80071c2:	230c      	movs	r3, #12
 80071c4:	617b      	str	r3, [r7, #20]
 80071c6:	e041      	b.n	800724c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	4a2f      	ldr	r2, [pc, #188]	; (8007288 <USB_SetTurnaroundTime+0x12c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d906      	bls.n	80071de <USB_SetTurnaroundTime+0x82>
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	4a2e      	ldr	r2, [pc, #184]	; (800728c <USB_SetTurnaroundTime+0x130>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d802      	bhi.n	80071de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80071d8:	230b      	movs	r3, #11
 80071da:	617b      	str	r3, [r7, #20]
 80071dc:	e036      	b.n	800724c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	4a2a      	ldr	r2, [pc, #168]	; (800728c <USB_SetTurnaroundTime+0x130>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d906      	bls.n	80071f4 <USB_SetTurnaroundTime+0x98>
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	4a29      	ldr	r2, [pc, #164]	; (8007290 <USB_SetTurnaroundTime+0x134>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d802      	bhi.n	80071f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80071ee:	230a      	movs	r3, #10
 80071f0:	617b      	str	r3, [r7, #20]
 80071f2:	e02b      	b.n	800724c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	4a26      	ldr	r2, [pc, #152]	; (8007290 <USB_SetTurnaroundTime+0x134>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d906      	bls.n	800720a <USB_SetTurnaroundTime+0xae>
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	4a25      	ldr	r2, [pc, #148]	; (8007294 <USB_SetTurnaroundTime+0x138>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d802      	bhi.n	800720a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007204:	2309      	movs	r3, #9
 8007206:	617b      	str	r3, [r7, #20]
 8007208:	e020      	b.n	800724c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	4a21      	ldr	r2, [pc, #132]	; (8007294 <USB_SetTurnaroundTime+0x138>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d906      	bls.n	8007220 <USB_SetTurnaroundTime+0xc4>
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	4a20      	ldr	r2, [pc, #128]	; (8007298 <USB_SetTurnaroundTime+0x13c>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d802      	bhi.n	8007220 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800721a:	2308      	movs	r3, #8
 800721c:	617b      	str	r3, [r7, #20]
 800721e:	e015      	b.n	800724c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	4a1d      	ldr	r2, [pc, #116]	; (8007298 <USB_SetTurnaroundTime+0x13c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d906      	bls.n	8007236 <USB_SetTurnaroundTime+0xda>
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	4a1c      	ldr	r2, [pc, #112]	; (800729c <USB_SetTurnaroundTime+0x140>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d802      	bhi.n	8007236 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007230:	2307      	movs	r3, #7
 8007232:	617b      	str	r3, [r7, #20]
 8007234:	e00a      	b.n	800724c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007236:	2306      	movs	r3, #6
 8007238:	617b      	str	r3, [r7, #20]
 800723a:	e007      	b.n	800724c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800723c:	79fb      	ldrb	r3, [r7, #7]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d102      	bne.n	8007248 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007242:	2309      	movs	r3, #9
 8007244:	617b      	str	r3, [r7, #20]
 8007246:	e001      	b.n	800724c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007248:	2309      	movs	r3, #9
 800724a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	68da      	ldr	r2, [r3, #12]
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	029b      	lsls	r3, r3, #10
 8007260:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007264:	431a      	orrs	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	371c      	adds	r7, #28
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr
 8007278:	00d8acbf 	.word	0x00d8acbf
 800727c:	00e4e1bf 	.word	0x00e4e1bf
 8007280:	00f423ff 	.word	0x00f423ff
 8007284:	0106737f 	.word	0x0106737f
 8007288:	011a499f 	.word	0x011a499f
 800728c:	01312cff 	.word	0x01312cff
 8007290:	014ca43f 	.word	0x014ca43f
 8007294:	016e35ff 	.word	0x016e35ff
 8007298:	01a6ab1f 	.word	0x01a6ab1f
 800729c:	01e847ff 	.word	0x01e847ff

080072a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f043 0201 	orr.w	r2, r3, #1
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	370c      	adds	r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b083      	sub	sp, #12
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f023 0201 	bic.w	r2, r3, #1
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80072fc:	78fb      	ldrb	r3, [r7, #3]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d106      	bne.n	8007310 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	60da      	str	r2, [r3, #12]
 800730e:	e00b      	b.n	8007328 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d106      	bne.n	8007324 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	60da      	str	r2, [r3, #12]
 8007322:	e001      	b.n	8007328 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e003      	b.n	8007330 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007328:	2032      	movs	r0, #50	; 0x32
 800732a:	f7fa ffe7 	bl	80022fc <HAL_Delay>

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007338:	b084      	sub	sp, #16
 800733a:	b580      	push	{r7, lr}
 800733c:	b086      	sub	sp, #24
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007346:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007352:	2300      	movs	r3, #0
 8007354:	613b      	str	r3, [r7, #16]
 8007356:	e009      	b.n	800736c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	3340      	adds	r3, #64	; 0x40
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4413      	add	r3, r2
 8007362:	2200      	movs	r2, #0
 8007364:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	3301      	adds	r3, #1
 800736a:	613b      	str	r3, [r7, #16]
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	2b0e      	cmp	r3, #14
 8007370:	d9f2      	bls.n	8007358 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007374:	2b00      	cmp	r3, #0
 8007376:	d11c      	bne.n	80073b2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007386:	f043 0302 	orr.w	r3, r3, #2
 800738a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007390:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	639a      	str	r2, [r3, #56]	; 0x38
 80073b0:	e00b      	b.n	80073ca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073d0:	461a      	mov	r2, r3
 80073d2:	2300      	movs	r3, #0
 80073d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073dc:	4619      	mov	r1, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e4:	461a      	mov	r2, r3
 80073e6:	680b      	ldr	r3, [r1, #0]
 80073e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d10c      	bne.n	800740a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80073f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d104      	bne.n	8007400 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80073f6:	2100      	movs	r1, #0
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f949 	bl	8007690 <USB_SetDevSpeed>
 80073fe:	e008      	b.n	8007412 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007400:	2101      	movs	r1, #1
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f944 	bl	8007690 <USB_SetDevSpeed>
 8007408:	e003      	b.n	8007412 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800740a:	2103      	movs	r1, #3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f93f 	bl	8007690 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007412:	2110      	movs	r1, #16
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f8f3 	bl	8007600 <USB_FlushTxFifo>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f911 	bl	800764c <USB_FlushRxFifo>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d001      	beq.n	8007434 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800743a:	461a      	mov	r2, r3
 800743c:	2300      	movs	r3, #0
 800743e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007446:	461a      	mov	r2, r3
 8007448:	2300      	movs	r3, #0
 800744a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007452:	461a      	mov	r2, r3
 8007454:	2300      	movs	r3, #0
 8007456:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007458:	2300      	movs	r3, #0
 800745a:	613b      	str	r3, [r7, #16]
 800745c:	e043      	b.n	80074e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007470:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007474:	d118      	bne.n	80074a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10a      	bne.n	8007492 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4413      	add	r3, r2
 8007484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007488:	461a      	mov	r2, r3
 800748a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800748e:	6013      	str	r3, [r2, #0]
 8007490:	e013      	b.n	80074ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749e:	461a      	mov	r2, r3
 80074a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074a4:	6013      	str	r3, [r2, #0]
 80074a6:	e008      	b.n	80074ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b4:	461a      	mov	r2, r3
 80074b6:	2300      	movs	r3, #0
 80074b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	015a      	lsls	r2, r3, #5
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4413      	add	r3, r2
 80074c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c6:	461a      	mov	r2, r3
 80074c8:	2300      	movs	r3, #0
 80074ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d8:	461a      	mov	r2, r3
 80074da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	3301      	adds	r3, #1
 80074e4:	613b      	str	r3, [r7, #16]
 80074e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d3b7      	bcc.n	800745e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074ee:	2300      	movs	r3, #0
 80074f0:	613b      	str	r3, [r7, #16]
 80074f2:	e043      	b.n	800757c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800750a:	d118      	bne.n	800753e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10a      	bne.n	8007528 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	4413      	add	r3, r2
 800751a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751e:	461a      	mov	r2, r3
 8007520:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007524:	6013      	str	r3, [r2, #0]
 8007526:	e013      	b.n	8007550 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4413      	add	r3, r2
 8007530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007534:	461a      	mov	r2, r3
 8007536:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800753a:	6013      	str	r3, [r2, #0]
 800753c:	e008      	b.n	8007550 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800754a:	461a      	mov	r2, r3
 800754c:	2300      	movs	r3, #0
 800754e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4413      	add	r3, r2
 8007558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755c:	461a      	mov	r2, r3
 800755e:	2300      	movs	r3, #0
 8007560:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	4413      	add	r3, r2
 800756a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756e:	461a      	mov	r2, r3
 8007570:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007574:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	3301      	adds	r3, #1
 800757a:	613b      	str	r3, [r7, #16]
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	429a      	cmp	r2, r3
 8007582:	d3b7      	bcc.n	80074f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007592:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007596:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80075a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d105      	bne.n	80075b8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	f043 0210 	orr.w	r2, r3, #16
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	699a      	ldr	r2, [r3, #24]
 80075bc:	4b0f      	ldr	r3, [pc, #60]	; (80075fc <USB_DevInit+0x2c4>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80075c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d005      	beq.n	80075d6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	f043 0208 	orr.w	r2, r3, #8
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80075d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d107      	bne.n	80075ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075e4:	f043 0304 	orr.w	r3, r3, #4
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075f8:	b004      	add	sp, #16
 80075fa:	4770      	bx	lr
 80075fc:	803c3800 	.word	0x803c3800

08007600 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	019b      	lsls	r3, r3, #6
 8007612:	f043 0220 	orr.w	r2, r3, #32
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	3301      	adds	r3, #1
 800761e:	60fb      	str	r3, [r7, #12]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	4a09      	ldr	r2, [pc, #36]	; (8007648 <USB_FlushTxFifo+0x48>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d901      	bls.n	800762c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e006      	b.n	800763a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	f003 0320 	and.w	r3, r3, #32
 8007634:	2b20      	cmp	r3, #32
 8007636:	d0f0      	beq.n	800761a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	00030d40 	.word	0x00030d40

0800764c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007654:	2300      	movs	r3, #0
 8007656:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2210      	movs	r2, #16
 800765c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3301      	adds	r3, #1
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4a09      	ldr	r2, [pc, #36]	; (800768c <USB_FlushRxFifo+0x40>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d901      	bls.n	8007670 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e006      	b.n	800767e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	f003 0310 	and.w	r3, r3, #16
 8007678:	2b10      	cmp	r3, #16
 800767a:	d0f0      	beq.n	800765e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	00030d40 	.word	0x00030d40

08007690 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	460b      	mov	r3, r1
 800769a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	78fb      	ldrb	r3, [r7, #3]
 80076aa:	68f9      	ldr	r1, [r7, #12]
 80076ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076b0:	4313      	orrs	r3, r2
 80076b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b087      	sub	sp, #28
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f003 0306 	and.w	r3, r3, #6
 80076da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d102      	bne.n	80076e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80076e2:	2300      	movs	r3, #0
 80076e4:	75fb      	strb	r3, [r7, #23]
 80076e6:	e00a      	b.n	80076fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d002      	beq.n	80076f4 <USB_GetDevSpeed+0x32>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2b06      	cmp	r3, #6
 80076f2:	d102      	bne.n	80076fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80076f4:	2302      	movs	r3, #2
 80076f6:	75fb      	strb	r3, [r7, #23]
 80076f8:	e001      	b.n	80076fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80076fa:	230f      	movs	r3, #15
 80076fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80076fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007700:	4618      	mov	r0, r3
 8007702:	371c      	adds	r7, #28
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	785b      	ldrb	r3, [r3, #1]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d13a      	bne.n	800779e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800772e:	69da      	ldr	r2, [r3, #28]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	f003 030f 	and.w	r3, r3, #15
 8007738:	2101      	movs	r1, #1
 800773a:	fa01 f303 	lsl.w	r3, r1, r3
 800773e:	b29b      	uxth	r3, r3
 8007740:	68f9      	ldr	r1, [r7, #12]
 8007742:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007746:	4313      	orrs	r3, r2
 8007748:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4413      	add	r3, r2
 8007752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d155      	bne.n	800780c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	78db      	ldrb	r3, [r3, #3]
 800777a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800777c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	059b      	lsls	r3, r3, #22
 8007782:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007784:	4313      	orrs	r3, r2
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	0151      	lsls	r1, r2, #5
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	440a      	add	r2, r1
 800778e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800779a:	6013      	str	r3, [r2, #0]
 800779c:	e036      	b.n	800780c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a4:	69da      	ldr	r2, [r3, #28]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	f003 030f 	and.w	r3, r3, #15
 80077ae:	2101      	movs	r1, #1
 80077b0:	fa01 f303 	lsl.w	r3, r1, r3
 80077b4:	041b      	lsls	r3, r3, #16
 80077b6:	68f9      	ldr	r1, [r7, #12]
 80077b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077bc:	4313      	orrs	r3, r2
 80077be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d11a      	bne.n	800780c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	015a      	lsls	r2, r3, #5
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	4413      	add	r3, r2
 80077de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	78db      	ldrb	r3, [r3, #3]
 80077f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80077f2:	430b      	orrs	r3, r1
 80077f4:	4313      	orrs	r3, r2
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	0151      	lsls	r1, r2, #5
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	440a      	add	r2, r1
 80077fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800780a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
	...

0800781c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	785b      	ldrb	r3, [r3, #1]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d161      	bne.n	80078fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	4413      	add	r3, r2
 8007840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800784a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800784e:	d11f      	bne.n	8007890 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	0151      	lsls	r1, r2, #5
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	440a      	add	r2, r1
 8007866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800786a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800786e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4413      	add	r3, r2
 8007878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	0151      	lsls	r1, r2, #5
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	440a      	add	r2, r1
 8007886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800788a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800788e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	f003 030f 	and.w	r3, r3, #15
 80078a0:	2101      	movs	r1, #1
 80078a2:	fa01 f303 	lsl.w	r3, r1, r3
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	43db      	mvns	r3, r3
 80078aa:	68f9      	ldr	r1, [r7, #12]
 80078ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078b0:	4013      	ands	r3, r2
 80078b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ba:	69da      	ldr	r2, [r3, #28]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	f003 030f 	and.w	r3, r3, #15
 80078c4:	2101      	movs	r1, #1
 80078c6:	fa01 f303 	lsl.w	r3, r1, r3
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	43db      	mvns	r3, r3
 80078ce:	68f9      	ldr	r1, [r7, #12]
 80078d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078d4:	4013      	ands	r3, r2
 80078d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	0159      	lsls	r1, r3, #5
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	440b      	add	r3, r1
 80078ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f2:	4619      	mov	r1, r3
 80078f4:	4b35      	ldr	r3, [pc, #212]	; (80079cc <USB_DeactivateEndpoint+0x1b0>)
 80078f6:	4013      	ands	r3, r2
 80078f8:	600b      	str	r3, [r1, #0]
 80078fa:	e060      	b.n	80079be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	4413      	add	r3, r2
 8007904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800790e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007912:	d11f      	bne.n	8007954 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4413      	add	r3, r2
 800791c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	0151      	lsls	r1, r2, #5
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	440a      	add	r2, r1
 800792a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800792e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007932:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	0151      	lsls	r1, r2, #5
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	440a      	add	r2, r1
 800794a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800794e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007952:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800795a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	f003 030f 	and.w	r3, r3, #15
 8007964:	2101      	movs	r1, #1
 8007966:	fa01 f303 	lsl.w	r3, r1, r3
 800796a:	041b      	lsls	r3, r3, #16
 800796c:	43db      	mvns	r3, r3
 800796e:	68f9      	ldr	r1, [r7, #12]
 8007970:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007974:	4013      	ands	r3, r2
 8007976:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800797e:	69da      	ldr	r2, [r3, #28]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	f003 030f 	and.w	r3, r3, #15
 8007988:	2101      	movs	r1, #1
 800798a:	fa01 f303 	lsl.w	r3, r1, r3
 800798e:	041b      	lsls	r3, r3, #16
 8007990:	43db      	mvns	r3, r3
 8007992:	68f9      	ldr	r1, [r7, #12]
 8007994:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007998:	4013      	ands	r3, r2
 800799a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	0159      	lsls	r1, r3, #5
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	440b      	add	r3, r1
 80079b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b6:	4619      	mov	r1, r3
 80079b8:	4b05      	ldr	r3, [pc, #20]	; (80079d0 <USB_DeactivateEndpoint+0x1b4>)
 80079ba:	4013      	ands	r3, r2
 80079bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	ec337800 	.word	0xec337800
 80079d0:	eff37800 	.word	0xeff37800

080079d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08a      	sub	sp, #40	; 0x28
 80079d8:	af02      	add	r7, sp, #8
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	4613      	mov	r3, r2
 80079e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	785b      	ldrb	r3, [r3, #1]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	f040 815c 	bne.w	8007cae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d132      	bne.n	8007a64 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	0151      	lsls	r1, r2, #5
 8007a10:	69fa      	ldr	r2, [r7, #28]
 8007a12:	440a      	add	r2, r1
 8007a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	0151      	lsls	r1, r2, #5
 8007a34:	69fa      	ldr	r2, [r7, #28]
 8007a36:	440a      	add	r2, r1
 8007a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	015a      	lsls	r2, r3, #5
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	4413      	add	r3, r2
 8007a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	69ba      	ldr	r2, [r7, #24]
 8007a52:	0151      	lsls	r1, r2, #5
 8007a54:	69fa      	ldr	r2, [r7, #28]
 8007a56:	440a      	add	r2, r1
 8007a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a5c:	0cdb      	lsrs	r3, r3, #19
 8007a5e:	04db      	lsls	r3, r3, #19
 8007a60:	6113      	str	r3, [r2, #16]
 8007a62:	e074      	b.n	8007b4e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	69ba      	ldr	r2, [r7, #24]
 8007a74:	0151      	lsls	r1, r2, #5
 8007a76:	69fa      	ldr	r2, [r7, #28]
 8007a78:	440a      	add	r2, r1
 8007a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a7e:	0cdb      	lsrs	r3, r3, #19
 8007a80:	04db      	lsls	r3, r3, #19
 8007a82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	0151      	lsls	r1, r2, #5
 8007a96:	69fa      	ldr	r2, [r7, #28]
 8007a98:	440a      	add	r2, r1
 8007a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007aa2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007aa6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab4:	691a      	ldr	r2, [r3, #16]
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	6959      	ldr	r1, [r3, #20]
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	440b      	add	r3, r1
 8007ac0:	1e59      	subs	r1, r3, #1
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	fbb1 f3f3 	udiv	r3, r1, r3
 8007aca:	04d9      	lsls	r1, r3, #19
 8007acc:	4b9d      	ldr	r3, [pc, #628]	; (8007d44 <USB_EPStartXfer+0x370>)
 8007ace:	400b      	ands	r3, r1
 8007ad0:	69b9      	ldr	r1, [r7, #24]
 8007ad2:	0148      	lsls	r0, r1, #5
 8007ad4:	69f9      	ldr	r1, [r7, #28]
 8007ad6:	4401      	add	r1, r0
 8007ad8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007adc:	4313      	orrs	r3, r2
 8007ade:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aec:	691a      	ldr	r2, [r3, #16]
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007af6:	69b9      	ldr	r1, [r7, #24]
 8007af8:	0148      	lsls	r0, r1, #5
 8007afa:	69f9      	ldr	r1, [r7, #28]
 8007afc:	4401      	add	r1, r0
 8007afe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b02:	4313      	orrs	r3, r2
 8007b04:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	78db      	ldrb	r3, [r3, #3]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d11f      	bne.n	8007b4e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	015a      	lsls	r2, r3, #5
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	0151      	lsls	r1, r2, #5
 8007b20:	69fa      	ldr	r2, [r7, #28]
 8007b22:	440a      	add	r2, r1
 8007b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b28:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007b2c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	015a      	lsls	r2, r3, #5
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	4413      	add	r3, r2
 8007b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	69ba      	ldr	r2, [r7, #24]
 8007b3e:	0151      	lsls	r1, r2, #5
 8007b40:	69fa      	ldr	r2, [r7, #28]
 8007b42:	440a      	add	r2, r1
 8007b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b4c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d14b      	bne.n	8007bec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d009      	beq.n	8007b70 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b68:	461a      	mov	r2, r3
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	78db      	ldrb	r3, [r3, #3]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d128      	bne.n	8007bca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d110      	bne.n	8007baa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	69ba      	ldr	r2, [r7, #24]
 8007b98:	0151      	lsls	r1, r2, #5
 8007b9a:	69fa      	ldr	r2, [r7, #28]
 8007b9c:	440a      	add	r2, r1
 8007b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ba2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ba6:	6013      	str	r3, [r2, #0]
 8007ba8:	e00f      	b.n	8007bca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	015a      	lsls	r2, r3, #5
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	0151      	lsls	r1, r2, #5
 8007bbc:	69fa      	ldr	r2, [r7, #28]
 8007bbe:	440a      	add	r2, r1
 8007bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bc8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	69ba      	ldr	r2, [r7, #24]
 8007bda:	0151      	lsls	r1, r2, #5
 8007bdc:	69fa      	ldr	r2, [r7, #28]
 8007bde:	440a      	add	r2, r1
 8007be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007be4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	e12f      	b.n	8007e4c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	0151      	lsls	r1, r2, #5
 8007bfe:	69fa      	ldr	r2, [r7, #28]
 8007c00:	440a      	add	r2, r1
 8007c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c0a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	78db      	ldrb	r3, [r3, #3]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d015      	beq.n	8007c40 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	695b      	ldr	r3, [r3, #20]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 8117 	beq.w	8007e4c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	f003 030f 	and.w	r3, r3, #15
 8007c2e:	2101      	movs	r1, #1
 8007c30:	fa01 f303 	lsl.w	r3, r1, r3
 8007c34:	69f9      	ldr	r1, [r7, #28]
 8007c36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	634b      	str	r3, [r1, #52]	; 0x34
 8007c3e:	e105      	b.n	8007e4c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d110      	bne.n	8007c72 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	015a      	lsls	r2, r3, #5
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	0151      	lsls	r1, r2, #5
 8007c62:	69fa      	ldr	r2, [r7, #28]
 8007c64:	440a      	add	r2, r1
 8007c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c6e:	6013      	str	r3, [r2, #0]
 8007c70:	e00f      	b.n	8007c92 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	0151      	lsls	r1, r2, #5
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	440a      	add	r2, r1
 8007c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c90:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	68d9      	ldr	r1, [r3, #12]
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	781a      	ldrb	r2, [r3, #0]
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	b298      	uxth	r0, r3
 8007ca0:	79fb      	ldrb	r3, [r7, #7]
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 fa2b 	bl	8008102 <USB_WritePacket>
 8007cac:	e0ce      	b.n	8007e4c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	015a      	lsls	r2, r3, #5
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	0151      	lsls	r1, r2, #5
 8007cc0:	69fa      	ldr	r2, [r7, #28]
 8007cc2:	440a      	add	r2, r1
 8007cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cc8:	0cdb      	lsrs	r3, r3, #19
 8007cca:	04db      	lsls	r3, r3, #19
 8007ccc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	015a      	lsls	r2, r3, #5
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	0151      	lsls	r1, r2, #5
 8007ce0:	69fa      	ldr	r2, [r7, #28]
 8007ce2:	440a      	add	r2, r1
 8007ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ce8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007cec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007cf0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d126      	bne.n	8007d48 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d06:	691a      	ldr	r2, [r3, #16]
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d10:	69b9      	ldr	r1, [r7, #24]
 8007d12:	0148      	lsls	r0, r1, #5
 8007d14:	69f9      	ldr	r1, [r7, #28]
 8007d16:	4401      	add	r1, r0
 8007d18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	69ba      	ldr	r2, [r7, #24]
 8007d30:	0151      	lsls	r1, r2, #5
 8007d32:	69fa      	ldr	r2, [r7, #28]
 8007d34:	440a      	add	r2, r1
 8007d36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d3e:	6113      	str	r3, [r2, #16]
 8007d40:	e036      	b.n	8007db0 <USB_EPStartXfer+0x3dc>
 8007d42:	bf00      	nop
 8007d44:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	695a      	ldr	r2, [r3, #20]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	4413      	add	r3, r2
 8007d52:	1e5a      	subs	r2, r3, #1
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d5c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6a:	691a      	ldr	r2, [r3, #16]
 8007d6c:	8afb      	ldrh	r3, [r7, #22]
 8007d6e:	04d9      	lsls	r1, r3, #19
 8007d70:	4b39      	ldr	r3, [pc, #228]	; (8007e58 <USB_EPStartXfer+0x484>)
 8007d72:	400b      	ands	r3, r1
 8007d74:	69b9      	ldr	r1, [r7, #24]
 8007d76:	0148      	lsls	r0, r1, #5
 8007d78:	69f9      	ldr	r1, [r7, #28]
 8007d7a:	4401      	add	r1, r0
 8007d7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d80:	4313      	orrs	r3, r2
 8007d82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d90:	691a      	ldr	r2, [r3, #16]
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	8af9      	ldrh	r1, [r7, #22]
 8007d98:	fb01 f303 	mul.w	r3, r1, r3
 8007d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007da0:	69b9      	ldr	r1, [r7, #24]
 8007da2:	0148      	lsls	r0, r1, #5
 8007da4:	69f9      	ldr	r1, [r7, #28]
 8007da6:	4401      	add	r1, r0
 8007da8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007dac:	4313      	orrs	r3, r2
 8007dae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007db0:	79fb      	ldrb	r3, [r7, #7]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d10d      	bne.n	8007dd2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d009      	beq.n	8007dd2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	68d9      	ldr	r1, [r3, #12]
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	015a      	lsls	r2, r3, #5
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	4413      	add	r3, r2
 8007dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dce:	460a      	mov	r2, r1
 8007dd0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	78db      	ldrb	r3, [r3, #3]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d128      	bne.n	8007e2c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d110      	bne.n	8007e0c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	015a      	lsls	r2, r3, #5
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	69ba      	ldr	r2, [r7, #24]
 8007dfa:	0151      	lsls	r1, r2, #5
 8007dfc:	69fa      	ldr	r2, [r7, #28]
 8007dfe:	440a      	add	r2, r1
 8007e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e08:	6013      	str	r3, [r2, #0]
 8007e0a:	e00f      	b.n	8007e2c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	69ba      	ldr	r2, [r7, #24]
 8007e1c:	0151      	lsls	r1, r2, #5
 8007e1e:	69fa      	ldr	r2, [r7, #28]
 8007e20:	440a      	add	r2, r1
 8007e22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e2a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	015a      	lsls	r2, r3, #5
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	0151      	lsls	r1, r2, #5
 8007e3e:	69fa      	ldr	r2, [r7, #28]
 8007e40:	440a      	add	r2, r1
 8007e42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3720      	adds	r7, #32
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	1ff80000 	.word	0x1ff80000

08007e5c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b087      	sub	sp, #28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	4613      	mov	r3, r2
 8007e68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	785b      	ldrb	r3, [r3, #1]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	f040 80cd 	bne.w	8008018 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d132      	bne.n	8007eec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	0151      	lsls	r1, r2, #5
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	440a      	add	r2, r1
 8007e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ea0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ea4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ea8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	015a      	lsls	r2, r3, #5
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	0151      	lsls	r1, r2, #5
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	440a      	add	r2, r1
 8007ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ec4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ec8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	015a      	lsls	r2, r3, #5
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	0151      	lsls	r1, r2, #5
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	440a      	add	r2, r1
 8007ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ee4:	0cdb      	lsrs	r3, r3, #19
 8007ee6:	04db      	lsls	r3, r3, #19
 8007ee8:	6113      	str	r3, [r2, #16]
 8007eea:	e04e      	b.n	8007f8a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	0151      	lsls	r1, r2, #5
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	440a      	add	r2, r1
 8007f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f06:	0cdb      	lsrs	r3, r3, #19
 8007f08:	04db      	lsls	r3, r3, #19
 8007f0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	015a      	lsls	r2, r3, #5
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	0151      	lsls	r1, r2, #5
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	440a      	add	r2, r1
 8007f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f2e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	695a      	ldr	r2, [r3, #20]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d903      	bls.n	8007f44 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	689a      	ldr	r2, [r3, #8]
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	015a      	lsls	r2, r3, #5
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	0151      	lsls	r1, r2, #5
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	440a      	add	r2, r1
 8007f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f70:	691a      	ldr	r2, [r3, #16]
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f7a:	6939      	ldr	r1, [r7, #16]
 8007f7c:	0148      	lsls	r0, r1, #5
 8007f7e:	6979      	ldr	r1, [r7, #20]
 8007f80:	4401      	add	r1, r0
 8007f82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f86:	4313      	orrs	r3, r2
 8007f88:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f8a:	79fb      	ldrb	r3, [r7, #7]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d11e      	bne.n	8007fce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d009      	beq.n	8007fac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	015a      	lsls	r2, r3, #5
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	0151      	lsls	r1, r2, #5
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	440a      	add	r2, r1
 8007fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007fca:	6013      	str	r3, [r2, #0]
 8007fcc:	e092      	b.n	80080f4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	0151      	lsls	r1, r2, #5
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	440a      	add	r2, r1
 8007fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fe8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007fec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d07e      	beq.n	80080f4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	f003 030f 	and.w	r3, r3, #15
 8008006:	2101      	movs	r1, #1
 8008008:	fa01 f303 	lsl.w	r3, r1, r3
 800800c:	6979      	ldr	r1, [r7, #20]
 800800e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008012:	4313      	orrs	r3, r2
 8008014:	634b      	str	r3, [r1, #52]	; 0x34
 8008016:	e06d      	b.n	80080f4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	440a      	add	r2, r1
 800802e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008032:	0cdb      	lsrs	r3, r3, #19
 8008034:	04db      	lsls	r3, r3, #19
 8008036:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	4413      	add	r3, r2
 8008040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	0151      	lsls	r1, r2, #5
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	440a      	add	r2, r1
 800804e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008052:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008056:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800805a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d003      	beq.n	800806c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	689a      	ldr	r2, [r3, #8]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	015a      	lsls	r2, r3, #5
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	4413      	add	r3, r2
 8008074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	0151      	lsls	r1, r2, #5
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	440a      	add	r2, r1
 8008082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008086:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800808a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	015a      	lsls	r2, r3, #5
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	4413      	add	r3, r2
 8008094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008098:	691a      	ldr	r2, [r3, #16]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080a2:	6939      	ldr	r1, [r7, #16]
 80080a4:	0148      	lsls	r0, r1, #5
 80080a6:	6979      	ldr	r1, [r7, #20]
 80080a8:	4401      	add	r1, r0
 80080aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80080ae:	4313      	orrs	r3, r2
 80080b0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d10d      	bne.n	80080d4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d009      	beq.n	80080d4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	68d9      	ldr	r1, [r3, #12]
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d0:	460a      	mov	r2, r1
 80080d2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	4413      	add	r3, r2
 80080dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	0151      	lsls	r1, r2, #5
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	440a      	add	r2, r1
 80080ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	371c      	adds	r7, #28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008102:	b480      	push	{r7}
 8008104:	b089      	sub	sp, #36	; 0x24
 8008106:	af00      	add	r7, sp, #0
 8008108:	60f8      	str	r0, [r7, #12]
 800810a:	60b9      	str	r1, [r7, #8]
 800810c:	4611      	mov	r1, r2
 800810e:	461a      	mov	r2, r3
 8008110:	460b      	mov	r3, r1
 8008112:	71fb      	strb	r3, [r7, #7]
 8008114:	4613      	mov	r3, r2
 8008116:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008120:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008124:	2b00      	cmp	r3, #0
 8008126:	d11a      	bne.n	800815e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008128:	88bb      	ldrh	r3, [r7, #4]
 800812a:	3303      	adds	r3, #3
 800812c:	089b      	lsrs	r3, r3, #2
 800812e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008130:	2300      	movs	r3, #0
 8008132:	61bb      	str	r3, [r7, #24]
 8008134:	e00f      	b.n	8008156 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008136:	79fb      	ldrb	r3, [r7, #7]
 8008138:	031a      	lsls	r2, r3, #12
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	4413      	add	r3, r2
 800813e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008142:	461a      	mov	r2, r3
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	6013      	str	r3, [r2, #0]
      pSrc++;
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	3304      	adds	r3, #4
 800814e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	3301      	adds	r3, #1
 8008154:	61bb      	str	r3, [r7, #24]
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	429a      	cmp	r2, r3
 800815c:	d3eb      	bcc.n	8008136 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3724      	adds	r7, #36	; 0x24
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800816c:	b480      	push	{r7}
 800816e:	b089      	sub	sp, #36	; 0x24
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	4613      	mov	r3, r2
 8008178:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008182:	88fb      	ldrh	r3, [r7, #6]
 8008184:	3303      	adds	r3, #3
 8008186:	089b      	lsrs	r3, r3, #2
 8008188:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800818a:	2300      	movs	r3, #0
 800818c:	61bb      	str	r3, [r7, #24]
 800818e:	e00b      	b.n	80081a8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	601a      	str	r2, [r3, #0]
    pDest++;
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	3304      	adds	r3, #4
 80081a0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	3301      	adds	r3, #1
 80081a6:	61bb      	str	r3, [r7, #24]
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d3ef      	bcc.n	8008190 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80081b0:	69fb      	ldr	r3, [r7, #28]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3724      	adds	r7, #36	; 0x24
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081be:	b480      	push	{r7}
 80081c0:	b085      	sub	sp, #20
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	785b      	ldrb	r3, [r3, #1]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d12c      	bne.n	8008234 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	db12      	blt.n	8008212 <USB_EPSetStall+0x54>
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00f      	beq.n	8008212 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	0151      	lsls	r1, r2, #5
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	440a      	add	r2, r1
 8008208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800820c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008210:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	015a      	lsls	r2, r3, #5
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	4413      	add	r3, r2
 800821a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	0151      	lsls	r1, r2, #5
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	440a      	add	r2, r1
 8008228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800822c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	e02b      	b.n	800828c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	015a      	lsls	r2, r3, #5
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4413      	add	r3, r2
 800823c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	db12      	blt.n	800826c <USB_EPSetStall+0xae>
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00f      	beq.n	800826c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	015a      	lsls	r2, r3, #5
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	4413      	add	r3, r2
 8008254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	0151      	lsls	r1, r2, #5
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	440a      	add	r2, r1
 8008262:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008266:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800826a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	0151      	lsls	r1, r2, #5
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	440a      	add	r2, r1
 8008282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008286:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800828a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800829a:	b480      	push	{r7}
 800829c:	b085      	sub	sp, #20
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	785b      	ldrb	r3, [r3, #1]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d128      	bne.n	8008308 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	015a      	lsls	r2, r3, #5
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	4413      	add	r3, r2
 80082be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	0151      	lsls	r1, r2, #5
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	440a      	add	r2, r1
 80082cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	78db      	ldrb	r3, [r3, #3]
 80082da:	2b03      	cmp	r3, #3
 80082dc:	d003      	beq.n	80082e6 <USB_EPClearStall+0x4c>
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	78db      	ldrb	r3, [r3, #3]
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d138      	bne.n	8008358 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	0151      	lsls	r1, r2, #5
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	440a      	add	r2, r1
 80082fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008304:	6013      	str	r3, [r2, #0]
 8008306:	e027      	b.n	8008358 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	4413      	add	r3, r2
 8008310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	0151      	lsls	r1, r2, #5
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	440a      	add	r2, r1
 800831e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008322:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008326:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	78db      	ldrb	r3, [r3, #3]
 800832c:	2b03      	cmp	r3, #3
 800832e:	d003      	beq.n	8008338 <USB_EPClearStall+0x9e>
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	78db      	ldrb	r3, [r3, #3]
 8008334:	2b02      	cmp	r3, #2
 8008336:	d10f      	bne.n	8008358 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	015a      	lsls	r2, r3, #5
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	4413      	add	r3, r2
 8008340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	0151      	lsls	r1, r2, #5
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	440a      	add	r2, r1
 800834e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008356:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008366:	b480      	push	{r7}
 8008368:	b085      	sub	sp, #20
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	460b      	mov	r3, r1
 8008370:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008384:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008388:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	78fb      	ldrb	r3, [r7, #3]
 8008394:	011b      	lsls	r3, r3, #4
 8008396:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800839a:	68f9      	ldr	r1, [r7, #12]
 800839c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083a0:	4313      	orrs	r3, r2
 80083a2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b084      	sub	sp, #16
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083cc:	f023 0302 	bic.w	r3, r3, #2
 80083d0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80083d2:	2003      	movs	r0, #3
 80083d4:	f7f9 ff92 	bl	80022fc <HAL_Delay>

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b084      	sub	sp, #16
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083fc:	f043 0302 	orr.w	r3, r3, #2
 8008400:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008402:	2003      	movs	r0, #3
 8008404:	f7f9 ff7a 	bl	80022fc <HAL_Delay>

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008412:	b480      	push	{r7}
 8008414:	b085      	sub	sp, #20
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	4013      	ands	r3, r2
 8008428:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800842a:	68fb      	ldr	r3, [r7, #12]
}
 800842c:	4618      	mov	r0, r3
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	4013      	ands	r3, r2
 800845a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	0c1b      	lsrs	r3, r3, #16
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008488:	69db      	ldr	r3, [r3, #28]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	4013      	ands	r3, r2
 800848e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	b29b      	uxth	r3, r3
}
 8008494:	4618      	mov	r0, r3
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	460b      	mov	r3, r1
 80084aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80084b0:	78fb      	ldrb	r3, [r7, #3]
 80084b2:	015a      	lsls	r2, r3, #5
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084c6:	695b      	ldr	r3, [r3, #20]
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	4013      	ands	r3, r2
 80084cc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084ce:	68bb      	ldr	r3, [r7, #8]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	460b      	mov	r3, r1
 80084e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	f003 030f 	and.w	r3, r3, #15
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	fa22 f303 	lsr.w	r3, r2, r3
 800850c:	01db      	lsls	r3, r3, #7
 800850e:	b2db      	uxtb	r3, r3
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	4313      	orrs	r3, r2
 8008514:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008516:	78fb      	ldrb	r3, [r7, #3]
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	4413      	add	r3, r2
 800851e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	4013      	ands	r3, r2
 8008528:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800852a:	68bb      	ldr	r3, [r7, #8]
}
 800852c:	4618      	mov	r0, r3
 800852e:	371c      	adds	r7, #28
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	695b      	ldr	r3, [r3, #20]
 8008544:	f003 0301 	and.w	r3, r3, #1
}
 8008548:	4618      	mov	r0, r3
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800856e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008572:	f023 0307 	bic.w	r3, r3, #7
 8008576:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800858a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3714      	adds	r7, #20
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
	...

0800859c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800859c:	b480      	push	{r7}
 800859e:	b087      	sub	sp, #28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	460b      	mov	r3, r1
 80085a6:	607a      	str	r2, [r7, #4]
 80085a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	333c      	adds	r3, #60	; 0x3c
 80085b2:	3304      	adds	r3, #4
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	4a26      	ldr	r2, [pc, #152]	; (8008654 <USB_EP0_OutStart+0xb8>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d90a      	bls.n	80085d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085d0:	d101      	bne.n	80085d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	e037      	b.n	8008646 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085dc:	461a      	mov	r2, r3
 80085de:	2300      	movs	r3, #0
 80085e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008604:	f043 0318 	orr.w	r3, r3, #24
 8008608:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008618:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800861c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800861e:	7afb      	ldrb	r3, [r7, #11]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d10f      	bne.n	8008644 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800862a:	461a      	mov	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800863e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008642:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	371c      	adds	r7, #28
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	4f54300a 	.word	0x4f54300a

08008658 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008660:	2300      	movs	r3, #0
 8008662:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	3301      	adds	r3, #1
 8008668:	60fb      	str	r3, [r7, #12]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	4a13      	ldr	r2, [pc, #76]	; (80086bc <USB_CoreReset+0x64>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d901      	bls.n	8008676 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e01b      	b.n	80086ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	daf2      	bge.n	8008664 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	f043 0201 	orr.w	r2, r3, #1
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3301      	adds	r3, #1
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4a09      	ldr	r2, [pc, #36]	; (80086bc <USB_CoreReset+0x64>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d901      	bls.n	80086a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e006      	b.n	80086ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d0f0      	beq.n	800868e <USB_CoreReset+0x36>

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	00030d40 	.word	0x00030d40

080086c0 <USBD_MIDI_Init>:
  // IN endpoint descriptor
  0x09, 0x05, MIDI_IN_EP, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x25, 0x01, 0x01, 0x03,
};

static uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	70fb      	strb	r3, [r7, #3]
  pInstance = pdev;
 80086cc:	4a0c      	ldr	r2, [pc, #48]	; (8008700 <USBD_MIDI_Init+0x40>)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6013      	str	r3, [r2, #0]
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 80086d2:	2340      	movs	r3, #64	; 0x40
 80086d4:	2202      	movs	r2, #2
 80086d6:	2181      	movs	r1, #129	; 0x81
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f001 fd88 	bl	800a1ee <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 80086de:	2340      	movs	r3, #64	; 0x40
 80086e0:	2202      	movs	r2, #2
 80086e2:	2101      	movs	r1, #1
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 fd82 	bl	800a1ee <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 80086ea:	2340      	movs	r3, #64	; 0x40
 80086ec:	4a05      	ldr	r2, [pc, #20]	; (8008704 <USBD_MIDI_Init+0x44>)
 80086ee:	2101      	movs	r1, #1
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f001 fe6b 	bl	800a3cc <USBD_LL_PrepareReceive>
  return 0;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	20000288 	.word	0x20000288
 8008704:	2000069c 	.word	0x2000069c

08008708 <USBD_MIDI_DeInit>:

static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	460b      	mov	r3, r1
 8008712:	70fb      	strb	r3, [r7, #3]
  pInstance = NULL;
 8008714:	4b07      	ldr	r3, [pc, #28]	; (8008734 <USBD_MIDI_DeInit+0x2c>)
 8008716:	2200      	movs	r2, #0
 8008718:	601a      	str	r2, [r3, #0]
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 800871a:	2181      	movs	r1, #129	; 0x81
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f001 fd8c 	bl	800a23a <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,MIDI_OUT_EP);
 8008722:	2101      	movs	r1, #1
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f001 fd88 	bl	800a23a <USBD_LL_CloseEP>
  return 0;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	20000288 	.word	0x20000288

08008738 <USBD_MIDI_DataIn>:

//midi data incoming to host
static uint8_t USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum){
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	460b      	mov	r3, r1
 8008742:	70fb      	strb	r3, [r7, #3]

  if (USB_Tx_State == 1){
 8008744:	4b06      	ldr	r3, [pc, #24]	; (8008760 <USBD_MIDI_DataIn+0x28>)
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d102      	bne.n	8008752 <USBD_MIDI_DataIn+0x1a>
    USB_Tx_State = 0;
 800874c:	4b04      	ldr	r3, [pc, #16]	; (8008760 <USBD_MIDI_DataIn+0x28>)
 800874e:	2200      	movs	r2, #0
 8008750:	701a      	strb	r2, [r3, #0]
  }

  return USBD_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr
 8008760:	20000298 	.word	0x20000298

08008764 <USBD_MIDI_DataOut>:

//midi data outcoming from host
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;

  USBD_MIDI_ItfTypeDef *pmidi;
  pmidi = (USBD_MIDI_ItfTypeDef *)(pdev->pUserData);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008776:	60fb      	str	r3, [r7, #12]

  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
 800877e:	78fa      	ldrb	r2, [r7, #3]
 8008780:	4613      	mov	r3, r2
 8008782:	00db      	lsls	r3, r3, #3
 8008784:	1a9b      	subs	r3, r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	440b      	add	r3, r1
 800878a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	817b      	strh	r3, [r7, #10]

  pmidi->pIf_MidiRx((uint8_t *)&USB_Rx_Buffer, USB_Rx_Cnt);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	897a      	ldrh	r2, [r7, #10]
 8008798:	4611      	mov	r1, r2
 800879a:	4806      	ldr	r0, [pc, #24]	; (80087b4 <USBD_MIDI_DataOut+0x50>)
 800879c:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 800879e:	2340      	movs	r3, #64	; 0x40
 80087a0:	4a04      	ldr	r2, [pc, #16]	; (80087b4 <USBD_MIDI_DataOut+0x50>)
 80087a2:	2101      	movs	r1, #1
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f001 fe11 	bl	800a3cc <USBD_LL_PrepareReceive>
  return USBD_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	2000069c 	.word	0x2000069c

080087b8 <USBD_MIDI_SendPacket>:

void USBD_MIDI_SendPacket (){
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if(USB_Tx_State != 1){
 80087be:	4b30      	ldr	r3, [pc, #192]	; (8008880 <USBD_MIDI_SendPacket+0xc8>)
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d059      	beq.n	800887a <USBD_MIDI_SendPacket+0xc2>
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE){
 80087c6:	4b2f      	ldr	r3, [pc, #188]	; (8008884 <USBD_MIDI_SendPacket+0xcc>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ce:	d102      	bne.n	80087d6 <USBD_MIDI_SendPacket+0x1e>
      APP_Rx_ptr_out = 0;
 80087d0:	4b2c      	ldr	r3, [pc, #176]	; (8008884 <USBD_MIDI_SendPacket+0xcc>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]
    }

    if(APP_Rx_ptr_out == APP_Rx_ptr_in){
 80087d6:	4b2b      	ldr	r3, [pc, #172]	; (8008884 <USBD_MIDI_SendPacket+0xcc>)
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	4b2b      	ldr	r3, [pc, #172]	; (8008888 <USBD_MIDI_SendPacket+0xd0>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d103      	bne.n	80087ea <USBD_MIDI_SendPacket+0x32>
      USB_Tx_State = 0;
 80087e2:	4b27      	ldr	r3, [pc, #156]	; (8008880 <USBD_MIDI_SendPacket+0xc8>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	701a      	strb	r2, [r3, #0]
      return;
 80087e8:	e047      	b.n	800887a <USBD_MIDI_SendPacket+0xc2>
    }

    if(APP_Rx_ptr_out > APP_Rx_ptr_in){
 80087ea:	4b26      	ldr	r3, [pc, #152]	; (8008884 <USBD_MIDI_SendPacket+0xcc>)
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	4b26      	ldr	r3, [pc, #152]	; (8008888 <USBD_MIDI_SendPacket+0xd0>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d906      	bls.n	8008804 <USBD_MIDI_SendPacket+0x4c>
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 80087f6:	4b23      	ldr	r3, [pc, #140]	; (8008884 <USBD_MIDI_SendPacket+0xcc>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80087fe:	4a23      	ldr	r2, [pc, #140]	; (800888c <USBD_MIDI_SendPacket+0xd4>)
 8008800:	6013      	str	r3, [r2, #0]
 8008802:	e006      	b.n	8008812 <USBD_MIDI_SendPacket+0x5a>
    }else{
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 8008804:	4b20      	ldr	r3, [pc, #128]	; (8008888 <USBD_MIDI_SendPacket+0xd0>)
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	4b1e      	ldr	r3, [pc, #120]	; (8008884 <USBD_MIDI_SendPacket+0xcc>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	4a1f      	ldr	r2, [pc, #124]	; (800888c <USBD_MIDI_SendPacket+0xd4>)
 8008810:	6013      	str	r3, [r2, #0]
    }

    if (APP_Rx_length > MIDI_DATA_IN_PACKET_SIZE){
 8008812:	4b1e      	ldr	r3, [pc, #120]	; (800888c <USBD_MIDI_SendPacket+0xd4>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2b40      	cmp	r3, #64	; 0x40
 8008818:	d90f      	bls.n	800883a <USBD_MIDI_SendPacket+0x82>
      USB_Tx_ptr = APP_Rx_ptr_out;
 800881a:	4b1a      	ldr	r3, [pc, #104]	; (8008884 <USBD_MIDI_SendPacket+0xcc>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = MIDI_DATA_IN_PACKET_SIZE;
 8008820:	2340      	movs	r3, #64	; 0x40
 8008822:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += MIDI_DATA_IN_PACKET_SIZE;
 8008824:	4b17      	ldr	r3, [pc, #92]	; (8008884 <USBD_MIDI_SendPacket+0xcc>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	3340      	adds	r3, #64	; 0x40
 800882a:	4a16      	ldr	r2, [pc, #88]	; (8008884 <USBD_MIDI_SendPacket+0xcc>)
 800882c:	6013      	str	r3, [r2, #0]
      APP_Rx_length -= MIDI_DATA_IN_PACKET_SIZE;
 800882e:	4b17      	ldr	r3, [pc, #92]	; (800888c <USBD_MIDI_SendPacket+0xd4>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	3b40      	subs	r3, #64	; 0x40
 8008834:	4a15      	ldr	r2, [pc, #84]	; (800888c <USBD_MIDI_SendPacket+0xd4>)
 8008836:	6013      	str	r3, [r2, #0]
 8008838:	e00f      	b.n	800885a <USBD_MIDI_SendPacket+0xa2>
    }else{
      USB_Tx_ptr = APP_Rx_ptr_out;
 800883a:	4b12      	ldr	r3, [pc, #72]	; (8008884 <USBD_MIDI_SendPacket+0xcc>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = APP_Rx_length;
 8008840:	4b12      	ldr	r3, [pc, #72]	; (800888c <USBD_MIDI_SendPacket+0xd4>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += APP_Rx_length;
 8008846:	4b0f      	ldr	r3, [pc, #60]	; (8008884 <USBD_MIDI_SendPacket+0xcc>)
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	4b10      	ldr	r3, [pc, #64]	; (800888c <USBD_MIDI_SendPacket+0xd4>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4413      	add	r3, r2
 8008850:	4a0c      	ldr	r2, [pc, #48]	; (8008884 <USBD_MIDI_SendPacket+0xcc>)
 8008852:	6013      	str	r3, [r2, #0]
      APP_Rx_length = 0;
 8008854:	4b0d      	ldr	r3, [pc, #52]	; (800888c <USBD_MIDI_SendPacket+0xd4>)
 8008856:	2200      	movs	r2, #0
 8008858:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1;
 800885a:	4b09      	ldr	r3, [pc, #36]	; (8008880 <USBD_MIDI_SendPacket+0xc8>)
 800885c:	2201      	movs	r2, #1
 800885e:	701a      	strb	r2, [r3, #0]
    while(USBD_LL_Transmit(pInstance,
 8008860:	bf00      	nop
 8008862:	4b0b      	ldr	r3, [pc, #44]	; (8008890 <USBD_MIDI_SendPacket+0xd8>)
 8008864:	6818      	ldr	r0, [r3, #0]
    		MIDI_IN_EP,(uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],USB_Tx_length) != USBD_OK);
 8008866:	88fb      	ldrh	r3, [r7, #6]
    while(USBD_LL_Transmit(pInstance,
 8008868:	4a0a      	ldr	r2, [pc, #40]	; (8008894 <USBD_MIDI_SendPacket+0xdc>)
 800886a:	441a      	add	r2, r3
 800886c:	88bb      	ldrh	r3, [r7, #4]
 800886e:	2181      	movs	r1, #129	; 0x81
 8008870:	f001 fd8b 	bl	800a38a <USBD_LL_Transmit>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1f3      	bne.n	8008862 <USBD_MIDI_SendPacket+0xaa>
  }
}
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	20000298 	.word	0x20000298
 8008884:	20000290 	.word	0x20000290
 8008888:	2000028c 	.word	0x2000028c
 800888c:	20000294 	.word	0x20000294
 8008890:	20000288 	.word	0x20000288
 8008894:	200006dc 	.word	0x200006dc

08008898 <USBD_MIDI_GetCfgDesc>:

static uint8_t *USBD_MIDI_GetCfgDesc (uint16_t *length){
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2265      	movs	r2, #101	; 0x65
 80088a4:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 80088a6:	4b03      	ldr	r3, [pc, #12]	; (80088b4 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr
 80088b4:	20000114 	.word	0x20000114

080088b8 <USBD_MIDI_RegisterInterface>:
//  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
//  return USBD_MIDI_DeviceQualifierDesc;
//}

uint8_t USBD_MIDI_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_MIDI_ItfTypeDef *fops)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  uint8_t ret = USBD_FAIL;
 80088c2:	2303      	movs	r3, #3
 80088c4:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL){
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d005      	beq.n	80088d8 <USBD_MIDI_RegisterInterface+0x20>
    pdev->pUserData= fops;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;    
 80088d4:	2300      	movs	r3, #0
 80088d6:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b086      	sub	sp, #24
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	4613      	mov	r3, r2
 80088f2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80088fa:	2303      	movs	r3, #3
 80088fc:	e025      	b.n	800894a <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008904:	2b00      	cmp	r3, #0
 8008906:	d003      	beq.n	8008910 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008916:	2b00      	cmp	r3, #0
 8008918:	d003      	beq.n	8008922 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d003      	beq.n	8008930 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	79fa      	ldrb	r2, [r7, #7]
 800893c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f001 fbee 	bl	800a120 <USBD_LL_Init>
 8008944:	4603      	mov	r3, r0
 8008946:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008948:	7dfb      	ldrb	r3, [r7, #23]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3718      	adds	r7, #24
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b084      	sub	sp, #16
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800895c:	2300      	movs	r3, #0
 800895e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008966:	2303      	movs	r3, #3
 8008968:	e010      	b.n	800898c <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	683a      	ldr	r2, [r7, #0]
 800896e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897a:	f107 020e 	add.w	r2, r7, #14
 800897e:	4610      	mov	r0, r2
 8008980:	4798      	blx	r3
 8008982:	4602      	mov	r2, r0
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
#endif /* USE_USB_FS */


  return USBD_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f001 fc0b 	bl	800a1b8 <USBD_LL_Start>
 80089a2:	4603      	mov	r3, r0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b084      	sub	sp, #16
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	460b      	mov	r3, r1
 80089cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80089ce:	2303      	movs	r3, #3
 80089d0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d009      	beq.n	80089f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	78fa      	ldrb	r2, [r7, #3]
 80089e6:	4611      	mov	r1, r2
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	4798      	blx	r3
 80089ec:	4603      	mov	r3, r0
 80089ee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b082      	sub	sp, #8
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
 8008a02:	460b      	mov	r3, r1
 8008a04:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d007      	beq.n	8008a20 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	78fa      	ldrb	r2, [r7, #3]
 8008a1a:	4611      	mov	r1, r2
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	4798      	blx	r3
  }

  return USBD_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b084      	sub	sp, #16
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f000 ff2b 	bl	8009898 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008a50:	461a      	mov	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a5e:	f003 031f 	and.w	r3, r3, #31
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d00e      	beq.n	8008a84 <USBD_LL_SetupStage+0x5a>
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d302      	bcc.n	8008a70 <USBD_LL_SetupStage+0x46>
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d014      	beq.n	8008a98 <USBD_LL_SetupStage+0x6e>
 8008a6e:	e01d      	b.n	8008aac <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a76:	4619      	mov	r1, r3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fa17 	bl	8008eac <USBD_StdDevReq>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	73fb      	strb	r3, [r7, #15]
      break;
 8008a82:	e020      	b.n	8008ac6 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fa7b 	bl	8008f88 <USBD_StdItfReq>
 8008a92:	4603      	mov	r3, r0
 8008a94:	73fb      	strb	r3, [r7, #15]
      break;
 8008a96:	e016      	b.n	8008ac6 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fab7 	bl	8009014 <USBD_StdEPReq>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8008aaa:	e00c      	b.n	8008ac6 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ab2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	4619      	mov	r1, r3
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f001 fbdc 	bl	800a278 <USBD_LL_StallEP>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ac4:	bf00      	nop
  }

  return ret;
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	607a      	str	r2, [r7, #4]
 8008adc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008ade:	7afb      	ldrb	r3, [r7, #11]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d137      	bne.n	8008b54 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008aea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d14a      	bne.n	8008b8c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	689a      	ldr	r2, [r3, #8]
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d913      	bls.n	8008b2a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	689a      	ldr	r2, [r3, #8]
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	1ad2      	subs	r2, r2, r3
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	68da      	ldr	r2, [r3, #12]
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	bf28      	it	cs
 8008b1c:	4613      	movcs	r3, r2
 8008b1e:	461a      	mov	r2, r3
 8008b20:	6879      	ldr	r1, [r7, #4]
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 ff8f 	bl	8009a46 <USBD_CtlContinueRx>
 8008b28:	e030      	b.n	8008b8c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00a      	beq.n	8008b4c <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008b3c:	2b03      	cmp	r3, #3
 8008b3e:	d105      	bne.n	8008b4c <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f000 ff8b 	bl	8009a68 <USBD_CtlSendStatus>
 8008b52:	e01b      	b.n	8008b8c <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d013      	beq.n	8008b88 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d10e      	bne.n	8008b88 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	7afa      	ldrb	r2, [r7, #11]
 8008b74:	4611      	mov	r1, r2
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	4798      	blx	r3
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008b7e:	7dfb      	ldrb	r3, [r7, #23]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d003      	beq.n	8008b8c <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008b84:	7dfb      	ldrb	r3, [r7, #23]
 8008b86:	e002      	b.n	8008b8e <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008b88:	2303      	movs	r3, #3
 8008b8a:	e000      	b.n	8008b8e <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b086      	sub	sp, #24
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	60f8      	str	r0, [r7, #12]
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	607a      	str	r2, [r7, #4]
 8008ba2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008ba4:	7afb      	ldrb	r3, [r7, #11]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d16a      	bne.n	8008c80 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	3314      	adds	r3, #20
 8008bae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d155      	bne.n	8008c66 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	689a      	ldr	r2, [r3, #8]
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d914      	bls.n	8008bf0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	689a      	ldr	r2, [r3, #8]
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	1ad2      	subs	r2, r2, r3
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	461a      	mov	r2, r3
 8008bda:	6879      	ldr	r1, [r7, #4]
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f000 ff21 	bl	8009a24 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008be2:	2300      	movs	r3, #0
 8008be4:	2200      	movs	r2, #0
 8008be6:	2100      	movs	r1, #0
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f001 fbef 	bl	800a3cc <USBD_LL_PrepareReceive>
 8008bee:	e03a      	b.n	8008c66 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	68da      	ldr	r2, [r3, #12]
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d11c      	bne.n	8008c36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	685a      	ldr	r2, [r3, #4]
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d316      	bcc.n	8008c36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d20f      	bcs.n	8008c36 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c16:	2200      	movs	r2, #0
 8008c18:	2100      	movs	r1, #0
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f000 ff02 	bl	8009a24 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c28:	2300      	movs	r3, #0
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f001 fbcc 	bl	800a3cc <USBD_LL_PrepareReceive>
 8008c34:	e017      	b.n	8008c66 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00a      	beq.n	8008c58 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d105      	bne.n	8008c58 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c58:	2180      	movs	r1, #128	; 0x80
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f001 fb0c 	bl	800a278 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f000 ff14 	bl	8009a8e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d123      	bne.n	8008cb8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f7ff fe9b 	bl	80089ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008c7e:	e01b      	b.n	8008cb8 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d013      	beq.n	8008cb4 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008c92:	2b03      	cmp	r3, #3
 8008c94:	d10e      	bne.n	8008cb4 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	7afa      	ldrb	r2, [r7, #11]
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	4798      	blx	r3
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008caa:	7dfb      	ldrb	r3, [r7, #23]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d003      	beq.n	8008cb8 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008cb0:	7dfb      	ldrb	r3, [r7, #23]
 8008cb2:	e002      	b.n	8008cba <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	e000      	b.n	8008cba <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3718      	adds	r7, #24
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b082      	sub	sp, #8
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d009      	beq.n	8008d06 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	6852      	ldr	r2, [r2, #4]
 8008cfe:	b2d2      	uxtb	r2, r2
 8008d00:	4611      	mov	r1, r2
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d06:	2340      	movs	r3, #64	; 0x40
 8008d08:	2200      	movs	r2, #0
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f001 fa6e 	bl	800a1ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2201      	movs	r2, #1
 8008d16:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2240      	movs	r2, #64	; 0x40
 8008d1e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d22:	2340      	movs	r3, #64	; 0x40
 8008d24:	2200      	movs	r2, #0
 8008d26:	2180      	movs	r1, #128	; 0x80
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f001 fa60 	bl	800a1ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2240      	movs	r2, #64	; 0x40
 8008d38:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3708      	adds	r7, #8
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	78fa      	ldrb	r2, [r7, #3]
 8008d54:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2204      	movs	r2, #4
 8008d7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b083      	sub	sp, #12
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d9c:	2b04      	cmp	r3, #4
 8008d9e:	d105      	bne.n	8008dac <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b082      	sub	sp, #8
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc8:	2b03      	cmp	r3, #3
 8008dca:	d10b      	bne.n	8008de4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd2:	69db      	ldr	r3, [r3, #28]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d005      	beq.n	8008de4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dde:	69db      	ldr	r3, [r3, #28]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008dee:	b480      	push	{r7}
 8008df0:	b083      	sub	sp, #12
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	460b      	mov	r3, r1
 8008df8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	460b      	mov	r3, r1
 8008e12:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr

08008e22 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008e22:	b480      	push	{r7}
 8008e24:	b083      	sub	sp, #12
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d009      	beq.n	8008e66 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	6852      	ldr	r2, [r2, #4]
 8008e5e:	b2d2      	uxtb	r2, r2
 8008e60:	4611      	mov	r1, r2
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	4798      	blx	r3
  }

  return USBD_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	3301      	adds	r3, #1
 8008e86:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008e8e:	8a3b      	ldrh	r3, [r7, #16]
 8008e90:	021b      	lsls	r3, r3, #8
 8008e92:	b21a      	sxth	r2, r3
 8008e94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	b21b      	sxth	r3, r3
 8008e9c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008e9e:	89fb      	ldrh	r3, [r7, #14]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	371c      	adds	r7, #28
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ec2:	2b20      	cmp	r3, #32
 8008ec4:	d004      	beq.n	8008ed0 <USBD_StdDevReq+0x24>
 8008ec6:	2b40      	cmp	r3, #64	; 0x40
 8008ec8:	d002      	beq.n	8008ed0 <USBD_StdDevReq+0x24>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00a      	beq.n	8008ee4 <USBD_StdDevReq+0x38>
 8008ece:	e050      	b.n	8008f72 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	4798      	blx	r3
 8008ede:	4603      	mov	r3, r0
 8008ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee2:	e04b      	b.n	8008f7c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	785b      	ldrb	r3, [r3, #1]
 8008ee8:	2b09      	cmp	r3, #9
 8008eea:	d83c      	bhi.n	8008f66 <USBD_StdDevReq+0xba>
 8008eec:	a201      	add	r2, pc, #4	; (adr r2, 8008ef4 <USBD_StdDevReq+0x48>)
 8008eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef2:	bf00      	nop
 8008ef4:	08008f49 	.word	0x08008f49
 8008ef8:	08008f5d 	.word	0x08008f5d
 8008efc:	08008f67 	.word	0x08008f67
 8008f00:	08008f53 	.word	0x08008f53
 8008f04:	08008f67 	.word	0x08008f67
 8008f08:	08008f27 	.word	0x08008f27
 8008f0c:	08008f1d 	.word	0x08008f1d
 8008f10:	08008f67 	.word	0x08008f67
 8008f14:	08008f3f 	.word	0x08008f3f
 8008f18:	08008f31 	.word	0x08008f31
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f9ce 	bl	80092c0 <USBD_GetDescriptor>
      break;
 8008f24:	e024      	b.n	8008f70 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008f26:	6839      	ldr	r1, [r7, #0]
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 fb33 	bl	8009594 <USBD_SetAddress>
      break;
 8008f2e:	e01f      	b.n	8008f70 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fb70 	bl	8009618 <USBD_SetConfig>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f3c:	e018      	b.n	8008f70 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008f3e:	6839      	ldr	r1, [r7, #0]
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fc0d 	bl	8009760 <USBD_GetConfig>
      break;
 8008f46:	e013      	b.n	8008f70 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fc3c 	bl	80097c8 <USBD_GetStatus>
      break;
 8008f50:	e00e      	b.n	8008f70 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fc6a 	bl	800982e <USBD_SetFeature>
      break;
 8008f5a:	e009      	b.n	8008f70 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fc79 	bl	8009856 <USBD_ClrFeature>
      break;
 8008f64:	e004      	b.n	8008f70 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fccf 	bl	800990c <USBD_CtlError>
      break;
 8008f6e:	bf00      	nop
    }
    break;
 8008f70:	e004      	b.n	8008f7c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008f72:	6839      	ldr	r1, [r7, #0]
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 fcc9 	bl	800990c <USBD_CtlError>
    break;
 8008f7a:	bf00      	nop
  }

  return ret;
 8008f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop

08008f88 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f9e:	2b20      	cmp	r3, #32
 8008fa0:	d003      	beq.n	8008faa <USBD_StdItfReq+0x22>
 8008fa2:	2b40      	cmp	r3, #64	; 0x40
 8008fa4:	d001      	beq.n	8008faa <USBD_StdItfReq+0x22>
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d12a      	bne.n	8009000 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d81d      	bhi.n	8008ff2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	889b      	ldrh	r3, [r3, #4]
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d813      	bhi.n	8008fe8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	4798      	blx	r3
 8008fce:	4603      	mov	r3, r0
 8008fd0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	88db      	ldrh	r3, [r3, #6]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d110      	bne.n	8008ffc <USBD_StdItfReq+0x74>
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10d      	bne.n	8008ffc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fd41 	bl	8009a68 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008fe6:	e009      	b.n	8008ffc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008fe8:	6839      	ldr	r1, [r7, #0]
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fc8e 	bl	800990c <USBD_CtlError>
      break;
 8008ff0:	e004      	b.n	8008ffc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 fc89 	bl	800990c <USBD_CtlError>
      break;
 8008ffa:	e000      	b.n	8008ffe <USBD_StdItfReq+0x76>
      break;
 8008ffc:	bf00      	nop
    }
    break;
 8008ffe:	e004      	b.n	800900a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8009000:	6839      	ldr	r1, [r7, #0]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 fc82 	bl	800990c <USBD_CtlError>
    break;
 8009008:	bf00      	nop
  }

  return ret;
 800900a:	7bfb      	ldrb	r3, [r7, #15]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	889b      	ldrh	r3, [r3, #4]
 8009026:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009030:	2b20      	cmp	r3, #32
 8009032:	d004      	beq.n	800903e <USBD_StdEPReq+0x2a>
 8009034:	2b40      	cmp	r3, #64	; 0x40
 8009036:	d002      	beq.n	800903e <USBD_StdEPReq+0x2a>
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00a      	beq.n	8009052 <USBD_StdEPReq+0x3e>
 800903c:	e135      	b.n	80092aa <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	4798      	blx	r3
 800904c:	4603      	mov	r3, r0
 800904e:	73fb      	strb	r3, [r7, #15]
    break;
 8009050:	e130      	b.n	80092b4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	785b      	ldrb	r3, [r3, #1]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d03e      	beq.n	80090d8 <USBD_StdEPReq+0xc4>
 800905a:	2b03      	cmp	r3, #3
 800905c:	d002      	beq.n	8009064 <USBD_StdEPReq+0x50>
 800905e:	2b00      	cmp	r3, #0
 8009060:	d077      	beq.n	8009152 <USBD_StdEPReq+0x13e>
 8009062:	e11c      	b.n	800929e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800906a:	2b02      	cmp	r3, #2
 800906c:	d002      	beq.n	8009074 <USBD_StdEPReq+0x60>
 800906e:	2b03      	cmp	r3, #3
 8009070:	d015      	beq.n	800909e <USBD_StdEPReq+0x8a>
 8009072:	e02b      	b.n	80090cc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009074:	7bbb      	ldrb	r3, [r7, #14]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00c      	beq.n	8009094 <USBD_StdEPReq+0x80>
 800907a:	7bbb      	ldrb	r3, [r7, #14]
 800907c:	2b80      	cmp	r3, #128	; 0x80
 800907e:	d009      	beq.n	8009094 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009080:	7bbb      	ldrb	r3, [r7, #14]
 8009082:	4619      	mov	r1, r3
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f001 f8f7 	bl	800a278 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800908a:	2180      	movs	r1, #128	; 0x80
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f001 f8f3 	bl	800a278 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009092:	e020      	b.n	80090d6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fc38 	bl	800990c <USBD_CtlError>
        break;
 800909c:	e01b      	b.n	80090d6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	885b      	ldrh	r3, [r3, #2]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10e      	bne.n	80090c4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80090a6:	7bbb      	ldrb	r3, [r7, #14]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00b      	beq.n	80090c4 <USBD_StdEPReq+0xb0>
 80090ac:	7bbb      	ldrb	r3, [r7, #14]
 80090ae:	2b80      	cmp	r3, #128	; 0x80
 80090b0:	d008      	beq.n	80090c4 <USBD_StdEPReq+0xb0>
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	88db      	ldrh	r3, [r3, #6]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d104      	bne.n	80090c4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
 80090bc:	4619      	mov	r1, r3
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f001 f8da 	bl	800a278 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fccf 	bl	8009a68 <USBD_CtlSendStatus>

        break;
 80090ca:	e004      	b.n	80090d6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fc1c 	bl	800990c <USBD_CtlError>
        break;
 80090d4:	bf00      	nop
      }
      break;
 80090d6:	e0e7      	b.n	80092a8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d002      	beq.n	80090e8 <USBD_StdEPReq+0xd4>
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d015      	beq.n	8009112 <USBD_StdEPReq+0xfe>
 80090e6:	e02d      	b.n	8009144 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090e8:	7bbb      	ldrb	r3, [r7, #14]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00c      	beq.n	8009108 <USBD_StdEPReq+0xf4>
 80090ee:	7bbb      	ldrb	r3, [r7, #14]
 80090f0:	2b80      	cmp	r3, #128	; 0x80
 80090f2:	d009      	beq.n	8009108 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80090f4:	7bbb      	ldrb	r3, [r7, #14]
 80090f6:	4619      	mov	r1, r3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f001 f8bd 	bl	800a278 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80090fe:	2180      	movs	r1, #128	; 0x80
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 f8b9 	bl	800a278 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009106:	e023      	b.n	8009150 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8009108:	6839      	ldr	r1, [r7, #0]
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fbfe 	bl	800990c <USBD_CtlError>
        break;
 8009110:	e01e      	b.n	8009150 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	885b      	ldrh	r3, [r3, #2]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d119      	bne.n	800914e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800911a:	7bbb      	ldrb	r3, [r7, #14]
 800911c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009120:	2b00      	cmp	r3, #0
 8009122:	d004      	beq.n	800912e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009124:	7bbb      	ldrb	r3, [r7, #14]
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f001 f8c4 	bl	800a2b6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fc9a 	bl	8009a68 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	4798      	blx	r3
        }
        break;
 8009142:	e004      	b.n	800914e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fbe0 	bl	800990c <USBD_CtlError>
        break;
 800914c:	e000      	b.n	8009150 <USBD_StdEPReq+0x13c>
        break;
 800914e:	bf00      	nop
      }
      break;
 8009150:	e0aa      	b.n	80092a8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009158:	2b02      	cmp	r3, #2
 800915a:	d002      	beq.n	8009162 <USBD_StdEPReq+0x14e>
 800915c:	2b03      	cmp	r3, #3
 800915e:	d032      	beq.n	80091c6 <USBD_StdEPReq+0x1b2>
 8009160:	e097      	b.n	8009292 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009162:	7bbb      	ldrb	r3, [r7, #14]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d007      	beq.n	8009178 <USBD_StdEPReq+0x164>
 8009168:	7bbb      	ldrb	r3, [r7, #14]
 800916a:	2b80      	cmp	r3, #128	; 0x80
 800916c:	d004      	beq.n	8009178 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800916e:	6839      	ldr	r1, [r7, #0]
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fbcb 	bl	800990c <USBD_CtlError>
          break;
 8009176:	e091      	b.n	800929c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800917c:	2b00      	cmp	r3, #0
 800917e:	da0b      	bge.n	8009198 <USBD_StdEPReq+0x184>
 8009180:	7bbb      	ldrb	r3, [r7, #14]
 8009182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009186:	4613      	mov	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	3310      	adds	r3, #16
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	4413      	add	r3, r2
 8009194:	3304      	adds	r3, #4
 8009196:	e00b      	b.n	80091b0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800919e:	4613      	mov	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	4413      	add	r3, r2
 80091ae:	3304      	adds	r3, #4
 80091b0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	2200      	movs	r2, #0
 80091b6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	2202      	movs	r2, #2
 80091bc:	4619      	mov	r1, r3
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fc15 	bl	80099ee <USBD_CtlSendData>
        break;
 80091c4:	e06a      	b.n	800929c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80091c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	da11      	bge.n	80091f2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	f003 020f 	and.w	r2, r3, #15
 80091d4:	6879      	ldr	r1, [r7, #4]
 80091d6:	4613      	mov	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4413      	add	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	440b      	add	r3, r1
 80091e0:	3324      	adds	r3, #36	; 0x24
 80091e2:	881b      	ldrh	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d117      	bne.n	8009218 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fb8e 	bl	800990c <USBD_CtlError>
            break;
 80091f0:	e054      	b.n	800929c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091f2:	7bbb      	ldrb	r3, [r7, #14]
 80091f4:	f003 020f 	and.w	r2, r3, #15
 80091f8:	6879      	ldr	r1, [r7, #4]
 80091fa:	4613      	mov	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	4413      	add	r3, r2
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	440b      	add	r3, r1
 8009204:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009208:	881b      	ldrh	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d104      	bne.n	8009218 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fb7b 	bl	800990c <USBD_CtlError>
            break;
 8009216:	e041      	b.n	800929c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800921c:	2b00      	cmp	r3, #0
 800921e:	da0b      	bge.n	8009238 <USBD_StdEPReq+0x224>
 8009220:	7bbb      	ldrb	r3, [r7, #14]
 8009222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009226:	4613      	mov	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	3310      	adds	r3, #16
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	4413      	add	r3, r2
 8009234:	3304      	adds	r3, #4
 8009236:	e00b      	b.n	8009250 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009238:	7bbb      	ldrb	r3, [r7, #14]
 800923a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800923e:	4613      	mov	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4413      	add	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	4413      	add	r3, r2
 800924e:	3304      	adds	r3, #4
 8009250:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009252:	7bbb      	ldrb	r3, [r7, #14]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d002      	beq.n	800925e <USBD_StdEPReq+0x24a>
 8009258:	7bbb      	ldrb	r3, [r7, #14]
 800925a:	2b80      	cmp	r3, #128	; 0x80
 800925c:	d103      	bne.n	8009266 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	2200      	movs	r2, #0
 8009262:	601a      	str	r2, [r3, #0]
 8009264:	e00e      	b.n	8009284 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009266:	7bbb      	ldrb	r3, [r7, #14]
 8009268:	4619      	mov	r1, r3
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f001 f842 	bl	800a2f4 <USBD_LL_IsStallEP>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d003      	beq.n	800927e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	2201      	movs	r2, #1
 800927a:	601a      	str	r2, [r3, #0]
 800927c:	e002      	b.n	8009284 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	2200      	movs	r2, #0
 8009282:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	2202      	movs	r2, #2
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 fbaf 	bl	80099ee <USBD_CtlSendData>
          break;
 8009290:	e004      	b.n	800929c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fb39 	bl	800990c <USBD_CtlError>
        break;
 800929a:	bf00      	nop
      }
      break;
 800929c:	e004      	b.n	80092a8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800929e:	6839      	ldr	r1, [r7, #0]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fb33 	bl	800990c <USBD_CtlError>
      break;
 80092a6:	bf00      	nop
    }
    break;
 80092a8:	e004      	b.n	80092b4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fb2d 	bl	800990c <USBD_CtlError>
    break;
 80092b2:	bf00      	nop
  }

  return ret;
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
	...

080092c0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092ca:	2300      	movs	r3, #0
 80092cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80092ce:	2300      	movs	r3, #0
 80092d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80092d2:	2300      	movs	r3, #0
 80092d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	885b      	ldrh	r3, [r3, #2]
 80092da:	0a1b      	lsrs	r3, r3, #8
 80092dc:	b29b      	uxth	r3, r3
 80092de:	3b01      	subs	r3, #1
 80092e0:	2b06      	cmp	r3, #6
 80092e2:	f200 8128 	bhi.w	8009536 <USBD_GetDescriptor+0x276>
 80092e6:	a201      	add	r2, pc, #4	; (adr r2, 80092ec <USBD_GetDescriptor+0x2c>)
 80092e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ec:	08009309 	.word	0x08009309
 80092f0:	08009321 	.word	0x08009321
 80092f4:	08009361 	.word	0x08009361
 80092f8:	08009537 	.word	0x08009537
 80092fc:	08009537 	.word	0x08009537
 8009300:	080094d7 	.word	0x080094d7
 8009304:	08009503 	.word	0x08009503
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	7c12      	ldrb	r2, [r2, #16]
 8009314:	f107 0108 	add.w	r1, r7, #8
 8009318:	4610      	mov	r0, r2
 800931a:	4798      	blx	r3
 800931c:	60f8      	str	r0, [r7, #12]
    break;
 800931e:	e112      	b.n	8009546 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	7c1b      	ldrb	r3, [r3, #16]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10d      	bne.n	8009344 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800932e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009330:	f107 0208 	add.w	r2, r7, #8
 8009334:	4610      	mov	r0, r2
 8009336:	4798      	blx	r3
 8009338:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	3301      	adds	r3, #1
 800933e:	2202      	movs	r2, #2
 8009340:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009342:	e100      	b.n	8009546 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800934a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934c:	f107 0208 	add.w	r2, r7, #8
 8009350:	4610      	mov	r0, r2
 8009352:	4798      	blx	r3
 8009354:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	3301      	adds	r3, #1
 800935a:	2202      	movs	r2, #2
 800935c:	701a      	strb	r2, [r3, #0]
    break;
 800935e:	e0f2      	b.n	8009546 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	885b      	ldrh	r3, [r3, #2]
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b05      	cmp	r3, #5
 8009368:	f200 80ac 	bhi.w	80094c4 <USBD_GetDescriptor+0x204>
 800936c:	a201      	add	r2, pc, #4	; (adr r2, 8009374 <USBD_GetDescriptor+0xb4>)
 800936e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009372:	bf00      	nop
 8009374:	0800938d 	.word	0x0800938d
 8009378:	080093c1 	.word	0x080093c1
 800937c:	080093f5 	.word	0x080093f5
 8009380:	08009429 	.word	0x08009429
 8009384:	0800945d 	.word	0x0800945d
 8009388:	08009491 	.word	0x08009491
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00b      	beq.n	80093b0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	7c12      	ldrb	r2, [r2, #16]
 80093a4:	f107 0108 	add.w	r1, r7, #8
 80093a8:	4610      	mov	r0, r2
 80093aa:	4798      	blx	r3
 80093ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093ae:	e091      	b.n	80094d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80093b0:	6839      	ldr	r1, [r7, #0]
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 faaa 	bl	800990c <USBD_CtlError>
        err++;
 80093b8:	7afb      	ldrb	r3, [r7, #11]
 80093ba:	3301      	adds	r3, #1
 80093bc:	72fb      	strb	r3, [r7, #11]
      break;
 80093be:	e089      	b.n	80094d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00b      	beq.n	80093e4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	7c12      	ldrb	r2, [r2, #16]
 80093d8:	f107 0108 	add.w	r1, r7, #8
 80093dc:	4610      	mov	r0, r2
 80093de:	4798      	blx	r3
 80093e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093e2:	e077      	b.n	80094d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80093e4:	6839      	ldr	r1, [r7, #0]
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fa90 	bl	800990c <USBD_CtlError>
        err++;
 80093ec:	7afb      	ldrb	r3, [r7, #11]
 80093ee:	3301      	adds	r3, #1
 80093f0:	72fb      	strb	r3, [r7, #11]
      break;
 80093f2:	e06f      	b.n	80094d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00b      	beq.n	8009418 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	7c12      	ldrb	r2, [r2, #16]
 800940c:	f107 0108 	add.w	r1, r7, #8
 8009410:	4610      	mov	r0, r2
 8009412:	4798      	blx	r3
 8009414:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009416:	e05d      	b.n	80094d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fa76 	bl	800990c <USBD_CtlError>
        err++;
 8009420:	7afb      	ldrb	r3, [r7, #11]
 8009422:	3301      	adds	r3, #1
 8009424:	72fb      	strb	r3, [r7, #11]
      break;
 8009426:	e055      	b.n	80094d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00b      	beq.n	800944c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	7c12      	ldrb	r2, [r2, #16]
 8009440:	f107 0108 	add.w	r1, r7, #8
 8009444:	4610      	mov	r0, r2
 8009446:	4798      	blx	r3
 8009448:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800944a:	e043      	b.n	80094d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fa5c 	bl	800990c <USBD_CtlError>
        err++;
 8009454:	7afb      	ldrb	r3, [r7, #11]
 8009456:	3301      	adds	r3, #1
 8009458:	72fb      	strb	r3, [r7, #11]
      break;
 800945a:	e03b      	b.n	80094d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009462:	695b      	ldr	r3, [r3, #20]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00b      	beq.n	8009480 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800946e:	695b      	ldr	r3, [r3, #20]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	7c12      	ldrb	r2, [r2, #16]
 8009474:	f107 0108 	add.w	r1, r7, #8
 8009478:	4610      	mov	r0, r2
 800947a:	4798      	blx	r3
 800947c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800947e:	e029      	b.n	80094d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009480:	6839      	ldr	r1, [r7, #0]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fa42 	bl	800990c <USBD_CtlError>
        err++;
 8009488:	7afb      	ldrb	r3, [r7, #11]
 800948a:	3301      	adds	r3, #1
 800948c:	72fb      	strb	r3, [r7, #11]
      break;
 800948e:	e021      	b.n	80094d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00b      	beq.n	80094b4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	7c12      	ldrb	r2, [r2, #16]
 80094a8:	f107 0108 	add.w	r1, r7, #8
 80094ac:	4610      	mov	r0, r2
 80094ae:	4798      	blx	r3
 80094b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094b2:	e00f      	b.n	80094d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fa28 	bl	800990c <USBD_CtlError>
        err++;
 80094bc:	7afb      	ldrb	r3, [r7, #11]
 80094be:	3301      	adds	r3, #1
 80094c0:	72fb      	strb	r3, [r7, #11]
      break;
 80094c2:	e007      	b.n	80094d4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80094c4:	6839      	ldr	r1, [r7, #0]
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fa20 	bl	800990c <USBD_CtlError>
      err++;
 80094cc:	7afb      	ldrb	r3, [r7, #11]
 80094ce:	3301      	adds	r3, #1
 80094d0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80094d2:	bf00      	nop
    }
    break;
 80094d4:	e037      	b.n	8009546 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	7c1b      	ldrb	r3, [r3, #16]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d109      	bne.n	80094f2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e6:	f107 0208 	add.w	r2, r7, #8
 80094ea:	4610      	mov	r0, r2
 80094ec:	4798      	blx	r3
 80094ee:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80094f0:	e029      	b.n	8009546 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fa09 	bl	800990c <USBD_CtlError>
      err++;
 80094fa:	7afb      	ldrb	r3, [r7, #11]
 80094fc:	3301      	adds	r3, #1
 80094fe:	72fb      	strb	r3, [r7, #11]
    break;
 8009500:	e021      	b.n	8009546 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	7c1b      	ldrb	r3, [r3, #16]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10d      	bne.n	8009526 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009512:	f107 0208 	add.w	r2, r7, #8
 8009516:	4610      	mov	r0, r2
 8009518:	4798      	blx	r3
 800951a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	3301      	adds	r3, #1
 8009520:	2207      	movs	r2, #7
 8009522:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009524:	e00f      	b.n	8009546 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009526:	6839      	ldr	r1, [r7, #0]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 f9ef 	bl	800990c <USBD_CtlError>
      err++;
 800952e:	7afb      	ldrb	r3, [r7, #11]
 8009530:	3301      	adds	r3, #1
 8009532:	72fb      	strb	r3, [r7, #11]
    break;
 8009534:	e007      	b.n	8009546 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f9e7 	bl	800990c <USBD_CtlError>
    err++;
 800953e:	7afb      	ldrb	r3, [r7, #11]
 8009540:	3301      	adds	r3, #1
 8009542:	72fb      	strb	r3, [r7, #11]
    break;
 8009544:	bf00      	nop
  }

  if (err != 0U)
 8009546:	7afb      	ldrb	r3, [r7, #11]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d11e      	bne.n	800958a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	88db      	ldrh	r3, [r3, #6]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d016      	beq.n	8009582 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8009554:	893b      	ldrh	r3, [r7, #8]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00e      	beq.n	8009578 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	88da      	ldrh	r2, [r3, #6]
 800955e:	893b      	ldrh	r3, [r7, #8]
 8009560:	4293      	cmp	r3, r2
 8009562:	bf28      	it	cs
 8009564:	4613      	movcs	r3, r2
 8009566:	b29b      	uxth	r3, r3
 8009568:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800956a:	893b      	ldrh	r3, [r7, #8]
 800956c:	461a      	mov	r2, r3
 800956e:	68f9      	ldr	r1, [r7, #12]
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 fa3c 	bl	80099ee <USBD_CtlSendData>
 8009576:	e009      	b.n	800958c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f9c6 	bl	800990c <USBD_CtlError>
 8009580:	e004      	b.n	800958c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 fa70 	bl	8009a68 <USBD_CtlSendStatus>
 8009588:	e000      	b.n	800958c <USBD_GetDescriptor+0x2cc>
    return;
 800958a:	bf00      	nop
    }
  }
}
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop

08009594 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	889b      	ldrh	r3, [r3, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d130      	bne.n	8009608 <USBD_SetAddress+0x74>
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	88db      	ldrh	r3, [r3, #6]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d12c      	bne.n	8009608 <USBD_SetAddress+0x74>
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	885b      	ldrh	r3, [r3, #2]
 80095b2:	2b7f      	cmp	r3, #127	; 0x7f
 80095b4:	d828      	bhi.n	8009608 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	885b      	ldrh	r3, [r3, #2]
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	d104      	bne.n	80095d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f99c 	bl	800990c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095d4:	e01c      	b.n	8009610 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	7bfa      	ldrb	r2, [r7, #15]
 80095da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80095de:	7bfb      	ldrb	r3, [r7, #15]
 80095e0:	4619      	mov	r1, r3
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 feb2 	bl	800a34c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 fa3d 	bl	8009a68 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80095ee:	7bfb      	ldrb	r3, [r7, #15]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d004      	beq.n	80095fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2202      	movs	r2, #2
 80095f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095fc:	e008      	b.n	8009610 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009606:	e003      	b.n	8009610 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f97e 	bl	800990c <USBD_CtlError>
  }
}
 8009610:	bf00      	nop
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009622:	2300      	movs	r3, #0
 8009624:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	885b      	ldrh	r3, [r3, #2]
 800962a:	b2da      	uxtb	r2, r3
 800962c:	4b4b      	ldr	r3, [pc, #300]	; (800975c <USBD_SetConfig+0x144>)
 800962e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009630:	4b4a      	ldr	r3, [pc, #296]	; (800975c <USBD_SetConfig+0x144>)
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d905      	bls.n	8009644 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009638:	6839      	ldr	r1, [r7, #0]
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 f966 	bl	800990c <USBD_CtlError>
    return USBD_FAIL;
 8009640:	2303      	movs	r3, #3
 8009642:	e087      	b.n	8009754 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800964a:	2b02      	cmp	r3, #2
 800964c:	d002      	beq.n	8009654 <USBD_SetConfig+0x3c>
 800964e:	2b03      	cmp	r3, #3
 8009650:	d025      	beq.n	800969e <USBD_SetConfig+0x86>
 8009652:	e071      	b.n	8009738 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009654:	4b41      	ldr	r3, [pc, #260]	; (800975c <USBD_SetConfig+0x144>)
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d01c      	beq.n	8009696 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800965c:	4b3f      	ldr	r3, [pc, #252]	; (800975c <USBD_SetConfig+0x144>)
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	461a      	mov	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009666:	4b3d      	ldr	r3, [pc, #244]	; (800975c <USBD_SetConfig+0x144>)
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff f9a8 	bl	80089c2 <USBD_SetClassConfig>
 8009672:	4603      	mov	r3, r0
 8009674:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8009676:	7bfb      	ldrb	r3, [r7, #15]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d004      	beq.n	8009686 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f944 	bl	800990c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009684:	e065      	b.n	8009752 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f9ee 	bl	8009a68 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2203      	movs	r2, #3
 8009690:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009694:	e05d      	b.n	8009752 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f9e6 	bl	8009a68 <USBD_CtlSendStatus>
    break;
 800969c:	e059      	b.n	8009752 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800969e:	4b2f      	ldr	r3, [pc, #188]	; (800975c <USBD_SetConfig+0x144>)
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d112      	bne.n	80096cc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2202      	movs	r2, #2
 80096aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80096ae:	4b2b      	ldr	r3, [pc, #172]	; (800975c <USBD_SetConfig+0x144>)
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	461a      	mov	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80096b8:	4b28      	ldr	r3, [pc, #160]	; (800975c <USBD_SetConfig+0x144>)
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	4619      	mov	r1, r3
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7ff f99b 	bl	80089fa <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 f9cf 	bl	8009a68 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80096ca:	e042      	b.n	8009752 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80096cc:	4b23      	ldr	r3, [pc, #140]	; (800975c <USBD_SetConfig+0x144>)
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	461a      	mov	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d02a      	beq.n	8009730 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7ff f989 	bl	80089fa <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80096e8:	4b1c      	ldr	r3, [pc, #112]	; (800975c <USBD_SetConfig+0x144>)
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	461a      	mov	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80096f2:	4b1a      	ldr	r3, [pc, #104]	; (800975c <USBD_SetConfig+0x144>)
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	4619      	mov	r1, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f7ff f962 	bl	80089c2 <USBD_SetClassConfig>
 80096fe:	4603      	mov	r3, r0
 8009700:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009702:	7bfb      	ldrb	r3, [r7, #15]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00f      	beq.n	8009728 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 f8fe 	bl	800990c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	b2db      	uxtb	r3, r3
 8009716:	4619      	mov	r1, r3
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7ff f96e 	bl	80089fa <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2202      	movs	r2, #2
 8009722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009726:	e014      	b.n	8009752 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f99d 	bl	8009a68 <USBD_CtlSendStatus>
    break;
 800972e:	e010      	b.n	8009752 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f999 	bl	8009a68 <USBD_CtlSendStatus>
    break;
 8009736:	e00c      	b.n	8009752 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009738:	6839      	ldr	r1, [r7, #0]
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f8e6 	bl	800990c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009740:	4b06      	ldr	r3, [pc, #24]	; (800975c <USBD_SetConfig+0x144>)
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7ff f957 	bl	80089fa <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800974c:	2303      	movs	r3, #3
 800974e:	73fb      	strb	r3, [r7, #15]
    break;
 8009750:	bf00      	nop
  }

  return ret;
 8009752:	7bfb      	ldrb	r3, [r7, #15]
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	20000299 	.word	0x20000299

08009760 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	88db      	ldrh	r3, [r3, #6]
 800976e:	2b01      	cmp	r3, #1
 8009770:	d004      	beq.n	800977c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009772:	6839      	ldr	r1, [r7, #0]
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f8c9 	bl	800990c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800977a:	e021      	b.n	80097c0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009782:	2b01      	cmp	r3, #1
 8009784:	db17      	blt.n	80097b6 <USBD_GetConfig+0x56>
 8009786:	2b02      	cmp	r3, #2
 8009788:	dd02      	ble.n	8009790 <USBD_GetConfig+0x30>
 800978a:	2b03      	cmp	r3, #3
 800978c:	d00b      	beq.n	80097a6 <USBD_GetConfig+0x46>
 800978e:	e012      	b.n	80097b6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	3308      	adds	r3, #8
 800979a:	2201      	movs	r2, #1
 800979c:	4619      	mov	r1, r3
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f925 	bl	80099ee <USBD_CtlSendData>
      break;
 80097a4:	e00c      	b.n	80097c0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	3304      	adds	r3, #4
 80097aa:	2201      	movs	r2, #1
 80097ac:	4619      	mov	r1, r3
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 f91d 	bl	80099ee <USBD_CtlSendData>
      break;
 80097b4:	e004      	b.n	80097c0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80097b6:	6839      	ldr	r1, [r7, #0]
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 f8a7 	bl	800990c <USBD_CtlError>
      break;
 80097be:	bf00      	nop
}
 80097c0:	bf00      	nop
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097d8:	3b01      	subs	r3, #1
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d81e      	bhi.n	800981c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	88db      	ldrh	r3, [r3, #6]
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d004      	beq.n	80097f0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f88f 	bl	800990c <USBD_CtlError>
      break;
 80097ee:	e01a      	b.n	8009826 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d005      	beq.n	800980c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	f043 0202 	orr.w	r2, r3, #2
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	330c      	adds	r3, #12
 8009810:	2202      	movs	r2, #2
 8009812:	4619      	mov	r1, r3
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f8ea 	bl	80099ee <USBD_CtlSendData>
    break;
 800981a:	e004      	b.n	8009826 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800981c:	6839      	ldr	r1, [r7, #0]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f874 	bl	800990c <USBD_CtlError>
    break;
 8009824:	bf00      	nop
  }
}
 8009826:	bf00      	nop
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b082      	sub	sp, #8
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	885b      	ldrh	r3, [r3, #2]
 800983c:	2b01      	cmp	r3, #1
 800983e:	d106      	bne.n	800984e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f90d 	bl	8009a68 <USBD_CtlSendStatus>
  }
}
 800984e:	bf00      	nop
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b082      	sub	sp, #8
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009866:	3b01      	subs	r3, #1
 8009868:	2b02      	cmp	r3, #2
 800986a:	d80b      	bhi.n	8009884 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	885b      	ldrh	r3, [r3, #2]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d10c      	bne.n	800988e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f8f3 	bl	8009a68 <USBD_CtlSendStatus>
      }
      break;
 8009882:	e004      	b.n	800988e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f840 	bl	800990c <USBD_CtlError>
      break;
 800988c:	e000      	b.n	8009890 <USBD_ClrFeature+0x3a>
      break;
 800988e:	bf00      	nop
  }
}
 8009890:	bf00      	nop
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	781a      	ldrb	r2, [r3, #0]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	3301      	adds	r3, #1
 80098b2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	781a      	ldrb	r2, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	3301      	adds	r3, #1
 80098c0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80098c2:	68f8      	ldr	r0, [r7, #12]
 80098c4:	f7ff fad4 	bl	8008e70 <SWAPBYTE>
 80098c8:	4603      	mov	r3, r0
 80098ca:	461a      	mov	r2, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	3301      	adds	r3, #1
 80098d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	3301      	adds	r3, #1
 80098da:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f7ff fac7 	bl	8008e70 <SWAPBYTE>
 80098e2:	4603      	mov	r3, r0
 80098e4:	461a      	mov	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	3301      	adds	r3, #1
 80098ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	3301      	adds	r3, #1
 80098f4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80098f6:	68f8      	ldr	r0, [r7, #12]
 80098f8:	f7ff faba 	bl	8008e70 <SWAPBYTE>
 80098fc:	4603      	mov	r3, r0
 80098fe:	461a      	mov	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	80da      	strh	r2, [r3, #6]
}
 8009904:	bf00      	nop
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009916:	2180      	movs	r1, #128	; 0x80
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fcad 	bl	800a278 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800991e:	2100      	movs	r1, #0
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fca9 	bl	800a278 <USBD_LL_StallEP>
}
 8009926:	bf00      	nop
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b086      	sub	sp, #24
 8009932:	af00      	add	r7, sp, #0
 8009934:	60f8      	str	r0, [r7, #12]
 8009936:	60b9      	str	r1, [r7, #8]
 8009938:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800993a:	2300      	movs	r3, #0
 800993c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d036      	beq.n	80099b2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009948:	6938      	ldr	r0, [r7, #16]
 800994a:	f000 f836 	bl	80099ba <USBD_GetLen>
 800994e:	4603      	mov	r3, r0
 8009950:	3301      	adds	r3, #1
 8009952:	b29b      	uxth	r3, r3
 8009954:	005b      	lsls	r3, r3, #1
 8009956:	b29a      	uxth	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800995c:	7dfb      	ldrb	r3, [r7, #23]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	4413      	add	r3, r2
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	7812      	ldrb	r2, [r2, #0]
 8009966:	701a      	strb	r2, [r3, #0]
  idx++;
 8009968:	7dfb      	ldrb	r3, [r7, #23]
 800996a:	3301      	adds	r3, #1
 800996c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800996e:	7dfb      	ldrb	r3, [r7, #23]
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	4413      	add	r3, r2
 8009974:	2203      	movs	r2, #3
 8009976:	701a      	strb	r2, [r3, #0]
  idx++;
 8009978:	7dfb      	ldrb	r3, [r7, #23]
 800997a:	3301      	adds	r3, #1
 800997c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800997e:	e013      	b.n	80099a8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009980:	7dfb      	ldrb	r3, [r7, #23]
 8009982:	68ba      	ldr	r2, [r7, #8]
 8009984:	4413      	add	r3, r2
 8009986:	693a      	ldr	r2, [r7, #16]
 8009988:	7812      	ldrb	r2, [r2, #0]
 800998a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	3301      	adds	r3, #1
 8009990:	613b      	str	r3, [r7, #16]
    idx++;
 8009992:	7dfb      	ldrb	r3, [r7, #23]
 8009994:	3301      	adds	r3, #1
 8009996:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009998:	7dfb      	ldrb	r3, [r7, #23]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	4413      	add	r3, r2
 800999e:	2200      	movs	r2, #0
 80099a0:	701a      	strb	r2, [r3, #0]
    idx++;
 80099a2:	7dfb      	ldrb	r3, [r7, #23]
 80099a4:	3301      	adds	r3, #1
 80099a6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1e7      	bne.n	8009980 <USBD_GetString+0x52>
 80099b0:	e000      	b.n	80099b4 <USBD_GetString+0x86>
    return;
 80099b2:	bf00      	nop
  }
}
 80099b4:	3718      	adds	r7, #24
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80099ba:	b480      	push	{r7}
 80099bc:	b085      	sub	sp, #20
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80099c2:	2300      	movs	r3, #0
 80099c4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80099ca:	e005      	b.n	80099d8 <USBD_GetLen+0x1e>
  {
    len++;
 80099cc:	7bfb      	ldrb	r3, [r7, #15]
 80099ce:	3301      	adds	r3, #1
 80099d0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	3301      	adds	r3, #1
 80099d6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1f5      	bne.n	80099cc <USBD_GetLen+0x12>
  }

  return len;
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3714      	adds	r7, #20
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b084      	sub	sp, #16
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	60f8      	str	r0, [r7, #12]
 80099f6:	60b9      	str	r1, [r7, #8]
 80099f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2202      	movs	r2, #2
 80099fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	68ba      	ldr	r2, [r7, #8]
 8009a12:	2100      	movs	r1, #0
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f000 fcb8 	bl	800a38a <USBD_LL_Transmit>

  return USBD_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	68ba      	ldr	r2, [r7, #8]
 8009a34:	2100      	movs	r1, #0
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f000 fca7 	bl	800a38a <USBD_LL_Transmit>

  return USBD_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b084      	sub	sp, #16
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	60f8      	str	r0, [r7, #12]
 8009a4e:	60b9      	str	r1, [r7, #8]
 8009a50:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	2100      	movs	r1, #0
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f000 fcb7 	bl	800a3cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2204      	movs	r2, #4
 8009a74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a78:	2300      	movs	r3, #0
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fc83 	bl	800a38a <USBD_LL_Transmit>

  return USBD_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3708      	adds	r7, #8
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b082      	sub	sp, #8
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2205      	movs	r2, #5
 8009a9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fc91 	bl	800a3cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	490b      	ldr	r1, [pc, #44]	; (8009ae8 <MX_USB_DEVICE_Init+0x34>)
 8009abc:	480b      	ldr	r0, [pc, #44]	; (8009aec <MX_USB_DEVICE_Init+0x38>)
 8009abe:	f7fe ff12 	bl	80088e6 <USBD_Init>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009ac8:	f7f8 f900 	bl	8001ccc <Error_Handler>
//  {
//    Error_Handler();
//  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI);
 8009acc:	4908      	ldr	r1, [pc, #32]	; (8009af0 <MX_USB_DEVICE_Init+0x3c>)
 8009ace:	4807      	ldr	r0, [pc, #28]	; (8009aec <MX_USB_DEVICE_Init+0x38>)
 8009ad0:	f7fe ff3f 	bl	8008952 <USBD_RegisterClass>

	USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8009ad4:	4907      	ldr	r1, [pc, #28]	; (8009af4 <MX_USB_DEVICE_Init+0x40>)
 8009ad6:	4805      	ldr	r0, [pc, #20]	; (8009aec <MX_USB_DEVICE_Init+0x38>)
 8009ad8:	f7fe feee 	bl	80088b8 <USBD_MIDI_RegisterInterface>

	USBD_Start(&hUsbDeviceFS);
 8009adc:	4803      	ldr	r0, [pc, #12]	; (8009aec <MX_USB_DEVICE_Init+0x38>)
 8009ade:	f7fe ff59 	bl	8008994 <USBD_Start>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ae2:	bf00      	nop
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	2000017c 	.word	0x2000017c
 8009aec:	200007dc 	.word	0x200007dc
 8009af0:	200000dc 	.word	0x200000dc
 8009af4:	200001dc 	.word	0x200001dc

08009af8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	4603      	mov	r3, r0
 8009b00:	6039      	str	r1, [r7, #0]
 8009b02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	2212      	movs	r2, #18
 8009b08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b0a:	4b03      	ldr	r3, [pc, #12]	; (8009b18 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr
 8009b18:	20000198 	.word	0x20000198

08009b1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	4603      	mov	r3, r0
 8009b24:	6039      	str	r1, [r7, #0]
 8009b26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	2204      	movs	r2, #4
 8009b2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b2e:	4b03      	ldr	r3, [pc, #12]	; (8009b3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr
 8009b3c:	200001ac 	.word	0x200001ac

08009b40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	4603      	mov	r3, r0
 8009b48:	6039      	str	r1, [r7, #0]
 8009b4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b4c:	79fb      	ldrb	r3, [r7, #7]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d105      	bne.n	8009b5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b52:	683a      	ldr	r2, [r7, #0]
 8009b54:	4907      	ldr	r1, [pc, #28]	; (8009b74 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b56:	4808      	ldr	r0, [pc, #32]	; (8009b78 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b58:	f7ff fee9 	bl	800992e <USBD_GetString>
 8009b5c:	e004      	b.n	8009b68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b5e:	683a      	ldr	r2, [r7, #0]
 8009b60:	4904      	ldr	r1, [pc, #16]	; (8009b74 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b62:	4805      	ldr	r0, [pc, #20]	; (8009b78 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b64:	f7ff fee3 	bl	800992e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b68:	4b02      	ldr	r3, [pc, #8]	; (8009b74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	20000aac 	.word	0x20000aac
 8009b78:	0800a69c 	.word	0x0800a69c

08009b7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	4603      	mov	r3, r0
 8009b84:	6039      	str	r1, [r7, #0]
 8009b86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b88:	683a      	ldr	r2, [r7, #0]
 8009b8a:	4904      	ldr	r1, [pc, #16]	; (8009b9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009b8c:	4804      	ldr	r0, [pc, #16]	; (8009ba0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009b8e:	f7ff fece 	bl	800992e <USBD_GetString>
  return USBD_StrDesc;
 8009b92:	4b02      	ldr	r3, [pc, #8]	; (8009b9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	20000aac 	.word	0x20000aac
 8009ba0:	0800a69c 	.word	0x0800a69c

08009ba4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	4603      	mov	r3, r0
 8009bac:	6039      	str	r1, [r7, #0]
 8009bae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	221a      	movs	r2, #26
 8009bb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009bb6:	f000 f843 	bl	8009c40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009bba:	4b02      	ldr	r3, [pc, #8]	; (8009bc4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	200001b0 	.word	0x200001b0

08009bc8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	4603      	mov	r3, r0
 8009bd0:	6039      	str	r1, [r7, #0]
 8009bd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009bd4:	79fb      	ldrb	r3, [r7, #7]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d105      	bne.n	8009be6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	4907      	ldr	r1, [pc, #28]	; (8009bfc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bde:	4808      	ldr	r0, [pc, #32]	; (8009c00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009be0:	f7ff fea5 	bl	800992e <USBD_GetString>
 8009be4:	e004      	b.n	8009bf0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009be6:	683a      	ldr	r2, [r7, #0]
 8009be8:	4904      	ldr	r1, [pc, #16]	; (8009bfc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bea:	4805      	ldr	r0, [pc, #20]	; (8009c00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009bec:	f7ff fe9f 	bl	800992e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bf0:	4b02      	ldr	r3, [pc, #8]	; (8009bfc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	20000aac 	.word	0x20000aac
 8009c00:	0800a6b0 	.word	0x0800a6b0

08009c04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	6039      	str	r1, [r7, #0]
 8009c0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c10:	79fb      	ldrb	r3, [r7, #7]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d105      	bne.n	8009c22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	4907      	ldr	r1, [pc, #28]	; (8009c38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c1a:	4808      	ldr	r0, [pc, #32]	; (8009c3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c1c:	f7ff fe87 	bl	800992e <USBD_GetString>
 8009c20:	e004      	b.n	8009c2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	4904      	ldr	r1, [pc, #16]	; (8009c38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c26:	4805      	ldr	r0, [pc, #20]	; (8009c3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c28:	f7ff fe81 	bl	800992e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c2c:	4b02      	ldr	r3, [pc, #8]	; (8009c38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3708      	adds	r7, #8
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	20000aac 	.word	0x20000aac
 8009c3c:	0800a6c8 	.word	0x0800a6c8

08009c40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c46:	4b0f      	ldr	r3, [pc, #60]	; (8009c84 <Get_SerialNum+0x44>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c4c:	4b0e      	ldr	r3, [pc, #56]	; (8009c88 <Get_SerialNum+0x48>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c52:	4b0e      	ldr	r3, [pc, #56]	; (8009c8c <Get_SerialNum+0x4c>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d009      	beq.n	8009c7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009c66:	2208      	movs	r2, #8
 8009c68:	4909      	ldr	r1, [pc, #36]	; (8009c90 <Get_SerialNum+0x50>)
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f000 f814 	bl	8009c98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009c70:	2204      	movs	r2, #4
 8009c72:	4908      	ldr	r1, [pc, #32]	; (8009c94 <Get_SerialNum+0x54>)
 8009c74:	68b8      	ldr	r0, [r7, #8]
 8009c76:	f000 f80f 	bl	8009c98 <IntToUnicode>
  }
}
 8009c7a:	bf00      	nop
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	1fff7a10 	.word	0x1fff7a10
 8009c88:	1fff7a14 	.word	0x1fff7a14
 8009c8c:	1fff7a18 	.word	0x1fff7a18
 8009c90:	200001b2 	.word	0x200001b2
 8009c94:	200001c2 	.word	0x200001c2

08009c98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b087      	sub	sp, #28
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009caa:	2300      	movs	r3, #0
 8009cac:	75fb      	strb	r3, [r7, #23]
 8009cae:	e027      	b.n	8009d00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	0f1b      	lsrs	r3, r3, #28
 8009cb4:	2b09      	cmp	r3, #9
 8009cb6:	d80b      	bhi.n	8009cd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	0f1b      	lsrs	r3, r3, #28
 8009cbc:	b2da      	uxtb	r2, r3
 8009cbe:	7dfb      	ldrb	r3, [r7, #23]
 8009cc0:	005b      	lsls	r3, r3, #1
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	440b      	add	r3, r1
 8009cc8:	3230      	adds	r2, #48	; 0x30
 8009cca:	b2d2      	uxtb	r2, r2
 8009ccc:	701a      	strb	r2, [r3, #0]
 8009cce:	e00a      	b.n	8009ce6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	0f1b      	lsrs	r3, r3, #28
 8009cd4:	b2da      	uxtb	r2, r3
 8009cd6:	7dfb      	ldrb	r3, [r7, #23]
 8009cd8:	005b      	lsls	r3, r3, #1
 8009cda:	4619      	mov	r1, r3
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	440b      	add	r3, r1
 8009ce0:	3237      	adds	r2, #55	; 0x37
 8009ce2:	b2d2      	uxtb	r2, r2
 8009ce4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	011b      	lsls	r3, r3, #4
 8009cea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009cec:	7dfb      	ldrb	r3, [r7, #23]
 8009cee:	005b      	lsls	r3, r3, #1
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009cfa:	7dfb      	ldrb	r3, [r7, #23]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	75fb      	strb	r3, [r7, #23]
 8009d00:	7dfa      	ldrb	r2, [r7, #23]
 8009d02:	79fb      	ldrb	r3, [r7, #7]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d3d3      	bcc.n	8009cb0 <IntToUnicode+0x18>
  }
}
 8009d08:	bf00      	nop
 8009d0a:	371c      	adds	r7, #28
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <MIDI_DataRx>:
};

uint8_t flag_sendMidi = 0;

uint16_t MIDI_DataRx(uint8_t *msg, uint16_t length)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	807b      	strh	r3, [r7, #2]
  //uint8_t chan = msg[0] & 0x0F;
  uint8_t msgtype = msg[0] & 0xF0;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	f023 030f 	bic.w	r3, r3, #15
 8009d28:	73fb      	strb	r3, [r7, #15]
  uint8_t b1 =  msg[2];
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	789b      	ldrb	r3, [r3, #2]
 8009d2e:	73bb      	strb	r3, [r7, #14]
  uint8_t b2 =  msg[3];
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	78db      	ldrb	r3, [r3, #3]
 8009d34:	737b      	strb	r3, [r7, #13]
 // uint16_t b = ((b2 & 0x7F) << 7) | (b1 & 0x7F);
 
  switch (msgtype)
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
 8009d38:	2bb0      	cmp	r3, #176	; 0xb0
 8009d3a:	d01c      	beq.n	8009d76 <MIDI_DataRx+0x62>
 8009d3c:	2bb0      	cmp	r3, #176	; 0xb0
 8009d3e:	dc05      	bgt.n	8009d4c <MIDI_DataRx+0x38>
 8009d40:	2b90      	cmp	r3, #144	; 0x90
 8009d42:	d01a      	beq.n	8009d7a <MIDI_DataRx+0x66>
 8009d44:	2ba0      	cmp	r3, #160	; 0xa0
 8009d46:	d01a      	beq.n	8009d7e <MIDI_DataRx+0x6a>
 8009d48:	2b80      	cmp	r3, #128	; 0x80
	  //key = b1;
	  //velocity = b2;
	  //notepos = key - 8 + transpose;
	  //stop_note(notepos);
	  //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7); //blink LED
	  break;
 8009d4a:	e01f      	b.n	8009d8c <MIDI_DataRx+0x78>
  switch (msgtype)
 8009d4c:	2bd0      	cmp	r3, #208	; 0xd0
 8009d4e:	d018      	beq.n	8009d82 <MIDI_DataRx+0x6e>
 8009d50:	2bd0      	cmp	r3, #208	; 0xd0
 8009d52:	dc01      	bgt.n	8009d58 <MIDI_DataRx+0x44>
 8009d54:	2bc0      	cmp	r3, #192	; 0xc0
							break;
					}*/
	  break;
  case 0xC0:
	  //data = b1;
	  break;
 8009d56:	e019      	b.n	8009d8c <MIDI_DataRx+0x78>
  switch (msgtype)
 8009d58:	2be0      	cmp	r3, #224	; 0xe0
 8009d5a:	d014      	beq.n	8009d86 <MIDI_DataRx+0x72>
 8009d5c:	2bf0      	cmp	r3, #240	; 0xf0
 8009d5e:	d115      	bne.n	8009d8c <MIDI_DataRx+0x78>
  case 0xE0:
	  //data = b2;
	  //		bend = data;
	  break;
  case 0xF0: {
	  if((b1 == 0x7E) && (b2 == 0x7F)) {
 8009d60:	7bbb      	ldrb	r3, [r7, #14]
 8009d62:	2b7e      	cmp	r3, #126	; 0x7e
 8009d64:	d111      	bne.n	8009d8a <MIDI_DataRx+0x76>
 8009d66:	7b7b      	ldrb	r3, [r7, #13]
 8009d68:	2b7f      	cmp	r3, #127	; 0x7f
 8009d6a:	d10e      	bne.n	8009d8a <MIDI_DataRx+0x76>
		  MIDI_DataTx(SysexID, 15);
 8009d6c:	210f      	movs	r1, #15
 8009d6e:	480a      	ldr	r0, [pc, #40]	; (8009d98 <MIDI_DataRx+0x84>)
 8009d70:	f000 f814 	bl	8009d9c <MIDI_DataTx>
	  }
	  break;
 8009d74:	e009      	b.n	8009d8a <MIDI_DataRx+0x76>
	  break;
 8009d76:	bf00      	nop
 8009d78:	e008      	b.n	8009d8c <MIDI_DataRx+0x78>
	  break;
 8009d7a:	bf00      	nop
 8009d7c:	e006      	b.n	8009d8c <MIDI_DataRx+0x78>
	  break;
 8009d7e:	bf00      	nop
 8009d80:	e004      	b.n	8009d8c <MIDI_DataRx+0x78>
	  break;
 8009d82:	bf00      	nop
 8009d84:	e002      	b.n	8009d8c <MIDI_DataRx+0x78>
	  break;
 8009d86:	bf00      	nop
 8009d88:	e000      	b.n	8009d8c <MIDI_DataRx+0x78>
	  break;
 8009d8a:	bf00      	nop
  }
  }
  return 0;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	200001cc 	.word	0x200001cc

08009d9c <MIDI_DataTx>:

uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	807b      	strh	r3, [r7, #2]
  uint32_t i = 0;
 8009da8:	2300      	movs	r3, #0
 8009daa:	60fb      	str	r3, [r7, #12]
  while (i < length) {
 8009dac:	e017      	b.n	8009dde <MIDI_DataTx+0x42>
    APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	441a      	add	r2, r3
 8009db4:	4b0f      	ldr	r3, [pc, #60]	; (8009df4 <MIDI_DataTx+0x58>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	7811      	ldrb	r1, [r2, #0]
 8009dba:	4a0f      	ldr	r2, [pc, #60]	; (8009df8 <MIDI_DataTx+0x5c>)
 8009dbc:	54d1      	strb	r1, [r2, r3]
    APP_Rx_ptr_in++;
 8009dbe:	4b0d      	ldr	r3, [pc, #52]	; (8009df4 <MIDI_DataTx+0x58>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	4a0b      	ldr	r2, [pc, #44]	; (8009df4 <MIDI_DataTx+0x58>)
 8009dc6:	6013      	str	r3, [r2, #0]
    i++;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	60fb      	str	r3, [r7, #12]
    if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 8009dce:	4b09      	ldr	r3, [pc, #36]	; (8009df4 <MIDI_DataTx+0x58>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dd6:	d102      	bne.n	8009dde <MIDI_DataTx+0x42>
      APP_Rx_ptr_in = 0;
 8009dd8:	4b06      	ldr	r3, [pc, #24]	; (8009df4 <MIDI_DataTx+0x58>)
 8009dda:	2200      	movs	r2, #0
 8009ddc:	601a      	str	r2, [r3, #0]
  while (i < length) {
 8009dde:	887b      	ldrh	r3, [r7, #2]
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d3e3      	bcc.n	8009dae <MIDI_DataTx+0x12>
    }
  }
  USBD_MIDI_SendPacket();
 8009de6:	f7fe fce7 	bl	80087b8 <USBD_MIDI_SendPacket>
  return USBD_OK;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	2000028c 	.word	0x2000028c
 8009df8:	200006dc 	.word	0x200006dc

08009dfc <MIDI_SendBuffer>:

uint16_t MIDI_SendBuffer(uint8_t *msg, uint16_t length){
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	460b      	mov	r3, r1
 8009e06:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	60fb      	str	r3, [r7, #12]
	while (i < length) {
 8009e0c:	e017      	b.n	8009e3e <MIDI_SendBuffer+0x42>
		APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	441a      	add	r2, r3
 8009e14:	4b11      	ldr	r3, [pc, #68]	; (8009e5c <MIDI_SendBuffer+0x60>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	7811      	ldrb	r1, [r2, #0]
 8009e1a:	4a11      	ldr	r2, [pc, #68]	; (8009e60 <MIDI_SendBuffer+0x64>)
 8009e1c:	54d1      	strb	r1, [r2, r3]
		APP_Rx_ptr_in++;
 8009e1e:	4b0f      	ldr	r3, [pc, #60]	; (8009e5c <MIDI_SendBuffer+0x60>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	3301      	adds	r3, #1
 8009e24:	4a0d      	ldr	r2, [pc, #52]	; (8009e5c <MIDI_SendBuffer+0x60>)
 8009e26:	6013      	str	r3, [r2, #0]
		i++;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	60fb      	str	r3, [r7, #12]
		if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 8009e2e:	4b0b      	ldr	r3, [pc, #44]	; (8009e5c <MIDI_SendBuffer+0x60>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e36:	d102      	bne.n	8009e3e <MIDI_SendBuffer+0x42>
			APP_Rx_ptr_in = 0;
 8009e38:	4b08      	ldr	r3, [pc, #32]	; (8009e5c <MIDI_SendBuffer+0x60>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	601a      	str	r2, [r3, #0]
	while (i < length) {
 8009e3e:	887b      	ldrh	r3, [r7, #2]
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d3e3      	bcc.n	8009e0e <MIDI_SendBuffer+0x12>
		}
	}
	flag_sendMidi = 1;
 8009e46:	4b07      	ldr	r3, [pc, #28]	; (8009e64 <MIDI_SendBuffer+0x68>)
 8009e48:	2201      	movs	r2, #1
 8009e4a:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3714      	adds	r7, #20
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	2000028c 	.word	0x2000028c
 8009e60:	200006dc 	.word	0x200006dc
 8009e64:	2000029a 	.word	0x2000029a

08009e68 <MIDI_SendCheck>:

void MIDI_SendCheck(void){
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	af00      	add	r7, sp, #0
	if (flag_sendMidi != 0){
 8009e6c:	4b07      	ldr	r3, [pc, #28]	; (8009e8c <MIDI_SendCheck+0x24>)
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d008      	beq.n	8009e86 <MIDI_SendCheck+0x1e>
		if (USB_Tx_State == 0){
 8009e74:	4b06      	ldr	r3, [pc, #24]	; (8009e90 <MIDI_SendCheck+0x28>)
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d104      	bne.n	8009e86 <MIDI_SendCheck+0x1e>
			USBD_MIDI_SendPacket();
 8009e7c:	f7fe fc9c 	bl	80087b8 <USBD_MIDI_SendPacket>
			flag_sendMidi = 0;
 8009e80:	4b02      	ldr	r3, [pc, #8]	; (8009e8c <MIDI_SendCheck+0x24>)
 8009e82:	2200      	movs	r2, #0
 8009e84:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8009e86:	bf00      	nop
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	2000029a 	.word	0x2000029a
 8009e90:	20000298 	.word	0x20000298

08009e94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b08a      	sub	sp, #40	; 0x28
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e9c:	f107 0314 	add.w	r3, r7, #20
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	601a      	str	r2, [r3, #0]
 8009ea4:	605a      	str	r2, [r3, #4]
 8009ea6:	609a      	str	r2, [r3, #8]
 8009ea8:	60da      	str	r2, [r3, #12]
 8009eaa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009eb4:	d13a      	bne.n	8009f2c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	613b      	str	r3, [r7, #16]
 8009eba:	4b1e      	ldr	r3, [pc, #120]	; (8009f34 <HAL_PCD_MspInit+0xa0>)
 8009ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ebe:	4a1d      	ldr	r2, [pc, #116]	; (8009f34 <HAL_PCD_MspInit+0xa0>)
 8009ec0:	f043 0301 	orr.w	r3, r3, #1
 8009ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8009ec6:	4b1b      	ldr	r3, [pc, #108]	; (8009f34 <HAL_PCD_MspInit+0xa0>)
 8009ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eca:	f003 0301 	and.w	r3, r3, #1
 8009ece:	613b      	str	r3, [r7, #16]
 8009ed0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009ed2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ed8:	2302      	movs	r3, #2
 8009eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009edc:	2300      	movs	r3, #0
 8009ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009ee4:	230a      	movs	r3, #10
 8009ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ee8:	f107 0314 	add.w	r3, r7, #20
 8009eec:	4619      	mov	r1, r3
 8009eee:	4812      	ldr	r0, [pc, #72]	; (8009f38 <HAL_PCD_MspInit+0xa4>)
 8009ef0:	f7f8 fc62 	bl	80027b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009ef4:	4b0f      	ldr	r3, [pc, #60]	; (8009f34 <HAL_PCD_MspInit+0xa0>)
 8009ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef8:	4a0e      	ldr	r2, [pc, #56]	; (8009f34 <HAL_PCD_MspInit+0xa0>)
 8009efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009efe:	6353      	str	r3, [r2, #52]	; 0x34
 8009f00:	2300      	movs	r3, #0
 8009f02:	60fb      	str	r3, [r7, #12]
 8009f04:	4b0b      	ldr	r3, [pc, #44]	; (8009f34 <HAL_PCD_MspInit+0xa0>)
 8009f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f08:	4a0a      	ldr	r2, [pc, #40]	; (8009f34 <HAL_PCD_MspInit+0xa0>)
 8009f0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f0e:	6453      	str	r3, [r2, #68]	; 0x44
 8009f10:	4b08      	ldr	r3, [pc, #32]	; (8009f34 <HAL_PCD_MspInit+0xa0>)
 8009f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f18:	60fb      	str	r3, [r7, #12]
 8009f1a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	2100      	movs	r1, #0
 8009f20:	2043      	movs	r0, #67	; 0x43
 8009f22:	f7f8 fae8 	bl	80024f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009f26:	2043      	movs	r0, #67	; 0x43
 8009f28:	f7f8 fb01 	bl	800252e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009f2c:	bf00      	nop
 8009f2e:	3728      	adds	r7, #40	; 0x28
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	40023800 	.word	0x40023800
 8009f38:	40020000 	.word	0x40020000

08009f3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009f50:	4619      	mov	r1, r3
 8009f52:	4610      	mov	r0, r2
 8009f54:	f7fe fd69 	bl	8008a2a <USBD_LL_SetupStage>
}
 8009f58:	bf00      	nop
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	460b      	mov	r3, r1
 8009f6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009f72:	78fa      	ldrb	r2, [r7, #3]
 8009f74:	6879      	ldr	r1, [r7, #4]
 8009f76:	4613      	mov	r3, r2
 8009f78:	00db      	lsls	r3, r3, #3
 8009f7a:	1a9b      	subs	r3, r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	440b      	add	r3, r1
 8009f80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	78fb      	ldrb	r3, [r7, #3]
 8009f88:	4619      	mov	r1, r3
 8009f8a:	f7fe fda1 	bl	8008ad0 <USBD_LL_DataOutStage>
}
 8009f8e:	bf00      	nop
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b082      	sub	sp, #8
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009fa8:	78fa      	ldrb	r2, [r7, #3]
 8009faa:	6879      	ldr	r1, [r7, #4]
 8009fac:	4613      	mov	r3, r2
 8009fae:	00db      	lsls	r3, r3, #3
 8009fb0:	1a9b      	subs	r3, r3, r2
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	440b      	add	r3, r1
 8009fb6:	3348      	adds	r3, #72	; 0x48
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	78fb      	ldrb	r3, [r7, #3]
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	f7fe fdea 	bl	8008b96 <USBD_LL_DataInStage>
}
 8009fc2:	bf00      	nop
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b082      	sub	sp, #8
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7fe feee 	bl	8008dba <USBD_LL_SOF>
}
 8009fde:	bf00      	nop
 8009fe0:	3708      	adds	r7, #8
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b084      	sub	sp, #16
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d102      	bne.n	800a000 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	73fb      	strb	r3, [r7, #15]
 8009ffe:	e008      	b.n	800a012 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	2b02      	cmp	r3, #2
 800a006:	d102      	bne.n	800a00e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a008:	2301      	movs	r3, #1
 800a00a:	73fb      	strb	r3, [r7, #15]
 800a00c:	e001      	b.n	800a012 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a00e:	f7f7 fe5d 	bl	8001ccc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a018:	7bfa      	ldrb	r2, [r7, #15]
 800a01a:	4611      	mov	r1, r2
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7fe fe91 	bl	8008d44 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fe fe4a 	bl	8008cc2 <USBD_LL_Reset>
}
 800a02e:	bf00      	nop
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
	...

0800a038 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a046:	4618      	mov	r0, r3
 800a048:	f7fe fe8c 	bl	8008d64 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	6812      	ldr	r2, [r2, #0]
 800a05a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a05e:	f043 0301 	orr.w	r3, r3, #1
 800a062:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6a1b      	ldr	r3, [r3, #32]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d005      	beq.n	800a078 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a06c:	4b04      	ldr	r3, [pc, #16]	; (800a080 <HAL_PCD_SuspendCallback+0x48>)
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	4a03      	ldr	r2, [pc, #12]	; (800a080 <HAL_PCD_SuspendCallback+0x48>)
 800a072:	f043 0306 	orr.w	r3, r3, #6
 800a076:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a078:	bf00      	nop
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	e000ed00 	.word	0xe000ed00

0800a084 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a092:	4618      	mov	r0, r3
 800a094:	f7fe fe7b 	bl	8008d8e <USBD_LL_Resume>
}
 800a098:	bf00      	nop
 800a09a:	3708      	adds	r7, #8
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0b2:	78fa      	ldrb	r2, [r7, #3]
 800a0b4:	4611      	mov	r1, r2
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fe fea6 	bl	8008e08 <USBD_LL_IsoOUTIncomplete>
}
 800a0bc:	bf00      	nop
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0d6:	78fa      	ldrb	r2, [r7, #3]
 800a0d8:	4611      	mov	r1, r2
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fe fe87 	bl	8008dee <USBD_LL_IsoINIncomplete>
}
 800a0e0:	bf00      	nop
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7fe fe93 	bl	8008e22 <USBD_LL_DevConnected>
}
 800a0fc:	bf00      	nop
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a112:	4618      	mov	r0, r3
 800a114:	f7fe fe90 	bl	8008e38 <USBD_LL_DevDisconnected>
}
 800a118:	bf00      	nop
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d13c      	bne.n	800a1aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a130:	4a20      	ldr	r2, [pc, #128]	; (800a1b4 <USBD_LL_Init+0x94>)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4a1e      	ldr	r2, [pc, #120]	; (800a1b4 <USBD_LL_Init+0x94>)
 800a13c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a140:	4b1c      	ldr	r3, [pc, #112]	; (800a1b4 <USBD_LL_Init+0x94>)
 800a142:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a146:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a148:	4b1a      	ldr	r3, [pc, #104]	; (800a1b4 <USBD_LL_Init+0x94>)
 800a14a:	2204      	movs	r2, #4
 800a14c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a14e:	4b19      	ldr	r3, [pc, #100]	; (800a1b4 <USBD_LL_Init+0x94>)
 800a150:	2202      	movs	r2, #2
 800a152:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a154:	4b17      	ldr	r3, [pc, #92]	; (800a1b4 <USBD_LL_Init+0x94>)
 800a156:	2200      	movs	r2, #0
 800a158:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a15a:	4b16      	ldr	r3, [pc, #88]	; (800a1b4 <USBD_LL_Init+0x94>)
 800a15c:	2202      	movs	r2, #2
 800a15e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a160:	4b14      	ldr	r3, [pc, #80]	; (800a1b4 <USBD_LL_Init+0x94>)
 800a162:	2200      	movs	r2, #0
 800a164:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a166:	4b13      	ldr	r3, [pc, #76]	; (800a1b4 <USBD_LL_Init+0x94>)
 800a168:	2200      	movs	r2, #0
 800a16a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a16c:	4b11      	ldr	r3, [pc, #68]	; (800a1b4 <USBD_LL_Init+0x94>)
 800a16e:	2200      	movs	r2, #0
 800a170:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a172:	4b10      	ldr	r3, [pc, #64]	; (800a1b4 <USBD_LL_Init+0x94>)
 800a174:	2200      	movs	r2, #0
 800a176:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a178:	4b0e      	ldr	r3, [pc, #56]	; (800a1b4 <USBD_LL_Init+0x94>)
 800a17a:	2200      	movs	r2, #0
 800a17c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a17e:	480d      	ldr	r0, [pc, #52]	; (800a1b4 <USBD_LL_Init+0x94>)
 800a180:	f7fa fdd1 	bl	8004d26 <HAL_PCD_Init>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d001      	beq.n	800a18e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a18a:	f7f7 fd9f 	bl	8001ccc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a18e:	2180      	movs	r1, #128	; 0x80
 800a190:	4808      	ldr	r0, [pc, #32]	; (800a1b4 <USBD_LL_Init+0x94>)
 800a192:	f7fb ff16 	bl	8005fc2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a196:	2240      	movs	r2, #64	; 0x40
 800a198:	2100      	movs	r1, #0
 800a19a:	4806      	ldr	r0, [pc, #24]	; (800a1b4 <USBD_LL_Init+0x94>)
 800a19c:	f7fb feca 	bl	8005f34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a1a0:	2280      	movs	r2, #128	; 0x80
 800a1a2:	2101      	movs	r1, #1
 800a1a4:	4803      	ldr	r0, [pc, #12]	; (800a1b4 <USBD_LL_Init+0x94>)
 800a1a6:	f7fb fec5 	bl	8005f34 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a1aa:	2300      	movs	r3, #0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	20000cac 	.word	0x20000cac

0800a1b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fa fec6 	bl	8004f60 <HAL_PCD_Start>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f000 f918 	bl	800a410 <USBD_Get_USB_Status>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b084      	sub	sp, #16
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
 800a1f6:	4608      	mov	r0, r1
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	70fb      	strb	r3, [r7, #3]
 800a200:	460b      	mov	r3, r1
 800a202:	70bb      	strb	r3, [r7, #2]
 800a204:	4613      	mov	r3, r2
 800a206:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a208:	2300      	movs	r3, #0
 800a20a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a20c:	2300      	movs	r3, #0
 800a20e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a216:	78bb      	ldrb	r3, [r7, #2]
 800a218:	883a      	ldrh	r2, [r7, #0]
 800a21a:	78f9      	ldrb	r1, [r7, #3]
 800a21c:	f7fb faaa 	bl	8005774 <HAL_PCD_EP_Open>
 800a220:	4603      	mov	r3, r0
 800a222:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a224:	7bfb      	ldrb	r3, [r7, #15]
 800a226:	4618      	mov	r0, r3
 800a228:	f000 f8f2 	bl	800a410 <USBD_Get_USB_Status>
 800a22c:	4603      	mov	r3, r0
 800a22e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a230:	7bbb      	ldrb	r3, [r7, #14]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b084      	sub	sp, #16
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
 800a242:	460b      	mov	r3, r1
 800a244:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a254:	78fa      	ldrb	r2, [r7, #3]
 800a256:	4611      	mov	r1, r2
 800a258:	4618      	mov	r0, r3
 800a25a:	f7fb faf3 	bl	8005844 <HAL_PCD_EP_Close>
 800a25e:	4603      	mov	r3, r0
 800a260:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a262:	7bfb      	ldrb	r3, [r7, #15]
 800a264:	4618      	mov	r0, r3
 800a266:	f000 f8d3 	bl	800a410 <USBD_Get_USB_Status>
 800a26a:	4603      	mov	r3, r0
 800a26c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a26e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	460b      	mov	r3, r1
 800a282:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a288:	2300      	movs	r3, #0
 800a28a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a292:	78fa      	ldrb	r2, [r7, #3]
 800a294:	4611      	mov	r1, r2
 800a296:	4618      	mov	r0, r3
 800a298:	f7fb fbb3 	bl	8005a02 <HAL_PCD_EP_SetStall>
 800a29c:	4603      	mov	r3, r0
 800a29e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 f8b4 	bl	800a410 <USBD_Get_USB_Status>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b084      	sub	sp, #16
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	460b      	mov	r3, r1
 800a2c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2d0:	78fa      	ldrb	r2, [r7, #3]
 800a2d2:	4611      	mov	r1, r2
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7fb fbf8 	bl	8005aca <HAL_PCD_EP_ClrStall>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2de:	7bfb      	ldrb	r3, [r7, #15]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f000 f895 	bl	800a410 <USBD_Get_USB_Status>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a306:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a308:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	da0b      	bge.n	800a328 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a310:	78fb      	ldrb	r3, [r7, #3]
 800a312:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a316:	68f9      	ldr	r1, [r7, #12]
 800a318:	4613      	mov	r3, r2
 800a31a:	00db      	lsls	r3, r3, #3
 800a31c:	1a9b      	subs	r3, r3, r2
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	440b      	add	r3, r1
 800a322:	333e      	adds	r3, #62	; 0x3e
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	e00b      	b.n	800a340 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a328:	78fb      	ldrb	r3, [r7, #3]
 800a32a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a32e:	68f9      	ldr	r1, [r7, #12]
 800a330:	4613      	mov	r3, r2
 800a332:	00db      	lsls	r3, r3, #3
 800a334:	1a9b      	subs	r3, r3, r2
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	440b      	add	r3, r1
 800a33a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a33e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a340:	4618      	mov	r0, r3
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	460b      	mov	r3, r1
 800a356:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a358:	2300      	movs	r3, #0
 800a35a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a35c:	2300      	movs	r3, #0
 800a35e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a366:	78fa      	ldrb	r2, [r7, #3]
 800a368:	4611      	mov	r1, r2
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7fb f9dd 	bl	800572a <HAL_PCD_SetAddress>
 800a370:	4603      	mov	r3, r0
 800a372:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a374:	7bfb      	ldrb	r3, [r7, #15]
 800a376:	4618      	mov	r0, r3
 800a378:	f000 f84a 	bl	800a410 <USBD_Get_USB_Status>
 800a37c:	4603      	mov	r3, r0
 800a37e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a380:	7bbb      	ldrb	r3, [r7, #14]
}
 800a382:	4618      	mov	r0, r3
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b086      	sub	sp, #24
 800a38e:	af00      	add	r7, sp, #0
 800a390:	60f8      	str	r0, [r7, #12]
 800a392:	607a      	str	r2, [r7, #4]
 800a394:	603b      	str	r3, [r7, #0]
 800a396:	460b      	mov	r3, r1
 800a398:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a39a:	2300      	movs	r3, #0
 800a39c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a3a8:	7af9      	ldrb	r1, [r7, #11]
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	f7fb fade 	bl	800596e <HAL_PCD_EP_Transmit>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3b6:	7dfb      	ldrb	r3, [r7, #23]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f000 f829 	bl	800a410 <USBD_Get_USB_Status>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3718      	adds	r7, #24
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	607a      	str	r2, [r7, #4]
 800a3d6:	603b      	str	r3, [r7, #0]
 800a3d8:	460b      	mov	r3, r1
 800a3da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a3ea:	7af9      	ldrb	r1, [r7, #11]
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	f7fb fa72 	bl	80058d8 <HAL_PCD_EP_Receive>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3f8:	7dfb      	ldrb	r3, [r7, #23]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f000 f808 	bl	800a410 <USBD_Get_USB_Status>
 800a400:	4603      	mov	r3, r0
 800a402:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a404:	7dbb      	ldrb	r3, [r7, #22]
}
 800a406:	4618      	mov	r0, r3
 800a408:	3718      	adds	r7, #24
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
	...

0800a410 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	4603      	mov	r3, r0
 800a418:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a41e:	79fb      	ldrb	r3, [r7, #7]
 800a420:	2b03      	cmp	r3, #3
 800a422:	d817      	bhi.n	800a454 <USBD_Get_USB_Status+0x44>
 800a424:	a201      	add	r2, pc, #4	; (adr r2, 800a42c <USBD_Get_USB_Status+0x1c>)
 800a426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42a:	bf00      	nop
 800a42c:	0800a43d 	.word	0x0800a43d
 800a430:	0800a443 	.word	0x0800a443
 800a434:	0800a449 	.word	0x0800a449
 800a438:	0800a44f 	.word	0x0800a44f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a43c:	2300      	movs	r3, #0
 800a43e:	73fb      	strb	r3, [r7, #15]
    break;
 800a440:	e00b      	b.n	800a45a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a442:	2303      	movs	r3, #3
 800a444:	73fb      	strb	r3, [r7, #15]
    break;
 800a446:	e008      	b.n	800a45a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a448:	2301      	movs	r3, #1
 800a44a:	73fb      	strb	r3, [r7, #15]
    break;
 800a44c:	e005      	b.n	800a45a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a44e:	2303      	movs	r3, #3
 800a450:	73fb      	strb	r3, [r7, #15]
    break;
 800a452:	e002      	b.n	800a45a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a454:	2303      	movs	r3, #3
 800a456:	73fb      	strb	r3, [r7, #15]
    break;
 800a458:	bf00      	nop
  }
  return usb_status;
 800a45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3714      	adds	r7, #20
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <__libc_init_array>:
 800a468:	b570      	push	{r4, r5, r6, lr}
 800a46a:	4e0d      	ldr	r6, [pc, #52]	; (800a4a0 <__libc_init_array+0x38>)
 800a46c:	4c0d      	ldr	r4, [pc, #52]	; (800a4a4 <__libc_init_array+0x3c>)
 800a46e:	1ba4      	subs	r4, r4, r6
 800a470:	10a4      	asrs	r4, r4, #2
 800a472:	2500      	movs	r5, #0
 800a474:	42a5      	cmp	r5, r4
 800a476:	d109      	bne.n	800a48c <__libc_init_array+0x24>
 800a478:	4e0b      	ldr	r6, [pc, #44]	; (800a4a8 <__libc_init_array+0x40>)
 800a47a:	4c0c      	ldr	r4, [pc, #48]	; (800a4ac <__libc_init_array+0x44>)
 800a47c:	f000 f820 	bl	800a4c0 <_init>
 800a480:	1ba4      	subs	r4, r4, r6
 800a482:	10a4      	asrs	r4, r4, #2
 800a484:	2500      	movs	r5, #0
 800a486:	42a5      	cmp	r5, r4
 800a488:	d105      	bne.n	800a496 <__libc_init_array+0x2e>
 800a48a:	bd70      	pop	{r4, r5, r6, pc}
 800a48c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a490:	4798      	blx	r3
 800a492:	3501      	adds	r5, #1
 800a494:	e7ee      	b.n	800a474 <__libc_init_array+0xc>
 800a496:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a49a:	4798      	blx	r3
 800a49c:	3501      	adds	r5, #1
 800a49e:	e7f2      	b.n	800a486 <__libc_init_array+0x1e>
 800a4a0:	0803e414 	.word	0x0803e414
 800a4a4:	0803e414 	.word	0x0803e414
 800a4a8:	0803e414 	.word	0x0803e414
 800a4ac:	0803e418 	.word	0x0803e418

0800a4b0 <memset>:
 800a4b0:	4402      	add	r2, r0
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d100      	bne.n	800a4ba <memset+0xa>
 800a4b8:	4770      	bx	lr
 800a4ba:	f803 1b01 	strb.w	r1, [r3], #1
 800a4be:	e7f9      	b.n	800a4b4 <memset+0x4>

0800a4c0 <_init>:
 800a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c2:	bf00      	nop
 800a4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4c6:	bc08      	pop	{r3}
 800a4c8:	469e      	mov	lr, r3
 800a4ca:	4770      	bx	lr

0800a4cc <_fini>:
 800a4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ce:	bf00      	nop
 800a4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4d2:	bc08      	pop	{r3}
 800a4d4:	469e      	mov	lr, r3
 800a4d6:	4770      	bx	lr
