
PEDALERA_beta_V04_STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c604  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00033f04  0800c78c  0800c78c  0001c78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08040690  08040690  000602d4  2**0
                  CONTENTS
  4 .ARM          00000008  08040690  08040690  00050690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08040698  08040698  000602d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08040698  08040698  00050698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804069c  0804069c  0005069c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  080406a0  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fe0  200002d4  08040974  000602d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  200012b4  08040974  000612b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000602d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000263a9  00000000  00000000  00060304  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005284  00000000  00000000  000866ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c38  00000000  00000000  0008b938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019c0  00000000  00000000  0008d570  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028562  00000000  00000000  0008ef30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ca76  00000000  00000000  000b7492  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8fff  00000000  00000000  000d3f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001acf07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000754c  00000000  00000000  001acf84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200002d4 	.word	0x200002d4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c774 	.word	0x0800c774

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200002d8 	.word	0x200002d8
 80001c4:	0800c774 	.word	0x0800c774

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <spi_74HC165_init>:
GPIO_TypeDef* portPL;
GPIO_TypeDef* portCE;
uint16_t pinPL, pinCE;


void spi_74HC165_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* PLport, uint16_t PLpin, GPIO_TypeDef* CEport, uint16_t CEpin){
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	4613      	mov	r3, r2
 80004d6:	80fb      	strh	r3, [r7, #6]

	spi_handler=hspi;
 80004d8:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <spi_74HC165_init+0x3c>)
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	6013      	str	r3, [r2, #0]

	portPL = PLport;
 80004de:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <spi_74HC165_init+0x40>)
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	6013      	str	r3, [r2, #0]
	pinPL = PLpin;
 80004e4:	4a09      	ldr	r2, [pc, #36]	; (800050c <spi_74HC165_init+0x44>)
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	8013      	strh	r3, [r2, #0]

	portCE = CEport;
 80004ea:	4a09      	ldr	r2, [pc, #36]	; (8000510 <spi_74HC165_init+0x48>)
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	6013      	str	r3, [r2, #0]
	pinCE = CEpin;
 80004f0:	4a08      	ldr	r2, [pc, #32]	; (8000514 <spi_74HC165_init+0x4c>)
 80004f2:	8b3b      	ldrh	r3, [r7, #24]
 80004f4:	8013      	strh	r3, [r2, #0]

}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	200003a4 	.word	0x200003a4
 8000508:	200003ac 	.word	0x200003ac
 800050c:	200003a8 	.word	0x200003a8
 8000510:	200003b4 	.word	0x200003b4
 8000514:	200003b0 	.word	0x200003b0

08000518 <spi_74HC165_receive>:


void spi_74HC165_receive (uint8_t* pdata, uint16_t sizeData){
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	807b      	strh	r3, [r7, #2]

	//carga paralela
	HAL_GPIO_WritePin(portPL, pinPL, 0);
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <spi_74HC165_receive+0x64>)
 8000526:	6818      	ldr	r0, [r3, #0]
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <spi_74HC165_receive+0x68>)
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	2200      	movs	r2, #0
 800052e:	4619      	mov	r1, r3
 8000530:	f002 fed4 	bl	80032dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portPL, pinPL, 1);
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <spi_74HC165_receive+0x64>)
 8000536:	6818      	ldr	r0, [r3, #0]
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <spi_74HC165_receive+0x68>)
 800053a:	881b      	ldrh	r3, [r3, #0]
 800053c:	2201      	movs	r2, #1
 800053e:	4619      	mov	r1, r3
 8000540:	f002 fecc 	bl	80032dc <HAL_GPIO_WritePin>

	//clock enable
	HAL_GPIO_WritePin(portCE, pinCE, 0);
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <spi_74HC165_receive+0x6c>)
 8000546:	6818      	ldr	r0, [r3, #0]
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <spi_74HC165_receive+0x70>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	2200      	movs	r2, #0
 800054e:	4619      	mov	r1, r3
 8000550:	f002 fec4 	bl	80032dc <HAL_GPIO_WritePin>

	//SPI
	HAL_SPI_Receive(spi_handler, pdata, sizeData, 100);
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <spi_74HC165_receive+0x74>)
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	887a      	ldrh	r2, [r7, #2]
 800055a:	2364      	movs	r3, #100	; 0x64
 800055c:	6879      	ldr	r1, [r7, #4]
 800055e:	f006 fe0b 	bl	8007178 <HAL_SPI_Receive>

	//clock disable
	HAL_GPIO_WritePin(portCE, pinCE, 1);
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <spi_74HC165_receive+0x6c>)
 8000564:	6818      	ldr	r0, [r3, #0]
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <spi_74HC165_receive+0x70>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	2201      	movs	r2, #1
 800056c:	4619      	mov	r1, r3
 800056e:	f002 feb5 	bl	80032dc <HAL_GPIO_WritePin>
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200003ac 	.word	0x200003ac
 8000580:	200003a8 	.word	0x200003a8
 8000584:	200003b4 	.word	0x200003b4
 8000588:	200003b0 	.word	0x200003b0
 800058c:	200003a4 	.word	0x200003a4

08000590 <makeChord>:

	Parameter: fchord		Number of the chord sent. It was made by setChord() and store in "chordSet[]" vector.

	Returns:	unsigned long	(0xXXXXXX) A 3-byte number that contains the fundamental note in the least significant byte, followed by the 2nd and 3rd notes of the chord.
*/
unsigned long makeChord(unsigned long bnote, uint8_t fchord){
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	70fb      	strb	r3, [r7, #3]

	unsigned long notes;

	notes = bnote;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	60fb      	str	r3, [r7, #12]
	notes += (bnote << 8);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	68fa      	ldr	r2, [r7, #12]
 80005a6:	4413      	add	r3, r2
 80005a8:	60fb      	str	r3, [r7, #12]
	notes += (bnote << 16);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	041b      	lsls	r3, r3, #16
 80005ae:	68fa      	ldr	r2, [r7, #12]
 80005b0:	4413      	add	r3, r2
 80005b2:	60fb      	str	r3, [r7, #12]


	notes += chordSet[fchord];
 80005b4:	78fb      	ldrb	r3, [r7, #3]
 80005b6:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <makeChord+0x40>)
 80005b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005bc:	68fa      	ldr	r2, [r7, #12]
 80005be:	4413      	add	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]


	return notes;
 80005c2:	68fb      	ldr	r3, [r7, #12]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	200002f4 	.word	0x200002f4

080005d4 <setChord>:

	Parameter: fnote		id of the pressed note.

	Returns:	void
*/
void setChord(uint8_t fnote){
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]

chordSet[fnote] = hex_chord[chord] - hex_chordInv[chordInv];
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <setChord+0x34>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a0a      	ldr	r2, [pc, #40]	; (800060c <setChord+0x38>)
 80005e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <setChord+0x3c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a09      	ldr	r2, [pc, #36]	; (8000614 <setChord+0x40>)
 80005ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	1a8a      	subs	r2, r1, r2
 80005f6:	4908      	ldr	r1, [pc, #32]	; (8000618 <setChord+0x44>)
 80005f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	200003c0 	.word	0x200003c0
 800060c:	0800c998 	.word	0x0800c998
 8000610:	200003c4 	.word	0x200003c4
 8000614:	0800c9b8 	.word	0x0800c9b8
 8000618:	200002f4 	.word	0x200002f4

0800061c <turnOnScreen>:
	Parameters: void

	Returns:	void
*/

void turnOnScreen(void){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0

	/////////////CARACTERES ESPECIALES

	lcd_cursor_buff(5, 2);
 8000620:	2102      	movs	r1, #2
 8000622:	2005      	movs	r0, #5
 8000624:	f000 fc4c 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("BASS  PEDAL");
 8000628:	4808      	ldr	r0, [pc, #32]	; (800064c <turnOnScreen+0x30>)
 800062a:	f000 fccd 	bl	8000fc8 <lcd_string_buff>
	lcd_cursor_buff(5, 3);
 800062e:	2103      	movs	r1, #3
 8000630:	2005      	movs	r0, #5
 8000632:	f000 fc45 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("SYNTHESIZER");
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <turnOnScreen+0x34>)
 8000638:	f000 fcc6 	bl	8000fc8 <lcd_string_buff>
	lcd_upDate_IT();
 800063c:	f000 fd70 	bl	8001120 <lcd_upDate_IT>


	HAL_Delay(3000);
 8000640:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000644:	f001 fff0 	bl	8002628 <HAL_Delay>
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	0800c838 	.word	0x0800c838
 8000650:	0800c844 	.word	0x0800c844

08000654 <chordScreen>:
	Parameters: void

	Returns:	void
*/

void chordScreen(void){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	lcd_clearScreen_buff();
 8000658:	f000 fc1c 	bl	8000e94 <lcd_clearScreen_buff>
	lcd_cursor_buff(1,0);
 800065c:	2100      	movs	r1, #0
 800065e:	2001      	movs	r0, #1
 8000660:	f000 fc2e 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("Acorde: ");
 8000664:	4815      	ldr	r0, [pc, #84]	; (80006bc <chordScreen+0x68>)
 8000666:	f000 fcaf 	bl	8000fc8 <lcd_string_buff>
	lcd_string_buff( str_chord[chord]);
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <chordScreen+0x6c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <chordScreen+0x70>)
 8000670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fca7 	bl	8000fc8 <lcd_string_buff>
	lcd_cursor_buff(1,1);
 800067a:	2101      	movs	r1, #1
 800067c:	2001      	movs	r0, #1
 800067e:	f000 fc1f 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("Pos:");
 8000682:	4811      	ldr	r0, [pc, #68]	; (80006c8 <chordScreen+0x74>)
 8000684:	f000 fca0 	bl	8000fc8 <lcd_string_buff>
	lcd_string_buff( str_chordInv[chordInv]);
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <chordScreen+0x78>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a10      	ldr	r2, [pc, #64]	; (80006d0 <chordScreen+0x7c>)
 800068e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fc98 	bl	8000fc8 <lcd_string_buff>
	lcd_cursor_buff(1,2);
 8000698:	2102      	movs	r1, #2
 800069a:	2001      	movs	r0, #1
 800069c:	f000 fc10 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("Grabar acorde");
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <chordScreen+0x80>)
 80006a2:	f000 fc91 	bl	8000fc8 <lcd_string_buff>

	lcd_cursor_buff(0, chordSelect_cursor);
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <chordScreen+0x84>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4619      	mov	r1, r3
 80006ac:	2000      	movs	r0, #0
 80006ae:	f000 fc07 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff(">");
 80006b2:	480a      	ldr	r0, [pc, #40]	; (80006dc <chordScreen+0x88>)
 80006b4:	f000 fc88 	bl	8000fc8 <lcd_string_buff>

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	0800c850 	.word	0x0800c850
 80006c0:	200003c0 	.word	0x200003c0
 80006c4:	20000030 	.word	0x20000030
 80006c8:	0800c85c 	.word	0x0800c85c
 80006cc:	200003c4 	.word	0x200003c4
 80006d0:	20000050 	.word	0x20000050
 80006d4:	0800c864 	.word	0x0800c864
 80006d8:	200003b8 	.word	0x200003b8
 80006dc:	0800c874 	.word	0x0800c874

080006e0 <mainScreen>:
	Parameters: void

	Returns:	void
*/

void mainScreen(void){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

	extern uint8_t sustainMode;
	extern uint8_t acorde;

  	lcd_clearScreen_buff();
 80006e4:	f000 fbd6 	bl	8000e94 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 80006e8:	2100      	movs	r1, #0
 80006ea:	2000      	movs	r0, #0
 80006ec:	f000 fbe8 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("Afinacion: ");
 80006f0:	4827      	ldr	r0, [pc, #156]	; (8000790 <mainScreen+0xb0>)
 80006f2:	f000 fc69 	bl	8000fc8 <lcd_string_buff>
	lcd_string_buff(str_tunne[firstDoTunning - 48]);
 80006f6:	4b27      	ldr	r3, [pc, #156]	; (8000794 <mainScreen+0xb4>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	3b30      	subs	r3, #48	; 0x30
 80006fc:	4a26      	ldr	r2, [pc, #152]	; (8000798 <mainScreen+0xb8>)
 80006fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fc60 	bl	8000fc8 <lcd_string_buff>
	lcd_cursor_buff(0,1);
 8000708:	2101      	movs	r1, #1
 800070a:	2000      	movs	r0, #0
 800070c:	f000 fbd8 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("Octava: ");
 8000710:	4822      	ldr	r0, [pc, #136]	; (800079c <mainScreen+0xbc>)
 8000712:	f000 fc59 	bl	8000fc8 <lcd_string_buff>
	lcd_string_buff(str_octava[octava + 1]);
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <mainScreen+0xc0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	3301      	adds	r3, #1
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <mainScreen+0xc4>)
 800071e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000722:	4618      	mov	r0, r3
 8000724:	f000 fc50 	bl	8000fc8 <lcd_string_buff>
	lcd_cursor_buff(0,2);
 8000728:	2102      	movs	r1, #2
 800072a:	2000      	movs	r0, #0
 800072c:	f000 fbc8 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("Sustain: ");
 8000730:	481d      	ldr	r0, [pc, #116]	; (80007a8 <mainScreen+0xc8>)
 8000732:	f000 fc49 	bl	8000fc8 <lcd_string_buff>
	switch (sustainMode){
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <mainScreen+0xcc>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d007      	beq.n	800074e <mainScreen+0x6e>
 800073e:	2b02      	cmp	r3, #2
 8000740:	d009      	beq.n	8000756 <mainScreen+0x76>
 8000742:	2b00      	cmp	r3, #0
 8000744:	d10b      	bne.n	800075e <mainScreen+0x7e>
		case 0:
			lcd_string_buff("OFF");
 8000746:	481a      	ldr	r0, [pc, #104]	; (80007b0 <mainScreen+0xd0>)
 8000748:	f000 fc3e 	bl	8000fc8 <lcd_string_buff>
		break;
 800074c:	e007      	b.n	800075e <mainScreen+0x7e>
		case 1:
			lcd_string_buff("smart");
 800074e:	4819      	ldr	r0, [pc, #100]	; (80007b4 <mainScreen+0xd4>)
 8000750:	f000 fc3a 	bl	8000fc8 <lcd_string_buff>
		break;
 8000754:	e003      	b.n	800075e <mainScreen+0x7e>
		case 2:
			lcd_string_buff("clasico");
 8000756:	4818      	ldr	r0, [pc, #96]	; (80007b8 <mainScreen+0xd8>)
 8000758:	f000 fc36 	bl	8000fc8 <lcd_string_buff>
		break;
 800075c:	bf00      	nop
	}//end switch.
	lcd_cursor_buff(0,3);
 800075e:	2103      	movs	r1, #3
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fbad 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("Acordes: ");
 8000766:	4815      	ldr	r0, [pc, #84]	; (80007bc <mainScreen+0xdc>)
 8000768:	f000 fc2e 	bl	8000fc8 <lcd_string_buff>
	switch (acorde){
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <mainScreen+0xe0>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d002      	beq.n	800077a <mainScreen+0x9a>
 8000774:	2b01      	cmp	r3, #1
 8000776:	d004      	beq.n	8000782 <mainScreen+0xa2>
			lcd_string_buff("ON");
		break;
	}//end switch.


}
 8000778:	e007      	b.n	800078a <mainScreen+0xaa>
			lcd_string_buff("OFF");
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <mainScreen+0xd0>)
 800077c:	f000 fc24 	bl	8000fc8 <lcd_string_buff>
		break;
 8000780:	e003      	b.n	800078a <mainScreen+0xaa>
			lcd_string_buff("ON");
 8000782:	4810      	ldr	r0, [pc, #64]	; (80007c4 <mainScreen+0xe4>)
 8000784:	f000 fc20 	bl	8000fc8 <lcd_string_buff>
		break;
 8000788:	bf00      	nop
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	0800c878 	.word	0x0800c878
 8000794:	200003bc 	.word	0x200003bc
 8000798:	20000000 	.word	0x20000000
 800079c:	0800c884 	.word	0x0800c884
 80007a0:	200002f0 	.word	0x200002f0
 80007a4:	2000005c 	.word	0x2000005c
 80007a8:	0800c890 	.word	0x0800c890
 80007ac:	20000368 	.word	0x20000368
 80007b0:	0800c89c 	.word	0x0800c89c
 80007b4:	0800c8a0 	.word	0x0800c8a0
 80007b8:	0800c8a8 	.word	0x0800c8a8
 80007bc:	0800c8b0 	.word	0x0800c8b0
 80007c0:	20000374 	.word	0x20000374
 80007c4:	0800c8bc 	.word	0x0800c8bc

080007c8 <tunneScreen>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void tunneScreen(void){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 80007cc:	f000 fb62 	bl	8000e94 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 80007d0:	2100      	movs	r1, #0
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 fb74 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("AFINACION: ");
 80007d8:	4806      	ldr	r0, [pc, #24]	; (80007f4 <tunneScreen+0x2c>)
 80007da:	f000 fbf5 	bl	8000fc8 <lcd_string_buff>
	lcd_string_buff(str_tunne[firstDoTunning - 48]);
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <tunneScreen+0x30>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	3b30      	subs	r3, #48	; 0x30
 80007e4:	4a05      	ldr	r2, [pc, #20]	; (80007fc <tunneScreen+0x34>)
 80007e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fbec 	bl	8000fc8 <lcd_string_buff>
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	0800c8c0 	.word	0x0800c8c0
 80007f8:	200003bc 	.word	0x200003bc
 80007fc:	20000000 	.word	0x20000000

08000800 <on_off_octave>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void on_off_octave (void){
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 8000804:	f000 fb46 	bl	8000e94 <lcd_clearScreen_buff>
	lcd_cursor_buff(3,2);
 8000808:	2102      	movs	r1, #2
 800080a:	2003      	movs	r0, #3
 800080c:	f000 fb58 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("Octava:  ");
 8000810:	4806      	ldr	r0, [pc, #24]	; (800082c <on_off_octave+0x2c>)
 8000812:	f000 fbd9 	bl	8000fc8 <lcd_string_buff>
	lcd_string_buff(str_octava[octava + 1]);
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <on_off_octave+0x30>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	3301      	adds	r3, #1
 800081c:	4a05      	ldr	r2, [pc, #20]	; (8000834 <on_off_octave+0x34>)
 800081e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fbd0 	bl	8000fc8 <lcd_string_buff>

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	0800c8e4 	.word	0x0800c8e4
 8000830:	200002f0 	.word	0x200002f0
 8000834:	2000005c 	.word	0x2000005c

08000838 <recuest_footkey>:
	Parameter: void

	Returns:	void
*/

void recuest_footkey (void){
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 800083c:	f000 fb2a 	bl	8000e94 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 8000840:	2100      	movs	r1, #0
 8000842:	2000      	movs	r0, #0
 8000844:	f000 fb3c 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("Pulse una tecla para");
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <recuest_footkey+0x28>)
 800084a:	f000 fbbd 	bl	8000fc8 <lcd_string_buff>
	lcd_cursor_buff(0,1);
 800084e:	2101      	movs	r1, #1
 8000850:	2000      	movs	r0, #0
 8000852:	f000 fb35 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("grabar el acorde...");
 8000856:	4803      	ldr	r0, [pc, #12]	; (8000864 <recuest_footkey+0x2c>)
 8000858:	f000 fbb6 	bl	8000fc8 <lcd_string_buff>

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	0800c8f0 	.word	0x0800c8f0
 8000864:	0800c908 	.word	0x0800c908

08000868 <pop_up_savedChord>:
	Parameter: void

	Returns:	void
*/

void pop_up_savedChord (uint8_t fk){
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]

	lcd_clearScreen_buff();
 8000872:	f000 fb0f 	bl	8000e94 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,1);
 8000876:	2101      	movs	r1, #1
 8000878:	2000      	movs	r0, #0
 800087a:	f000 fb21 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("ACORDE GRABADO EN LA");
 800087e:	480a      	ldr	r0, [pc, #40]	; (80008a8 <pop_up_savedChord+0x40>)
 8000880:	f000 fba2 	bl	8000fc8 <lcd_string_buff>
	lcd_cursor_buff(0,2);
 8000884:	2102      	movs	r1, #2
 8000886:	2000      	movs	r0, #0
 8000888:	f000 fb1a 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("TECLA ");
 800088c:	4807      	ldr	r0, [pc, #28]	; (80008ac <pop_up_savedChord+0x44>)
 800088e:	f000 fb9b 	bl	8000fc8 <lcd_string_buff>
	lcd_string_buff(str_tunne[fk]);
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <pop_up_savedChord+0x48>)
 8000896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fb94 	bl	8000fc8 <lcd_string_buff>

}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	0800c91c 	.word	0x0800c91c
 80008ac:	0800c934 	.word	0x0800c934
 80008b0:	20000000 	.word	0x20000000

080008b4 <pop_up_sustain>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void pop_up_sustain (void){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

	extern uint8_t sustainMode;

	lcd_clearScreen_buff();
 80008b8:	f000 faec 	bl	8000e94 <lcd_clearScreen_buff>
	lcd_cursor_buff(2,1);
 80008bc:	2101      	movs	r1, #1
 80008be:	2002      	movs	r0, #2
 80008c0:	f000 fafe 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("Sustain: ");
 80008c4:	480c      	ldr	r0, [pc, #48]	; (80008f8 <pop_up_sustain+0x44>)
 80008c6:	f000 fb7f 	bl	8000fc8 <lcd_string_buff>
	switch (sustainMode){
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <pop_up_sustain+0x48>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d008      	beq.n	80008e4 <pop_up_sustain+0x30>
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d00a      	beq.n	80008ec <pop_up_sustain+0x38>
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d000      	beq.n	80008dc <pop_up_sustain+0x28>
		case 2:
			lcd_string_buff("clasico");
		break;
	}//end switch.

}
 80008da:	e00b      	b.n	80008f4 <pop_up_sustain+0x40>
			lcd_string_buff("OFF");
 80008dc:	4808      	ldr	r0, [pc, #32]	; (8000900 <pop_up_sustain+0x4c>)
 80008de:	f000 fb73 	bl	8000fc8 <lcd_string_buff>
		break;
 80008e2:	e007      	b.n	80008f4 <pop_up_sustain+0x40>
			lcd_string_buff("smart");
 80008e4:	4807      	ldr	r0, [pc, #28]	; (8000904 <pop_up_sustain+0x50>)
 80008e6:	f000 fb6f 	bl	8000fc8 <lcd_string_buff>
		break;
 80008ea:	e003      	b.n	80008f4 <pop_up_sustain+0x40>
			lcd_string_buff("clasico");
 80008ec:	4806      	ldr	r0, [pc, #24]	; (8000908 <pop_up_sustain+0x54>)
 80008ee:	f000 fb6b 	bl	8000fc8 <lcd_string_buff>
		break;
 80008f2:	bf00      	nop
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	0800c890 	.word	0x0800c890
 80008fc:	20000368 	.word	0x20000368
 8000900:	0800c89c 	.word	0x0800c89c
 8000904:	0800c8a0 	.word	0x0800c8a0
 8000908:	0800c8a8 	.word	0x0800c8a8

0800090c <pop_up_cancel>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void pop_up_cancel (void){
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 8000910:	f000 fac0 	bl	8000e94 <lcd_clearScreen_buff>
	lcd_cursor_buff(2,1);
 8000914:	2101      	movs	r1, #1
 8000916:	2002      	movs	r0, #2
 8000918:	f000 fad2 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("ACCION CANCELADA");
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <pop_up_cancel+0x1c>)
 800091e:	f000 fb53 	bl	8000fc8 <lcd_string_buff>

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	0800c93c 	.word	0x0800c93c

0800092c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000932:	463b      	mov	r3, r7
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <MX_ADC1_Init+0x98>)
 8000940:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <MX_ADC1_Init+0x9c>)
 8000942:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <MX_ADC1_Init+0x98>)
 8000946:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800094a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800094c:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <MX_ADC1_Init+0x98>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_ADC1_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_ADC1_Init+0x98>)
 800095a:	2200      	movs	r2, #0
 800095c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <MX_ADC1_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_ADC1_Init+0x98>)
 8000968:	2200      	movs	r2, #0
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_ADC1_Init+0x98>)
 800096e:	4a17      	ldr	r2, [pc, #92]	; (80009cc <MX_ADC1_Init+0xa0>)
 8000970:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_ADC1_Init+0x98>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_ADC1_Init+0x98>)
 800097a:	2201      	movs	r2, #1
 800097c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_ADC1_Init+0x98>)
 8000980:	2200      	movs	r2, #0
 8000982:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_ADC1_Init+0x98>)
 8000988:	2201      	movs	r2, #1
 800098a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <MX_ADC1_Init+0x98>)
 800098e:	f001 fe6d 	bl	800266c <HAL_ADC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000998:	f001 f996 	bl	8001cc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800099c:	2308      	movs	r3, #8
 800099e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_ADC1_Init+0x98>)
 80009ae:	f001 fea1 	bl	80026f4 <HAL_ADC_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009b8:	f001 f986 	bl	8001cc8 <Error_Handler>
  }

}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200003cc 	.word	0x200003cc
 80009c8:	40012000 	.word	0x40012000
 80009cc:	0f000001 	.word	0x0f000001

080009d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a24      	ldr	r2, [pc, #144]	; (8000a80 <HAL_ADC_MspInit+0xb0>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d141      	bne.n	8000a76 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <HAL_ADC_MspInit+0xb4>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	4a22      	ldr	r2, [pc, #136]	; (8000a84 <HAL_ADC_MspInit+0xb4>)
 80009fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a00:	6453      	str	r3, [r2, #68]	; 0x44
 8000a02:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <HAL_ADC_MspInit+0xb4>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <HAL_ADC_MspInit+0xb4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <HAL_ADC_MspInit+0xb4>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <HAL_ADC_MspInit+0xb4>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_ADC_MspInit+0xb4>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <HAL_ADC_MspInit+0xb4>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_ADC_MspInit+0xb4>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a46:	2303      	movs	r3, #3
 8000a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	480b      	ldr	r0, [pc, #44]	; (8000a88 <HAL_ADC_MspInit+0xb8>)
 8000a5a:	f002 faa5 	bl	8002fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a62:	2303      	movs	r3, #3
 8000a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4806      	ldr	r0, [pc, #24]	; (8000a8c <HAL_ADC_MspInit+0xbc>)
 8000a72:	f002 fa99 	bl	8002fa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	; 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40012000 	.word	0x40012000
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020800 	.word	0x40020800
 8000a8c:	40020400 	.word	0x40020400

08000a90 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000a96:	463b      	mov	r3, r7
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000a9e:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_DAC_Init+0x60>)
 8000aa0:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <MX_DAC_Init+0x64>)
 8000aa2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000aa4:	4812      	ldr	r0, [pc, #72]	; (8000af0 <MX_DAC_Init+0x60>)
 8000aa6:	f002 f954 	bl	8002d52 <HAL_DAC_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ab0:	f001 f90a 	bl	8001cc8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000abc:	463b      	mov	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480b      	ldr	r0, [pc, #44]	; (8000af0 <MX_DAC_Init+0x60>)
 8000ac4:	f002 f9cd 	bl	8002e62 <HAL_DAC_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000ace:	f001 f8fb 	bl	8001cc8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	2210      	movs	r2, #16
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_DAC_Init+0x60>)
 8000ada:	f002 f9c2 	bl	8002e62 <HAL_DAC_ConfigChannel>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000ae4:	f001 f8f0 	bl	8001cc8 <Error_Handler>
  }

}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000414 	.word	0x20000414
 8000af4:	40007400 	.word	0x40007400

08000af8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <HAL_DAC_MspInit+0x7c>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d127      	bne.n	8000b6a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <HAL_DAC_MspInit+0x80>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <HAL_DAC_MspInit+0x80>)
 8000b24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_DAC_MspInit+0x80>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <HAL_DAC_MspInit+0x80>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <HAL_DAC_MspInit+0x80>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <HAL_DAC_MspInit+0x80>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b52:	2330      	movs	r3, #48	; 0x30
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b56:	2303      	movs	r3, #3
 8000b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <HAL_DAC_MspInit+0x84>)
 8000b66:	f002 fa1f 	bl	8002fa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	3728      	adds	r7, #40	; 0x28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40007400 	.word	0x40007400
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020000 	.word	0x40020000

08000b80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a33      	ldr	r2, [pc, #204]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b31      	ldr	r3, [pc, #196]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a2c      	ldr	r2, [pc, #176]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a25      	ldr	r2, [pc, #148]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a1e      	ldr	r2, [pc, #120]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_VERDE_Pin|LED_NARANJA_Pin|LED_ROJO_Pin|LED_AZUL_Pin
 8000c22:	2200      	movs	r2, #0
 8000c24:	f24f 01e0 	movw	r1, #61664	; 0xf0e0
 8000c28:	4811      	ldr	r0, [pc, #68]	; (8000c70 <MX_GPIO_Init+0xf0>)
 8000c2a:	f002 fb57 	bl	80032dc <HAL_GPIO_WritePin>
                          |PL_bot_Pin|CE_bot_Pin|ST_leds_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOTON_AZUL_Pin;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOTON_AZUL_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480c      	ldr	r0, [pc, #48]	; (8000c74 <MX_GPIO_Init+0xf4>)
 8000c42:	f002 f9b1 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_VERDE_Pin|LED_NARANJA_Pin|LED_ROJO_Pin|LED_AZUL_Pin
 8000c46:	f24f 03e0 	movw	r3, #61664	; 0xf0e0
 8000c4a:	617b      	str	r3, [r7, #20]
                          |PL_bot_Pin|CE_bot_Pin|ST_leds_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_GPIO_Init+0xf0>)
 8000c60:	f002 f9a2 	bl	8002fa8 <HAL_GPIO_Init>

}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	; 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020c00 	.word	0x40020c00
 8000c74:	40020000 	.word	0x40020000

08000c78 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c7e:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <MX_I2C1_Init+0x54>)
 8000c80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <MX_I2C1_Init+0x58>)
 8000c86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000cb6:	f002 fb2b 	bl	8003310 <HAL_I2C_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cc0:	f001 f802 	bl	8001cc8 <Error_Handler>
  }

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000428 	.word	0x20000428
 8000ccc:	40005400 	.word	0x40005400
 8000cd0:	00061a80 	.word	0x00061a80

08000cd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a21      	ldr	r2, [pc, #132]	; (8000d78 <HAL_I2C_MspInit+0xa4>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d13b      	bne.n	8000d6e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <HAL_I2C_MspInit+0xa8>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a1f      	ldr	r2, [pc, #124]	; (8000d7c <HAL_I2C_MspInit+0xa8>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <HAL_I2C_MspInit+0xa8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d12:	23c0      	movs	r3, #192	; 0xc0
 8000d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d16:	2312      	movs	r3, #18
 8000d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d22:	2304      	movs	r3, #4
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4814      	ldr	r0, [pc, #80]	; (8000d80 <HAL_I2C_MspInit+0xac>)
 8000d2e:	f002 f93b 	bl	8002fa8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_I2C_MspInit+0xa8>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <HAL_I2C_MspInit+0xa8>)
 8000d3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d40:	6413      	str	r3, [r2, #64]	; 0x40
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_I2C_MspInit+0xa8>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2100      	movs	r1, #0
 8000d52:	201f      	movs	r0, #31
 8000d54:	f001 ffc7 	bl	8002ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d58:	201f      	movs	r0, #31
 8000d5a:	f001 ffe0 	bl	8002d1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	2020      	movs	r0, #32
 8000d64:	f001 ffbf 	bl	8002ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d68:	2020      	movs	r0, #32
 8000d6a:	f001 ffd8 	bl	8002d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020400 	.word	0x40020400

08000d84 <__lcd_send_cmd>:
uint8_t flag_sendLcd = 1;
uint8_t I2CtxComplete = 1;

/*Used by lcd_init() only*/
void __lcd_send_cmd (char cmd)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af02      	add	r7, sp, #8
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f023 030f 	bic.w	r3, r3, #15
 8000d94:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	011b      	lsls	r3, r3, #4
 8000d9a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	f043 030c 	orr.w	r3, r3, #12
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000db0:	7bbb      	ldrb	r3, [r7, #14]
 8000db2:	f043 030c 	orr.w	r3, r3, #12
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000dba:	7bbb      	ldrb	r3, [r7, #14]
 8000dbc:	f043 0308 	orr.w	r3, r3, #8
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <__lcd_send_cmd+0x60>)
 8000dc6:	6818      	ldr	r0, [r3, #0]
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <__lcd_send_cmd+0x64>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b299      	uxth	r1, r3
 8000dce:	f107 0208 	add.w	r2, r7, #8
 8000dd2:	2364      	movs	r3, #100	; 0x64
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	f002 fbd2 	bl	8003580 <HAL_I2C_Master_Transmit>
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000728 	.word	0x20000728
 8000de8:	20000724 	.word	0x20000724

08000dec <__lcd_send_cmd_buff>:

void __lcd_send_cmd_buff (char cmd)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	f023 030f 	bic.w	r3, r3, #15
 8000dfc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	011b      	lsls	r3, r3, #4
 8000e02:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	f043 030c 	orr.w	r3, r3, #12
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000e18:	7bbb      	ldrb	r3, [r7, #14]
 8000e1a:	f043 030c 	orr.w	r3, r3, #12
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e22:	7bbb      	ldrb	r3, [r7, #14]
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
	__add_to_lcdBuff((uint8_t*)data_t,4);
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	2104      	movs	r1, #4
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f8dc 	bl	8000ff0 <__add_to_lcdBuff>
}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <__lcd_send_data_buff>:


void __lcd_send_data_buff (char data)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	f023 030f 	bic.w	r3, r3, #15
 8000e50:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	f043 030d 	orr.w	r3, r3, #13
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	f043 0309 	orr.w	r3, r3, #9
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000e6c:	7bbb      	ldrb	r3, [r7, #14]
 8000e6e:	f043 030d 	orr.w	r3, r3, #13
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000e76:	7bbb      	ldrb	r3, [r7, #14]
 8000e78:	f043 0309 	orr.w	r3, r3, #9
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
	__add_to_lcdBuff((uint8_t*)data_t,4);
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	2104      	movs	r1, #4
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f8b2 	bl	8000ff0 <__add_to_lcdBuff>
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <lcd_clearScreen_buff>:


void lcd_clearScreen_buff (void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
	__lcd_send_cmd_buff (0x80);
 8000e9a:	2080      	movs	r0, #128	; 0x80
 8000e9c:	f7ff ffa6 	bl	8000dec <__lcd_send_cmd_buff>
	for (int i=0; i<80; i++)
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	e005      	b.n	8000eb2 <lcd_clearScreen_buff+0x1e>
	{
		__lcd_send_data_buff (' ');
 8000ea6:	2020      	movs	r0, #32
 8000ea8:	f7ff ffca 	bl	8000e40 <__lcd_send_data_buff>
	for (int i=0; i<80; i++)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b4f      	cmp	r3, #79	; 0x4f
 8000eb6:	ddf6      	ble.n	8000ea6 <lcd_clearScreen_buff+0x12>
	}
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <lcd_cursor_buff>:


void lcd_cursor_buff(int x, int y)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
    switch (y){
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d82b      	bhi.n	8000f28 <lcd_cursor_buff+0x68>
 8000ed0:	a201      	add	r2, pc, #4	; (adr r2, 8000ed8 <lcd_cursor_buff+0x18>)
 8000ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed6:	bf00      	nop
 8000ed8:	08000ee9 	.word	0x08000ee9
 8000edc:	08000ef9 	.word	0x08000ef9
 8000ee0:	08000f09 	.word	0x08000f09
 8000ee4:	08000f19 	.word	0x08000f19
    	case 0:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE1 + x);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	3b80      	subs	r3, #128	; 0x80
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff7b 	bl	8000dec <__lcd_send_cmd_buff>
    	break;
 8000ef6:	e017      	b.n	8000f28 <lcd_cursor_buff+0x68>
    	case 1:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE2 + x);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	3b40      	subs	r3, #64	; 0x40
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff73 	bl	8000dec <__lcd_send_cmd_buff>
    	break;
 8000f06:	e00f      	b.n	8000f28 <lcd_cursor_buff+0x68>
    	case 2:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE3 + x);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	3b6c      	subs	r3, #108	; 0x6c
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff6b 	bl	8000dec <__lcd_send_cmd_buff>
    	break;
 8000f16:	e007      	b.n	8000f28 <lcd_cursor_buff+0x68>
    	case 3:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE4 + x);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	3b2c      	subs	r3, #44	; 0x2c
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff63 	bl	8000dec <__lcd_send_cmd_buff>
    	break;
 8000f26:	bf00      	nop
    }
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <lcd_init>:


void lcd_init (I2C_HandleTypeDef* hi2c, uint8_t i2c_address)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]
	i2c_handler = hi2c; //set the i2c handler struct.
 8000f3c:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <lcd_init+0x90>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
	SLAVE_ADDRESS_LCD = (i2c_address << 1); //set the lcd i2c address (left alignment).
 8000f42:	78fb      	ldrb	r3, [r7, #3]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <lcd_init+0x94>)
 8000f4a:	701a      	strb	r2, [r3, #0]

	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000f4c:	2032      	movs	r0, #50	; 0x32
 8000f4e:	f001 fb6b 	bl	8002628 <HAL_Delay>
	__lcd_send_cmd (0x30);
 8000f52:	2030      	movs	r0, #48	; 0x30
 8000f54:	f7ff ff16 	bl	8000d84 <__lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000f58:	2005      	movs	r0, #5
 8000f5a:	f001 fb65 	bl	8002628 <HAL_Delay>
	__lcd_send_cmd (0x30);
 8000f5e:	2030      	movs	r0, #48	; 0x30
 8000f60:	f7ff ff10 	bl	8000d84 <__lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000f64:	2001      	movs	r0, #1
 8000f66:	f001 fb5f 	bl	8002628 <HAL_Delay>
	__lcd_send_cmd (0x30);
 8000f6a:	2030      	movs	r0, #48	; 0x30
 8000f6c:	f7ff ff0a 	bl	8000d84 <__lcd_send_cmd>
	HAL_Delay(10);
 8000f70:	200a      	movs	r0, #10
 8000f72:	f001 fb59 	bl	8002628 <HAL_Delay>
	__lcd_send_cmd (0x20);  // 4bit mode
 8000f76:	2020      	movs	r0, #32
 8000f78:	f7ff ff04 	bl	8000d84 <__lcd_send_cmd>
	HAL_Delay(10);
 8000f7c:	200a      	movs	r0, #10
 8000f7e:	f001 fb53 	bl	8002628 <HAL_Delay>

  // dislay initialisation
	__lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000f82:	2028      	movs	r0, #40	; 0x28
 8000f84:	f7ff fefe 	bl	8000d84 <__lcd_send_cmd>
	HAL_Delay(1);
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f001 fb4d 	bl	8002628 <HAL_Delay>
	__lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000f8e:	2008      	movs	r0, #8
 8000f90:	f7ff fef8 	bl	8000d84 <__lcd_send_cmd>
	HAL_Delay(1);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f001 fb47 	bl	8002628 <HAL_Delay>
	__lcd_send_cmd (0x01);  // clear display
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f7ff fef2 	bl	8000d84 <__lcd_send_cmd>
	HAL_Delay(2);
 8000fa0:	2002      	movs	r0, #2
 8000fa2:	f001 fb41 	bl	8002628 <HAL_Delay>
	__lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000fa6:	2006      	movs	r0, #6
 8000fa8:	f7ff feec 	bl	8000d84 <__lcd_send_cmd>
	HAL_Delay(1);
 8000fac:	2001      	movs	r0, #1
 8000fae:	f001 fb3b 	bl	8002628 <HAL_Delay>
	__lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000fb2:	200c      	movs	r0, #12
 8000fb4:	f7ff fee6 	bl	8000d84 <__lcd_send_cmd>
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000728 	.word	0x20000728
 8000fc4:	20000724 	.word	0x20000724

08000fc8 <lcd_string_buff>:


void lcd_string_buff (char *str)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	while (*str) __lcd_send_data_buff(*str++);
 8000fd0:	e006      	b.n	8000fe0 <lcd_string_buff+0x18>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	607a      	str	r2, [r7, #4]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ff30 	bl	8000e40 <__lcd_send_data_buff>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1f4      	bne.n	8000fd2 <lcd_string_buff+0xa>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <__add_to_lcdBuff>:


void __add_to_lcdBuff(uint8_t* data, uint8_t sizeData){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
	while (i < sizeData){
 8001000:	e018      	b.n	8001034 <__add_to_lcdBuff+0x44>
		lcd_circ_buffer[lcd_circ_buff_in] = *(data + i);
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	4413      	add	r3, r2
 8001008:	4a11      	ldr	r2, [pc, #68]	; (8001050 <__add_to_lcdBuff+0x60>)
 800100a:	8812      	ldrh	r2, [r2, #0]
 800100c:	7819      	ldrb	r1, [r3, #0]
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <__add_to_lcdBuff+0x64>)
 8001010:	5499      	strb	r1, [r3, r2]
		lcd_circ_buff_in++;
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <__add_to_lcdBuff+0x60>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	3301      	adds	r3, #1
 8001018:	b29a      	uxth	r2, r3
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <__add_to_lcdBuff+0x60>)
 800101c:	801a      	strh	r2, [r3, #0]
		i++;
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	3301      	adds	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
		if (lcd_circ_buff_in == LCD_CIRCBUFF_MAX){
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <__add_to_lcdBuff+0x60>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800102c:	d102      	bne.n	8001034 <__add_to_lcdBuff+0x44>
			lcd_circ_buff_in = 0;
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <__add_to_lcdBuff+0x60>)
 8001030:	2200      	movs	r2, #0
 8001032:	801a      	strh	r2, [r3, #0]
	while (i < sizeData){
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	78fb      	ldrb	r3, [r7, #3]
 8001038:	429a      	cmp	r2, r3
 800103a:	d3e2      	bcc.n	8001002 <__add_to_lcdBuff+0x12>
		}
	}
	flag_sendLcd = 1;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <__add_to_lcdBuff+0x68>)
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000328 	.word	0x20000328
 8001054:	2000047c 	.word	0x2000047c
 8001058:	20000068 	.word	0x20000068

0800105c <__lcd_sendBuff_IT>:


void __lcd_sendBuff_IT (void){
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
	uint16_t I2C_Tx_ptr;
	uint16_t I2C_Tx_length;

	//if (I2CtxComplete != 0){ //si no termino la transmision anterior...

		if (lcd_circ_buff_out == LCD_CIRCBUFF_MAX){
 8001062:	4b27      	ldr	r3, [pc, #156]	; (8001100 <__lcd_sendBuff_IT+0xa4>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800106a:	d102      	bne.n	8001072 <__lcd_sendBuff_IT+0x16>
			lcd_circ_buff_out = 0;
 800106c:	4b24      	ldr	r3, [pc, #144]	; (8001100 <__lcd_sendBuff_IT+0xa4>)
 800106e:	2200      	movs	r2, #0
 8001070:	801a      	strh	r2, [r3, #0]
		}

		if (lcd_circ_buff_out == lcd_circ_buff_in){
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <__lcd_sendBuff_IT+0xa4>)
 8001074:	881a      	ldrh	r2, [r3, #0]
 8001076:	4b23      	ldr	r3, [pc, #140]	; (8001104 <__lcd_sendBuff_IT+0xa8>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	429a      	cmp	r2, r3
 800107c:	d103      	bne.n	8001086 <__lcd_sendBuff_IT+0x2a>
			//no hay transmisión acá
			flag_sendLcd = 0;
 800107e:	4b22      	ldr	r3, [pc, #136]	; (8001108 <__lcd_sendBuff_IT+0xac>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
			return;
 8001084:	e038      	b.n	80010f8 <__lcd_sendBuff_IT+0x9c>
		}

		if (lcd_circ_buff_out > lcd_circ_buff_in){
 8001086:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <__lcd_sendBuff_IT+0xa4>)
 8001088:	881a      	ldrh	r2, [r3, #0]
 800108a:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <__lcd_sendBuff_IT+0xa8>)
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	d907      	bls.n	80010a2 <__lcd_sendBuff_IT+0x46>
			lcd_tx_length = LCD_CIRCBUFF_MAX - lcd_circ_buff_out;//transmite solo hasta el final del buffer, para luego reacomodar los punteros.
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <__lcd_sendBuff_IT+0xa4>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	f5c3 732a 	rsb	r3, r3, #680	; 0x2a8
 800109a:	b29a      	uxth	r2, r3
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <__lcd_sendBuff_IT+0xb0>)
 800109e:	801a      	strh	r2, [r3, #0]
 80010a0:	e007      	b.n	80010b2 <__lcd_sendBuff_IT+0x56>
		}else{
			lcd_tx_length = lcd_circ_buff_in - lcd_circ_buff_out;
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <__lcd_sendBuff_IT+0xa8>)
 80010a4:	881a      	ldrh	r2, [r3, #0]
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <__lcd_sendBuff_IT+0xa4>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <__lcd_sendBuff_IT+0xb0>)
 80010b0:	801a      	strh	r2, [r3, #0]
//		I2C_Tx_ptr = lcd_circ_buff_out;
//		I2C_Tx_length = lcd_tx_length;
//		lcd_circ_buff_out += lcd_tx_length;
//		lcd_tx_length = 0;

		if (I2CtxComplete != 0){
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <__lcd_sendBuff_IT+0xb4>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d01e      	beq.n	80010f8 <__lcd_sendBuff_IT+0x9c>
			I2CtxComplete = 0;
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <__lcd_sendBuff_IT+0xb4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]

			I2C_Tx_ptr = lcd_circ_buff_out;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <__lcd_sendBuff_IT+0xa4>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	80fb      	strh	r3, [r7, #6]
			I2C_Tx_length = lcd_tx_length;
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <__lcd_sendBuff_IT+0xb0>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	80bb      	strh	r3, [r7, #4]
			lcd_circ_buff_out += lcd_tx_length;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <__lcd_sendBuff_IT+0xa4>)
 80010ce:	881a      	ldrh	r2, [r3, #0]
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <__lcd_sendBuff_IT+0xb0>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	4413      	add	r3, r2
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <__lcd_sendBuff_IT+0xa4>)
 80010da:	801a      	strh	r2, [r3, #0]
			lcd_tx_length = 0;
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <__lcd_sendBuff_IT+0xb0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	801a      	strh	r2, [r3, #0]
			HAL_I2C_Master_Transmit_IT(i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) &lcd_circ_buffer[I2C_Tx_ptr],I2C_Tx_length);
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <__lcd_sendBuff_IT+0xb8>)
 80010e4:	6818      	ldr	r0, [r3, #0]
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <__lcd_sendBuff_IT+0xbc>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b299      	uxth	r1, r3
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <__lcd_sendBuff_IT+0xc0>)
 80010f0:	441a      	add	r2, r3
 80010f2:	88bb      	ldrh	r3, [r7, #4]
 80010f4:	f002 fb42 	bl	800377c <HAL_I2C_Master_Transmit_IT>
		}
	//}
}
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000032a 	.word	0x2000032a
 8001104:	20000328 	.word	0x20000328
 8001108:	20000068 	.word	0x20000068
 800110c:	2000032c 	.word	0x2000032c
 8001110:	20000069 	.word	0x20000069
 8001114:	20000728 	.word	0x20000728
 8001118:	20000724 	.word	0x20000724
 800111c:	2000047c 	.word	0x2000047c

08001120 <lcd_upDate_IT>:


void lcd_upDate_IT(void){
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	if (flag_sendLcd) __lcd_sendBuff_IT();
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <lcd_upDate_IT+0x14>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <lcd_upDate_IT+0x10>
 800112c:	f7ff ff96 	bl	800105c <__lcd_sendBuff_IT>
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000068 	.word	0x20000068

08001138 <_lcd_ISR>:


/* Insert the next function in your ISR*/
void _lcd_ISR (void){
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
	I2CtxComplete=1;
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <_lcd_ISR+0x14>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	20000069 	.word	0x20000069

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001156:	f001 f9f5 	bl	8002544 <HAL_Init>

  /* USER CODE BEGIN Init */
  firstDoTunning = 36;
 800115a:	4ba4      	ldr	r3, [pc, #656]	; (80013ec <main+0x29c>)
 800115c:	2224      	movs	r2, #36	; 0x24
 800115e:	701a      	strb	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001160:	f000 f96e 	bl	8001440 <SystemClock_Config>
   */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001164:	f7ff fd0c 	bl	8000b80 <MX_GPIO_Init>
  MX_DAC_Init();
 8001168:	f7ff fc92 	bl	8000a90 <MX_DAC_Init>
  MX_I2C1_Init();
 800116c:	f7ff fd84 	bl	8000c78 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001170:	f00a fca0 	bl	800bab4 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001174:	f001 f80e 	bl	8002194 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001178:	f001 f858 	bl	800222c <MX_TIM3_Init>
  MX_ADC1_Init();
 800117c:	f7ff fbd6 	bl	800092c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001180:	f001 f8e4 	bl	800234c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001184:	f001 f90c 	bl	80023a0 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8001188:	f000 fea0 	bl	8001ecc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  spi_74HC165_init(&hspi1, PL_bot_GPIO_Port, PL_bot_Pin, CE_bot_GPIO_Port, CE_bot_Pin);
 800118c:	2340      	movs	r3, #64	; 0x40
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	4b97      	ldr	r3, [pc, #604]	; (80013f0 <main+0x2a0>)
 8001192:	2220      	movs	r2, #32
 8001194:	4996      	ldr	r1, [pc, #600]	; (80013f0 <main+0x2a0>)
 8001196:	4897      	ldr	r0, [pc, #604]	; (80013f4 <main+0x2a4>)
 8001198:	f7ff f996 	bl	80004c8 <spi_74HC165_init>

  HAL_TIM_Base_Start_IT(&htim2); // 1 ms tick timer.
 800119c:	4896      	ldr	r0, [pc, #600]	; (80013f8 <main+0x2a8>)
 800119e:	f006 fcf2 	bl	8007b86 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); // 44100Hz timer.
 80011a2:	4896      	ldr	r0, [pc, #600]	; (80013fc <main+0x2ac>)
 80011a4:	f006 fcef 	bl	8007b86 <HAL_TIM_Base_Start_IT>

  osc_dac_init(&hdac, DAC_CHANNEL_1);
 80011a8:	2100      	movs	r1, #0
 80011aa:	4895      	ldr	r0, [pc, #596]	; (8001400 <main+0x2b0>)
 80011ac:	f000 fd94 	bl	8001cd8 <osc_dac_init>
  osc_setRatios(100, 100, 100);
 80011b0:	2264      	movs	r2, #100	; 0x64
 80011b2:	2164      	movs	r1, #100	; 0x64
 80011b4:	2064      	movs	r0, #100	; 0x64
 80011b6:	f000 fe5d 	bl	8001e74 <osc_setRatios>

  lcd_init(&hi2c1, 0x3f);
 80011ba:	213f      	movs	r1, #63	; 0x3f
 80011bc:	4891      	ldr	r0, [pc, #580]	; (8001404 <main+0x2b4>)
 80011be:	f7ff feb7 	bl	8000f30 <lcd_init>
  turnOnScreen();
 80011c2:	f7ff fa2b 	bl	800061c <turnOnScreen>
  mainScreen();
 80011c6:	f7ff fa8b 	bl	80006e0 <mainScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	switch (screenNum){
 80011ca:	4b8f      	ldr	r3, [pc, #572]	; (8001408 <main+0x2b8>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	3b03      	subs	r3, #3
 80011d0:	2b08      	cmp	r3, #8
 80011d2:	d856      	bhi.n	8001282 <main+0x132>
 80011d4:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <main+0x8c>)
 80011d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011da:	bf00      	nop
 80011dc:	08001201 	.word	0x08001201
 80011e0:	0800120f 	.word	0x0800120f
 80011e4:	0800121d 	.word	0x0800121d
 80011e8:	08001283 	.word	0x08001283
 80011ec:	0800122b 	.word	0x0800122b
 80011f0:	08001247 	.word	0x08001247
 80011f4:	08001239 	.word	0x08001239
 80011f8:	08001261 	.word	0x08001261
 80011fc:	0800126f 	.word	0x0800126f
	  		case MAIN_SCREEN:
	  			mainScreen();
 8001200:	f7ff fa6e 	bl	80006e0 <mainScreen>
	  			last_screenNum = screenNum;
 8001204:	4b80      	ldr	r3, [pc, #512]	; (8001408 <main+0x2b8>)
 8001206:	781a      	ldrb	r2, [r3, #0]
 8001208:	4b80      	ldr	r3, [pc, #512]	; (800140c <main+0x2bc>)
 800120a:	701a      	strb	r2, [r3, #0]
	  		break;
 800120c:	e03a      	b.n	8001284 <main+0x134>
	  		case CHORD_SCREEN:
	  			chordScreen();
 800120e:	f7ff fa21 	bl	8000654 <chordScreen>
	  			last_screenNum = screenNum;
 8001212:	4b7d      	ldr	r3, [pc, #500]	; (8001408 <main+0x2b8>)
 8001214:	781a      	ldrb	r2, [r3, #0]
 8001216:	4b7d      	ldr	r3, [pc, #500]	; (800140c <main+0x2bc>)
 8001218:	701a      	strb	r2, [r3, #0]
	  		break;
 800121a:	e033      	b.n	8001284 <main+0x134>
	  		case TUNNE_SCREEN:
	  			tunneScreen();
 800121c:	f7ff fad4 	bl	80007c8 <tunneScreen>
	  			last_screenNum = screenNum;
 8001220:	4b79      	ldr	r3, [pc, #484]	; (8001408 <main+0x2b8>)
 8001222:	781a      	ldrb	r2, [r3, #0]
 8001224:	4b79      	ldr	r3, [pc, #484]	; (800140c <main+0x2bc>)
 8001226:	701a      	strb	r2, [r3, #0]
	  		break;
 8001228:	e02c      	b.n	8001284 <main+0x134>
	  		case RECUEST_FOOTKEY_SCREEN:
	  			recuest_footkey();
 800122a:	f7ff fb05 	bl	8000838 <recuest_footkey>
	  			last_screenNum = screenNum; //this variable must store the CHORD_SCREEN value, to use it as return point.
 800122e:	4b76      	ldr	r3, [pc, #472]	; (8001408 <main+0x2b8>)
 8001230:	781a      	ldrb	r2, [r3, #0]
 8001232:	4b76      	ldr	r3, [pc, #472]	; (800140c <main+0x2bc>)
 8001234:	701a      	strb	r2, [r3, #0]
	  		break;
 8001236:	e025      	b.n	8001284 <main+0x134>
	  		case POPUP_OCTAVE:
	  			on_off_octave();
 8001238:	f7ff fae2 	bl	8000800 <on_off_octave>
	  			popup_time = 2000;
 800123c:	4b74      	ldr	r3, [pc, #464]	; (8001410 <main+0x2c0>)
 800123e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001242:	601a      	str	r2, [r3, #0]
	  		break;
 8001244:	e01e      	b.n	8001284 <main+0x134>
	  		case POPUP_SAVED_CHORD:
	  			pop_up_savedChord(lastKey_pos);
 8001246:	4b73      	ldr	r3, [pc, #460]	; (8001414 <main+0x2c4>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fb0c 	bl	8000868 <pop_up_savedChord>
	  			last_screenNum = CHORD_SCREEN;
 8001250:	4b6e      	ldr	r3, [pc, #440]	; (800140c <main+0x2bc>)
 8001252:	2204      	movs	r2, #4
 8001254:	701a      	strb	r2, [r3, #0]
	  			popup_time = 2000;
 8001256:	4b6e      	ldr	r3, [pc, #440]	; (8001410 <main+0x2c0>)
 8001258:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800125c:	601a      	str	r2, [r3, #0]
	  		break;
 800125e:	e011      	b.n	8001284 <main+0x134>
	  		case POPUP_SUSTAIN:
	  			pop_up_sustain();
 8001260:	f7ff fb28 	bl	80008b4 <pop_up_sustain>
	  			popup_time = 2000;
 8001264:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <main+0x2c0>)
 8001266:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800126a:	601a      	str	r2, [r3, #0]
	  		break;
 800126c:	e00a      	b.n	8001284 <main+0x134>
	  		case POPUP_CANCEL:
	  			pop_up_cancel();
 800126e:	f7ff fb4d 	bl	800090c <pop_up_cancel>
	  			popup_time = 2000;
 8001272:	4b67      	ldr	r3, [pc, #412]	; (8001410 <main+0x2c0>)
 8001274:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001278:	601a      	str	r2, [r3, #0]
	  			last_screenNum = CHORD_SCREEN;
 800127a:	4b64      	ldr	r3, [pc, #400]	; (800140c <main+0x2bc>)
 800127c:	2204      	movs	r2, #4
 800127e:	701a      	strb	r2, [r3, #0]
	  		break;
 8001280:	e000      	b.n	8001284 <main+0x134>
	  		default:
	  		break;
 8001282:	bf00      	nop
	  	}
	  	screenNum = NO_SCREEN;
 8001284:	4b60      	ldr	r3, [pc, #384]	; (8001408 <main+0x2b8>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]

	  	if (popup_timeUp){
 800128a:	4b63      	ldr	r3, [pc, #396]	; (8001418 <main+0x2c8>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00a      	beq.n	80012aa <main+0x15a>
	  		if (screenNum == NO_SCREEN) screenNum = last_screenNum;
 8001294:	4b5c      	ldr	r3, [pc, #368]	; (8001408 <main+0x2b8>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d103      	bne.n	80012a4 <main+0x154>
 800129c:	4b5b      	ldr	r3, [pc, #364]	; (800140c <main+0x2bc>)
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	4b59      	ldr	r3, [pc, #356]	; (8001408 <main+0x2b8>)
 80012a2:	701a      	strb	r2, [r3, #0]
	  		popup_timeUp = 0;
 80012a4:	4b5c      	ldr	r3, [pc, #368]	; (8001418 <main+0x2c8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
	  	}

	  	//botones y teclas
	  	buttonFall = last_button & ~read_button;
 80012aa:	4b5c      	ldr	r3, [pc, #368]	; (800141c <main+0x2cc>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	43da      	mvns	r2, r3
 80012b0:	4b5b      	ldr	r3, [pc, #364]	; (8001420 <main+0x2d0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4013      	ands	r3, r2
 80012b6:	4a5b      	ldr	r2, [pc, #364]	; (8001424 <main+0x2d4>)
 80012b8:	6013      	str	r3, [r2, #0]
	  	buttonRise = ~last_button & read_button;
 80012ba:	4b59      	ldr	r3, [pc, #356]	; (8001420 <main+0x2d0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	43da      	mvns	r2, r3
 80012c0:	4b56      	ldr	r3, [pc, #344]	; (800141c <main+0x2cc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4013      	ands	r3, r2
 80012c6:	4a58      	ldr	r2, [pc, #352]	; (8001428 <main+0x2d8>)
 80012c8:	6013      	str	r3, [r2, #0]
	  	if (GETBUTTONSTATUS(IN_SUST_PROP, buttonFall)){
 80012ca:	4b56      	ldr	r3, [pc, #344]	; (8001424 <main+0x2d4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <main+0x18a>
	  		sustainProp();
 80012d6:	f000 f91d 	bl	8001514 <sustainProp>
	  	}
	  	if (GETBUTTONSTATUS(IN_SUST_MIDI, buttonFall)){
 80012da:	4b52      	ldr	r3, [pc, #328]	; (8001424 <main+0x2d4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <main+0x19a>
	  		sustainMIDI();
 80012e6:	f000 f965 	bl	80015b4 <sustainMIDI>
	  	}
	  	if (GETBUTTONSTATUS(IN_CHORD, buttonFall)){
 80012ea:	4b4e      	ldr	r3, [pc, #312]	; (8001424 <main+0x2d4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <main+0x1aa>
	  		inputChord();
 80012f6:	f000 f9a1 	bl	800163c <inputChord>
	  	}
	  	inputOctave();
 80012fa:	f000 f9c7 	bl	800168c <inputOctave>
	  	if (GETBUTTONSTATUS(IN_TUNNE, buttonFall)){
 80012fe:	4b49      	ldr	r3, [pc, #292]	; (8001424 <main+0x2d4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <main+0x1be>
	  		inputTunne();
 800130a:	f000 f9f3 	bl	80016f4 <inputTunne>
	  	}
	  	inputPresets();
 800130e:	f000 fa19 	bl	8001744 <inputPresets>

	  	last_button = read_button;
 8001312:	4b42      	ldr	r3, [pc, #264]	; (800141c <main+0x2cc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a42      	ldr	r2, [pc, #264]	; (8001420 <main+0x2d0>)
 8001318:	6013      	str	r3, [r2, #0]
	  		default:
	  		break;
	  	}
	  	*/

	    switch (menu){ //manage the recuested menu function.
 800131a:	4b44      	ldr	r3, [pc, #272]	; (800142c <main+0x2dc>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	3b03      	subs	r3, #3
 8001320:	2b04      	cmp	r3, #4
 8001322:	d81c      	bhi.n	800135e <main+0x20e>
 8001324:	a201      	add	r2, pc, #4	; (adr r2, 800132c <main+0x1dc>)
 8001326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132a:	bf00      	nop
 800132c:	08001341 	.word	0x08001341
 8001330:	08001347 	.word	0x08001347
 8001334:	08001351 	.word	0x08001351
 8001338:	0800135f 	.word	0x0800135f
 800133c:	0800135b 	.word	0x0800135b
	    	case MAIN_SCREEN:
	    		inputNotes();
 8001340:	f000 fa30 	bl	80017a4 <inputNotes>
	    	break;
 8001344:	e00c      	b.n	8001360 <main+0x210>
	  		case CHORD_SCREEN:
	  			chordSelect();
 8001346:	f000 fb37 	bl	80019b8 <chordSelect>
	  			inputNotes();
 800134a:	f000 fa2b 	bl	80017a4 <inputNotes>
	  		break;
 800134e:	e007      	b.n	8001360 <main+0x210>
	  		case TUNNE_SCREEN:
	  			tunneSelect();
 8001350:	f000 fbf6 	bl	8001b40 <tunneSelect>
	  			inputNotes();
 8001354:	f000 fa26 	bl	80017a4 <inputNotes>
	  		break;
 8001358:	e002      	b.n	8001360 <main+0x210>
	  		case RECUEST_FOOTKEY_SCREEN:
	  			inputSaveChord(); // @suppress("No break at end of case")
 800135a:	f000 fadb 	bl	8001914 <inputSaveChord>
	  		default:
	  		break;
 800135e:	bf00      	nop

	    }

	    MIDI_SendCheck();
 8001360:	f00a fdfa 	bl	800bf58 <MIDI_SendCheck>

		if (flag_dac != 0){
 8001364:	4b32      	ldr	r3, [pc, #200]	; (8001430 <main+0x2e0>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d004      	beq.n	8001376 <main+0x226>
		  osc_dac_update();
 800136c:	f000 fcd0 	bl	8001d10 <osc_dac_update>
		  flag_dac = 0;
 8001370:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <main+0x2e0>)
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
		}


	    if (flag_tick != 0){
 8001376:	4b2f      	ldr	r3, [pc, #188]	; (8001434 <main+0x2e4>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f43f af25 	beq.w	80011ca <main+0x7a>

	    	if (lcd_refresh_time != 0){
 8001380:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <main+0x2e8>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d006      	beq.n	8001396 <main+0x246>
	    		lcd_refresh_time--;
 8001388:	4b2b      	ldr	r3, [pc, #172]	; (8001438 <main+0x2e8>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	3b01      	subs	r3, #1
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b29      	ldr	r3, [pc, #164]	; (8001438 <main+0x2e8>)
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	e004      	b.n	80013a0 <main+0x250>
	    	}else{
	    		lcd_upDate_IT();
 8001396:	f7ff fec3 	bl	8001120 <lcd_upDate_IT>
	    		lcd_refresh_time = 25;
 800139a:	4b27      	ldr	r3, [pc, #156]	; (8001438 <main+0x2e8>)
 800139c:	2219      	movs	r2, #25
 800139e:	701a      	strb	r2, [r3, #0]
	    	}//end if lcd_refresh_time

	    	if (popup_time != 0){
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <main+0x2c0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00b      	beq.n	80013c0 <main+0x270>
				popup_time--;
 80013a8:	4b19      	ldr	r3, [pc, #100]	; (8001410 <main+0x2c0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	4a18      	ldr	r2, [pc, #96]	; (8001410 <main+0x2c0>)
 80013b0:	6013      	str	r3, [r2, #0]
				if (popup_time == 1) popup_timeUp = 1;
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <main+0x2c0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d102      	bne.n	80013c0 <main+0x270>
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <main+0x2c8>)
 80013bc:	2201      	movs	r2, #1
 80013be:	701a      	strb	r2, [r3, #0]
			}//end if popup_time

	    	if (refresh_buttons != 0){
 80013c0:	4b1e      	ldr	r3, [pc, #120]	; (800143c <main+0x2ec>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d006      	beq.n	80013d6 <main+0x286>
	    		refresh_buttons--;
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <main+0x2ec>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <main+0x2ec>)
 80013d2:	701a      	strb	r2, [r3, #0]
 80013d4:	e006      	b.n	80013e4 <main+0x294>
	    	}else{
//	    		last_button = read_button;
	    		spi_74HC165_receive((uint8_t *)&read_button, sizeof(read_button));
 80013d6:	2104      	movs	r1, #4
 80013d8:	4810      	ldr	r0, [pc, #64]	; (800141c <main+0x2cc>)
 80013da:	f7ff f89d 	bl	8000518 <spi_74HC165_receive>

//	    		buttonFall = last_button & ~read_button;
//	    		buttonRise = ~last_button & read_button;

	    		refresh_buttons = 20;
 80013de:	4b17      	ldr	r3, [pc, #92]	; (800143c <main+0x2ec>)
 80013e0:	2214      	movs	r2, #20
 80013e2:	701a      	strb	r2, [r3, #0]
	    	}

	    	flag_tick = 0;
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <main+0x2e4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
	  	switch (screenNum){
 80013ea:	e6ee      	b.n	80011ca <main+0x7a>
 80013ec:	200003bc 	.word	0x200003bc
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	2000073c 	.word	0x2000073c
 80013f8:	200007d4 	.word	0x200007d4
 80013fc:	20000794 	.word	0x20000794
 8001400:	20000414 	.word	0x20000414
 8001404:	20000428 	.word	0x20000428
 8001408:	20000376 	.word	0x20000376
 800140c:	20000086 	.word	0x20000086
 8001410:	20000378 	.word	0x20000378
 8001414:	2000072c 	.word	0x2000072c
 8001418:	2000037c 	.word	0x2000037c
 800141c:	2000006c 	.word	0x2000006c
 8001420:	20000070 	.word	0x20000070
 8001424:	2000036c 	.word	0x2000036c
 8001428:	20000370 	.word	0x20000370
 800142c:	20000085 	.word	0x20000085
 8001430:	2000037f 	.word	0x2000037f
 8001434:	2000037e 	.word	0x2000037e
 8001438:	20000087 	.word	0x20000087
 800143c:	20000074 	.word	0x20000074

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b094      	sub	sp, #80	; 0x50
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 0320 	add.w	r3, r7, #32
 800144a:	2230      	movs	r2, #48	; 0x30
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f00b f8ce 	bl	800c5f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	4b28      	ldr	r3, [pc, #160]	; (800150c <SystemClock_Config+0xcc>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	4a27      	ldr	r2, [pc, #156]	; (800150c <SystemClock_Config+0xcc>)
 800146e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001472:	6413      	str	r3, [r2, #64]	; 0x40
 8001474:	4b25      	ldr	r3, [pc, #148]	; (800150c <SystemClock_Config+0xcc>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001480:	2300      	movs	r3, #0
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	4b22      	ldr	r3, [pc, #136]	; (8001510 <SystemClock_Config+0xd0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a21      	ldr	r2, [pc, #132]	; (8001510 <SystemClock_Config+0xd0>)
 800148a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <SystemClock_Config+0xd0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800149c:	2301      	movs	r3, #1
 800149e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a6:	2302      	movs	r3, #2
 80014a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014b0:	2304      	movs	r3, #4
 80014b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014b4:	23a8      	movs	r3, #168	; 0xa8
 80014b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b8:	2302      	movs	r3, #2
 80014ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014bc:	2307      	movs	r3, #7
 80014be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c0:	f107 0320 	add.w	r3, r7, #32
 80014c4:	4618      	mov	r0, r3
 80014c6:	f005 f991 	bl	80067ec <HAL_RCC_OscConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014d0:	f000 fbfa 	bl	8001cc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d4:	230f      	movs	r3, #15
 80014d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d8:	2302      	movs	r3, #2
 80014da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	2105      	movs	r1, #5
 80014f2:	4618      	mov	r0, r3
 80014f4:	f005 fbea 	bl	8006ccc <HAL_RCC_ClockConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014fe:	f000 fbe3 	bl	8001cc8 <Error_Handler>
  }
}
 8001502:	bf00      	nop
 8001504:	3750      	adds	r7, #80	; 0x50
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800
 8001510:	40007000 	.word	0x40007000

08001514 <sustainProp>:

/* USER CODE BEGIN 4 */

void sustainProp (void){
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0

		for (int j = 0; j <= 12; j++){
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	e00b      	b.n	8001538 <sustainProp+0x24>
			sendChord(lastSendNote[j], 0, 1); // silents all notes
 8001520:	4a1e      	ldr	r2, [pc, #120]	; (800159c <sustainProp+0x88>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001528:	2201      	movs	r2, #1
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f000 fb49 	bl	8001bc4 <sendChord>
		for (int j = 0; j <= 12; j++){
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3301      	adds	r3, #1
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b0c      	cmp	r3, #12
 800153c:	ddf0      	ble.n	8001520 <sustainProp+0xc>
		}

		switch (sustainMode){
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <sustainProp+0x8c>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d01b      	beq.n	800157e <sustainProp+0x6a>
 8001546:	2b02      	cmp	r3, #2
 8001548:	d002      	beq.n	8001550 <sustainProp+0x3c>
 800154a:	2b00      	cmp	r3, #0
 800154c:	d010      	beq.n	8001570 <sustainProp+0x5c>
 800154e:	e01d      	b.n	800158c <sustainProp+0x78>
			case 2:
				//event = {0x0B, 0xB0 | MIDI_CHANNEL, 64, 0};
				//MidiUSB.sendMIDI(event);
				midi_msg[0] = 0x0B; //0x0B == type event (control change)
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <sustainProp+0x90>)
 8001552:	220b      	movs	r2, #11
 8001554:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <sustainProp+0x90>)
 8001558:	22b1      	movs	r2, #177	; 0xb1
 800155a:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	// 64 == sustain.
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <sustainProp+0x90>)
 800155e:	2240      	movs	r2, #64	; 0x40
 8001560:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 0;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <sustainProp+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4); // @suppress("No break at end of case")
 8001568:	2104      	movs	r1, #4
 800156a:	480e      	ldr	r0, [pc, #56]	; (80015a4 <sustainProp+0x90>)
 800156c:	f00a fcbe 	bl	800beec <MIDI_SendBuffer>
			case 0:
				lastSustainNote = 0;
 8001570:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <sustainProp+0x94>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
				sustainMode = 1; //prop
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <sustainProp+0x8c>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
			break;
 800157c:	e006      	b.n	800158c <sustainProp+0x78>

			case 1:
				sustainFlag = 1;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <sustainProp+0x98>)
 8001580:	2201      	movs	r2, #1
 8001582:	701a      	strb	r2, [r3, #0]
				sustainMode = 0;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <sustainProp+0x8c>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
			break;
 800158a:	bf00      	nop
		} //end switch

		screenNum = POPUP_SUSTAIN;
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <sustainProp+0x9c>)
 800158e:	220a      	movs	r2, #10
 8001590:	701a      	strb	r2, [r3, #0]

} //end sustainProp()
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000330 	.word	0x20000330
 80015a0:	20000368 	.word	0x20000368
 80015a4:	20000730 	.word	0x20000730
 80015a8:	20000364 	.word	0x20000364
 80015ac:	2000006a 	.word	0x2000006a
 80015b0:	20000376 	.word	0x20000376

080015b4 <sustainMIDI>:

void sustainMIDI (void){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0

		switch (sustainMode){
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <sustainMIDI+0x78>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	db2f      	blt.n	8001620 <sustainMIDI+0x6c>
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	dd02      	ble.n	80015ca <sustainMIDI+0x16>
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d017      	beq.n	80015f8 <sustainMIDI+0x44>
 80015c8:	e02a      	b.n	8001620 <sustainMIDI+0x6c>
			case 0:
			case 1:
				sustainFlag = 1;	// needed to normal notes functioning.
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <sustainMIDI+0x7c>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]

				midi_msg[0] = 0x0B;		//0x0B == type event (control change),
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <sustainMIDI+0x80>)
 80015d2:	220b      	movs	r2, #11
 80015d4:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <sustainMIDI+0x80>)
 80015d8:	22b1      	movs	r2, #177	; 0xb1
 80015da:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	//64 == sustain.
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <sustainMIDI+0x80>)
 80015de:	2240      	movs	r2, #64	; 0x40
 80015e0:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 127;
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <sustainMIDI+0x80>)
 80015e4:	227f      	movs	r2, #127	; 0x7f
 80015e6:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4);
 80015e8:	2104      	movs	r1, #4
 80015ea:	4812      	ldr	r0, [pc, #72]	; (8001634 <sustainMIDI+0x80>)
 80015ec:	f00a fc7e 	bl	800beec <MIDI_SendBuffer>

				sustainMode = 2;
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <sustainMIDI+0x78>)
 80015f2:	2202      	movs	r2, #2
 80015f4:	701a      	strb	r2, [r3, #0]
			break;
 80015f6:	e013      	b.n	8001620 <sustainMIDI+0x6c>
			case 2:
				midi_msg[0] = 0x0B;	//0x0B == type event (control change)
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <sustainMIDI+0x80>)
 80015fa:	220b      	movs	r2, #11
 80015fc:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 80015fe:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <sustainMIDI+0x80>)
 8001600:	22b1      	movs	r2, #177	; 0xb1
 8001602:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	//64 == sustain.
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <sustainMIDI+0x80>)
 8001606:	2240      	movs	r2, #64	; 0x40
 8001608:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 0;
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <sustainMIDI+0x80>)
 800160c:	2200      	movs	r2, #0
 800160e:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4);
 8001610:	2104      	movs	r1, #4
 8001612:	4808      	ldr	r0, [pc, #32]	; (8001634 <sustainMIDI+0x80>)
 8001614:	f00a fc6a 	bl	800beec <MIDI_SendBuffer>

				sustainMode = 0;
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <sustainMIDI+0x78>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
			break;
 800161e:	bf00      	nop
		} //end switch

		screenNum = POPUP_SUSTAIN;
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <sustainMIDI+0x84>)
 8001622:	220a      	movs	r2, #10
 8001624:	701a      	strb	r2, [r3, #0]
} //end sustainMIDI()
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000368 	.word	0x20000368
 8001630:	2000006a 	.word	0x2000006a
 8001634:	20000730 	.word	0x20000730
 8001638:	20000376 	.word	0x20000376

0800163c <inputChord>:

void inputChord (void){
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

		acorde = !acorde;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <inputChord+0x44>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	bf0c      	ite	eq
 8001648:	2301      	moveq	r3, #1
 800164a:	2300      	movne	r3, #0
 800164c:	b2db      	uxtb	r3, r3
 800164e:	461a      	mov	r2, r3
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <inputChord+0x44>)
 8001652:	701a      	strb	r2, [r3, #0]

		if (acorde){
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <inputChord+0x44>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d006      	beq.n	800166a <inputChord+0x2e>
			screenNum = CHORD_SCREEN;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <inputChord+0x48>)
 800165e:	2204      	movs	r2, #4
 8001660:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN;
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <inputChord+0x4c>)
 8001664:	2204      	movs	r2, #4
 8001666:	701a      	strb	r2, [r3, #0]
		}else{
			screenNum = MAIN_SCREEN;
			menu = MAIN_SCREEN;
		} //end if acorde

} //end inputChord()
 8001668:	e005      	b.n	8001676 <inputChord+0x3a>
			screenNum = MAIN_SCREEN;
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <inputChord+0x48>)
 800166c:	2203      	movs	r2, #3
 800166e:	701a      	strb	r2, [r3, #0]
			menu = MAIN_SCREEN;
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <inputChord+0x4c>)
 8001672:	2203      	movs	r2, #3
 8001674:	701a      	strb	r2, [r3, #0]
} //end inputChord()
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	20000374 	.word	0x20000374
 8001684:	20000376 	.word	0x20000376
 8001688:	20000085 	.word	0x20000085

0800168c <inputOctave>:


void inputOctave (void){
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

	if(GETBUTTONSTATUS(IN_OCT_G, buttonFall)){
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <inputOctave+0x5c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d007      	beq.n	80016ac <inputOctave+0x20>
		octava = -1;
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <inputOctave+0x60>)
 800169e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016a2:	601a      	str	r2, [r3, #0]
		screenNum=POPUP_OCTAVE;
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <inputOctave+0x64>)
 80016a6:	2209      	movs	r2, #9
 80016a8:	701a      	strb	r2, [r3, #0]
		return;
 80016aa:	e019      	b.n	80016e0 <inputOctave+0x54>
	}

	if (GETBUTTONSTATUS(IN_OCT_M, buttonFall)){
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <inputOctave+0x5c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d006      	beq.n	80016c6 <inputOctave+0x3a>
		octava = 0;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <inputOctave+0x60>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
		screenNum=POPUP_OCTAVE;
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <inputOctave+0x64>)
 80016c0:	2209      	movs	r2, #9
 80016c2:	701a      	strb	r2, [r3, #0]
		return;
 80016c4:	e00c      	b.n	80016e0 <inputOctave+0x54>
	}

	if (GETBUTTONSTATUS(IN_OCT_A, buttonFall)){
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <inputOctave+0x5c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d006      	beq.n	80016e0 <inputOctave+0x54>
		octava = 1;
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <inputOctave+0x60>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	601a      	str	r2, [r3, #0]
		screenNum=POPUP_OCTAVE;
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <inputOctave+0x64>)
 80016da:	2209      	movs	r2, #9
 80016dc:	701a      	strb	r2, [r3, #0]
		return;
 80016de:	bf00      	nop
	}
} //end inputOctave()
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	2000036c 	.word	0x2000036c
 80016ec:	200002f0 	.word	0x200002f0
 80016f0:	20000376 	.word	0x20000376

080016f4 <inputTunne>:


void inputTunne(void){
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

      tunne = !tunne;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <inputTunne+0x44>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	bf0c      	ite	eq
 8001700:	2301      	moveq	r3, #1
 8001702:	2300      	movne	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <inputTunne+0x44>)
 800170a:	701a      	strb	r2, [r3, #0]

	  if (tunne){
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <inputTunne+0x44>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <inputTunne+0x2e>
		screenNum = TUNNE_SCREEN;
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <inputTunne+0x48>)
 8001716:	2205      	movs	r2, #5
 8001718:	701a      	strb	r2, [r3, #0]
		menu = TUNNE_SCREEN;
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <inputTunne+0x4c>)
 800171c:	2205      	movs	r2, #5
 800171e:	701a      	strb	r2, [r3, #0]
	  }else{
		screenNum = MAIN_SCREEN;
		menu = MAIN_SCREEN;
	  } //end if tunne

} //end inputTunne()
 8001720:	e005      	b.n	800172e <inputTunne+0x3a>
		screenNum = MAIN_SCREEN;
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <inputTunne+0x48>)
 8001724:	2203      	movs	r2, #3
 8001726:	701a      	strb	r2, [r3, #0]
		menu = MAIN_SCREEN;
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <inputTunne+0x4c>)
 800172a:	2203      	movs	r2, #3
 800172c:	701a      	strb	r2, [r3, #0]
} //end inputTunne()
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	20000375 	.word	0x20000375
 800173c:	20000376 	.word	0x20000376
 8001740:	20000085 	.word	0x20000085

08001744 <inputPresets>:


void inputPresets (void){
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++){                                         // 6 presets en total.
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	e01e      	b.n	800178e <inputPresets+0x4a>

		if (GETBUTTONSTATUS(i + IN_PRESET0, buttonFall)){
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3308      	adds	r3, #8
 8001754:	2201      	movs	r2, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	461a      	mov	r2, r3
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <inputPresets+0x58>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4013      	ands	r3, r2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d010      	beq.n	8001788 <inputPresets+0x44>
			midi_msg[0] = 0x0C;	//0x0C == type event (program change)
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <inputPresets+0x5c>)
 8001768:	220c      	movs	r2, #12
 800176a:	701a      	strb	r2, [r3, #0]
			midi_msg[1] = 0xC0 | 1;
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <inputPresets+0x5c>)
 800176e:	22c1      	movs	r2, #193	; 0xc1
 8001770:	705a      	strb	r2, [r3, #1]
			midi_msg[2] = i;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <inputPresets+0x5c>)
 8001778:	709a      	strb	r2, [r3, #2]
			midi_msg[3] = 0;	//last param == 0 (unused in program change).
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <inputPresets+0x5c>)
 800177c:	2200      	movs	r2, #0
 800177e:	70da      	strb	r2, [r3, #3]
			MIDI_SendBuffer(midi_msg, 4);
 8001780:	2104      	movs	r1, #4
 8001782:	4807      	ldr	r0, [pc, #28]	; (80017a0 <inputPresets+0x5c>)
 8001784:	f00a fbb2 	bl	800beec <MIDI_SendBuffer>
	for (int i = 0; i < 6; i++){                                         // 6 presets en total.
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3301      	adds	r3, #1
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b05      	cmp	r3, #5
 8001792:	dddd      	ble.n	8001750 <inputPresets+0xc>
		} //end if

	} //end for

} //end inputPresets()
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	2000036c 	.word	0x2000036c
 80017a0:	20000730 	.word	0x20000730

080017a4 <inputNotes>:


void inputNotes(void){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0

  uint8_t pressedNote;

  for (int i = 0; i <= 12; i++){
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	e094      	b.n	80018da <inputNotes+0x136>

//    buttonState[i + IN_DO] = HAL_GPIO_ReadPin(notePort_list[i], notePin_list[i]); //read current button pin.

//    if(!buttonState[i + IN_DO] && lastState[i + IN_DO]){  // If we read 1, and the last time we read 0, means button was just pressed.
    if (GETBUTTONSTATUS(teclas[i], buttonFall)){
 80017b0:	4a4e      	ldr	r2, [pc, #312]	; (80018ec <inputNotes+0x148>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	2301      	movs	r3, #1
 80017bc:	4093      	lsls	r3, r2
 80017be:	461a      	mov	r2, r3
 80017c0:	4b4b      	ldr	r3, [pc, #300]	; (80018f0 <inputNotes+0x14c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4013      	ands	r3, r2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d067      	beq.n	800189a <inputNotes+0xf6>
        pressedNote = firstDoTunning + i + 12 * octava; //detects the pressed note.
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4b49      	ldr	r3, [pc, #292]	; (80018f4 <inputNotes+0x150>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b48      	ldr	r3, [pc, #288]	; (80018f8 <inputNotes+0x154>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	4619      	mov	r1, r3
 80017de:	0049      	lsls	r1, r1, #1
 80017e0:	440b      	add	r3, r1
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	70fb      	strb	r3, [r7, #3]

    	if (acorde){ //If chord mode is on...
 80017ea:	4b44      	ldr	r3, [pc, #272]	; (80018fc <inputNotes+0x158>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00c      	beq.n	800180c <inputNotes+0x68>
            lastSendNote[i] = makeChord(pressedNote, i); // saves the current chord config. on pressed note.
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	4611      	mov	r1, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fec8 	bl	8000590 <makeChord>
 8001800:	4601      	mov	r1, r0
 8001802:	4a3f      	ldr	r2, [pc, #252]	; (8001900 <inputNotes+0x15c>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800180a:	e004      	b.n	8001816 <inputNotes+0x72>

        }else{ //If chord mode is off...

            lastSendNote[i] = pressedNote; // saves nothing but pressed note.
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	493c      	ldr	r1, [pc, #240]	; (8001900 <inputNotes+0x15c>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        } //end if acorde


        if (sustainMode == 1){ // If proprietary sustain mode on...
 8001816:	4b3b      	ldr	r3, [pc, #236]	; (8001904 <inputNotes+0x160>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d122      	bne.n	8001864 <inputNotes+0xc0>

			if (lastSustainNote != lastSendNote[i]){ // If last sustained note differs from the current pressed one...
 800181e:	4a38      	ldr	r2, [pc, #224]	; (8001900 <inputNotes+0x15c>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001826:	4b38      	ldr	r3, [pc, #224]	; (8001908 <inputNotes+0x164>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d010      	beq.n	8001850 <inputNotes+0xac>

				sendChord(lastSustainNote, 0, 1); // mute current chord. 0 in second param means "noteOff".
 800182e:	4b36      	ldr	r3, [pc, #216]	; (8001908 <inputNotes+0x164>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2201      	movs	r2, #1
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f9c4 	bl	8001bc4 <sendChord>
				lastSustainNote = lastSendNote[i]; // and saves the current sustained note.
 800183c:	4a30      	ldr	r2, [pc, #192]	; (8001900 <inputNotes+0x15c>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001844:	4a30      	ldr	r2, [pc, #192]	; (8001908 <inputNotes+0x164>)
 8001846:	6013      	str	r3, [r2, #0]
				sustainFlag = 1; // turn sustained note on
 8001848:	4b30      	ldr	r3, [pc, #192]	; (800190c <inputNotes+0x168>)
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
 800184e:	e009      	b.n	8001864 <inputNotes+0xc0>

			}else{ // If last sustained note and the current pressed one are the same...

				sustainFlag = !sustainFlag; // turn sustained note off.
 8001850:	4b2e      	ldr	r3, [pc, #184]	; (800190c <inputNotes+0x168>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf0c      	ite	eq
 8001858:	2301      	moveq	r3, #1
 800185a:	2300      	movne	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	461a      	mov	r2, r3
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <inputNotes+0x168>)
 8001862:	701a      	strb	r2, [r3, #0]

			}//end if lastSustainNote...
        }//end if sustainMode


        sendChord(lastSendNote[i], 127 * sustainFlag, 1); //send the appropriate midi message.
 8001864:	4a26      	ldr	r2, [pc, #152]	; (8001900 <inputNotes+0x15c>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800186c:	4b27      	ldr	r3, [pc, #156]	; (800190c <inputNotes+0x168>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	4613      	mov	r3, r2
 8001874:	01db      	lsls	r3, r3, #7
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	2201      	movs	r2, #1
 800187a:	4619      	mov	r1, r3
 800187c:	f000 f9a2 	bl	8001bc4 <sendChord>

        if (sustainFlag != 0){
 8001880:	4b22      	ldr	r3, [pc, #136]	; (800190c <inputNotes+0x168>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d004      	beq.n	8001892 <inputNotes+0xee>
        	osc_setNote(pressedNote);
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	4618      	mov	r0, r3
 800188c:	f000 facc 	bl	8001e28 <osc_setNote>
 8001890:	e020      	b.n	80018d4 <inputNotes+0x130>
        }else{
        	osc_setNote(0);
 8001892:	2000      	movs	r0, #0
 8001894:	f000 fac8 	bl	8001e28 <osc_setNote>
 8001898:	e01c      	b.n	80018d4 <inputNotes+0x130>
        }

    }else if(GETBUTTONSTATUS(teclas[i], buttonRise)){
 800189a:	4a14      	ldr	r2, [pc, #80]	; (80018ec <inputNotes+0x148>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4413      	add	r3, r2
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	2301      	movs	r3, #1
 80018a6:	4093      	lsls	r3, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b19      	ldr	r3, [pc, #100]	; (8001910 <inputNotes+0x16c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00f      	beq.n	80018d4 <inputNotes+0x130>

    	if (sustainMode != 1){ // If proprietary sustain mode off...
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <inputNotes+0x160>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d00b      	beq.n	80018d4 <inputNotes+0x130>
			sendChord(lastSendNote[i], 0, 1); // 0 in second param means "noteOff".
 80018bc:	4a10      	ldr	r2, [pc, #64]	; (8001900 <inputNotes+0x15c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c4:	2201      	movs	r2, #1
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 f97b 	bl	8001bc4 <sendChord>
			osc_setNote(0); // turn DAC off.
 80018ce:	2000      	movs	r0, #0
 80018d0:	f000 faaa 	bl	8001e28 <osc_setNote>
  for (int i = 0; i <= 12; i++){
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3301      	adds	r3, #1
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b0c      	cmp	r3, #12
 80018de:	f77f af67 	ble.w	80017b0 <inputNotes+0xc>
        }
    }

  }
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000078 	.word	0x20000078
 80018f0:	2000036c 	.word	0x2000036c
 80018f4:	200003bc 	.word	0x200003bc
 80018f8:	200002f0 	.word	0x200002f0
 80018fc:	20000374 	.word	0x20000374
 8001900:	20000330 	.word	0x20000330
 8001904:	20000368 	.word	0x20000368
 8001908:	20000364 	.word	0x20000364
 800190c:	2000006a 	.word	0x2000006a
 8001910:	20000370 	.word	0x20000370

08001914 <inputSaveChord>:


void inputSaveChord(void){
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0

uint8_t flag = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	71fb      	strb	r3, [r7, #7]

	for (int i = 0; i <= 12; i++){
 800191e:	2300      	movs	r3, #0
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	e024      	b.n	800196e <inputSaveChord+0x5a>

//		buttonState[i + IN_DO] = HAL_GPIO_ReadPin(notePort_list[i], notePin_list[i]);

//		if(!buttonState[i + IN_DO] && lastState[i + IN_DO]){       // If we read 1, and the last time we read 0, means button was just pressed
		if (GETBUTTONSTATUS(teclas[i], buttonFall)){
 8001924:	4a1e      	ldr	r2, [pc, #120]	; (80019a0 <inputSaveChord+0x8c>)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	4413      	add	r3, r2
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	2301      	movs	r3, #1
 8001930:	4093      	lsls	r3, r2
 8001932:	461a      	mov	r2, r3
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <inputSaveChord+0x90>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4013      	ands	r3, r2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d014      	beq.n	8001968 <inputSaveChord+0x54>

			//storing the selected chord:
			setChord(i);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fe46 	bl	80005d4 <setChord>
			footKey = NORMAL;
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <inputSaveChord+0x94>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
			screenNum = POPUP_SAVED_CHORD;
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <inputSaveChord+0x98>)
 8001950:	2208      	movs	r2, #8
 8001952:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN; 				//return point to chordSelect().
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <inputSaveChord+0x9c>)
 8001956:	2204      	movs	r2, #4
 8001958:	701a      	strb	r2, [r3, #0]
			lastKey_pos = i; 					// to show in screen the foot key pressed.
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <inputSaveChord+0xa0>)
 8001960:	701a      	strb	r2, [r3, #0]
			flag = 1;
 8001962:	2301      	movs	r3, #1
 8001964:	71fb      	strb	r3, [r7, #7]
			break; 								 //it must exit from function.
 8001966:	e005      	b.n	8001974 <inputSaveChord+0x60>
	for (int i = 0; i <= 12; i++){
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	3301      	adds	r3, #1
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2b0c      	cmp	r3, #12
 8001972:	ddd7      	ble.n	8001924 <inputSaveChord+0x10>
		} //end if getStatusButton
	} //end for

	if (!flag){
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10e      	bne.n	8001998 <inputSaveChord+0x84>


		if (GETBUTTONSTATUS(IN_LEFT, buttonFall)){
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <inputSaveChord+0x90>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	2b00      	cmp	r3, #0
 8001984:	d008      	beq.n	8001998 <inputSaveChord+0x84>
			footKey = NORMAL;
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <inputSaveChord+0x94>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
			screenNum = POPUP_CANCEL;
 800198c:	4b07      	ldr	r3, [pc, #28]	; (80019ac <inputSaveChord+0x98>)
 800198e:	220b      	movs	r2, #11
 8001990:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN;
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <inputSaveChord+0x9c>)
 8001994:	2204      	movs	r2, #4
 8001996:	701a      	strb	r2, [r3, #0]
		}
	} //end if !flag

} //end inputSaveChord()
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000078 	.word	0x20000078
 80019a4:	2000036c 	.word	0x2000036c
 80019a8:	2000037d 	.word	0x2000037d
 80019ac:	20000376 	.word	0x20000376
 80019b0:	20000085 	.word	0x20000085
 80019b4:	2000072c 	.word	0x2000072c

080019b8 <chordSelect>:

void chordSelect(void){
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0

  uint8_t flag = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	71fb      	strb	r3, [r7, #7]

  switch (chordSelect_cursor){
 80019c2:	4b58      	ldr	r3, [pc, #352]	; (8001b24 <chordSelect+0x16c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d03a      	beq.n	8001a40 <chordSelect+0x88>
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d302      	bcc.n	80019d4 <chordSelect+0x1c>
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d079      	beq.n	8001ac6 <chordSelect+0x10e>
 80019d2:	e09a      	b.n	8001b0a <chordSelect+0x152>

		case 0:

			if (GETBUTTONSTATUS(IN_DOWN, buttonFall)){
 80019d4:	4b54      	ldr	r3, [pc, #336]	; (8001b28 <chordSelect+0x170>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d006      	beq.n	80019ee <chordSelect+0x36>
				chordSelect_cursor++;
 80019e0:	4b50      	ldr	r3, [pc, #320]	; (8001b24 <chordSelect+0x16c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	4a4f      	ldr	r2, [pc, #316]	; (8001b24 <chordSelect+0x16c>)
 80019e8:	6013      	str	r3, [r2, #0]
				flag = 1;
 80019ea:	2301      	movs	r3, #1
 80019ec:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_LEFT, buttonFall)){
 80019ee:	4b4e      	ldr	r3, [pc, #312]	; (8001b28 <chordSelect+0x170>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00d      	beq.n	8001a16 <chordSelect+0x5e>
				chord--;
 80019fa:	4b4c      	ldr	r3, [pc, #304]	; (8001b2c <chordSelect+0x174>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	4a4a      	ldr	r2, [pc, #296]	; (8001b2c <chordSelect+0x174>)
 8001a02:	6013      	str	r3, [r2, #0]
				if (chord < 0)
 8001a04:	4b49      	ldr	r3, [pc, #292]	; (8001b2c <chordSelect+0x174>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	da02      	bge.n	8001a12 <chordSelect+0x5a>
					chord = 7;
 8001a0c:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <chordSelect+0x174>)
 8001a0e:	2207      	movs	r2, #7
 8001a10:	601a      	str	r2, [r3, #0]
				flag = 1;
 8001a12:	2301      	movs	r3, #1
 8001a14:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_RIGHT, buttonFall)){
 8001a16:	4b44      	ldr	r3, [pc, #272]	; (8001b28 <chordSelect+0x170>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0320 	and.w	r3, r3, #32
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d06e      	beq.n	8001b00 <chordSelect+0x148>
				chord++;
 8001a22:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <chordSelect+0x174>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	3301      	adds	r3, #1
 8001a28:	4a40      	ldr	r2, [pc, #256]	; (8001b2c <chordSelect+0x174>)
 8001a2a:	6013      	str	r3, [r2, #0]
				if (chord > 7)
 8001a2c:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <chordSelect+0x174>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b07      	cmp	r3, #7
 8001a32:	dd02      	ble.n	8001a3a <chordSelect+0x82>
					chord = 0;
 8001a34:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <chordSelect+0x174>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
				flag = 1;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	71fb      	strb	r3, [r7, #7]
			}

		break;
 8001a3e:	e05f      	b.n	8001b00 <chordSelect+0x148>
		case 1:

			if (GETBUTTONSTATUS(IN_UP, buttonFall)){
 8001a40:	4b39      	ldr	r3, [pc, #228]	; (8001b28 <chordSelect+0x170>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <chordSelect+0xa2>
				chordSelect_cursor--;
 8001a4c:	4b35      	ldr	r3, [pc, #212]	; (8001b24 <chordSelect+0x16c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	4a34      	ldr	r2, [pc, #208]	; (8001b24 <chordSelect+0x16c>)
 8001a54:	6013      	str	r3, [r2, #0]
				flag = 1;
 8001a56:	2301      	movs	r3, #1
 8001a58:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_DOWN, buttonFall)){
 8001a5a:	4b33      	ldr	r3, [pc, #204]	; (8001b28 <chordSelect+0x170>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <chordSelect+0xbc>
				chordSelect_cursor++;
 8001a66:	4b2f      	ldr	r3, [pc, #188]	; (8001b24 <chordSelect+0x16c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	4a2d      	ldr	r2, [pc, #180]	; (8001b24 <chordSelect+0x16c>)
 8001a6e:	6013      	str	r3, [r2, #0]
				flag = 1;
 8001a70:	2301      	movs	r3, #1
 8001a72:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_LEFT, buttonFall)){
 8001a74:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <chordSelect+0x170>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0310 	and.w	r3, r3, #16
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00d      	beq.n	8001a9c <chordSelect+0xe4>
				chordInv--;
 8001a80:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <chordSelect+0x178>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	4a2a      	ldr	r2, [pc, #168]	; (8001b30 <chordSelect+0x178>)
 8001a88:	6013      	str	r3, [r2, #0]
				if (chordInv < 0)
 8001a8a:	4b29      	ldr	r3, [pc, #164]	; (8001b30 <chordSelect+0x178>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	da02      	bge.n	8001a98 <chordSelect+0xe0>
					chordInv = 2;
 8001a92:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <chordSelect+0x178>)
 8001a94:	2202      	movs	r2, #2
 8001a96:	601a      	str	r2, [r3, #0]
				flag = 1;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_RIGHT, buttonFall)){
 8001a9c:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <chordSelect+0x170>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0320 	and.w	r3, r3, #32
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d02d      	beq.n	8001b04 <chordSelect+0x14c>
				chordInv++;
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <chordSelect+0x178>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	3301      	adds	r3, #1
 8001aae:	4a20      	ldr	r2, [pc, #128]	; (8001b30 <chordSelect+0x178>)
 8001ab0:	6013      	str	r3, [r2, #0]
				if (chordInv > 2)
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <chordSelect+0x178>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	dd02      	ble.n	8001ac0 <chordSelect+0x108>
					chordInv = 0;
 8001aba:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <chordSelect+0x178>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
				flag = 1;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	71fb      	strb	r3, [r7, #7]
			}

		break;
 8001ac4:	e01e      	b.n	8001b04 <chordSelect+0x14c>
		case 2:

			if (GETBUTTONSTATUS(IN_UP, buttonFall)){
 8001ac6:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <chordSelect+0x170>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d006      	beq.n	8001ae0 <chordSelect+0x128>
				chordSelect_cursor--;
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <chordSelect+0x16c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <chordSelect+0x16c>)
 8001ada:	6013      	str	r3, [r2, #0]
				flag = 1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_RIGHT, buttonFall)){
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <chordSelect+0x170>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0320 	and.w	r3, r3, #32
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00d      	beq.n	8001b08 <chordSelect+0x150>
				footKey = SAVE_CHORD; //
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <chordSelect+0x17c>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	701a      	strb	r2, [r3, #0]
				menu = RECUEST_FOOTKEY_SCREEN;
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <chordSelect+0x180>)
 8001af4:	2207      	movs	r2, #7
 8001af6:	701a      	strb	r2, [r3, #0]
				screenNum = RECUEST_FOOTKEY_SCREEN;
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <chordSelect+0x184>)
 8001afa:	2207      	movs	r2, #7
 8001afc:	701a      	strb	r2, [r3, #0]
			}

		break;
 8001afe:	e003      	b.n	8001b08 <chordSelect+0x150>
		break;
 8001b00:	bf00      	nop
 8001b02:	e002      	b.n	8001b0a <chordSelect+0x152>
		break;
 8001b04:	bf00      	nop
 8001b06:	e000      	b.n	8001b0a <chordSelect+0x152>
		break;
 8001b08:	bf00      	nop
	} //fin switch chordSelect_cursor

  if (flag){        ///flag de impresion
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d002      	beq.n	8001b16 <chordSelect+0x15e>

      screenNum = CHORD_SCREEN;
 8001b10:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <chordSelect+0x184>)
 8001b12:	2204      	movs	r2, #4
 8001b14:	701a      	strb	r2, [r3, #0]
  }
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	200003b8 	.word	0x200003b8
 8001b28:	2000036c 	.word	0x2000036c
 8001b2c:	200003c0 	.word	0x200003c0
 8001b30:	200003c4 	.word	0x200003c4
 8001b34:	2000037d 	.word	0x2000037d
 8001b38:	20000085 	.word	0x20000085
 8001b3c:	20000376 	.word	0x20000376

08001b40 <tunneSelect>:


void tunneSelect(void){
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
	uint8_t flag = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	71fb      	strb	r3, [r7, #7]

	if (GETBUTTONSTATUS(IN_LEFT, buttonFall)){
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <tunneSelect+0x78>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00e      	beq.n	8001b74 <tunneSelect+0x34>
		firstDoTunning--;
 8001b56:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <tunneSelect+0x7c>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <tunneSelect+0x7c>)
 8001b60:	701a      	strb	r2, [r3, #0]
		if (firstDoTunning < MIDI_C2)
 8001b62:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <tunneSelect+0x7c>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b23      	cmp	r3, #35	; 0x23
 8001b68:	d802      	bhi.n	8001b70 <tunneSelect+0x30>
			firstDoTunning = MIDI_B2;
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <tunneSelect+0x7c>)
 8001b6c:	222f      	movs	r2, #47	; 0x2f
 8001b6e:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8001b70:	2301      	movs	r3, #1
 8001b72:	71fb      	strb	r3, [r7, #7]
	}
	if (GETBUTTONSTATUS(IN_RIGHT, buttonFall)){
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <tunneSelect+0x78>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0320 	and.w	r3, r3, #32
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00e      	beq.n	8001b9e <tunneSelect+0x5e>
		firstDoTunning++;
 8001b80:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <tunneSelect+0x7c>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <tunneSelect+0x7c>)
 8001b8a:	701a      	strb	r2, [r3, #0]
		if (firstDoTunning >MIDI_B2)
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <tunneSelect+0x7c>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b2f      	cmp	r3, #47	; 0x2f
 8001b92:	d902      	bls.n	8001b9a <tunneSelect+0x5a>
			firstDoTunning = MIDI_C2;
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <tunneSelect+0x7c>)
 8001b96:	2224      	movs	r2, #36	; 0x24
 8001b98:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	71fb      	strb	r3, [r7, #7]
	}

	if (flag){
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <tunneSelect+0x6a>
		screenNum = TUNNE_SCREEN;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <tunneSelect+0x80>)
 8001ba6:	2205      	movs	r2, #5
 8001ba8:	701a      	strb	r2, [r3, #0]
	}
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	2000036c 	.word	0x2000036c
 8001bbc:	200003bc 	.word	0x200003bc
 8001bc0:	20000376 	.word	0x20000376

08001bc4 <sendChord>:


void sendChord(unsigned long bnotes, int velocity, int channel){
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]

  uint8_t note1;
  uint8_t note2;
  uint8_t note3;

  note1 = (bnotes & 0x7f);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bd8:	75fb      	strb	r3, [r7, #23]
  note2 = (bnotes >> 8) & 0x7f;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001be4:	75bb      	strb	r3, [r7, #22]
  note3 = (bnotes >> 16) & 0x7f;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bf0:	757b      	strb	r3, [r7, #21]

  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <sendChord+0xa8>)
 8001bf4:	2209      	movs	r2, #9
 8001bf6:	701a      	strb	r2, [r3, #0]
  midi_msg[1] = 0x90 | 1;
 8001bf8:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <sendChord+0xa8>)
 8001bfa:	2291      	movs	r2, #145	; 0x91
 8001bfc:	705a      	strb	r2, [r3, #1]
  midi_msg[2] = note1;
 8001bfe:	4a1b      	ldr	r2, [pc, #108]	; (8001c6c <sendChord+0xa8>)
 8001c00:	7dfb      	ldrb	r3, [r7, #23]
 8001c02:	7093      	strb	r3, [r2, #2]
  midi_msg[3] = velocity;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <sendChord+0xa8>)
 8001c0a:	70da      	strb	r2, [r3, #3]
  MIDI_SendBuffer(midi_msg, 4);
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	4817      	ldr	r0, [pc, #92]	; (8001c6c <sendChord+0xa8>)
 8001c10:	f00a f96c 	bl	800beec <MIDI_SendBuffer>

  if (note2 && note3){
 8001c14:	7dbb      	ldrb	r3, [r7, #22]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d024      	beq.n	8001c64 <sendChord+0xa0>
 8001c1a:	7d7b      	ldrb	r3, [r7, #21]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d021      	beq.n	8001c64 <sendChord+0xa0>

	  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <sendChord+0xa8>)
 8001c22:	2209      	movs	r2, #9
 8001c24:	701a      	strb	r2, [r3, #0]
	  midi_msg[1] = 0x90 | 1;
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <sendChord+0xa8>)
 8001c28:	2291      	movs	r2, #145	; 0x91
 8001c2a:	705a      	strb	r2, [r3, #1]
	  midi_msg[2] = note2;
 8001c2c:	4a0f      	ldr	r2, [pc, #60]	; (8001c6c <sendChord+0xa8>)
 8001c2e:	7dbb      	ldrb	r3, [r7, #22]
 8001c30:	7093      	strb	r3, [r2, #2]
	  midi_msg[3] = velocity;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <sendChord+0xa8>)
 8001c38:	70da      	strb	r2, [r3, #3]
	  MIDI_SendBuffer(midi_msg, 4);
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	480b      	ldr	r0, [pc, #44]	; (8001c6c <sendChord+0xa8>)
 8001c3e:	f00a f955 	bl	800beec <MIDI_SendBuffer>

	  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <sendChord+0xa8>)
 8001c44:	2209      	movs	r2, #9
 8001c46:	701a      	strb	r2, [r3, #0]
	  midi_msg[1] = 0x90 | 1;
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <sendChord+0xa8>)
 8001c4a:	2291      	movs	r2, #145	; 0x91
 8001c4c:	705a      	strb	r2, [r3, #1]
	  midi_msg[2] = note3;
 8001c4e:	4a07      	ldr	r2, [pc, #28]	; (8001c6c <sendChord+0xa8>)
 8001c50:	7d7b      	ldrb	r3, [r7, #21]
 8001c52:	7093      	strb	r3, [r2, #2]
	  midi_msg[3] = velocity;
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <sendChord+0xa8>)
 8001c5a:	70da      	strb	r2, [r3, #3]
	  MIDI_SendBuffer(midi_msg, 4);
 8001c5c:	2104      	movs	r1, #4
 8001c5e:	4803      	ldr	r0, [pc, #12]	; (8001c6c <sendChord+0xa8>)
 8001c60:	f00a f944 	bl	800beec <MIDI_SendBuffer>
  }
}
 8001c64:	bf00      	nop
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000730 	.word	0x20000730

08001c70 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){ // dac
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d103      	bne.n	8001c8a <HAL_TIM_PeriodElapsedCallback+0x1a>
		flag_dac = 1;
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	701a      	strb	r2, [r3, #0]
	}else if (htim->Instance == TIM2){ //tick
		flag_tick = 1;
	}

}
 8001c88:	e007      	b.n	8001c9a <HAL_TIM_PeriodElapsedCallback+0x2a>
	}else if (htim->Instance == TIM2){ //tick
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c92:	d102      	bne.n	8001c9a <HAL_TIM_PeriodElapsedCallback+0x2a>
		flag_tick = 1;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40000400 	.word	0x40000400
 8001cac:	2000037f 	.word	0x2000037f
 8001cb0:	2000037e 	.word	0x2000037e

08001cb4 <HAL_I2C_MasterTxCpltCallback>:


void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	_lcd_ISR();
 8001cbc:	f7ff fa3c 	bl	8001138 <_lcd_ISR>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <osc_dac_init>:
uint8_t ratio_sen = 100;
uint8_t ratio_cuad = 100;
uint8_t ratio_ramp = 100;


void osc_dac_init(DAC_HandleTypeDef *p_hdac, uint32_t ch){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
	handler_dac = p_hdac;
 8001ce2:	4a09      	ldr	r2, [pc, #36]	; (8001d08 <osc_dac_init+0x30>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6013      	str	r3, [r2, #0]
	dac_ch = ch;
 8001ce8:	4a08      	ldr	r2, [pc, #32]	; (8001d0c <osc_dac_init+0x34>)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6013      	str	r3, [r2, #0]

	HAL_DAC_Start(handler_dac, dac_ch);
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <osc_dac_init+0x30>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <osc_dac_init+0x34>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	f001 f84c 	bl	8002d96 <HAL_DAC_Start>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000738 	.word	0x20000738
 8001d0c:	20000734 	.word	0x20000734

08001d10 <osc_dac_update>:

//must be handled with a 44100 Hz timer.
void osc_dac_update(void){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0

	if (nota_activa!=-1){
 8001d14:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <osc_dac_update+0xe4>)
 8001d16:	f993 3000 	ldrsb.w	r3, [r3]
 8001d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d1e:	d057      	beq.n	8001dd0 <osc_dac_update+0xc0>
		phase+= nota_incrFase[nota_activa];
 8001d20:	4b34      	ldr	r3, [pc, #208]	; (8001df4 <osc_dac_update+0xe4>)
 8001d22:	f993 3000 	ldrsb.w	r3, [r3]
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b33      	ldr	r3, [pc, #204]	; (8001df8 <osc_dac_update+0xe8>)
 8001d2a:	5c9b      	ldrb	r3, [r3, r2]
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	4b33      	ldr	r3, [pc, #204]	; (8001dfc <osc_dac_update+0xec>)
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	4413      	add	r3, r2
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <osc_dac_update+0xec>)
 8001d38:	801a      	strh	r2, [r3, #0]
		if (phase>OSC_LAST) phase -= OSC_LAST;
 8001d3a:	4b30      	ldr	r3, [pc, #192]	; (8001dfc <osc_dac_update+0xec>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	f244 520a 	movw	r2, #17674	; 0x450a
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d907      	bls.n	8001d56 <osc_dac_update+0x46>
 8001d46:	4b2d      	ldr	r3, [pc, #180]	; (8001dfc <osc_dac_update+0xec>)
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	f5a3 438a 	sub.w	r3, r3, #17664	; 0x4500
 8001d4e:	3b0a      	subs	r3, #10
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	4b2a      	ldr	r3, [pc, #168]	; (8001dfc <osc_dac_update+0xec>)
 8001d54:	801a      	strh	r2, [r3, #0]
		dac_out = ratio_sen/100*tabla_seno[phase] + ratio_cuad/100*tabla_cuadrada[phase] + ratio_ramp/100*tabla_sierra[phase];
 8001d56:	4b2a      	ldr	r3, [pc, #168]	; (8001e00 <osc_dac_update+0xf0>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	4a2a      	ldr	r2, [pc, #168]	; (8001e04 <osc_dac_update+0xf4>)
 8001d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d60:	095b      	lsrs	r3, r3, #5
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	4b25      	ldr	r3, [pc, #148]	; (8001dfc <osc_dac_update+0xec>)
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <osc_dac_update+0xf8>)
 8001d6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	fb12 f303 	smulbb	r3, r2, r3
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <osc_dac_update+0xfc>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	4921      	ldr	r1, [pc, #132]	; (8001e04 <osc_dac_update+0xf4>)
 8001d80:	fba1 1303 	umull	r1, r3, r1, r3
 8001d84:	095b      	lsrs	r3, r3, #5
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	b299      	uxth	r1, r3
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <osc_dac_update+0xec>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <osc_dac_update+0x100>)
 8001d92:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	fb11 f303 	smulbb	r3, r1, r3
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	4413      	add	r3, r2
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <osc_dac_update+0x104>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	4917      	ldr	r1, [pc, #92]	; (8001e04 <osc_dac_update+0xf4>)
 8001da8:	fba1 1303 	umull	r1, r3, r1, r3
 8001dac:	095b      	lsrs	r3, r3, #5
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	b299      	uxth	r1, r3
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <osc_dac_update+0xec>)
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <osc_dac_update+0x108>)
 8001dba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	fb11 f303 	smulbb	r3, r1, r3
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <osc_dac_update+0x10c>)
 8001dcc:	801a      	strh	r2, [r3, #0]
 8001dce:	e005      	b.n	8001ddc <osc_dac_update+0xcc>
		//HAL_DAC_SetValue(handler_dac, dac_ch, DAC_ALIGN_12B_R, dac_out);
	}else{
		phase = 0;
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <osc_dac_update+0xec>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	801a      	strh	r2, [r3, #0]
		dac_out = 0;
 8001dd6:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <osc_dac_update+0x10c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	801a      	strh	r2, [r3, #0]
	}

	HAL_DAC_SetValue(handler_dac, dac_ch, DAC_ALIGN_12B_R, dac_out);
 8001ddc:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <osc_dac_update+0x110>)
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <osc_dac_update+0x114>)
 8001de2:	6819      	ldr	r1, [r3, #0]
 8001de4:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <osc_dac_update+0x10c>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f001 f887 	bl	8002efc <HAL_DAC_SetValue>

//	flag_dac = 0;
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000088 	.word	0x20000088
 8001df8:	08040648 	.word	0x08040648
 8001dfc:	20000380 	.word	0x20000380
 8001e00:	20000089 	.word	0x20000089
 8001e04:	51eb851f 	.word	0x51eb851f
 8001e08:	0800c9c4 	.word	0x0800c9c4
 8001e0c:	2000008a 	.word	0x2000008a
 8001e10:	0801ddf0 	.word	0x0801ddf0
 8001e14:	2000008b 	.word	0x2000008b
 8001e18:	0802f21c 	.word	0x0802f21c
 8001e1c:	20000382 	.word	0x20000382
 8001e20:	20000738 	.word	0x20000738
 8001e24:	20000734 	.word	0x20000734

08001e28 <osc_setNote>:


int8_t osc_setNote (uint8_t nn){
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]

	if (!nn){
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d104      	bne.n	8001e42 <osc_setNote+0x1a>
		nota_activa = -1;
 8001e38:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <osc_setNote+0x48>)
 8001e3a:	22ff      	movs	r2, #255	; 0xff
 8001e3c:	701a      	strb	r2, [r3, #0]
		return 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e00f      	b.n	8001e62 <osc_setNote+0x3a>
	}

	if(nn<24 || nn>60){
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	2b17      	cmp	r3, #23
 8001e46:	d902      	bls.n	8001e4e <osc_setNote+0x26>
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	2b3c      	cmp	r3, #60	; 0x3c
 8001e4c:	d902      	bls.n	8001e54 <osc_setNote+0x2c>
		return -1;
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e52:	e006      	b.n	8001e62 <osc_setNote+0x3a>
	}

	nota_activa = nn - NOTA_C1;
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	3b18      	subs	r3, #24
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	b25a      	sxtb	r2, r3
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <osc_setNote+0x48>)
 8001e5e:	701a      	strb	r2, [r3, #0]
	return 0;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000088 	.word	0x20000088

08001e74 <osc_setRatios>:

int8_t osc_setRatios(uint8_t rsen, uint8_t rcuad, uint8_t rsier){
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	71bb      	strb	r3, [r7, #6]
 8001e82:	4613      	mov	r3, r2
 8001e84:	717b      	strb	r3, [r7, #5]

	if (rsen > 100 || rcuad > 100 || rsier > 100){
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	2b64      	cmp	r3, #100	; 0x64
 8001e8a:	d805      	bhi.n	8001e98 <osc_setRatios+0x24>
 8001e8c:	79bb      	ldrb	r3, [r7, #6]
 8001e8e:	2b64      	cmp	r3, #100	; 0x64
 8001e90:	d802      	bhi.n	8001e98 <osc_setRatios+0x24>
 8001e92:	797b      	ldrb	r3, [r7, #5]
 8001e94:	2b64      	cmp	r3, #100	; 0x64
 8001e96:	d902      	bls.n	8001e9e <osc_setRatios+0x2a>
		return -1;
 8001e98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e9c:	e009      	b.n	8001eb2 <osc_setRatios+0x3e>
	}

	ratio_sen = rsen; ratio_cuad = rcuad; ratio_ramp = rsier;
 8001e9e:	4a08      	ldr	r2, [pc, #32]	; (8001ec0 <osc_setRatios+0x4c>)
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	7013      	strb	r3, [r2, #0]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <osc_setRatios+0x50>)
 8001ea6:	79bb      	ldrb	r3, [r7, #6]
 8001ea8:	7013      	strb	r3, [r2, #0]
 8001eaa:	4a07      	ldr	r2, [pc, #28]	; (8001ec8 <osc_setRatios+0x54>)
 8001eac:	797b      	ldrb	r3, [r7, #5]
 8001eae:	7013      	strb	r3, [r2, #0]
	return 0;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000089 	.word	0x20000089
 8001ec4:	2000008a 	.word	0x2000008a
 8001ec8:	2000008b 	.word	0x2000008b

08001ecc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001ed0:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <MX_SPI1_Init+0x64>)
 8001ed2:	4a18      	ldr	r2, [pc, #96]	; (8001f34 <MX_SPI1_Init+0x68>)
 8001ed4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ed6:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <MX_SPI1_Init+0x64>)
 8001ed8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001edc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <MX_SPI1_Init+0x64>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <MX_SPI1_Init+0x64>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <MX_SPI1_Init+0x64>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <MX_SPI1_Init+0x64>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <MX_SPI1_Init+0x64>)
 8001ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001efc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001efe:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <MX_SPI1_Init+0x64>)
 8001f00:	2220      	movs	r2, #32
 8001f02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f04:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <MX_SPI1_Init+0x64>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <MX_SPI1_Init+0x64>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f10:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <MX_SPI1_Init+0x64>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <MX_SPI1_Init+0x64>)
 8001f18:	220a      	movs	r2, #10
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f1c:	4804      	ldr	r0, [pc, #16]	; (8001f30 <MX_SPI1_Init+0x64>)
 8001f1e:	f005 f8c7 	bl	80070b0 <HAL_SPI_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f28:	f7ff fece 	bl	8001cc8 <Error_Handler>
  }

}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	2000073c 	.word	0x2000073c
 8001f34:	40013000 	.word	0x40013000

08001f38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a1d      	ldr	r2, [pc, #116]	; (8001fcc <HAL_SPI_MspInit+0x94>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d133      	bne.n	8001fc2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <HAL_SPI_MspInit+0x98>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <HAL_SPI_MspInit+0x98>)
 8001f64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f68:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6a:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_SPI_MspInit+0x98>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <HAL_SPI_MspInit+0x98>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <HAL_SPI_MspInit+0x98>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_SPI_MspInit+0x98>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001f92:	2338      	movs	r3, #56	; 0x38
 8001f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fa2:	2305      	movs	r3, #5
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	4619      	mov	r1, r3
 8001fac:	4809      	ldr	r0, [pc, #36]	; (8001fd4 <HAL_SPI_MspInit+0x9c>)
 8001fae:	f000 fffb 	bl	8002fa8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2023      	movs	r0, #35	; 0x23
 8001fb8:	f000 fe95 	bl	8002ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001fbc:	2023      	movs	r0, #35	; 0x23
 8001fbe:	f000 feae 	bl	8002d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	3728      	adds	r7, #40	; 0x28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40013000 	.word	0x40013000
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020400 	.word	0x40020400

08001fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <HAL_MspInit+0x4c>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	4a0f      	ldr	r2, [pc, #60]	; (8002024 <HAL_MspInit+0x4c>)
 8001fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fec:	6453      	str	r3, [r2, #68]	; 0x44
 8001fee:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <HAL_MspInit+0x4c>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	603b      	str	r3, [r7, #0]
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <HAL_MspInit+0x4c>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a08      	ldr	r2, [pc, #32]	; (8002024 <HAL_MspInit+0x4c>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_MspInit+0x4c>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002016:	2007      	movs	r0, #7
 8002018:	f000 fe5a 	bl	8002cd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40023800 	.word	0x40023800

08002028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203a:	e7fe      	b.n	800203a <HardFault_Handler+0x4>

0800203c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <MemManage_Handler+0x4>

08002042 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <BusFault_Handler+0x4>

08002048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <UsageFault_Handler+0x4>

0800204e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800207c:	f000 fab4 	bl	80025e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}

08002084 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <TIM2_IRQHandler+0x10>)
 800208a:	f005 fda0 	bl	8007bce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200007d4 	.word	0x200007d4

08002098 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <TIM3_IRQHandler+0x10>)
 800209e:	f005 fd96 	bl	8007bce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000794 	.word	0x20000794

080020ac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <I2C1_EV_IRQHandler+0x10>)
 80020b2:	f001 fc09 	bl	80038c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000428 	.word	0x20000428

080020c0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80020c4:	4802      	ldr	r0, [pc, #8]	; (80020d0 <I2C1_ER_IRQHandler+0x10>)
 80020c6:	f001 fd65 	bl	8003b94 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000428 	.word	0x20000428

080020d4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <SPI1_IRQHandler+0x10>)
 80020da:	f005 faf9 	bl	80076d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2000073c 	.word	0x2000073c

080020e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <OTG_FS_IRQHandler+0x10>)
 80020ee:	f003 fb4a 	bl	8005786 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000ea8 	.word	0x20000ea8

080020fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002104:	4a14      	ldr	r2, [pc, #80]	; (8002158 <_sbrk+0x5c>)
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <_sbrk+0x60>)
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <_sbrk+0x64>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d102      	bne.n	800211e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <_sbrk+0x64>)
 800211a:	4a12      	ldr	r2, [pc, #72]	; (8002164 <_sbrk+0x68>)
 800211c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <_sbrk+0x64>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	429a      	cmp	r2, r3
 800212a:	d207      	bcs.n	800213c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800212c:	f00a fa26 	bl	800c57c <__errno>
 8002130:	4602      	mov	r2, r0
 8002132:	230c      	movs	r3, #12
 8002134:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800213a:	e009      	b.n	8002150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <_sbrk+0x64>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002142:	4b07      	ldr	r3, [pc, #28]	; (8002160 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	4a05      	ldr	r2, [pc, #20]	; (8002160 <_sbrk+0x64>)
 800214c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214e:	68fb      	ldr	r3, [r7, #12]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20020000 	.word	0x20020000
 800215c:	00000400 	.word	0x00000400
 8002160:	20000384 	.word	0x20000384
 8002164:	200012b8 	.word	0x200012b8

08002168 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <SystemInit+0x28>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002172:	4a07      	ldr	r2, [pc, #28]	; (8002190 <SystemInit+0x28>)
 8002174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <SystemInit+0x28>)
 800217e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002182:	609a      	str	r2, [r3, #8]
#endif
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800219a:	f107 0308 	add.w	r3, r7, #8
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a8:	463b      	mov	r3, r7
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80021b0:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <MX_TIM2_Init+0x94>)
 80021b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80021b8:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <MX_TIM2_Init+0x94>)
 80021ba:	2263      	movs	r2, #99	; 0x63
 80021bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021be:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <MX_TIM2_Init+0x94>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 840-1;
 80021c4:	4b18      	ldr	r3, [pc, #96]	; (8002228 <MX_TIM2_Init+0x94>)
 80021c6:	f240 3247 	movw	r2, #839	; 0x347
 80021ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021cc:	4b16      	ldr	r3, [pc, #88]	; (8002228 <MX_TIM2_Init+0x94>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <MX_TIM2_Init+0x94>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021d8:	4813      	ldr	r0, [pc, #76]	; (8002228 <MX_TIM2_Init+0x94>)
 80021da:	f005 fca9 	bl	8007b30 <HAL_TIM_Base_Init>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80021e4:	f7ff fd70 	bl	8001cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021ee:	f107 0308 	add.w	r3, r7, #8
 80021f2:	4619      	mov	r1, r3
 80021f4:	480c      	ldr	r0, [pc, #48]	; (8002228 <MX_TIM2_Init+0x94>)
 80021f6:	f005 fdf2 	bl	8007dde <HAL_TIM_ConfigClockSource>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002200:	f7ff fd62 	bl	8001cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002204:	2300      	movs	r3, #0
 8002206:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800220c:	463b      	mov	r3, r7
 800220e:	4619      	mov	r1, r3
 8002210:	4805      	ldr	r0, [pc, #20]	; (8002228 <MX_TIM2_Init+0x94>)
 8002212:	f005 fffd 	bl	8008210 <HAL_TIMEx_MasterConfigSynchronization>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800221c:	f7ff fd54 	bl	8001cc8 <Error_Handler>
  }

}
 8002220:	bf00      	nop
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	200007d4 	.word	0x200007d4

0800222c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002232:	f107 0308 	add.w	r3, r7, #8
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002240:	463b      	mov	r3, r7
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002248:	4b1c      	ldr	r3, [pc, #112]	; (80022bc <MX_TIM3_Init+0x90>)
 800224a:	4a1d      	ldr	r2, [pc, #116]	; (80022c0 <MX_TIM3_Init+0x94>)
 800224c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 119-1;
 800224e:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <MX_TIM3_Init+0x90>)
 8002250:	2276      	movs	r2, #118	; 0x76
 8002252:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002254:	4b19      	ldr	r3, [pc, #100]	; (80022bc <MX_TIM3_Init+0x90>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16-1;
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <MX_TIM3_Init+0x90>)
 800225c:	220f      	movs	r2, #15
 800225e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002260:	4b16      	ldr	r3, [pc, #88]	; (80022bc <MX_TIM3_Init+0x90>)
 8002262:	2200      	movs	r2, #0
 8002264:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <MX_TIM3_Init+0x90>)
 8002268:	2200      	movs	r2, #0
 800226a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800226c:	4813      	ldr	r0, [pc, #76]	; (80022bc <MX_TIM3_Init+0x90>)
 800226e:	f005 fc5f 	bl	8007b30 <HAL_TIM_Base_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002278:	f7ff fd26 	bl	8001cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800227c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002280:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002282:	f107 0308 	add.w	r3, r7, #8
 8002286:	4619      	mov	r1, r3
 8002288:	480c      	ldr	r0, [pc, #48]	; (80022bc <MX_TIM3_Init+0x90>)
 800228a:	f005 fda8 	bl	8007dde <HAL_TIM_ConfigClockSource>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002294:	f7ff fd18 	bl	8001cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002298:	2300      	movs	r3, #0
 800229a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022a0:	463b      	mov	r3, r7
 80022a2:	4619      	mov	r1, r3
 80022a4:	4805      	ldr	r0, [pc, #20]	; (80022bc <MX_TIM3_Init+0x90>)
 80022a6:	f005 ffb3 	bl	8008210 <HAL_TIMEx_MasterConfigSynchronization>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80022b0:	f7ff fd0a 	bl	8001cc8 <Error_Handler>
  }

}
 80022b4:	bf00      	nop
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20000794 	.word	0x20000794
 80022c0:	40000400 	.word	0x40000400

080022c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d4:	d116      	bne.n	8002304 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <HAL_TIM_Base_MspInit+0x80>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	4a19      	ldr	r2, [pc, #100]	; (8002344 <HAL_TIM_Base_MspInit+0x80>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6413      	str	r3, [r2, #64]	; 0x40
 80022e6:	4b17      	ldr	r3, [pc, #92]	; (8002344 <HAL_TIM_Base_MspInit+0x80>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	201c      	movs	r0, #28
 80022f8:	f000 fcf5 	bl	8002ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022fc:	201c      	movs	r0, #28
 80022fe:	f000 fd0e 	bl	8002d1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002302:	e01a      	b.n	800233a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM3)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0f      	ldr	r2, [pc, #60]	; (8002348 <HAL_TIM_Base_MspInit+0x84>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d115      	bne.n	800233a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <HAL_TIM_Base_MspInit+0x80>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	4a0b      	ldr	r2, [pc, #44]	; (8002344 <HAL_TIM_Base_MspInit+0x80>)
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	6413      	str	r3, [r2, #64]	; 0x40
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <HAL_TIM_Base_MspInit+0x80>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800232a:	2200      	movs	r2, #0
 800232c:	2100      	movs	r1, #0
 800232e:	201d      	movs	r0, #29
 8002330:	f000 fcd9 	bl	8002ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002334:	201d      	movs	r0, #29
 8002336:	f000 fcf2 	bl	8002d1e <HAL_NVIC_EnableIRQ>
}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	40000400 	.word	0x40000400

0800234c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <MX_USART3_UART_Init+0x4c>)
 8002352:	4a12      	ldr	r2, [pc, #72]	; (800239c <MX_USART3_UART_Init+0x50>)
 8002354:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <MX_USART3_UART_Init+0x4c>)
 8002358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800235c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <MX_USART3_UART_Init+0x4c>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <MX_USART3_UART_Init+0x4c>)
 8002366:	2200      	movs	r2, #0
 8002368:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <MX_USART3_UART_Init+0x4c>)
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <MX_USART3_UART_Init+0x4c>)
 8002372:	220c      	movs	r2, #12
 8002374:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <MX_USART3_UART_Init+0x4c>)
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <MX_USART3_UART_Init+0x4c>)
 800237e:	2200      	movs	r2, #0
 8002380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002382:	4805      	ldr	r0, [pc, #20]	; (8002398 <MX_USART3_UART_Init+0x4c>)
 8002384:	f005 ffd4 	bl	8008330 <HAL_UART_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800238e:	f7ff fc9b 	bl	8001cc8 <Error_Handler>
  }

}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000814 	.word	0x20000814
 800239c:	40004800 	.word	0x40004800

080023a0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <MX_USART6_UART_Init+0x4c>)
 80023a6:	4a12      	ldr	r2, [pc, #72]	; (80023f0 <MX_USART6_UART_Init+0x50>)
 80023a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <MX_USART6_UART_Init+0x4c>)
 80023ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <MX_USART6_UART_Init+0x4c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <MX_USART6_UART_Init+0x4c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <MX_USART6_UART_Init+0x4c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <MX_USART6_UART_Init+0x4c>)
 80023c6:	220c      	movs	r2, #12
 80023c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <MX_USART6_UART_Init+0x4c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <MX_USART6_UART_Init+0x4c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80023d6:	4805      	ldr	r0, [pc, #20]	; (80023ec <MX_USART6_UART_Init+0x4c>)
 80023d8:	f005 ffaa 	bl	8008330 <HAL_UART_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80023e2:	f7ff fc71 	bl	8001cc8 <Error_Handler>
  }

}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000854 	.word	0x20000854
 80023f0:	40011400 	.word	0x40011400

080023f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08c      	sub	sp, #48	; 0x30
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 031c 	add.w	r3, r7, #28
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a32      	ldr	r2, [pc, #200]	; (80024dc <HAL_UART_MspInit+0xe8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d12d      	bne.n	8002472 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	4b31      	ldr	r3, [pc, #196]	; (80024e0 <HAL_UART_MspInit+0xec>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a30      	ldr	r2, [pc, #192]	; (80024e0 <HAL_UART_MspInit+0xec>)
 8002420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
 8002426:	4b2e      	ldr	r3, [pc, #184]	; (80024e0 <HAL_UART_MspInit+0xec>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <HAL_UART_MspInit+0xec>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a29      	ldr	r2, [pc, #164]	; (80024e0 <HAL_UART_MspInit+0xec>)
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <HAL_UART_MspInit+0xec>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800244e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245c:	2303      	movs	r3, #3
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002460:	2307      	movs	r3, #7
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002464:	f107 031c 	add.w	r3, r7, #28
 8002468:	4619      	mov	r1, r3
 800246a:	481e      	ldr	r0, [pc, #120]	; (80024e4 <HAL_UART_MspInit+0xf0>)
 800246c:	f000 fd9c 	bl	8002fa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002470:	e030      	b.n	80024d4 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1c      	ldr	r2, [pc, #112]	; (80024e8 <HAL_UART_MspInit+0xf4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d12b      	bne.n	80024d4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 800247c:	2300      	movs	r3, #0
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <HAL_UART_MspInit+0xec>)
 8002482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002484:	4a16      	ldr	r2, [pc, #88]	; (80024e0 <HAL_UART_MspInit+0xec>)
 8002486:	f043 0320 	orr.w	r3, r3, #32
 800248a:	6453      	str	r3, [r2, #68]	; 0x44
 800248c:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <HAL_UART_MspInit+0xec>)
 800248e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <HAL_UART_MspInit+0xec>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	4a0f      	ldr	r2, [pc, #60]	; (80024e0 <HAL_UART_MspInit+0xec>)
 80024a2:	f043 0304 	orr.w	r3, r3, #4
 80024a6:	6313      	str	r3, [r2, #48]	; 0x30
 80024a8:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <HAL_UART_MspInit+0xec>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MIDI_TX_Pin|MIDI_RX_Pin;
 80024b4:	23c0      	movs	r3, #192	; 0xc0
 80024b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b8:	2302      	movs	r3, #2
 80024ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c0:	2303      	movs	r3, #3
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80024c4:	2308      	movs	r3, #8
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c8:	f107 031c 	add.w	r3, r7, #28
 80024cc:	4619      	mov	r1, r3
 80024ce:	4807      	ldr	r0, [pc, #28]	; (80024ec <HAL_UART_MspInit+0xf8>)
 80024d0:	f000 fd6a 	bl	8002fa8 <HAL_GPIO_Init>
}
 80024d4:	bf00      	nop
 80024d6:	3730      	adds	r7, #48	; 0x30
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40004800 	.word	0x40004800
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40020400 	.word	0x40020400
 80024e8:	40011400 	.word	0x40011400
 80024ec:	40020800 	.word	0x40020800

080024f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002528 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024f6:	e003      	b.n	8002500 <LoopCopyDataInit>

080024f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024fe:	3104      	adds	r1, #4

08002500 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002500:	480b      	ldr	r0, [pc, #44]	; (8002530 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002504:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002506:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002508:	d3f6      	bcc.n	80024f8 <CopyDataInit>
  ldr  r2, =_sbss
 800250a:	4a0b      	ldr	r2, [pc, #44]	; (8002538 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800250c:	e002      	b.n	8002514 <LoopFillZerobss>

0800250e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800250e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002510:	f842 3b04 	str.w	r3, [r2], #4

08002514 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002516:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002518:	d3f9      	bcc.n	800250e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800251a:	f7ff fe25 	bl	8002168 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800251e:	f00a f833 	bl	800c588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002522:	f7fe fe15 	bl	8001150 <main>
  bx  lr    
 8002526:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002528:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800252c:	080406a0 	.word	0x080406a0
  ldr  r0, =_sdata
 8002530:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002534:	200002d4 	.word	0x200002d4
  ldr  r2, =_sbss
 8002538:	200002d4 	.word	0x200002d4
  ldr  r3, = _ebss
 800253c:	200012b4 	.word	0x200012b4

08002540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002540:	e7fe      	b.n	8002540 <ADC_IRQHandler>
	...

08002544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002548:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <HAL_Init+0x40>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <HAL_Init+0x40>)
 800254e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002552:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_Init+0x40>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <HAL_Init+0x40>)
 800255a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800255e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002560:	4b08      	ldr	r3, [pc, #32]	; (8002584 <HAL_Init+0x40>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a07      	ldr	r2, [pc, #28]	; (8002584 <HAL_Init+0x40>)
 8002566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800256c:	2003      	movs	r0, #3
 800256e:	f000 fbaf 	bl	8002cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002572:	2000      	movs	r0, #0
 8002574:	f000 f808 	bl	8002588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002578:	f7ff fd2e 	bl	8001fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40023c00 	.word	0x40023c00

08002588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002590:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_InitTick+0x54>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_InitTick+0x58>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	4619      	mov	r1, r3
 800259a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800259e:	fbb3 f3f1 	udiv	r3, r3, r1
 80025a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fbc7 	bl	8002d3a <HAL_SYSTICK_Config>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e00e      	b.n	80025d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b0f      	cmp	r3, #15
 80025ba:	d80a      	bhi.n	80025d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025bc:	2200      	movs	r2, #0
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025c4:	f000 fb8f 	bl	8002ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025c8:	4a06      	ldr	r2, [pc, #24]	; (80025e4 <HAL_InitTick+0x5c>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e000      	b.n	80025d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	2000008c 	.word	0x2000008c
 80025e0:	20000094 	.word	0x20000094
 80025e4:	20000090 	.word	0x20000090

080025e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_IncTick+0x20>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_IncTick+0x24>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4413      	add	r3, r2
 80025f8:	4a04      	ldr	r2, [pc, #16]	; (800260c <HAL_IncTick+0x24>)
 80025fa:	6013      	str	r3, [r2, #0]
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000094 	.word	0x20000094
 800260c:	20000894 	.word	0x20000894

08002610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return uwTick;
 8002614:	4b03      	ldr	r3, [pc, #12]	; (8002624 <HAL_GetTick+0x14>)
 8002616:	681b      	ldr	r3, [r3, #0]
}
 8002618:	4618      	mov	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	20000894 	.word	0x20000894

08002628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002630:	f7ff ffee 	bl	8002610 <HAL_GetTick>
 8002634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002640:	d005      	beq.n	800264e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_Delay+0x40>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4413      	add	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800264e:	bf00      	nop
 8002650:	f7ff ffde 	bl	8002610 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	429a      	cmp	r2, r3
 800265e:	d8f7      	bhi.n	8002650 <HAL_Delay+0x28>
  {
  }
}
 8002660:	bf00      	nop
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000094 	.word	0x20000094

0800266c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e033      	b.n	80026ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe f9a0 	bl	80009d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 0310 	and.w	r3, r3, #16
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d118      	bne.n	80026dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026b2:	f023 0302 	bic.w	r3, r3, #2
 80026b6:	f043 0202 	orr.w	r2, r3, #2
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f93a 	bl	8002938 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f023 0303 	bic.w	r3, r3, #3
 80026d2:	f043 0201 	orr.w	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
 80026da:	e001      	b.n	80026e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x1c>
 800270c:	2302      	movs	r3, #2
 800270e:	e105      	b.n	800291c <HAL_ADC_ConfigChannel+0x228>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b09      	cmp	r3, #9
 800271e:	d925      	bls.n	800276c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68d9      	ldr	r1, [r3, #12]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	3b1e      	subs	r3, #30
 8002736:	2207      	movs	r2, #7
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43da      	mvns	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	400a      	ands	r2, r1
 8002744:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68d9      	ldr	r1, [r3, #12]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	b29b      	uxth	r3, r3
 8002756:	4618      	mov	r0, r3
 8002758:	4603      	mov	r3, r0
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	4403      	add	r3, r0
 800275e:	3b1e      	subs	r3, #30
 8002760:	409a      	lsls	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	e022      	b.n	80027b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6919      	ldr	r1, [r3, #16]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	b29b      	uxth	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	4613      	mov	r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4413      	add	r3, r2
 8002780:	2207      	movs	r2, #7
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43da      	mvns	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	400a      	ands	r2, r1
 800278e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6919      	ldr	r1, [r3, #16]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	4618      	mov	r0, r3
 80027a2:	4603      	mov	r3, r0
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4403      	add	r3, r0
 80027a8:	409a      	lsls	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b06      	cmp	r3, #6
 80027b8:	d824      	bhi.n	8002804 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	3b05      	subs	r3, #5
 80027cc:	221f      	movs	r2, #31
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43da      	mvns	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	400a      	ands	r2, r1
 80027da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	4618      	mov	r0, r3
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	3b05      	subs	r3, #5
 80027f6:	fa00 f203 	lsl.w	r2, r0, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	635a      	str	r2, [r3, #52]	; 0x34
 8002802:	e04c      	b.n	800289e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b0c      	cmp	r3, #12
 800280a:	d824      	bhi.n	8002856 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	3b23      	subs	r3, #35	; 0x23
 800281e:	221f      	movs	r2, #31
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43da      	mvns	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	400a      	ands	r2, r1
 800282c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	b29b      	uxth	r3, r3
 800283a:	4618      	mov	r0, r3
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	3b23      	subs	r3, #35	; 0x23
 8002848:	fa00 f203 	lsl.w	r2, r0, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	631a      	str	r2, [r3, #48]	; 0x30
 8002854:	e023      	b.n	800289e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	3b41      	subs	r3, #65	; 0x41
 8002868:	221f      	movs	r2, #31
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43da      	mvns	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	400a      	ands	r2, r1
 8002876:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	b29b      	uxth	r3, r3
 8002884:	4618      	mov	r0, r3
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	3b41      	subs	r3, #65	; 0x41
 8002892:	fa00 f203 	lsl.w	r2, r0, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800289e:	4b22      	ldr	r3, [pc, #136]	; (8002928 <HAL_ADC_ConfigChannel+0x234>)
 80028a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a21      	ldr	r2, [pc, #132]	; (800292c <HAL_ADC_ConfigChannel+0x238>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d109      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x1cc>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b12      	cmp	r3, #18
 80028b2:	d105      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a19      	ldr	r2, [pc, #100]	; (800292c <HAL_ADC_ConfigChannel+0x238>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d123      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x21e>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b10      	cmp	r3, #16
 80028d0:	d003      	beq.n	80028da <HAL_ADC_ConfigChannel+0x1e6>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b11      	cmp	r3, #17
 80028d8:	d11b      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b10      	cmp	r3, #16
 80028ec:	d111      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_ADC_ConfigChannel+0x23c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a10      	ldr	r2, [pc, #64]	; (8002934 <HAL_ADC_ConfigChannel+0x240>)
 80028f4:	fba2 2303 	umull	r2, r3, r2, r3
 80028f8:	0c9a      	lsrs	r2, r3, #18
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002904:	e002      	b.n	800290c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	3b01      	subs	r3, #1
 800290a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f9      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	40012300 	.word	0x40012300
 800292c:	40012000 	.word	0x40012000
 8002930:	2000008c 	.word	0x2000008c
 8002934:	431bde83 	.word	0x431bde83

08002938 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002940:	4b79      	ldr	r3, [pc, #484]	; (8002b28 <ADC_Init+0x1f0>)
 8002942:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	431a      	orrs	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800296c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	021a      	lsls	r2, r3, #8
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002990:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6899      	ldr	r1, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	4a58      	ldr	r2, [pc, #352]	; (8002b2c <ADC_Init+0x1f4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d022      	beq.n	8002a16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6899      	ldr	r1, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6899      	ldr	r1, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	e00f      	b.n	8002a36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0202 	bic.w	r2, r2, #2
 8002a44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6899      	ldr	r1, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	7e1b      	ldrb	r3, [r3, #24]
 8002a50:	005a      	lsls	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01b      	beq.n	8002a9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6859      	ldr	r1, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	035a      	lsls	r2, r3, #13
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	e007      	b.n	8002aac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aaa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	051a      	lsls	r2, r3, #20
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ae0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6899      	ldr	r1, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aee:	025a      	lsls	r2, r3, #9
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6899      	ldr	r1, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	029a      	lsls	r2, r3, #10
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	609a      	str	r2, [r3, #8]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	40012300 	.word	0x40012300
 8002b2c:	0f000001 	.word	0x0f000001

08002b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <__NVIC_SetPriorityGrouping+0x44>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b62:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <__NVIC_SetPriorityGrouping+0x44>)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	60d3      	str	r3, [r2, #12]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <__NVIC_GetPriorityGrouping+0x18>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	f003 0307 	and.w	r3, r3, #7
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	db0b      	blt.n	8002bbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	f003 021f 	and.w	r2, r3, #31
 8002bac:	4907      	ldr	r1, [pc, #28]	; (8002bcc <__NVIC_EnableIRQ+0x38>)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000e100 	.word	0xe000e100

08002bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	6039      	str	r1, [r7, #0]
 8002bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	db0a      	blt.n	8002bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	490c      	ldr	r1, [pc, #48]	; (8002c1c <__NVIC_SetPriority+0x4c>)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	0112      	lsls	r2, r2, #4
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf8:	e00a      	b.n	8002c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4908      	ldr	r1, [pc, #32]	; (8002c20 <__NVIC_SetPriority+0x50>)
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	3b04      	subs	r3, #4
 8002c08:	0112      	lsls	r2, r2, #4
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	761a      	strb	r2, [r3, #24]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000e100 	.word	0xe000e100
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	; 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f1c3 0307 	rsb	r3, r3, #7
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	bf28      	it	cs
 8002c42:	2304      	movcs	r3, #4
 8002c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	d902      	bls.n	8002c54 <NVIC_EncodePriority+0x30>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3b03      	subs	r3, #3
 8002c52:	e000      	b.n	8002c56 <NVIC_EncodePriority+0x32>
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	401a      	ands	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	43d9      	mvns	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	4313      	orrs	r3, r2
         );
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3724      	adds	r7, #36	; 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c9c:	d301      	bcc.n	8002ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e00f      	b.n	8002cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <SysTick_Config+0x40>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002caa:	210f      	movs	r1, #15
 8002cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cb0:	f7ff ff8e 	bl	8002bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <SysTick_Config+0x40>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cba:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <SysTick_Config+0x40>)
 8002cbc:	2207      	movs	r2, #7
 8002cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	e000e010 	.word	0xe000e010

08002cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ff29 	bl	8002b30 <__NVIC_SetPriorityGrouping>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf8:	f7ff ff3e 	bl	8002b78 <__NVIC_GetPriorityGrouping>
 8002cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	6978      	ldr	r0, [r7, #20]
 8002d04:	f7ff ff8e 	bl	8002c24 <NVIC_EncodePriority>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff5d 	bl	8002bd0 <__NVIC_SetPriority>
}
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	4603      	mov	r3, r0
 8002d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff31 	bl	8002b94 <__NVIC_EnableIRQ>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff ffa2 	bl	8002c8c <SysTick_Config>
 8002d48:	4603      	mov	r3, r0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e014      	b.n	8002d8e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	791b      	ldrb	r3, [r3, #4]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d105      	bne.n	8002d7a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7fd febf 	bl	8000af8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b085      	sub	sp, #20
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	2300      	movs	r3, #0
 8002da6:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	795b      	ldrb	r3, [r3, #5]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_DAC_Start+0x1e>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e050      	b.n	8002e56 <HAL_DAC_Start+0xc0>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6819      	ldr	r1, [r3, #0]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d11a      	bne.n	8002e10 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002df0:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d127      	bne.n	8002e48 <HAL_DAC_Start+0xb2>
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b38      	cmp	r3, #56	; 0x38
 8002dfc:	d124      	bne.n	8002e48 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 0201 	orr.w	r2, r2, #1
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	e01b      	b.n	8002e48 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e1a:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8002e26:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e2e:	d10b      	bne.n	8002e48 <HAL_DAC_Start+0xb2>
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8002e36:	d107      	bne.n	8002e48 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0202 	orr.w	r2, r2, #2
 8002e46:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b087      	sub	sp, #28
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	2300      	movs	r3, #0
 8002e74:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	795b      	ldrb	r3, [r3, #5]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_DAC_ConfigChannel+0x20>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e036      	b.n	8002ef0 <HAL_DAC_ConfigChannel+0x8e>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002e96:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6819      	ldr	r1, [r3, #0]
 8002ed0:	22c0      	movs	r2, #192	; 0xc0
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43da      	mvns	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	400a      	ands	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d105      	bne.n	8002f26 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4413      	add	r3, r2
 8002f20:	3308      	adds	r3, #8
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	e004      	b.n	8002f30 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3314      	adds	r3, #20
 8002f2e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	461a      	mov	r2, r3
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d004      	beq.n	8002f64 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2280      	movs	r2, #128	; 0x80
 8002f5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e00c      	b.n	8002f7e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2205      	movs	r2, #5
 8002f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0201 	bic.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f98:	b2db      	uxtb	r3, r3
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	e16b      	b.n	800329c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	f040 815a 	bne.w	8003296 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d00b      	beq.n	8003002 <HAL_GPIO_Init+0x5a>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d007      	beq.n	8003002 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ff6:	2b11      	cmp	r3, #17
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b12      	cmp	r3, #18
 8003000:	d130      	bne.n	8003064 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	2203      	movs	r2, #3
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003038:	2201      	movs	r2, #1
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f003 0201 	and.w	r2, r3, #1
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	2203      	movs	r2, #3
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_Init+0xfc>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b12      	cmp	r3, #18
 80030a2:	d123      	bne.n	80030ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	08da      	lsrs	r2, r3, #3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3208      	adds	r2, #8
 80030ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	220f      	movs	r2, #15
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	08da      	lsrs	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3208      	adds	r2, #8
 80030e6:	69b9      	ldr	r1, [r7, #24]
 80030e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	2203      	movs	r2, #3
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0203 	and.w	r2, r3, #3
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80b4 	beq.w	8003296 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	4b5f      	ldr	r3, [pc, #380]	; (80032b0 <HAL_GPIO_Init+0x308>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	4a5e      	ldr	r2, [pc, #376]	; (80032b0 <HAL_GPIO_Init+0x308>)
 8003138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800313c:	6453      	str	r3, [r2, #68]	; 0x44
 800313e:	4b5c      	ldr	r3, [pc, #368]	; (80032b0 <HAL_GPIO_Init+0x308>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800314a:	4a5a      	ldr	r2, [pc, #360]	; (80032b4 <HAL_GPIO_Init+0x30c>)
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	089b      	lsrs	r3, r3, #2
 8003150:	3302      	adds	r3, #2
 8003152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	220f      	movs	r2, #15
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a51      	ldr	r2, [pc, #324]	; (80032b8 <HAL_GPIO_Init+0x310>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d02b      	beq.n	80031ce <HAL_GPIO_Init+0x226>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a50      	ldr	r2, [pc, #320]	; (80032bc <HAL_GPIO_Init+0x314>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d025      	beq.n	80031ca <HAL_GPIO_Init+0x222>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a4f      	ldr	r2, [pc, #316]	; (80032c0 <HAL_GPIO_Init+0x318>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d01f      	beq.n	80031c6 <HAL_GPIO_Init+0x21e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a4e      	ldr	r2, [pc, #312]	; (80032c4 <HAL_GPIO_Init+0x31c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d019      	beq.n	80031c2 <HAL_GPIO_Init+0x21a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a4d      	ldr	r2, [pc, #308]	; (80032c8 <HAL_GPIO_Init+0x320>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d013      	beq.n	80031be <HAL_GPIO_Init+0x216>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a4c      	ldr	r2, [pc, #304]	; (80032cc <HAL_GPIO_Init+0x324>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00d      	beq.n	80031ba <HAL_GPIO_Init+0x212>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a4b      	ldr	r2, [pc, #300]	; (80032d0 <HAL_GPIO_Init+0x328>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d007      	beq.n	80031b6 <HAL_GPIO_Init+0x20e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a4a      	ldr	r2, [pc, #296]	; (80032d4 <HAL_GPIO_Init+0x32c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d101      	bne.n	80031b2 <HAL_GPIO_Init+0x20a>
 80031ae:	2307      	movs	r3, #7
 80031b0:	e00e      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031b2:	2308      	movs	r3, #8
 80031b4:	e00c      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031b6:	2306      	movs	r3, #6
 80031b8:	e00a      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031ba:	2305      	movs	r3, #5
 80031bc:	e008      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031be:	2304      	movs	r3, #4
 80031c0:	e006      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031c2:	2303      	movs	r3, #3
 80031c4:	e004      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e002      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031ce:	2300      	movs	r3, #0
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	f002 0203 	and.w	r2, r2, #3
 80031d6:	0092      	lsls	r2, r2, #2
 80031d8:	4093      	lsls	r3, r2
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031e0:	4934      	ldr	r1, [pc, #208]	; (80032b4 <HAL_GPIO_Init+0x30c>)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	089b      	lsrs	r3, r3, #2
 80031e6:	3302      	adds	r3, #2
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031ee:	4b3a      	ldr	r3, [pc, #232]	; (80032d8 <HAL_GPIO_Init+0x330>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003212:	4a31      	ldr	r2, [pc, #196]	; (80032d8 <HAL_GPIO_Init+0x330>)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003218:	4b2f      	ldr	r3, [pc, #188]	; (80032d8 <HAL_GPIO_Init+0x330>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800323c:	4a26      	ldr	r2, [pc, #152]	; (80032d8 <HAL_GPIO_Init+0x330>)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003242:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <HAL_GPIO_Init+0x330>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003266:	4a1c      	ldr	r2, [pc, #112]	; (80032d8 <HAL_GPIO_Init+0x330>)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800326c:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <HAL_GPIO_Init+0x330>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003290:	4a11      	ldr	r2, [pc, #68]	; (80032d8 <HAL_GPIO_Init+0x330>)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3301      	adds	r3, #1
 800329a:	61fb      	str	r3, [r7, #28]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	2b0f      	cmp	r3, #15
 80032a0:	f67f ae90 	bls.w	8002fc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032a4:	bf00      	nop
 80032a6:	3724      	adds	r7, #36	; 0x24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40013800 	.word	0x40013800
 80032b8:	40020000 	.word	0x40020000
 80032bc:	40020400 	.word	0x40020400
 80032c0:	40020800 	.word	0x40020800
 80032c4:	40020c00 	.word	0x40020c00
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40021400 	.word	0x40021400
 80032d0:	40021800 	.word	0x40021800
 80032d4:	40021c00 	.word	0x40021c00
 80032d8:	40013c00 	.word	0x40013c00

080032dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	807b      	strh	r3, [r7, #2]
 80032e8:	4613      	mov	r3, r2
 80032ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032ec:	787b      	ldrb	r3, [r7, #1]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032f2:	887a      	ldrh	r2, [r7, #2]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032f8:	e003      	b.n	8003302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032fa:	887b      	ldrh	r3, [r7, #2]
 80032fc:	041a      	lsls	r2, r3, #16
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	619a      	str	r2, [r3, #24]
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e11f      	b.n	8003562 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fd fccc 	bl	8000cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2224      	movs	r2, #36	; 0x24
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0201 	bic.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003362:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003372:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003374:	f003 fe74 	bl	8007060 <HAL_RCC_GetPCLK1Freq>
 8003378:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	4a7b      	ldr	r2, [pc, #492]	; (800356c <HAL_I2C_Init+0x25c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d807      	bhi.n	8003394 <HAL_I2C_Init+0x84>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4a7a      	ldr	r2, [pc, #488]	; (8003570 <HAL_I2C_Init+0x260>)
 8003388:	4293      	cmp	r3, r2
 800338a:	bf94      	ite	ls
 800338c:	2301      	movls	r3, #1
 800338e:	2300      	movhi	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e006      	b.n	80033a2 <HAL_I2C_Init+0x92>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4a77      	ldr	r2, [pc, #476]	; (8003574 <HAL_I2C_Init+0x264>)
 8003398:	4293      	cmp	r3, r2
 800339a:	bf94      	ite	ls
 800339c:	2301      	movls	r3, #1
 800339e:	2300      	movhi	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e0db      	b.n	8003562 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4a72      	ldr	r2, [pc, #456]	; (8003578 <HAL_I2C_Init+0x268>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	0c9b      	lsrs	r3, r3, #18
 80033b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	4a64      	ldr	r2, [pc, #400]	; (800356c <HAL_I2C_Init+0x25c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d802      	bhi.n	80033e4 <HAL_I2C_Init+0xd4>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	3301      	adds	r3, #1
 80033e2:	e009      	b.n	80033f8 <HAL_I2C_Init+0xe8>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033ea:	fb02 f303 	mul.w	r3, r2, r3
 80033ee:	4a63      	ldr	r2, [pc, #396]	; (800357c <HAL_I2C_Init+0x26c>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	099b      	lsrs	r3, r3, #6
 80033f6:	3301      	adds	r3, #1
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	430b      	orrs	r3, r1
 80033fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800340a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4956      	ldr	r1, [pc, #344]	; (800356c <HAL_I2C_Init+0x25c>)
 8003414:	428b      	cmp	r3, r1
 8003416:	d80d      	bhi.n	8003434 <HAL_I2C_Init+0x124>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1e59      	subs	r1, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	fbb1 f3f3 	udiv	r3, r1, r3
 8003426:	3301      	adds	r3, #1
 8003428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342c:	2b04      	cmp	r3, #4
 800342e:	bf38      	it	cc
 8003430:	2304      	movcc	r3, #4
 8003432:	e04f      	b.n	80034d4 <HAL_I2C_Init+0x1c4>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d111      	bne.n	8003460 <HAL_I2C_Init+0x150>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	1e58      	subs	r0, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6859      	ldr	r1, [r3, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	440b      	add	r3, r1
 800344a:	fbb0 f3f3 	udiv	r3, r0, r3
 800344e:	3301      	adds	r3, #1
 8003450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e012      	b.n	8003486 <HAL_I2C_Init+0x176>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	1e58      	subs	r0, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6859      	ldr	r1, [r3, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	0099      	lsls	r1, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	fbb0 f3f3 	udiv	r3, r0, r3
 8003476:	3301      	adds	r3, #1
 8003478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_I2C_Init+0x17e>
 800348a:	2301      	movs	r3, #1
 800348c:	e022      	b.n	80034d4 <HAL_I2C_Init+0x1c4>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10e      	bne.n	80034b4 <HAL_I2C_Init+0x1a4>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1e58      	subs	r0, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6859      	ldr	r1, [r3, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	440b      	add	r3, r1
 80034a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a8:	3301      	adds	r3, #1
 80034aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b2:	e00f      	b.n	80034d4 <HAL_I2C_Init+0x1c4>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1e58      	subs	r0, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	0099      	lsls	r1, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ca:	3301      	adds	r3, #1
 80034cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	6809      	ldr	r1, [r1, #0]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69da      	ldr	r2, [r3, #28]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003502:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6911      	ldr	r1, [r2, #16]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68d2      	ldr	r2, [r2, #12]
 800350e:	4311      	orrs	r1, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	430b      	orrs	r3, r1
 8003516:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	000186a0 	.word	0x000186a0
 8003570:	001e847f 	.word	0x001e847f
 8003574:	003d08ff 	.word	0x003d08ff
 8003578:	431bde83 	.word	0x431bde83
 800357c:	10624dd3 	.word	0x10624dd3

08003580 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	461a      	mov	r2, r3
 800358c:	460b      	mov	r3, r1
 800358e:	817b      	strh	r3, [r7, #10]
 8003590:	4613      	mov	r3, r2
 8003592:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003594:	f7ff f83c 	bl	8002610 <HAL_GetTick>
 8003598:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	f040 80e0 	bne.w	8003768 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	2319      	movs	r3, #25
 80035ae:	2201      	movs	r2, #1
 80035b0:	4970      	ldr	r1, [pc, #448]	; (8003774 <HAL_I2C_Master_Transmit+0x1f4>)
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f001 fdf5 	bl	80051a2 <I2C_WaitOnFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80035be:	2302      	movs	r3, #2
 80035c0:	e0d3      	b.n	800376a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_I2C_Master_Transmit+0x50>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e0cc      	b.n	800376a <HAL_I2C_Master_Transmit+0x1ea>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d007      	beq.n	80035f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0201 	orr.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003604:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2221      	movs	r2, #33	; 0x21
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2210      	movs	r2, #16
 8003612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	893a      	ldrh	r2, [r7, #8]
 8003626:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4a50      	ldr	r2, [pc, #320]	; (8003778 <HAL_I2C_Master_Transmit+0x1f8>)
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003638:	8979      	ldrh	r1, [r7, #10]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	6a3a      	ldr	r2, [r7, #32]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f001 fcae 	bl	8004fa0 <I2C_MasterRequestWrite>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e08d      	b.n	800376a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364e:	2300      	movs	r3, #0
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003664:	e066      	b.n	8003734 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	6a39      	ldr	r1, [r7, #32]
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f001 fe6f 	bl	800534e <I2C_WaitOnTXEFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00d      	beq.n	8003692 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	2b04      	cmp	r3, #4
 800367c:	d107      	bne.n	800368e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e06b      	b.n	800376a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	781a      	ldrb	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d11b      	bne.n	8003708 <HAL_I2C_Master_Transmit+0x188>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d017      	beq.n	8003708 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	781a      	ldrb	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	6a39      	ldr	r1, [r7, #32]
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f001 fe5f 	bl	80053d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00d      	beq.n	8003734 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	2b04      	cmp	r3, #4
 800371e:	d107      	bne.n	8003730 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800372e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e01a      	b.n	800376a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003738:	2b00      	cmp	r3, #0
 800373a:	d194      	bne.n	8003666 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	e000      	b.n	800376a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003768:	2302      	movs	r3, #2
  }
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	00100002 	.word	0x00100002
 8003778:	ffff0000 	.word	0xffff0000

0800377c <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	461a      	mov	r2, r3
 8003788:	460b      	mov	r3, r1
 800378a:	817b      	strh	r3, [r7, #10]
 800378c:	4613      	mov	r3, r2
 800378e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b20      	cmp	r3, #32
 800379e:	f040 8085 	bne.w	80038ac <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80037a2:	4b46      	ldr	r3, [pc, #280]	; (80038bc <HAL_I2C_Master_Transmit_IT+0x140>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	08db      	lsrs	r3, r3, #3
 80037a8:	4a45      	ldr	r2, [pc, #276]	; (80038c0 <HAL_I2C_Master_Transmit_IT+0x144>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	0a1a      	lsrs	r2, r3, #8
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	009a      	lsls	r2, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	3b01      	subs	r3, #1
 80037c0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d116      	bne.n	80037f6 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f043 0220 	orr.w	r2, r3, #32
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e05b      	b.n	80038ae <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b02      	cmp	r3, #2
 8003802:	d0db      	beq.n	80037bc <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_I2C_Master_Transmit_IT+0x96>
 800380e:	2302      	movs	r3, #2
 8003810:	e04d      	b.n	80038ae <HAL_I2C_Master_Transmit_IT+0x132>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d007      	beq.n	8003838 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003846:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2221      	movs	r2, #33	; 0x21
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2210      	movs	r2, #16
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	893a      	ldrh	r2, [r7, #8]
 8003868:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4a13      	ldr	r2, [pc, #76]	; (80038c4 <HAL_I2C_Master_Transmit_IT+0x148>)
 8003878:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800387a:	897a      	ldrh	r2, [r7, #10]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800388e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80038a6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	e000      	b.n	80038ae <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 80038ac:	2302      	movs	r3, #2
  }
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	371c      	adds	r7, #28
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	2000008c 	.word	0x2000008c
 80038c0:	14f8b589 	.word	0x14f8b589
 80038c4:	ffff0000 	.word	0xffff0000

080038c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	2b10      	cmp	r3, #16
 80038f6:	d003      	beq.n	8003900 <HAL_I2C_EV_IRQHandler+0x38>
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	2b40      	cmp	r3, #64	; 0x40
 80038fc:	f040 80b6 	bne.w	8003a6c <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10d      	bne.n	8003936 <HAL_I2C_EV_IRQHandler+0x6e>
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003920:	d003      	beq.n	800392a <HAL_I2C_EV_IRQHandler+0x62>
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003928:	d101      	bne.n	800392e <HAL_I2C_EV_IRQHandler+0x66>
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <HAL_I2C_EV_IRQHandler+0x68>
 800392e:	2300      	movs	r3, #0
 8003930:	2b01      	cmp	r3, #1
 8003932:	f000 8127 	beq.w	8003b84 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00c      	beq.n	800395a <HAL_I2C_EV_IRQHandler+0x92>
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	0a5b      	lsrs	r3, r3, #9
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d006      	beq.n	800395a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f001 fdaf 	bl	80054b0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fd12 	bl	800437c <I2C_Master_SB>
 8003958:	e087      	b.n	8003a6a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	08db      	lsrs	r3, r3, #3
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <HAL_I2C_EV_IRQHandler+0xb2>
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	0a5b      	lsrs	r3, r3, #9
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fd88 	bl	8004488 <I2C_Master_ADD10>
 8003978:	e077      	b.n	8003a6a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <HAL_I2C_EV_IRQHandler+0xd2>
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	0a5b      	lsrs	r3, r3, #9
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fda2 	bl	80044dc <I2C_Master_ADDR>
 8003998:	e067      	b.n	8003a6a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	089b      	lsrs	r3, r3, #2
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d030      	beq.n	8003a08 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039b4:	f000 80e8 	beq.w	8003b88 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	09db      	lsrs	r3, r3, #7
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00f      	beq.n	80039e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	0a9b      	lsrs	r3, r3, #10
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d009      	beq.n	80039e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	089b      	lsrs	r3, r3, #2
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d103      	bne.n	80039e4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f9de 	bl	8003d9e <I2C_MasterTransmit_TXE>
 80039e2:	e042      	b.n	8003a6a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	089b      	lsrs	r3, r3, #2
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80cb 	beq.w	8003b88 <HAL_I2C_EV_IRQHandler+0x2c0>
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	0a5b      	lsrs	r3, r3, #9
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80c4 	beq.w	8003b88 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fa68 	bl	8003ed6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a06:	e0bf      	b.n	8003b88 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a16:	f000 80b7 	beq.w	8003b88 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	099b      	lsrs	r3, r3, #6
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00f      	beq.n	8003a46 <HAL_I2C_EV_IRQHandler+0x17e>
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	0a9b      	lsrs	r3, r3, #10
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <HAL_I2C_EV_IRQHandler+0x17e>
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	089b      	lsrs	r3, r3, #2
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d103      	bne.n	8003a46 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fb30 	bl	80040a4 <I2C_MasterReceive_RXNE>
 8003a44:	e011      	b.n	8003a6a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	089b      	lsrs	r3, r3, #2
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 809a 	beq.w	8003b88 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	0a5b      	lsrs	r3, r3, #9
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8093 	beq.w	8003b88 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fba0 	bl	80041a8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a68:	e08e      	b.n	8003b88 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003a6a:	e08d      	b.n	8003b88 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d004      	beq.n	8003a7e <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	61fb      	str	r3, [r7, #28]
 8003a7c:	e007      	b.n	8003a8e <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	085b      	lsrs	r3, r3, #1
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d012      	beq.n	8003ac0 <HAL_I2C_EV_IRQHandler+0x1f8>
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	0a5b      	lsrs	r3, r3, #9
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00c      	beq.n	8003ac0 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003ab6:	69b9      	ldr	r1, [r7, #24]
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 ff5e 	bl	800497a <I2C_Slave_ADDR>
 8003abe:	e066      	b.n	8003b8e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d009      	beq.n	8003ae0 <HAL_I2C_EV_IRQHandler+0x218>
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	0a5b      	lsrs	r3, r3, #9
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 ff93 	bl	8004a04 <I2C_Slave_STOPF>
 8003ade:	e056      	b.n	8003b8e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ae0:	7bbb      	ldrb	r3, [r7, #14]
 8003ae2:	2b21      	cmp	r3, #33	; 0x21
 8003ae4:	d002      	beq.n	8003aec <HAL_I2C_EV_IRQHandler+0x224>
 8003ae6:	7bbb      	ldrb	r3, [r7, #14]
 8003ae8:	2b29      	cmp	r3, #41	; 0x29
 8003aea:	d125      	bne.n	8003b38 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	09db      	lsrs	r3, r3, #7
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00f      	beq.n	8003b18 <HAL_I2C_EV_IRQHandler+0x250>
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	0a9b      	lsrs	r3, r3, #10
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d009      	beq.n	8003b18 <HAL_I2C_EV_IRQHandler+0x250>
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	089b      	lsrs	r3, r3, #2
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d103      	bne.n	8003b18 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 fe74 	bl	80047fe <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b16:	e039      	b.n	8003b8c <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	089b      	lsrs	r3, r3, #2
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d033      	beq.n	8003b8c <HAL_I2C_EV_IRQHandler+0x2c4>
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	0a5b      	lsrs	r3, r3, #9
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d02d      	beq.n	8003b8c <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 fea1 	bl	8004878 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b36:	e029      	b.n	8003b8c <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	099b      	lsrs	r3, r3, #6
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00f      	beq.n	8003b64 <HAL_I2C_EV_IRQHandler+0x29c>
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	0a9b      	lsrs	r3, r3, #10
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d009      	beq.n	8003b64 <HAL_I2C_EV_IRQHandler+0x29c>
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	089b      	lsrs	r3, r3, #2
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d103      	bne.n	8003b64 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 feac 	bl	80048ba <I2C_SlaveReceive_RXNE>
 8003b62:	e014      	b.n	8003b8e <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	089b      	lsrs	r3, r3, #2
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00e      	beq.n	8003b8e <HAL_I2C_EV_IRQHandler+0x2c6>
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	0a5b      	lsrs	r3, r3, #9
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 feda 	bl	8004936 <I2C_SlaveReceive_BTF>
 8003b82:	e004      	b.n	8003b8e <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003b84:	bf00      	nop
 8003b86:	e002      	b.n	8003b8e <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b88:	bf00      	nop
 8003b8a:	e000      	b.n	8003b8e <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b8c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003b8e:	3720      	adds	r7, #32
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bb6:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00e      	beq.n	8003be2 <HAL_I2C_ER_IRQHandler+0x4e>
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	0a1b      	lsrs	r3, r3, #8
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	f043 0301 	orr.w	r3, r3, #1
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003be0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	0a5b      	lsrs	r3, r3, #9
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00e      	beq.n	8003c0c <HAL_I2C_ER_IRQHandler+0x78>
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	0a1b      	lsrs	r3, r3, #8
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d008      	beq.n	8003c0c <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	f043 0302 	orr.w	r3, r3, #2
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003c0a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	0a9b      	lsrs	r3, r3, #10
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d03f      	beq.n	8003c98 <HAL_I2C_ER_IRQHandler+0x104>
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	0a1b      	lsrs	r3, r3, #8
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d039      	beq.n	8003c98 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003c24:	7efb      	ldrb	r3, [r7, #27]
 8003c26:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c36:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003c3e:	7ebb      	ldrb	r3, [r7, #26]
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	d112      	bne.n	8003c6a <HAL_I2C_ER_IRQHandler+0xd6>
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10f      	bne.n	8003c6a <HAL_I2C_ER_IRQHandler+0xd6>
 8003c4a:	7cfb      	ldrb	r3, [r7, #19]
 8003c4c:	2b21      	cmp	r3, #33	; 0x21
 8003c4e:	d008      	beq.n	8003c62 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003c50:	7cfb      	ldrb	r3, [r7, #19]
 8003c52:	2b29      	cmp	r3, #41	; 0x29
 8003c54:	d005      	beq.n	8003c62 <HAL_I2C_ER_IRQHandler+0xce>
 8003c56:	7cfb      	ldrb	r3, [r7, #19]
 8003c58:	2b28      	cmp	r3, #40	; 0x28
 8003c5a:	d106      	bne.n	8003c6a <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b21      	cmp	r3, #33	; 0x21
 8003c60:	d103      	bne.n	8003c6a <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fffe 	bl	8004c64 <I2C_Slave_AF>
 8003c68:	e016      	b.n	8003c98 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c72:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	f043 0304 	orr.w	r3, r3, #4
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c7c:	7efb      	ldrb	r3, [r7, #27]
 8003c7e:	2b10      	cmp	r3, #16
 8003c80:	d002      	beq.n	8003c88 <HAL_I2C_ER_IRQHandler+0xf4>
 8003c82:	7efb      	ldrb	r3, [r7, #27]
 8003c84:	2b40      	cmp	r3, #64	; 0x40
 8003c86:	d107      	bne.n	8003c98 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c96:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	0adb      	lsrs	r3, r3, #11
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00e      	beq.n	8003cc2 <HAL_I2C_ER_IRQHandler+0x12e>
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	0a1b      	lsrs	r3, r3, #8
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	f043 0308 	orr.w	r3, r3, #8
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003cc0:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f001 f835 	bl	8004d44 <I2C_ITError>
  }
}
 8003cda:	bf00      	nop
 8003cdc:	3728      	adds	r7, #40	; 0x28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	460b      	mov	r3, r1
 8003d28:	70fb      	strb	r3, [r7, #3]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b084      	sub	sp, #16
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003db4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d150      	bne.n	8003e66 <I2C_MasterTransmit_TXE+0xc8>
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	2b21      	cmp	r3, #33	; 0x21
 8003dc8:	d14d      	bne.n	8003e66 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d01d      	beq.n	8003e0c <I2C_MasterTransmit_TXE+0x6e>
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d01a      	beq.n	8003e0c <I2C_MasterTransmit_TXE+0x6e>
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ddc:	d016      	beq.n	8003e0c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dec:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2211      	movs	r2, #17
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7fd ff55 	bl	8001cb4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e0a:	e060      	b.n	8003ece <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e1a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e2a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b40      	cmp	r3, #64	; 0x40
 8003e44:	d107      	bne.n	8003e56 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff ff7d 	bl	8003d4e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e54:	e03b      	b.n	8003ece <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fd ff28 	bl	8001cb4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e64:	e033      	b.n	8003ece <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	2b21      	cmp	r3, #33	; 0x21
 8003e6a:	d005      	beq.n	8003e78 <I2C_MasterTransmit_TXE+0xda>
 8003e6c:	7bbb      	ldrb	r3, [r7, #14]
 8003e6e:	2b40      	cmp	r3, #64	; 0x40
 8003e70:	d12d      	bne.n	8003ece <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	2b22      	cmp	r3, #34	; 0x22
 8003e76:	d12a      	bne.n	8003ece <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d108      	bne.n	8003e94 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e90:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003e92:	e01c      	b.n	8003ece <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b40      	cmp	r3, #64	; 0x40
 8003e9e:	d103      	bne.n	8003ea8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f898 	bl	8003fd6 <I2C_MemoryTransmit_TXE_BTF>
}
 8003ea6:	e012      	b.n	8003ece <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	781a      	ldrb	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ecc:	e7ff      	b.n	8003ece <I2C_MasterTransmit_TXE+0x130>
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b084      	sub	sp, #16
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b21      	cmp	r3, #33	; 0x21
 8003eee:	d165      	bne.n	8003fbc <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d012      	beq.n	8003f20 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	781a      	ldrb	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003f1e:	e056      	b.n	8003fce <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d01d      	beq.n	8003f62 <I2C_MasterTransmit_BTF+0x8c>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d01a      	beq.n	8003f62 <I2C_MasterTransmit_BTF+0x8c>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f32:	d016      	beq.n	8003f62 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f42:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2211      	movs	r2, #17
 8003f48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fd feaa 	bl	8001cb4 <HAL_I2C_MasterTxCpltCallback>
}
 8003f60:	e035      	b.n	8003fce <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f70:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f80:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b40      	cmp	r3, #64	; 0x40
 8003f9a:	d107      	bne.n	8003fac <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff fed2 	bl	8003d4e <HAL_I2C_MemTxCpltCallback>
}
 8003faa:	e010      	b.n	8003fce <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7fd fe7d 	bl	8001cb4 <HAL_I2C_MasterTxCpltCallback>
}
 8003fba:	e008      	b.n	8003fce <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b40      	cmp	r3, #64	; 0x40
 8003fc6:	d102      	bne.n	8003fce <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f804 	bl	8003fd6 <I2C_MemoryTransmit_TXE_BTF>
}
 8003fce:	bf00      	nop
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d11d      	bne.n	8004022 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d10b      	bne.n	8004006 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffe:	1c9a      	adds	r2, r3, #2
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004004:	e048      	b.n	8004098 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800400a:	b29b      	uxth	r3, r3
 800400c:	121b      	asrs	r3, r3, #8
 800400e:	b2da      	uxtb	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004020:	e03a      	b.n	8004098 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004026:	2b01      	cmp	r3, #1
 8004028:	d10b      	bne.n	8004042 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800402e:	b2da      	uxtb	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004040:	e02a      	b.n	8004098 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004046:	2b02      	cmp	r3, #2
 8004048:	d126      	bne.n	8004098 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b22      	cmp	r3, #34	; 0x22
 8004054:	d108      	bne.n	8004068 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004064:	601a      	str	r2, [r3, #0]
}
 8004066:	e017      	b.n	8004098 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b21      	cmp	r3, #33	; 0x21
 8004072:	d111      	bne.n	8004098 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	781a      	ldrb	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b22      	cmp	r3, #34	; 0x22
 80040b6:	d173      	bne.n	80041a0 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d920      	bls.n	8004108 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b03      	cmp	r3, #3
 80040f4:	d154      	bne.n	80041a0 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004104:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004106:	e04b      	b.n	80041a0 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	2b02      	cmp	r3, #2
 800410e:	d047      	beq.n	80041a0 <I2C_MasterReceive_RXNE+0xfc>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d002      	beq.n	800411c <I2C_MasterReceive_RXNE+0x78>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d141      	bne.n	80041a0 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800412a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800413a:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004158:	b29b      	uxth	r3, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b40      	cmp	r3, #64	; 0x40
 8004174:	d10a      	bne.n	800418c <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff fdec 	bl	8003d62 <HAL_I2C_MemRxCpltCallback>
}
 800418a:	e009      	b.n	80041a0 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2212      	movs	r2, #18
 8004198:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff fda1 	bl	8003ce2 <HAL_I2C_MasterRxCpltCallback>
}
 80041a0:	bf00      	nop
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d11b      	bne.n	80041f8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ce:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80041f6:	e0bd      	b.n	8004374 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d129      	bne.n	8004256 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004210:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b04      	cmp	r3, #4
 8004216:	d00a      	beq.n	800422e <I2C_MasterReceive_BTF+0x86>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d007      	beq.n	800422e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800422c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004254:	e08e      	b.n	8004374 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d176      	bne.n	800434e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d002      	beq.n	800426c <I2C_MasterReceive_BTF+0xc4>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b10      	cmp	r3, #16
 800426a:	d108      	bne.n	800427e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	e019      	b.n	80042b2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b04      	cmp	r3, #4
 8004282:	d002      	beq.n	800428a <I2C_MasterReceive_BTF+0xe2>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d108      	bne.n	800429c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	e00a      	b.n	80042b2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b10      	cmp	r3, #16
 80042a0:	d007      	beq.n	80042b2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691a      	ldr	r2, [r3, #16]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800430c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b40      	cmp	r3, #64	; 0x40
 8004320:	d10a      	bne.n	8004338 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7ff fd16 	bl	8003d62 <HAL_I2C_MemRxCpltCallback>
}
 8004336:	e01d      	b.n	8004374 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2212      	movs	r2, #18
 8004344:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff fccb 	bl	8003ce2 <HAL_I2C_MasterRxCpltCallback>
}
 800434c:	e012      	b.n	8004374 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004374:	bf00      	nop
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b40      	cmp	r3, #64	; 0x40
 800438e:	d117      	bne.n	80043c0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004394:	2b00      	cmp	r3, #0
 8004396:	d109      	bne.n	80043ac <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439c:	b2db      	uxtb	r3, r3
 800439e:	461a      	mov	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043a8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80043aa:	e067      	b.n	800447c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	611a      	str	r2, [r3, #16]
}
 80043be:	e05d      	b.n	800447c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043c8:	d133      	bne.n	8004432 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b21      	cmp	r3, #33	; 0x21
 80043d4:	d109      	bne.n	80043ea <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	461a      	mov	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043e6:	611a      	str	r2, [r3, #16]
 80043e8:	e008      	b.n	80043fc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004400:	2b00      	cmp	r3, #0
 8004402:	d004      	beq.n	800440e <I2C_Master_SB+0x92>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440a:	2b00      	cmp	r3, #0
 800440c:	d108      	bne.n	8004420 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	2b00      	cmp	r3, #0
 8004414:	d032      	beq.n	800447c <I2C_Master_SB+0x100>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441c:	2b00      	cmp	r3, #0
 800441e:	d02d      	beq.n	800447c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800442e:	605a      	str	r2, [r3, #4]
}
 8004430:	e024      	b.n	800447c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10e      	bne.n	8004458 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443e:	b29b      	uxth	r3, r3
 8004440:	11db      	asrs	r3, r3, #7
 8004442:	b2db      	uxtb	r3, r3
 8004444:	f003 0306 	and.w	r3, r3, #6
 8004448:	b2db      	uxtb	r3, r3
 800444a:	f063 030f 	orn	r3, r3, #15
 800444e:	b2da      	uxtb	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	611a      	str	r2, [r3, #16]
}
 8004456:	e011      	b.n	800447c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800445c:	2b01      	cmp	r3, #1
 800445e:	d10d      	bne.n	800447c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004464:	b29b      	uxth	r3, r3
 8004466:	11db      	asrs	r3, r3, #7
 8004468:	b2db      	uxtb	r3, r3
 800446a:	f003 0306 	and.w	r3, r3, #6
 800446e:	b2db      	uxtb	r3, r3
 8004470:	f063 030e 	orn	r3, r3, #14
 8004474:	b2da      	uxtb	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	611a      	str	r2, [r3, #16]
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004494:	b2da      	uxtb	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d103      	bne.n	80044ac <I2C_Master_ADD10+0x24>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d011      	beq.n	80044d0 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d104      	bne.n	80044c0 <I2C_Master_ADD10+0x38>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ce:	605a      	str	r2, [r3, #4]
    }
  }
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80044dc:	b480      	push	{r7}
 80044de:	b091      	sub	sp, #68	; 0x44
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b22      	cmp	r3, #34	; 0x22
 8004504:	f040 8169 	bne.w	80047da <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10f      	bne.n	8004530 <I2C_Master_ADDR+0x54>
 8004510:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004514:	2b40      	cmp	r3, #64	; 0x40
 8004516:	d10b      	bne.n	8004530 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004518:	2300      	movs	r3, #0
 800451a:	633b      	str	r3, [r7, #48]	; 0x30
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	633b      	str	r3, [r7, #48]	; 0x30
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	633b      	str	r3, [r7, #48]	; 0x30
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	e160      	b.n	80047f2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004534:	2b00      	cmp	r3, #0
 8004536:	d11d      	bne.n	8004574 <I2C_Master_ADDR+0x98>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004540:	d118      	bne.n	8004574 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004542:	2300      	movs	r3, #0
 8004544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004556:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004566:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	651a      	str	r2, [r3, #80]	; 0x50
 8004572:	e13e      	b.n	80047f2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d113      	bne.n	80045a6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457e:	2300      	movs	r3, #0
 8004580:	62bb      	str	r3, [r7, #40]	; 0x28
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	62bb      	str	r3, [r7, #40]	; 0x28
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	62bb      	str	r3, [r7, #40]	; 0x28
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	e115      	b.n	80047d2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	f040 808a 	bne.w	80046c6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80045b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045b8:	d137      	bne.n	800462a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d8:	d113      	bne.n	8004602 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ea:	2300      	movs	r3, #0
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	e0e7      	b.n	80047d2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004602:	2300      	movs	r3, #0
 8004604:	623b      	str	r3, [r7, #32]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	623b      	str	r3, [r7, #32]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	623b      	str	r3, [r7, #32]
 8004616:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	e0d3      	b.n	80047d2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800462a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462c:	2b08      	cmp	r3, #8
 800462e:	d02e      	beq.n	800468e <I2C_Master_ADDR+0x1b2>
 8004630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004632:	2b20      	cmp	r3, #32
 8004634:	d02b      	beq.n	800468e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004638:	2b12      	cmp	r3, #18
 800463a:	d102      	bne.n	8004642 <I2C_Master_ADDR+0x166>
 800463c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463e:	2b01      	cmp	r3, #1
 8004640:	d125      	bne.n	800468e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004644:	2b04      	cmp	r3, #4
 8004646:	d00e      	beq.n	8004666 <I2C_Master_ADDR+0x18a>
 8004648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464a:	2b02      	cmp	r3, #2
 800464c:	d00b      	beq.n	8004666 <I2C_Master_ADDR+0x18a>
 800464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004650:	2b10      	cmp	r3, #16
 8004652:	d008      	beq.n	8004666 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	e007      	b.n	8004676 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004674:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	61fb      	str	r3, [r7, #28]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	61fb      	str	r3, [r7, #28]
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	e0a1      	b.n	80047d2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800469c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800469e:	2300      	movs	r3, #0
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	61bb      	str	r3, [r7, #24]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	e085      	b.n	80047d2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d14d      	bne.n	800476c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80046d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d016      	beq.n	8004704 <I2C_Master_ADDR+0x228>
 80046d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d013      	beq.n	8004704 <I2C_Master_ADDR+0x228>
 80046dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046de:	2b10      	cmp	r3, #16
 80046e0:	d010      	beq.n	8004704 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	e007      	b.n	8004714 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004712:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800471e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004722:	d117      	bne.n	8004754 <I2C_Master_ADDR+0x278>
 8004724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004726:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800472a:	d00b      	beq.n	8004744 <I2C_Master_ADDR+0x268>
 800472c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472e:	2b01      	cmp	r3, #1
 8004730:	d008      	beq.n	8004744 <I2C_Master_ADDR+0x268>
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	2b08      	cmp	r3, #8
 8004736:	d005      	beq.n	8004744 <I2C_Master_ADDR+0x268>
 8004738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473a:	2b10      	cmp	r3, #16
 800473c:	d002      	beq.n	8004744 <I2C_Master_ADDR+0x268>
 800473e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004740:	2b20      	cmp	r3, #32
 8004742:	d107      	bne.n	8004754 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004752:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	617b      	str	r3, [r7, #20]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	e032      	b.n	80047d2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800477a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800478a:	d117      	bne.n	80047bc <I2C_Master_ADDR+0x2e0>
 800478c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004792:	d00b      	beq.n	80047ac <I2C_Master_ADDR+0x2d0>
 8004794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004796:	2b01      	cmp	r3, #1
 8004798:	d008      	beq.n	80047ac <I2C_Master_ADDR+0x2d0>
 800479a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479c:	2b08      	cmp	r3, #8
 800479e:	d005      	beq.n	80047ac <I2C_Master_ADDR+0x2d0>
 80047a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a2:	2b10      	cmp	r3, #16
 80047a4:	d002      	beq.n	80047ac <I2C_Master_ADDR+0x2d0>
 80047a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	d107      	bne.n	80047bc <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047ba:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047bc:	2300      	movs	r3, #0
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	613b      	str	r3, [r7, #16]
 80047d0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80047d8:	e00b      	b.n	80047f2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047da:	2300      	movs	r3, #0
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	68fb      	ldr	r3, [r7, #12]
}
 80047f0:	e7ff      	b.n	80047f2 <I2C_Master_ADDR+0x316>
 80047f2:	bf00      	nop
 80047f4:	3744      	adds	r7, #68	; 0x44
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b084      	sub	sp, #16
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004812:	b29b      	uxth	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d02b      	beq.n	8004870 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	781a      	ldrb	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d114      	bne.n	8004870 <I2C_SlaveTransmit_TXE+0x72>
 8004846:	7bfb      	ldrb	r3, [r7, #15]
 8004848:	2b29      	cmp	r3, #41	; 0x29
 800484a:	d111      	bne.n	8004870 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800485a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2221      	movs	r2, #33	; 0x21
 8004860:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2228      	movs	r2, #40	; 0x28
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7ff fa43 	bl	8003cf6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004870:	bf00      	nop
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d011      	beq.n	80048ae <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	781a      	ldrb	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d02c      	beq.n	800492e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691a      	ldr	r2, [r3, #16]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d114      	bne.n	800492e <I2C_SlaveReceive_RXNE+0x74>
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b2a      	cmp	r3, #42	; 0x2a
 8004908:	d111      	bne.n	800492e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004918:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2222      	movs	r2, #34	; 0x22
 800491e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2228      	movs	r2, #40	; 0x28
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff f9ee 	bl	8003d0a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800492e:	bf00      	nop
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d012      	beq.n	800496e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691a      	ldr	r2, [r3, #16]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004964:	b29b      	uxth	r3, r3
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004984:	2300      	movs	r3, #0
 8004986:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498e:	b2db      	uxtb	r3, r3
 8004990:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004994:	2b28      	cmp	r3, #40	; 0x28
 8004996:	d127      	bne.n	80049e8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	089b      	lsrs	r3, r3, #2
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80049b4:	2301      	movs	r3, #1
 80049b6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	09db      	lsrs	r3, r3, #7
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d103      	bne.n	80049cc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	81bb      	strh	r3, [r7, #12]
 80049ca:	e002      	b.n	80049d2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80049da:	89ba      	ldrh	r2, [r7, #12]
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	4619      	mov	r1, r3
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff f99c 	bl	8003d1e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80049e6:	e008      	b.n	80049fa <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0202 	mvn.w	r2, #2
 80049f0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80049fa:	bf00      	nop
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a12:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a22:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004a24:	2300      	movs	r3, #0
 8004a26:	60bb      	str	r3, [r7, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a50:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a60:	d172      	bne.n	8004b48 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	2b22      	cmp	r3, #34	; 0x22
 8004a66:	d002      	beq.n	8004a6e <I2C_Slave_STOPF+0x6a>
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a6c:	d135      	bne.n	8004ada <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f043 0204 	orr.w	r2, r3, #4
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aa0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fe fa6f 	bl	8002f8a <HAL_DMA_GetState>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d049      	beq.n	8004b46 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	4a69      	ldr	r2, [pc, #420]	; (8004c5c <I2C_Slave_STOPF+0x258>)
 8004ab8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fe fa41 	bl	8002f46 <HAL_DMA_Abort_IT>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d03d      	beq.n	8004b46 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ad8:	e035      	b.n	8004b46 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d005      	beq.n	8004afe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	f043 0204 	orr.w	r2, r3, #4
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b0c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fe fa39 	bl	8002f8a <HAL_DMA_GetState>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d014      	beq.n	8004b48 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b22:	4a4e      	ldr	r2, [pc, #312]	; (8004c5c <I2C_Slave_STOPF+0x258>)
 8004b24:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe fa0b 	bl	8002f46 <HAL_DMA_Abort_IT>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d008      	beq.n	8004b48 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b40:	4610      	mov	r0, r2
 8004b42:	4798      	blx	r3
 8004b44:	e000      	b.n	8004b48 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b46:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d03e      	beq.n	8004bd0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d112      	bne.n	8004b86 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b40      	cmp	r3, #64	; 0x40
 8004b92:	d112      	bne.n	8004bba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691a      	ldr	r2, [r3, #16]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	f043 0204 	orr.w	r2, r3, #4
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f8b3 	bl	8004d44 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004bde:	e039      	b.n	8004c54 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
 8004be2:	2b2a      	cmp	r3, #42	; 0x2a
 8004be4:	d109      	bne.n	8004bfa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2228      	movs	r2, #40	; 0x28
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff f888 	bl	8003d0a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b28      	cmp	r3, #40	; 0x28
 8004c04:	d111      	bne.n	8004c2a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a15      	ldr	r2, [pc, #84]	; (8004c60 <I2C_Slave_STOPF+0x25c>)
 8004c0a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff f889 	bl	8003d3a <HAL_I2C_ListenCpltCallback>
}
 8004c28:	e014      	b.n	8004c54 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2e:	2b22      	cmp	r3, #34	; 0x22
 8004c30:	d002      	beq.n	8004c38 <I2C_Slave_STOPF+0x234>
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
 8004c34:	2b22      	cmp	r3, #34	; 0x22
 8004c36:	d10d      	bne.n	8004c54 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7ff f85b 	bl	8003d0a <HAL_I2C_SlaveRxCpltCallback>
}
 8004c54:	bf00      	nop
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	080050a5 	.word	0x080050a5
 8004c60:	ffff0000 	.word	0xffff0000

08004c64 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c72:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d002      	beq.n	8004c86 <I2C_Slave_AF+0x22>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b20      	cmp	r3, #32
 8004c84:	d129      	bne.n	8004cda <I2C_Slave_AF+0x76>
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
 8004c88:	2b28      	cmp	r3, #40	; 0x28
 8004c8a:	d126      	bne.n	8004cda <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a2c      	ldr	r2, [pc, #176]	; (8004d40 <I2C_Slave_AF+0xdc>)
 8004c90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ca0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004caa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cba:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff f831 	bl	8003d3a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004cd8:	e02e      	b.n	8004d38 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	2b21      	cmp	r3, #33	; 0x21
 8004cde:	d126      	bne.n	8004d2e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a17      	ldr	r2, [pc, #92]	; (8004d40 <I2C_Slave_AF+0xdc>)
 8004ce4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2221      	movs	r2, #33	; 0x21
 8004cea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d0a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d14:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d24:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7fe ffe5 	bl	8003cf6 <HAL_I2C_SlaveTxCpltCallback>
}
 8004d2c:	e004      	b.n	8004d38 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d36:	615a      	str	r2, [r3, #20]
}
 8004d38:	bf00      	nop
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	ffff0000 	.word	0xffff0000

08004d44 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d52:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b10      	cmp	r3, #16
 8004d5e:	d10a      	bne.n	8004d76 <I2C_ITError+0x32>
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b22      	cmp	r3, #34	; 0x22
 8004d64:	d107      	bne.n	8004d76 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d74:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d7c:	2b28      	cmp	r3, #40	; 0x28
 8004d7e:	d107      	bne.n	8004d90 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2228      	movs	r2, #40	; 0x28
 8004d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d8e:	e015      	b.n	8004dbc <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d9e:	d006      	beq.n	8004dae <I2C_ITError+0x6a>
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	2b60      	cmp	r3, #96	; 0x60
 8004da4:	d003      	beq.n	8004dae <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dca:	d162      	bne.n	8004e92 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dda:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d020      	beq.n	8004e2c <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dee:	4a6a      	ldr	r2, [pc, #424]	; (8004f98 <I2C_ITError+0x254>)
 8004df0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fe f8a5 	bl	8002f46 <HAL_DMA_Abort_IT>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 8089 	beq.w	8004f16 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0201 	bic.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e26:	4610      	mov	r0, r2
 8004e28:	4798      	blx	r3
 8004e2a:	e074      	b.n	8004f16 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e30:	4a59      	ldr	r2, [pc, #356]	; (8004f98 <I2C_ITError+0x254>)
 8004e32:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fe f884 	bl	8002f46 <HAL_DMA_Abort_IT>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d068      	beq.n	8004f16 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4e:	2b40      	cmp	r3, #64	; 0x40
 8004e50:	d10b      	bne.n	8004e6a <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0201 	bic.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	4798      	blx	r3
 8004e90:	e041      	b.n	8004f16 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b60      	cmp	r3, #96	; 0x60
 8004e9c:	d125      	bne.n	8004eea <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb6:	2b40      	cmp	r3, #64	; 0x40
 8004eb8:	d10b      	bne.n	8004ed2 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fe ff51 	bl	8003d8a <HAL_I2C_AbortCpltCallback>
 8004ee8:	e015      	b.n	8004f16 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef4:	2b40      	cmp	r3, #64	; 0x40
 8004ef6:	d10b      	bne.n	8004f10 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7fe ff30 	bl	8003d76 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10e      	bne.n	8004f44 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d109      	bne.n	8004f44 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d104      	bne.n	8004f44 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d007      	beq.n	8004f54 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f52:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d113      	bne.n	8004f90 <I2C_ITError+0x24c>
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
 8004f6a:	2b28      	cmp	r3, #40	; 0x28
 8004f6c:	d110      	bne.n	8004f90 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a0a      	ldr	r2, [pc, #40]	; (8004f9c <I2C_ITError+0x258>)
 8004f72:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fe fed5 	bl	8003d3a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f90:	bf00      	nop
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	080050a5 	.word	0x080050a5
 8004f9c:	ffff0000 	.word	0xffff0000

08004fa0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b088      	sub	sp, #32
 8004fa4:	af02      	add	r7, sp, #8
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	607a      	str	r2, [r7, #4]
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	460b      	mov	r3, r1
 8004fae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d006      	beq.n	8004fca <I2C_MasterRequestWrite+0x2a>
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d003      	beq.n	8004fca <I2C_MasterRequestWrite+0x2a>
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fc8:	d108      	bne.n	8004fdc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	e00b      	b.n	8004ff4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	2b12      	cmp	r3, #18
 8004fe2:	d107      	bne.n	8004ff4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ff2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 f8ce 	bl	80051a2 <I2C_WaitOnFlagUntilTimeout>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00c      	beq.n	8005026 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005020:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e035      	b.n	8005092 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800502e:	d108      	bne.n	8005042 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005030:	897b      	ldrh	r3, [r7, #10]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	461a      	mov	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800503e:	611a      	str	r2, [r3, #16]
 8005040:	e01b      	b.n	800507a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005042:	897b      	ldrh	r3, [r7, #10]
 8005044:	11db      	asrs	r3, r3, #7
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f003 0306 	and.w	r3, r3, #6
 800504c:	b2db      	uxtb	r3, r3
 800504e:	f063 030f 	orn	r3, r3, #15
 8005052:	b2da      	uxtb	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	490f      	ldr	r1, [pc, #60]	; (800509c <I2C_MasterRequestWrite+0xfc>)
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f8f5 	bl	8005250 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e010      	b.n	8005092 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005070:	897b      	ldrh	r3, [r7, #10]
 8005072:	b2da      	uxtb	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	4908      	ldr	r1, [pc, #32]	; (80050a0 <I2C_MasterRequestWrite+0x100>)
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 f8e5 	bl	8005250 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e000      	b.n	8005092 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	00010008 	.word	0x00010008
 80050a0:	00010002 	.word	0x00010002

080050a4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b8:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c6:	2200      	movs	r2, #0
 80050c8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d6:	2200      	movs	r2, #0
 80050d8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fc:	2200      	movs	r2, #0
 80050fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	2200      	movs	r2, #0
 800510e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0201 	bic.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b60      	cmp	r3, #96	; 0x60
 800512a:	d10e      	bne.n	800514a <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2220      	movs	r2, #32
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f7fe fe21 	bl	8003d8a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005148:	e027      	b.n	800519a <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800514a:	7afb      	ldrb	r3, [r7, #11]
 800514c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005150:	2b28      	cmp	r3, #40	; 0x28
 8005152:	d117      	bne.n	8005184 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0201 	orr.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005172:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2228      	movs	r2, #40	; 0x28
 800517e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005182:	e007      	b.n	8005194 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f7fe fdee 	bl	8003d76 <HAL_I2C_ErrorCallback>
}
 800519a:	bf00      	nop
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b084      	sub	sp, #16
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	603b      	str	r3, [r7, #0]
 80051ae:	4613      	mov	r3, r2
 80051b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051b2:	e025      	b.n	8005200 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051ba:	d021      	beq.n	8005200 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051bc:	f7fd fa28 	bl	8002610 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d302      	bcc.n	80051d2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d116      	bne.n	8005200 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	f043 0220 	orr.w	r2, r3, #32
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e023      	b.n	8005248 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	0c1b      	lsrs	r3, r3, #16
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b01      	cmp	r3, #1
 8005208:	d10d      	bne.n	8005226 <I2C_WaitOnFlagUntilTimeout+0x84>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	43da      	mvns	r2, r3
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	4013      	ands	r3, r2
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	bf0c      	ite	eq
 800521c:	2301      	moveq	r3, #1
 800521e:	2300      	movne	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	461a      	mov	r2, r3
 8005224:	e00c      	b.n	8005240 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	43da      	mvns	r2, r3
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4013      	ands	r3, r2
 8005232:	b29b      	uxth	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	bf0c      	ite	eq
 8005238:	2301      	moveq	r3, #1
 800523a:	2300      	movne	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	461a      	mov	r2, r3
 8005240:	79fb      	ldrb	r3, [r7, #7]
 8005242:	429a      	cmp	r2, r3
 8005244:	d0b6      	beq.n	80051b4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800525e:	e051      	b.n	8005304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800526a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526e:	d123      	bne.n	80052b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800527e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005288:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2220      	movs	r2, #32
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a4:	f043 0204 	orr.w	r2, r3, #4
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e046      	b.n	8005346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052be:	d021      	beq.n	8005304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c0:	f7fd f9a6 	bl	8002610 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d302      	bcc.n	80052d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d116      	bne.n	8005304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2220      	movs	r2, #32
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f0:	f043 0220 	orr.w	r2, r3, #32
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e020      	b.n	8005346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	0c1b      	lsrs	r3, r3, #16
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b01      	cmp	r3, #1
 800530c:	d10c      	bne.n	8005328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	43da      	mvns	r2, r3
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4013      	ands	r3, r2
 800531a:	b29b      	uxth	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	bf14      	ite	ne
 8005320:	2301      	movne	r3, #1
 8005322:	2300      	moveq	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	e00b      	b.n	8005340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	43da      	mvns	r2, r3
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4013      	ands	r3, r2
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	bf14      	ite	ne
 800533a:	2301      	movne	r3, #1
 800533c:	2300      	moveq	r3, #0
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d18d      	bne.n	8005260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b084      	sub	sp, #16
 8005352:	af00      	add	r7, sp, #0
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800535a:	e02d      	b.n	80053b8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f878 	bl	8005452 <I2C_IsAcknowledgeFailed>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e02d      	b.n	80053c8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005372:	d021      	beq.n	80053b8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005374:	f7fd f94c 	bl	8002610 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	429a      	cmp	r2, r3
 8005382:	d302      	bcc.n	800538a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d116      	bne.n	80053b8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a4:	f043 0220 	orr.w	r2, r3, #32
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e007      	b.n	80053c8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c2:	2b80      	cmp	r3, #128	; 0x80
 80053c4:	d1ca      	bne.n	800535c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053dc:	e02d      	b.n	800543a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 f837 	bl	8005452 <I2C_IsAcknowledgeFailed>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e02d      	b.n	800544a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053f4:	d021      	beq.n	800543a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f6:	f7fd f90b 	bl	8002610 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	429a      	cmp	r2, r3
 8005404:	d302      	bcc.n	800540c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d116      	bne.n	800543a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2220      	movs	r2, #32
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	f043 0220 	orr.w	r2, r3, #32
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e007      	b.n	800544a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b04      	cmp	r3, #4
 8005446:	d1ca      	bne.n	80053de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005468:	d11b      	bne.n	80054a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005472:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2220      	movs	r2, #32
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f043 0204 	orr.w	r2, r3, #4
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e000      	b.n	80054a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80054c0:	d103      	bne.n	80054ca <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80054c8:	e007      	b.n	80054da <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ce:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80054d2:	d102      	bne.n	80054da <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2208      	movs	r2, #8
 80054d8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80054e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054e8:	b08f      	sub	sp, #60	; 0x3c
 80054ea:	af0a      	add	r7, sp, #40	; 0x28
 80054ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e10f      	b.n	8005718 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f006 fd36 	bl	800bf84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2203      	movs	r2, #3
 800551c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005528:	2b00      	cmp	r3, #0
 800552a:	d102      	bne.n	8005532 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4618      	mov	r0, r3
 8005538:	f003 fbd9 	bl	8008cee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	603b      	str	r3, [r7, #0]
 8005542:	687e      	ldr	r6, [r7, #4]
 8005544:	466d      	mov	r5, sp
 8005546:	f106 0410 	add.w	r4, r6, #16
 800554a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800554c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800554e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005552:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005556:	e885 0003 	stmia.w	r5, {r0, r1}
 800555a:	1d33      	adds	r3, r6, #4
 800555c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800555e:	6838      	ldr	r0, [r7, #0]
 8005560:	f003 fab0 	bl	8008ac4 <USB_CoreInit>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2202      	movs	r2, #2
 800556e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e0d0      	b.n	8005718 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2100      	movs	r1, #0
 800557c:	4618      	mov	r0, r3
 800557e:	f003 fbc7 	bl	8008d10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005582:	2300      	movs	r3, #0
 8005584:	73fb      	strb	r3, [r7, #15]
 8005586:	e04a      	b.n	800561e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005588:	7bfa      	ldrb	r2, [r7, #15]
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	4613      	mov	r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	1a9b      	subs	r3, r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	440b      	add	r3, r1
 8005596:	333d      	adds	r3, #61	; 0x3d
 8005598:	2201      	movs	r2, #1
 800559a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800559c:	7bfa      	ldrb	r2, [r7, #15]
 800559e:	6879      	ldr	r1, [r7, #4]
 80055a0:	4613      	mov	r3, r2
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	1a9b      	subs	r3, r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	440b      	add	r3, r1
 80055aa:	333c      	adds	r3, #60	; 0x3c
 80055ac:	7bfa      	ldrb	r2, [r7, #15]
 80055ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80055b0:	7bfa      	ldrb	r2, [r7, #15]
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
 80055b4:	b298      	uxth	r0, r3
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	1a9b      	subs	r3, r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	3342      	adds	r3, #66	; 0x42
 80055c4:	4602      	mov	r2, r0
 80055c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80055c8:	7bfa      	ldrb	r2, [r7, #15]
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	4613      	mov	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	1a9b      	subs	r3, r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	333f      	adds	r3, #63	; 0x3f
 80055d8:	2200      	movs	r2, #0
 80055da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80055dc:	7bfa      	ldrb	r2, [r7, #15]
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	4613      	mov	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	3344      	adds	r3, #68	; 0x44
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80055f0:	7bfa      	ldrb	r2, [r7, #15]
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	4613      	mov	r3, r2
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	1a9b      	subs	r3, r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	440b      	add	r3, r1
 80055fe:	3348      	adds	r3, #72	; 0x48
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005604:	7bfa      	ldrb	r2, [r7, #15]
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	4613      	mov	r3, r2
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	1a9b      	subs	r3, r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	440b      	add	r3, r1
 8005612:	3350      	adds	r3, #80	; 0x50
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	3301      	adds	r3, #1
 800561c:	73fb      	strb	r3, [r7, #15]
 800561e:	7bfa      	ldrb	r2, [r7, #15]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	429a      	cmp	r2, r3
 8005626:	d3af      	bcc.n	8005588 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005628:	2300      	movs	r3, #0
 800562a:	73fb      	strb	r3, [r7, #15]
 800562c:	e044      	b.n	80056b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800562e:	7bfa      	ldrb	r2, [r7, #15]
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	1a9b      	subs	r3, r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005644:	7bfa      	ldrb	r2, [r7, #15]
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	4613      	mov	r3, r2
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	1a9b      	subs	r3, r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	440b      	add	r3, r1
 8005652:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005656:	7bfa      	ldrb	r2, [r7, #15]
 8005658:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800565a:	7bfa      	ldrb	r2, [r7, #15]
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	1a9b      	subs	r3, r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800566c:	2200      	movs	r2, #0
 800566e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005670:	7bfa      	ldrb	r2, [r7, #15]
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	4613      	mov	r3, r2
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	1a9b      	subs	r3, r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005686:	7bfa      	ldrb	r2, [r7, #15]
 8005688:	6879      	ldr	r1, [r7, #4]
 800568a:	4613      	mov	r3, r2
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	1a9b      	subs	r3, r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	440b      	add	r3, r1
 8005694:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800569c:	7bfa      	ldrb	r2, [r7, #15]
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	4613      	mov	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	1a9b      	subs	r3, r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
 80056b4:	3301      	adds	r3, #1
 80056b6:	73fb      	strb	r3, [r7, #15]
 80056b8:	7bfa      	ldrb	r2, [r7, #15]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d3b5      	bcc.n	800562e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	603b      	str	r3, [r7, #0]
 80056c8:	687e      	ldr	r6, [r7, #4]
 80056ca:	466d      	mov	r5, sp
 80056cc:	f106 0410 	add.w	r4, r6, #16
 80056d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80056dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80056e0:	1d33      	adds	r3, r6, #4
 80056e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056e4:	6838      	ldr	r0, [r7, #0]
 80056e6:	f003 fb3d 	bl	8008d64 <USB_DevInit>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d005      	beq.n	80056fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e00d      	b.n	8005718 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4618      	mov	r0, r3
 8005712:	f004 fb7c 	bl	8009e0e <USB_DevDisconnect>

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005720 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_PCD_Start+0x1c>
 8005738:	2302      	movs	r3, #2
 800573a:	e020      	b.n	800577e <HAL_PCD_Start+0x5e>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005748:	2b01      	cmp	r3, #1
 800574a:	d109      	bne.n	8005760 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005750:	2b01      	cmp	r3, #1
 8005752:	d005      	beq.n	8005760 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005758:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4618      	mov	r0, r3
 8005766:	f004 fb3a 	bl	8009dde <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f003 faac 	bl	8008ccc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005786:	b590      	push	{r4, r7, lr}
 8005788:	b08d      	sub	sp, #52	; 0x34
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4618      	mov	r0, r3
 800579e:	f004 fbe1 	bl	8009f64 <USB_GetMode>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f040 839d 	bne.w	8005ee4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f004 fb45 	bl	8009e3e <USB_ReadInterrupts>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 8393 	beq.w	8005ee2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f004 fb3c 	bl	8009e3e <USB_ReadInterrupts>
 80057c6:	4603      	mov	r3, r0
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d107      	bne.n	80057e0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695a      	ldr	r2, [r3, #20]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f002 0202 	and.w	r2, r2, #2
 80057de:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f004 fb2a 	bl	8009e3e <USB_ReadInterrupts>
 80057ea:	4603      	mov	r3, r0
 80057ec:	f003 0310 	and.w	r3, r3, #16
 80057f0:	2b10      	cmp	r3, #16
 80057f2:	d161      	bne.n	80058b8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0210 	bic.w	r2, r2, #16
 8005802:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	f003 020f 	and.w	r2, r3, #15
 8005810:	4613      	mov	r3, r2
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	1a9b      	subs	r3, r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	4413      	add	r3, r2
 8005820:	3304      	adds	r3, #4
 8005822:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	0c5b      	lsrs	r3, r3, #17
 8005828:	f003 030f 	and.w	r3, r3, #15
 800582c:	2b02      	cmp	r3, #2
 800582e:	d124      	bne.n	800587a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005836:	4013      	ands	r3, r2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d035      	beq.n	80058a8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	091b      	lsrs	r3, r3, #4
 8005844:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005846:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800584a:	b29b      	uxth	r3, r3
 800584c:	461a      	mov	r2, r3
 800584e:	6a38      	ldr	r0, [r7, #32]
 8005850:	f004 f9a2 	bl	8009b98 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	091b      	lsrs	r3, r3, #4
 800585c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005860:	441a      	add	r2, r3
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	091b      	lsrs	r3, r3, #4
 800586e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005872:	441a      	add	r2, r3
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	619a      	str	r2, [r3, #24]
 8005878:	e016      	b.n	80058a8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	0c5b      	lsrs	r3, r3, #17
 800587e:	f003 030f 	and.w	r3, r3, #15
 8005882:	2b06      	cmp	r3, #6
 8005884:	d110      	bne.n	80058a8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800588c:	2208      	movs	r2, #8
 800588e:	4619      	mov	r1, r3
 8005890:	6a38      	ldr	r0, [r7, #32]
 8005892:	f004 f981 	bl	8009b98 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	699a      	ldr	r2, [r3, #24]
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	091b      	lsrs	r3, r3, #4
 800589e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058a2:	441a      	add	r2, r3
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0210 	orr.w	r2, r2, #16
 80058b6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4618      	mov	r0, r3
 80058be:	f004 fabe 	bl	8009e3e <USB_ReadInterrupts>
 80058c2:	4603      	mov	r3, r0
 80058c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80058cc:	d16e      	bne.n	80059ac <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f004 fac4 	bl	8009e64 <USB_ReadDevAllOutEpInterrupt>
 80058dc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80058de:	e062      	b.n	80059a6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d057      	beq.n	800599a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	4611      	mov	r1, r2
 80058f4:	4618      	mov	r0, r3
 80058f6:	f004 fae9 	bl	8009ecc <USB_ReadDevOutEPInterrupt>
 80058fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00c      	beq.n	8005920 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005912:	461a      	mov	r2, r3
 8005914:	2301      	movs	r3, #1
 8005916:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fdb0 	bl	8006480 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00c      	beq.n	8005944 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005936:	461a      	mov	r2, r3
 8005938:	2308      	movs	r3, #8
 800593a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800593c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 feaa 	bl	8006698 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f003 0310 	and.w	r3, r3, #16
 800594a:	2b00      	cmp	r3, #0
 800594c:	d008      	beq.n	8005960 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595a:	461a      	mov	r2, r3
 800595c:	2310      	movs	r3, #16
 800595e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d008      	beq.n	800597c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005976:	461a      	mov	r2, r3
 8005978:	2320      	movs	r3, #32
 800597a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d009      	beq.n	800599a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005992:	461a      	mov	r2, r3
 8005994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005998:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	3301      	adds	r3, #1
 800599e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	085b      	lsrs	r3, r3, #1
 80059a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80059a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d199      	bne.n	80058e0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f004 fa44 	bl	8009e3e <USB_ReadInterrupts>
 80059b6:	4603      	mov	r3, r0
 80059b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059c0:	f040 80c0 	bne.w	8005b44 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f004 fa65 	bl	8009e98 <USB_ReadDevAllInEpInterrupt>
 80059ce:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80059d4:	e0b2      	b.n	8005b3c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 80a7 	beq.w	8005b30 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	4611      	mov	r1, r2
 80059ec:	4618      	mov	r0, r3
 80059ee:	f004 fa8b 	bl	8009f08 <USB_ReadDevInEPInterrupt>
 80059f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d057      	beq.n	8005aae <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	f003 030f 	and.w	r3, r3, #15
 8005a04:	2201      	movs	r2, #1
 8005a06:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	43db      	mvns	r3, r3
 8005a18:	69f9      	ldr	r1, [r7, #28]
 8005a1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a1e:	4013      	ands	r3, r2
 8005a20:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	015a      	lsls	r2, r3, #5
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2e:	461a      	mov	r2, r3
 8005a30:	2301      	movs	r3, #1
 8005a32:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d132      	bne.n	8005aa2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005a3c:	6879      	ldr	r1, [r7, #4]
 8005a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a40:	4613      	mov	r3, r2
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	1a9b      	subs	r3, r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	3348      	adds	r3, #72	; 0x48
 8005a4c:	6819      	ldr	r1, [r3, #0]
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a52:	4613      	mov	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	1a9b      	subs	r3, r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4403      	add	r3, r0
 8005a5c:	3344      	adds	r3, #68	; 0x44
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4419      	add	r1, r3
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a66:	4613      	mov	r3, r2
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	1a9b      	subs	r3, r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4403      	add	r3, r0
 8005a70:	3348      	adds	r3, #72	; 0x48
 8005a72:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d113      	bne.n	8005aa2 <HAL_PCD_IRQHandler+0x31c>
 8005a7a:	6879      	ldr	r1, [r7, #4]
 8005a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a7e:	4613      	mov	r3, r2
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	1a9b      	subs	r3, r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	440b      	add	r3, r1
 8005a88:	3350      	adds	r3, #80	; 0x50
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d108      	bne.n	8005aa2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6818      	ldr	r0, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	f004 fa93 	bl	8009fc8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f006 faec 	bl	800c086 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f003 0308 	and.w	r3, r3, #8
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d008      	beq.n	8005aca <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	2308      	movs	r3, #8
 8005ac8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f003 0310 	and.w	r3, r3, #16
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d008      	beq.n	8005ae6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	2310      	movs	r3, #16
 8005ae4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d008      	beq.n	8005b02 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afc:	461a      	mov	r2, r3
 8005afe:	2340      	movs	r3, #64	; 0x40
 8005b00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d008      	beq.n	8005b1e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b18:	461a      	mov	r2, r3
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005b28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fc1b 	bl	8006366 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	3301      	adds	r3, #1
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b38:	085b      	lsrs	r3, r3, #1
 8005b3a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f47f af49 	bne.w	80059d6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f004 f978 	bl	8009e3e <USB_ReadInterrupts>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b58:	d122      	bne.n	8005ba0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b68:	f023 0301 	bic.w	r3, r3, #1
 8005b6c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d108      	bne.n	8005b8a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005b80:	2100      	movs	r1, #0
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fe26 	bl	80067d4 <HAL_PCDEx_LPM_Callback>
 8005b88:	e002      	b.n	8005b90 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f006 faf2 	bl	800c174 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695a      	ldr	r2, [r3, #20]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005b9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f004 f94a 	bl	8009e3e <USB_ReadInterrupts>
 8005baa:	4603      	mov	r3, r0
 8005bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb4:	d112      	bne.n	8005bdc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d102      	bne.n	8005bcc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f006 faae 	bl	800c128 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695a      	ldr	r2, [r3, #20]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005bda:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f004 f92c 	bl	8009e3e <USB_ReadInterrupts>
 8005be6:	4603      	mov	r3, r0
 8005be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf0:	f040 80c7 	bne.w	8005d82 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c02:	f023 0301 	bic.w	r3, r3, #1
 8005c06:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2110      	movs	r1, #16
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f003 fa0c 	bl	800902c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c14:	2300      	movs	r3, #0
 8005c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c18:	e056      	b.n	8005cc8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c26:	461a      	mov	r2, r3
 8005c28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c2c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c3e:	0151      	lsls	r1, r2, #5
 8005c40:	69fa      	ldr	r2, [r7, #28]
 8005c42:	440a      	add	r2, r1
 8005c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c4c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c5e:	0151      	lsls	r1, r2, #5
 8005c60:	69fa      	ldr	r2, [r7, #28]
 8005c62:	440a      	add	r2, r1
 8005c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c80:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c92:	0151      	lsls	r1, r2, #5
 8005c94:	69fa      	ldr	r2, [r7, #28]
 8005c96:	440a      	add	r2, r1
 8005c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ca0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cc0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d3a3      	bcc.n	8005c1a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	69fa      	ldr	r2, [r7, #28]
 8005cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ce0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005ce4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d016      	beq.n	8005d1c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cfe:	f043 030b 	orr.w	r3, r3, #11
 8005d02:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0e:	69fa      	ldr	r2, [r7, #28]
 8005d10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d14:	f043 030b 	orr.w	r3, r3, #11
 8005d18:	6453      	str	r3, [r2, #68]	; 0x44
 8005d1a:	e015      	b.n	8005d48 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	69fa      	ldr	r2, [r7, #28]
 8005d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d2e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005d32:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	69fa      	ldr	r2, [r7, #28]
 8005d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d42:	f043 030b 	orr.w	r3, r3, #11
 8005d46:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	69fa      	ldr	r2, [r7, #28]
 8005d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d5a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6818      	ldr	r0, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	f004 f92b 	bl	8009fc8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695a      	ldr	r2, [r3, #20]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005d80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f004 f859 	bl	8009e3e <USB_ReadInterrupts>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d96:	d124      	bne.n	8005de2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f004 f8ef 	bl	8009f80 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f003 f9a1 	bl	80090ee <USB_GetDevSpeed>
 8005dac:	4603      	mov	r3, r0
 8005dae:	461a      	mov	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681c      	ldr	r4, [r3, #0]
 8005db8:	f001 f946 	bl	8007048 <HAL_RCC_GetHCLKFreq>
 8005dbc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f002 fede 	bl	8008b88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f006 f982 	bl	800c0d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	695a      	ldr	r2, [r3, #20]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005de0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f004 f829 	bl	8009e3e <USB_ReadInterrupts>
 8005dec:	4603      	mov	r3, r0
 8005dee:	f003 0308 	and.w	r3, r3, #8
 8005df2:	2b08      	cmp	r3, #8
 8005df4:	d10a      	bne.n	8005e0c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f006 f95f 	bl	800c0ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695a      	ldr	r2, [r3, #20]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f002 0208 	and.w	r2, r2, #8
 8005e0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f004 f814 	bl	8009e3e <USB_ReadInterrupts>
 8005e16:	4603      	mov	r3, r0
 8005e18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e20:	d10f      	bne.n	8005e42 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f006 f9c1 	bl	800c1b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695a      	ldr	r2, [r3, #20]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005e40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f003 fff9 	bl	8009e3e <USB_ReadInterrupts>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e56:	d10f      	bne.n	8005e78 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	4619      	mov	r1, r3
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f006 f994 	bl	800c190 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	695a      	ldr	r2, [r3, #20]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005e76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f003 ffde 	bl	8009e3e <USB_ReadInterrupts>
 8005e82:	4603      	mov	r3, r0
 8005e84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e8c:	d10a      	bne.n	8005ea4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f006 f9a2 	bl	800c1d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695a      	ldr	r2, [r3, #20]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005ea2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f003 ffc8 	bl	8009e3e <USB_ReadInterrupts>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d115      	bne.n	8005ee4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f006 f992 	bl	800c1f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6859      	ldr	r1, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	605a      	str	r2, [r3, #4]
 8005ee0:	e000      	b.n	8005ee4 <HAL_PCD_IRQHandler+0x75e>
      return;
 8005ee2:	bf00      	nop
    }
  }
}
 8005ee4:	3734      	adds	r7, #52	; 0x34
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd90      	pop	{r4, r7, pc}

08005eea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b082      	sub	sp, #8
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d101      	bne.n	8005f04 <HAL_PCD_SetAddress+0x1a>
 8005f00:	2302      	movs	r3, #2
 8005f02:	e013      	b.n	8005f2c <HAL_PCD_SetAddress+0x42>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	78fa      	ldrb	r2, [r7, #3]
 8005f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	78fa      	ldrb	r2, [r7, #3]
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f003 ff38 	bl	8009d92 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	4608      	mov	r0, r1
 8005f3e:	4611      	mov	r1, r2
 8005f40:	461a      	mov	r2, r3
 8005f42:	4603      	mov	r3, r0
 8005f44:	70fb      	strb	r3, [r7, #3]
 8005f46:	460b      	mov	r3, r1
 8005f48:	803b      	strh	r3, [r7, #0]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	da0f      	bge.n	8005f7a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f5a:	78fb      	ldrb	r3, [r7, #3]
 8005f5c:	f003 020f 	and.w	r2, r3, #15
 8005f60:	4613      	mov	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	1a9b      	subs	r3, r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	3338      	adds	r3, #56	; 0x38
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	3304      	adds	r3, #4
 8005f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2201      	movs	r2, #1
 8005f76:	705a      	strb	r2, [r3, #1]
 8005f78:	e00f      	b.n	8005f9a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f7a:	78fb      	ldrb	r3, [r7, #3]
 8005f7c:	f003 020f 	and.w	r2, r3, #15
 8005f80:	4613      	mov	r3, r2
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	1a9b      	subs	r3, r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	4413      	add	r3, r2
 8005f90:	3304      	adds	r3, #4
 8005f92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f9a:	78fb      	ldrb	r3, [r7, #3]
 8005f9c:	f003 030f 	and.w	r3, r3, #15
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005fa6:	883a      	ldrh	r2, [r7, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	78ba      	ldrb	r2, [r7, #2]
 8005fb0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	785b      	ldrb	r3, [r3, #1]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d004      	beq.n	8005fc4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005fc4:	78bb      	ldrb	r3, [r7, #2]
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d102      	bne.n	8005fd0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d101      	bne.n	8005fde <HAL_PCD_EP_Open+0xaa>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	e00e      	b.n	8005ffc <HAL_PCD_EP_Open+0xc8>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68f9      	ldr	r1, [r7, #12]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f003 f8a3 	bl	8009138 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005ffa:	7afb      	ldrb	r3, [r7, #11]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006014:	2b00      	cmp	r3, #0
 8006016:	da0f      	bge.n	8006038 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006018:	78fb      	ldrb	r3, [r7, #3]
 800601a:	f003 020f 	and.w	r2, r3, #15
 800601e:	4613      	mov	r3, r2
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	1a9b      	subs	r3, r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	3338      	adds	r3, #56	; 0x38
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	4413      	add	r3, r2
 800602c:	3304      	adds	r3, #4
 800602e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	705a      	strb	r2, [r3, #1]
 8006036:	e00f      	b.n	8006058 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	f003 020f 	and.w	r2, r3, #15
 800603e:	4613      	mov	r3, r2
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	1a9b      	subs	r3, r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	4413      	add	r3, r2
 800604e:	3304      	adds	r3, #4
 8006050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	f003 030f 	and.w	r3, r3, #15
 800605e:	b2da      	uxtb	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800606a:	2b01      	cmp	r3, #1
 800606c:	d101      	bne.n	8006072 <HAL_PCD_EP_Close+0x6e>
 800606e:	2302      	movs	r3, #2
 8006070:	e00e      	b.n	8006090 <HAL_PCD_EP_Close+0x8c>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68f9      	ldr	r1, [r7, #12]
 8006080:	4618      	mov	r0, r3
 8006082:	f003 f8e1 	bl	8009248 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	607a      	str	r2, [r7, #4]
 80060a2:	603b      	str	r3, [r7, #0]
 80060a4:	460b      	mov	r3, r1
 80060a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060a8:	7afb      	ldrb	r3, [r7, #11]
 80060aa:	f003 020f 	and.w	r2, r3, #15
 80060ae:	4613      	mov	r3, r2
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	1a9b      	subs	r3, r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	4413      	add	r3, r2
 80060be:	3304      	adds	r3, #4
 80060c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2200      	movs	r2, #0
 80060d2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2200      	movs	r2, #0
 80060d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060da:	7afb      	ldrb	r3, [r7, #11]
 80060dc:	f003 030f 	and.w	r3, r3, #15
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d102      	bne.n	80060f4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060f4:	7afb      	ldrb	r3, [r7, #11]
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d109      	bne.n	8006112 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6818      	ldr	r0, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	461a      	mov	r2, r3
 800610a:	6979      	ldr	r1, [r7, #20]
 800610c:	f003 fbbc 	bl	8009888 <USB_EP0StartXfer>
 8006110:	e008      	b.n	8006124 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6818      	ldr	r0, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	b2db      	uxtb	r3, r3
 800611c:	461a      	mov	r2, r3
 800611e:	6979      	ldr	r1, [r7, #20]
 8006120:	f003 f96e 	bl	8009400 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	460b      	mov	r3, r1
 8006138:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800613a:	78fb      	ldrb	r3, [r7, #3]
 800613c:	f003 020f 	and.w	r2, r3, #15
 8006140:	6879      	ldr	r1, [r7, #4]
 8006142:	4613      	mov	r3, r2
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	1a9b      	subs	r3, r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	440b      	add	r3, r1
 800614c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006150:	681b      	ldr	r3, [r3, #0]
}
 8006152:	4618      	mov	r0, r3
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b086      	sub	sp, #24
 8006162:	af00      	add	r7, sp, #0
 8006164:	60f8      	str	r0, [r7, #12]
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	603b      	str	r3, [r7, #0]
 800616a:	460b      	mov	r3, r1
 800616c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800616e:	7afb      	ldrb	r3, [r7, #11]
 8006170:	f003 020f 	and.w	r2, r3, #15
 8006174:	4613      	mov	r3, r2
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	1a9b      	subs	r3, r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	3338      	adds	r3, #56	; 0x38
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	4413      	add	r3, r2
 8006182:	3304      	adds	r3, #4
 8006184:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2200      	movs	r2, #0
 8006196:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	2201      	movs	r2, #1
 800619c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800619e:	7afb      	ldrb	r3, [r7, #11]
 80061a0:	f003 030f 	and.w	r3, r3, #15
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d102      	bne.n	80061b8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80061b8:	7afb      	ldrb	r3, [r7, #11]
 80061ba:	f003 030f 	and.w	r3, r3, #15
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d109      	bne.n	80061d6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	461a      	mov	r2, r3
 80061ce:	6979      	ldr	r1, [r7, #20]
 80061d0:	f003 fb5a 	bl	8009888 <USB_EP0StartXfer>
 80061d4:	e008      	b.n	80061e8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	6979      	ldr	r1, [r7, #20]
 80061e4:	f003 f90c 	bl	8009400 <USB_EPStartXfer>
  }

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b084      	sub	sp, #16
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	460b      	mov	r3, r1
 80061fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80061fe:	78fb      	ldrb	r3, [r7, #3]
 8006200:	f003 020f 	and.w	r2, r3, #15
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	429a      	cmp	r2, r3
 800620a:	d901      	bls.n	8006210 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e050      	b.n	80062b2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006210:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006214:	2b00      	cmp	r3, #0
 8006216:	da0f      	bge.n	8006238 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006218:	78fb      	ldrb	r3, [r7, #3]
 800621a:	f003 020f 	and.w	r2, r3, #15
 800621e:	4613      	mov	r3, r2
 8006220:	00db      	lsls	r3, r3, #3
 8006222:	1a9b      	subs	r3, r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	3338      	adds	r3, #56	; 0x38
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	4413      	add	r3, r2
 800622c:	3304      	adds	r3, #4
 800622e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2201      	movs	r2, #1
 8006234:	705a      	strb	r2, [r3, #1]
 8006236:	e00d      	b.n	8006254 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006238:	78fa      	ldrb	r2, [r7, #3]
 800623a:	4613      	mov	r3, r2
 800623c:	00db      	lsls	r3, r3, #3
 800623e:	1a9b      	subs	r3, r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	4413      	add	r3, r2
 800624a:	3304      	adds	r3, #4
 800624c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2201      	movs	r2, #1
 8006258:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800625a:	78fb      	ldrb	r3, [r7, #3]
 800625c:	f003 030f 	and.w	r3, r3, #15
 8006260:	b2da      	uxtb	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800626c:	2b01      	cmp	r3, #1
 800626e:	d101      	bne.n	8006274 <HAL_PCD_EP_SetStall+0x82>
 8006270:	2302      	movs	r3, #2
 8006272:	e01e      	b.n	80062b2 <HAL_PCD_EP_SetStall+0xc0>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68f9      	ldr	r1, [r7, #12]
 8006282:	4618      	mov	r0, r3
 8006284:	f003 fcb1 	bl	8009bea <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006288:	78fb      	ldrb	r3, [r7, #3]
 800628a:	f003 030f 	and.w	r3, r3, #15
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	b2d9      	uxtb	r1, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80062a2:	461a      	mov	r2, r3
 80062a4:	f003 fe90 	bl	8009fc8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b084      	sub	sp, #16
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	460b      	mov	r3, r1
 80062c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80062c6:	78fb      	ldrb	r3, [r7, #3]
 80062c8:	f003 020f 	and.w	r2, r3, #15
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d901      	bls.n	80062d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e042      	b.n	800635e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80062d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	da0f      	bge.n	8006300 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062e0:	78fb      	ldrb	r3, [r7, #3]
 80062e2:	f003 020f 	and.w	r2, r3, #15
 80062e6:	4613      	mov	r3, r2
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	1a9b      	subs	r3, r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	3338      	adds	r3, #56	; 0x38
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	4413      	add	r3, r2
 80062f4:	3304      	adds	r3, #4
 80062f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2201      	movs	r2, #1
 80062fc:	705a      	strb	r2, [r3, #1]
 80062fe:	e00f      	b.n	8006320 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006300:	78fb      	ldrb	r3, [r7, #3]
 8006302:	f003 020f 	and.w	r2, r3, #15
 8006306:	4613      	mov	r3, r2
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	1a9b      	subs	r3, r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	4413      	add	r3, r2
 8006316:	3304      	adds	r3, #4
 8006318:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006326:	78fb      	ldrb	r3, [r7, #3]
 8006328:	f003 030f 	and.w	r3, r3, #15
 800632c:	b2da      	uxtb	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_PCD_EP_ClrStall+0x86>
 800633c:	2302      	movs	r3, #2
 800633e:	e00e      	b.n	800635e <HAL_PCD_EP_ClrStall+0xa4>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68f9      	ldr	r1, [r7, #12]
 800634e:	4618      	mov	r0, r3
 8006350:	f003 fcb9 	bl	8009cc6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b08a      	sub	sp, #40	; 0x28
 800636a:	af02      	add	r7, sp, #8
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	4613      	mov	r3, r2
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	1a9b      	subs	r3, r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	3338      	adds	r3, #56	; 0x38
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	4413      	add	r3, r2
 800638a:	3304      	adds	r3, #4
 800638c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	699a      	ldr	r2, [r3, #24]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	429a      	cmp	r2, r3
 8006398:	d901      	bls.n	800639e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e06c      	b.n	8006478 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	695a      	ldr	r2, [r3, #20]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	69fa      	ldr	r2, [r7, #28]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d902      	bls.n	80063ba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	3303      	adds	r3, #3
 80063be:	089b      	lsrs	r3, r3, #2
 80063c0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063c2:	e02b      	b.n	800641c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	695a      	ldr	r2, [r3, #20]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	69fa      	ldr	r2, [r7, #28]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d902      	bls.n	80063e0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	3303      	adds	r3, #3
 80063e4:	089b      	lsrs	r3, r3, #2
 80063e6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	68d9      	ldr	r1, [r3, #12]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	4603      	mov	r3, r0
 80063fe:	6978      	ldr	r0, [r7, #20]
 8006400:	f003 fb95 	bl	8009b2e <USB_WritePacket>

    ep->xfer_buff  += len;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	68da      	ldr	r2, [r3, #12]
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	441a      	add	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	699a      	ldr	r2, [r3, #24]
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	441a      	add	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	b29b      	uxth	r3, r3
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	429a      	cmp	r2, r3
 8006430:	d809      	bhi.n	8006446 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	699a      	ldr	r2, [r3, #24]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800643a:	429a      	cmp	r2, r3
 800643c:	d203      	bcs.n	8006446 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1be      	bne.n	80063c4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	695a      	ldr	r2, [r3, #20]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	429a      	cmp	r2, r3
 8006450:	d811      	bhi.n	8006476 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	f003 030f 	and.w	r3, r3, #15
 8006458:	2201      	movs	r2, #1
 800645a:	fa02 f303 	lsl.w	r3, r2, r3
 800645e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	43db      	mvns	r3, r3
 800646c:	6939      	ldr	r1, [r7, #16]
 800646e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006472:	4013      	ands	r3, r2
 8006474:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3720      	adds	r7, #32
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	333c      	adds	r3, #60	; 0x3c
 8006498:	3304      	adds	r3, #4
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	f040 80a0 	bne.w	80065f8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f003 0308 	and.w	r3, r3, #8
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d015      	beq.n	80064ee <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4a72      	ldr	r2, [pc, #456]	; (8006690 <PCD_EP_OutXfrComplete_int+0x210>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	f240 80dd 	bls.w	8006686 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 80d7 	beq.w	8006686 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e4:	461a      	mov	r2, r3
 80064e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ea:	6093      	str	r3, [r2, #8]
 80064ec:	e0cb      	b.n	8006686 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	f003 0320 	and.w	r3, r3, #32
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d009      	beq.n	800650c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006504:	461a      	mov	r2, r3
 8006506:	2320      	movs	r3, #32
 8006508:	6093      	str	r3, [r2, #8]
 800650a:	e0bc      	b.n	8006686 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006512:	2b00      	cmp	r3, #0
 8006514:	f040 80b7 	bne.w	8006686 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4a5d      	ldr	r2, [pc, #372]	; (8006690 <PCD_EP_OutXfrComplete_int+0x210>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d90f      	bls.n	8006540 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	4413      	add	r3, r2
 8006532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006536:	461a      	mov	r2, r3
 8006538:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800653c:	6093      	str	r3, [r2, #8]
 800653e:	e0a2      	b.n	8006686 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	4613      	mov	r3, r2
 8006546:	00db      	lsls	r3, r3, #3
 8006548:	1a9b      	subs	r3, r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	440b      	add	r3, r1
 800654e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006552:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	0159      	lsls	r1, r3, #5
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	440b      	add	r3, r1
 800655c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006566:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	4613      	mov	r3, r2
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	1a9b      	subs	r3, r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4403      	add	r3, r0
 8006576:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800657a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800657c:	6879      	ldr	r1, [r7, #4]
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	4613      	mov	r3, r2
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	1a9b      	subs	r3, r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	440b      	add	r3, r1
 800658a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800658e:	6819      	ldr	r1, [r3, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	4613      	mov	r3, r2
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	1a9b      	subs	r3, r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4403      	add	r3, r0
 800659e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4419      	add	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	4613      	mov	r3, r2
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	1a9b      	subs	r3, r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4403      	add	r3, r0
 80065b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80065b8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d114      	bne.n	80065ea <PCD_EP_OutXfrComplete_int+0x16a>
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	4613      	mov	r3, r2
 80065c6:	00db      	lsls	r3, r3, #3
 80065c8:	1a9b      	subs	r3, r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	440b      	add	r3, r1
 80065ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d108      	bne.n	80065ea <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6818      	ldr	r0, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80065e2:	461a      	mov	r2, r3
 80065e4:	2101      	movs	r1, #1
 80065e6:	f003 fcef 	bl	8009fc8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	4619      	mov	r1, r3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f005 fd2d 	bl	800c050 <HAL_PCD_DataOutStageCallback>
 80065f6:	e046      	b.n	8006686 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4a26      	ldr	r2, [pc, #152]	; (8006694 <PCD_EP_OutXfrComplete_int+0x214>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d124      	bne.n	800664a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	4413      	add	r3, r2
 8006612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006616:	461a      	mov	r2, r3
 8006618:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800661c:	6093      	str	r3, [r2, #8]
 800661e:	e032      	b.n	8006686 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f003 0320 	and.w	r3, r3, #32
 8006626:	2b00      	cmp	r3, #0
 8006628:	d008      	beq.n	800663c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4413      	add	r3, r2
 8006632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006636:	461a      	mov	r2, r3
 8006638:	2320      	movs	r3, #32
 800663a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	b2db      	uxtb	r3, r3
 8006640:	4619      	mov	r1, r3
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f005 fd04 	bl	800c050 <HAL_PCD_DataOutStageCallback>
 8006648:	e01d      	b.n	8006686 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d114      	bne.n	800667a <PCD_EP_OutXfrComplete_int+0x1fa>
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	4613      	mov	r3, r2
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	1a9b      	subs	r3, r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	440b      	add	r3, r1
 800665e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d108      	bne.n	800667a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6818      	ldr	r0, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006672:	461a      	mov	r2, r3
 8006674:	2100      	movs	r1, #0
 8006676:	f003 fca7 	bl	8009fc8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	b2db      	uxtb	r3, r3
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f005 fce5 	bl	800c050 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	4f54300a 	.word	0x4f54300a
 8006694:	4f54310a 	.word	0x4f54310a

08006698 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	333c      	adds	r3, #60	; 0x3c
 80066b0:	3304      	adds	r3, #4
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4a15      	ldr	r2, [pc, #84]	; (8006720 <PCD_EP_OutSetupPacket_int+0x88>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d90e      	bls.n	80066ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d009      	beq.n	80066ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e4:	461a      	mov	r2, r3
 80066e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f005 fc9d 	bl	800c02c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4a0a      	ldr	r2, [pc, #40]	; (8006720 <PCD_EP_OutSetupPacket_int+0x88>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d90c      	bls.n	8006714 <PCD_EP_OutSetupPacket_int+0x7c>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d108      	bne.n	8006714 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6818      	ldr	r0, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800670c:	461a      	mov	r2, r3
 800670e:	2101      	movs	r1, #1
 8006710:	f003 fc5a 	bl	8009fc8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	4f54300a 	.word	0x4f54300a

08006724 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	70fb      	strb	r3, [r7, #3]
 8006730:	4613      	mov	r3, r2
 8006732:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800673c:	78fb      	ldrb	r3, [r7, #3]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d107      	bne.n	8006752 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006742:	883b      	ldrh	r3, [r7, #0]
 8006744:	0419      	lsls	r1, r3, #16
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	430a      	orrs	r2, r1
 800674e:	629a      	str	r2, [r3, #40]	; 0x28
 8006750:	e028      	b.n	80067a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006758:	0c1b      	lsrs	r3, r3, #16
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	4413      	add	r3, r2
 800675e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006760:	2300      	movs	r3, #0
 8006762:	73fb      	strb	r3, [r7, #15]
 8006764:	e00d      	b.n	8006782 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	7bfb      	ldrb	r3, [r7, #15]
 800676c:	3340      	adds	r3, #64	; 0x40
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	0c1b      	lsrs	r3, r3, #16
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	4413      	add	r3, r2
 800677a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800677c:	7bfb      	ldrb	r3, [r7, #15]
 800677e:	3301      	adds	r3, #1
 8006780:	73fb      	strb	r3, [r7, #15]
 8006782:	7bfa      	ldrb	r2, [r7, #15]
 8006784:	78fb      	ldrb	r3, [r7, #3]
 8006786:	3b01      	subs	r3, #1
 8006788:	429a      	cmp	r2, r3
 800678a:	d3ec      	bcc.n	8006766 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800678c:	883b      	ldrh	r3, [r7, #0]
 800678e:	0418      	lsls	r0, r3, #16
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6819      	ldr	r1, [r3, #0]
 8006794:	78fb      	ldrb	r3, [r7, #3]
 8006796:	3b01      	subs	r3, #1
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	4302      	orrs	r2, r0
 800679c:	3340      	adds	r3, #64	; 0x40
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	440b      	add	r3, r1
 80067a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	460b      	mov	r3, r1
 80067bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	887a      	ldrh	r2, [r7, #2]
 80067c4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e25b      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d075      	beq.n	80068f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800680a:	4ba3      	ldr	r3, [pc, #652]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f003 030c 	and.w	r3, r3, #12
 8006812:	2b04      	cmp	r3, #4
 8006814:	d00c      	beq.n	8006830 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006816:	4ba0      	ldr	r3, [pc, #640]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800681e:	2b08      	cmp	r3, #8
 8006820:	d112      	bne.n	8006848 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006822:	4b9d      	ldr	r3, [pc, #628]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800682a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800682e:	d10b      	bne.n	8006848 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006830:	4b99      	ldr	r3, [pc, #612]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d05b      	beq.n	80068f4 <HAL_RCC_OscConfig+0x108>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d157      	bne.n	80068f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e236      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006850:	d106      	bne.n	8006860 <HAL_RCC_OscConfig+0x74>
 8006852:	4b91      	ldr	r3, [pc, #580]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a90      	ldr	r2, [pc, #576]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	e01d      	b.n	800689c <HAL_RCC_OscConfig+0xb0>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006868:	d10c      	bne.n	8006884 <HAL_RCC_OscConfig+0x98>
 800686a:	4b8b      	ldr	r3, [pc, #556]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a8a      	ldr	r2, [pc, #552]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	4b88      	ldr	r3, [pc, #544]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a87      	ldr	r2, [pc, #540]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 800687c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	e00b      	b.n	800689c <HAL_RCC_OscConfig+0xb0>
 8006884:	4b84      	ldr	r3, [pc, #528]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a83      	ldr	r2, [pc, #524]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 800688a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	4b81      	ldr	r3, [pc, #516]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a80      	ldr	r2, [pc, #512]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800689a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d013      	beq.n	80068cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a4:	f7fb feb4 	bl	8002610 <HAL_GetTick>
 80068a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068aa:	e008      	b.n	80068be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068ac:	f7fb feb0 	bl	8002610 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b64      	cmp	r3, #100	; 0x64
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e1fb      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068be:	4b76      	ldr	r3, [pc, #472]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0f0      	beq.n	80068ac <HAL_RCC_OscConfig+0xc0>
 80068ca:	e014      	b.n	80068f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068cc:	f7fb fea0 	bl	8002610 <HAL_GetTick>
 80068d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068d2:	e008      	b.n	80068e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068d4:	f7fb fe9c 	bl	8002610 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b64      	cmp	r3, #100	; 0x64
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e1e7      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068e6:	4b6c      	ldr	r3, [pc, #432]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1f0      	bne.n	80068d4 <HAL_RCC_OscConfig+0xe8>
 80068f2:	e000      	b.n	80068f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d063      	beq.n	80069ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006902:	4b65      	ldr	r3, [pc, #404]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 030c 	and.w	r3, r3, #12
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00b      	beq.n	8006926 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800690e:	4b62      	ldr	r3, [pc, #392]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006916:	2b08      	cmp	r3, #8
 8006918:	d11c      	bne.n	8006954 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800691a:	4b5f      	ldr	r3, [pc, #380]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d116      	bne.n	8006954 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006926:	4b5c      	ldr	r3, [pc, #368]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d005      	beq.n	800693e <HAL_RCC_OscConfig+0x152>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d001      	beq.n	800693e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e1bb      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800693e:	4b56      	ldr	r3, [pc, #344]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	00db      	lsls	r3, r3, #3
 800694c:	4952      	ldr	r1, [pc, #328]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 800694e:	4313      	orrs	r3, r2
 8006950:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006952:	e03a      	b.n	80069ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d020      	beq.n	800699e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800695c:	4b4f      	ldr	r3, [pc, #316]	; (8006a9c <HAL_RCC_OscConfig+0x2b0>)
 800695e:	2201      	movs	r2, #1
 8006960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006962:	f7fb fe55 	bl	8002610 <HAL_GetTick>
 8006966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006968:	e008      	b.n	800697c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800696a:	f7fb fe51 	bl	8002610 <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	2b02      	cmp	r3, #2
 8006976:	d901      	bls.n	800697c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e19c      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800697c:	4b46      	ldr	r3, [pc, #280]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b00      	cmp	r3, #0
 8006986:	d0f0      	beq.n	800696a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006988:	4b43      	ldr	r3, [pc, #268]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	4940      	ldr	r1, [pc, #256]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006998:	4313      	orrs	r3, r2
 800699a:	600b      	str	r3, [r1, #0]
 800699c:	e015      	b.n	80069ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800699e:	4b3f      	ldr	r3, [pc, #252]	; (8006a9c <HAL_RCC_OscConfig+0x2b0>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a4:	f7fb fe34 	bl	8002610 <HAL_GetTick>
 80069a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069ac:	f7fb fe30 	bl	8002610 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e17b      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069be:	4b36      	ldr	r3, [pc, #216]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1f0      	bne.n	80069ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d030      	beq.n	8006a38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d016      	beq.n	8006a0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069de:	4b30      	ldr	r3, [pc, #192]	; (8006aa0 <HAL_RCC_OscConfig+0x2b4>)
 80069e0:	2201      	movs	r2, #1
 80069e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e4:	f7fb fe14 	bl	8002610 <HAL_GetTick>
 80069e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069ea:	e008      	b.n	80069fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069ec:	f7fb fe10 	bl	8002610 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e15b      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069fe:	4b26      	ldr	r3, [pc, #152]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0f0      	beq.n	80069ec <HAL_RCC_OscConfig+0x200>
 8006a0a:	e015      	b.n	8006a38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a0c:	4b24      	ldr	r3, [pc, #144]	; (8006aa0 <HAL_RCC_OscConfig+0x2b4>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a12:	f7fb fdfd 	bl	8002610 <HAL_GetTick>
 8006a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a18:	e008      	b.n	8006a2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a1a:	f7fb fdf9 	bl	8002610 <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d901      	bls.n	8006a2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e144      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a2c:	4b1a      	ldr	r3, [pc, #104]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1f0      	bne.n	8006a1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 80a0 	beq.w	8006b86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a46:	2300      	movs	r3, #0
 8006a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a4a:	4b13      	ldr	r3, [pc, #76]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10f      	bne.n	8006a76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a56:	2300      	movs	r3, #0
 8006a58:	60bb      	str	r3, [r7, #8]
 8006a5a:	4b0f      	ldr	r3, [pc, #60]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	4a0e      	ldr	r2, [pc, #56]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a64:	6413      	str	r3, [r2, #64]	; 0x40
 8006a66:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <HAL_RCC_OscConfig+0x2ac>)
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a6e:	60bb      	str	r3, [r7, #8]
 8006a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a72:	2301      	movs	r3, #1
 8006a74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a76:	4b0b      	ldr	r3, [pc, #44]	; (8006aa4 <HAL_RCC_OscConfig+0x2b8>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d121      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a82:	4b08      	ldr	r3, [pc, #32]	; (8006aa4 <HAL_RCC_OscConfig+0x2b8>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a07      	ldr	r2, [pc, #28]	; (8006aa4 <HAL_RCC_OscConfig+0x2b8>)
 8006a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a8e:	f7fb fdbf 	bl	8002610 <HAL_GetTick>
 8006a92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a94:	e011      	b.n	8006aba <HAL_RCC_OscConfig+0x2ce>
 8006a96:	bf00      	nop
 8006a98:	40023800 	.word	0x40023800
 8006a9c:	42470000 	.word	0x42470000
 8006aa0:	42470e80 	.word	0x42470e80
 8006aa4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aa8:	f7fb fdb2 	bl	8002610 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d901      	bls.n	8006aba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e0fd      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aba:	4b81      	ldr	r3, [pc, #516]	; (8006cc0 <HAL_RCC_OscConfig+0x4d4>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d0f0      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d106      	bne.n	8006adc <HAL_RCC_OscConfig+0x2f0>
 8006ace:	4b7d      	ldr	r3, [pc, #500]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad2:	4a7c      	ldr	r2, [pc, #496]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006ad4:	f043 0301 	orr.w	r3, r3, #1
 8006ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8006ada:	e01c      	b.n	8006b16 <HAL_RCC_OscConfig+0x32a>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	2b05      	cmp	r3, #5
 8006ae2:	d10c      	bne.n	8006afe <HAL_RCC_OscConfig+0x312>
 8006ae4:	4b77      	ldr	r3, [pc, #476]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae8:	4a76      	ldr	r2, [pc, #472]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006aea:	f043 0304 	orr.w	r3, r3, #4
 8006aee:	6713      	str	r3, [r2, #112]	; 0x70
 8006af0:	4b74      	ldr	r3, [pc, #464]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af4:	4a73      	ldr	r2, [pc, #460]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006af6:	f043 0301 	orr.w	r3, r3, #1
 8006afa:	6713      	str	r3, [r2, #112]	; 0x70
 8006afc:	e00b      	b.n	8006b16 <HAL_RCC_OscConfig+0x32a>
 8006afe:	4b71      	ldr	r3, [pc, #452]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b02:	4a70      	ldr	r2, [pc, #448]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006b04:	f023 0301 	bic.w	r3, r3, #1
 8006b08:	6713      	str	r3, [r2, #112]	; 0x70
 8006b0a:	4b6e      	ldr	r3, [pc, #440]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0e:	4a6d      	ldr	r2, [pc, #436]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006b10:	f023 0304 	bic.w	r3, r3, #4
 8006b14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d015      	beq.n	8006b4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b1e:	f7fb fd77 	bl	8002610 <HAL_GetTick>
 8006b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b24:	e00a      	b.n	8006b3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b26:	f7fb fd73 	bl	8002610 <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d901      	bls.n	8006b3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e0bc      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b3c:	4b61      	ldr	r3, [pc, #388]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0ee      	beq.n	8006b26 <HAL_RCC_OscConfig+0x33a>
 8006b48:	e014      	b.n	8006b74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b4a:	f7fb fd61 	bl	8002610 <HAL_GetTick>
 8006b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b50:	e00a      	b.n	8006b68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b52:	f7fb fd5d 	bl	8002610 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d901      	bls.n	8006b68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e0a6      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b68:	4b56      	ldr	r3, [pc, #344]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1ee      	bne.n	8006b52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b74:	7dfb      	ldrb	r3, [r7, #23]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d105      	bne.n	8006b86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b7a:	4b52      	ldr	r3, [pc, #328]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	4a51      	ldr	r2, [pc, #324]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 8092 	beq.w	8006cb4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b90:	4b4c      	ldr	r3, [pc, #304]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f003 030c 	and.w	r3, r3, #12
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d05c      	beq.n	8006c56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d141      	bne.n	8006c28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ba4:	4b48      	ldr	r3, [pc, #288]	; (8006cc8 <HAL_RCC_OscConfig+0x4dc>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006baa:	f7fb fd31 	bl	8002610 <HAL_GetTick>
 8006bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bb0:	e008      	b.n	8006bc4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bb2:	f7fb fd2d 	bl	8002610 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d901      	bls.n	8006bc4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e078      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bc4:	4b3f      	ldr	r3, [pc, #252]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1f0      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	69da      	ldr	r2, [r3, #28]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	019b      	lsls	r3, r3, #6
 8006be0:	431a      	orrs	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be6:	085b      	lsrs	r3, r3, #1
 8006be8:	3b01      	subs	r3, #1
 8006bea:	041b      	lsls	r3, r3, #16
 8006bec:	431a      	orrs	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf2:	061b      	lsls	r3, r3, #24
 8006bf4:	4933      	ldr	r1, [pc, #204]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bfa:	4b33      	ldr	r3, [pc, #204]	; (8006cc8 <HAL_RCC_OscConfig+0x4dc>)
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c00:	f7fb fd06 	bl	8002610 <HAL_GetTick>
 8006c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c06:	e008      	b.n	8006c1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c08:	f7fb fd02 	bl	8002610 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e04d      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c1a:	4b2a      	ldr	r3, [pc, #168]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0f0      	beq.n	8006c08 <HAL_RCC_OscConfig+0x41c>
 8006c26:	e045      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c28:	4b27      	ldr	r3, [pc, #156]	; (8006cc8 <HAL_RCC_OscConfig+0x4dc>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c2e:	f7fb fcef 	bl	8002610 <HAL_GetTick>
 8006c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c34:	e008      	b.n	8006c48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c36:	f7fb fceb 	bl	8002610 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d901      	bls.n	8006c48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e036      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c48:	4b1e      	ldr	r3, [pc, #120]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1f0      	bne.n	8006c36 <HAL_RCC_OscConfig+0x44a>
 8006c54:	e02e      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e029      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c62:	4b18      	ldr	r3, [pc, #96]	; (8006cc4 <HAL_RCC_OscConfig+0x4d8>)
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d11c      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d115      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d10d      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d106      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d001      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e000      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3718      	adds	r7, #24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	40007000 	.word	0x40007000
 8006cc4:	40023800 	.word	0x40023800
 8006cc8:	42470060 	.word	0x42470060

08006ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e0cc      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ce0:	4b68      	ldr	r3, [pc, #416]	; (8006e84 <HAL_RCC_ClockConfig+0x1b8>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 030f 	and.w	r3, r3, #15
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d90c      	bls.n	8006d08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cee:	4b65      	ldr	r3, [pc, #404]	; (8006e84 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	b2d2      	uxtb	r2, r2
 8006cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cf6:	4b63      	ldr	r3, [pc, #396]	; (8006e84 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 030f 	and.w	r3, r3, #15
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d001      	beq.n	8006d08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e0b8      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0302 	and.w	r3, r3, #2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d020      	beq.n	8006d56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0304 	and.w	r3, r3, #4
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d005      	beq.n	8006d2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d20:	4b59      	ldr	r3, [pc, #356]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	4a58      	ldr	r2, [pc, #352]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0308 	and.w	r3, r3, #8
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d005      	beq.n	8006d44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d38:	4b53      	ldr	r3, [pc, #332]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	4a52      	ldr	r2, [pc, #328]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d44:	4b50      	ldr	r3, [pc, #320]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	494d      	ldr	r1, [pc, #308]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d044      	beq.n	8006dec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d107      	bne.n	8006d7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d6a:	4b47      	ldr	r3, [pc, #284]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d119      	bne.n	8006daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e07f      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d003      	beq.n	8006d8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	d107      	bne.n	8006d9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d8a:	4b3f      	ldr	r3, [pc, #252]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d109      	bne.n	8006daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e06f      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d9a:	4b3b      	ldr	r3, [pc, #236]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e067      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006daa:	4b37      	ldr	r3, [pc, #220]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f023 0203 	bic.w	r2, r3, #3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	4934      	ldr	r1, [pc, #208]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006dbc:	f7fb fc28 	bl	8002610 <HAL_GetTick>
 8006dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dc2:	e00a      	b.n	8006dda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dc4:	f7fb fc24 	bl	8002610 <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e04f      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dda:	4b2b      	ldr	r3, [pc, #172]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f003 020c 	and.w	r2, r3, #12
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d1eb      	bne.n	8006dc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006dec:	4b25      	ldr	r3, [pc, #148]	; (8006e84 <HAL_RCC_ClockConfig+0x1b8>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 030f 	and.w	r3, r3, #15
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d20c      	bcs.n	8006e14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dfa:	4b22      	ldr	r3, [pc, #136]	; (8006e84 <HAL_RCC_ClockConfig+0x1b8>)
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	b2d2      	uxtb	r2, r2
 8006e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e02:	4b20      	ldr	r3, [pc, #128]	; (8006e84 <HAL_RCC_ClockConfig+0x1b8>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 030f 	and.w	r3, r3, #15
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d001      	beq.n	8006e14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e032      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d008      	beq.n	8006e32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e20:	4b19      	ldr	r3, [pc, #100]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	4916      	ldr	r1, [pc, #88]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0308 	and.w	r3, r3, #8
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d009      	beq.n	8006e52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e3e:	4b12      	ldr	r3, [pc, #72]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	00db      	lsls	r3, r3, #3
 8006e4c:	490e      	ldr	r1, [pc, #56]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e52:	f000 f821 	bl	8006e98 <HAL_RCC_GetSysClockFreq>
 8006e56:	4601      	mov	r1, r0
 8006e58:	4b0b      	ldr	r3, [pc, #44]	; (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	091b      	lsrs	r3, r3, #4
 8006e5e:	f003 030f 	and.w	r3, r3, #15
 8006e62:	4a0a      	ldr	r2, [pc, #40]	; (8006e8c <HAL_RCC_ClockConfig+0x1c0>)
 8006e64:	5cd3      	ldrb	r3, [r2, r3]
 8006e66:	fa21 f303 	lsr.w	r3, r1, r3
 8006e6a:	4a09      	ldr	r2, [pc, #36]	; (8006e90 <HAL_RCC_ClockConfig+0x1c4>)
 8006e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e6e:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <HAL_RCC_ClockConfig+0x1c8>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fb fb88 	bl	8002588 <HAL_InitTick>

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	40023c00 	.word	0x40023c00
 8006e88:	40023800 	.word	0x40023800
 8006e8c:	08040678 	.word	0x08040678
 8006e90:	2000008c 	.word	0x2000008c
 8006e94:	20000090 	.word	0x20000090

08006e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	607b      	str	r3, [r7, #4]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eae:	4b63      	ldr	r3, [pc, #396]	; (800703c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f003 030c 	and.w	r3, r3, #12
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d007      	beq.n	8006eca <HAL_RCC_GetSysClockFreq+0x32>
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	d008      	beq.n	8006ed0 <HAL_RCC_GetSysClockFreq+0x38>
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f040 80b4 	bne.w	800702c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ec4:	4b5e      	ldr	r3, [pc, #376]	; (8007040 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006ec6:	60bb      	str	r3, [r7, #8]
       break;
 8006ec8:	e0b3      	b.n	8007032 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006eca:	4b5e      	ldr	r3, [pc, #376]	; (8007044 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006ecc:	60bb      	str	r3, [r7, #8]
      break;
 8006ece:	e0b0      	b.n	8007032 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ed0:	4b5a      	ldr	r3, [pc, #360]	; (800703c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ed8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006eda:	4b58      	ldr	r3, [pc, #352]	; (800703c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d04a      	beq.n	8006f7c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ee6:	4b55      	ldr	r3, [pc, #340]	; (800703c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	099b      	lsrs	r3, r3, #6
 8006eec:	f04f 0400 	mov.w	r4, #0
 8006ef0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006ef4:	f04f 0200 	mov.w	r2, #0
 8006ef8:	ea03 0501 	and.w	r5, r3, r1
 8006efc:	ea04 0602 	and.w	r6, r4, r2
 8006f00:	4629      	mov	r1, r5
 8006f02:	4632      	mov	r2, r6
 8006f04:	f04f 0300 	mov.w	r3, #0
 8006f08:	f04f 0400 	mov.w	r4, #0
 8006f0c:	0154      	lsls	r4, r2, #5
 8006f0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006f12:	014b      	lsls	r3, r1, #5
 8006f14:	4619      	mov	r1, r3
 8006f16:	4622      	mov	r2, r4
 8006f18:	1b49      	subs	r1, r1, r5
 8006f1a:	eb62 0206 	sbc.w	r2, r2, r6
 8006f1e:	f04f 0300 	mov.w	r3, #0
 8006f22:	f04f 0400 	mov.w	r4, #0
 8006f26:	0194      	lsls	r4, r2, #6
 8006f28:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006f2c:	018b      	lsls	r3, r1, #6
 8006f2e:	1a5b      	subs	r3, r3, r1
 8006f30:	eb64 0402 	sbc.w	r4, r4, r2
 8006f34:	f04f 0100 	mov.w	r1, #0
 8006f38:	f04f 0200 	mov.w	r2, #0
 8006f3c:	00e2      	lsls	r2, r4, #3
 8006f3e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006f42:	00d9      	lsls	r1, r3, #3
 8006f44:	460b      	mov	r3, r1
 8006f46:	4614      	mov	r4, r2
 8006f48:	195b      	adds	r3, r3, r5
 8006f4a:	eb44 0406 	adc.w	r4, r4, r6
 8006f4e:	f04f 0100 	mov.w	r1, #0
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	0262      	lsls	r2, r4, #9
 8006f58:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006f5c:	0259      	lsls	r1, r3, #9
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4614      	mov	r4, r2
 8006f62:	4618      	mov	r0, r3
 8006f64:	4621      	mov	r1, r4
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f04f 0400 	mov.w	r4, #0
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	4623      	mov	r3, r4
 8006f70:	f7f9 f92a 	bl	80001c8 <__aeabi_uldivmod>
 8006f74:	4603      	mov	r3, r0
 8006f76:	460c      	mov	r4, r1
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	e049      	b.n	8007010 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f7c:	4b2f      	ldr	r3, [pc, #188]	; (800703c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	099b      	lsrs	r3, r3, #6
 8006f82:	f04f 0400 	mov.w	r4, #0
 8006f86:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006f8a:	f04f 0200 	mov.w	r2, #0
 8006f8e:	ea03 0501 	and.w	r5, r3, r1
 8006f92:	ea04 0602 	and.w	r6, r4, r2
 8006f96:	4629      	mov	r1, r5
 8006f98:	4632      	mov	r2, r6
 8006f9a:	f04f 0300 	mov.w	r3, #0
 8006f9e:	f04f 0400 	mov.w	r4, #0
 8006fa2:	0154      	lsls	r4, r2, #5
 8006fa4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006fa8:	014b      	lsls	r3, r1, #5
 8006faa:	4619      	mov	r1, r3
 8006fac:	4622      	mov	r2, r4
 8006fae:	1b49      	subs	r1, r1, r5
 8006fb0:	eb62 0206 	sbc.w	r2, r2, r6
 8006fb4:	f04f 0300 	mov.w	r3, #0
 8006fb8:	f04f 0400 	mov.w	r4, #0
 8006fbc:	0194      	lsls	r4, r2, #6
 8006fbe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006fc2:	018b      	lsls	r3, r1, #6
 8006fc4:	1a5b      	subs	r3, r3, r1
 8006fc6:	eb64 0402 	sbc.w	r4, r4, r2
 8006fca:	f04f 0100 	mov.w	r1, #0
 8006fce:	f04f 0200 	mov.w	r2, #0
 8006fd2:	00e2      	lsls	r2, r4, #3
 8006fd4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006fd8:	00d9      	lsls	r1, r3, #3
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4614      	mov	r4, r2
 8006fde:	195b      	adds	r3, r3, r5
 8006fe0:	eb44 0406 	adc.w	r4, r4, r6
 8006fe4:	f04f 0100 	mov.w	r1, #0
 8006fe8:	f04f 0200 	mov.w	r2, #0
 8006fec:	02a2      	lsls	r2, r4, #10
 8006fee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006ff2:	0299      	lsls	r1, r3, #10
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	4614      	mov	r4, r2
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	4621      	mov	r1, r4
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f04f 0400 	mov.w	r4, #0
 8007002:	461a      	mov	r2, r3
 8007004:	4623      	mov	r3, r4
 8007006:	f7f9 f8df 	bl	80001c8 <__aeabi_uldivmod>
 800700a:	4603      	mov	r3, r0
 800700c:	460c      	mov	r4, r1
 800700e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007010:	4b0a      	ldr	r3, [pc, #40]	; (800703c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	0c1b      	lsrs	r3, r3, #16
 8007016:	f003 0303 	and.w	r3, r3, #3
 800701a:	3301      	adds	r3, #1
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	fbb2 f3f3 	udiv	r3, r2, r3
 8007028:	60bb      	str	r3, [r7, #8]
      break;
 800702a:	e002      	b.n	8007032 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800702c:	4b04      	ldr	r3, [pc, #16]	; (8007040 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800702e:	60bb      	str	r3, [r7, #8]
      break;
 8007030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007032:	68bb      	ldr	r3, [r7, #8]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800703c:	40023800 	.word	0x40023800
 8007040:	00f42400 	.word	0x00f42400
 8007044:	007a1200 	.word	0x007a1200

08007048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007048:	b480      	push	{r7}
 800704a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800704c:	4b03      	ldr	r3, [pc, #12]	; (800705c <HAL_RCC_GetHCLKFreq+0x14>)
 800704e:	681b      	ldr	r3, [r3, #0]
}
 8007050:	4618      	mov	r0, r3
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	2000008c 	.word	0x2000008c

08007060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007064:	f7ff fff0 	bl	8007048 <HAL_RCC_GetHCLKFreq>
 8007068:	4601      	mov	r1, r0
 800706a:	4b05      	ldr	r3, [pc, #20]	; (8007080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	0a9b      	lsrs	r3, r3, #10
 8007070:	f003 0307 	and.w	r3, r3, #7
 8007074:	4a03      	ldr	r2, [pc, #12]	; (8007084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007076:	5cd3      	ldrb	r3, [r2, r3]
 8007078:	fa21 f303 	lsr.w	r3, r1, r3
}
 800707c:	4618      	mov	r0, r3
 800707e:	bd80      	pop	{r7, pc}
 8007080:	40023800 	.word	0x40023800
 8007084:	08040688 	.word	0x08040688

08007088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800708c:	f7ff ffdc 	bl	8007048 <HAL_RCC_GetHCLKFreq>
 8007090:	4601      	mov	r1, r0
 8007092:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	0b5b      	lsrs	r3, r3, #13
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	4a03      	ldr	r2, [pc, #12]	; (80070ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800709e:	5cd3      	ldrb	r3, [r2, r3]
 80070a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	40023800 	.word	0x40023800
 80070ac:	08040688 	.word	0x08040688

080070b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e056      	b.n	8007170 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d106      	bne.n	80070e2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7fa ff2b 	bl	8001f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2202      	movs	r2, #2
 80070e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070f8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	431a      	orrs	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	431a      	orrs	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	431a      	orrs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	431a      	orrs	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800711e:	431a      	orrs	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	69db      	ldr	r3, [r3, #28]
 8007124:	431a      	orrs	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	ea42 0103 	orr.w	r1, r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	430a      	orrs	r2, r1
 8007138:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	0c1b      	lsrs	r3, r3, #16
 8007140:	f003 0104 	and.w	r1, r3, #4
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	430a      	orrs	r2, r1
 800714e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	69da      	ldr	r2, [r3, #28]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800715e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b088      	sub	sp, #32
 800717c:	af02      	add	r7, sp, #8
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	603b      	str	r3, [r7, #0]
 8007184:	4613      	mov	r3, r2
 8007186:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007194:	d112      	bne.n	80071bc <HAL_SPI_Receive+0x44>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10e      	bne.n	80071bc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2204      	movs	r2, #4
 80071a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80071a6:	88fa      	ldrh	r2, [r7, #6]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	4613      	mov	r3, r2
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	68b9      	ldr	r1, [r7, #8]
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 f8e9 	bl	800738a <HAL_SPI_TransmitReceive>
 80071b8:	4603      	mov	r3, r0
 80071ba:	e0e2      	b.n	8007382 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d101      	bne.n	80071ca <HAL_SPI_Receive+0x52>
 80071c6:	2302      	movs	r3, #2
 80071c8:	e0db      	b.n	8007382 <HAL_SPI_Receive+0x20a>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071d2:	f7fb fa1d 	bl	8002610 <HAL_GetTick>
 80071d6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d002      	beq.n	80071ea <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80071e4:	2302      	movs	r3, #2
 80071e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071e8:	e0c2      	b.n	8007370 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <HAL_SPI_Receive+0x7e>
 80071f0:	88fb      	ldrh	r3, [r7, #6]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d102      	bne.n	80071fc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071fa:	e0b9      	b.n	8007370 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2204      	movs	r2, #4
 8007200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	88fa      	ldrh	r2, [r7, #6]
 8007214:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	88fa      	ldrh	r2, [r7, #6]
 800721a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007242:	d107      	bne.n	8007254 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007252:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725e:	2b40      	cmp	r3, #64	; 0x40
 8007260:	d007      	beq.n	8007272 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007270:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d162      	bne.n	8007340 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800727a:	e02e      	b.n	80072da <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b01      	cmp	r3, #1
 8007288:	d115      	bne.n	80072b6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f103 020c 	add.w	r2, r3, #12
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007296:	7812      	ldrb	r2, [r2, #0]
 8007298:	b2d2      	uxtb	r2, r2
 800729a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	3b01      	subs	r3, #1
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072b4:	e011      	b.n	80072da <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072b6:	f7fb f9ab 	bl	8002610 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d803      	bhi.n	80072ce <HAL_SPI_Receive+0x156>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072cc:	d102      	bne.n	80072d4 <HAL_SPI_Receive+0x15c>
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d102      	bne.n	80072da <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80072d8:	e04a      	b.n	8007370 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072de:	b29b      	uxth	r3, r3
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1cb      	bne.n	800727c <HAL_SPI_Receive+0x104>
 80072e4:	e031      	b.n	800734a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d113      	bne.n	800731c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68da      	ldr	r2, [r3, #12]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fe:	b292      	uxth	r2, r2
 8007300:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007306:	1c9a      	adds	r2, r3, #2
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007310:	b29b      	uxth	r3, r3
 8007312:	3b01      	subs	r3, #1
 8007314:	b29a      	uxth	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	87da      	strh	r2, [r3, #62]	; 0x3e
 800731a:	e011      	b.n	8007340 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800731c:	f7fb f978 	bl	8002610 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d803      	bhi.n	8007334 <HAL_SPI_Receive+0x1bc>
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007332:	d102      	bne.n	800733a <HAL_SPI_Receive+0x1c2>
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d102      	bne.n	8007340 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800733e:	e017      	b.n	8007370 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007344:	b29b      	uxth	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1cd      	bne.n	80072e6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 fb46 	bl	80079e0 <SPI_EndRxTransaction>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2220      	movs	r2, #32
 800735e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	75fb      	strb	r3, [r7, #23]
 800736c:	e000      	b.n	8007370 <HAL_SPI_Receive+0x1f8>
  }

error :
 800736e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007380:	7dfb      	ldrb	r3, [r7, #23]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b08c      	sub	sp, #48	; 0x30
 800738e:	af00      	add	r7, sp, #0
 8007390:	60f8      	str	r0, [r7, #12]
 8007392:	60b9      	str	r1, [r7, #8]
 8007394:	607a      	str	r2, [r7, #4]
 8007396:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007398:	2301      	movs	r3, #1
 800739a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d101      	bne.n	80073b0 <HAL_SPI_TransmitReceive+0x26>
 80073ac:	2302      	movs	r3, #2
 80073ae:	e18a      	b.n	80076c6 <HAL_SPI_TransmitReceive+0x33c>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073b8:	f7fb f92a 	bl	8002610 <HAL_GetTick>
 80073bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80073ce:	887b      	ldrh	r3, [r7, #2]
 80073d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80073d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d00f      	beq.n	80073fa <HAL_SPI_TransmitReceive+0x70>
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073e0:	d107      	bne.n	80073f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d103      	bne.n	80073f2 <HAL_SPI_TransmitReceive+0x68>
 80073ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	d003      	beq.n	80073fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80073f2:	2302      	movs	r3, #2
 80073f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80073f8:	e15b      	b.n	80076b2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d005      	beq.n	800740c <HAL_SPI_TransmitReceive+0x82>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d002      	beq.n	800740c <HAL_SPI_TransmitReceive+0x82>
 8007406:	887b      	ldrh	r3, [r7, #2]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d103      	bne.n	8007414 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007412:	e14e      	b.n	80076b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b04      	cmp	r3, #4
 800741e:	d003      	beq.n	8007428 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2205      	movs	r2, #5
 8007424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	887a      	ldrh	r2, [r7, #2]
 8007438:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	887a      	ldrh	r2, [r7, #2]
 800743e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	887a      	ldrh	r2, [r7, #2]
 800744a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	887a      	ldrh	r2, [r7, #2]
 8007450:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007468:	2b40      	cmp	r3, #64	; 0x40
 800746a:	d007      	beq.n	800747c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800747a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007484:	d178      	bne.n	8007578 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d002      	beq.n	8007494 <HAL_SPI_TransmitReceive+0x10a>
 800748e:	8b7b      	ldrh	r3, [r7, #26]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d166      	bne.n	8007562 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007498:	881a      	ldrh	r2, [r3, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a4:	1c9a      	adds	r2, r3, #2
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	3b01      	subs	r3, #1
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074b8:	e053      	b.n	8007562 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f003 0302 	and.w	r3, r3, #2
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d11b      	bne.n	8007500 <HAL_SPI_TransmitReceive+0x176>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d016      	beq.n	8007500 <HAL_SPI_TransmitReceive+0x176>
 80074d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d113      	bne.n	8007500 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074dc:	881a      	ldrh	r2, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e8:	1c9a      	adds	r2, r3, #2
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	3b01      	subs	r3, #1
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b01      	cmp	r3, #1
 800750c:	d119      	bne.n	8007542 <HAL_SPI_TransmitReceive+0x1b8>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007512:	b29b      	uxth	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	d014      	beq.n	8007542 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68da      	ldr	r2, [r3, #12]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007522:	b292      	uxth	r2, r2
 8007524:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752a:	1c9a      	adds	r2, r3, #2
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007534:	b29b      	uxth	r3, r3
 8007536:	3b01      	subs	r3, #1
 8007538:	b29a      	uxth	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800753e:	2301      	movs	r3, #1
 8007540:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007542:	f7fb f865 	bl	8002610 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800754e:	429a      	cmp	r2, r3
 8007550:	d807      	bhi.n	8007562 <HAL_SPI_TransmitReceive+0x1d8>
 8007552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007558:	d003      	beq.n	8007562 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007560:	e0a7      	b.n	80076b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007566:	b29b      	uxth	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1a6      	bne.n	80074ba <HAL_SPI_TransmitReceive+0x130>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007570:	b29b      	uxth	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1a1      	bne.n	80074ba <HAL_SPI_TransmitReceive+0x130>
 8007576:	e07c      	b.n	8007672 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <HAL_SPI_TransmitReceive+0x1fc>
 8007580:	8b7b      	ldrh	r3, [r7, #26]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d16b      	bne.n	800765e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	330c      	adds	r3, #12
 8007590:	7812      	ldrb	r2, [r2, #0]
 8007592:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075ac:	e057      	b.n	800765e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f003 0302 	and.w	r3, r3, #2
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d11c      	bne.n	80075f6 <HAL_SPI_TransmitReceive+0x26c>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d017      	beq.n	80075f6 <HAL_SPI_TransmitReceive+0x26c>
 80075c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d114      	bne.n	80075f6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	330c      	adds	r3, #12
 80075d6:	7812      	ldrb	r2, [r2, #0]
 80075d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075de:	1c5a      	adds	r2, r3, #1
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	3b01      	subs	r3, #1
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b01      	cmp	r3, #1
 8007602:	d119      	bne.n	8007638 <HAL_SPI_TransmitReceive+0x2ae>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007608:	b29b      	uxth	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d014      	beq.n	8007638 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68da      	ldr	r2, [r3, #12]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007618:	b2d2      	uxtb	r2, r2
 800761a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800762a:	b29b      	uxth	r3, r3
 800762c:	3b01      	subs	r3, #1
 800762e:	b29a      	uxth	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007634:	2301      	movs	r3, #1
 8007636:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007638:	f7fa ffea 	bl	8002610 <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007644:	429a      	cmp	r2, r3
 8007646:	d803      	bhi.n	8007650 <HAL_SPI_TransmitReceive+0x2c6>
 8007648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800764e:	d102      	bne.n	8007656 <HAL_SPI_TransmitReceive+0x2cc>
 8007650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007652:	2b00      	cmp	r3, #0
 8007654:	d103      	bne.n	800765e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800765c:	e029      	b.n	80076b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007662:	b29b      	uxth	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1a2      	bne.n	80075ae <HAL_SPI_TransmitReceive+0x224>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800766c:	b29b      	uxth	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d19d      	bne.n	80075ae <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007674:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 fa18 	bl	8007aac <SPI_EndRxTxTransaction>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d006      	beq.n	8007690 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2220      	movs	r2, #32
 800768c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800768e:	e010      	b.n	80076b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10b      	bne.n	80076b0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007698:	2300      	movs	r3, #0
 800769a:	617b      	str	r3, [r7, #20]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	617b      	str	r3, [r7, #20]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	617b      	str	r3, [r7, #20]
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	e000      	b.n	80076b2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80076b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3730      	adds	r7, #48	; 0x30
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
	...

080076d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b088      	sub	sp, #32
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	099b      	lsrs	r3, r3, #6
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10f      	bne.n	8007714 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00a      	beq.n	8007714 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	099b      	lsrs	r3, r3, #6
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	4798      	blx	r3
    return;
 8007712:	e0d8      	b.n	80078c6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	085b      	lsrs	r3, r3, #1
 8007718:	f003 0301 	and.w	r3, r3, #1
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00a      	beq.n	8007736 <HAL_SPI_IRQHandler+0x66>
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	09db      	lsrs	r3, r3, #7
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	d004      	beq.n	8007736 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	4798      	blx	r3
    return;
 8007734:	e0c7      	b.n	80078c6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	095b      	lsrs	r3, r3, #5
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10c      	bne.n	800775c <HAL_SPI_IRQHandler+0x8c>
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	099b      	lsrs	r3, r3, #6
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	d106      	bne.n	800775c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	0a1b      	lsrs	r3, r3, #8
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b00      	cmp	r3, #0
 8007758:	f000 80b5 	beq.w	80078c6 <HAL_SPI_IRQHandler+0x1f6>
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	095b      	lsrs	r3, r3, #5
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 80ae 	beq.w	80078c6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	099b      	lsrs	r3, r3, #6
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b00      	cmp	r3, #0
 8007774:	d023      	beq.n	80077be <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b03      	cmp	r3, #3
 8007780:	d011      	beq.n	80077a6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007786:	f043 0204 	orr.w	r2, r3, #4
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800778e:	2300      	movs	r3, #0
 8007790:	617b      	str	r3, [r7, #20]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	617b      	str	r3, [r7, #20]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	617b      	str	r3, [r7, #20]
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	e00b      	b.n	80077be <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077a6:	2300      	movs	r3, #0
 80077a8:	613b      	str	r3, [r7, #16]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	613b      	str	r3, [r7, #16]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	613b      	str	r3, [r7, #16]
 80077ba:	693b      	ldr	r3, [r7, #16]
        return;
 80077bc:	e083      	b.n	80078c6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	095b      	lsrs	r3, r3, #5
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d014      	beq.n	80077f4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ce:	f043 0201 	orr.w	r2, r3, #1
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80077d6:	2300      	movs	r3, #0
 80077d8:	60fb      	str	r3, [r7, #12]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	60fb      	str	r3, [r7, #12]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	0a1b      	lsrs	r3, r3, #8
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00c      	beq.n	800781a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007804:	f043 0208 	orr.w	r2, r3, #8
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800780c:	2300      	movs	r3, #0
 800780e:	60bb      	str	r3, [r7, #8]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	60bb      	str	r3, [r7, #8]
 8007818:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781e:	2b00      	cmp	r3, #0
 8007820:	d050      	beq.n	80078c4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007830:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	f003 0302 	and.w	r3, r3, #2
 8007840:	2b00      	cmp	r3, #0
 8007842:	d104      	bne.n	800784e <HAL_SPI_IRQHandler+0x17e>
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	d034      	beq.n	80078b8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f022 0203 	bic.w	r2, r2, #3
 800785c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007862:	2b00      	cmp	r3, #0
 8007864:	d011      	beq.n	800788a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800786a:	4a18      	ldr	r2, [pc, #96]	; (80078cc <HAL_SPI_IRQHandler+0x1fc>)
 800786c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007872:	4618      	mov	r0, r3
 8007874:	f7fb fb67 	bl	8002f46 <HAL_DMA_Abort_IT>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d005      	beq.n	800788a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007882:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800788e:	2b00      	cmp	r3, #0
 8007890:	d016      	beq.n	80078c0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007896:	4a0d      	ldr	r2, [pc, #52]	; (80078cc <HAL_SPI_IRQHandler+0x1fc>)
 8007898:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fb fb51 	bl	8002f46 <HAL_DMA_Abort_IT>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80078b6:	e003      	b.n	80078c0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f809 	bl	80078d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80078be:	e000      	b.n	80078c2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80078c0:	bf00      	nop
    return;
 80078c2:	bf00      	nop
 80078c4:	bf00      	nop
  }
}
 80078c6:	3720      	adds	r7, #32
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	080078e5 	.word	0x080078e5

080078d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f7ff ffe6 	bl	80078d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007904:	bf00      	nop
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	603b      	str	r3, [r7, #0]
 8007918:	4613      	mov	r3, r2
 800791a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800791c:	e04c      	b.n	80079b8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007924:	d048      	beq.n	80079b8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007926:	f7fa fe73 	bl	8002610 <HAL_GetTick>
 800792a:	4602      	mov	r2, r0
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	429a      	cmp	r2, r3
 8007934:	d902      	bls.n	800793c <SPI_WaitFlagStateUntilTimeout+0x30>
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d13d      	bne.n	80079b8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800794a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007954:	d111      	bne.n	800797a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800795e:	d004      	beq.n	800796a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007968:	d107      	bne.n	800797a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007978:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007982:	d10f      	bne.n	80079a4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e00f      	b.n	80079d8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689a      	ldr	r2, [r3, #8]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	4013      	ands	r3, r2
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	bf0c      	ite	eq
 80079c8:	2301      	moveq	r3, #1
 80079ca:	2300      	movne	r3, #0
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	461a      	mov	r2, r3
 80079d0:	79fb      	ldrb	r3, [r7, #7]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d1a3      	bne.n	800791e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079f4:	d111      	bne.n	8007a1a <SPI_EndRxTransaction+0x3a>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079fe:	d004      	beq.n	8007a0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a08:	d107      	bne.n	8007a1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a18:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a22:	d12a      	bne.n	8007a7a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a2c:	d012      	beq.n	8007a54 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	2200      	movs	r2, #0
 8007a36:	2180      	movs	r1, #128	; 0x80
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f7ff ff67 	bl	800790c <SPI_WaitFlagStateUntilTimeout>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d02d      	beq.n	8007aa0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a48:	f043 0220 	orr.w	r2, r3, #32
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e026      	b.n	8007aa2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	2101      	movs	r1, #1
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f7ff ff54 	bl	800790c <SPI_WaitFlagStateUntilTimeout>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d01a      	beq.n	8007aa0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a6e:	f043 0220 	orr.w	r2, r3, #32
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e013      	b.n	8007aa2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2200      	movs	r2, #0
 8007a82:	2101      	movs	r1, #1
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f7ff ff41 	bl	800790c <SPI_WaitFlagStateUntilTimeout>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d007      	beq.n	8007aa0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a94:	f043 0220 	orr.w	r2, r3, #32
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e000      	b.n	8007aa2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
	...

08007aac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b088      	sub	sp, #32
 8007ab0:	af02      	add	r7, sp, #8
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ab8:	4b1b      	ldr	r3, [pc, #108]	; (8007b28 <SPI_EndRxTxTransaction+0x7c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a1b      	ldr	r2, [pc, #108]	; (8007b2c <SPI_EndRxTxTransaction+0x80>)
 8007abe:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac2:	0d5b      	lsrs	r3, r3, #21
 8007ac4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ac8:	fb02 f303 	mul.w	r3, r2, r3
 8007acc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ad6:	d112      	bne.n	8007afe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	2180      	movs	r1, #128	; 0x80
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f7ff ff12 	bl	800790c <SPI_WaitFlagStateUntilTimeout>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d016      	beq.n	8007b1c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af2:	f043 0220 	orr.w	r2, r3, #32
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e00f      	b.n	8007b1e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00a      	beq.n	8007b1a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	3b01      	subs	r3, #1
 8007b08:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b14:	2b80      	cmp	r3, #128	; 0x80
 8007b16:	d0f2      	beq.n	8007afe <SPI_EndRxTxTransaction+0x52>
 8007b18:	e000      	b.n	8007b1c <SPI_EndRxTxTransaction+0x70>
        break;
 8007b1a:	bf00      	nop
  }

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3718      	adds	r7, #24
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	2000008c 	.word	0x2000008c
 8007b2c:	165e9f81 	.word	0x165e9f81

08007b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d101      	bne.n	8007b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e01d      	b.n	8007b7e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d106      	bne.n	8007b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7fa fbb4 	bl	80022c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	4610      	mov	r0, r2
 8007b70:	f000 fa14 	bl	8007f9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b86:	b480      	push	{r7}
 8007b88:	b085      	sub	sp, #20
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68da      	ldr	r2, [r3, #12]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f042 0201 	orr.w	r2, r2, #1
 8007b9c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f003 0307 	and.w	r3, r3, #7
 8007ba8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2b06      	cmp	r3, #6
 8007bae:	d007      	beq.n	8007bc0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f042 0201 	orr.w	r2, r2, #1
 8007bbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	f003 0302 	and.w	r3, r3, #2
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d122      	bne.n	8007c2a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d11b      	bne.n	8007c2a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f06f 0202 	mvn.w	r2, #2
 8007bfa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	f003 0303 	and.w	r3, r3, #3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d003      	beq.n	8007c18 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f9a5 	bl	8007f60 <HAL_TIM_IC_CaptureCallback>
 8007c16:	e005      	b.n	8007c24 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f997 	bl	8007f4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f9a8 	bl	8007f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	f003 0304 	and.w	r3, r3, #4
 8007c34:	2b04      	cmp	r3, #4
 8007c36:	d122      	bne.n	8007c7e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	f003 0304 	and.w	r3, r3, #4
 8007c42:	2b04      	cmp	r3, #4
 8007c44:	d11b      	bne.n	8007c7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f06f 0204 	mvn.w	r2, #4
 8007c4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2202      	movs	r2, #2
 8007c54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d003      	beq.n	8007c6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f97b 	bl	8007f60 <HAL_TIM_IC_CaptureCallback>
 8007c6a:	e005      	b.n	8007c78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f96d 	bl	8007f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f97e 	bl	8007f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	f003 0308 	and.w	r3, r3, #8
 8007c88:	2b08      	cmp	r3, #8
 8007c8a:	d122      	bne.n	8007cd2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	f003 0308 	and.w	r3, r3, #8
 8007c96:	2b08      	cmp	r3, #8
 8007c98:	d11b      	bne.n	8007cd2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f06f 0208 	mvn.w	r2, #8
 8007ca2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2204      	movs	r2, #4
 8007ca8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	69db      	ldr	r3, [r3, #28]
 8007cb0:	f003 0303 	and.w	r3, r3, #3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d003      	beq.n	8007cc0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f951 	bl	8007f60 <HAL_TIM_IC_CaptureCallback>
 8007cbe:	e005      	b.n	8007ccc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f943 	bl	8007f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f954 	bl	8007f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	f003 0310 	and.w	r3, r3, #16
 8007cdc:	2b10      	cmp	r3, #16
 8007cde:	d122      	bne.n	8007d26 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	f003 0310 	and.w	r3, r3, #16
 8007cea:	2b10      	cmp	r3, #16
 8007cec:	d11b      	bne.n	8007d26 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f06f 0210 	mvn.w	r2, #16
 8007cf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2208      	movs	r2, #8
 8007cfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d003      	beq.n	8007d14 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f927 	bl	8007f60 <HAL_TIM_IC_CaptureCallback>
 8007d12:	e005      	b.n	8007d20 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f919 	bl	8007f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f92a 	bl	8007f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d10e      	bne.n	8007d52 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d107      	bne.n	8007d52 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f06f 0201 	mvn.w	r2, #1
 8007d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7f9 ff8f 	bl	8001c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d5c:	2b80      	cmp	r3, #128	; 0x80
 8007d5e:	d10e      	bne.n	8007d7e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d6a:	2b80      	cmp	r3, #128	; 0x80
 8007d6c:	d107      	bne.n	8007d7e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 facf 	bl	800831c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d88:	2b40      	cmp	r3, #64	; 0x40
 8007d8a:	d10e      	bne.n	8007daa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d96:	2b40      	cmp	r3, #64	; 0x40
 8007d98:	d107      	bne.n	8007daa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f8ef 	bl	8007f88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	f003 0320 	and.w	r3, r3, #32
 8007db4:	2b20      	cmp	r3, #32
 8007db6:	d10e      	bne.n	8007dd6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	f003 0320 	and.w	r3, r3, #32
 8007dc2:	2b20      	cmp	r3, #32
 8007dc4:	d107      	bne.n	8007dd6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f06f 0220 	mvn.w	r2, #32
 8007dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fa99 	bl	8008308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dd6:	bf00      	nop
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b084      	sub	sp, #16
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d101      	bne.n	8007df6 <HAL_TIM_ConfigClockSource+0x18>
 8007df2:	2302      	movs	r3, #2
 8007df4:	e0a6      	b.n	8007f44 <HAL_TIM_ConfigClockSource+0x166>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2202      	movs	r2, #2
 8007e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e14:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e1c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b40      	cmp	r3, #64	; 0x40
 8007e2c:	d067      	beq.n	8007efe <HAL_TIM_ConfigClockSource+0x120>
 8007e2e:	2b40      	cmp	r3, #64	; 0x40
 8007e30:	d80b      	bhi.n	8007e4a <HAL_TIM_ConfigClockSource+0x6c>
 8007e32:	2b10      	cmp	r3, #16
 8007e34:	d073      	beq.n	8007f1e <HAL_TIM_ConfigClockSource+0x140>
 8007e36:	2b10      	cmp	r3, #16
 8007e38:	d802      	bhi.n	8007e40 <HAL_TIM_ConfigClockSource+0x62>
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d06f      	beq.n	8007f1e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007e3e:	e078      	b.n	8007f32 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007e40:	2b20      	cmp	r3, #32
 8007e42:	d06c      	beq.n	8007f1e <HAL_TIM_ConfigClockSource+0x140>
 8007e44:	2b30      	cmp	r3, #48	; 0x30
 8007e46:	d06a      	beq.n	8007f1e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007e48:	e073      	b.n	8007f32 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007e4a:	2b70      	cmp	r3, #112	; 0x70
 8007e4c:	d00d      	beq.n	8007e6a <HAL_TIM_ConfigClockSource+0x8c>
 8007e4e:	2b70      	cmp	r3, #112	; 0x70
 8007e50:	d804      	bhi.n	8007e5c <HAL_TIM_ConfigClockSource+0x7e>
 8007e52:	2b50      	cmp	r3, #80	; 0x50
 8007e54:	d033      	beq.n	8007ebe <HAL_TIM_ConfigClockSource+0xe0>
 8007e56:	2b60      	cmp	r3, #96	; 0x60
 8007e58:	d041      	beq.n	8007ede <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007e5a:	e06a      	b.n	8007f32 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e60:	d066      	beq.n	8007f30 <HAL_TIM_ConfigClockSource+0x152>
 8007e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e66:	d017      	beq.n	8007e98 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007e68:	e063      	b.n	8007f32 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6818      	ldr	r0, [r3, #0]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	6899      	ldr	r1, [r3, #8]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	f000 f9a9 	bl	80081d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	609a      	str	r2, [r3, #8]
      break;
 8007e96:	e04c      	b.n	8007f32 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6818      	ldr	r0, [r3, #0]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	6899      	ldr	r1, [r3, #8]
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	f000 f992 	bl	80081d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	689a      	ldr	r2, [r3, #8]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007eba:	609a      	str	r2, [r3, #8]
      break;
 8007ebc:	e039      	b.n	8007f32 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6818      	ldr	r0, [r3, #0]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	6859      	ldr	r1, [r3, #4]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f000 f906 	bl	80080dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2150      	movs	r1, #80	; 0x50
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 f95f 	bl	800819a <TIM_ITRx_SetConfig>
      break;
 8007edc:	e029      	b.n	8007f32 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6818      	ldr	r0, [r3, #0]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	6859      	ldr	r1, [r3, #4]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	461a      	mov	r2, r3
 8007eec:	f000 f925 	bl	800813a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2160      	movs	r1, #96	; 0x60
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 f94f 	bl	800819a <TIM_ITRx_SetConfig>
      break;
 8007efc:	e019      	b.n	8007f32 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6818      	ldr	r0, [r3, #0]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	6859      	ldr	r1, [r3, #4]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	f000 f8e6 	bl	80080dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2140      	movs	r1, #64	; 0x40
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 f93f 	bl	800819a <TIM_ITRx_SetConfig>
      break;
 8007f1c:	e009      	b.n	8007f32 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4619      	mov	r1, r3
 8007f28:	4610      	mov	r0, r2
 8007f2a:	f000 f936 	bl	800819a <TIM_ITRx_SetConfig>
      break;
 8007f2e:	e000      	b.n	8007f32 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007f30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a40      	ldr	r2, [pc, #256]	; (80080b0 <TIM_Base_SetConfig+0x114>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d013      	beq.n	8007fdc <TIM_Base_SetConfig+0x40>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fba:	d00f      	beq.n	8007fdc <TIM_Base_SetConfig+0x40>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a3d      	ldr	r2, [pc, #244]	; (80080b4 <TIM_Base_SetConfig+0x118>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d00b      	beq.n	8007fdc <TIM_Base_SetConfig+0x40>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a3c      	ldr	r2, [pc, #240]	; (80080b8 <TIM_Base_SetConfig+0x11c>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d007      	beq.n	8007fdc <TIM_Base_SetConfig+0x40>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a3b      	ldr	r2, [pc, #236]	; (80080bc <TIM_Base_SetConfig+0x120>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d003      	beq.n	8007fdc <TIM_Base_SetConfig+0x40>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a3a      	ldr	r2, [pc, #232]	; (80080c0 <TIM_Base_SetConfig+0x124>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d108      	bne.n	8007fee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a2f      	ldr	r2, [pc, #188]	; (80080b0 <TIM_Base_SetConfig+0x114>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d02b      	beq.n	800804e <TIM_Base_SetConfig+0xb2>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ffc:	d027      	beq.n	800804e <TIM_Base_SetConfig+0xb2>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a2c      	ldr	r2, [pc, #176]	; (80080b4 <TIM_Base_SetConfig+0x118>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d023      	beq.n	800804e <TIM_Base_SetConfig+0xb2>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a2b      	ldr	r2, [pc, #172]	; (80080b8 <TIM_Base_SetConfig+0x11c>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d01f      	beq.n	800804e <TIM_Base_SetConfig+0xb2>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a2a      	ldr	r2, [pc, #168]	; (80080bc <TIM_Base_SetConfig+0x120>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d01b      	beq.n	800804e <TIM_Base_SetConfig+0xb2>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a29      	ldr	r2, [pc, #164]	; (80080c0 <TIM_Base_SetConfig+0x124>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d017      	beq.n	800804e <TIM_Base_SetConfig+0xb2>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a28      	ldr	r2, [pc, #160]	; (80080c4 <TIM_Base_SetConfig+0x128>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d013      	beq.n	800804e <TIM_Base_SetConfig+0xb2>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a27      	ldr	r2, [pc, #156]	; (80080c8 <TIM_Base_SetConfig+0x12c>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d00f      	beq.n	800804e <TIM_Base_SetConfig+0xb2>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a26      	ldr	r2, [pc, #152]	; (80080cc <TIM_Base_SetConfig+0x130>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d00b      	beq.n	800804e <TIM_Base_SetConfig+0xb2>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a25      	ldr	r2, [pc, #148]	; (80080d0 <TIM_Base_SetConfig+0x134>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d007      	beq.n	800804e <TIM_Base_SetConfig+0xb2>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a24      	ldr	r2, [pc, #144]	; (80080d4 <TIM_Base_SetConfig+0x138>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d003      	beq.n	800804e <TIM_Base_SetConfig+0xb2>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a23      	ldr	r2, [pc, #140]	; (80080d8 <TIM_Base_SetConfig+0x13c>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d108      	bne.n	8008060 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	4313      	orrs	r3, r2
 800805e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	689a      	ldr	r2, [r3, #8]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a0a      	ldr	r2, [pc, #40]	; (80080b0 <TIM_Base_SetConfig+0x114>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d003      	beq.n	8008094 <TIM_Base_SetConfig+0xf8>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a0c      	ldr	r2, [pc, #48]	; (80080c0 <TIM_Base_SetConfig+0x124>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d103      	bne.n	800809c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	691a      	ldr	r2, [r3, #16]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	615a      	str	r2, [r3, #20]
}
 80080a2:	bf00      	nop
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	40010000 	.word	0x40010000
 80080b4:	40000400 	.word	0x40000400
 80080b8:	40000800 	.word	0x40000800
 80080bc:	40000c00 	.word	0x40000c00
 80080c0:	40010400 	.word	0x40010400
 80080c4:	40014000 	.word	0x40014000
 80080c8:	40014400 	.word	0x40014400
 80080cc:	40014800 	.word	0x40014800
 80080d0:	40001800 	.word	0x40001800
 80080d4:	40001c00 	.word	0x40001c00
 80080d8:	40002000 	.word	0x40002000

080080dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	f023 0201 	bic.w	r2, r3, #1
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	011b      	lsls	r3, r3, #4
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	4313      	orrs	r3, r2
 8008110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f023 030a 	bic.w	r3, r3, #10
 8008118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	4313      	orrs	r3, r2
 8008120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	621a      	str	r2, [r3, #32]
}
 800812e:	bf00      	nop
 8008130:	371c      	adds	r7, #28
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800813a:	b480      	push	{r7}
 800813c:	b087      	sub	sp, #28
 800813e:	af00      	add	r7, sp, #0
 8008140:	60f8      	str	r0, [r7, #12]
 8008142:	60b9      	str	r1, [r7, #8]
 8008144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	f023 0210 	bic.w	r2, r3, #16
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6a1b      	ldr	r3, [r3, #32]
 800815c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008164:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	031b      	lsls	r3, r3, #12
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	4313      	orrs	r3, r2
 800816e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008176:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	011b      	lsls	r3, r3, #4
 800817c:	693a      	ldr	r2, [r7, #16]
 800817e:	4313      	orrs	r3, r2
 8008180:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	621a      	str	r2, [r3, #32]
}
 800818e:	bf00      	nop
 8008190:	371c      	adds	r7, #28
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800819a:	b480      	push	{r7}
 800819c:	b085      	sub	sp, #20
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	f043 0307 	orr.w	r3, r3, #7
 80081bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	609a      	str	r2, [r3, #8]
}
 80081c4:	bf00      	nop
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b087      	sub	sp, #28
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
 80081dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	021a      	lsls	r2, r3, #8
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	431a      	orrs	r2, r3
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	609a      	str	r2, [r3, #8]
}
 8008204:	bf00      	nop
 8008206:	371c      	adds	r7, #28
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008220:	2b01      	cmp	r3, #1
 8008222:	d101      	bne.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008224:	2302      	movs	r3, #2
 8008226:	e05a      	b.n	80082de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2202      	movs	r2, #2
 8008234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800824e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	4313      	orrs	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a21      	ldr	r2, [pc, #132]	; (80082ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d022      	beq.n	80082b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008274:	d01d      	beq.n	80082b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a1d      	ldr	r2, [pc, #116]	; (80082f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d018      	beq.n	80082b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a1b      	ldr	r2, [pc, #108]	; (80082f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d013      	beq.n	80082b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a1a      	ldr	r2, [pc, #104]	; (80082f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d00e      	beq.n	80082b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a18      	ldr	r2, [pc, #96]	; (80082fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d009      	beq.n	80082b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a17      	ldr	r2, [pc, #92]	; (8008300 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d004      	beq.n	80082b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a15      	ldr	r2, [pc, #84]	; (8008304 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d10c      	bne.n	80082cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	40010000 	.word	0x40010000
 80082f0:	40000400 	.word	0x40000400
 80082f4:	40000800 	.word	0x40000800
 80082f8:	40000c00 	.word	0x40000c00
 80082fc:	40010400 	.word	0x40010400
 8008300:	40014000 	.word	0x40014000
 8008304:	40001800 	.word	0x40001800

08008308 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d101      	bne.n	8008342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e03f      	b.n	80083c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d106      	bne.n	800835c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7fa f84c 	bl	80023f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2224      	movs	r2, #36	; 0x24
 8008360:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68da      	ldr	r2, [r3, #12]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008372:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f829 	bl	80083cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	691a      	ldr	r2, [r3, #16]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008388:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	695a      	ldr	r2, [r3, #20]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008398:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68da      	ldr	r2, [r3, #12]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2220      	movs	r2, #32
 80083b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2220      	movs	r2, #32
 80083bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d0:	b085      	sub	sp, #20
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68da      	ldr	r2, [r3, #12]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	689a      	ldr	r2, [r3, #8]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	431a      	orrs	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	431a      	orrs	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	4313      	orrs	r3, r2
 8008402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800840e:	f023 030c 	bic.w	r3, r3, #12
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	6812      	ldr	r2, [r2, #0]
 8008416:	68f9      	ldr	r1, [r7, #12]
 8008418:	430b      	orrs	r3, r1
 800841a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	699a      	ldr	r2, [r3, #24]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	430a      	orrs	r2, r1
 8008430:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	69db      	ldr	r3, [r3, #28]
 8008436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800843a:	f040 818b 	bne.w	8008754 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4ac1      	ldr	r2, [pc, #772]	; (8008748 <UART_SetConfig+0x37c>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d005      	beq.n	8008454 <UART_SetConfig+0x88>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4abf      	ldr	r2, [pc, #764]	; (800874c <UART_SetConfig+0x380>)
 800844e:	4293      	cmp	r3, r2
 8008450:	f040 80bd 	bne.w	80085ce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008454:	f7fe fe18 	bl	8007088 <HAL_RCC_GetPCLK2Freq>
 8008458:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	461d      	mov	r5, r3
 800845e:	f04f 0600 	mov.w	r6, #0
 8008462:	46a8      	mov	r8, r5
 8008464:	46b1      	mov	r9, r6
 8008466:	eb18 0308 	adds.w	r3, r8, r8
 800846a:	eb49 0409 	adc.w	r4, r9, r9
 800846e:	4698      	mov	r8, r3
 8008470:	46a1      	mov	r9, r4
 8008472:	eb18 0805 	adds.w	r8, r8, r5
 8008476:	eb49 0906 	adc.w	r9, r9, r6
 800847a:	f04f 0100 	mov.w	r1, #0
 800847e:	f04f 0200 	mov.w	r2, #0
 8008482:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008486:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800848a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800848e:	4688      	mov	r8, r1
 8008490:	4691      	mov	r9, r2
 8008492:	eb18 0005 	adds.w	r0, r8, r5
 8008496:	eb49 0106 	adc.w	r1, r9, r6
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	461d      	mov	r5, r3
 80084a0:	f04f 0600 	mov.w	r6, #0
 80084a4:	196b      	adds	r3, r5, r5
 80084a6:	eb46 0406 	adc.w	r4, r6, r6
 80084aa:	461a      	mov	r2, r3
 80084ac:	4623      	mov	r3, r4
 80084ae:	f7f7 fe8b 	bl	80001c8 <__aeabi_uldivmod>
 80084b2:	4603      	mov	r3, r0
 80084b4:	460c      	mov	r4, r1
 80084b6:	461a      	mov	r2, r3
 80084b8:	4ba5      	ldr	r3, [pc, #660]	; (8008750 <UART_SetConfig+0x384>)
 80084ba:	fba3 2302 	umull	r2, r3, r3, r2
 80084be:	095b      	lsrs	r3, r3, #5
 80084c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	461d      	mov	r5, r3
 80084c8:	f04f 0600 	mov.w	r6, #0
 80084cc:	46a9      	mov	r9, r5
 80084ce:	46b2      	mov	sl, r6
 80084d0:	eb19 0309 	adds.w	r3, r9, r9
 80084d4:	eb4a 040a 	adc.w	r4, sl, sl
 80084d8:	4699      	mov	r9, r3
 80084da:	46a2      	mov	sl, r4
 80084dc:	eb19 0905 	adds.w	r9, r9, r5
 80084e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80084e4:	f04f 0100 	mov.w	r1, #0
 80084e8:	f04f 0200 	mov.w	r2, #0
 80084ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80084f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80084f8:	4689      	mov	r9, r1
 80084fa:	4692      	mov	sl, r2
 80084fc:	eb19 0005 	adds.w	r0, r9, r5
 8008500:	eb4a 0106 	adc.w	r1, sl, r6
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	461d      	mov	r5, r3
 800850a:	f04f 0600 	mov.w	r6, #0
 800850e:	196b      	adds	r3, r5, r5
 8008510:	eb46 0406 	adc.w	r4, r6, r6
 8008514:	461a      	mov	r2, r3
 8008516:	4623      	mov	r3, r4
 8008518:	f7f7 fe56 	bl	80001c8 <__aeabi_uldivmod>
 800851c:	4603      	mov	r3, r0
 800851e:	460c      	mov	r4, r1
 8008520:	461a      	mov	r2, r3
 8008522:	4b8b      	ldr	r3, [pc, #556]	; (8008750 <UART_SetConfig+0x384>)
 8008524:	fba3 1302 	umull	r1, r3, r3, r2
 8008528:	095b      	lsrs	r3, r3, #5
 800852a:	2164      	movs	r1, #100	; 0x64
 800852c:	fb01 f303 	mul.w	r3, r1, r3
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	00db      	lsls	r3, r3, #3
 8008534:	3332      	adds	r3, #50	; 0x32
 8008536:	4a86      	ldr	r2, [pc, #536]	; (8008750 <UART_SetConfig+0x384>)
 8008538:	fba2 2303 	umull	r2, r3, r2, r3
 800853c:	095b      	lsrs	r3, r3, #5
 800853e:	005b      	lsls	r3, r3, #1
 8008540:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008544:	4498      	add	r8, r3
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	461d      	mov	r5, r3
 800854a:	f04f 0600 	mov.w	r6, #0
 800854e:	46a9      	mov	r9, r5
 8008550:	46b2      	mov	sl, r6
 8008552:	eb19 0309 	adds.w	r3, r9, r9
 8008556:	eb4a 040a 	adc.w	r4, sl, sl
 800855a:	4699      	mov	r9, r3
 800855c:	46a2      	mov	sl, r4
 800855e:	eb19 0905 	adds.w	r9, r9, r5
 8008562:	eb4a 0a06 	adc.w	sl, sl, r6
 8008566:	f04f 0100 	mov.w	r1, #0
 800856a:	f04f 0200 	mov.w	r2, #0
 800856e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008572:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008576:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800857a:	4689      	mov	r9, r1
 800857c:	4692      	mov	sl, r2
 800857e:	eb19 0005 	adds.w	r0, r9, r5
 8008582:	eb4a 0106 	adc.w	r1, sl, r6
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	461d      	mov	r5, r3
 800858c:	f04f 0600 	mov.w	r6, #0
 8008590:	196b      	adds	r3, r5, r5
 8008592:	eb46 0406 	adc.w	r4, r6, r6
 8008596:	461a      	mov	r2, r3
 8008598:	4623      	mov	r3, r4
 800859a:	f7f7 fe15 	bl	80001c8 <__aeabi_uldivmod>
 800859e:	4603      	mov	r3, r0
 80085a0:	460c      	mov	r4, r1
 80085a2:	461a      	mov	r2, r3
 80085a4:	4b6a      	ldr	r3, [pc, #424]	; (8008750 <UART_SetConfig+0x384>)
 80085a6:	fba3 1302 	umull	r1, r3, r3, r2
 80085aa:	095b      	lsrs	r3, r3, #5
 80085ac:	2164      	movs	r1, #100	; 0x64
 80085ae:	fb01 f303 	mul.w	r3, r1, r3
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	00db      	lsls	r3, r3, #3
 80085b6:	3332      	adds	r3, #50	; 0x32
 80085b8:	4a65      	ldr	r2, [pc, #404]	; (8008750 <UART_SetConfig+0x384>)
 80085ba:	fba2 2303 	umull	r2, r3, r2, r3
 80085be:	095b      	lsrs	r3, r3, #5
 80085c0:	f003 0207 	and.w	r2, r3, #7
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4442      	add	r2, r8
 80085ca:	609a      	str	r2, [r3, #8]
 80085cc:	e26f      	b.n	8008aae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085ce:	f7fe fd47 	bl	8007060 <HAL_RCC_GetPCLK1Freq>
 80085d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	461d      	mov	r5, r3
 80085d8:	f04f 0600 	mov.w	r6, #0
 80085dc:	46a8      	mov	r8, r5
 80085de:	46b1      	mov	r9, r6
 80085e0:	eb18 0308 	adds.w	r3, r8, r8
 80085e4:	eb49 0409 	adc.w	r4, r9, r9
 80085e8:	4698      	mov	r8, r3
 80085ea:	46a1      	mov	r9, r4
 80085ec:	eb18 0805 	adds.w	r8, r8, r5
 80085f0:	eb49 0906 	adc.w	r9, r9, r6
 80085f4:	f04f 0100 	mov.w	r1, #0
 80085f8:	f04f 0200 	mov.w	r2, #0
 80085fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008600:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008604:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008608:	4688      	mov	r8, r1
 800860a:	4691      	mov	r9, r2
 800860c:	eb18 0005 	adds.w	r0, r8, r5
 8008610:	eb49 0106 	adc.w	r1, r9, r6
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	461d      	mov	r5, r3
 800861a:	f04f 0600 	mov.w	r6, #0
 800861e:	196b      	adds	r3, r5, r5
 8008620:	eb46 0406 	adc.w	r4, r6, r6
 8008624:	461a      	mov	r2, r3
 8008626:	4623      	mov	r3, r4
 8008628:	f7f7 fdce 	bl	80001c8 <__aeabi_uldivmod>
 800862c:	4603      	mov	r3, r0
 800862e:	460c      	mov	r4, r1
 8008630:	461a      	mov	r2, r3
 8008632:	4b47      	ldr	r3, [pc, #284]	; (8008750 <UART_SetConfig+0x384>)
 8008634:	fba3 2302 	umull	r2, r3, r3, r2
 8008638:	095b      	lsrs	r3, r3, #5
 800863a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	461d      	mov	r5, r3
 8008642:	f04f 0600 	mov.w	r6, #0
 8008646:	46a9      	mov	r9, r5
 8008648:	46b2      	mov	sl, r6
 800864a:	eb19 0309 	adds.w	r3, r9, r9
 800864e:	eb4a 040a 	adc.w	r4, sl, sl
 8008652:	4699      	mov	r9, r3
 8008654:	46a2      	mov	sl, r4
 8008656:	eb19 0905 	adds.w	r9, r9, r5
 800865a:	eb4a 0a06 	adc.w	sl, sl, r6
 800865e:	f04f 0100 	mov.w	r1, #0
 8008662:	f04f 0200 	mov.w	r2, #0
 8008666:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800866a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800866e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008672:	4689      	mov	r9, r1
 8008674:	4692      	mov	sl, r2
 8008676:	eb19 0005 	adds.w	r0, r9, r5
 800867a:	eb4a 0106 	adc.w	r1, sl, r6
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	461d      	mov	r5, r3
 8008684:	f04f 0600 	mov.w	r6, #0
 8008688:	196b      	adds	r3, r5, r5
 800868a:	eb46 0406 	adc.w	r4, r6, r6
 800868e:	461a      	mov	r2, r3
 8008690:	4623      	mov	r3, r4
 8008692:	f7f7 fd99 	bl	80001c8 <__aeabi_uldivmod>
 8008696:	4603      	mov	r3, r0
 8008698:	460c      	mov	r4, r1
 800869a:	461a      	mov	r2, r3
 800869c:	4b2c      	ldr	r3, [pc, #176]	; (8008750 <UART_SetConfig+0x384>)
 800869e:	fba3 1302 	umull	r1, r3, r3, r2
 80086a2:	095b      	lsrs	r3, r3, #5
 80086a4:	2164      	movs	r1, #100	; 0x64
 80086a6:	fb01 f303 	mul.w	r3, r1, r3
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	00db      	lsls	r3, r3, #3
 80086ae:	3332      	adds	r3, #50	; 0x32
 80086b0:	4a27      	ldr	r2, [pc, #156]	; (8008750 <UART_SetConfig+0x384>)
 80086b2:	fba2 2303 	umull	r2, r3, r2, r3
 80086b6:	095b      	lsrs	r3, r3, #5
 80086b8:	005b      	lsls	r3, r3, #1
 80086ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80086be:	4498      	add	r8, r3
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	461d      	mov	r5, r3
 80086c4:	f04f 0600 	mov.w	r6, #0
 80086c8:	46a9      	mov	r9, r5
 80086ca:	46b2      	mov	sl, r6
 80086cc:	eb19 0309 	adds.w	r3, r9, r9
 80086d0:	eb4a 040a 	adc.w	r4, sl, sl
 80086d4:	4699      	mov	r9, r3
 80086d6:	46a2      	mov	sl, r4
 80086d8:	eb19 0905 	adds.w	r9, r9, r5
 80086dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80086e0:	f04f 0100 	mov.w	r1, #0
 80086e4:	f04f 0200 	mov.w	r2, #0
 80086e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086f4:	4689      	mov	r9, r1
 80086f6:	4692      	mov	sl, r2
 80086f8:	eb19 0005 	adds.w	r0, r9, r5
 80086fc:	eb4a 0106 	adc.w	r1, sl, r6
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	461d      	mov	r5, r3
 8008706:	f04f 0600 	mov.w	r6, #0
 800870a:	196b      	adds	r3, r5, r5
 800870c:	eb46 0406 	adc.w	r4, r6, r6
 8008710:	461a      	mov	r2, r3
 8008712:	4623      	mov	r3, r4
 8008714:	f7f7 fd58 	bl	80001c8 <__aeabi_uldivmod>
 8008718:	4603      	mov	r3, r0
 800871a:	460c      	mov	r4, r1
 800871c:	461a      	mov	r2, r3
 800871e:	4b0c      	ldr	r3, [pc, #48]	; (8008750 <UART_SetConfig+0x384>)
 8008720:	fba3 1302 	umull	r1, r3, r3, r2
 8008724:	095b      	lsrs	r3, r3, #5
 8008726:	2164      	movs	r1, #100	; 0x64
 8008728:	fb01 f303 	mul.w	r3, r1, r3
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	00db      	lsls	r3, r3, #3
 8008730:	3332      	adds	r3, #50	; 0x32
 8008732:	4a07      	ldr	r2, [pc, #28]	; (8008750 <UART_SetConfig+0x384>)
 8008734:	fba2 2303 	umull	r2, r3, r2, r3
 8008738:	095b      	lsrs	r3, r3, #5
 800873a:	f003 0207 	and.w	r2, r3, #7
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4442      	add	r2, r8
 8008744:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008746:	e1b2      	b.n	8008aae <UART_SetConfig+0x6e2>
 8008748:	40011000 	.word	0x40011000
 800874c:	40011400 	.word	0x40011400
 8008750:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4ad7      	ldr	r2, [pc, #860]	; (8008ab8 <UART_SetConfig+0x6ec>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d005      	beq.n	800876a <UART_SetConfig+0x39e>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4ad6      	ldr	r2, [pc, #856]	; (8008abc <UART_SetConfig+0x6f0>)
 8008764:	4293      	cmp	r3, r2
 8008766:	f040 80d1 	bne.w	800890c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800876a:	f7fe fc8d 	bl	8007088 <HAL_RCC_GetPCLK2Freq>
 800876e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	469a      	mov	sl, r3
 8008774:	f04f 0b00 	mov.w	fp, #0
 8008778:	46d0      	mov	r8, sl
 800877a:	46d9      	mov	r9, fp
 800877c:	eb18 0308 	adds.w	r3, r8, r8
 8008780:	eb49 0409 	adc.w	r4, r9, r9
 8008784:	4698      	mov	r8, r3
 8008786:	46a1      	mov	r9, r4
 8008788:	eb18 080a 	adds.w	r8, r8, sl
 800878c:	eb49 090b 	adc.w	r9, r9, fp
 8008790:	f04f 0100 	mov.w	r1, #0
 8008794:	f04f 0200 	mov.w	r2, #0
 8008798:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800879c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80087a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80087a4:	4688      	mov	r8, r1
 80087a6:	4691      	mov	r9, r2
 80087a8:	eb1a 0508 	adds.w	r5, sl, r8
 80087ac:	eb4b 0609 	adc.w	r6, fp, r9
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	4619      	mov	r1, r3
 80087b6:	f04f 0200 	mov.w	r2, #0
 80087ba:	f04f 0300 	mov.w	r3, #0
 80087be:	f04f 0400 	mov.w	r4, #0
 80087c2:	0094      	lsls	r4, r2, #2
 80087c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80087c8:	008b      	lsls	r3, r1, #2
 80087ca:	461a      	mov	r2, r3
 80087cc:	4623      	mov	r3, r4
 80087ce:	4628      	mov	r0, r5
 80087d0:	4631      	mov	r1, r6
 80087d2:	f7f7 fcf9 	bl	80001c8 <__aeabi_uldivmod>
 80087d6:	4603      	mov	r3, r0
 80087d8:	460c      	mov	r4, r1
 80087da:	461a      	mov	r2, r3
 80087dc:	4bb8      	ldr	r3, [pc, #736]	; (8008ac0 <UART_SetConfig+0x6f4>)
 80087de:	fba3 2302 	umull	r2, r3, r3, r2
 80087e2:	095b      	lsrs	r3, r3, #5
 80087e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	469b      	mov	fp, r3
 80087ec:	f04f 0c00 	mov.w	ip, #0
 80087f0:	46d9      	mov	r9, fp
 80087f2:	46e2      	mov	sl, ip
 80087f4:	eb19 0309 	adds.w	r3, r9, r9
 80087f8:	eb4a 040a 	adc.w	r4, sl, sl
 80087fc:	4699      	mov	r9, r3
 80087fe:	46a2      	mov	sl, r4
 8008800:	eb19 090b 	adds.w	r9, r9, fp
 8008804:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008808:	f04f 0100 	mov.w	r1, #0
 800880c:	f04f 0200 	mov.w	r2, #0
 8008810:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008814:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008818:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800881c:	4689      	mov	r9, r1
 800881e:	4692      	mov	sl, r2
 8008820:	eb1b 0509 	adds.w	r5, fp, r9
 8008824:	eb4c 060a 	adc.w	r6, ip, sl
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	4619      	mov	r1, r3
 800882e:	f04f 0200 	mov.w	r2, #0
 8008832:	f04f 0300 	mov.w	r3, #0
 8008836:	f04f 0400 	mov.w	r4, #0
 800883a:	0094      	lsls	r4, r2, #2
 800883c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008840:	008b      	lsls	r3, r1, #2
 8008842:	461a      	mov	r2, r3
 8008844:	4623      	mov	r3, r4
 8008846:	4628      	mov	r0, r5
 8008848:	4631      	mov	r1, r6
 800884a:	f7f7 fcbd 	bl	80001c8 <__aeabi_uldivmod>
 800884e:	4603      	mov	r3, r0
 8008850:	460c      	mov	r4, r1
 8008852:	461a      	mov	r2, r3
 8008854:	4b9a      	ldr	r3, [pc, #616]	; (8008ac0 <UART_SetConfig+0x6f4>)
 8008856:	fba3 1302 	umull	r1, r3, r3, r2
 800885a:	095b      	lsrs	r3, r3, #5
 800885c:	2164      	movs	r1, #100	; 0x64
 800885e:	fb01 f303 	mul.w	r3, r1, r3
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	011b      	lsls	r3, r3, #4
 8008866:	3332      	adds	r3, #50	; 0x32
 8008868:	4a95      	ldr	r2, [pc, #596]	; (8008ac0 <UART_SetConfig+0x6f4>)
 800886a:	fba2 2303 	umull	r2, r3, r2, r3
 800886e:	095b      	lsrs	r3, r3, #5
 8008870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008874:	4498      	add	r8, r3
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	469b      	mov	fp, r3
 800887a:	f04f 0c00 	mov.w	ip, #0
 800887e:	46d9      	mov	r9, fp
 8008880:	46e2      	mov	sl, ip
 8008882:	eb19 0309 	adds.w	r3, r9, r9
 8008886:	eb4a 040a 	adc.w	r4, sl, sl
 800888a:	4699      	mov	r9, r3
 800888c:	46a2      	mov	sl, r4
 800888e:	eb19 090b 	adds.w	r9, r9, fp
 8008892:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008896:	f04f 0100 	mov.w	r1, #0
 800889a:	f04f 0200 	mov.w	r2, #0
 800889e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80088a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80088aa:	4689      	mov	r9, r1
 80088ac:	4692      	mov	sl, r2
 80088ae:	eb1b 0509 	adds.w	r5, fp, r9
 80088b2:	eb4c 060a 	adc.w	r6, ip, sl
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	4619      	mov	r1, r3
 80088bc:	f04f 0200 	mov.w	r2, #0
 80088c0:	f04f 0300 	mov.w	r3, #0
 80088c4:	f04f 0400 	mov.w	r4, #0
 80088c8:	0094      	lsls	r4, r2, #2
 80088ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80088ce:	008b      	lsls	r3, r1, #2
 80088d0:	461a      	mov	r2, r3
 80088d2:	4623      	mov	r3, r4
 80088d4:	4628      	mov	r0, r5
 80088d6:	4631      	mov	r1, r6
 80088d8:	f7f7 fc76 	bl	80001c8 <__aeabi_uldivmod>
 80088dc:	4603      	mov	r3, r0
 80088de:	460c      	mov	r4, r1
 80088e0:	461a      	mov	r2, r3
 80088e2:	4b77      	ldr	r3, [pc, #476]	; (8008ac0 <UART_SetConfig+0x6f4>)
 80088e4:	fba3 1302 	umull	r1, r3, r3, r2
 80088e8:	095b      	lsrs	r3, r3, #5
 80088ea:	2164      	movs	r1, #100	; 0x64
 80088ec:	fb01 f303 	mul.w	r3, r1, r3
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	011b      	lsls	r3, r3, #4
 80088f4:	3332      	adds	r3, #50	; 0x32
 80088f6:	4a72      	ldr	r2, [pc, #456]	; (8008ac0 <UART_SetConfig+0x6f4>)
 80088f8:	fba2 2303 	umull	r2, r3, r2, r3
 80088fc:	095b      	lsrs	r3, r3, #5
 80088fe:	f003 020f 	and.w	r2, r3, #15
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4442      	add	r2, r8
 8008908:	609a      	str	r2, [r3, #8]
 800890a:	e0d0      	b.n	8008aae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800890c:	f7fe fba8 	bl	8007060 <HAL_RCC_GetPCLK1Freq>
 8008910:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	469a      	mov	sl, r3
 8008916:	f04f 0b00 	mov.w	fp, #0
 800891a:	46d0      	mov	r8, sl
 800891c:	46d9      	mov	r9, fp
 800891e:	eb18 0308 	adds.w	r3, r8, r8
 8008922:	eb49 0409 	adc.w	r4, r9, r9
 8008926:	4698      	mov	r8, r3
 8008928:	46a1      	mov	r9, r4
 800892a:	eb18 080a 	adds.w	r8, r8, sl
 800892e:	eb49 090b 	adc.w	r9, r9, fp
 8008932:	f04f 0100 	mov.w	r1, #0
 8008936:	f04f 0200 	mov.w	r2, #0
 800893a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800893e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008942:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008946:	4688      	mov	r8, r1
 8008948:	4691      	mov	r9, r2
 800894a:	eb1a 0508 	adds.w	r5, sl, r8
 800894e:	eb4b 0609 	adc.w	r6, fp, r9
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	4619      	mov	r1, r3
 8008958:	f04f 0200 	mov.w	r2, #0
 800895c:	f04f 0300 	mov.w	r3, #0
 8008960:	f04f 0400 	mov.w	r4, #0
 8008964:	0094      	lsls	r4, r2, #2
 8008966:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800896a:	008b      	lsls	r3, r1, #2
 800896c:	461a      	mov	r2, r3
 800896e:	4623      	mov	r3, r4
 8008970:	4628      	mov	r0, r5
 8008972:	4631      	mov	r1, r6
 8008974:	f7f7 fc28 	bl	80001c8 <__aeabi_uldivmod>
 8008978:	4603      	mov	r3, r0
 800897a:	460c      	mov	r4, r1
 800897c:	461a      	mov	r2, r3
 800897e:	4b50      	ldr	r3, [pc, #320]	; (8008ac0 <UART_SetConfig+0x6f4>)
 8008980:	fba3 2302 	umull	r2, r3, r3, r2
 8008984:	095b      	lsrs	r3, r3, #5
 8008986:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	469b      	mov	fp, r3
 800898e:	f04f 0c00 	mov.w	ip, #0
 8008992:	46d9      	mov	r9, fp
 8008994:	46e2      	mov	sl, ip
 8008996:	eb19 0309 	adds.w	r3, r9, r9
 800899a:	eb4a 040a 	adc.w	r4, sl, sl
 800899e:	4699      	mov	r9, r3
 80089a0:	46a2      	mov	sl, r4
 80089a2:	eb19 090b 	adds.w	r9, r9, fp
 80089a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80089aa:	f04f 0100 	mov.w	r1, #0
 80089ae:	f04f 0200 	mov.w	r2, #0
 80089b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80089ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80089be:	4689      	mov	r9, r1
 80089c0:	4692      	mov	sl, r2
 80089c2:	eb1b 0509 	adds.w	r5, fp, r9
 80089c6:	eb4c 060a 	adc.w	r6, ip, sl
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	4619      	mov	r1, r3
 80089d0:	f04f 0200 	mov.w	r2, #0
 80089d4:	f04f 0300 	mov.w	r3, #0
 80089d8:	f04f 0400 	mov.w	r4, #0
 80089dc:	0094      	lsls	r4, r2, #2
 80089de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80089e2:	008b      	lsls	r3, r1, #2
 80089e4:	461a      	mov	r2, r3
 80089e6:	4623      	mov	r3, r4
 80089e8:	4628      	mov	r0, r5
 80089ea:	4631      	mov	r1, r6
 80089ec:	f7f7 fbec 	bl	80001c8 <__aeabi_uldivmod>
 80089f0:	4603      	mov	r3, r0
 80089f2:	460c      	mov	r4, r1
 80089f4:	461a      	mov	r2, r3
 80089f6:	4b32      	ldr	r3, [pc, #200]	; (8008ac0 <UART_SetConfig+0x6f4>)
 80089f8:	fba3 1302 	umull	r1, r3, r3, r2
 80089fc:	095b      	lsrs	r3, r3, #5
 80089fe:	2164      	movs	r1, #100	; 0x64
 8008a00:	fb01 f303 	mul.w	r3, r1, r3
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	011b      	lsls	r3, r3, #4
 8008a08:	3332      	adds	r3, #50	; 0x32
 8008a0a:	4a2d      	ldr	r2, [pc, #180]	; (8008ac0 <UART_SetConfig+0x6f4>)
 8008a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a10:	095b      	lsrs	r3, r3, #5
 8008a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a16:	4498      	add	r8, r3
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	469b      	mov	fp, r3
 8008a1c:	f04f 0c00 	mov.w	ip, #0
 8008a20:	46d9      	mov	r9, fp
 8008a22:	46e2      	mov	sl, ip
 8008a24:	eb19 0309 	adds.w	r3, r9, r9
 8008a28:	eb4a 040a 	adc.w	r4, sl, sl
 8008a2c:	4699      	mov	r9, r3
 8008a2e:	46a2      	mov	sl, r4
 8008a30:	eb19 090b 	adds.w	r9, r9, fp
 8008a34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008a38:	f04f 0100 	mov.w	r1, #0
 8008a3c:	f04f 0200 	mov.w	r2, #0
 8008a40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a4c:	4689      	mov	r9, r1
 8008a4e:	4692      	mov	sl, r2
 8008a50:	eb1b 0509 	adds.w	r5, fp, r9
 8008a54:	eb4c 060a 	adc.w	r6, ip, sl
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	f04f 0200 	mov.w	r2, #0
 8008a62:	f04f 0300 	mov.w	r3, #0
 8008a66:	f04f 0400 	mov.w	r4, #0
 8008a6a:	0094      	lsls	r4, r2, #2
 8008a6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008a70:	008b      	lsls	r3, r1, #2
 8008a72:	461a      	mov	r2, r3
 8008a74:	4623      	mov	r3, r4
 8008a76:	4628      	mov	r0, r5
 8008a78:	4631      	mov	r1, r6
 8008a7a:	f7f7 fba5 	bl	80001c8 <__aeabi_uldivmod>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	460c      	mov	r4, r1
 8008a82:	461a      	mov	r2, r3
 8008a84:	4b0e      	ldr	r3, [pc, #56]	; (8008ac0 <UART_SetConfig+0x6f4>)
 8008a86:	fba3 1302 	umull	r1, r3, r3, r2
 8008a8a:	095b      	lsrs	r3, r3, #5
 8008a8c:	2164      	movs	r1, #100	; 0x64
 8008a8e:	fb01 f303 	mul.w	r3, r1, r3
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	011b      	lsls	r3, r3, #4
 8008a96:	3332      	adds	r3, #50	; 0x32
 8008a98:	4a09      	ldr	r2, [pc, #36]	; (8008ac0 <UART_SetConfig+0x6f4>)
 8008a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a9e:	095b      	lsrs	r3, r3, #5
 8008aa0:	f003 020f 	and.w	r2, r3, #15
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4442      	add	r2, r8
 8008aaa:	609a      	str	r2, [r3, #8]
}
 8008aac:	e7ff      	b.n	8008aae <UART_SetConfig+0x6e2>
 8008aae:	bf00      	nop
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab8:	40011000 	.word	0x40011000
 8008abc:	40011400 	.word	0x40011400
 8008ac0:	51eb851f 	.word	0x51eb851f

08008ac4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ac4:	b084      	sub	sp, #16
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b084      	sub	sp, #16
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	f107 001c 	add.w	r0, r7, #28
 8008ad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d122      	bne.n	8008b22 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d105      	bne.n	8008b16 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f001 fab4 	bl	800a084 <USB_CoreReset>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	73fb      	strb	r3, [r7, #15]
 8008b20:	e01a      	b.n	8008b58 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f001 faa8 	bl	800a084 <USB_CoreReset>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d106      	bne.n	8008b4c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	639a      	str	r2, [r3, #56]	; 0x38
 8008b4a:	e005      	b.n	8008b58 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d10b      	bne.n	8008b76 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	f043 0206 	orr.w	r2, r3, #6
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	f043 0220 	orr.w	r2, r3, #32
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b82:	b004      	add	sp, #16
 8008b84:	4770      	bx	lr
	...

08008b88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b087      	sub	sp, #28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	4613      	mov	r3, r2
 8008b94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008b96:	79fb      	ldrb	r3, [r7, #7]
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d165      	bne.n	8008c68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	4a41      	ldr	r2, [pc, #260]	; (8008ca4 <USB_SetTurnaroundTime+0x11c>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d906      	bls.n	8008bb2 <USB_SetTurnaroundTime+0x2a>
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	4a40      	ldr	r2, [pc, #256]	; (8008ca8 <USB_SetTurnaroundTime+0x120>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d802      	bhi.n	8008bb2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008bac:	230f      	movs	r3, #15
 8008bae:	617b      	str	r3, [r7, #20]
 8008bb0:	e062      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	4a3c      	ldr	r2, [pc, #240]	; (8008ca8 <USB_SetTurnaroundTime+0x120>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d906      	bls.n	8008bc8 <USB_SetTurnaroundTime+0x40>
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	4a3b      	ldr	r2, [pc, #236]	; (8008cac <USB_SetTurnaroundTime+0x124>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d802      	bhi.n	8008bc8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008bc2:	230e      	movs	r3, #14
 8008bc4:	617b      	str	r3, [r7, #20]
 8008bc6:	e057      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	4a38      	ldr	r2, [pc, #224]	; (8008cac <USB_SetTurnaroundTime+0x124>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d906      	bls.n	8008bde <USB_SetTurnaroundTime+0x56>
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	4a37      	ldr	r2, [pc, #220]	; (8008cb0 <USB_SetTurnaroundTime+0x128>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d802      	bhi.n	8008bde <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008bd8:	230d      	movs	r3, #13
 8008bda:	617b      	str	r3, [r7, #20]
 8008bdc:	e04c      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	4a33      	ldr	r2, [pc, #204]	; (8008cb0 <USB_SetTurnaroundTime+0x128>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d906      	bls.n	8008bf4 <USB_SetTurnaroundTime+0x6c>
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	4a32      	ldr	r2, [pc, #200]	; (8008cb4 <USB_SetTurnaroundTime+0x12c>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d802      	bhi.n	8008bf4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008bee:	230c      	movs	r3, #12
 8008bf0:	617b      	str	r3, [r7, #20]
 8008bf2:	e041      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	4a2f      	ldr	r2, [pc, #188]	; (8008cb4 <USB_SetTurnaroundTime+0x12c>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d906      	bls.n	8008c0a <USB_SetTurnaroundTime+0x82>
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	4a2e      	ldr	r2, [pc, #184]	; (8008cb8 <USB_SetTurnaroundTime+0x130>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d802      	bhi.n	8008c0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008c04:	230b      	movs	r3, #11
 8008c06:	617b      	str	r3, [r7, #20]
 8008c08:	e036      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	4a2a      	ldr	r2, [pc, #168]	; (8008cb8 <USB_SetTurnaroundTime+0x130>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d906      	bls.n	8008c20 <USB_SetTurnaroundTime+0x98>
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	4a29      	ldr	r2, [pc, #164]	; (8008cbc <USB_SetTurnaroundTime+0x134>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d802      	bhi.n	8008c20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008c1a:	230a      	movs	r3, #10
 8008c1c:	617b      	str	r3, [r7, #20]
 8008c1e:	e02b      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	4a26      	ldr	r2, [pc, #152]	; (8008cbc <USB_SetTurnaroundTime+0x134>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d906      	bls.n	8008c36 <USB_SetTurnaroundTime+0xae>
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	4a25      	ldr	r2, [pc, #148]	; (8008cc0 <USB_SetTurnaroundTime+0x138>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d802      	bhi.n	8008c36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008c30:	2309      	movs	r3, #9
 8008c32:	617b      	str	r3, [r7, #20]
 8008c34:	e020      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	4a21      	ldr	r2, [pc, #132]	; (8008cc0 <USB_SetTurnaroundTime+0x138>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d906      	bls.n	8008c4c <USB_SetTurnaroundTime+0xc4>
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	4a20      	ldr	r2, [pc, #128]	; (8008cc4 <USB_SetTurnaroundTime+0x13c>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d802      	bhi.n	8008c4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008c46:	2308      	movs	r3, #8
 8008c48:	617b      	str	r3, [r7, #20]
 8008c4a:	e015      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	4a1d      	ldr	r2, [pc, #116]	; (8008cc4 <USB_SetTurnaroundTime+0x13c>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d906      	bls.n	8008c62 <USB_SetTurnaroundTime+0xda>
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	4a1c      	ldr	r2, [pc, #112]	; (8008cc8 <USB_SetTurnaroundTime+0x140>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d802      	bhi.n	8008c62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008c5c:	2307      	movs	r3, #7
 8008c5e:	617b      	str	r3, [r7, #20]
 8008c60:	e00a      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008c62:	2306      	movs	r3, #6
 8008c64:	617b      	str	r3, [r7, #20]
 8008c66:	e007      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008c68:	79fb      	ldrb	r3, [r7, #7]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d102      	bne.n	8008c74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008c6e:	2309      	movs	r3, #9
 8008c70:	617b      	str	r3, [r7, #20]
 8008c72:	e001      	b.n	8008c78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008c74:	2309      	movs	r3, #9
 8008c76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	68da      	ldr	r2, [r3, #12]
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	029b      	lsls	r3, r3, #10
 8008c8c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008c90:	431a      	orrs	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	371c      	adds	r7, #28
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	00d8acbf 	.word	0x00d8acbf
 8008ca8:	00e4e1bf 	.word	0x00e4e1bf
 8008cac:	00f423ff 	.word	0x00f423ff
 8008cb0:	0106737f 	.word	0x0106737f
 8008cb4:	011a499f 	.word	0x011a499f
 8008cb8:	01312cff 	.word	0x01312cff
 8008cbc:	014ca43f 	.word	0x014ca43f
 8008cc0:	016e35ff 	.word	0x016e35ff
 8008cc4:	01a6ab1f 	.word	0x01a6ab1f
 8008cc8:	01e847ff 	.word	0x01e847ff

08008ccc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	f043 0201 	orr.w	r2, r3, #1
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b083      	sub	sp, #12
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	f023 0201 	bic.w	r2, r3, #1
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008d28:	78fb      	ldrb	r3, [r7, #3]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d106      	bne.n	8008d3c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	60da      	str	r2, [r3, #12]
 8008d3a:	e00b      	b.n	8008d54 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d3c:	78fb      	ldrb	r3, [r7, #3]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d106      	bne.n	8008d50 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	60da      	str	r2, [r3, #12]
 8008d4e:	e001      	b.n	8008d54 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e003      	b.n	8008d5c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008d54:	2032      	movs	r0, #50	; 0x32
 8008d56:	f7f9 fc67 	bl	8002628 <HAL_Delay>

  return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d64:	b084      	sub	sp, #16
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b086      	sub	sp, #24
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d7e:	2300      	movs	r3, #0
 8008d80:	613b      	str	r3, [r7, #16]
 8008d82:	e009      	b.n	8008d98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	3340      	adds	r3, #64	; 0x40
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4413      	add	r3, r2
 8008d8e:	2200      	movs	r2, #0
 8008d90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	3301      	adds	r3, #1
 8008d96:	613b      	str	r3, [r7, #16]
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	2b0e      	cmp	r3, #14
 8008d9c:	d9f2      	bls.n	8008d84 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d11c      	bne.n	8008dde <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008db2:	f043 0302 	orr.w	r3, r3, #2
 8008db6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dbc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	639a      	str	r2, [r3, #56]	; 0x38
 8008ddc:	e00b      	b.n	8008df6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	2300      	movs	r3, #0
 8008e00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e08:	4619      	mov	r1, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e10:	461a      	mov	r2, r3
 8008e12:	680b      	ldr	r3, [r1, #0]
 8008e14:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d10c      	bne.n	8008e36 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d104      	bne.n	8008e2c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008e22:	2100      	movs	r1, #0
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f949 	bl	80090bc <USB_SetDevSpeed>
 8008e2a:	e008      	b.n	8008e3e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008e2c:	2101      	movs	r1, #1
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f944 	bl	80090bc <USB_SetDevSpeed>
 8008e34:	e003      	b.n	8008e3e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008e36:	2103      	movs	r1, #3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f93f 	bl	80090bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e3e:	2110      	movs	r1, #16
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f8f3 	bl	800902c <USB_FlushTxFifo>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f911 	bl	8009078 <USB_FlushRxFifo>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d001      	beq.n	8008e60 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e66:	461a      	mov	r2, r3
 8008e68:	2300      	movs	r3, #0
 8008e6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e72:	461a      	mov	r2, r3
 8008e74:	2300      	movs	r3, #0
 8008e76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e7e:	461a      	mov	r2, r3
 8008e80:	2300      	movs	r3, #0
 8008e82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e84:	2300      	movs	r3, #0
 8008e86:	613b      	str	r3, [r7, #16]
 8008e88:	e043      	b.n	8008f12 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	015a      	lsls	r2, r3, #5
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ea0:	d118      	bne.n	8008ed4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10a      	bne.n	8008ebe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	015a      	lsls	r2, r3, #5
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	4413      	add	r3, r2
 8008eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008eba:	6013      	str	r3, [r2, #0]
 8008ebc:	e013      	b.n	8008ee6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	015a      	lsls	r2, r3, #5
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eca:	461a      	mov	r2, r3
 8008ecc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ed0:	6013      	str	r3, [r2, #0]
 8008ed2:	e008      	b.n	8008ee6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	015a      	lsls	r2, r3, #5
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	4413      	add	r3, r2
 8008eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	015a      	lsls	r2, r3, #5
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4413      	add	r3, r2
 8008f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f04:	461a      	mov	r2, r3
 8008f06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	613b      	str	r3, [r7, #16]
 8008f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d3b7      	bcc.n	8008e8a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	613b      	str	r3, [r7, #16]
 8008f1e:	e043      	b.n	8008fa8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	015a      	lsls	r2, r3, #5
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	4413      	add	r3, r2
 8008f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f36:	d118      	bne.n	8008f6a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10a      	bne.n	8008f54 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	015a      	lsls	r2, r3, #5
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	4413      	add	r3, r2
 8008f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f50:	6013      	str	r3, [r2, #0]
 8008f52:	e013      	b.n	8008f7c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	015a      	lsls	r2, r3, #5
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f60:	461a      	mov	r2, r3
 8008f62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f66:	6013      	str	r3, [r2, #0]
 8008f68:	e008      	b.n	8008f7c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	015a      	lsls	r2, r3, #5
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f76:	461a      	mov	r2, r3
 8008f78:	2300      	movs	r3, #0
 8008f7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	015a      	lsls	r2, r3, #5
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4413      	add	r3, r2
 8008f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f88:	461a      	mov	r2, r3
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	015a      	lsls	r2, r3, #5
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	4413      	add	r3, r2
 8008f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008fa0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	613b      	str	r3, [r7, #16]
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	693a      	ldr	r2, [r7, #16]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d3b7      	bcc.n	8008f20 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fc2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008fd0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d105      	bne.n	8008fe4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	f043 0210 	orr.w	r2, r3, #16
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	699a      	ldr	r2, [r3, #24]
 8008fe8:	4b0f      	ldr	r3, [pc, #60]	; (8009028 <USB_DevInit+0x2c4>)
 8008fea:	4313      	orrs	r3, r2
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d005      	beq.n	8009002 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	f043 0208 	orr.w	r2, r3, #8
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009004:	2b01      	cmp	r3, #1
 8009006:	d107      	bne.n	8009018 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009010:	f043 0304 	orr.w	r3, r3, #4
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009018:	7dfb      	ldrb	r3, [r7, #23]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009024:	b004      	add	sp, #16
 8009026:	4770      	bx	lr
 8009028:	803c3800 	.word	0x803c3800

0800902c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009036:	2300      	movs	r3, #0
 8009038:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	019b      	lsls	r3, r3, #6
 800903e:	f043 0220 	orr.w	r2, r3, #32
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	3301      	adds	r3, #1
 800904a:	60fb      	str	r3, [r7, #12]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4a09      	ldr	r2, [pc, #36]	; (8009074 <USB_FlushTxFifo+0x48>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d901      	bls.n	8009058 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009054:	2303      	movs	r3, #3
 8009056:	e006      	b.n	8009066 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	f003 0320 	and.w	r3, r3, #32
 8009060:	2b20      	cmp	r3, #32
 8009062:	d0f0      	beq.n	8009046 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	00030d40 	.word	0x00030d40

08009078 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009080:	2300      	movs	r3, #0
 8009082:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2210      	movs	r2, #16
 8009088:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	3301      	adds	r3, #1
 800908e:	60fb      	str	r3, [r7, #12]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	4a09      	ldr	r2, [pc, #36]	; (80090b8 <USB_FlushRxFifo+0x40>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d901      	bls.n	800909c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009098:	2303      	movs	r3, #3
 800909a:	e006      	b.n	80090aa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	f003 0310 	and.w	r3, r3, #16
 80090a4:	2b10      	cmp	r3, #16
 80090a6:	d0f0      	beq.n	800908a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	00030d40 	.word	0x00030d40

080090bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	460b      	mov	r3, r1
 80090c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	78fb      	ldrb	r3, [r7, #3]
 80090d6:	68f9      	ldr	r1, [r7, #12]
 80090d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090dc:	4313      	orrs	r3, r2
 80090de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3714      	adds	r7, #20
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80090ee:	b480      	push	{r7}
 80090f0:	b087      	sub	sp, #28
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	f003 0306 	and.w	r3, r3, #6
 8009106:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d102      	bne.n	8009114 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800910e:	2300      	movs	r3, #0
 8009110:	75fb      	strb	r3, [r7, #23]
 8009112:	e00a      	b.n	800912a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2b02      	cmp	r3, #2
 8009118:	d002      	beq.n	8009120 <USB_GetDevSpeed+0x32>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2b06      	cmp	r3, #6
 800911e:	d102      	bne.n	8009126 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009120:	2302      	movs	r3, #2
 8009122:	75fb      	strb	r3, [r7, #23]
 8009124:	e001      	b.n	800912a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009126:	230f      	movs	r3, #15
 8009128:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800912a:	7dfb      	ldrb	r3, [r7, #23]
}
 800912c:	4618      	mov	r0, r3
 800912e:	371c      	adds	r7, #28
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	785b      	ldrb	r3, [r3, #1]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d13a      	bne.n	80091ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800915a:	69da      	ldr	r2, [r3, #28]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	f003 030f 	and.w	r3, r3, #15
 8009164:	2101      	movs	r1, #1
 8009166:	fa01 f303 	lsl.w	r3, r1, r3
 800916a:	b29b      	uxth	r3, r3
 800916c:	68f9      	ldr	r1, [r7, #12]
 800916e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009172:	4313      	orrs	r3, r2
 8009174:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	015a      	lsls	r2, r3, #5
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	4413      	add	r3, r2
 800917e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d155      	bne.n	8009238 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	015a      	lsls	r2, r3, #5
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	4413      	add	r3, r2
 8009194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	78db      	ldrb	r3, [r3, #3]
 80091a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80091a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	059b      	lsls	r3, r3, #22
 80091ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80091b0:	4313      	orrs	r3, r2
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	0151      	lsls	r1, r2, #5
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	440a      	add	r2, r1
 80091ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091c6:	6013      	str	r3, [r2, #0]
 80091c8:	e036      	b.n	8009238 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d0:	69da      	ldr	r2, [r3, #28]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	f003 030f 	and.w	r3, r3, #15
 80091da:	2101      	movs	r1, #1
 80091dc:	fa01 f303 	lsl.w	r3, r1, r3
 80091e0:	041b      	lsls	r3, r3, #16
 80091e2:	68f9      	ldr	r1, [r7, #12]
 80091e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091e8:	4313      	orrs	r3, r2
 80091ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	015a      	lsls	r2, r3, #5
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4413      	add	r3, r2
 80091f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d11a      	bne.n	8009238 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	015a      	lsls	r2, r3, #5
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	4413      	add	r3, r2
 800920a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	78db      	ldrb	r3, [r3, #3]
 800921c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800921e:	430b      	orrs	r3, r1
 8009220:	4313      	orrs	r3, r2
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	0151      	lsls	r1, r2, #5
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	440a      	add	r2, r1
 800922a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800922e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009236:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
	...

08009248 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	785b      	ldrb	r3, [r3, #1]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d161      	bne.n	8009328 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	015a      	lsls	r2, r3, #5
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	4413      	add	r3, r2
 800926c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009276:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800927a:	d11f      	bne.n	80092bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	015a      	lsls	r2, r3, #5
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	4413      	add	r3, r2
 8009284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	0151      	lsls	r1, r2, #5
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	440a      	add	r2, r1
 8009292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009296:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800929a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	015a      	lsls	r2, r3, #5
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	4413      	add	r3, r2
 80092a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	0151      	lsls	r1, r2, #5
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	440a      	add	r2, r1
 80092b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	f003 030f 	and.w	r3, r3, #15
 80092cc:	2101      	movs	r1, #1
 80092ce:	fa01 f303 	lsl.w	r3, r1, r3
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	43db      	mvns	r3, r3
 80092d6:	68f9      	ldr	r1, [r7, #12]
 80092d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092dc:	4013      	ands	r3, r2
 80092de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092e6:	69da      	ldr	r2, [r3, #28]
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	f003 030f 	and.w	r3, r3, #15
 80092f0:	2101      	movs	r1, #1
 80092f2:	fa01 f303 	lsl.w	r3, r1, r3
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	43db      	mvns	r3, r3
 80092fa:	68f9      	ldr	r1, [r7, #12]
 80092fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009300:	4013      	ands	r3, r2
 8009302:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4413      	add	r3, r2
 800930c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	0159      	lsls	r1, r3, #5
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	440b      	add	r3, r1
 800931a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800931e:	4619      	mov	r1, r3
 8009320:	4b35      	ldr	r3, [pc, #212]	; (80093f8 <USB_DeactivateEndpoint+0x1b0>)
 8009322:	4013      	ands	r3, r2
 8009324:	600b      	str	r3, [r1, #0]
 8009326:	e060      	b.n	80093ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	015a      	lsls	r2, r3, #5
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	4413      	add	r3, r2
 8009330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800933a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800933e:	d11f      	bne.n	8009380 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	015a      	lsls	r2, r3, #5
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	4413      	add	r3, r2
 8009348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	0151      	lsls	r1, r2, #5
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	440a      	add	r2, r1
 8009356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800935a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800935e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	015a      	lsls	r2, r3, #5
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	4413      	add	r3, r2
 8009368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	0151      	lsls	r1, r2, #5
 8009372:	68fa      	ldr	r2, [r7, #12]
 8009374:	440a      	add	r2, r1
 8009376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800937a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800937e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	f003 030f 	and.w	r3, r3, #15
 8009390:	2101      	movs	r1, #1
 8009392:	fa01 f303 	lsl.w	r3, r1, r3
 8009396:	041b      	lsls	r3, r3, #16
 8009398:	43db      	mvns	r3, r3
 800939a:	68f9      	ldr	r1, [r7, #12]
 800939c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093a0:	4013      	ands	r3, r2
 80093a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093aa:	69da      	ldr	r2, [r3, #28]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	f003 030f 	and.w	r3, r3, #15
 80093b4:	2101      	movs	r1, #1
 80093b6:	fa01 f303 	lsl.w	r3, r1, r3
 80093ba:	041b      	lsls	r3, r3, #16
 80093bc:	43db      	mvns	r3, r3
 80093be:	68f9      	ldr	r1, [r7, #12]
 80093c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093c4:	4013      	ands	r3, r2
 80093c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	015a      	lsls	r2, r3, #5
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	4413      	add	r3, r2
 80093d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	0159      	lsls	r1, r3, #5
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	440b      	add	r3, r1
 80093de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093e2:	4619      	mov	r1, r3
 80093e4:	4b05      	ldr	r3, [pc, #20]	; (80093fc <USB_DeactivateEndpoint+0x1b4>)
 80093e6:	4013      	ands	r3, r2
 80093e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	ec337800 	.word	0xec337800
 80093fc:	eff37800 	.word	0xeff37800

08009400 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b08a      	sub	sp, #40	; 0x28
 8009404:	af02      	add	r7, sp, #8
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	4613      	mov	r3, r2
 800940c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	785b      	ldrb	r3, [r3, #1]
 800941c:	2b01      	cmp	r3, #1
 800941e:	f040 815c 	bne.w	80096da <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	695b      	ldr	r3, [r3, #20]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d132      	bne.n	8009490 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	015a      	lsls	r2, r3, #5
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	4413      	add	r3, r2
 8009432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	69ba      	ldr	r2, [r7, #24]
 800943a:	0151      	lsls	r1, r2, #5
 800943c:	69fa      	ldr	r2, [r7, #28]
 800943e:	440a      	add	r2, r1
 8009440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009444:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009448:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800944c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	015a      	lsls	r2, r3, #5
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	4413      	add	r3, r2
 8009456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	69ba      	ldr	r2, [r7, #24]
 800945e:	0151      	lsls	r1, r2, #5
 8009460:	69fa      	ldr	r2, [r7, #28]
 8009462:	440a      	add	r2, r1
 8009464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009468:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800946c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	015a      	lsls	r2, r3, #5
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	4413      	add	r3, r2
 8009476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	69ba      	ldr	r2, [r7, #24]
 800947e:	0151      	lsls	r1, r2, #5
 8009480:	69fa      	ldr	r2, [r7, #28]
 8009482:	440a      	add	r2, r1
 8009484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009488:	0cdb      	lsrs	r3, r3, #19
 800948a:	04db      	lsls	r3, r3, #19
 800948c:	6113      	str	r3, [r2, #16]
 800948e:	e074      	b.n	800957a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	015a      	lsls	r2, r3, #5
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	4413      	add	r3, r2
 8009498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	69ba      	ldr	r2, [r7, #24]
 80094a0:	0151      	lsls	r1, r2, #5
 80094a2:	69fa      	ldr	r2, [r7, #28]
 80094a4:	440a      	add	r2, r1
 80094a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094aa:	0cdb      	lsrs	r3, r3, #19
 80094ac:	04db      	lsls	r3, r3, #19
 80094ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	015a      	lsls	r2, r3, #5
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	4413      	add	r3, r2
 80094b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094bc:	691b      	ldr	r3, [r3, #16]
 80094be:	69ba      	ldr	r2, [r7, #24]
 80094c0:	0151      	lsls	r1, r2, #5
 80094c2:	69fa      	ldr	r2, [r7, #28]
 80094c4:	440a      	add	r2, r1
 80094c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80094d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	015a      	lsls	r2, r3, #5
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	4413      	add	r3, r2
 80094dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094e0:	691a      	ldr	r2, [r3, #16]
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	6959      	ldr	r1, [r3, #20]
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	440b      	add	r3, r1
 80094ec:	1e59      	subs	r1, r3, #1
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80094f6:	04d9      	lsls	r1, r3, #19
 80094f8:	4b9d      	ldr	r3, [pc, #628]	; (8009770 <USB_EPStartXfer+0x370>)
 80094fa:	400b      	ands	r3, r1
 80094fc:	69b9      	ldr	r1, [r7, #24]
 80094fe:	0148      	lsls	r0, r1, #5
 8009500:	69f9      	ldr	r1, [r7, #28]
 8009502:	4401      	add	r1, r0
 8009504:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009508:	4313      	orrs	r3, r2
 800950a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	015a      	lsls	r2, r3, #5
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	4413      	add	r3, r2
 8009514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009518:	691a      	ldr	r2, [r3, #16]
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009522:	69b9      	ldr	r1, [r7, #24]
 8009524:	0148      	lsls	r0, r1, #5
 8009526:	69f9      	ldr	r1, [r7, #28]
 8009528:	4401      	add	r1, r0
 800952a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800952e:	4313      	orrs	r3, r2
 8009530:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	78db      	ldrb	r3, [r3, #3]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d11f      	bne.n	800957a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	015a      	lsls	r2, r3, #5
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	4413      	add	r3, r2
 8009542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	69ba      	ldr	r2, [r7, #24]
 800954a:	0151      	lsls	r1, r2, #5
 800954c:	69fa      	ldr	r2, [r7, #28]
 800954e:	440a      	add	r2, r1
 8009550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009554:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009558:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	015a      	lsls	r2, r3, #5
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	4413      	add	r3, r2
 8009562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	69ba      	ldr	r2, [r7, #24]
 800956a:	0151      	lsls	r1, r2, #5
 800956c:	69fa      	ldr	r2, [r7, #28]
 800956e:	440a      	add	r2, r1
 8009570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009574:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009578:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800957a:	79fb      	ldrb	r3, [r7, #7]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d14b      	bne.n	8009618 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d009      	beq.n	800959c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	4413      	add	r3, r2
 8009590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009594:	461a      	mov	r2, r3
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	78db      	ldrb	r3, [r3, #3]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d128      	bne.n	80095f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d110      	bne.n	80095d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	015a      	lsls	r2, r3, #5
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	4413      	add	r3, r2
 80095bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	69ba      	ldr	r2, [r7, #24]
 80095c4:	0151      	lsls	r1, r2, #5
 80095c6:	69fa      	ldr	r2, [r7, #28]
 80095c8:	440a      	add	r2, r1
 80095ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095d2:	6013      	str	r3, [r2, #0]
 80095d4:	e00f      	b.n	80095f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	015a      	lsls	r2, r3, #5
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	4413      	add	r3, r2
 80095de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	69ba      	ldr	r2, [r7, #24]
 80095e6:	0151      	lsls	r1, r2, #5
 80095e8:	69fa      	ldr	r2, [r7, #28]
 80095ea:	440a      	add	r2, r1
 80095ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	015a      	lsls	r2, r3, #5
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	4413      	add	r3, r2
 80095fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	69ba      	ldr	r2, [r7, #24]
 8009606:	0151      	lsls	r1, r2, #5
 8009608:	69fa      	ldr	r2, [r7, #28]
 800960a:	440a      	add	r2, r1
 800960c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009610:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009614:	6013      	str	r3, [r2, #0]
 8009616:	e12f      	b.n	8009878 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	015a      	lsls	r2, r3, #5
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	4413      	add	r3, r2
 8009620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	69ba      	ldr	r2, [r7, #24]
 8009628:	0151      	lsls	r1, r2, #5
 800962a:	69fa      	ldr	r2, [r7, #28]
 800962c:	440a      	add	r2, r1
 800962e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009632:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009636:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	78db      	ldrb	r3, [r3, #3]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d015      	beq.n	800966c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	695b      	ldr	r3, [r3, #20]
 8009644:	2b00      	cmp	r3, #0
 8009646:	f000 8117 	beq.w	8009878 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	f003 030f 	and.w	r3, r3, #15
 800965a:	2101      	movs	r1, #1
 800965c:	fa01 f303 	lsl.w	r3, r1, r3
 8009660:	69f9      	ldr	r1, [r7, #28]
 8009662:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009666:	4313      	orrs	r3, r2
 8009668:	634b      	str	r3, [r1, #52]	; 0x34
 800966a:	e105      	b.n	8009878 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009678:	2b00      	cmp	r3, #0
 800967a:	d110      	bne.n	800969e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	015a      	lsls	r2, r3, #5
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	4413      	add	r3, r2
 8009684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	69ba      	ldr	r2, [r7, #24]
 800968c:	0151      	lsls	r1, r2, #5
 800968e:	69fa      	ldr	r2, [r7, #28]
 8009690:	440a      	add	r2, r1
 8009692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009696:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800969a:	6013      	str	r3, [r2, #0]
 800969c:	e00f      	b.n	80096be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	015a      	lsls	r2, r3, #5
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	4413      	add	r3, r2
 80096a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	69ba      	ldr	r2, [r7, #24]
 80096ae:	0151      	lsls	r1, r2, #5
 80096b0:	69fa      	ldr	r2, [r7, #28]
 80096b2:	440a      	add	r2, r1
 80096b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	68d9      	ldr	r1, [r3, #12]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	781a      	ldrb	r2, [r3, #0]
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	695b      	ldr	r3, [r3, #20]
 80096ca:	b298      	uxth	r0, r3
 80096cc:	79fb      	ldrb	r3, [r7, #7]
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	4603      	mov	r3, r0
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f000 fa2b 	bl	8009b2e <USB_WritePacket>
 80096d8:	e0ce      	b.n	8009878 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	015a      	lsls	r2, r3, #5
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	4413      	add	r3, r2
 80096e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	69ba      	ldr	r2, [r7, #24]
 80096ea:	0151      	lsls	r1, r2, #5
 80096ec:	69fa      	ldr	r2, [r7, #28]
 80096ee:	440a      	add	r2, r1
 80096f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096f4:	0cdb      	lsrs	r3, r3, #19
 80096f6:	04db      	lsls	r3, r3, #19
 80096f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	015a      	lsls	r2, r3, #5
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	4413      	add	r3, r2
 8009702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	69ba      	ldr	r2, [r7, #24]
 800970a:	0151      	lsls	r1, r2, #5
 800970c:	69fa      	ldr	r2, [r7, #28]
 800970e:	440a      	add	r2, r1
 8009710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009714:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009718:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800971c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d126      	bne.n	8009774 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	015a      	lsls	r2, r3, #5
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	4413      	add	r3, r2
 800972e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009732:	691a      	ldr	r2, [r3, #16]
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800973c:	69b9      	ldr	r1, [r7, #24]
 800973e:	0148      	lsls	r0, r1, #5
 8009740:	69f9      	ldr	r1, [r7, #28]
 8009742:	4401      	add	r1, r0
 8009744:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009748:	4313      	orrs	r3, r2
 800974a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	4413      	add	r3, r2
 8009754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	69ba      	ldr	r2, [r7, #24]
 800975c:	0151      	lsls	r1, r2, #5
 800975e:	69fa      	ldr	r2, [r7, #28]
 8009760:	440a      	add	r2, r1
 8009762:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009766:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800976a:	6113      	str	r3, [r2, #16]
 800976c:	e036      	b.n	80097dc <USB_EPStartXfer+0x3dc>
 800976e:	bf00      	nop
 8009770:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	695a      	ldr	r2, [r3, #20]
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	4413      	add	r3, r2
 800977e:	1e5a      	subs	r2, r3, #1
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	fbb2 f3f3 	udiv	r3, r2, r3
 8009788:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	015a      	lsls	r2, r3, #5
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	4413      	add	r3, r2
 8009792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009796:	691a      	ldr	r2, [r3, #16]
 8009798:	8afb      	ldrh	r3, [r7, #22]
 800979a:	04d9      	lsls	r1, r3, #19
 800979c:	4b39      	ldr	r3, [pc, #228]	; (8009884 <USB_EPStartXfer+0x484>)
 800979e:	400b      	ands	r3, r1
 80097a0:	69b9      	ldr	r1, [r7, #24]
 80097a2:	0148      	lsls	r0, r1, #5
 80097a4:	69f9      	ldr	r1, [r7, #28]
 80097a6:	4401      	add	r1, r0
 80097a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097ac:	4313      	orrs	r3, r2
 80097ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097bc:	691a      	ldr	r2, [r3, #16]
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	8af9      	ldrh	r1, [r7, #22]
 80097c4:	fb01 f303 	mul.w	r3, r1, r3
 80097c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097cc:	69b9      	ldr	r1, [r7, #24]
 80097ce:	0148      	lsls	r0, r1, #5
 80097d0:	69f9      	ldr	r1, [r7, #28]
 80097d2:	4401      	add	r1, r0
 80097d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097d8:	4313      	orrs	r3, r2
 80097da:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80097dc:	79fb      	ldrb	r3, [r7, #7]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d10d      	bne.n	80097fe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d009      	beq.n	80097fe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	68d9      	ldr	r1, [r3, #12]
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	015a      	lsls	r2, r3, #5
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	4413      	add	r3, r2
 80097f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097fa:	460a      	mov	r2, r1
 80097fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	78db      	ldrb	r3, [r3, #3]
 8009802:	2b01      	cmp	r3, #1
 8009804:	d128      	bne.n	8009858 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009812:	2b00      	cmp	r3, #0
 8009814:	d110      	bne.n	8009838 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	015a      	lsls	r2, r3, #5
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	4413      	add	r3, r2
 800981e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	69ba      	ldr	r2, [r7, #24]
 8009826:	0151      	lsls	r1, r2, #5
 8009828:	69fa      	ldr	r2, [r7, #28]
 800982a:	440a      	add	r2, r1
 800982c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009830:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009834:	6013      	str	r3, [r2, #0]
 8009836:	e00f      	b.n	8009858 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	015a      	lsls	r2, r3, #5
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	4413      	add	r3, r2
 8009840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	69ba      	ldr	r2, [r7, #24]
 8009848:	0151      	lsls	r1, r2, #5
 800984a:	69fa      	ldr	r2, [r7, #28]
 800984c:	440a      	add	r2, r1
 800984e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009856:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	015a      	lsls	r2, r3, #5
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	4413      	add	r3, r2
 8009860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	69ba      	ldr	r2, [r7, #24]
 8009868:	0151      	lsls	r1, r2, #5
 800986a:	69fa      	ldr	r2, [r7, #28]
 800986c:	440a      	add	r2, r1
 800986e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009872:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009876:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3720      	adds	r7, #32
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	1ff80000 	.word	0x1ff80000

08009888 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009888:	b480      	push	{r7}
 800988a:	b087      	sub	sp, #28
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	4613      	mov	r3, r2
 8009894:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	785b      	ldrb	r3, [r3, #1]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	f040 80cd 	bne.w	8009a44 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	695b      	ldr	r3, [r3, #20]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d132      	bne.n	8009918 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	015a      	lsls	r2, r3, #5
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	4413      	add	r3, r2
 80098ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	0151      	lsls	r1, r2, #5
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	440a      	add	r2, r1
 80098c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80098d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80098d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	015a      	lsls	r2, r3, #5
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	4413      	add	r3, r2
 80098de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	0151      	lsls	r1, r2, #5
 80098e8:	697a      	ldr	r2, [r7, #20]
 80098ea:	440a      	add	r2, r1
 80098ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	015a      	lsls	r2, r3, #5
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	4413      	add	r3, r2
 80098fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	0151      	lsls	r1, r2, #5
 8009908:	697a      	ldr	r2, [r7, #20]
 800990a:	440a      	add	r2, r1
 800990c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009910:	0cdb      	lsrs	r3, r3, #19
 8009912:	04db      	lsls	r3, r3, #19
 8009914:	6113      	str	r3, [r2, #16]
 8009916:	e04e      	b.n	80099b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	015a      	lsls	r2, r3, #5
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	4413      	add	r3, r2
 8009920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009924:	691b      	ldr	r3, [r3, #16]
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	0151      	lsls	r1, r2, #5
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	440a      	add	r2, r1
 800992e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009932:	0cdb      	lsrs	r3, r3, #19
 8009934:	04db      	lsls	r3, r3, #19
 8009936:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	015a      	lsls	r2, r3, #5
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	4413      	add	r3, r2
 8009940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	693a      	ldr	r2, [r7, #16]
 8009948:	0151      	lsls	r1, r2, #5
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	440a      	add	r2, r1
 800994e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009952:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009956:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800995a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	695a      	ldr	r2, [r3, #20]
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	429a      	cmp	r2, r3
 8009966:	d903      	bls.n	8009970 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	689a      	ldr	r2, [r3, #8]
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	015a      	lsls	r2, r3, #5
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	4413      	add	r3, r2
 8009978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	693a      	ldr	r2, [r7, #16]
 8009980:	0151      	lsls	r1, r2, #5
 8009982:	697a      	ldr	r2, [r7, #20]
 8009984:	440a      	add	r2, r1
 8009986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800998a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800998e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800999c:	691a      	ldr	r2, [r3, #16]
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099a6:	6939      	ldr	r1, [r7, #16]
 80099a8:	0148      	lsls	r0, r1, #5
 80099aa:	6979      	ldr	r1, [r7, #20]
 80099ac:	4401      	add	r1, r0
 80099ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80099b2:	4313      	orrs	r3, r2
 80099b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80099b6:	79fb      	ldrb	r3, [r7, #7]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d11e      	bne.n	80099fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d009      	beq.n	80099d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	015a      	lsls	r2, r3, #5
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	4413      	add	r3, r2
 80099cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d0:	461a      	mov	r2, r3
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	015a      	lsls	r2, r3, #5
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	4413      	add	r3, r2
 80099e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	693a      	ldr	r2, [r7, #16]
 80099e8:	0151      	lsls	r1, r2, #5
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	440a      	add	r2, r1
 80099ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099f6:	6013      	str	r3, [r2, #0]
 80099f8:	e092      	b.n	8009b20 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	015a      	lsls	r2, r3, #5
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	4413      	add	r3, r2
 8009a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	0151      	lsls	r1, r2, #5
 8009a0c:	697a      	ldr	r2, [r7, #20]
 8009a0e:	440a      	add	r2, r1
 8009a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a18:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d07e      	beq.n	8009b20 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	f003 030f 	and.w	r3, r3, #15
 8009a32:	2101      	movs	r1, #1
 8009a34:	fa01 f303 	lsl.w	r3, r1, r3
 8009a38:	6979      	ldr	r1, [r7, #20]
 8009a3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	634b      	str	r3, [r1, #52]	; 0x34
 8009a42:	e06d      	b.n	8009b20 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	015a      	lsls	r2, r3, #5
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	693a      	ldr	r2, [r7, #16]
 8009a54:	0151      	lsls	r1, r2, #5
 8009a56:	697a      	ldr	r2, [r7, #20]
 8009a58:	440a      	add	r2, r1
 8009a5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a5e:	0cdb      	lsrs	r3, r3, #19
 8009a60:	04db      	lsls	r3, r3, #19
 8009a62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	015a      	lsls	r2, r3, #5
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	693a      	ldr	r2, [r7, #16]
 8009a74:	0151      	lsls	r1, r2, #5
 8009a76:	697a      	ldr	r2, [r7, #20]
 8009a78:	440a      	add	r2, r1
 8009a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a86:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	695b      	ldr	r3, [r3, #20]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d003      	beq.n	8009a98 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	689a      	ldr	r2, [r3, #8]
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	015a      	lsls	r2, r3, #5
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	4413      	add	r3, r2
 8009aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	0151      	lsls	r1, r2, #5
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	440a      	add	r2, r1
 8009aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ab2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ab6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	015a      	lsls	r2, r3, #5
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	4413      	add	r3, r2
 8009ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac4:	691a      	ldr	r2, [r3, #16]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ace:	6939      	ldr	r1, [r7, #16]
 8009ad0:	0148      	lsls	r0, r1, #5
 8009ad2:	6979      	ldr	r1, [r7, #20]
 8009ad4:	4401      	add	r1, r0
 8009ad6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ada:	4313      	orrs	r3, r2
 8009adc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009ade:	79fb      	ldrb	r3, [r7, #7]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d10d      	bne.n	8009b00 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d009      	beq.n	8009b00 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	68d9      	ldr	r1, [r3, #12]
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	015a      	lsls	r2, r3, #5
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	4413      	add	r3, r2
 8009af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009afc:	460a      	mov	r2, r1
 8009afe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	015a      	lsls	r2, r3, #5
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	4413      	add	r3, r2
 8009b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	693a      	ldr	r2, [r7, #16]
 8009b10:	0151      	lsls	r1, r2, #5
 8009b12:	697a      	ldr	r2, [r7, #20]
 8009b14:	440a      	add	r2, r1
 8009b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	371c      	adds	r7, #28
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr

08009b2e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009b2e:	b480      	push	{r7}
 8009b30:	b089      	sub	sp, #36	; 0x24
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	60f8      	str	r0, [r7, #12]
 8009b36:	60b9      	str	r1, [r7, #8]
 8009b38:	4611      	mov	r1, r2
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	71fb      	strb	r3, [r7, #7]
 8009b40:	4613      	mov	r3, r2
 8009b42:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009b4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d11a      	bne.n	8009b8a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009b54:	88bb      	ldrh	r3, [r7, #4]
 8009b56:	3303      	adds	r3, #3
 8009b58:	089b      	lsrs	r3, r3, #2
 8009b5a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	61bb      	str	r3, [r7, #24]
 8009b60:	e00f      	b.n	8009b82 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009b62:	79fb      	ldrb	r3, [r7, #7]
 8009b64:	031a      	lsls	r2, r3, #12
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	4413      	add	r3, r2
 8009b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b6e:	461a      	mov	r2, r3
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	3304      	adds	r3, #4
 8009b7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	61bb      	str	r3, [r7, #24]
 8009b82:	69ba      	ldr	r2, [r7, #24]
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d3eb      	bcc.n	8009b62 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3724      	adds	r7, #36	; 0x24
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b089      	sub	sp, #36	; 0x24
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009bae:	88fb      	ldrh	r3, [r7, #6]
 8009bb0:	3303      	adds	r3, #3
 8009bb2:	089b      	lsrs	r3, r3, #2
 8009bb4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	61bb      	str	r3, [r7, #24]
 8009bba:	e00b      	b.n	8009bd4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	601a      	str	r2, [r3, #0]
    pDest++;
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	3304      	adds	r3, #4
 8009bcc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	61bb      	str	r3, [r7, #24]
 8009bd4:	69ba      	ldr	r2, [r7, #24]
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d3ef      	bcc.n	8009bbc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009bdc:	69fb      	ldr	r3, [r7, #28]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3724      	adds	r7, #36	; 0x24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009bea:	b480      	push	{r7}
 8009bec:	b085      	sub	sp, #20
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	785b      	ldrb	r3, [r3, #1]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d12c      	bne.n	8009c60 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	015a      	lsls	r2, r3, #5
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	db12      	blt.n	8009c3e <USB_EPSetStall+0x54>
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00f      	beq.n	8009c3e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	015a      	lsls	r2, r3, #5
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	4413      	add	r3, r2
 8009c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	0151      	lsls	r1, r2, #5
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	440a      	add	r2, r1
 8009c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c3c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	015a      	lsls	r2, r3, #5
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	4413      	add	r3, r2
 8009c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	0151      	lsls	r1, r2, #5
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	440a      	add	r2, r1
 8009c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c5c:	6013      	str	r3, [r2, #0]
 8009c5e:	e02b      	b.n	8009cb8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	015a      	lsls	r2, r3, #5
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	4413      	add	r3, r2
 8009c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	db12      	blt.n	8009c98 <USB_EPSetStall+0xae>
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00f      	beq.n	8009c98 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	015a      	lsls	r2, r3, #5
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	4413      	add	r3, r2
 8009c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	0151      	lsls	r1, r2, #5
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	440a      	add	r2, r1
 8009c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c96:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	015a      	lsls	r2, r3, #5
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	0151      	lsls	r1, r2, #5
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	440a      	add	r2, r1
 8009cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009cb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3714      	adds	r7, #20
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr

08009cc6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009cc6:	b480      	push	{r7}
 8009cc8:	b085      	sub	sp, #20
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
 8009cce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	785b      	ldrb	r3, [r3, #1]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d128      	bne.n	8009d34 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	015a      	lsls	r2, r3, #5
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	4413      	add	r3, r2
 8009cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	0151      	lsls	r1, r2, #5
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	440a      	add	r2, r1
 8009cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cfc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d00:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	78db      	ldrb	r3, [r3, #3]
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d003      	beq.n	8009d12 <USB_EPClearStall+0x4c>
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	78db      	ldrb	r3, [r3, #3]
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	d138      	bne.n	8009d84 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	015a      	lsls	r2, r3, #5
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	4413      	add	r3, r2
 8009d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	0151      	lsls	r1, r2, #5
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	440a      	add	r2, r1
 8009d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d30:	6013      	str	r3, [r2, #0]
 8009d32:	e027      	b.n	8009d84 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	015a      	lsls	r2, r3, #5
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	68ba      	ldr	r2, [r7, #8]
 8009d44:	0151      	lsls	r1, r2, #5
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	440a      	add	r2, r1
 8009d4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	78db      	ldrb	r3, [r3, #3]
 8009d58:	2b03      	cmp	r3, #3
 8009d5a:	d003      	beq.n	8009d64 <USB_EPClearStall+0x9e>
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	78db      	ldrb	r3, [r3, #3]
 8009d60:	2b02      	cmp	r3, #2
 8009d62:	d10f      	bne.n	8009d84 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	015a      	lsls	r2, r3, #5
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	0151      	lsls	r1, r2, #5
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	440a      	add	r2, r1
 8009d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d82:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009d92:	b480      	push	{r7}
 8009d94:	b085      	sub	sp, #20
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009db0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009db4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	78fb      	ldrb	r3, [r7, #3]
 8009dc0:	011b      	lsls	r3, r3, #4
 8009dc2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009dc6:	68f9      	ldr	r1, [r7, #12]
 8009dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr

08009dde <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b084      	sub	sp, #16
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	68fa      	ldr	r2, [r7, #12]
 8009df4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009df8:	f023 0302 	bic.w	r3, r3, #2
 8009dfc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009dfe:	2003      	movs	r0, #3
 8009e00:	f7f8 fc12 	bl	8002628 <HAL_Delay>

  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b084      	sub	sp, #16
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e28:	f043 0302 	orr.w	r3, r3, #2
 8009e2c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009e2e:	2003      	movs	r0, #3
 8009e30:	f7f8 fbfa 	bl	8002628 <HAL_Delay>

  return HAL_OK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b085      	sub	sp, #20
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	695b      	ldr	r3, [r3, #20]
 8009e4a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	4013      	ands	r3, r2
 8009e54:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009e56:	68fb      	ldr	r3, [r7, #12]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e76:	699b      	ldr	r3, [r3, #24]
 8009e78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e80:	69db      	ldr	r3, [r3, #28]
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	4013      	ands	r3, r2
 8009e86:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	0c1b      	lsrs	r3, r3, #16
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3714      	adds	r7, #20
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eaa:	699b      	ldr	r3, [r3, #24]
 8009eac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eb4:	69db      	ldr	r3, [r3, #28]
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	4013      	ands	r3, r2
 8009eba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	b29b      	uxth	r3, r3
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3714      	adds	r7, #20
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009edc:	78fb      	ldrb	r3, [r7, #3]
 8009ede:	015a      	lsls	r2, r3, #5
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ef2:	695b      	ldr	r3, [r3, #20]
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009efa:	68bb      	ldr	r3, [r7, #8]
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3714      	adds	r7, #20
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b087      	sub	sp, #28
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	460b      	mov	r3, r1
 8009f12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f1e:	691b      	ldr	r3, [r3, #16]
 8009f20:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f2a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009f2c:	78fb      	ldrb	r3, [r7, #3]
 8009f2e:	f003 030f 	and.w	r3, r3, #15
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	fa22 f303 	lsr.w	r3, r2, r3
 8009f38:	01db      	lsls	r3, r3, #7
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	693a      	ldr	r2, [r7, #16]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009f42:	78fb      	ldrb	r3, [r7, #3]
 8009f44:	015a      	lsls	r2, r3, #5
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	4413      	add	r3, r2
 8009f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	4013      	ands	r3, r2
 8009f54:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f56:	68bb      	ldr	r3, [r7, #8]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	371c      	adds	r7, #28
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	695b      	ldr	r3, [r3, #20]
 8009f70:	f003 0301 	and.w	r3, r3, #1
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f9a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009f9e:	f023 0307 	bic.w	r3, r3, #7
 8009fa2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3714      	adds	r7, #20
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
	...

08009fc8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b087      	sub	sp, #28
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	607a      	str	r2, [r7, #4]
 8009fd4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	333c      	adds	r3, #60	; 0x3c
 8009fde:	3304      	adds	r3, #4
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	4a26      	ldr	r2, [pc, #152]	; (800a080 <USB_EP0_OutStart+0xb8>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d90a      	bls.n	800a002 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ffc:	d101      	bne.n	800a002 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009ffe:	2300      	movs	r3, #0
 800a000:	e037      	b.n	800a072 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a008:	461a      	mov	r2, r3
 800a00a:	2300      	movs	r3, #0
 800a00c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	697a      	ldr	r2, [r7, #20]
 800a018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a01c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a020:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	697a      	ldr	r2, [r7, #20]
 800a02c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a030:	f043 0318 	orr.w	r3, r3, #24
 800a034:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a044:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a048:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a04a:	7afb      	ldrb	r3, [r7, #11]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d10f      	bne.n	800a070 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a056:	461a      	mov	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	697a      	ldr	r2, [r7, #20]
 800a066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a06a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a06e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	371c      	adds	r7, #28
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop
 800a080:	4f54300a 	.word	0x4f54300a

0800a084 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a084:	b480      	push	{r7}
 800a086:	b085      	sub	sp, #20
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a08c:	2300      	movs	r3, #0
 800a08e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	3301      	adds	r3, #1
 800a094:	60fb      	str	r3, [r7, #12]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	4a13      	ldr	r2, [pc, #76]	; (800a0e8 <USB_CoreReset+0x64>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d901      	bls.n	800a0a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	e01b      	b.n	800a0da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	daf2      	bge.n	800a090 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	f043 0201 	orr.w	r2, r3, #1
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	60fb      	str	r3, [r7, #12]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	4a09      	ldr	r2, [pc, #36]	; (800a0e8 <USB_CoreReset+0x64>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d901      	bls.n	800a0cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e006      	b.n	800a0da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	f003 0301 	and.w	r3, r3, #1
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d0f0      	beq.n	800a0ba <USB_CoreReset+0x36>

  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3714      	adds	r7, #20
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	00030d40 	.word	0x00030d40

0800a0ec <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

    /* Allocate Audio structure */
  haudio = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 800a0f8:	f641 30d0 	movw	r0, #7120	; 0x1bd0
 800a0fc:	f002 fa68 	bl	800c5d0 <malloc>
 800a100:	4603      	mov	r3, r0
 800a102:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d105      	bne.n	800a116 <USBD_AUDIO_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a112:	2302      	movs	r3, #2
 800a114:	e04b      	b.n	800a1ae <USBD_AUDIO_Init+0xc2>
  }

  pdev->pClassData = (void *)haudio;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	7c1b      	ldrb	r3, [r3, #16]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d104      	bne.n	800a130 <USBD_AUDIO_Init+0x44>
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2201      	movs	r2, #1
 800a12a:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 800a12e:	e003      	b.n	800a138 <USBD_AUDIO_Init+0x4c>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800a138:	2358      	movs	r3, #88	; 0x58
 800a13a:	2201      	movs	r2, #1
 800a13c:	2101      	movs	r1, #1
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f002 f8cd 	bl	800c2de <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  haudio->alt_setting = 0U;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2200      	movs	r2, #0
 800a150:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a158:	3304      	adds	r3, #4
 800a15a:	2203      	movs	r2, #3
 800a15c:	701a      	strb	r2, [r3, #0]
  haudio->wr_ptr = 0U;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a164:	3308      	adds	r3, #8
 800a166:	2200      	movs	r2, #0
 800a168:	801a      	strh	r2, [r3, #0]
  haudio->rd_ptr = 0U;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a170:	3306      	adds	r3, #6
 800a172:	2200      	movs	r2, #0
 800a174:	801a      	strh	r2, [r3, #0]
  haudio->rd_enable = 0U;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a17c:	3305      	adds	r3, #5
 800a17e:	2200      	movs	r2, #0
 800a180:	701a      	strb	r2, [r3, #0]

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2200      	movs	r2, #0
 800a18c:	2146      	movs	r1, #70	; 0x46
 800a18e:	f245 6054 	movw	r0, #22100	; 0x5654
 800a192:	4798      	blx	r3
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d001      	beq.n	800a19e <USBD_AUDIO_Init+0xb2>
                                                       AUDIO_DEFAULT_VOLUME,
                                                       0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e007      	b.n	800a1ae <USBD_AUDIO_Init+0xc2>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	1d1a      	adds	r2, r3, #4
 800a1a2:	2358      	movs	r3, #88	; 0x58
 800a1a4:	2101      	movs	r1, #1
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f002 f988 	bl	800c4bc <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b082      	sub	sp, #8
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	460b      	mov	r3, r1
 800a1c0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 800a1c2:	2101      	movs	r1, #1
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f002 f8b0 	bl	800c32a <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = 0U;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00f      	beq.n	800a204 <USBD_AUDIO_DeInit+0x4e>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	2000      	movs	r0, #0
 800a1ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f002 f9f2 	bl	800c5e0 <free>
    pdev->pClassData = NULL;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
	...

0800a210 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b086      	sub	sp, #24
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800a21a:	2300      	movs	r3, #0
 800a21c:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800a21e:	2300      	movs	r3, #0
 800a220:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a228:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a232:	2b00      	cmp	r3, #0
 800a234:	d01a      	beq.n	800a26c <USBD_AUDIO_Setup+0x5c>
 800a236:	2b20      	cmp	r3, #32
 800a238:	f040 809e 	bne.w	800a378 <USBD_AUDIO_Setup+0x168>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	785b      	ldrb	r3, [r3, #1]
 800a240:	2b01      	cmp	r3, #1
 800a242:	d006      	beq.n	800a252 <USBD_AUDIO_Setup+0x42>
 800a244:	2b81      	cmp	r3, #129	; 0x81
 800a246:	d109      	bne.n	800a25c <USBD_AUDIO_Setup+0x4c>
    {
    case AUDIO_REQ_GET_CUR:
      AUDIO_REQ_GetCurrent(pdev, req);
 800a248:	6839      	ldr	r1, [r7, #0]
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f9a0 	bl	800a590 <AUDIO_REQ_GetCurrent>
      break;
 800a250:	e00b      	b.n	800a26a <USBD_AUDIO_Setup+0x5a>

    case AUDIO_REQ_SET_CUR:
      AUDIO_REQ_SetCurrent(pdev, req);
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 f9bb 	bl	800a5d0 <AUDIO_REQ_SetCurrent>
      break;
 800a25a:	e006      	b.n	800a26a <USBD_AUDIO_Setup+0x5a>

    default:
      USBD_CtlError(pdev, req);
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f001 fb36 	bl	800b8d0 <USBD_CtlError>
      ret = USBD_FAIL;
 800a264:	2303      	movs	r3, #3
 800a266:	75fb      	strb	r3, [r7, #23]
      break;
 800a268:	bf00      	nop
    }
    break;
 800a26a:	e08c      	b.n	800a386 <USBD_AUDIO_Setup+0x176>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	785b      	ldrb	r3, [r3, #1]
 800a270:	2b0b      	cmp	r3, #11
 800a272:	d876      	bhi.n	800a362 <USBD_AUDIO_Setup+0x152>
 800a274:	a201      	add	r2, pc, #4	; (adr r2, 800a27c <USBD_AUDIO_Setup+0x6c>)
 800a276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27a:	bf00      	nop
 800a27c:	0800a2ad 	.word	0x0800a2ad
 800a280:	0800a371 	.word	0x0800a371
 800a284:	0800a363 	.word	0x0800a363
 800a288:	0800a363 	.word	0x0800a363
 800a28c:	0800a363 	.word	0x0800a363
 800a290:	0800a363 	.word	0x0800a363
 800a294:	0800a2d5 	.word	0x0800a2d5
 800a298:	0800a363 	.word	0x0800a363
 800a29c:	0800a363 	.word	0x0800a363
 800a2a0:	0800a363 	.word	0x0800a363
 800a2a4:	0800a2ff 	.word	0x0800a2ff
 800a2a8:	0800a325 	.word	0x0800a325
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b2:	2b03      	cmp	r3, #3
 800a2b4:	d107      	bne.n	800a2c6 <USBD_AUDIO_Setup+0xb6>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a2b6:	f107 0308 	add.w	r3, r7, #8
 800a2ba:	2202      	movs	r2, #2
 800a2bc:	4619      	mov	r1, r3
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f001 fb77 	bl	800b9b2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a2c4:	e057      	b.n	800a376 <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 800a2c6:	6839      	ldr	r1, [r7, #0]
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f001 fb01 	bl	800b8d0 <USBD_CtlError>
        ret = USBD_FAIL;
 800a2ce:	2303      	movs	r3, #3
 800a2d0:	75fb      	strb	r3, [r7, #23]
      break;
 800a2d2:	e050      	b.n	800a376 <USBD_AUDIO_Setup+0x166>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	885b      	ldrh	r3, [r3, #2]
 800a2d8:	0a1b      	lsrs	r3, r3, #8
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	2b21      	cmp	r3, #33	; 0x21
 800a2de:	d149      	bne.n	800a374 <USBD_AUDIO_Setup+0x164>
      {
        pbuf = USBD_AUDIO_CfgDesc + 18;
 800a2e0:	4b2b      	ldr	r3, [pc, #172]	; (800a390 <USBD_AUDIO_Setup+0x180>)
 800a2e2:	60fb      	str	r3, [r7, #12]
        len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	88db      	ldrh	r3, [r3, #6]
 800a2e8:	2b09      	cmp	r3, #9
 800a2ea:	bf28      	it	cs
 800a2ec:	2309      	movcs	r3, #9
 800a2ee:	817b      	strh	r3, [r7, #10]

        (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2f0:	897b      	ldrh	r3, [r7, #10]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	68f9      	ldr	r1, [r7, #12]
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f001 fb5b 	bl	800b9b2 <USBD_CtlSendData>
      }
      break;
 800a2fc:	e03a      	b.n	800a374 <USBD_AUDIO_Setup+0x164>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a304:	2b03      	cmp	r3, #3
 800a306:	d106      	bne.n	800a316 <USBD_AUDIO_Setup+0x106>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	2201      	movs	r2, #1
 800a30c:	4619      	mov	r1, r3
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f001 fb4f 	bl	800b9b2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a314:	e02f      	b.n	800a376 <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 800a316:	6839      	ldr	r1, [r7, #0]
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f001 fad9 	bl	800b8d0 <USBD_CtlError>
        ret = USBD_FAIL;
 800a31e:	2303      	movs	r3, #3
 800a320:	75fb      	strb	r3, [r7, #23]
      break;
 800a322:	e028      	b.n	800a376 <USBD_AUDIO_Setup+0x166>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a32a:	2b03      	cmp	r3, #3
 800a32c:	d112      	bne.n	800a354 <USBD_AUDIO_Setup+0x144>
      {
        if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	885b      	ldrh	r3, [r3, #2]
 800a332:	b2db      	uxtb	r3, r3
 800a334:	2b02      	cmp	r3, #2
 800a336:	d806      	bhi.n	800a346 <USBD_AUDIO_Setup+0x136>
        {
          haudio->alt_setting = (uint8_t)(req->wValue);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	885b      	ldrh	r3, [r3, #2]
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	461a      	mov	r2, r3
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	601a      	str	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a344:	e017      	b.n	800a376 <USBD_AUDIO_Setup+0x166>
          USBD_CtlError(pdev, req);
 800a346:	6839      	ldr	r1, [r7, #0]
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f001 fac1 	bl	800b8d0 <USBD_CtlError>
          ret = USBD_FAIL;
 800a34e:	2303      	movs	r3, #3
 800a350:	75fb      	strb	r3, [r7, #23]
      break;
 800a352:	e010      	b.n	800a376 <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f001 faba 	bl	800b8d0 <USBD_CtlError>
        ret = USBD_FAIL;
 800a35c:	2303      	movs	r3, #3
 800a35e:	75fb      	strb	r3, [r7, #23]
      break;
 800a360:	e009      	b.n	800a376 <USBD_AUDIO_Setup+0x166>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800a362:	6839      	ldr	r1, [r7, #0]
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f001 fab3 	bl	800b8d0 <USBD_CtlError>
      ret = USBD_FAIL;
 800a36a:	2303      	movs	r3, #3
 800a36c:	75fb      	strb	r3, [r7, #23]
      break;
 800a36e:	e002      	b.n	800a376 <USBD_AUDIO_Setup+0x166>
      break;
 800a370:	bf00      	nop
 800a372:	e008      	b.n	800a386 <USBD_AUDIO_Setup+0x176>
      break;
 800a374:	bf00      	nop
    }
    break;
 800a376:	e006      	b.n	800a386 <USBD_AUDIO_Setup+0x176>
  default:
    USBD_CtlError(pdev, req);
 800a378:	6839      	ldr	r1, [r7, #0]
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f001 faa8 	bl	800b8d0 <USBD_CtlError>
    ret = USBD_FAIL;
 800a380:	2303      	movs	r3, #3
 800a382:	75fb      	strb	r3, [r7, #23]
    break;
 800a384:	bf00      	nop
  }

  return (uint8_t)ret;
 800a386:	7dfb      	ldrb	r3, [r7, #23]
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3718      	adds	r7, #24
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	200000e2 	.word	0x200000e2

0800a394 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	226d      	movs	r2, #109	; 0x6d
 800a3a0:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 800a3a2:	4b03      	ldr	r3, [pc, #12]	; (800a3b0 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr
 800a3b0:	200000d0 	.word	0x200000d0

0800a3b4 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	370c      	adds	r7, #12
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b084      	sub	sp, #16
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3dc:	60fb      	str	r3, [r7, #12]

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a3e4:	330a      	adds	r3, #10
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d11d      	bne.n	800a428 <USBD_AUDIO_EP0_RxReady+0x5a>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800a3f2:	330c      	adds	r3, #12
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	d116      	bne.n	800a428 <USBD_AUDIO_EP0_RxReady+0x5a>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a400:	691a      	ldr	r2, [r3, #16]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a408:	330b      	adds	r3, #11
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	4618      	mov	r0, r3
 800a40e:	4790      	blx	r2
      haudio->control.cmd = 0U;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a416:	330a      	adds	r3, #10
 800a418:	2200      	movs	r2, #0
 800a41a:	701a      	strb	r2, [r3, #0]
      haudio->control.len = 0U;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800a422:	330b      	adds	r3, #11
 800a424:	2200      	movs	r2, #0
 800a426:	701a      	strb	r2, [r3, #0]
    }
  }

  return (uint8_t)USBD_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}

0800a432 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800a432:	b480      	push	{r7}
 800a434:	b083      	sub	sp, #12
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800a450:	2300      	movs	r3, #0
}
 800a452:	4618      	mov	r0, r3
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a45e:	b480      	push	{r7}
 800a460:	b083      	sub	sp, #12
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
 800a466:	460b      	mov	r3, r1
 800a468:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	460b      	mov	r3, r1
 800a482:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	370c      	adds	r7, #12
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr

0800a492 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a492:	b590      	push	{r4, r7, lr}
 800a494:	b085      	sub	sp, #20
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
 800a49a:	460b      	mov	r3, r1
 800a49c:	70fb      	strb	r3, [r7, #3]
  uint16_t PacketSize;
  USBD_AUDIO_HandleTypeDef *haudio;

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4a4:	60fb      	str	r3, [r7, #12]

  if (epnum == AUDIO_OUT_EP)
 800a4a6:	78fb      	ldrb	r3, [r7, #3]
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d16c      	bne.n	800a586 <USBD_AUDIO_DataOut+0xf4>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 800a4ac:	78fb      	ldrb	r3, [r7, #3]
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f002 f824 	bl	800c4fe <USBD_LL_GetRxDataSize>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4c0:	695c      	ldr	r4, [r3, #20]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a4c8:	3308      	adds	r3, #8
 800a4ca:	881b      	ldrh	r3, [r3, #0]
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	3304      	adds	r3, #4
 800a4d4:	8979      	ldrh	r1, [r7, #10]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	4618      	mov	r0, r3
 800a4da:	47a0      	blx	r4
                                                           PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a4e2:	3308      	adds	r3, #8
 800a4e4:	881a      	ldrh	r2, [r3, #0]
 800a4e6:	897b      	ldrh	r3, [r7, #10]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a4f2:	3308      	adds	r3, #8
 800a4f4:	801a      	strh	r2, [r3, #0]

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a4fc:	3308      	adds	r3, #8
 800a4fe:	881b      	ldrh	r3, [r3, #0]
 800a500:	f5b3 5fdc 	cmp.w	r3, #7040	; 0x1b80
 800a504:	d11c      	bne.n	800a540 <USBD_AUDIO_DataOut+0xae>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a50c:	3308      	adds	r3, #8
 800a50e:	2200      	movs	r2, #0
 800a510:	801a      	strh	r2, [r3, #0]

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a518:	3304      	adds	r3, #4
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	2b03      	cmp	r3, #3
 800a51e:	d10f      	bne.n	800a540 <USBD_AUDIO_DataOut+0xae>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	1d10      	adds	r0, r2, #4
 800a52c:	2201      	movs	r2, #1
 800a52e:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 800a532:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a53a:	3304      	adds	r3, #4
 800a53c:	2200      	movs	r2, #0
 800a53e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (haudio->rd_enable == 0U)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a546:	3305      	adds	r3, #5
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10d      	bne.n	800a56a <USBD_AUDIO_DataOut+0xd8>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a554:	3308      	adds	r3, #8
 800a556:	881b      	ldrh	r3, [r3, #0]
 800a558:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 800a55c:	d105      	bne.n	800a56a <USBD_AUDIO_DataOut+0xd8>
      {
        haudio->rd_enable = 1U;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a564:	3305      	adds	r3, #5
 800a566:	2201      	movs	r2, #1
 800a568:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
                                 &haudio->buffer[haudio->wr_ptr],
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a570:	3308      	adds	r3, #8
 800a572:	881b      	ldrh	r3, [r3, #0]
 800a574:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	4413      	add	r3, r2
 800a57a:	1d1a      	adds	r2, r3, #4
 800a57c:	2358      	movs	r3, #88	; 0x58
 800a57e:	2101      	movs	r1, #1
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f001 ff9b 	bl	800c4bc <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3714      	adds	r7, #20
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd90      	pop	{r4, r7, pc}

0800a590 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5a0:	60fb      	str	r3, [r7, #12]

  (void)USBD_memset(haudio->control.data, 0, 64U);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a5a8:	330b      	adds	r3, #11
 800a5aa:	2240      	movs	r2, #64	; 0x40
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f002 f81e 	bl	800c5f0 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a5ba:	330b      	adds	r3, #11
 800a5bc:	683a      	ldr	r2, [r7, #0]
 800a5be:	88d2      	ldrh	r2, [r2, #6]
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f001 f9f5 	bl	800b9b2 <USBD_CtlSendData>
}
 800a5c8:	bf00      	nop
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5e0:	60fb      	str	r3, [r7, #12]

  if (req->wLength != 0U)
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	88db      	ldrh	r3, [r3, #6]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d021      	beq.n	800a62e <AUDIO_REQ_SetCurrent+0x5e>
  {
    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a5f0:	330b      	adds	r3, #11
 800a5f2:	683a      	ldr	r2, [r7, #0]
 800a5f4:	88d2      	ldrh	r2, [r2, #6]
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f001 fa06 	bl	800ba0a <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a604:	330a      	adds	r3, #10
 800a606:	2201      	movs	r2, #1
 800a608:	701a      	strb	r2, [r3, #0]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	88db      	ldrh	r3, [r3, #6]
 800a60e:	b2da      	uxtb	r2, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800a616:	330b      	adds	r3, #11
 800a618:	701a      	strb	r2, [r3, #0]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	889b      	ldrh	r3, [r3, #4]
 800a61e:	0a1b      	lsrs	r3, r3, #8
 800a620:	b29b      	uxth	r3, r3
 800a622:	b2da      	uxtb	r2, r3
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800a62a:	330c      	adds	r3, #12
 800a62c:	701a      	strb	r2, [r3, #0]
  }
}
 800a62e:	bf00      	nop
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
	...

0800a638 <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	220a      	movs	r2, #10
 800a644:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 800a646:	4b03      	ldr	r3, [pc, #12]	; (800a654 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 800a648:	4618      	mov	r0, r3
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr
 800a654:	20000140 	.word	0x20000140

0800a658 <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d101      	bne.n	800a66c <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a668:	2303      	movs	r3, #3
 800a66a:	e004      	b.n	800a676 <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	683a      	ldr	r2, [r7, #0]
 800a670:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	370c      	adds	r7, #12
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
	...

0800a684 <USBD_MIDI_Init>:
  // IN endpoint descriptor
  0x09, 0x05, MIDI_IN_EP, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x25, 0x01, 0x01, 0x03,
};

static uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	460b      	mov	r3, r1
 800a68e:	70fb      	strb	r3, [r7, #3]
  pInstance = pdev;
 800a690:	4a0c      	ldr	r2, [pc, #48]	; (800a6c4 <USBD_MIDI_Init+0x40>)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6013      	str	r3, [r2, #0]
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 800a696:	2340      	movs	r3, #64	; 0x40
 800a698:	2202      	movs	r2, #2
 800a69a:	2181      	movs	r1, #129	; 0x81
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f001 fe1e 	bl	800c2de <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 800a6a2:	2340      	movs	r3, #64	; 0x40
 800a6a4:	2202      	movs	r2, #2
 800a6a6:	2101      	movs	r1, #1
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f001 fe18 	bl	800c2de <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 800a6ae:	2340      	movs	r3, #64	; 0x40
 800a6b0:	4a05      	ldr	r2, [pc, #20]	; (800a6c8 <USBD_MIDI_Init+0x44>)
 800a6b2:	2101      	movs	r1, #1
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f001 ff01 	bl	800c4bc <USBD_LL_PrepareReceive>
  return 0;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	20000388 	.word	0x20000388
 800a6c8:	20000898 	.word	0x20000898

0800a6cc <USBD_MIDI_DeInit>:

static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	70fb      	strb	r3, [r7, #3]
  pInstance = NULL;
 800a6d8:	4b07      	ldr	r3, [pc, #28]	; (800a6f8 <USBD_MIDI_DeInit+0x2c>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	601a      	str	r2, [r3, #0]
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 800a6de:	2181      	movs	r1, #129	; 0x81
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f001 fe22 	bl	800c32a <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,MIDI_OUT_EP);
 800a6e6:	2101      	movs	r1, #1
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f001 fe1e 	bl	800c32a <USBD_LL_CloseEP>
  return 0;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	20000388 	.word	0x20000388

0800a6fc <USBD_MIDI_DataIn>:

//midi data incoming to host
static uint8_t USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum){
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	460b      	mov	r3, r1
 800a706:	70fb      	strb	r3, [r7, #3]

  if (USB_Tx_State == 1){
 800a708:	4b06      	ldr	r3, [pc, #24]	; (800a724 <USBD_MIDI_DataIn+0x28>)
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d102      	bne.n	800a716 <USBD_MIDI_DataIn+0x1a>
    USB_Tx_State = 0;
 800a710:	4b04      	ldr	r3, [pc, #16]	; (800a724 <USBD_MIDI_DataIn+0x28>)
 800a712:	2200      	movs	r2, #0
 800a714:	701a      	strb	r2, [r3, #0]
  }

  return USBD_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr
 800a724:	20000398 	.word	0x20000398

0800a728 <USBD_MIDI_DataOut>:

//midi data outcoming from host
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	460b      	mov	r3, r1
 800a732:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;

  USBD_MIDI_ItfTypeDef *pmidi;
  pmidi = (USBD_MIDI_ItfTypeDef *)(pdev->pUserData);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a73a:	60fb      	str	r3, [r7, #12]

  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
 800a742:	78fa      	ldrb	r2, [r7, #3]
 800a744:	4613      	mov	r3, r2
 800a746:	00db      	lsls	r3, r3, #3
 800a748:	1a9b      	subs	r3, r3, r2
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	440b      	add	r3, r1
 800a74e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	817b      	strh	r3, [r7, #10]

  pmidi->pIf_MidiRx((uint8_t *)&USB_Rx_Buffer, USB_Rx_Cnt);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	897a      	ldrh	r2, [r7, #10]
 800a75c:	4611      	mov	r1, r2
 800a75e:	4806      	ldr	r0, [pc, #24]	; (800a778 <USBD_MIDI_DataOut+0x50>)
 800a760:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 800a762:	2340      	movs	r3, #64	; 0x40
 800a764:	4a04      	ldr	r2, [pc, #16]	; (800a778 <USBD_MIDI_DataOut+0x50>)
 800a766:	2101      	movs	r1, #1
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f001 fea7 	bl	800c4bc <USBD_LL_PrepareReceive>
  return USBD_OK;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	20000898 	.word	0x20000898

0800a77c <USBD_MIDI_SendPacket>:

void USBD_MIDI_SendPacket (){
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if(USB_Tx_State != 1){
 800a782:	4b30      	ldr	r3, [pc, #192]	; (800a844 <USBD_MIDI_SendPacket+0xc8>)
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d059      	beq.n	800a83e <USBD_MIDI_SendPacket+0xc2>
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE){
 800a78a:	4b2f      	ldr	r3, [pc, #188]	; (800a848 <USBD_MIDI_SendPacket+0xcc>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a792:	d102      	bne.n	800a79a <USBD_MIDI_SendPacket+0x1e>
      APP_Rx_ptr_out = 0;
 800a794:	4b2c      	ldr	r3, [pc, #176]	; (800a848 <USBD_MIDI_SendPacket+0xcc>)
 800a796:	2200      	movs	r2, #0
 800a798:	601a      	str	r2, [r3, #0]
    }

    if(APP_Rx_ptr_out == APP_Rx_ptr_in){
 800a79a:	4b2b      	ldr	r3, [pc, #172]	; (800a848 <USBD_MIDI_SendPacket+0xcc>)
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	4b2b      	ldr	r3, [pc, #172]	; (800a84c <USBD_MIDI_SendPacket+0xd0>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d103      	bne.n	800a7ae <USBD_MIDI_SendPacket+0x32>
      USB_Tx_State = 0;
 800a7a6:	4b27      	ldr	r3, [pc, #156]	; (800a844 <USBD_MIDI_SendPacket+0xc8>)
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	701a      	strb	r2, [r3, #0]
      return;
 800a7ac:	e047      	b.n	800a83e <USBD_MIDI_SendPacket+0xc2>
    }

    if(APP_Rx_ptr_out > APP_Rx_ptr_in){
 800a7ae:	4b26      	ldr	r3, [pc, #152]	; (800a848 <USBD_MIDI_SendPacket+0xcc>)
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	4b26      	ldr	r3, [pc, #152]	; (800a84c <USBD_MIDI_SendPacket+0xd0>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d906      	bls.n	800a7c8 <USBD_MIDI_SendPacket+0x4c>
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 800a7ba:	4b23      	ldr	r3, [pc, #140]	; (800a848 <USBD_MIDI_SendPacket+0xcc>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a7c2:	4a23      	ldr	r2, [pc, #140]	; (800a850 <USBD_MIDI_SendPacket+0xd4>)
 800a7c4:	6013      	str	r3, [r2, #0]
 800a7c6:	e006      	b.n	800a7d6 <USBD_MIDI_SendPacket+0x5a>
    }else{
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 800a7c8:	4b20      	ldr	r3, [pc, #128]	; (800a84c <USBD_MIDI_SendPacket+0xd0>)
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	4b1e      	ldr	r3, [pc, #120]	; (800a848 <USBD_MIDI_SendPacket+0xcc>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	1ad3      	subs	r3, r2, r3
 800a7d2:	4a1f      	ldr	r2, [pc, #124]	; (800a850 <USBD_MIDI_SendPacket+0xd4>)
 800a7d4:	6013      	str	r3, [r2, #0]
    }

    if (APP_Rx_length > MIDI_DATA_IN_PACKET_SIZE){
 800a7d6:	4b1e      	ldr	r3, [pc, #120]	; (800a850 <USBD_MIDI_SendPacket+0xd4>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2b40      	cmp	r3, #64	; 0x40
 800a7dc:	d90f      	bls.n	800a7fe <USBD_MIDI_SendPacket+0x82>
      USB_Tx_ptr = APP_Rx_ptr_out;
 800a7de:	4b1a      	ldr	r3, [pc, #104]	; (800a848 <USBD_MIDI_SendPacket+0xcc>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = MIDI_DATA_IN_PACKET_SIZE;
 800a7e4:	2340      	movs	r3, #64	; 0x40
 800a7e6:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += MIDI_DATA_IN_PACKET_SIZE;
 800a7e8:	4b17      	ldr	r3, [pc, #92]	; (800a848 <USBD_MIDI_SendPacket+0xcc>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	3340      	adds	r3, #64	; 0x40
 800a7ee:	4a16      	ldr	r2, [pc, #88]	; (800a848 <USBD_MIDI_SendPacket+0xcc>)
 800a7f0:	6013      	str	r3, [r2, #0]
      APP_Rx_length -= MIDI_DATA_IN_PACKET_SIZE;
 800a7f2:	4b17      	ldr	r3, [pc, #92]	; (800a850 <USBD_MIDI_SendPacket+0xd4>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	3b40      	subs	r3, #64	; 0x40
 800a7f8:	4a15      	ldr	r2, [pc, #84]	; (800a850 <USBD_MIDI_SendPacket+0xd4>)
 800a7fa:	6013      	str	r3, [r2, #0]
 800a7fc:	e00f      	b.n	800a81e <USBD_MIDI_SendPacket+0xa2>
    }else{
      USB_Tx_ptr = APP_Rx_ptr_out;
 800a7fe:	4b12      	ldr	r3, [pc, #72]	; (800a848 <USBD_MIDI_SendPacket+0xcc>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = APP_Rx_length;
 800a804:	4b12      	ldr	r3, [pc, #72]	; (800a850 <USBD_MIDI_SendPacket+0xd4>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += APP_Rx_length;
 800a80a:	4b0f      	ldr	r3, [pc, #60]	; (800a848 <USBD_MIDI_SendPacket+0xcc>)
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	4b10      	ldr	r3, [pc, #64]	; (800a850 <USBD_MIDI_SendPacket+0xd4>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4413      	add	r3, r2
 800a814:	4a0c      	ldr	r2, [pc, #48]	; (800a848 <USBD_MIDI_SendPacket+0xcc>)
 800a816:	6013      	str	r3, [r2, #0]
      APP_Rx_length = 0;
 800a818:	4b0d      	ldr	r3, [pc, #52]	; (800a850 <USBD_MIDI_SendPacket+0xd4>)
 800a81a:	2200      	movs	r2, #0
 800a81c:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1;
 800a81e:	4b09      	ldr	r3, [pc, #36]	; (800a844 <USBD_MIDI_SendPacket+0xc8>)
 800a820:	2201      	movs	r2, #1
 800a822:	701a      	strb	r2, [r3, #0]
    while(USBD_LL_Transmit(pInstance,
 800a824:	bf00      	nop
 800a826:	4b0b      	ldr	r3, [pc, #44]	; (800a854 <USBD_MIDI_SendPacket+0xd8>)
 800a828:	6818      	ldr	r0, [r3, #0]
    		MIDI_IN_EP,(uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],USB_Tx_length) != USBD_OK);
 800a82a:	88fb      	ldrh	r3, [r7, #6]
    while(USBD_LL_Transmit(pInstance,
 800a82c:	4a0a      	ldr	r2, [pc, #40]	; (800a858 <USBD_MIDI_SendPacket+0xdc>)
 800a82e:	441a      	add	r2, r3
 800a830:	88bb      	ldrh	r3, [r7, #4]
 800a832:	2181      	movs	r1, #129	; 0x81
 800a834:	f001 fe21 	bl	800c47a <USBD_LL_Transmit>
 800a838:	4603      	mov	r3, r0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1f3      	bne.n	800a826 <USBD_MIDI_SendPacket+0xaa>
  }
}
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}
 800a844:	20000398 	.word	0x20000398
 800a848:	20000390 	.word	0x20000390
 800a84c:	2000038c 	.word	0x2000038c
 800a850:	20000394 	.word	0x20000394
 800a854:	20000388 	.word	0x20000388
 800a858:	200008d8 	.word	0x200008d8

0800a85c <USBD_MIDI_GetCfgDesc>:

static uint8_t *USBD_MIDI_GetCfgDesc (uint16_t *length){
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2265      	movs	r2, #101	; 0x65
 800a868:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 800a86a:	4b03      	ldr	r3, [pc, #12]	; (800a878 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr
 800a878:	20000184 	.word	0x20000184

0800a87c <USBD_MIDI_RegisterInterface>:
//  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
//  return USBD_MIDI_DeviceQualifierDesc;
//}

uint8_t USBD_MIDI_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_MIDI_ItfTypeDef *fops)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b085      	sub	sp, #20
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  uint8_t ret = USBD_FAIL;
 800a886:	2303      	movs	r3, #3
 800a888:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL){
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d005      	beq.n	800a89c <USBD_MIDI_RegisterInterface+0x20>
    pdev->pUserData= fops;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	683a      	ldr	r2, [r7, #0]
 800a894:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;    
 800a898:	2300      	movs	r3, #0
 800a89a:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800a89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3714      	adds	r7, #20
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr

0800a8aa <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b086      	sub	sp, #24
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	60f8      	str	r0, [r7, #12]
 800a8b2:	60b9      	str	r1, [r7, #8]
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d101      	bne.n	800a8c2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a8be:	2303      	movs	r3, #3
 800a8c0:	e025      	b.n	800a90e <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d003      	beq.n	800a8d4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d003      	beq.n	800a8e6 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d003      	beq.n	800a8f4 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	68ba      	ldr	r2, [r7, #8]
 800a8f0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	79fa      	ldrb	r2, [r7, #7]
 800a900:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f001 fc84 	bl	800c210 <USBD_LL_Init>
 800a908:	4603      	mov	r3, r0
 800a90a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a90c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3718      	adds	r7, #24
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b084      	sub	sp, #16
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
 800a91e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a920:	2300      	movs	r3, #0
 800a922:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d101      	bne.n	800a92e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a92a:	2303      	movs	r3, #3
 800a92c:	e010      	b.n	800a950 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	683a      	ldr	r2, [r7, #0]
 800a932:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93e:	f107 020e 	add.w	r2, r7, #14
 800a942:	4610      	mov	r0, r2
 800a944:	4798      	blx	r3
 800a946:	4602      	mov	r2, r0
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
#endif /* USE_USB_FS */


  return USBD_OK;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3710      	adds	r7, #16
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f001 fca1 	bl	800c2a8 <USBD_LL_Start>
 800a966:	4603      	mov	r3, r0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3708      	adds	r7, #8
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	370c      	adds	r7, #12
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr

0800a986 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b084      	sub	sp, #16
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
 800a98e:	460b      	mov	r3, r1
 800a990:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a992:	2303      	movs	r3, #3
 800a994:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d009      	beq.n	800a9b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	78fa      	ldrb	r2, [r7, #3]
 800a9aa:	4611      	mov	r1, r2
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	4798      	blx	r3
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a9b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b082      	sub	sp, #8
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d007      	beq.n	800a9e4 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	78fa      	ldrb	r2, [r7, #3]
 800a9de:	4611      	mov	r1, r2
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	4798      	blx	r3
  }

  return USBD_OK;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3708      	adds	r7, #8
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b084      	sub	sp, #16
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a9fe:	6839      	ldr	r1, [r7, #0]
 800aa00:	4618      	mov	r0, r3
 800aa02:	f000 ff2b 	bl	800b85c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800aa14:	461a      	mov	r2, r3
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aa22:	f003 031f 	and.w	r3, r3, #31
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d00e      	beq.n	800aa48 <USBD_LL_SetupStage+0x5a>
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d302      	bcc.n	800aa34 <USBD_LL_SetupStage+0x46>
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d014      	beq.n	800aa5c <USBD_LL_SetupStage+0x6e>
 800aa32:	e01d      	b.n	800aa70 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 fa17 	bl	800ae70 <USBD_StdDevReq>
 800aa42:	4603      	mov	r3, r0
 800aa44:	73fb      	strb	r3, [r7, #15]
      break;
 800aa46:	e020      	b.n	800aa8a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa4e:	4619      	mov	r1, r3
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 fa7b 	bl	800af4c <USBD_StdItfReq>
 800aa56:	4603      	mov	r3, r0
 800aa58:	73fb      	strb	r3, [r7, #15]
      break;
 800aa5a:	e016      	b.n	800aa8a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa62:	4619      	mov	r1, r3
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 fab7 	bl	800afd8 <USBD_StdEPReq>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	73fb      	strb	r3, [r7, #15]
      break;
 800aa6e:	e00c      	b.n	800aa8a <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aa76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f001 fc72 	bl	800c368 <USBD_LL_StallEP>
 800aa84:	4603      	mov	r3, r0
 800aa86:	73fb      	strb	r3, [r7, #15]
      break;
 800aa88:	bf00      	nop
  }

  return ret;
 800aa8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b086      	sub	sp, #24
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	607a      	str	r2, [r7, #4]
 800aaa0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aaa2:	7afb      	ldrb	r3, [r7, #11]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d137      	bne.n	800ab18 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aaae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aab6:	2b03      	cmp	r3, #3
 800aab8:	d14a      	bne.n	800ab50 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	689a      	ldr	r2, [r3, #8]
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d913      	bls.n	800aaee <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	689a      	ldr	r2, [r3, #8]
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	1ad2      	subs	r2, r2, r3
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	68da      	ldr	r2, [r3, #12]
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	4293      	cmp	r3, r2
 800aade:	bf28      	it	cs
 800aae0:	4613      	movcs	r3, r2
 800aae2:	461a      	mov	r2, r3
 800aae4:	6879      	ldr	r1, [r7, #4]
 800aae6:	68f8      	ldr	r0, [r7, #12]
 800aae8:	f000 ffac 	bl	800ba44 <USBD_CtlContinueRx>
 800aaec:	e030      	b.n	800ab50 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00a      	beq.n	800ab10 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ab00:	2b03      	cmp	r3, #3
 800ab02:	d105      	bne.n	800ab10 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f000 ffa8 	bl	800ba66 <USBD_CtlSendStatus>
 800ab16:	e01b      	b.n	800ab50 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab1e:	699b      	ldr	r3, [r3, #24]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d013      	beq.n	800ab4c <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ab2a:	2b03      	cmp	r3, #3
 800ab2c:	d10e      	bne.n	800ab4c <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab34:	699b      	ldr	r3, [r3, #24]
 800ab36:	7afa      	ldrb	r2, [r7, #11]
 800ab38:	4611      	mov	r1, r2
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	4798      	blx	r3
 800ab3e:	4603      	mov	r3, r0
 800ab40:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ab42:	7dfb      	ldrb	r3, [r7, #23]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d003      	beq.n	800ab50 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800ab48:	7dfb      	ldrb	r3, [r7, #23]
 800ab4a:	e002      	b.n	800ab52 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	e000      	b.n	800ab52 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3718      	adds	r7, #24
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b086      	sub	sp, #24
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	60f8      	str	r0, [r7, #12]
 800ab62:	460b      	mov	r3, r1
 800ab64:	607a      	str	r2, [r7, #4]
 800ab66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ab68:	7afb      	ldrb	r3, [r7, #11]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d16a      	bne.n	800ac44 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	3314      	adds	r3, #20
 800ab72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d155      	bne.n	800ac2a <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	689a      	ldr	r2, [r3, #8]
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d914      	bls.n	800abb4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	689a      	ldr	r2, [r3, #8]
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	1ad2      	subs	r2, r2, r3
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	6879      	ldr	r1, [r7, #4]
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f000 ff21 	bl	800b9e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aba6:	2300      	movs	r3, #0
 800aba8:	2200      	movs	r2, #0
 800abaa:	2100      	movs	r1, #0
 800abac:	68f8      	ldr	r0, [r7, #12]
 800abae:	f001 fc85 	bl	800c4bc <USBD_LL_PrepareReceive>
 800abb2:	e03a      	b.n	800ac2a <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	68da      	ldr	r2, [r3, #12]
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d11c      	bne.n	800abfa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	685a      	ldr	r2, [r3, #4]
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800abc8:	429a      	cmp	r2, r3
 800abca:	d316      	bcc.n	800abfa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	685a      	ldr	r2, [r3, #4]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d20f      	bcs.n	800abfa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800abda:	2200      	movs	r2, #0
 800abdc:	2100      	movs	r1, #0
 800abde:	68f8      	ldr	r0, [r7, #12]
 800abe0:	f000 ff02 	bl	800b9e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abec:	2300      	movs	r3, #0
 800abee:	2200      	movs	r2, #0
 800abf0:	2100      	movs	r1, #0
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f001 fc62 	bl	800c4bc <USBD_LL_PrepareReceive>
 800abf8:	e017      	b.n	800ac2a <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00a      	beq.n	800ac1c <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ac0c:	2b03      	cmp	r3, #3
 800ac0e:	d105      	bne.n	800ac1c <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac1c:	2180      	movs	r1, #128	; 0x80
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	f001 fba2 	bl	800c368 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f000 ff31 	bl	800ba8c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d123      	bne.n	800ac7c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ac34:	68f8      	ldr	r0, [r7, #12]
 800ac36:	f7ff fe9b 	bl	800a970 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ac42:	e01b      	b.n	800ac7c <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac4a:	695b      	ldr	r3, [r3, #20]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d013      	beq.n	800ac78 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ac56:	2b03      	cmp	r3, #3
 800ac58:	d10e      	bne.n	800ac78 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	7afa      	ldrb	r2, [r7, #11]
 800ac64:	4611      	mov	r1, r2
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	4798      	blx	r3
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ac6e:	7dfb      	ldrb	r3, [r7, #23]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d003      	beq.n	800ac7c <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800ac74:	7dfb      	ldrb	r3, [r7, #23]
 800ac76:	e002      	b.n	800ac7e <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ac78:	2303      	movs	r3, #3
 800ac7a:	e000      	b.n	800ac7e <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3718      	adds	r7, #24
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b082      	sub	sp, #8
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2201      	movs	r2, #1
 800ac92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d009      	beq.n	800acca <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	6852      	ldr	r2, [r2, #4]
 800acc2:	b2d2      	uxtb	r2, r2
 800acc4:	4611      	mov	r1, r2
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800acca:	2340      	movs	r3, #64	; 0x40
 800accc:	2200      	movs	r2, #0
 800acce:	2100      	movs	r1, #0
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f001 fb04 	bl	800c2de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2201      	movs	r2, #1
 800acda:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2240      	movs	r2, #64	; 0x40
 800ace2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ace6:	2340      	movs	r3, #64	; 0x40
 800ace8:	2200      	movs	r2, #0
 800acea:	2180      	movs	r1, #128	; 0x80
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f001 faf6 	bl	800c2de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2201      	movs	r2, #1
 800acf6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2240      	movs	r2, #64	; 0x40
 800acfc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800acfe:	2300      	movs	r3, #0
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	460b      	mov	r3, r1
 800ad12:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	78fa      	ldrb	r2, [r7, #3]
 800ad18:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2204      	movs	r2, #4
 800ad40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	370c      	adds	r7, #12
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr

0800ad52 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ad52:	b480      	push	{r7}
 800ad54:	b083      	sub	sp, #12
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad60:	2b04      	cmp	r3, #4
 800ad62:	d105      	bne.n	800ad70 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	370c      	adds	r7, #12
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b082      	sub	sp, #8
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad8c:	2b03      	cmp	r3, #3
 800ad8e:	d10b      	bne.n	800ada8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad96:	69db      	ldr	r3, [r3, #28]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d005      	beq.n	800ada8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ada2:	69db      	ldr	r3, [r3, #28]
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800adb2:	b480      	push	{r7}
 800adb4:	b083      	sub	sp, #12
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
 800adba:	460b      	mov	r3, r1
 800adbc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800adcc:	b480      	push	{r7}
 800adce:	b083      	sub	sp, #12
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	460b      	mov	r3, r1
 800add6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	370c      	adds	r7, #12
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ade6:	b480      	push	{r7}
 800ade8:	b083      	sub	sp, #12
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2201      	movs	r2, #1
 800ae08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d009      	beq.n	800ae2a <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	6852      	ldr	r2, [r2, #4]
 800ae22:	b2d2      	uxtb	r2, r2
 800ae24:	4611      	mov	r1, r2
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	4798      	blx	r3
  }

  return USBD_OK;
 800ae2a:	2300      	movs	r3, #0
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b087      	sub	sp, #28
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ae52:	8a3b      	ldrh	r3, [r7, #16]
 800ae54:	021b      	lsls	r3, r3, #8
 800ae56:	b21a      	sxth	r2, r3
 800ae58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	b21b      	sxth	r3, r3
 800ae60:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ae62:	89fb      	ldrh	r3, [r7, #14]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	371c      	adds	r7, #28
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae86:	2b20      	cmp	r3, #32
 800ae88:	d004      	beq.n	800ae94 <USBD_StdDevReq+0x24>
 800ae8a:	2b40      	cmp	r3, #64	; 0x40
 800ae8c:	d002      	beq.n	800ae94 <USBD_StdDevReq+0x24>
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00a      	beq.n	800aea8 <USBD_StdDevReq+0x38>
 800ae92:	e050      	b.n	800af36 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	6839      	ldr	r1, [r7, #0]
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	4798      	blx	r3
 800aea2:	4603      	mov	r3, r0
 800aea4:	73fb      	strb	r3, [r7, #15]
    break;
 800aea6:	e04b      	b.n	800af40 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	785b      	ldrb	r3, [r3, #1]
 800aeac:	2b09      	cmp	r3, #9
 800aeae:	d83c      	bhi.n	800af2a <USBD_StdDevReq+0xba>
 800aeb0:	a201      	add	r2, pc, #4	; (adr r2, 800aeb8 <USBD_StdDevReq+0x48>)
 800aeb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb6:	bf00      	nop
 800aeb8:	0800af0d 	.word	0x0800af0d
 800aebc:	0800af21 	.word	0x0800af21
 800aec0:	0800af2b 	.word	0x0800af2b
 800aec4:	0800af17 	.word	0x0800af17
 800aec8:	0800af2b 	.word	0x0800af2b
 800aecc:	0800aeeb 	.word	0x0800aeeb
 800aed0:	0800aee1 	.word	0x0800aee1
 800aed4:	0800af2b 	.word	0x0800af2b
 800aed8:	0800af03 	.word	0x0800af03
 800aedc:	0800aef5 	.word	0x0800aef5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800aee0:	6839      	ldr	r1, [r7, #0]
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 f9ce 	bl	800b284 <USBD_GetDescriptor>
      break;
 800aee8:	e024      	b.n	800af34 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800aeea:	6839      	ldr	r1, [r7, #0]
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 fb33 	bl	800b558 <USBD_SetAddress>
      break;
 800aef2:	e01f      	b.n	800af34 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800aef4:	6839      	ldr	r1, [r7, #0]
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 fb70 	bl	800b5dc <USBD_SetConfig>
 800aefc:	4603      	mov	r3, r0
 800aefe:	73fb      	strb	r3, [r7, #15]
      break;
 800af00:	e018      	b.n	800af34 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800af02:	6839      	ldr	r1, [r7, #0]
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 fc0d 	bl	800b724 <USBD_GetConfig>
      break;
 800af0a:	e013      	b.n	800af34 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800af0c:	6839      	ldr	r1, [r7, #0]
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 fc3c 	bl	800b78c <USBD_GetStatus>
      break;
 800af14:	e00e      	b.n	800af34 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 fc6a 	bl	800b7f2 <USBD_SetFeature>
      break;
 800af1e:	e009      	b.n	800af34 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800af20:	6839      	ldr	r1, [r7, #0]
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 fc79 	bl	800b81a <USBD_ClrFeature>
      break;
 800af28:	e004      	b.n	800af34 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800af2a:	6839      	ldr	r1, [r7, #0]
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 fccf 	bl	800b8d0 <USBD_CtlError>
      break;
 800af32:	bf00      	nop
    }
    break;
 800af34:	e004      	b.n	800af40 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800af36:	6839      	ldr	r1, [r7, #0]
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 fcc9 	bl	800b8d0 <USBD_CtlError>
    break;
 800af3e:	bf00      	nop
  }

  return ret;
 800af40:	7bfb      	ldrb	r3, [r7, #15]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop

0800af4c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af56:	2300      	movs	r3, #0
 800af58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af62:	2b20      	cmp	r3, #32
 800af64:	d003      	beq.n	800af6e <USBD_StdItfReq+0x22>
 800af66:	2b40      	cmp	r3, #64	; 0x40
 800af68:	d001      	beq.n	800af6e <USBD_StdItfReq+0x22>
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d12a      	bne.n	800afc4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af74:	3b01      	subs	r3, #1
 800af76:	2b02      	cmp	r3, #2
 800af78:	d81d      	bhi.n	800afb6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	889b      	ldrh	r3, [r3, #4]
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	2b02      	cmp	r3, #2
 800af82:	d813      	bhi.n	800afac <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	6839      	ldr	r1, [r7, #0]
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	4798      	blx	r3
 800af92:	4603      	mov	r3, r0
 800af94:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	88db      	ldrh	r3, [r3, #6]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d110      	bne.n	800afc0 <USBD_StdItfReq+0x74>
 800af9e:	7bfb      	ldrb	r3, [r7, #15]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10d      	bne.n	800afc0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 fd5e 	bl	800ba66 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800afaa:	e009      	b.n	800afc0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800afac:	6839      	ldr	r1, [r7, #0]
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 fc8e 	bl	800b8d0 <USBD_CtlError>
      break;
 800afb4:	e004      	b.n	800afc0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800afb6:	6839      	ldr	r1, [r7, #0]
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 fc89 	bl	800b8d0 <USBD_CtlError>
      break;
 800afbe:	e000      	b.n	800afc2 <USBD_StdItfReq+0x76>
      break;
 800afc0:	bf00      	nop
    }
    break;
 800afc2:	e004      	b.n	800afce <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800afc4:	6839      	ldr	r1, [r7, #0]
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 fc82 	bl	800b8d0 <USBD_CtlError>
    break;
 800afcc:	bf00      	nop
  }

  return ret;
 800afce:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3710      	adds	r7, #16
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800afe2:	2300      	movs	r3, #0
 800afe4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	889b      	ldrh	r3, [r3, #4]
 800afea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aff4:	2b20      	cmp	r3, #32
 800aff6:	d004      	beq.n	800b002 <USBD_StdEPReq+0x2a>
 800aff8:	2b40      	cmp	r3, #64	; 0x40
 800affa:	d002      	beq.n	800b002 <USBD_StdEPReq+0x2a>
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00a      	beq.n	800b016 <USBD_StdEPReq+0x3e>
 800b000:	e135      	b.n	800b26e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	6839      	ldr	r1, [r7, #0]
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	4798      	blx	r3
 800b010:	4603      	mov	r3, r0
 800b012:	73fb      	strb	r3, [r7, #15]
    break;
 800b014:	e130      	b.n	800b278 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	785b      	ldrb	r3, [r3, #1]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d03e      	beq.n	800b09c <USBD_StdEPReq+0xc4>
 800b01e:	2b03      	cmp	r3, #3
 800b020:	d002      	beq.n	800b028 <USBD_StdEPReq+0x50>
 800b022:	2b00      	cmp	r3, #0
 800b024:	d077      	beq.n	800b116 <USBD_StdEPReq+0x13e>
 800b026:	e11c      	b.n	800b262 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b02e:	2b02      	cmp	r3, #2
 800b030:	d002      	beq.n	800b038 <USBD_StdEPReq+0x60>
 800b032:	2b03      	cmp	r3, #3
 800b034:	d015      	beq.n	800b062 <USBD_StdEPReq+0x8a>
 800b036:	e02b      	b.n	800b090 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b038:	7bbb      	ldrb	r3, [r7, #14]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00c      	beq.n	800b058 <USBD_StdEPReq+0x80>
 800b03e:	7bbb      	ldrb	r3, [r7, #14]
 800b040:	2b80      	cmp	r3, #128	; 0x80
 800b042:	d009      	beq.n	800b058 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b044:	7bbb      	ldrb	r3, [r7, #14]
 800b046:	4619      	mov	r1, r3
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f001 f98d 	bl	800c368 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b04e:	2180      	movs	r1, #128	; 0x80
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f001 f989 	bl	800c368 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b056:	e020      	b.n	800b09a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800b058:	6839      	ldr	r1, [r7, #0]
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 fc38 	bl	800b8d0 <USBD_CtlError>
        break;
 800b060:	e01b      	b.n	800b09a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	885b      	ldrh	r3, [r3, #2]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d10e      	bne.n	800b088 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b06a:	7bbb      	ldrb	r3, [r7, #14]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d00b      	beq.n	800b088 <USBD_StdEPReq+0xb0>
 800b070:	7bbb      	ldrb	r3, [r7, #14]
 800b072:	2b80      	cmp	r3, #128	; 0x80
 800b074:	d008      	beq.n	800b088 <USBD_StdEPReq+0xb0>
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	88db      	ldrh	r3, [r3, #6]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d104      	bne.n	800b088 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800b07e:	7bbb      	ldrb	r3, [r7, #14]
 800b080:	4619      	mov	r1, r3
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f001 f970 	bl	800c368 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 fcec 	bl	800ba66 <USBD_CtlSendStatus>

        break;
 800b08e:	e004      	b.n	800b09a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800b090:	6839      	ldr	r1, [r7, #0]
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 fc1c 	bl	800b8d0 <USBD_CtlError>
        break;
 800b098:	bf00      	nop
      }
      break;
 800b09a:	e0e7      	b.n	800b26c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d002      	beq.n	800b0ac <USBD_StdEPReq+0xd4>
 800b0a6:	2b03      	cmp	r3, #3
 800b0a8:	d015      	beq.n	800b0d6 <USBD_StdEPReq+0xfe>
 800b0aa:	e02d      	b.n	800b108 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0ac:	7bbb      	ldrb	r3, [r7, #14]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00c      	beq.n	800b0cc <USBD_StdEPReq+0xf4>
 800b0b2:	7bbb      	ldrb	r3, [r7, #14]
 800b0b4:	2b80      	cmp	r3, #128	; 0x80
 800b0b6:	d009      	beq.n	800b0cc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0b8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f001 f953 	bl	800c368 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0c2:	2180      	movs	r1, #128	; 0x80
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f001 f94f 	bl	800c368 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b0ca:	e023      	b.n	800b114 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800b0cc:	6839      	ldr	r1, [r7, #0]
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 fbfe 	bl	800b8d0 <USBD_CtlError>
        break;
 800b0d4:	e01e      	b.n	800b114 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	885b      	ldrh	r3, [r3, #2]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d119      	bne.n	800b112 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800b0de:	7bbb      	ldrb	r3, [r7, #14]
 800b0e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d004      	beq.n	800b0f2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b0e8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f001 f95a 	bl	800c3a6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 fcb7 	bl	800ba66 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	6839      	ldr	r1, [r7, #0]
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	4798      	blx	r3
        }
        break;
 800b106:	e004      	b.n	800b112 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 fbe0 	bl	800b8d0 <USBD_CtlError>
        break;
 800b110:	e000      	b.n	800b114 <USBD_StdEPReq+0x13c>
        break;
 800b112:	bf00      	nop
      }
      break;
 800b114:	e0aa      	b.n	800b26c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	d002      	beq.n	800b126 <USBD_StdEPReq+0x14e>
 800b120:	2b03      	cmp	r3, #3
 800b122:	d032      	beq.n	800b18a <USBD_StdEPReq+0x1b2>
 800b124:	e097      	b.n	800b256 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b126:	7bbb      	ldrb	r3, [r7, #14]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d007      	beq.n	800b13c <USBD_StdEPReq+0x164>
 800b12c:	7bbb      	ldrb	r3, [r7, #14]
 800b12e:	2b80      	cmp	r3, #128	; 0x80
 800b130:	d004      	beq.n	800b13c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800b132:	6839      	ldr	r1, [r7, #0]
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 fbcb 	bl	800b8d0 <USBD_CtlError>
          break;
 800b13a:	e091      	b.n	800b260 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b13c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b140:	2b00      	cmp	r3, #0
 800b142:	da0b      	bge.n	800b15c <USBD_StdEPReq+0x184>
 800b144:	7bbb      	ldrb	r3, [r7, #14]
 800b146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b14a:	4613      	mov	r3, r2
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	4413      	add	r3, r2
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	3310      	adds	r3, #16
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	4413      	add	r3, r2
 800b158:	3304      	adds	r3, #4
 800b15a:	e00b      	b.n	800b174 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b15c:	7bbb      	ldrb	r3, [r7, #14]
 800b15e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b162:	4613      	mov	r3, r2
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	4413      	add	r3, r2
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	4413      	add	r3, r2
 800b172:	3304      	adds	r3, #4
 800b174:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	2200      	movs	r2, #0
 800b17a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	2202      	movs	r2, #2
 800b180:	4619      	mov	r1, r3
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 fc15 	bl	800b9b2 <USBD_CtlSendData>
        break;
 800b188:	e06a      	b.n	800b260 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800b18a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	da11      	bge.n	800b1b6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b192:	7bbb      	ldrb	r3, [r7, #14]
 800b194:	f003 020f 	and.w	r2, r3, #15
 800b198:	6879      	ldr	r1, [r7, #4]
 800b19a:	4613      	mov	r3, r2
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	4413      	add	r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	440b      	add	r3, r1
 800b1a4:	3324      	adds	r3, #36	; 0x24
 800b1a6:	881b      	ldrh	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d117      	bne.n	800b1dc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800b1ac:	6839      	ldr	r1, [r7, #0]
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 fb8e 	bl	800b8d0 <USBD_CtlError>
            break;
 800b1b4:	e054      	b.n	800b260 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b1b6:	7bbb      	ldrb	r3, [r7, #14]
 800b1b8:	f003 020f 	and.w	r2, r3, #15
 800b1bc:	6879      	ldr	r1, [r7, #4]
 800b1be:	4613      	mov	r3, r2
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	4413      	add	r3, r2
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	440b      	add	r3, r1
 800b1c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b1cc:	881b      	ldrh	r3, [r3, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d104      	bne.n	800b1dc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800b1d2:	6839      	ldr	r1, [r7, #0]
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 fb7b 	bl	800b8d0 <USBD_CtlError>
            break;
 800b1da:	e041      	b.n	800b260 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	da0b      	bge.n	800b1fc <USBD_StdEPReq+0x224>
 800b1e4:	7bbb      	ldrb	r3, [r7, #14]
 800b1e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	4413      	add	r3, r2
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	3310      	adds	r3, #16
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	3304      	adds	r3, #4
 800b1fa:	e00b      	b.n	800b214 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b1fc:	7bbb      	ldrb	r3, [r7, #14]
 800b1fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b202:	4613      	mov	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4413      	add	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	4413      	add	r3, r2
 800b212:	3304      	adds	r3, #4
 800b214:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b216:	7bbb      	ldrb	r3, [r7, #14]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d002      	beq.n	800b222 <USBD_StdEPReq+0x24a>
 800b21c:	7bbb      	ldrb	r3, [r7, #14]
 800b21e:	2b80      	cmp	r3, #128	; 0x80
 800b220:	d103      	bne.n	800b22a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	2200      	movs	r2, #0
 800b226:	601a      	str	r2, [r3, #0]
 800b228:	e00e      	b.n	800b248 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b22a:	7bbb      	ldrb	r3, [r7, #14]
 800b22c:	4619      	mov	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f001 f8d8 	bl	800c3e4 <USBD_LL_IsStallEP>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d003      	beq.n	800b242 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	2201      	movs	r2, #1
 800b23e:	601a      	str	r2, [r3, #0]
 800b240:	e002      	b.n	800b248 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	2200      	movs	r2, #0
 800b246:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	2202      	movs	r2, #2
 800b24c:	4619      	mov	r1, r3
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 fbaf 	bl	800b9b2 <USBD_CtlSendData>
          break;
 800b254:	e004      	b.n	800b260 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800b256:	6839      	ldr	r1, [r7, #0]
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 fb39 	bl	800b8d0 <USBD_CtlError>
        break;
 800b25e:	bf00      	nop
      }
      break;
 800b260:	e004      	b.n	800b26c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800b262:	6839      	ldr	r1, [r7, #0]
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 fb33 	bl	800b8d0 <USBD_CtlError>
      break;
 800b26a:	bf00      	nop
    }
    break;
 800b26c:	e004      	b.n	800b278 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800b26e:	6839      	ldr	r1, [r7, #0]
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 fb2d 	bl	800b8d0 <USBD_CtlError>
    break;
 800b276:	bf00      	nop
  }

  return ret;
 800b278:	7bfb      	ldrb	r3, [r7, #15]
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
	...

0800b284 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b28e:	2300      	movs	r3, #0
 800b290:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b292:	2300      	movs	r3, #0
 800b294:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b296:	2300      	movs	r3, #0
 800b298:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	885b      	ldrh	r3, [r3, #2]
 800b29e:	0a1b      	lsrs	r3, r3, #8
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	2b06      	cmp	r3, #6
 800b2a6:	f200 8128 	bhi.w	800b4fa <USBD_GetDescriptor+0x276>
 800b2aa:	a201      	add	r2, pc, #4	; (adr r2, 800b2b0 <USBD_GetDescriptor+0x2c>)
 800b2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b0:	0800b2cd 	.word	0x0800b2cd
 800b2b4:	0800b2e5 	.word	0x0800b2e5
 800b2b8:	0800b325 	.word	0x0800b325
 800b2bc:	0800b4fb 	.word	0x0800b4fb
 800b2c0:	0800b4fb 	.word	0x0800b4fb
 800b2c4:	0800b49b 	.word	0x0800b49b
 800b2c8:	0800b4c7 	.word	0x0800b4c7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	7c12      	ldrb	r2, [r2, #16]
 800b2d8:	f107 0108 	add.w	r1, r7, #8
 800b2dc:	4610      	mov	r0, r2
 800b2de:	4798      	blx	r3
 800b2e0:	60f8      	str	r0, [r7, #12]
    break;
 800b2e2:	e112      	b.n	800b50a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	7c1b      	ldrb	r3, [r3, #16]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10d      	bne.n	800b308 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f4:	f107 0208 	add.w	r2, r7, #8
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	4798      	blx	r3
 800b2fc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	3301      	adds	r3, #1
 800b302:	2202      	movs	r2, #2
 800b304:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800b306:	e100      	b.n	800b50a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b310:	f107 0208 	add.w	r2, r7, #8
 800b314:	4610      	mov	r0, r2
 800b316:	4798      	blx	r3
 800b318:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	3301      	adds	r3, #1
 800b31e:	2202      	movs	r2, #2
 800b320:	701a      	strb	r2, [r3, #0]
    break;
 800b322:	e0f2      	b.n	800b50a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	885b      	ldrh	r3, [r3, #2]
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	2b05      	cmp	r3, #5
 800b32c:	f200 80ac 	bhi.w	800b488 <USBD_GetDescriptor+0x204>
 800b330:	a201      	add	r2, pc, #4	; (adr r2, 800b338 <USBD_GetDescriptor+0xb4>)
 800b332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b336:	bf00      	nop
 800b338:	0800b351 	.word	0x0800b351
 800b33c:	0800b385 	.word	0x0800b385
 800b340:	0800b3b9 	.word	0x0800b3b9
 800b344:	0800b3ed 	.word	0x0800b3ed
 800b348:	0800b421 	.word	0x0800b421
 800b34c:	0800b455 	.word	0x0800b455
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00b      	beq.n	800b374 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	7c12      	ldrb	r2, [r2, #16]
 800b368:	f107 0108 	add.w	r1, r7, #8
 800b36c:	4610      	mov	r0, r2
 800b36e:	4798      	blx	r3
 800b370:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b372:	e091      	b.n	800b498 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b374:	6839      	ldr	r1, [r7, #0]
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 faaa 	bl	800b8d0 <USBD_CtlError>
        err++;
 800b37c:	7afb      	ldrb	r3, [r7, #11]
 800b37e:	3301      	adds	r3, #1
 800b380:	72fb      	strb	r3, [r7, #11]
      break;
 800b382:	e089      	b.n	800b498 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00b      	beq.n	800b3a8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	7c12      	ldrb	r2, [r2, #16]
 800b39c:	f107 0108 	add.w	r1, r7, #8
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	4798      	blx	r3
 800b3a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3a6:	e077      	b.n	800b498 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b3a8:	6839      	ldr	r1, [r7, #0]
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 fa90 	bl	800b8d0 <USBD_CtlError>
        err++;
 800b3b0:	7afb      	ldrb	r3, [r7, #11]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	72fb      	strb	r3, [r7, #11]
      break;
 800b3b6:	e06f      	b.n	800b498 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00b      	beq.n	800b3dc <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	7c12      	ldrb	r2, [r2, #16]
 800b3d0:	f107 0108 	add.w	r1, r7, #8
 800b3d4:	4610      	mov	r0, r2
 800b3d6:	4798      	blx	r3
 800b3d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3da:	e05d      	b.n	800b498 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b3dc:	6839      	ldr	r1, [r7, #0]
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 fa76 	bl	800b8d0 <USBD_CtlError>
        err++;
 800b3e4:	7afb      	ldrb	r3, [r7, #11]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	72fb      	strb	r3, [r7, #11]
      break;
 800b3ea:	e055      	b.n	800b498 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3f2:	691b      	ldr	r3, [r3, #16]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d00b      	beq.n	800b410 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3fe:	691b      	ldr	r3, [r3, #16]
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	7c12      	ldrb	r2, [r2, #16]
 800b404:	f107 0108 	add.w	r1, r7, #8
 800b408:	4610      	mov	r0, r2
 800b40a:	4798      	blx	r3
 800b40c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b40e:	e043      	b.n	800b498 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b410:	6839      	ldr	r1, [r7, #0]
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 fa5c 	bl	800b8d0 <USBD_CtlError>
        err++;
 800b418:	7afb      	ldrb	r3, [r7, #11]
 800b41a:	3301      	adds	r3, #1
 800b41c:	72fb      	strb	r3, [r7, #11]
      break;
 800b41e:	e03b      	b.n	800b498 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b426:	695b      	ldr	r3, [r3, #20]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d00b      	beq.n	800b444 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b432:	695b      	ldr	r3, [r3, #20]
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	7c12      	ldrb	r2, [r2, #16]
 800b438:	f107 0108 	add.w	r1, r7, #8
 800b43c:	4610      	mov	r0, r2
 800b43e:	4798      	blx	r3
 800b440:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b442:	e029      	b.n	800b498 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b444:	6839      	ldr	r1, [r7, #0]
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 fa42 	bl	800b8d0 <USBD_CtlError>
        err++;
 800b44c:	7afb      	ldrb	r3, [r7, #11]
 800b44e:	3301      	adds	r3, #1
 800b450:	72fb      	strb	r3, [r7, #11]
      break;
 800b452:	e021      	b.n	800b498 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b45a:	699b      	ldr	r3, [r3, #24]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d00b      	beq.n	800b478 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b466:	699b      	ldr	r3, [r3, #24]
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	7c12      	ldrb	r2, [r2, #16]
 800b46c:	f107 0108 	add.w	r1, r7, #8
 800b470:	4610      	mov	r0, r2
 800b472:	4798      	blx	r3
 800b474:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b476:	e00f      	b.n	800b498 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b478:	6839      	ldr	r1, [r7, #0]
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 fa28 	bl	800b8d0 <USBD_CtlError>
        err++;
 800b480:	7afb      	ldrb	r3, [r7, #11]
 800b482:	3301      	adds	r3, #1
 800b484:	72fb      	strb	r3, [r7, #11]
      break;
 800b486:	e007      	b.n	800b498 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 fa20 	bl	800b8d0 <USBD_CtlError>
      err++;
 800b490:	7afb      	ldrb	r3, [r7, #11]
 800b492:	3301      	adds	r3, #1
 800b494:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800b496:	bf00      	nop
    }
    break;
 800b498:	e037      	b.n	800b50a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	7c1b      	ldrb	r3, [r3, #16]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d109      	bne.n	800b4b6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4aa:	f107 0208 	add.w	r2, r7, #8
 800b4ae:	4610      	mov	r0, r2
 800b4b0:	4798      	blx	r3
 800b4b2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b4b4:	e029      	b.n	800b50a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800b4b6:	6839      	ldr	r1, [r7, #0]
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 fa09 	bl	800b8d0 <USBD_CtlError>
      err++;
 800b4be:	7afb      	ldrb	r3, [r7, #11]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	72fb      	strb	r3, [r7, #11]
    break;
 800b4c4:	e021      	b.n	800b50a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	7c1b      	ldrb	r3, [r3, #16]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d10d      	bne.n	800b4ea <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d6:	f107 0208 	add.w	r2, r7, #8
 800b4da:	4610      	mov	r0, r2
 800b4dc:	4798      	blx	r3
 800b4de:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	2207      	movs	r2, #7
 800b4e6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b4e8:	e00f      	b.n	800b50a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800b4ea:	6839      	ldr	r1, [r7, #0]
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f9ef 	bl	800b8d0 <USBD_CtlError>
      err++;
 800b4f2:	7afb      	ldrb	r3, [r7, #11]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	72fb      	strb	r3, [r7, #11]
    break;
 800b4f8:	e007      	b.n	800b50a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800b4fa:	6839      	ldr	r1, [r7, #0]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 f9e7 	bl	800b8d0 <USBD_CtlError>
    err++;
 800b502:	7afb      	ldrb	r3, [r7, #11]
 800b504:	3301      	adds	r3, #1
 800b506:	72fb      	strb	r3, [r7, #11]
    break;
 800b508:	bf00      	nop
  }

  if (err != 0U)
 800b50a:	7afb      	ldrb	r3, [r7, #11]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d11e      	bne.n	800b54e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	88db      	ldrh	r3, [r3, #6]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d016      	beq.n	800b546 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800b518:	893b      	ldrh	r3, [r7, #8]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00e      	beq.n	800b53c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	88da      	ldrh	r2, [r3, #6]
 800b522:	893b      	ldrh	r3, [r7, #8]
 800b524:	4293      	cmp	r3, r2
 800b526:	bf28      	it	cs
 800b528:	4613      	movcs	r3, r2
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b52e:	893b      	ldrh	r3, [r7, #8]
 800b530:	461a      	mov	r2, r3
 800b532:	68f9      	ldr	r1, [r7, #12]
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 fa3c 	bl	800b9b2 <USBD_CtlSendData>
 800b53a:	e009      	b.n	800b550 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800b53c:	6839      	ldr	r1, [r7, #0]
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f9c6 	bl	800b8d0 <USBD_CtlError>
 800b544:	e004      	b.n	800b550 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 fa8d 	bl	800ba66 <USBD_CtlSendStatus>
 800b54c:	e000      	b.n	800b550 <USBD_GetDescriptor+0x2cc>
    return;
 800b54e:	bf00      	nop
    }
  }
}
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop

0800b558 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	889b      	ldrh	r3, [r3, #4]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d130      	bne.n	800b5cc <USBD_SetAddress+0x74>
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	88db      	ldrh	r3, [r3, #6]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d12c      	bne.n	800b5cc <USBD_SetAddress+0x74>
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	885b      	ldrh	r3, [r3, #2]
 800b576:	2b7f      	cmp	r3, #127	; 0x7f
 800b578:	d828      	bhi.n	800b5cc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	885b      	ldrh	r3, [r3, #2]
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b584:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b58c:	2b03      	cmp	r3, #3
 800b58e:	d104      	bne.n	800b59a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b590:	6839      	ldr	r1, [r7, #0]
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 f99c 	bl	800b8d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b598:	e01c      	b.n	800b5d4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	7bfa      	ldrb	r2, [r7, #15]
 800b59e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b5a2:	7bfb      	ldrb	r3, [r7, #15]
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 ff48 	bl	800c43c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 fa5a 	bl	800ba66 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b5b2:	7bfb      	ldrb	r3, [r7, #15]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d004      	beq.n	800b5c2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2202      	movs	r2, #2
 800b5bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5c0:	e008      	b.n	800b5d4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ca:	e003      	b.n	800b5d4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b5cc:	6839      	ldr	r1, [r7, #0]
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 f97e 	bl	800b8d0 <USBD_CtlError>
  }
}
 800b5d4:	bf00      	nop
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	885b      	ldrh	r3, [r3, #2]
 800b5ee:	b2da      	uxtb	r2, r3
 800b5f0:	4b4b      	ldr	r3, [pc, #300]	; (800b720 <USBD_SetConfig+0x144>)
 800b5f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b5f4:	4b4a      	ldr	r3, [pc, #296]	; (800b720 <USBD_SetConfig+0x144>)
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d905      	bls.n	800b608 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b5fc:	6839      	ldr	r1, [r7, #0]
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 f966 	bl	800b8d0 <USBD_CtlError>
    return USBD_FAIL;
 800b604:	2303      	movs	r3, #3
 800b606:	e087      	b.n	800b718 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b60e:	2b02      	cmp	r3, #2
 800b610:	d002      	beq.n	800b618 <USBD_SetConfig+0x3c>
 800b612:	2b03      	cmp	r3, #3
 800b614:	d025      	beq.n	800b662 <USBD_SetConfig+0x86>
 800b616:	e071      	b.n	800b6fc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800b618:	4b41      	ldr	r3, [pc, #260]	; (800b720 <USBD_SetConfig+0x144>)
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d01c      	beq.n	800b65a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800b620:	4b3f      	ldr	r3, [pc, #252]	; (800b720 <USBD_SetConfig+0x144>)
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	461a      	mov	r2, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b62a:	4b3d      	ldr	r3, [pc, #244]	; (800b720 <USBD_SetConfig+0x144>)
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	4619      	mov	r1, r3
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f7ff f9a8 	bl	800a986 <USBD_SetClassConfig>
 800b636:	4603      	mov	r3, r0
 800b638:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800b63a:	7bfb      	ldrb	r3, [r7, #15]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d004      	beq.n	800b64a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800b640:	6839      	ldr	r1, [r7, #0]
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f944 	bl	800b8d0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b648:	e065      	b.n	800b716 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 fa0b 	bl	800ba66 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2203      	movs	r2, #3
 800b654:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b658:	e05d      	b.n	800b716 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 fa03 	bl	800ba66 <USBD_CtlSendStatus>
    break;
 800b660:	e059      	b.n	800b716 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800b662:	4b2f      	ldr	r3, [pc, #188]	; (800b720 <USBD_SetConfig+0x144>)
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d112      	bne.n	800b690 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2202      	movs	r2, #2
 800b66e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800b672:	4b2b      	ldr	r3, [pc, #172]	; (800b720 <USBD_SetConfig+0x144>)
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	461a      	mov	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b67c:	4b28      	ldr	r3, [pc, #160]	; (800b720 <USBD_SetConfig+0x144>)
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	4619      	mov	r1, r3
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f7ff f99b 	bl	800a9be <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 f9ec 	bl	800ba66 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b68e:	e042      	b.n	800b716 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800b690:	4b23      	ldr	r3, [pc, #140]	; (800b720 <USBD_SetConfig+0x144>)
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	461a      	mov	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d02a      	beq.n	800b6f4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f7ff f989 	bl	800a9be <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800b6ac:	4b1c      	ldr	r3, [pc, #112]	; (800b720 <USBD_SetConfig+0x144>)
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b6b6:	4b1a      	ldr	r3, [pc, #104]	; (800b720 <USBD_SetConfig+0x144>)
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f7ff f962 	bl	800a986 <USBD_SetClassConfig>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800b6c6:	7bfb      	ldrb	r3, [r7, #15]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00f      	beq.n	800b6ec <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800b6cc:	6839      	ldr	r1, [r7, #0]
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 f8fe 	bl	800b8d0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	4619      	mov	r1, r3
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f7ff f96e 	bl	800a9be <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2202      	movs	r2, #2
 800b6e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b6ea:	e014      	b.n	800b716 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 f9ba 	bl	800ba66 <USBD_CtlSendStatus>
    break;
 800b6f2:	e010      	b.n	800b716 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 f9b6 	bl	800ba66 <USBD_CtlSendStatus>
    break;
 800b6fa:	e00c      	b.n	800b716 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800b6fc:	6839      	ldr	r1, [r7, #0]
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 f8e6 	bl	800b8d0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b704:	4b06      	ldr	r3, [pc, #24]	; (800b720 <USBD_SetConfig+0x144>)
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	4619      	mov	r1, r3
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f7ff f957 	bl	800a9be <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800b710:	2303      	movs	r3, #3
 800b712:	73fb      	strb	r3, [r7, #15]
    break;
 800b714:	bf00      	nop
  }

  return ret;
 800b716:	7bfb      	ldrb	r3, [r7, #15]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	20000399 	.word	0x20000399

0800b724 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	88db      	ldrh	r3, [r3, #6]
 800b732:	2b01      	cmp	r3, #1
 800b734:	d004      	beq.n	800b740 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b736:	6839      	ldr	r1, [r7, #0]
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 f8c9 	bl	800b8d0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800b73e:	e021      	b.n	800b784 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b746:	2b01      	cmp	r3, #1
 800b748:	db17      	blt.n	800b77a <USBD_GetConfig+0x56>
 800b74a:	2b02      	cmp	r3, #2
 800b74c:	dd02      	ble.n	800b754 <USBD_GetConfig+0x30>
 800b74e:	2b03      	cmp	r3, #3
 800b750:	d00b      	beq.n	800b76a <USBD_GetConfig+0x46>
 800b752:	e012      	b.n	800b77a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	3308      	adds	r3, #8
 800b75e:	2201      	movs	r2, #1
 800b760:	4619      	mov	r1, r3
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 f925 	bl	800b9b2 <USBD_CtlSendData>
      break;
 800b768:	e00c      	b.n	800b784 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	3304      	adds	r3, #4
 800b76e:	2201      	movs	r2, #1
 800b770:	4619      	mov	r1, r3
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 f91d 	bl	800b9b2 <USBD_CtlSendData>
      break;
 800b778:	e004      	b.n	800b784 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800b77a:	6839      	ldr	r1, [r7, #0]
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 f8a7 	bl	800b8d0 <USBD_CtlError>
      break;
 800b782:	bf00      	nop
}
 800b784:	bf00      	nop
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b79c:	3b01      	subs	r3, #1
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	d81e      	bhi.n	800b7e0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	88db      	ldrh	r3, [r3, #6]
 800b7a6:	2b02      	cmp	r3, #2
 800b7a8:	d004      	beq.n	800b7b4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b7aa:	6839      	ldr	r1, [r7, #0]
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 f88f 	bl	800b8d0 <USBD_CtlError>
      break;
 800b7b2:	e01a      	b.n	800b7ea <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d005      	beq.n	800b7d0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	f043 0202 	orr.w	r2, r3, #2
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	330c      	adds	r3, #12
 800b7d4:	2202      	movs	r2, #2
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 f8ea 	bl	800b9b2 <USBD_CtlSendData>
    break;
 800b7de:	e004      	b.n	800b7ea <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800b7e0:	6839      	ldr	r1, [r7, #0]
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 f874 	bl	800b8d0 <USBD_CtlError>
    break;
 800b7e8:	bf00      	nop
  }
}
 800b7ea:	bf00      	nop
 800b7ec:	3708      	adds	r7, #8
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b082      	sub	sp, #8
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
 800b7fa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	885b      	ldrh	r3, [r3, #2]
 800b800:	2b01      	cmp	r3, #1
 800b802:	d106      	bne.n	800b812 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 f92a 	bl	800ba66 <USBD_CtlSendStatus>
  }
}
 800b812:	bf00      	nop
 800b814:	3708      	adds	r7, #8
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}

0800b81a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b082      	sub	sp, #8
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
 800b822:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b82a:	3b01      	subs	r3, #1
 800b82c:	2b02      	cmp	r3, #2
 800b82e:	d80b      	bhi.n	800b848 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	885b      	ldrh	r3, [r3, #2]
 800b834:	2b01      	cmp	r3, #1
 800b836:	d10c      	bne.n	800b852 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 f910 	bl	800ba66 <USBD_CtlSendStatus>
      }
      break;
 800b846:	e004      	b.n	800b852 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b848:	6839      	ldr	r1, [r7, #0]
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 f840 	bl	800b8d0 <USBD_CtlError>
      break;
 800b850:	e000      	b.n	800b854 <USBD_ClrFeature+0x3a>
      break;
 800b852:	bf00      	nop
  }
}
 800b854:	bf00      	nop
 800b856:	3708      	adds	r7, #8
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	781a      	ldrb	r2, [r3, #0]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	3301      	adds	r3, #1
 800b876:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	781a      	ldrb	r2, [r3, #0]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	3301      	adds	r3, #1
 800b884:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b886:	68f8      	ldr	r0, [r7, #12]
 800b888:	f7ff fad4 	bl	800ae34 <SWAPBYTE>
 800b88c:	4603      	mov	r3, r0
 800b88e:	461a      	mov	r2, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	3301      	adds	r3, #1
 800b898:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	3301      	adds	r3, #1
 800b89e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b8a0:	68f8      	ldr	r0, [r7, #12]
 800b8a2:	f7ff fac7 	bl	800ae34 <SWAPBYTE>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	f7ff faba 	bl	800ae34 <SWAPBYTE>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	80da      	strh	r2, [r3, #6]
}
 800b8c8:	bf00      	nop
 800b8ca:	3710      	adds	r7, #16
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8da:	2180      	movs	r1, #128	; 0x80
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 fd43 	bl	800c368 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 fd3f 	bl	800c368 <USBD_LL_StallEP>
}
 800b8ea:	bf00      	nop
 800b8ec:	3708      	adds	r7, #8
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b086      	sub	sp, #24
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	60f8      	str	r0, [r7, #12]
 800b8fa:	60b9      	str	r1, [r7, #8]
 800b8fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b8fe:	2300      	movs	r3, #0
 800b900:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d036      	beq.n	800b976 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b90c:	6938      	ldr	r0, [r7, #16]
 800b90e:	f000 f836 	bl	800b97e <USBD_GetLen>
 800b912:	4603      	mov	r3, r0
 800b914:	3301      	adds	r3, #1
 800b916:	b29b      	uxth	r3, r3
 800b918:	005b      	lsls	r3, r3, #1
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b920:	7dfb      	ldrb	r3, [r7, #23]
 800b922:	68ba      	ldr	r2, [r7, #8]
 800b924:	4413      	add	r3, r2
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	7812      	ldrb	r2, [r2, #0]
 800b92a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b92c:	7dfb      	ldrb	r3, [r7, #23]
 800b92e:	3301      	adds	r3, #1
 800b930:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b932:	7dfb      	ldrb	r3, [r7, #23]
 800b934:	68ba      	ldr	r2, [r7, #8]
 800b936:	4413      	add	r3, r2
 800b938:	2203      	movs	r2, #3
 800b93a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b93c:	7dfb      	ldrb	r3, [r7, #23]
 800b93e:	3301      	adds	r3, #1
 800b940:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b942:	e013      	b.n	800b96c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b944:	7dfb      	ldrb	r3, [r7, #23]
 800b946:	68ba      	ldr	r2, [r7, #8]
 800b948:	4413      	add	r3, r2
 800b94a:	693a      	ldr	r2, [r7, #16]
 800b94c:	7812      	ldrb	r2, [r2, #0]
 800b94e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	3301      	adds	r3, #1
 800b954:	613b      	str	r3, [r7, #16]
    idx++;
 800b956:	7dfb      	ldrb	r3, [r7, #23]
 800b958:	3301      	adds	r3, #1
 800b95a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b95c:	7dfb      	ldrb	r3, [r7, #23]
 800b95e:	68ba      	ldr	r2, [r7, #8]
 800b960:	4413      	add	r3, r2
 800b962:	2200      	movs	r2, #0
 800b964:	701a      	strb	r2, [r3, #0]
    idx++;
 800b966:	7dfb      	ldrb	r3, [r7, #23]
 800b968:	3301      	adds	r3, #1
 800b96a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d1e7      	bne.n	800b944 <USBD_GetString+0x52>
 800b974:	e000      	b.n	800b978 <USBD_GetString+0x86>
    return;
 800b976:	bf00      	nop
  }
}
 800b978:	3718      	adds	r7, #24
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b97e:	b480      	push	{r7}
 800b980:	b085      	sub	sp, #20
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b986:	2300      	movs	r3, #0
 800b988:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b98e:	e005      	b.n	800b99c <USBD_GetLen+0x1e>
  {
    len++;
 800b990:	7bfb      	ldrb	r3, [r7, #15]
 800b992:	3301      	adds	r3, #1
 800b994:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	3301      	adds	r3, #1
 800b99a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d1f5      	bne.n	800b990 <USBD_GetLen+0x12>
  }

  return len;
 800b9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3714      	adds	r7, #20
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b084      	sub	sp, #16
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	60f8      	str	r0, [r7, #12]
 800b9ba:	60b9      	str	r1, [r7, #8]
 800b9bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2202      	movs	r2, #2
 800b9c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	687a      	ldr	r2, [r7, #4]
 800b9ca:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	f000 fd4e 	bl	800c47a <USBD_LL_Transmit>

  return USBD_OK;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3710      	adds	r7, #16
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	68ba      	ldr	r2, [r7, #8]
 800b9f8:	2100      	movs	r1, #0
 800b9fa:	68f8      	ldr	r0, [r7, #12]
 800b9fc:	f000 fd3d 	bl	800c47a <USBD_LL_Transmit>

  return USBD_OK;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b084      	sub	sp, #16
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	60f8      	str	r0, [r7, #12]
 800ba12:	60b9      	str	r1, [r7, #8]
 800ba14:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2203      	movs	r2, #3
 800ba1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	687a      	ldr	r2, [r7, #4]
 800ba2a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	2100      	movs	r1, #0
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f000 fd41 	bl	800c4bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba3a:	2300      	movs	r3, #0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3710      	adds	r7, #16
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	60b9      	str	r1, [r7, #8]
 800ba4e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	68ba      	ldr	r2, [r7, #8]
 800ba54:	2100      	movs	r1, #0
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f000 fd30 	bl	800c4bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b082      	sub	sp, #8
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2204      	movs	r2, #4
 800ba72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba76:	2300      	movs	r3, #0
 800ba78:	2200      	movs	r2, #0
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 fcfc 	bl	800c47a <USBD_LL_Transmit>

  return USBD_OK;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3708      	adds	r7, #8
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2205      	movs	r2, #5
 800ba98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	2200      	movs	r2, #0
 800baa0:	2100      	movs	r1, #0
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 fd0a 	bl	800c4bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3708      	adds	r7, #8
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
	...

0800bab4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bab8:	2200      	movs	r2, #0
 800baba:	4918      	ldr	r1, [pc, #96]	; (800bb1c <MX_USB_DEVICE_Init+0x68>)
 800babc:	4818      	ldr	r0, [pc, #96]	; (800bb20 <MX_USB_DEVICE_Init+0x6c>)
 800babe:	f7fe fef4 	bl	800a8aa <USBD_Init>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d001      	beq.n	800bacc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bac8:	f7f6 f8fe 	bl	8001cc8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800bacc:	4915      	ldr	r1, [pc, #84]	; (800bb24 <MX_USB_DEVICE_Init+0x70>)
 800bace:	4814      	ldr	r0, [pc, #80]	; (800bb20 <MX_USB_DEVICE_Init+0x6c>)
 800bad0:	f7fe ff21 	bl	800a916 <USBD_RegisterClass>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d001      	beq.n	800bade <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bada:	f7f6 f8f5 	bl	8001cc8 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800bade:	4912      	ldr	r1, [pc, #72]	; (800bb28 <MX_USB_DEVICE_Init+0x74>)
 800bae0:	480f      	ldr	r0, [pc, #60]	; (800bb20 <MX_USB_DEVICE_Init+0x6c>)
 800bae2:	f7fe fdb9 	bl	800a658 <USBD_AUDIO_RegisterInterface>
 800bae6:	4603      	mov	r3, r0
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d001      	beq.n	800baf0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800baec:	f7f6 f8ec 	bl	8001cc8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800baf0:	480b      	ldr	r0, [pc, #44]	; (800bb20 <MX_USB_DEVICE_Init+0x6c>)
 800baf2:	f7fe ff31 	bl	800a958 <USBD_Start>
 800baf6:	4603      	mov	r3, r0
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d001      	beq.n	800bb00 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bafc:	f7f6 f8e4 	bl	8001cc8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI);
 800bb00:	490a      	ldr	r1, [pc, #40]	; (800bb2c <MX_USB_DEVICE_Init+0x78>)
 800bb02:	4807      	ldr	r0, [pc, #28]	; (800bb20 <MX_USB_DEVICE_Init+0x6c>)
 800bb04:	f7fe ff07 	bl	800a916 <USBD_RegisterClass>

	USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800bb08:	4909      	ldr	r1, [pc, #36]	; (800bb30 <MX_USB_DEVICE_Init+0x7c>)
 800bb0a:	4805      	ldr	r0, [pc, #20]	; (800bb20 <MX_USB_DEVICE_Init+0x6c>)
 800bb0c:	f7fe feb6 	bl	800a87c <USBD_MIDI_RegisterInterface>

	USBD_Start(&hUsbDeviceFS);
 800bb10:	4803      	ldr	r0, [pc, #12]	; (800bb20 <MX_USB_DEVICE_Init+0x6c>)
 800bb12:	f7fe ff21 	bl	800a958 <USBD_Start>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb16:	bf00      	nop
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	20000208 	.word	0x20000208
 800bb20:	200009d8 	.word	0x200009d8
 800bb24:	20000098 	.word	0x20000098
 800bb28:	200001ec 	.word	0x200001ec
 800bb2c:	2000014c 	.word	0x2000014c
 800bb30:	20000268 	.word	0x20000268

0800bb34 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 800bb40:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3714      	adds	r7, #20
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr

0800bb4e <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800bb4e:	b480      	push	{r7}
 800bb50:	b083      	sub	sp, #12
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 800bb56:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	370c      	adds	r7, #12
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr

0800bb64 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	4613      	mov	r3, r2
 800bb70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800bb72:	79fb      	ldrb	r3, [r7, #7]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d001      	beq.n	800bb7c <AUDIO_AudioCmd_FS+0x18>
 800bb78:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800bb7a:	e000      	b.n	800bb7e <AUDIO_AudioCmd_FS+0x1a>
    break;
 800bb7c:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800bb7e:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3714      	adds	r7, #20
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	4603      	mov	r3, r0
 800bb94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 800bb96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	370c      	adds	r7, #12
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	4603      	mov	r3, r0
 800bbac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 800bbae:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800bbca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3714      	adds	r7, #20
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr

0800bbd8 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800bbdc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	4603      	mov	r3, r0
 800bbf0:	6039      	str	r1, [r7, #0]
 800bbf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	2212      	movs	r2, #18
 800bbf8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bbfa:	4b03      	ldr	r3, [pc, #12]	; (800bc08 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	370c      	adds	r7, #12
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr
 800bc08:	20000224 	.word	0x20000224

0800bc0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	4603      	mov	r3, r0
 800bc14:	6039      	str	r1, [r7, #0]
 800bc16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	2204      	movs	r2, #4
 800bc1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc1e:	4b03      	ldr	r3, [pc, #12]	; (800bc2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	370c      	adds	r7, #12
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr
 800bc2c:	20000238 	.word	0x20000238

0800bc30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	4603      	mov	r3, r0
 800bc38:	6039      	str	r1, [r7, #0]
 800bc3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc3c:	79fb      	ldrb	r3, [r7, #7]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d105      	bne.n	800bc4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc42:	683a      	ldr	r2, [r7, #0]
 800bc44:	4907      	ldr	r1, [pc, #28]	; (800bc64 <USBD_FS_ProductStrDescriptor+0x34>)
 800bc46:	4808      	ldr	r0, [pc, #32]	; (800bc68 <USBD_FS_ProductStrDescriptor+0x38>)
 800bc48:	f7ff fe53 	bl	800b8f2 <USBD_GetString>
 800bc4c:	e004      	b.n	800bc58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc4e:	683a      	ldr	r2, [r7, #0]
 800bc50:	4904      	ldr	r1, [pc, #16]	; (800bc64 <USBD_FS_ProductStrDescriptor+0x34>)
 800bc52:	4805      	ldr	r0, [pc, #20]	; (800bc68 <USBD_FS_ProductStrDescriptor+0x38>)
 800bc54:	f7ff fe4d 	bl	800b8f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc58:	4b02      	ldr	r3, [pc, #8]	; (800bc64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3708      	adds	r7, #8
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	20000ca8 	.word	0x20000ca8
 800bc68:	0800c950 	.word	0x0800c950

0800bc6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	4603      	mov	r3, r0
 800bc74:	6039      	str	r1, [r7, #0]
 800bc76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bc78:	683a      	ldr	r2, [r7, #0]
 800bc7a:	4904      	ldr	r1, [pc, #16]	; (800bc8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bc7c:	4804      	ldr	r0, [pc, #16]	; (800bc90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bc7e:	f7ff fe38 	bl	800b8f2 <USBD_GetString>
  return USBD_StrDesc;
 800bc82:	4b02      	ldr	r3, [pc, #8]	; (800bc8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3708      	adds	r7, #8
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	20000ca8 	.word	0x20000ca8
 800bc90:	0800c950 	.word	0x0800c950

0800bc94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	6039      	str	r1, [r7, #0]
 800bc9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	221a      	movs	r2, #26
 800bca4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bca6:	f000 f843 	bl	800bd30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bcaa:	4b02      	ldr	r3, [pc, #8]	; (800bcb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	2000023c 	.word	0x2000023c

0800bcb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	6039      	str	r1, [r7, #0]
 800bcc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bcc4:	79fb      	ldrb	r3, [r7, #7]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d105      	bne.n	800bcd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bcca:	683a      	ldr	r2, [r7, #0]
 800bccc:	4907      	ldr	r1, [pc, #28]	; (800bcec <USBD_FS_ConfigStrDescriptor+0x34>)
 800bcce:	4808      	ldr	r0, [pc, #32]	; (800bcf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bcd0:	f7ff fe0f 	bl	800b8f2 <USBD_GetString>
 800bcd4:	e004      	b.n	800bce0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bcd6:	683a      	ldr	r2, [r7, #0]
 800bcd8:	4904      	ldr	r1, [pc, #16]	; (800bcec <USBD_FS_ConfigStrDescriptor+0x34>)
 800bcda:	4805      	ldr	r0, [pc, #20]	; (800bcf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bcdc:	f7ff fe09 	bl	800b8f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bce0:	4b02      	ldr	r3, [pc, #8]	; (800bcec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3708      	adds	r7, #8
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	20000ca8 	.word	0x20000ca8
 800bcf0:	0800c964 	.word	0x0800c964

0800bcf4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	6039      	str	r1, [r7, #0]
 800bcfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd00:	79fb      	ldrb	r3, [r7, #7]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d105      	bne.n	800bd12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd06:	683a      	ldr	r2, [r7, #0]
 800bd08:	4907      	ldr	r1, [pc, #28]	; (800bd28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd0a:	4808      	ldr	r0, [pc, #32]	; (800bd2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd0c:	f7ff fdf1 	bl	800b8f2 <USBD_GetString>
 800bd10:	e004      	b.n	800bd1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd12:	683a      	ldr	r2, [r7, #0]
 800bd14:	4904      	ldr	r1, [pc, #16]	; (800bd28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd16:	4805      	ldr	r0, [pc, #20]	; (800bd2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd18:	f7ff fdeb 	bl	800b8f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd1c:	4b02      	ldr	r3, [pc, #8]	; (800bd28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3708      	adds	r7, #8
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	20000ca8 	.word	0x20000ca8
 800bd2c:	0800c97c 	.word	0x0800c97c

0800bd30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bd36:	4b0f      	ldr	r3, [pc, #60]	; (800bd74 <Get_SerialNum+0x44>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bd3c:	4b0e      	ldr	r3, [pc, #56]	; (800bd78 <Get_SerialNum+0x48>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bd42:	4b0e      	ldr	r3, [pc, #56]	; (800bd7c <Get_SerialNum+0x4c>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bd48:	68fa      	ldr	r2, [r7, #12]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d009      	beq.n	800bd6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bd56:	2208      	movs	r2, #8
 800bd58:	4909      	ldr	r1, [pc, #36]	; (800bd80 <Get_SerialNum+0x50>)
 800bd5a:	68f8      	ldr	r0, [r7, #12]
 800bd5c:	f000 f814 	bl	800bd88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bd60:	2204      	movs	r2, #4
 800bd62:	4908      	ldr	r1, [pc, #32]	; (800bd84 <Get_SerialNum+0x54>)
 800bd64:	68b8      	ldr	r0, [r7, #8]
 800bd66:	f000 f80f 	bl	800bd88 <IntToUnicode>
  }
}
 800bd6a:	bf00      	nop
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	1fff7a10 	.word	0x1fff7a10
 800bd78:	1fff7a14 	.word	0x1fff7a14
 800bd7c:	1fff7a18 	.word	0x1fff7a18
 800bd80:	2000023e 	.word	0x2000023e
 800bd84:	2000024e 	.word	0x2000024e

0800bd88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b087      	sub	sp, #28
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	4613      	mov	r3, r2
 800bd94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bd96:	2300      	movs	r3, #0
 800bd98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	75fb      	strb	r3, [r7, #23]
 800bd9e:	e027      	b.n	800bdf0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	0f1b      	lsrs	r3, r3, #28
 800bda4:	2b09      	cmp	r3, #9
 800bda6:	d80b      	bhi.n	800bdc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	0f1b      	lsrs	r3, r3, #28
 800bdac:	b2da      	uxtb	r2, r3
 800bdae:	7dfb      	ldrb	r3, [r7, #23]
 800bdb0:	005b      	lsls	r3, r3, #1
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	440b      	add	r3, r1
 800bdb8:	3230      	adds	r2, #48	; 0x30
 800bdba:	b2d2      	uxtb	r2, r2
 800bdbc:	701a      	strb	r2, [r3, #0]
 800bdbe:	e00a      	b.n	800bdd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	0f1b      	lsrs	r3, r3, #28
 800bdc4:	b2da      	uxtb	r2, r3
 800bdc6:	7dfb      	ldrb	r3, [r7, #23]
 800bdc8:	005b      	lsls	r3, r3, #1
 800bdca:	4619      	mov	r1, r3
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	440b      	add	r3, r1
 800bdd0:	3237      	adds	r2, #55	; 0x37
 800bdd2:	b2d2      	uxtb	r2, r2
 800bdd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	011b      	lsls	r3, r3, #4
 800bdda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bddc:	7dfb      	ldrb	r3, [r7, #23]
 800bdde:	005b      	lsls	r3, r3, #1
 800bde0:	3301      	adds	r3, #1
 800bde2:	68ba      	ldr	r2, [r7, #8]
 800bde4:	4413      	add	r3, r2
 800bde6:	2200      	movs	r2, #0
 800bde8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bdea:	7dfb      	ldrb	r3, [r7, #23]
 800bdec:	3301      	adds	r3, #1
 800bdee:	75fb      	strb	r3, [r7, #23]
 800bdf0:	7dfa      	ldrb	r2, [r7, #23]
 800bdf2:	79fb      	ldrb	r3, [r7, #7]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d3d3      	bcc.n	800bda0 <IntToUnicode+0x18>
  }
}
 800bdf8:	bf00      	nop
 800bdfa:	371c      	adds	r7, #28
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr

0800be04 <MIDI_DataRx>:
};

uint8_t flag_sendMidi = 0;

uint16_t MIDI_DataRx(uint8_t *msg, uint16_t length)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	460b      	mov	r3, r1
 800be0e:	807b      	strh	r3, [r7, #2]
  //uint8_t chan = msg[0] & 0x0F;
  uint8_t msgtype = msg[0] & 0xF0;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	f023 030f 	bic.w	r3, r3, #15
 800be18:	73fb      	strb	r3, [r7, #15]
  uint8_t b1 =  msg[2];
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	789b      	ldrb	r3, [r3, #2]
 800be1e:	73bb      	strb	r3, [r7, #14]
  uint8_t b2 =  msg[3];
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	78db      	ldrb	r3, [r3, #3]
 800be24:	737b      	strb	r3, [r7, #13]
 // uint16_t b = ((b2 & 0x7F) << 7) | (b1 & 0x7F);
 
  switch (msgtype)
 800be26:	7bfb      	ldrb	r3, [r7, #15]
 800be28:	2bb0      	cmp	r3, #176	; 0xb0
 800be2a:	d01c      	beq.n	800be66 <MIDI_DataRx+0x62>
 800be2c:	2bb0      	cmp	r3, #176	; 0xb0
 800be2e:	dc05      	bgt.n	800be3c <MIDI_DataRx+0x38>
 800be30:	2b90      	cmp	r3, #144	; 0x90
 800be32:	d01a      	beq.n	800be6a <MIDI_DataRx+0x66>
 800be34:	2ba0      	cmp	r3, #160	; 0xa0
 800be36:	d01a      	beq.n	800be6e <MIDI_DataRx+0x6a>
 800be38:	2b80      	cmp	r3, #128	; 0x80
	  //key = b1;
	  //velocity = b2;
	  //notepos = key - 8 + transpose;
	  //stop_note(notepos);
	  //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7); //blink LED
	  break;
 800be3a:	e01f      	b.n	800be7c <MIDI_DataRx+0x78>
  switch (msgtype)
 800be3c:	2bd0      	cmp	r3, #208	; 0xd0
 800be3e:	d018      	beq.n	800be72 <MIDI_DataRx+0x6e>
 800be40:	2bd0      	cmp	r3, #208	; 0xd0
 800be42:	dc01      	bgt.n	800be48 <MIDI_DataRx+0x44>
 800be44:	2bc0      	cmp	r3, #192	; 0xc0
							break;
					}*/
	  break;
  case 0xC0:
	  //data = b1;
	  break;
 800be46:	e019      	b.n	800be7c <MIDI_DataRx+0x78>
  switch (msgtype)
 800be48:	2be0      	cmp	r3, #224	; 0xe0
 800be4a:	d014      	beq.n	800be76 <MIDI_DataRx+0x72>
 800be4c:	2bf0      	cmp	r3, #240	; 0xf0
 800be4e:	d115      	bne.n	800be7c <MIDI_DataRx+0x78>
  case 0xE0:
	  //data = b2;
	  //		bend = data;
	  break;
  case 0xF0: {
	  if((b1 == 0x7E) && (b2 == 0x7F)) {
 800be50:	7bbb      	ldrb	r3, [r7, #14]
 800be52:	2b7e      	cmp	r3, #126	; 0x7e
 800be54:	d111      	bne.n	800be7a <MIDI_DataRx+0x76>
 800be56:	7b7b      	ldrb	r3, [r7, #13]
 800be58:	2b7f      	cmp	r3, #127	; 0x7f
 800be5a:	d10e      	bne.n	800be7a <MIDI_DataRx+0x76>
		  MIDI_DataTx(SysexID, 15);
 800be5c:	210f      	movs	r1, #15
 800be5e:	480a      	ldr	r0, [pc, #40]	; (800be88 <MIDI_DataRx+0x84>)
 800be60:	f000 f814 	bl	800be8c <MIDI_DataTx>
	  }
	  break;
 800be64:	e009      	b.n	800be7a <MIDI_DataRx+0x76>
	  break;
 800be66:	bf00      	nop
 800be68:	e008      	b.n	800be7c <MIDI_DataRx+0x78>
	  break;
 800be6a:	bf00      	nop
 800be6c:	e006      	b.n	800be7c <MIDI_DataRx+0x78>
	  break;
 800be6e:	bf00      	nop
 800be70:	e004      	b.n	800be7c <MIDI_DataRx+0x78>
	  break;
 800be72:	bf00      	nop
 800be74:	e002      	b.n	800be7c <MIDI_DataRx+0x78>
	  break;
 800be76:	bf00      	nop
 800be78:	e000      	b.n	800be7c <MIDI_DataRx+0x78>
	  break;
 800be7a:	bf00      	nop
  }
  }
  return 0;
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3710      	adds	r7, #16
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	20000258 	.word	0x20000258

0800be8c <MIDI_DataTx>:

uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	460b      	mov	r3, r1
 800be96:	807b      	strh	r3, [r7, #2]
  uint32_t i = 0;
 800be98:	2300      	movs	r3, #0
 800be9a:	60fb      	str	r3, [r7, #12]
  while (i < length) {
 800be9c:	e017      	b.n	800bece <MIDI_DataTx+0x42>
    APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	441a      	add	r2, r3
 800bea4:	4b0f      	ldr	r3, [pc, #60]	; (800bee4 <MIDI_DataTx+0x58>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	7811      	ldrb	r1, [r2, #0]
 800beaa:	4a0f      	ldr	r2, [pc, #60]	; (800bee8 <MIDI_DataTx+0x5c>)
 800beac:	54d1      	strb	r1, [r2, r3]
    APP_Rx_ptr_in++;
 800beae:	4b0d      	ldr	r3, [pc, #52]	; (800bee4 <MIDI_DataTx+0x58>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	3301      	adds	r3, #1
 800beb4:	4a0b      	ldr	r2, [pc, #44]	; (800bee4 <MIDI_DataTx+0x58>)
 800beb6:	6013      	str	r3, [r2, #0]
    i++;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	3301      	adds	r3, #1
 800bebc:	60fb      	str	r3, [r7, #12]
    if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 800bebe:	4b09      	ldr	r3, [pc, #36]	; (800bee4 <MIDI_DataTx+0x58>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bec6:	d102      	bne.n	800bece <MIDI_DataTx+0x42>
      APP_Rx_ptr_in = 0;
 800bec8:	4b06      	ldr	r3, [pc, #24]	; (800bee4 <MIDI_DataTx+0x58>)
 800beca:	2200      	movs	r2, #0
 800becc:	601a      	str	r2, [r3, #0]
  while (i < length) {
 800bece:	887b      	ldrh	r3, [r7, #2]
 800bed0:	68fa      	ldr	r2, [r7, #12]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d3e3      	bcc.n	800be9e <MIDI_DataTx+0x12>
    }
  }
  USBD_MIDI_SendPacket();
 800bed6:	f7fe fc51 	bl	800a77c <USBD_MIDI_SendPacket>
  return USBD_OK;
 800beda:	2300      	movs	r3, #0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	2000038c 	.word	0x2000038c
 800bee8:	200008d8 	.word	0x200008d8

0800beec <MIDI_SendBuffer>:

uint16_t MIDI_SendBuffer(uint8_t *msg, uint16_t length){
 800beec:	b480      	push	{r7}
 800beee:	b085      	sub	sp, #20
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	460b      	mov	r3, r1
 800bef6:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800bef8:	2300      	movs	r3, #0
 800befa:	60fb      	str	r3, [r7, #12]
	while (i < length) {
 800befc:	e017      	b.n	800bf2e <MIDI_SendBuffer+0x42>
		APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	441a      	add	r2, r3
 800bf04:	4b11      	ldr	r3, [pc, #68]	; (800bf4c <MIDI_SendBuffer+0x60>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	7811      	ldrb	r1, [r2, #0]
 800bf0a:	4a11      	ldr	r2, [pc, #68]	; (800bf50 <MIDI_SendBuffer+0x64>)
 800bf0c:	54d1      	strb	r1, [r2, r3]
		APP_Rx_ptr_in++;
 800bf0e:	4b0f      	ldr	r3, [pc, #60]	; (800bf4c <MIDI_SendBuffer+0x60>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	3301      	adds	r3, #1
 800bf14:	4a0d      	ldr	r2, [pc, #52]	; (800bf4c <MIDI_SendBuffer+0x60>)
 800bf16:	6013      	str	r3, [r2, #0]
		i++;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	60fb      	str	r3, [r7, #12]
		if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 800bf1e:	4b0b      	ldr	r3, [pc, #44]	; (800bf4c <MIDI_SendBuffer+0x60>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf26:	d102      	bne.n	800bf2e <MIDI_SendBuffer+0x42>
			APP_Rx_ptr_in = 0;
 800bf28:	4b08      	ldr	r3, [pc, #32]	; (800bf4c <MIDI_SendBuffer+0x60>)
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	601a      	str	r2, [r3, #0]
	while (i < length) {
 800bf2e:	887b      	ldrh	r3, [r7, #2]
 800bf30:	68fa      	ldr	r2, [r7, #12]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d3e3      	bcc.n	800befe <MIDI_SendBuffer+0x12>
		}
	}
	flag_sendMidi = 1;
 800bf36:	4b07      	ldr	r3, [pc, #28]	; (800bf54 <MIDI_SendBuffer+0x68>)
 800bf38:	2201      	movs	r2, #1
 800bf3a:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3714      	adds	r7, #20
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr
 800bf4a:	bf00      	nop
 800bf4c:	2000038c 	.word	0x2000038c
 800bf50:	200008d8 	.word	0x200008d8
 800bf54:	2000039a 	.word	0x2000039a

0800bf58 <MIDI_SendCheck>:

void MIDI_SendCheck(void){
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	af00      	add	r7, sp, #0
	if (flag_sendMidi != 0){
 800bf5c:	4b07      	ldr	r3, [pc, #28]	; (800bf7c <MIDI_SendCheck+0x24>)
 800bf5e:	781b      	ldrb	r3, [r3, #0]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d008      	beq.n	800bf76 <MIDI_SendCheck+0x1e>
		if (USB_Tx_State == 0){
 800bf64:	4b06      	ldr	r3, [pc, #24]	; (800bf80 <MIDI_SendCheck+0x28>)
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d104      	bne.n	800bf76 <MIDI_SendCheck+0x1e>
			USBD_MIDI_SendPacket();
 800bf6c:	f7fe fc06 	bl	800a77c <USBD_MIDI_SendPacket>
			flag_sendMidi = 0;
 800bf70:	4b02      	ldr	r3, [pc, #8]	; (800bf7c <MIDI_SendCheck+0x24>)
 800bf72:	2200      	movs	r2, #0
 800bf74:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800bf76:	bf00      	nop
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	2000039a 	.word	0x2000039a
 800bf80:	20000398 	.word	0x20000398

0800bf84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b08a      	sub	sp, #40	; 0x28
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf8c:	f107 0314 	add.w	r3, r7, #20
 800bf90:	2200      	movs	r2, #0
 800bf92:	601a      	str	r2, [r3, #0]
 800bf94:	605a      	str	r2, [r3, #4]
 800bf96:	609a      	str	r2, [r3, #8]
 800bf98:	60da      	str	r2, [r3, #12]
 800bf9a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bfa4:	d13a      	bne.n	800c01c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	613b      	str	r3, [r7, #16]
 800bfaa:	4b1e      	ldr	r3, [pc, #120]	; (800c024 <HAL_PCD_MspInit+0xa0>)
 800bfac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfae:	4a1d      	ldr	r2, [pc, #116]	; (800c024 <HAL_PCD_MspInit+0xa0>)
 800bfb0:	f043 0301 	orr.w	r3, r3, #1
 800bfb4:	6313      	str	r3, [r2, #48]	; 0x30
 800bfb6:	4b1b      	ldr	r3, [pc, #108]	; (800c024 <HAL_PCD_MspInit+0xa0>)
 800bfb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfba:	f003 0301 	and.w	r3, r3, #1
 800bfbe:	613b      	str	r3, [r7, #16]
 800bfc0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bfc2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bfc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfc8:	2302      	movs	r3, #2
 800bfca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfd0:	2303      	movs	r3, #3
 800bfd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bfd4:	230a      	movs	r3, #10
 800bfd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bfd8:	f107 0314 	add.w	r3, r7, #20
 800bfdc:	4619      	mov	r1, r3
 800bfde:	4812      	ldr	r0, [pc, #72]	; (800c028 <HAL_PCD_MspInit+0xa4>)
 800bfe0:	f7f6 ffe2 	bl	8002fa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bfe4:	4b0f      	ldr	r3, [pc, #60]	; (800c024 <HAL_PCD_MspInit+0xa0>)
 800bfe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfe8:	4a0e      	ldr	r2, [pc, #56]	; (800c024 <HAL_PCD_MspInit+0xa0>)
 800bfea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfee:	6353      	str	r3, [r2, #52]	; 0x34
 800bff0:	2300      	movs	r3, #0
 800bff2:	60fb      	str	r3, [r7, #12]
 800bff4:	4b0b      	ldr	r3, [pc, #44]	; (800c024 <HAL_PCD_MspInit+0xa0>)
 800bff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bff8:	4a0a      	ldr	r2, [pc, #40]	; (800c024 <HAL_PCD_MspInit+0xa0>)
 800bffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bffe:	6453      	str	r3, [r2, #68]	; 0x44
 800c000:	4b08      	ldr	r3, [pc, #32]	; (800c024 <HAL_PCD_MspInit+0xa0>)
 800c002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c008:	60fb      	str	r3, [r7, #12]
 800c00a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c00c:	2200      	movs	r2, #0
 800c00e:	2100      	movs	r1, #0
 800c010:	2043      	movs	r0, #67	; 0x43
 800c012:	f7f6 fe68 	bl	8002ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c016:	2043      	movs	r0, #67	; 0x43
 800c018:	f7f6 fe81 	bl	8002d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c01c:	bf00      	nop
 800c01e:	3728      	adds	r7, #40	; 0x28
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	40023800 	.word	0x40023800
 800c028:	40020000 	.word	0x40020000

0800c02c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c040:	4619      	mov	r1, r3
 800c042:	4610      	mov	r0, r2
 800c044:	f7fe fcd3 	bl	800a9ee <USBD_LL_SetupStage>
}
 800c048:	bf00      	nop
 800c04a:	3708      	adds	r7, #8
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	460b      	mov	r3, r1
 800c05a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c062:	78fa      	ldrb	r2, [r7, #3]
 800c064:	6879      	ldr	r1, [r7, #4]
 800c066:	4613      	mov	r3, r2
 800c068:	00db      	lsls	r3, r3, #3
 800c06a:	1a9b      	subs	r3, r3, r2
 800c06c:	009b      	lsls	r3, r3, #2
 800c06e:	440b      	add	r3, r1
 800c070:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	78fb      	ldrb	r3, [r7, #3]
 800c078:	4619      	mov	r1, r3
 800c07a:	f7fe fd0b 	bl	800aa94 <USBD_LL_DataOutStage>
}
 800c07e:	bf00      	nop
 800c080:	3708      	adds	r7, #8
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b082      	sub	sp, #8
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	460b      	mov	r3, r1
 800c090:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c098:	78fa      	ldrb	r2, [r7, #3]
 800c09a:	6879      	ldr	r1, [r7, #4]
 800c09c:	4613      	mov	r3, r2
 800c09e:	00db      	lsls	r3, r3, #3
 800c0a0:	1a9b      	subs	r3, r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	440b      	add	r3, r1
 800c0a6:	3348      	adds	r3, #72	; 0x48
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	78fb      	ldrb	r3, [r7, #3]
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	f7fe fd54 	bl	800ab5a <USBD_LL_DataInStage>
}
 800c0b2:	bf00      	nop
 800c0b4:	3708      	adds	r7, #8
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b082      	sub	sp, #8
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7fe fe58 	bl	800ad7e <USBD_LL_SOF>
}
 800c0ce:	bf00      	nop
 800c0d0:	3708      	adds	r7, #8
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b084      	sub	sp, #16
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	68db      	ldr	r3, [r3, #12]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d102      	bne.n	800c0f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	73fb      	strb	r3, [r7, #15]
 800c0ee:	e008      	b.n	800c102 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	d102      	bne.n	800c0fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	73fb      	strb	r3, [r7, #15]
 800c0fc:	e001      	b.n	800c102 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c0fe:	f7f5 fde3 	bl	8001cc8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c108:	7bfa      	ldrb	r2, [r7, #15]
 800c10a:	4611      	mov	r1, r2
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7fe fdfb 	bl	800ad08 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c118:	4618      	mov	r0, r3
 800c11a:	f7fe fdb4 	bl	800ac86 <USBD_LL_Reset>
}
 800c11e:	bf00      	nop
 800c120:	3710      	adds	r7, #16
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
	...

0800c128 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c136:	4618      	mov	r0, r3
 800c138:	f7fe fdf6 	bl	800ad28 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	6812      	ldr	r2, [r2, #0]
 800c14a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c14e:	f043 0301 	orr.w	r3, r3, #1
 800c152:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6a1b      	ldr	r3, [r3, #32]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d005      	beq.n	800c168 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c15c:	4b04      	ldr	r3, [pc, #16]	; (800c170 <HAL_PCD_SuspendCallback+0x48>)
 800c15e:	691b      	ldr	r3, [r3, #16]
 800c160:	4a03      	ldr	r2, [pc, #12]	; (800c170 <HAL_PCD_SuspendCallback+0x48>)
 800c162:	f043 0306 	orr.w	r3, r3, #6
 800c166:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c168:	bf00      	nop
 800c16a:	3708      	adds	r7, #8
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	e000ed00 	.word	0xe000ed00

0800c174 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c182:	4618      	mov	r0, r3
 800c184:	f7fe fde5 	bl	800ad52 <USBD_LL_Resume>
}
 800c188:	bf00      	nop
 800c18a:	3708      	adds	r7, #8
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	460b      	mov	r3, r1
 800c19a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1a2:	78fa      	ldrb	r2, [r7, #3]
 800c1a4:	4611      	mov	r1, r2
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7fe fe10 	bl	800adcc <USBD_LL_IsoOUTIncomplete>
}
 800c1ac:	bf00      	nop
 800c1ae:	3708      	adds	r7, #8
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	460b      	mov	r3, r1
 800c1be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1c6:	78fa      	ldrb	r2, [r7, #3]
 800c1c8:	4611      	mov	r1, r2
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7fe fdf1 	bl	800adb2 <USBD_LL_IsoINIncomplete>
}
 800c1d0:	bf00      	nop
 800c1d2:	3708      	adds	r7, #8
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fe fdfd 	bl	800ade6 <USBD_LL_DevConnected>
}
 800c1ec:	bf00      	nop
 800c1ee:	3708      	adds	r7, #8
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c202:	4618      	mov	r0, r3
 800c204:	f7fe fdfa 	bl	800adfc <USBD_LL_DevDisconnected>
}
 800c208:	bf00      	nop
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d13c      	bne.n	800c29a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c220:	4a20      	ldr	r2, [pc, #128]	; (800c2a4 <USBD_LL_Init+0x94>)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4a1e      	ldr	r2, [pc, #120]	; (800c2a4 <USBD_LL_Init+0x94>)
 800c22c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c230:	4b1c      	ldr	r3, [pc, #112]	; (800c2a4 <USBD_LL_Init+0x94>)
 800c232:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c236:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c238:	4b1a      	ldr	r3, [pc, #104]	; (800c2a4 <USBD_LL_Init+0x94>)
 800c23a:	2204      	movs	r2, #4
 800c23c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c23e:	4b19      	ldr	r3, [pc, #100]	; (800c2a4 <USBD_LL_Init+0x94>)
 800c240:	2202      	movs	r2, #2
 800c242:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c244:	4b17      	ldr	r3, [pc, #92]	; (800c2a4 <USBD_LL_Init+0x94>)
 800c246:	2200      	movs	r2, #0
 800c248:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c24a:	4b16      	ldr	r3, [pc, #88]	; (800c2a4 <USBD_LL_Init+0x94>)
 800c24c:	2202      	movs	r2, #2
 800c24e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c250:	4b14      	ldr	r3, [pc, #80]	; (800c2a4 <USBD_LL_Init+0x94>)
 800c252:	2200      	movs	r2, #0
 800c254:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c256:	4b13      	ldr	r3, [pc, #76]	; (800c2a4 <USBD_LL_Init+0x94>)
 800c258:	2200      	movs	r2, #0
 800c25a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c25c:	4b11      	ldr	r3, [pc, #68]	; (800c2a4 <USBD_LL_Init+0x94>)
 800c25e:	2200      	movs	r2, #0
 800c260:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c262:	4b10      	ldr	r3, [pc, #64]	; (800c2a4 <USBD_LL_Init+0x94>)
 800c264:	2200      	movs	r2, #0
 800c266:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c268:	4b0e      	ldr	r3, [pc, #56]	; (800c2a4 <USBD_LL_Init+0x94>)
 800c26a:	2200      	movs	r2, #0
 800c26c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c26e:	480d      	ldr	r0, [pc, #52]	; (800c2a4 <USBD_LL_Init+0x94>)
 800c270:	f7f9 f939 	bl	80054e6 <HAL_PCD_Init>
 800c274:	4603      	mov	r3, r0
 800c276:	2b00      	cmp	r3, #0
 800c278:	d001      	beq.n	800c27e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c27a:	f7f5 fd25 	bl	8001cc8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c27e:	2180      	movs	r1, #128	; 0x80
 800c280:	4808      	ldr	r0, [pc, #32]	; (800c2a4 <USBD_LL_Init+0x94>)
 800c282:	f7fa fa96 	bl	80067b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c286:	2240      	movs	r2, #64	; 0x40
 800c288:	2100      	movs	r1, #0
 800c28a:	4806      	ldr	r0, [pc, #24]	; (800c2a4 <USBD_LL_Init+0x94>)
 800c28c:	f7fa fa4a 	bl	8006724 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c290:	2280      	movs	r2, #128	; 0x80
 800c292:	2101      	movs	r1, #1
 800c294:	4803      	ldr	r0, [pc, #12]	; (800c2a4 <USBD_LL_Init+0x94>)
 800c296:	f7fa fa45 	bl	8006724 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c29a:	2300      	movs	r3, #0
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3708      	adds	r7, #8
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}
 800c2a4:	20000ea8 	.word	0x20000ea8

0800c2a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7f9 fa2e 	bl	8005720 <HAL_PCD_Start>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2c8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f000 f92a 	bl	800c524 <USBD_Get_USB_Status>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3710      	adds	r7, #16
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}

0800c2de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c2de:	b580      	push	{r7, lr}
 800c2e0:	b084      	sub	sp, #16
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
 800c2e6:	4608      	mov	r0, r1
 800c2e8:	4611      	mov	r1, r2
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	70fb      	strb	r3, [r7, #3]
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	70bb      	strb	r3, [r7, #2]
 800c2f4:	4613      	mov	r3, r2
 800c2f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c306:	78bb      	ldrb	r3, [r7, #2]
 800c308:	883a      	ldrh	r2, [r7, #0]
 800c30a:	78f9      	ldrb	r1, [r7, #3]
 800c30c:	f7f9 fe12 	bl	8005f34 <HAL_PCD_EP_Open>
 800c310:	4603      	mov	r3, r0
 800c312:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c314:	7bfb      	ldrb	r3, [r7, #15]
 800c316:	4618      	mov	r0, r3
 800c318:	f000 f904 	bl	800c524 <USBD_Get_USB_Status>
 800c31c:	4603      	mov	r3, r0
 800c31e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c320:	7bbb      	ldrb	r3, [r7, #14]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b084      	sub	sp, #16
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
 800c332:	460b      	mov	r3, r1
 800c334:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c336:	2300      	movs	r3, #0
 800c338:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c33a:	2300      	movs	r3, #0
 800c33c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c344:	78fa      	ldrb	r2, [r7, #3]
 800c346:	4611      	mov	r1, r2
 800c348:	4618      	mov	r0, r3
 800c34a:	f7f9 fe5b 	bl	8006004 <HAL_PCD_EP_Close>
 800c34e:	4603      	mov	r3, r0
 800c350:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c352:	7bfb      	ldrb	r3, [r7, #15]
 800c354:	4618      	mov	r0, r3
 800c356:	f000 f8e5 	bl	800c524 <USBD_Get_USB_Status>
 800c35a:	4603      	mov	r3, r0
 800c35c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c35e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c360:	4618      	mov	r0, r3
 800c362:	3710      	adds	r7, #16
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	460b      	mov	r3, r1
 800c372:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c374:	2300      	movs	r3, #0
 800c376:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c378:	2300      	movs	r3, #0
 800c37a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c382:	78fa      	ldrb	r2, [r7, #3]
 800c384:	4611      	mov	r1, r2
 800c386:	4618      	mov	r0, r3
 800c388:	f7f9 ff33 	bl	80061f2 <HAL_PCD_EP_SetStall>
 800c38c:	4603      	mov	r3, r0
 800c38e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c390:	7bfb      	ldrb	r3, [r7, #15]
 800c392:	4618      	mov	r0, r3
 800c394:	f000 f8c6 	bl	800c524 <USBD_Get_USB_Status>
 800c398:	4603      	mov	r3, r0
 800c39a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c39c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}

0800c3a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b084      	sub	sp, #16
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
 800c3ae:	460b      	mov	r3, r1
 800c3b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c3c0:	78fa      	ldrb	r2, [r7, #3]
 800c3c2:	4611      	mov	r1, r2
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7f9 ff78 	bl	80062ba <HAL_PCD_EP_ClrStall>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3ce:	7bfb      	ldrb	r3, [r7, #15]
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f000 f8a7 	bl	800c524 <USBD_Get_USB_Status>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3da:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b085      	sub	sp, #20
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c3f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c3f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	da0b      	bge.n	800c418 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c400:	78fb      	ldrb	r3, [r7, #3]
 800c402:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c406:	68f9      	ldr	r1, [r7, #12]
 800c408:	4613      	mov	r3, r2
 800c40a:	00db      	lsls	r3, r3, #3
 800c40c:	1a9b      	subs	r3, r3, r2
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	440b      	add	r3, r1
 800c412:	333e      	adds	r3, #62	; 0x3e
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	e00b      	b.n	800c430 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c418:	78fb      	ldrb	r3, [r7, #3]
 800c41a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c41e:	68f9      	ldr	r1, [r7, #12]
 800c420:	4613      	mov	r3, r2
 800c422:	00db      	lsls	r3, r3, #3
 800c424:	1a9b      	subs	r3, r3, r2
 800c426:	009b      	lsls	r3, r3, #2
 800c428:	440b      	add	r3, r1
 800c42a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c42e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c430:	4618      	mov	r0, r3
 800c432:	3714      	adds	r7, #20
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr

0800c43c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b084      	sub	sp, #16
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	460b      	mov	r3, r1
 800c446:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c448:	2300      	movs	r3, #0
 800c44a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c44c:	2300      	movs	r3, #0
 800c44e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c456:	78fa      	ldrb	r2, [r7, #3]
 800c458:	4611      	mov	r1, r2
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7f9 fd45 	bl	8005eea <HAL_PCD_SetAddress>
 800c460:	4603      	mov	r3, r0
 800c462:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c464:	7bfb      	ldrb	r3, [r7, #15]
 800c466:	4618      	mov	r0, r3
 800c468:	f000 f85c 	bl	800c524 <USBD_Get_USB_Status>
 800c46c:	4603      	mov	r3, r0
 800c46e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c470:	7bbb      	ldrb	r3, [r7, #14]
}
 800c472:	4618      	mov	r0, r3
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}

0800c47a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b086      	sub	sp, #24
 800c47e:	af00      	add	r7, sp, #0
 800c480:	60f8      	str	r0, [r7, #12]
 800c482:	607a      	str	r2, [r7, #4]
 800c484:	603b      	str	r3, [r7, #0]
 800c486:	460b      	mov	r3, r1
 800c488:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c48a:	2300      	movs	r3, #0
 800c48c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c48e:	2300      	movs	r3, #0
 800c490:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c498:	7af9      	ldrb	r1, [r7, #11]
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	687a      	ldr	r2, [r7, #4]
 800c49e:	f7f9 fe5e 	bl	800615e <HAL_PCD_EP_Transmit>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4a6:	7dfb      	ldrb	r3, [r7, #23]
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f000 f83b 	bl	800c524 <USBD_Get_USB_Status>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3718      	adds	r7, #24
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b086      	sub	sp, #24
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	607a      	str	r2, [r7, #4]
 800c4c6:	603b      	str	r3, [r7, #0]
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c4da:	7af9      	ldrb	r1, [r7, #11]
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	f7f9 fdda 	bl	8006098 <HAL_PCD_EP_Receive>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4e8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 f81a 	bl	800c524 <USBD_Get_USB_Status>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3718      	adds	r7, #24
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b082      	sub	sp, #8
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
 800c506:	460b      	mov	r3, r1
 800c508:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c510:	78fa      	ldrb	r2, [r7, #3]
 800c512:	4611      	mov	r1, r2
 800c514:	4618      	mov	r0, r3
 800c516:	f7f9 fe0a 	bl	800612e <HAL_PCD_EP_GetRxCount>
 800c51a:	4603      	mov	r3, r0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3708      	adds	r7, #8
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c524:	b480      	push	{r7}
 800c526:	b085      	sub	sp, #20
 800c528:	af00      	add	r7, sp, #0
 800c52a:	4603      	mov	r3, r0
 800c52c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c52e:	2300      	movs	r3, #0
 800c530:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c532:	79fb      	ldrb	r3, [r7, #7]
 800c534:	2b03      	cmp	r3, #3
 800c536:	d817      	bhi.n	800c568 <USBD_Get_USB_Status+0x44>
 800c538:	a201      	add	r2, pc, #4	; (adr r2, 800c540 <USBD_Get_USB_Status+0x1c>)
 800c53a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c53e:	bf00      	nop
 800c540:	0800c551 	.word	0x0800c551
 800c544:	0800c557 	.word	0x0800c557
 800c548:	0800c55d 	.word	0x0800c55d
 800c54c:	0800c563 	.word	0x0800c563
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c550:	2300      	movs	r3, #0
 800c552:	73fb      	strb	r3, [r7, #15]
    break;
 800c554:	e00b      	b.n	800c56e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c556:	2303      	movs	r3, #3
 800c558:	73fb      	strb	r3, [r7, #15]
    break;
 800c55a:	e008      	b.n	800c56e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c55c:	2301      	movs	r3, #1
 800c55e:	73fb      	strb	r3, [r7, #15]
    break;
 800c560:	e005      	b.n	800c56e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c562:	2303      	movs	r3, #3
 800c564:	73fb      	strb	r3, [r7, #15]
    break;
 800c566:	e002      	b.n	800c56e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c568:	2303      	movs	r3, #3
 800c56a:	73fb      	strb	r3, [r7, #15]
    break;
 800c56c:	bf00      	nop
  }
  return usb_status;
 800c56e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c570:	4618      	mov	r0, r3
 800c572:	3714      	adds	r7, #20
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr

0800c57c <__errno>:
 800c57c:	4b01      	ldr	r3, [pc, #4]	; (800c584 <__errno+0x8>)
 800c57e:	6818      	ldr	r0, [r3, #0]
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop
 800c584:	20000270 	.word	0x20000270

0800c588 <__libc_init_array>:
 800c588:	b570      	push	{r4, r5, r6, lr}
 800c58a:	4e0d      	ldr	r6, [pc, #52]	; (800c5c0 <__libc_init_array+0x38>)
 800c58c:	4c0d      	ldr	r4, [pc, #52]	; (800c5c4 <__libc_init_array+0x3c>)
 800c58e:	1ba4      	subs	r4, r4, r6
 800c590:	10a4      	asrs	r4, r4, #2
 800c592:	2500      	movs	r5, #0
 800c594:	42a5      	cmp	r5, r4
 800c596:	d109      	bne.n	800c5ac <__libc_init_array+0x24>
 800c598:	4e0b      	ldr	r6, [pc, #44]	; (800c5c8 <__libc_init_array+0x40>)
 800c59a:	4c0c      	ldr	r4, [pc, #48]	; (800c5cc <__libc_init_array+0x44>)
 800c59c:	f000 f8ea 	bl	800c774 <_init>
 800c5a0:	1ba4      	subs	r4, r4, r6
 800c5a2:	10a4      	asrs	r4, r4, #2
 800c5a4:	2500      	movs	r5, #0
 800c5a6:	42a5      	cmp	r5, r4
 800c5a8:	d105      	bne.n	800c5b6 <__libc_init_array+0x2e>
 800c5aa:	bd70      	pop	{r4, r5, r6, pc}
 800c5ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c5b0:	4798      	blx	r3
 800c5b2:	3501      	adds	r5, #1
 800c5b4:	e7ee      	b.n	800c594 <__libc_init_array+0xc>
 800c5b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c5ba:	4798      	blx	r3
 800c5bc:	3501      	adds	r5, #1
 800c5be:	e7f2      	b.n	800c5a6 <__libc_init_array+0x1e>
 800c5c0:	08040698 	.word	0x08040698
 800c5c4:	08040698 	.word	0x08040698
 800c5c8:	08040698 	.word	0x08040698
 800c5cc:	0804069c 	.word	0x0804069c

0800c5d0 <malloc>:
 800c5d0:	4b02      	ldr	r3, [pc, #8]	; (800c5dc <malloc+0xc>)
 800c5d2:	4601      	mov	r1, r0
 800c5d4:	6818      	ldr	r0, [r3, #0]
 800c5d6:	f000 b861 	b.w	800c69c <_malloc_r>
 800c5da:	bf00      	nop
 800c5dc:	20000270 	.word	0x20000270

0800c5e0 <free>:
 800c5e0:	4b02      	ldr	r3, [pc, #8]	; (800c5ec <free+0xc>)
 800c5e2:	4601      	mov	r1, r0
 800c5e4:	6818      	ldr	r0, [r3, #0]
 800c5e6:	f000 b80b 	b.w	800c600 <_free_r>
 800c5ea:	bf00      	nop
 800c5ec:	20000270 	.word	0x20000270

0800c5f0 <memset>:
 800c5f0:	4402      	add	r2, r0
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d100      	bne.n	800c5fa <memset+0xa>
 800c5f8:	4770      	bx	lr
 800c5fa:	f803 1b01 	strb.w	r1, [r3], #1
 800c5fe:	e7f9      	b.n	800c5f4 <memset+0x4>

0800c600 <_free_r>:
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	4605      	mov	r5, r0
 800c604:	2900      	cmp	r1, #0
 800c606:	d045      	beq.n	800c694 <_free_r+0x94>
 800c608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c60c:	1f0c      	subs	r4, r1, #4
 800c60e:	2b00      	cmp	r3, #0
 800c610:	bfb8      	it	lt
 800c612:	18e4      	addlt	r4, r4, r3
 800c614:	f000 f8ac 	bl	800c770 <__malloc_lock>
 800c618:	4a1f      	ldr	r2, [pc, #124]	; (800c698 <_free_r+0x98>)
 800c61a:	6813      	ldr	r3, [r2, #0]
 800c61c:	4610      	mov	r0, r2
 800c61e:	b933      	cbnz	r3, 800c62e <_free_r+0x2e>
 800c620:	6063      	str	r3, [r4, #4]
 800c622:	6014      	str	r4, [r2, #0]
 800c624:	4628      	mov	r0, r5
 800c626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c62a:	f000 b8a2 	b.w	800c772 <__malloc_unlock>
 800c62e:	42a3      	cmp	r3, r4
 800c630:	d90c      	bls.n	800c64c <_free_r+0x4c>
 800c632:	6821      	ldr	r1, [r4, #0]
 800c634:	1862      	adds	r2, r4, r1
 800c636:	4293      	cmp	r3, r2
 800c638:	bf04      	itt	eq
 800c63a:	681a      	ldreq	r2, [r3, #0]
 800c63c:	685b      	ldreq	r3, [r3, #4]
 800c63e:	6063      	str	r3, [r4, #4]
 800c640:	bf04      	itt	eq
 800c642:	1852      	addeq	r2, r2, r1
 800c644:	6022      	streq	r2, [r4, #0]
 800c646:	6004      	str	r4, [r0, #0]
 800c648:	e7ec      	b.n	800c624 <_free_r+0x24>
 800c64a:	4613      	mov	r3, r2
 800c64c:	685a      	ldr	r2, [r3, #4]
 800c64e:	b10a      	cbz	r2, 800c654 <_free_r+0x54>
 800c650:	42a2      	cmp	r2, r4
 800c652:	d9fa      	bls.n	800c64a <_free_r+0x4a>
 800c654:	6819      	ldr	r1, [r3, #0]
 800c656:	1858      	adds	r0, r3, r1
 800c658:	42a0      	cmp	r0, r4
 800c65a:	d10b      	bne.n	800c674 <_free_r+0x74>
 800c65c:	6820      	ldr	r0, [r4, #0]
 800c65e:	4401      	add	r1, r0
 800c660:	1858      	adds	r0, r3, r1
 800c662:	4282      	cmp	r2, r0
 800c664:	6019      	str	r1, [r3, #0]
 800c666:	d1dd      	bne.n	800c624 <_free_r+0x24>
 800c668:	6810      	ldr	r0, [r2, #0]
 800c66a:	6852      	ldr	r2, [r2, #4]
 800c66c:	605a      	str	r2, [r3, #4]
 800c66e:	4401      	add	r1, r0
 800c670:	6019      	str	r1, [r3, #0]
 800c672:	e7d7      	b.n	800c624 <_free_r+0x24>
 800c674:	d902      	bls.n	800c67c <_free_r+0x7c>
 800c676:	230c      	movs	r3, #12
 800c678:	602b      	str	r3, [r5, #0]
 800c67a:	e7d3      	b.n	800c624 <_free_r+0x24>
 800c67c:	6820      	ldr	r0, [r4, #0]
 800c67e:	1821      	adds	r1, r4, r0
 800c680:	428a      	cmp	r2, r1
 800c682:	bf04      	itt	eq
 800c684:	6811      	ldreq	r1, [r2, #0]
 800c686:	6852      	ldreq	r2, [r2, #4]
 800c688:	6062      	str	r2, [r4, #4]
 800c68a:	bf04      	itt	eq
 800c68c:	1809      	addeq	r1, r1, r0
 800c68e:	6021      	streq	r1, [r4, #0]
 800c690:	605c      	str	r4, [r3, #4]
 800c692:	e7c7      	b.n	800c624 <_free_r+0x24>
 800c694:	bd38      	pop	{r3, r4, r5, pc}
 800c696:	bf00      	nop
 800c698:	2000039c 	.word	0x2000039c

0800c69c <_malloc_r>:
 800c69c:	b570      	push	{r4, r5, r6, lr}
 800c69e:	1ccd      	adds	r5, r1, #3
 800c6a0:	f025 0503 	bic.w	r5, r5, #3
 800c6a4:	3508      	adds	r5, #8
 800c6a6:	2d0c      	cmp	r5, #12
 800c6a8:	bf38      	it	cc
 800c6aa:	250c      	movcc	r5, #12
 800c6ac:	2d00      	cmp	r5, #0
 800c6ae:	4606      	mov	r6, r0
 800c6b0:	db01      	blt.n	800c6b6 <_malloc_r+0x1a>
 800c6b2:	42a9      	cmp	r1, r5
 800c6b4:	d903      	bls.n	800c6be <_malloc_r+0x22>
 800c6b6:	230c      	movs	r3, #12
 800c6b8:	6033      	str	r3, [r6, #0]
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	bd70      	pop	{r4, r5, r6, pc}
 800c6be:	f000 f857 	bl	800c770 <__malloc_lock>
 800c6c2:	4a21      	ldr	r2, [pc, #132]	; (800c748 <_malloc_r+0xac>)
 800c6c4:	6814      	ldr	r4, [r2, #0]
 800c6c6:	4621      	mov	r1, r4
 800c6c8:	b991      	cbnz	r1, 800c6f0 <_malloc_r+0x54>
 800c6ca:	4c20      	ldr	r4, [pc, #128]	; (800c74c <_malloc_r+0xb0>)
 800c6cc:	6823      	ldr	r3, [r4, #0]
 800c6ce:	b91b      	cbnz	r3, 800c6d8 <_malloc_r+0x3c>
 800c6d0:	4630      	mov	r0, r6
 800c6d2:	f000 f83d 	bl	800c750 <_sbrk_r>
 800c6d6:	6020      	str	r0, [r4, #0]
 800c6d8:	4629      	mov	r1, r5
 800c6da:	4630      	mov	r0, r6
 800c6dc:	f000 f838 	bl	800c750 <_sbrk_r>
 800c6e0:	1c43      	adds	r3, r0, #1
 800c6e2:	d124      	bne.n	800c72e <_malloc_r+0x92>
 800c6e4:	230c      	movs	r3, #12
 800c6e6:	6033      	str	r3, [r6, #0]
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	f000 f842 	bl	800c772 <__malloc_unlock>
 800c6ee:	e7e4      	b.n	800c6ba <_malloc_r+0x1e>
 800c6f0:	680b      	ldr	r3, [r1, #0]
 800c6f2:	1b5b      	subs	r3, r3, r5
 800c6f4:	d418      	bmi.n	800c728 <_malloc_r+0x8c>
 800c6f6:	2b0b      	cmp	r3, #11
 800c6f8:	d90f      	bls.n	800c71a <_malloc_r+0x7e>
 800c6fa:	600b      	str	r3, [r1, #0]
 800c6fc:	50cd      	str	r5, [r1, r3]
 800c6fe:	18cc      	adds	r4, r1, r3
 800c700:	4630      	mov	r0, r6
 800c702:	f000 f836 	bl	800c772 <__malloc_unlock>
 800c706:	f104 000b 	add.w	r0, r4, #11
 800c70a:	1d23      	adds	r3, r4, #4
 800c70c:	f020 0007 	bic.w	r0, r0, #7
 800c710:	1ac3      	subs	r3, r0, r3
 800c712:	d0d3      	beq.n	800c6bc <_malloc_r+0x20>
 800c714:	425a      	negs	r2, r3
 800c716:	50e2      	str	r2, [r4, r3]
 800c718:	e7d0      	b.n	800c6bc <_malloc_r+0x20>
 800c71a:	428c      	cmp	r4, r1
 800c71c:	684b      	ldr	r3, [r1, #4]
 800c71e:	bf16      	itet	ne
 800c720:	6063      	strne	r3, [r4, #4]
 800c722:	6013      	streq	r3, [r2, #0]
 800c724:	460c      	movne	r4, r1
 800c726:	e7eb      	b.n	800c700 <_malloc_r+0x64>
 800c728:	460c      	mov	r4, r1
 800c72a:	6849      	ldr	r1, [r1, #4]
 800c72c:	e7cc      	b.n	800c6c8 <_malloc_r+0x2c>
 800c72e:	1cc4      	adds	r4, r0, #3
 800c730:	f024 0403 	bic.w	r4, r4, #3
 800c734:	42a0      	cmp	r0, r4
 800c736:	d005      	beq.n	800c744 <_malloc_r+0xa8>
 800c738:	1a21      	subs	r1, r4, r0
 800c73a:	4630      	mov	r0, r6
 800c73c:	f000 f808 	bl	800c750 <_sbrk_r>
 800c740:	3001      	adds	r0, #1
 800c742:	d0cf      	beq.n	800c6e4 <_malloc_r+0x48>
 800c744:	6025      	str	r5, [r4, #0]
 800c746:	e7db      	b.n	800c700 <_malloc_r+0x64>
 800c748:	2000039c 	.word	0x2000039c
 800c74c:	200003a0 	.word	0x200003a0

0800c750 <_sbrk_r>:
 800c750:	b538      	push	{r3, r4, r5, lr}
 800c752:	4c06      	ldr	r4, [pc, #24]	; (800c76c <_sbrk_r+0x1c>)
 800c754:	2300      	movs	r3, #0
 800c756:	4605      	mov	r5, r0
 800c758:	4608      	mov	r0, r1
 800c75a:	6023      	str	r3, [r4, #0]
 800c75c:	f7f5 fcce 	bl	80020fc <_sbrk>
 800c760:	1c43      	adds	r3, r0, #1
 800c762:	d102      	bne.n	800c76a <_sbrk_r+0x1a>
 800c764:	6823      	ldr	r3, [r4, #0]
 800c766:	b103      	cbz	r3, 800c76a <_sbrk_r+0x1a>
 800c768:	602b      	str	r3, [r5, #0]
 800c76a:	bd38      	pop	{r3, r4, r5, pc}
 800c76c:	200012b0 	.word	0x200012b0

0800c770 <__malloc_lock>:
 800c770:	4770      	bx	lr

0800c772 <__malloc_unlock>:
 800c772:	4770      	bx	lr

0800c774 <_init>:
 800c774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c776:	bf00      	nop
 800c778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c77a:	bc08      	pop	{r3}
 800c77c:	469e      	mov	lr, r3
 800c77e:	4770      	bx	lr

0800c780 <_fini>:
 800c780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c782:	bf00      	nop
 800c784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c786:	bc08      	pop	{r3}
 800c788:	469e      	mov	lr, r3
 800c78a:	4770      	bx	lr
