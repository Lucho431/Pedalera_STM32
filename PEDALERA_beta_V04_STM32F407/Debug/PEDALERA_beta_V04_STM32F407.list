
PEDALERA_beta_V04_STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00033f20  0800d760  0800d760  0001d760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08041680  08041680  000602d8  2**0
                  CONTENTS
  4 .ARM          00000008  08041680  08041680  00051680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08041688  08041688  000602d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08041688  08041688  00051688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804168c  0804168c  0005168c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  08041690  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001004  200002d8  08041968  000602d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  200012dc  08041968  000612dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000602d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027f85  00000000  00000000  00060308  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005632  00000000  00000000  0008828d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d18  00000000  00000000  0008d8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a80  00000000  00000000  0008f5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028a15  00000000  00000000  00091058  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001dda5  00000000  00000000  000b9a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9448  00000000  00000000  000d7812  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b0c5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007894  00000000  00000000  001b0cd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200002d8 	.word	0x200002d8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d748 	.word	0x0800d748

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200002dc 	.word	0x200002dc
 80001c4:	0800d748 	.word	0x0800d748

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <spi_74HC165_init>:
GPIO_TypeDef* portPL;
GPIO_TypeDef* portCE;
uint16_t pinPL, pinCE;


void spi_74HC165_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* PLport, uint16_t PLpin, GPIO_TypeDef* CEport, uint16_t CEpin){
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	4613      	mov	r3, r2
 80004d6:	80fb      	strh	r3, [r7, #6]

	spi_handler=hspi;
 80004d8:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <spi_74HC165_init+0x3c>)
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	6013      	str	r3, [r2, #0]

	portPL = PLport;
 80004de:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <spi_74HC165_init+0x40>)
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	6013      	str	r3, [r2, #0]
	pinPL = PLpin;
 80004e4:	4a09      	ldr	r2, [pc, #36]	; (800050c <spi_74HC165_init+0x44>)
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	8013      	strh	r3, [r2, #0]

	portCE = CEport;
 80004ea:	4a09      	ldr	r2, [pc, #36]	; (8000510 <spi_74HC165_init+0x48>)
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	6013      	str	r3, [r2, #0]
	pinCE = CEpin;
 80004f0:	4a08      	ldr	r2, [pc, #32]	; (8000514 <spi_74HC165_init+0x4c>)
 80004f2:	8b3b      	ldrh	r3, [r7, #24]
 80004f4:	8013      	strh	r3, [r2, #0]

}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	200003bc 	.word	0x200003bc
 8000508:	200003c4 	.word	0x200003c4
 800050c:	200003c0 	.word	0x200003c0
 8000510:	200003cc 	.word	0x200003cc
 8000514:	200003c8 	.word	0x200003c8

08000518 <spi_74HC165_receive>:


void spi_74HC165_receive (uint8_t* pdata, uint16_t sizeData){
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	807b      	strh	r3, [r7, #2]

	//carga paralela
	HAL_GPIO_WritePin(portPL, pinPL, 0);
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <spi_74HC165_receive+0x64>)
 8000526:	6818      	ldr	r0, [r3, #0]
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <spi_74HC165_receive+0x68>)
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	2200      	movs	r2, #0
 800052e:	4619      	mov	r1, r3
 8000530:	f003 fd8a 	bl	8004048 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portPL, pinPL, 1);
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <spi_74HC165_receive+0x64>)
 8000536:	6818      	ldr	r0, [r3, #0]
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <spi_74HC165_receive+0x68>)
 800053a:	881b      	ldrh	r3, [r3, #0]
 800053c:	2201      	movs	r2, #1
 800053e:	4619      	mov	r1, r3
 8000540:	f003 fd82 	bl	8004048 <HAL_GPIO_WritePin>

	//clock enable
	HAL_GPIO_WritePin(portCE, pinCE, 0);
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <spi_74HC165_receive+0x6c>)
 8000546:	6818      	ldr	r0, [r3, #0]
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <spi_74HC165_receive+0x70>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	2200      	movs	r2, #0
 800054e:	4619      	mov	r1, r3
 8000550:	f003 fd7a 	bl	8004048 <HAL_GPIO_WritePin>

	//SPI
	HAL_SPI_Receive(spi_handler, pdata, sizeData, 100);
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <spi_74HC165_receive+0x74>)
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	887a      	ldrh	r2, [r7, #2]
 800055a:	2364      	movs	r3, #100	; 0x64
 800055c:	6879      	ldr	r1, [r7, #4]
 800055e:	f007 fdf5 	bl	800814c <HAL_SPI_Receive>

	//clock disable
	HAL_GPIO_WritePin(portCE, pinCE, 1);
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <spi_74HC165_receive+0x6c>)
 8000564:	6818      	ldr	r0, [r3, #0]
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <spi_74HC165_receive+0x70>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	2201      	movs	r2, #1
 800056c:	4619      	mov	r1, r3
 800056e:	f003 fd6b 	bl	8004048 <HAL_GPIO_WritePin>
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200003c4 	.word	0x200003c4
 8000580:	200003c0 	.word	0x200003c0
 8000584:	200003cc 	.word	0x200003cc
 8000588:	200003c8 	.word	0x200003c8
 800058c:	200003bc 	.word	0x200003bc

08000590 <spi_74HC595_init>:
SPI_HandleTypeDef* spi_handler;
GPIO_TypeDef* portST;
uint16_t pinST;


void spi_74HC595_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* STport, uint16_t STpin){
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	4613      	mov	r3, r2
 800059c:	80fb      	strh	r3, [r7, #6]

	spi_handler =hspi;
 800059e:	4a0a      	ldr	r2, [pc, #40]	; (80005c8 <spi_74HC595_init+0x38>)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	6013      	str	r3, [r2, #0]

	portST = STport;
 80005a4:	4a09      	ldr	r2, [pc, #36]	; (80005cc <spi_74HC595_init+0x3c>)
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	6013      	str	r3, [r2, #0]
	pinST = STpin;
 80005aa:	4a09      	ldr	r2, [pc, #36]	; (80005d0 <spi_74HC595_init+0x40>)
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(portST, pinST, 0);
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <spi_74HC595_init+0x3c>)
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <spi_74HC595_init+0x40>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	4619      	mov	r1, r3
 80005bc:	f003 fd44 	bl	8004048 <HAL_GPIO_WritePin>

} //end spi_74HC595_init()
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200003bc 	.word	0x200003bc
 80005cc:	200003d4 	.word	0x200003d4
 80005d0:	200003d0 	.word	0x200003d0

080005d4 <spi_74HC595_Transmit>:


void spi_74HC595_Transmit (uint8_t* pdata, uint16_t sizeData){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	807b      	strh	r3, [r7, #2]

	HAL_SPI_Transmit(spi_handler, pdata, sizeData, 100);
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <spi_74HC595_Transmit+0x44>)
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	887a      	ldrh	r2, [r7, #2]
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	6879      	ldr	r1, [r7, #4]
 80005ea:	f007 fc7b 	bl	8007ee4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(portST, pinST, 1);
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <spi_74HC595_Transmit+0x48>)
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <spi_74HC595_Transmit+0x4c>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	2201      	movs	r2, #1
 80005f8:	4619      	mov	r1, r3
 80005fa:	f003 fd25 	bl	8004048 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	HAL_GPIO_WritePin(portST, pinST, 0);
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <spi_74HC595_Transmit+0x48>)
 8000600:	6818      	ldr	r0, [r3, #0]
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <spi_74HC595_Transmit+0x4c>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	4619      	mov	r1, r3
 800060a:	f003 fd1d 	bl	8004048 <HAL_GPIO_WritePin>

} //end spi_74HC595_transmit()
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200003bc 	.word	0x200003bc
 800061c:	200003d4 	.word	0x200003d4
 8000620:	200003d0 	.word	0x200003d0

08000624 <makeChord>:

	Parameter: fchord		Number of the chord sent. It was made by setChord() and store in "chordSet[]" vector.

	Returns:	unsigned long	(0xXXXXXX) A 3-byte number that contains the fundamental note in the least significant byte, followed by the 2nd and 3rd notes of the chord.
*/
unsigned long makeChord(unsigned long bnote, uint8_t fchord){
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	70fb      	strb	r3, [r7, #3]

	unsigned long notes;

	notes = bnote;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	60fb      	str	r3, [r7, #12]
	notes += (bnote << 8);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	021b      	lsls	r3, r3, #8
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	4413      	add	r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
	notes += (bnote << 16);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	041b      	lsls	r3, r3, #16
 8000642:	68fa      	ldr	r2, [r7, #12]
 8000644:	4413      	add	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]


	notes += chordSet[fchord];
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	4a06      	ldr	r2, [pc, #24]	; (8000664 <makeChord+0x40>)
 800064c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000650:	68fa      	ldr	r2, [r7, #12]
 8000652:	4413      	add	r3, r2
 8000654:	60fb      	str	r3, [r7, #12]


	return notes;
 8000656:	68fb      	ldr	r3, [r7, #12]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	200002f8 	.word	0x200002f8

08000668 <setChord>:

	Parameter: fnote		id of the pressed note.

	Returns:	void
*/
void setChord(uint8_t fnote){
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]

chordSet[fnote] = hex_chord[chord] - hex_chordInv[chordInv];
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <setChord+0x34>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <setChord+0x38>)
 8000678:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <setChord+0x3c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a09      	ldr	r2, [pc, #36]	; (80006a8 <setChord+0x40>)
 8000682:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	1a8a      	subs	r2, r1, r2
 800068a:	4908      	ldr	r1, [pc, #32]	; (80006ac <setChord+0x44>)
 800068c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	200003e0 	.word	0x200003e0
 80006a0:	0800d988 	.word	0x0800d988
 80006a4:	200003e4 	.word	0x200003e4
 80006a8:	0800d9a8 	.word	0x0800d9a8
 80006ac:	200002f8 	.word	0x200002f8

080006b0 <turnOnScreen>:
	Parameters: void

	Returns:	void
*/

void turnOnScreen(void){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

	/////////////CARACTERES ESPECIALES

	lcd_cursor_buff(5, 2);
 80006b4:	2102      	movs	r1, #2
 80006b6:	2005      	movs	r0, #5
 80006b8:	f000 fcaa 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("BASS  PEDAL");
 80006bc:	4806      	ldr	r0, [pc, #24]	; (80006d8 <turnOnScreen+0x28>)
 80006be:	f000 fd2b 	bl	8001118 <lcd_string_buff>
	lcd_cursor_buff(5, 3);
 80006c2:	2103      	movs	r1, #3
 80006c4:	2005      	movs	r0, #5
 80006c6:	f000 fca3 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("SYNTHESIZER");
 80006ca:	4804      	ldr	r0, [pc, #16]	; (80006dc <turnOnScreen+0x2c>)
 80006cc:	f000 fd24 	bl	8001118 <lcd_string_buff>
	lcd_upDate_IT();
 80006d0:	f000 fdce 	bl	8001270 <lcd_upDate_IT>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	0800d80c 	.word	0x0800d80c
 80006dc:	0800d818 	.word	0x0800d818

080006e0 <chordScreen>:
	Parameters: void

	Returns:	void
*/

void chordScreen(void){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	lcd_clearScreen_buff();
 80006e4:	f000 fc7e 	bl	8000fe4 <lcd_clearScreen_buff>
	lcd_cursor_buff(1,0);
 80006e8:	2100      	movs	r1, #0
 80006ea:	2001      	movs	r0, #1
 80006ec:	f000 fc90 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("Acorde: ");
 80006f0:	4815      	ldr	r0, [pc, #84]	; (8000748 <chordScreen+0x68>)
 80006f2:	f000 fd11 	bl	8001118 <lcd_string_buff>
	lcd_string_buff( str_chord[chord]);
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <chordScreen+0x6c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a15      	ldr	r2, [pc, #84]	; (8000750 <chordScreen+0x70>)
 80006fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fd09 	bl	8001118 <lcd_string_buff>
	lcd_cursor_buff(1,1);
 8000706:	2101      	movs	r1, #1
 8000708:	2001      	movs	r0, #1
 800070a:	f000 fc81 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("Pos:");
 800070e:	4811      	ldr	r0, [pc, #68]	; (8000754 <chordScreen+0x74>)
 8000710:	f000 fd02 	bl	8001118 <lcd_string_buff>
	lcd_string_buff( str_chordInv[chordInv]);
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <chordScreen+0x78>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a10      	ldr	r2, [pc, #64]	; (800075c <chordScreen+0x7c>)
 800071a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fcfa 	bl	8001118 <lcd_string_buff>
	lcd_cursor_buff(1,2);
 8000724:	2102      	movs	r1, #2
 8000726:	2001      	movs	r0, #1
 8000728:	f000 fc72 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("Grabar acorde");
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <chordScreen+0x80>)
 800072e:	f000 fcf3 	bl	8001118 <lcd_string_buff>

	lcd_cursor_buff(0, chordSelect_cursor);
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <chordScreen+0x84>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4619      	mov	r1, r3
 8000738:	2000      	movs	r0, #0
 800073a:	f000 fc69 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff(">");
 800073e:	480a      	ldr	r0, [pc, #40]	; (8000768 <chordScreen+0x88>)
 8000740:	f000 fcea 	bl	8001118 <lcd_string_buff>

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	0800d824 	.word	0x0800d824
 800074c:	200003e0 	.word	0x200003e0
 8000750:	20000030 	.word	0x20000030
 8000754:	0800d830 	.word	0x0800d830
 8000758:	200003e4 	.word	0x200003e4
 800075c:	20000050 	.word	0x20000050
 8000760:	0800d838 	.word	0x0800d838
 8000764:	200003d8 	.word	0x200003d8
 8000768:	0800d848 	.word	0x0800d848

0800076c <mainScreen>:
	Parameters: void

	Returns:	void
*/

void mainScreen(void){
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

	extern uint8_t sustainMode;
	extern uint8_t acorde;

  	lcd_clearScreen_buff();
 8000770:	f000 fc38 	bl	8000fe4 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 8000774:	2100      	movs	r1, #0
 8000776:	2000      	movs	r0, #0
 8000778:	f000 fc4a 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("Afinacion: ");
 800077c:	4827      	ldr	r0, [pc, #156]	; (800081c <mainScreen+0xb0>)
 800077e:	f000 fccb 	bl	8001118 <lcd_string_buff>
	lcd_string_buff(str_tunne[firstDoTunning - 36]);
 8000782:	4b27      	ldr	r3, [pc, #156]	; (8000820 <mainScreen+0xb4>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	3b24      	subs	r3, #36	; 0x24
 8000788:	4a26      	ldr	r2, [pc, #152]	; (8000824 <mainScreen+0xb8>)
 800078a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fcc2 	bl	8001118 <lcd_string_buff>
	lcd_cursor_buff(0,1);
 8000794:	2101      	movs	r1, #1
 8000796:	2000      	movs	r0, #0
 8000798:	f000 fc3a 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("Octava: ");
 800079c:	4822      	ldr	r0, [pc, #136]	; (8000828 <mainScreen+0xbc>)
 800079e:	f000 fcbb 	bl	8001118 <lcd_string_buff>
	lcd_string_buff(str_octava[octava + 1]);
 80007a2:	4b22      	ldr	r3, [pc, #136]	; (800082c <mainScreen+0xc0>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <mainScreen+0xc4>)
 80007aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fcb2 	bl	8001118 <lcd_string_buff>
	lcd_cursor_buff(0,2);
 80007b4:	2102      	movs	r1, #2
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 fc2a 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("Sustain: ");
 80007bc:	481d      	ldr	r0, [pc, #116]	; (8000834 <mainScreen+0xc8>)
 80007be:	f000 fcab 	bl	8001118 <lcd_string_buff>
	switch (sustainMode){
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <mainScreen+0xcc>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d007      	beq.n	80007da <mainScreen+0x6e>
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d009      	beq.n	80007e2 <mainScreen+0x76>
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d10b      	bne.n	80007ea <mainScreen+0x7e>
		case 0:
			lcd_string_buff("OFF");
 80007d2:	481a      	ldr	r0, [pc, #104]	; (800083c <mainScreen+0xd0>)
 80007d4:	f000 fca0 	bl	8001118 <lcd_string_buff>
		break;
 80007d8:	e007      	b.n	80007ea <mainScreen+0x7e>
		case 1:
			lcd_string_buff("smart");
 80007da:	4819      	ldr	r0, [pc, #100]	; (8000840 <mainScreen+0xd4>)
 80007dc:	f000 fc9c 	bl	8001118 <lcd_string_buff>
		break;
 80007e0:	e003      	b.n	80007ea <mainScreen+0x7e>
		case 2:
			lcd_string_buff("clasico");
 80007e2:	4818      	ldr	r0, [pc, #96]	; (8000844 <mainScreen+0xd8>)
 80007e4:	f000 fc98 	bl	8001118 <lcd_string_buff>
		break;
 80007e8:	bf00      	nop
	}//end switch.
	lcd_cursor_buff(0,3);
 80007ea:	2103      	movs	r1, #3
 80007ec:	2000      	movs	r0, #0
 80007ee:	f000 fc0f 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("Acordes: ");
 80007f2:	4815      	ldr	r0, [pc, #84]	; (8000848 <mainScreen+0xdc>)
 80007f4:	f000 fc90 	bl	8001118 <lcd_string_buff>
	switch (acorde){
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <mainScreen+0xe0>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <mainScreen+0x9a>
 8000800:	2b01      	cmp	r3, #1
 8000802:	d004      	beq.n	800080e <mainScreen+0xa2>
			lcd_string_buff("ON");
		break;
	}//end switch.


}
 8000804:	e007      	b.n	8000816 <mainScreen+0xaa>
			lcd_string_buff("OFF");
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <mainScreen+0xd0>)
 8000808:	f000 fc86 	bl	8001118 <lcd_string_buff>
		break;
 800080c:	e003      	b.n	8000816 <mainScreen+0xaa>
			lcd_string_buff("ON");
 800080e:	4810      	ldr	r0, [pc, #64]	; (8000850 <mainScreen+0xe4>)
 8000810:	f000 fc82 	bl	8001118 <lcd_string_buff>
		break;
 8000814:	bf00      	nop
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	0800d84c 	.word	0x0800d84c
 8000820:	200003dc 	.word	0x200003dc
 8000824:	20000000 	.word	0x20000000
 8000828:	0800d858 	.word	0x0800d858
 800082c:	200002f4 	.word	0x200002f4
 8000830:	2000005c 	.word	0x2000005c
 8000834:	0800d864 	.word	0x0800d864
 8000838:	2000036c 	.word	0x2000036c
 800083c:	0800d870 	.word	0x0800d870
 8000840:	0800d874 	.word	0x0800d874
 8000844:	0800d87c 	.word	0x0800d87c
 8000848:	0800d884 	.word	0x0800d884
 800084c:	20000378 	.word	0x20000378
 8000850:	0800d890 	.word	0x0800d890

08000854 <tunneScreen>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void tunneScreen(void){
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 8000858:	f000 fbc4 	bl	8000fe4 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 800085c:	2100      	movs	r1, #0
 800085e:	2000      	movs	r0, #0
 8000860:	f000 fbd6 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("AFINACION: ");
 8000864:	480b      	ldr	r0, [pc, #44]	; (8000894 <tunneScreen+0x40>)
 8000866:	f000 fc57 	bl	8001118 <lcd_string_buff>
	lcd_cursor_buff(8, 2);
 800086a:	2102      	movs	r1, #2
 800086c:	2008      	movs	r0, #8
 800086e:	f000 fbcf 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("< ");
 8000872:	4809      	ldr	r0, [pc, #36]	; (8000898 <tunneScreen+0x44>)
 8000874:	f000 fc50 	bl	8001118 <lcd_string_buff>
	lcd_string_buff(str_tunne[firstDoTunning - 36]);
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <tunneScreen+0x48>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	3b24      	subs	r3, #36	; 0x24
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <tunneScreen+0x4c>)
 8000880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000884:	4618      	mov	r0, r3
 8000886:	f000 fc47 	bl	8001118 <lcd_string_buff>
	lcd_string_buff(" >");
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <tunneScreen+0x50>)
 800088c:	f000 fc44 	bl	8001118 <lcd_string_buff>
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	0800d894 	.word	0x0800d894
 8000898:	0800d8a0 	.word	0x0800d8a0
 800089c:	200003dc 	.word	0x200003dc
 80008a0:	20000000 	.word	0x20000000
 80008a4:	0800d8a4 	.word	0x0800d8a4

080008a8 <on_off_octave>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void on_off_octave (void){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 80008ac:	f000 fb9a 	bl	8000fe4 <lcd_clearScreen_buff>
	lcd_cursor_buff(3,2);
 80008b0:	2102      	movs	r1, #2
 80008b2:	2003      	movs	r0, #3
 80008b4:	f000 fbac 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("Octava:  ");
 80008b8:	4806      	ldr	r0, [pc, #24]	; (80008d4 <on_off_octave+0x2c>)
 80008ba:	f000 fc2d 	bl	8001118 <lcd_string_buff>
	lcd_string_buff(str_octava[octava + 1]);
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <on_off_octave+0x30>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a05      	ldr	r2, [pc, #20]	; (80008dc <on_off_octave+0x34>)
 80008c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fc24 	bl	8001118 <lcd_string_buff>

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	0800d8c0 	.word	0x0800d8c0
 80008d8:	200002f4 	.word	0x200002f4
 80008dc:	2000005c 	.word	0x2000005c

080008e0 <recuest_footkey>:
	Parameter: void

	Returns:	void
*/

void recuest_footkey (void){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 80008e4:	f000 fb7e 	bl	8000fe4 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 80008e8:	2100      	movs	r1, #0
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 fb90 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("Pulse una tecla para");
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <recuest_footkey+0x28>)
 80008f2:	f000 fc11 	bl	8001118 <lcd_string_buff>
	lcd_cursor_buff(0,1);
 80008f6:	2101      	movs	r1, #1
 80008f8:	2000      	movs	r0, #0
 80008fa:	f000 fb89 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("grabar el acorde...");
 80008fe:	4803      	ldr	r0, [pc, #12]	; (800090c <recuest_footkey+0x2c>)
 8000900:	f000 fc0a 	bl	8001118 <lcd_string_buff>

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	0800d8cc 	.word	0x0800d8cc
 800090c:	0800d8e4 	.word	0x0800d8e4

08000910 <pop_up_savedChord>:
	Parameter: void

	Returns:	void
*/

void pop_up_savedChord (uint8_t fk){
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]

	lcd_clearScreen_buff();
 800091a:	f000 fb63 	bl	8000fe4 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,1);
 800091e:	2101      	movs	r1, #1
 8000920:	2000      	movs	r0, #0
 8000922:	f000 fb75 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("ACORDE GRABADO EN LA");
 8000926:	480e      	ldr	r0, [pc, #56]	; (8000960 <pop_up_savedChord+0x50>)
 8000928:	f000 fbf6 	bl	8001118 <lcd_string_buff>
	lcd_cursor_buff(0,2);
 800092c:	2102      	movs	r1, #2
 800092e:	2000      	movs	r0, #0
 8000930:	f000 fb6e 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("TECLA ");
 8000934:	480b      	ldr	r0, [pc, #44]	; (8000964 <pop_up_savedChord+0x54>)
 8000936:	f000 fbef 	bl	8001118 <lcd_string_buff>

	if( fk == 12){
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2b0c      	cmp	r3, #12
 800093e:	d103      	bne.n	8000948 <pop_up_savedChord+0x38>
		lcd_string_buff("C AGUDA");
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <pop_up_savedChord+0x58>)
 8000942:	f000 fbe9 	bl	8001118 <lcd_string_buff>
	}else{
		lcd_string_buff(str_tunne[fk]);
	}

}
 8000946:	e006      	b.n	8000956 <pop_up_savedChord+0x46>
		lcd_string_buff(str_tunne[fk]);
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <pop_up_savedChord+0x5c>)
 800094c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000950:	4618      	mov	r0, r3
 8000952:	f000 fbe1 	bl	8001118 <lcd_string_buff>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	0800d8f8 	.word	0x0800d8f8
 8000964:	0800d910 	.word	0x0800d910
 8000968:	0800d918 	.word	0x0800d918
 800096c:	20000000 	.word	0x20000000

08000970 <pop_up_sustain>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void pop_up_sustain (void){
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

	extern uint8_t sustainMode;

	lcd_clearScreen_buff();
 8000974:	f000 fb36 	bl	8000fe4 <lcd_clearScreen_buff>
	lcd_cursor_buff(2,1);
 8000978:	2101      	movs	r1, #1
 800097a:	2002      	movs	r0, #2
 800097c:	f000 fb48 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("Sustain: ");
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <pop_up_sustain+0x44>)
 8000982:	f000 fbc9 	bl	8001118 <lcd_string_buff>
	switch (sustainMode){
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <pop_up_sustain+0x48>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d008      	beq.n	80009a0 <pop_up_sustain+0x30>
 800098e:	2b02      	cmp	r3, #2
 8000990:	d00a      	beq.n	80009a8 <pop_up_sustain+0x38>
 8000992:	2b00      	cmp	r3, #0
 8000994:	d000      	beq.n	8000998 <pop_up_sustain+0x28>
		case 2:
			lcd_string_buff("clasico");
		break;
	}//end switch.

}
 8000996:	e00b      	b.n	80009b0 <pop_up_sustain+0x40>
			lcd_string_buff("OFF");
 8000998:	4808      	ldr	r0, [pc, #32]	; (80009bc <pop_up_sustain+0x4c>)
 800099a:	f000 fbbd 	bl	8001118 <lcd_string_buff>
		break;
 800099e:	e007      	b.n	80009b0 <pop_up_sustain+0x40>
			lcd_string_buff("smart");
 80009a0:	4807      	ldr	r0, [pc, #28]	; (80009c0 <pop_up_sustain+0x50>)
 80009a2:	f000 fbb9 	bl	8001118 <lcd_string_buff>
		break;
 80009a6:	e003      	b.n	80009b0 <pop_up_sustain+0x40>
			lcd_string_buff("clasico");
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <pop_up_sustain+0x54>)
 80009aa:	f000 fbb5 	bl	8001118 <lcd_string_buff>
		break;
 80009ae:	bf00      	nop
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	0800d864 	.word	0x0800d864
 80009b8:	2000036c 	.word	0x2000036c
 80009bc:	0800d870 	.word	0x0800d870
 80009c0:	0800d874 	.word	0x0800d874
 80009c4:	0800d87c 	.word	0x0800d87c

080009c8 <pop_up_cancel>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void pop_up_cancel (void){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 80009cc:	f000 fb0a 	bl	8000fe4 <lcd_clearScreen_buff>
	lcd_cursor_buff(2,1);
 80009d0:	2101      	movs	r1, #1
 80009d2:	2002      	movs	r0, #2
 80009d4:	f000 fb1c 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("ACCION CANCELADA");
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <pop_up_cancel+0x1c>)
 80009da:	f000 fb9d 	bl	8001118 <lcd_string_buff>

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	0800d920 	.word	0x0800d920

080009e8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80009ee:	463b      	mov	r3, r7
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009fa:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 80009fc:	4a2f      	ldr	r2, [pc, #188]	; (8000abc <MX_ADC1_Init+0xd4>)
 80009fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a00:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a08:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a14:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a1a:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a22:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a28:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a2a:	4a25      	ldr	r2, [pc, #148]	; (8000ac0 <MX_ADC1_Init+0xd8>)
 8000a2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a2e:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000a34:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a36:	2203      	movs	r2, #3
 8000a38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a42:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a48:	481b      	ldr	r0, [pc, #108]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a4a:	f002 f92d 	bl	8002ca8 <HAL_ADC_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a54:	f001 fbaa 	bl	80021ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000a60:	2301      	movs	r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	4813      	ldr	r0, [pc, #76]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a6a:	f002 fbc5 	bl	80031f8 <HAL_ADC_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a74:	f001 fb9a 	bl	80021ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a78:	2309      	movs	r3, #9
 8000a7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a80:	463b      	mov	r3, r7
 8000a82:	4619      	mov	r1, r3
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a86:	f002 fbb7 	bl	80031f8 <HAL_ADC_ConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a90:	f001 fb8c 	bl	80021ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a94:	230a      	movs	r3, #10
 8000a96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000aa2:	f002 fba9 	bl	80031f8 <HAL_ADC_ConfigChannel>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000aac:	f001 fb7e 	bl	80021ac <Error_Handler>
  }

}
 8000ab0:	bf00      	nop
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200003ec 	.word	0x200003ec
 8000abc:	40012000 	.word	0x40012000
 8000ac0:	0f000001 	.word	0x0f000001

08000ac4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a28      	ldr	r2, [pc, #160]	; (8000b84 <HAL_ADC_MspInit+0xc0>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d149      	bne.n	8000b7a <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b27      	ldr	r3, [pc, #156]	; (8000b88 <HAL_ADC_MspInit+0xc4>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a26      	ldr	r2, [pc, #152]	; (8000b88 <HAL_ADC_MspInit+0xc4>)
 8000af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <HAL_ADC_MspInit+0xc4>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b20      	ldr	r3, [pc, #128]	; (8000b88 <HAL_ADC_MspInit+0xc4>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <HAL_ADC_MspInit+0xc4>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <HAL_ADC_MspInit+0xc4>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <HAL_ADC_MspInit+0xc4>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a18      	ldr	r2, [pc, #96]	; (8000b88 <HAL_ADC_MspInit+0xc4>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <HAL_ADC_MspInit+0xc4>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480f      	ldr	r0, [pc, #60]	; (8000b8c <HAL_ADC_MspInit+0xc8>)
 8000b4e:	f002 ffe7 	bl	8003b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b52:	2303      	movs	r3, #3
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b56:	2303      	movs	r3, #3
 8000b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	480a      	ldr	r0, [pc, #40]	; (8000b90 <HAL_ADC_MspInit+0xcc>)
 8000b66:	f002 ffdb 	bl	8003b20 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2012      	movs	r0, #18
 8000b70:	f002 fe67 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b74:	2012      	movs	r0, #18
 8000b76:	f002 fe80 	bl	800387a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40012000 	.word	0x40012000
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020800 	.word	0x40020800
 8000b90:	40020400 	.word	0x40020400

08000b94 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <HAL_ADC_MspDeInit+0x3c>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d110      	bne.n	8000bc8 <HAL_ADC_MspDeInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <HAL_ADC_MspDeInit+0x40>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_ADC_MspDeInit+0x40>)
 8000bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 8000bb2:	2103      	movs	r1, #3
 8000bb4:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <HAL_ADC_MspDeInit+0x44>)
 8000bb6:	f003 f94d 	bl	8003e54 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1);
 8000bba:	2103      	movs	r1, #3
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <HAL_ADC_MspDeInit+0x48>)
 8000bbe:	f003 f949 	bl	8003e54 <HAL_GPIO_DeInit>

    /* ADC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC_IRQn);
 8000bc2:	2012      	movs	r0, #18
 8000bc4:	f002 fe67 	bl	8003896 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40012000 	.word	0x40012000
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020800 	.word	0x40020800
 8000bdc:	40020400 	.word	0x40020400

08000be0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000be6:	463b      	mov	r3, r7
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_DAC_Init+0x60>)
 8000bf0:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <MX_DAC_Init+0x64>)
 8000bf2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000bf4:	4812      	ldr	r0, [pc, #72]	; (8000c40 <MX_DAC_Init+0x60>)
 8000bf6:	f002 fe68 	bl	80038ca <HAL_DAC_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000c00:	f001 fad4 	bl	80021ac <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	2200      	movs	r2, #0
 8000c10:	4619      	mov	r1, r3
 8000c12:	480b      	ldr	r0, [pc, #44]	; (8000c40 <MX_DAC_Init+0x60>)
 8000c14:	f002 fee1 	bl	80039da <HAL_DAC_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000c1e:	f001 fac5 	bl	80021ac <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c22:	463b      	mov	r3, r7
 8000c24:	2210      	movs	r2, #16
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_DAC_Init+0x60>)
 8000c2a:	f002 fed6 	bl	80039da <HAL_DAC_ConfigChannel>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000c34:	f001 faba 	bl	80021ac <Error_Handler>
  }

}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000434 	.word	0x20000434
 8000c44:	40007400 	.word	0x40007400

08000c48 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a17      	ldr	r2, [pc, #92]	; (8000cc4 <HAL_DAC_MspInit+0x7c>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d127      	bne.n	8000cba <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <HAL_DAC_MspInit+0x80>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <HAL_DAC_MspInit+0x80>)
 8000c74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <HAL_DAC_MspInit+0x80>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_DAC_MspInit+0x80>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <HAL_DAC_MspInit+0x80>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <HAL_DAC_MspInit+0x80>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ca2:	2330      	movs	r3, #48	; 0x30
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <HAL_DAC_MspInit+0x84>)
 8000cb6:	f002 ff33 	bl	8003b20 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	; 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40007400 	.word	0x40007400
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020000 	.word	0x40020000

08000cd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b34      	ldr	r3, [pc, #208]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a33      	ldr	r2, [pc, #204]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b31      	ldr	r3, [pc, #196]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a2c      	ldr	r2, [pc, #176]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a25      	ldr	r2, [pc, #148]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a1e      	ldr	r2, [pc, #120]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d60:	f043 0308 	orr.w	r3, r3, #8
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0308 	and.w	r3, r3, #8
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_VERDE_Pin|LED_NARANJA_Pin|LED_ROJO_Pin|LED_AZUL_Pin
 8000d72:	2200      	movs	r2, #0
 8000d74:	f24f 01e0 	movw	r1, #61664	; 0xf0e0
 8000d78:	4811      	ldr	r0, [pc, #68]	; (8000dc0 <MX_GPIO_Init+0xf0>)
 8000d7a:	f003 f965 	bl	8004048 <HAL_GPIO_WritePin>
                          |PL_bot_Pin|CE_bot_Pin|ST_leds_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOTON_AZUL_Pin;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOTON_AZUL_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <MX_GPIO_Init+0xf4>)
 8000d92:	f002 fec5 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_VERDE_Pin|LED_NARANJA_Pin|LED_ROJO_Pin|LED_AZUL_Pin
 8000d96:	f24f 03e0 	movw	r3, #61664	; 0xf0e0
 8000d9a:	617b      	str	r3, [r7, #20]
                          |PL_bot_Pin|CE_bot_Pin|ST_leds_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <MX_GPIO_Init+0xf0>)
 8000db0:	f002 feb6 	bl	8003b20 <HAL_GPIO_Init>

}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	; 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020c00 	.word	0x40020c00
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000dce:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <MX_I2C1_Init+0x54>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000dd4:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <MX_I2C1_Init+0x58>)
 8000dd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000de6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000e06:	f003 f939 	bl	800407c <HAL_I2C_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e10:	f001 f9cc 	bl	80021ac <Error_Handler>
  }

}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000448 	.word	0x20000448
 8000e1c:	40005400 	.word	0x40005400
 8000e20:	00061a80 	.word	0x00061a80

08000e24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a21      	ldr	r2, [pc, #132]	; (8000ec8 <HAL_I2C_MspInit+0xa4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d13b      	bne.n	8000ebe <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <HAL_I2C_MspInit+0xa8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a1f      	ldr	r2, [pc, #124]	; (8000ecc <HAL_I2C_MspInit+0xa8>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_I2C_MspInit+0xa8>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e62:	23c0      	movs	r3, #192	; 0xc0
 8000e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e66:	2312      	movs	r3, #18
 8000e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e72:	2304      	movs	r3, #4
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4814      	ldr	r0, [pc, #80]	; (8000ed0 <HAL_I2C_MspInit+0xac>)
 8000e7e:	f002 fe4f 	bl	8003b20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_I2C_MspInit+0xa8>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <HAL_I2C_MspInit+0xa8>)
 8000e8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_I2C_MspInit+0xa8>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	201f      	movs	r0, #31
 8000ea4:	f002 fccd 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ea8:	201f      	movs	r0, #31
 8000eaa:	f002 fce6 	bl	800387a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2020      	movs	r0, #32
 8000eb4:	f002 fcc5 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000eb8:	2020      	movs	r0, #32
 8000eba:	f002 fcde 	bl	800387a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020400 	.word	0x40020400

08000ed4 <__lcd_send_cmd>:
uint8_t flag_sendLcd = 1;
uint8_t I2CtxComplete = 1;

/*Used by lcd_init() only*/
void __lcd_send_cmd (char cmd)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f023 030f 	bic.w	r3, r3, #15
 8000ee4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	011b      	lsls	r3, r3, #4
 8000eea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	f043 030c 	orr.w	r3, r3, #12
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f00:	7bbb      	ldrb	r3, [r7, #14]
 8000f02:	f043 030c 	orr.w	r3, r3, #12
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f0a:	7bbb      	ldrb	r3, [r7, #14]
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <__lcd_send_cmd+0x60>)
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <__lcd_send_cmd+0x64>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b299      	uxth	r1, r3
 8000f1e:	f107 0208 	add.w	r2, r7, #8
 8000f22:	2364      	movs	r3, #100	; 0x64
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2304      	movs	r3, #4
 8000f28:	f003 f9e0 	bl	80042ec <HAL_I2C_Master_Transmit>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000748 	.word	0x20000748
 8000f38:	20000744 	.word	0x20000744

08000f3c <__lcd_send_cmd_buff>:

void __lcd_send_cmd_buff (char cmd)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	f023 030f 	bic.w	r3, r3, #15
 8000f4c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	011b      	lsls	r3, r3, #4
 8000f52:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	f043 030c 	orr.w	r3, r3, #12
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f68:	7bbb      	ldrb	r3, [r7, #14]
 8000f6a:	f043 030c 	orr.w	r3, r3, #12
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f72:	7bbb      	ldrb	r3, [r7, #14]
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
	__add_to_lcdBuff((uint8_t*)data_t,4);
 8000f7c:	f107 0308 	add.w	r3, r7, #8
 8000f80:	2104      	movs	r1, #4
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f8dc 	bl	8001140 <__add_to_lcdBuff>
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <__lcd_send_data_buff>:


void __lcd_send_data_buff (char data)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f023 030f 	bic.w	r3, r3, #15
 8000fa0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	011b      	lsls	r3, r3, #4
 8000fa6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	f043 030d 	orr.w	r3, r3, #13
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	f043 0309 	orr.w	r3, r3, #9
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000fbc:	7bbb      	ldrb	r3, [r7, #14]
 8000fbe:	f043 030d 	orr.w	r3, r3, #13
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	f043 0309 	orr.w	r3, r3, #9
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
	__add_to_lcdBuff((uint8_t*)data_t,4);
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	2104      	movs	r1, #4
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f8b2 	bl	8001140 <__add_to_lcdBuff>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <lcd_clearScreen_buff>:


void lcd_clearScreen_buff (void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
	__lcd_send_cmd_buff (0x80);
 8000fea:	2080      	movs	r0, #128	; 0x80
 8000fec:	f7ff ffa6 	bl	8000f3c <__lcd_send_cmd_buff>
	for (int i=0; i<80; i++)
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	e005      	b.n	8001002 <lcd_clearScreen_buff+0x1e>
	{
		__lcd_send_data_buff (' ');
 8000ff6:	2020      	movs	r0, #32
 8000ff8:	f7ff ffca 	bl	8000f90 <__lcd_send_data_buff>
	for (int i=0; i<80; i++)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3301      	adds	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b4f      	cmp	r3, #79	; 0x4f
 8001006:	ddf6      	ble.n	8000ff6 <lcd_clearScreen_buff+0x12>
	}
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <lcd_cursor_buff>:


void lcd_cursor_buff(int x, int y)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
    switch (y){
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	2b03      	cmp	r3, #3
 800101e:	d82b      	bhi.n	8001078 <lcd_cursor_buff+0x68>
 8001020:	a201      	add	r2, pc, #4	; (adr r2, 8001028 <lcd_cursor_buff+0x18>)
 8001022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001026:	bf00      	nop
 8001028:	08001039 	.word	0x08001039
 800102c:	08001049 	.word	0x08001049
 8001030:	08001059 	.word	0x08001059
 8001034:	08001069 	.word	0x08001069
    	case 0:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE1 + x);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	3b80      	subs	r3, #128	; 0x80
 800103e:	b2db      	uxtb	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff7b 	bl	8000f3c <__lcd_send_cmd_buff>
    	break;
 8001046:	e017      	b.n	8001078 <lcd_cursor_buff+0x68>
    	case 1:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE2 + x);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	3b40      	subs	r3, #64	; 0x40
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff73 	bl	8000f3c <__lcd_send_cmd_buff>
    	break;
 8001056:	e00f      	b.n	8001078 <lcd_cursor_buff+0x68>
    	case 2:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE3 + x);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	3b6c      	subs	r3, #108	; 0x6c
 800105e:	b2db      	uxtb	r3, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff6b 	bl	8000f3c <__lcd_send_cmd_buff>
    	break;
 8001066:	e007      	b.n	8001078 <lcd_cursor_buff+0x68>
    	case 3:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE4 + x);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	3b2c      	subs	r3, #44	; 0x2c
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff63 	bl	8000f3c <__lcd_send_cmd_buff>
    	break;
 8001076:	bf00      	nop
    }
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <lcd_init>:


void lcd_init (I2C_HandleTypeDef* hi2c, uint8_t i2c_address)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	70fb      	strb	r3, [r7, #3]
	i2c_handler = hi2c; //set the i2c handler struct.
 800108c:	4a20      	ldr	r2, [pc, #128]	; (8001110 <lcd_init+0x90>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
	SLAVE_ADDRESS_LCD = (i2c_address << 1); //set the lcd i2c address (left alignment).
 8001092:	78fb      	ldrb	r3, [r7, #3]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <lcd_init+0x94>)
 800109a:	701a      	strb	r2, [r3, #0]

	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800109c:	2032      	movs	r0, #50	; 0x32
 800109e:	f001 fde1 	bl	8002c64 <HAL_Delay>
	__lcd_send_cmd (0x30);
 80010a2:	2030      	movs	r0, #48	; 0x30
 80010a4:	f7ff ff16 	bl	8000ed4 <__lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80010a8:	2005      	movs	r0, #5
 80010aa:	f001 fddb 	bl	8002c64 <HAL_Delay>
	__lcd_send_cmd (0x30);
 80010ae:	2030      	movs	r0, #48	; 0x30
 80010b0:	f7ff ff10 	bl	8000ed4 <__lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80010b4:	2001      	movs	r0, #1
 80010b6:	f001 fdd5 	bl	8002c64 <HAL_Delay>
	__lcd_send_cmd (0x30);
 80010ba:	2030      	movs	r0, #48	; 0x30
 80010bc:	f7ff ff0a 	bl	8000ed4 <__lcd_send_cmd>
	HAL_Delay(10);
 80010c0:	200a      	movs	r0, #10
 80010c2:	f001 fdcf 	bl	8002c64 <HAL_Delay>
	__lcd_send_cmd (0x20);  // 4bit mode
 80010c6:	2020      	movs	r0, #32
 80010c8:	f7ff ff04 	bl	8000ed4 <__lcd_send_cmd>
	HAL_Delay(10);
 80010cc:	200a      	movs	r0, #10
 80010ce:	f001 fdc9 	bl	8002c64 <HAL_Delay>

  // dislay initialisation
	__lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80010d2:	2028      	movs	r0, #40	; 0x28
 80010d4:	f7ff fefe 	bl	8000ed4 <__lcd_send_cmd>
	HAL_Delay(1);
 80010d8:	2001      	movs	r0, #1
 80010da:	f001 fdc3 	bl	8002c64 <HAL_Delay>
	__lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80010de:	2008      	movs	r0, #8
 80010e0:	f7ff fef8 	bl	8000ed4 <__lcd_send_cmd>
	HAL_Delay(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f001 fdbd 	bl	8002c64 <HAL_Delay>
	__lcd_send_cmd (0x01);  // clear display
 80010ea:	2001      	movs	r0, #1
 80010ec:	f7ff fef2 	bl	8000ed4 <__lcd_send_cmd>
	HAL_Delay(2);
 80010f0:	2002      	movs	r0, #2
 80010f2:	f001 fdb7 	bl	8002c64 <HAL_Delay>
	__lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80010f6:	2006      	movs	r0, #6
 80010f8:	f7ff feec 	bl	8000ed4 <__lcd_send_cmd>
	HAL_Delay(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f001 fdb1 	bl	8002c64 <HAL_Delay>
	__lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001102:	200c      	movs	r0, #12
 8001104:	f7ff fee6 	bl	8000ed4 <__lcd_send_cmd>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000748 	.word	0x20000748
 8001114:	20000744 	.word	0x20000744

08001118 <lcd_string_buff>:


void lcd_string_buff (char *str)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	while (*str) __lcd_send_data_buff(*str++);
 8001120:	e006      	b.n	8001130 <lcd_string_buff+0x18>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	1c5a      	adds	r2, r3, #1
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff30 	bl	8000f90 <__lcd_send_data_buff>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f4      	bne.n	8001122 <lcd_string_buff+0xa>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <__add_to_lcdBuff>:


void __add_to_lcdBuff(uint8_t* data, uint8_t sizeData){
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]
	while (i < sizeData){
 8001150:	e018      	b.n	8001184 <__add_to_lcdBuff+0x44>
		lcd_circ_buffer[lcd_circ_buff_in] = *(data + i);
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	4413      	add	r3, r2
 8001158:	4a11      	ldr	r2, [pc, #68]	; (80011a0 <__add_to_lcdBuff+0x60>)
 800115a:	8812      	ldrh	r2, [r2, #0]
 800115c:	7819      	ldrb	r1, [r3, #0]
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <__add_to_lcdBuff+0x64>)
 8001160:	5499      	strb	r1, [r3, r2]
		lcd_circ_buff_in++;
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <__add_to_lcdBuff+0x60>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <__add_to_lcdBuff+0x60>)
 800116c:	801a      	strh	r2, [r3, #0]
		i++;
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	3301      	adds	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
		if (lcd_circ_buff_in == LCD_CIRCBUFF_MAX){
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <__add_to_lcdBuff+0x60>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800117c:	d102      	bne.n	8001184 <__add_to_lcdBuff+0x44>
			lcd_circ_buff_in = 0;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <__add_to_lcdBuff+0x60>)
 8001180:	2200      	movs	r2, #0
 8001182:	801a      	strh	r2, [r3, #0]
	while (i < sizeData){
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	429a      	cmp	r2, r3
 800118a:	d3e2      	bcc.n	8001152 <__add_to_lcdBuff+0x12>
		}
	}
	flag_sendLcd = 1;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <__add_to_lcdBuff+0x68>)
 800118e:	2201      	movs	r2, #1
 8001190:	701a      	strb	r2, [r3, #0]
}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	2000032c 	.word	0x2000032c
 80011a4:	2000049c 	.word	0x2000049c
 80011a8:	20000068 	.word	0x20000068

080011ac <__lcd_sendBuff_IT>:


void __lcd_sendBuff_IT (void){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
	uint16_t I2C_Tx_ptr;
	uint16_t I2C_Tx_length;

	//if (I2CtxComplete != 0){ //si no termino la transmision anterior...

		if (lcd_circ_buff_out == LCD_CIRCBUFF_MAX){
 80011b2:	4b27      	ldr	r3, [pc, #156]	; (8001250 <__lcd_sendBuff_IT+0xa4>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 80011ba:	d102      	bne.n	80011c2 <__lcd_sendBuff_IT+0x16>
			lcd_circ_buff_out = 0;
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <__lcd_sendBuff_IT+0xa4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	801a      	strh	r2, [r3, #0]
		}

		if (lcd_circ_buff_out == lcd_circ_buff_in){
 80011c2:	4b23      	ldr	r3, [pc, #140]	; (8001250 <__lcd_sendBuff_IT+0xa4>)
 80011c4:	881a      	ldrh	r2, [r3, #0]
 80011c6:	4b23      	ldr	r3, [pc, #140]	; (8001254 <__lcd_sendBuff_IT+0xa8>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d103      	bne.n	80011d6 <__lcd_sendBuff_IT+0x2a>
			//no hay transmisión acá
			flag_sendLcd = 0;
 80011ce:	4b22      	ldr	r3, [pc, #136]	; (8001258 <__lcd_sendBuff_IT+0xac>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
			return;
 80011d4:	e038      	b.n	8001248 <__lcd_sendBuff_IT+0x9c>
		}

		if (lcd_circ_buff_out > lcd_circ_buff_in){
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <__lcd_sendBuff_IT+0xa4>)
 80011d8:	881a      	ldrh	r2, [r3, #0]
 80011da:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <__lcd_sendBuff_IT+0xa8>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d907      	bls.n	80011f2 <__lcd_sendBuff_IT+0x46>
			lcd_tx_length = LCD_CIRCBUFF_MAX - lcd_circ_buff_out;//transmite solo hasta el final del buffer, para luego reacomodar los punteros.
 80011e2:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <__lcd_sendBuff_IT+0xa4>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	f5c3 732a 	rsb	r3, r3, #680	; 0x2a8
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <__lcd_sendBuff_IT+0xb0>)
 80011ee:	801a      	strh	r2, [r3, #0]
 80011f0:	e007      	b.n	8001202 <__lcd_sendBuff_IT+0x56>
		}else{
			lcd_tx_length = lcd_circ_buff_in - lcd_circ_buff_out;
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <__lcd_sendBuff_IT+0xa8>)
 80011f4:	881a      	ldrh	r2, [r3, #0]
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <__lcd_sendBuff_IT+0xa4>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <__lcd_sendBuff_IT+0xb0>)
 8001200:	801a      	strh	r2, [r3, #0]
//		I2C_Tx_ptr = lcd_circ_buff_out;
//		I2C_Tx_length = lcd_tx_length;
//		lcd_circ_buff_out += lcd_tx_length;
//		lcd_tx_length = 0;

		if (I2CtxComplete != 0){
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <__lcd_sendBuff_IT+0xb4>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d01e      	beq.n	8001248 <__lcd_sendBuff_IT+0x9c>
			I2CtxComplete = 0;
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <__lcd_sendBuff_IT+0xb4>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]

			I2C_Tx_ptr = lcd_circ_buff_out;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <__lcd_sendBuff_IT+0xa4>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	80fb      	strh	r3, [r7, #6]
			I2C_Tx_length = lcd_tx_length;
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <__lcd_sendBuff_IT+0xb0>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	80bb      	strh	r3, [r7, #4]
			lcd_circ_buff_out += lcd_tx_length;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <__lcd_sendBuff_IT+0xa4>)
 800121e:	881a      	ldrh	r2, [r3, #0]
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <__lcd_sendBuff_IT+0xb0>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	4413      	add	r3, r2
 8001226:	b29a      	uxth	r2, r3
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <__lcd_sendBuff_IT+0xa4>)
 800122a:	801a      	strh	r2, [r3, #0]
			lcd_tx_length = 0;
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <__lcd_sendBuff_IT+0xb0>)
 800122e:	2200      	movs	r2, #0
 8001230:	801a      	strh	r2, [r3, #0]
			HAL_I2C_Master_Transmit_IT(i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) &lcd_circ_buffer[I2C_Tx_ptr],I2C_Tx_length);
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <__lcd_sendBuff_IT+0xb8>)
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <__lcd_sendBuff_IT+0xbc>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	b299      	uxth	r1, r3
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <__lcd_sendBuff_IT+0xc0>)
 8001240:	441a      	add	r2, r3
 8001242:	88bb      	ldrh	r3, [r7, #4]
 8001244:	f003 f950 	bl	80044e8 <HAL_I2C_Master_Transmit_IT>
		}
	//}
}
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2000032e 	.word	0x2000032e
 8001254:	2000032c 	.word	0x2000032c
 8001258:	20000068 	.word	0x20000068
 800125c:	20000330 	.word	0x20000330
 8001260:	20000069 	.word	0x20000069
 8001264:	20000748 	.word	0x20000748
 8001268:	20000744 	.word	0x20000744
 800126c:	2000049c 	.word	0x2000049c

08001270 <lcd_upDate_IT>:


void lcd_upDate_IT(void){
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	if (flag_sendLcd) __lcd_sendBuff_IT();
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <lcd_upDate_IT+0x14>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <lcd_upDate_IT+0x10>
 800127c:	f7ff ff96 	bl	80011ac <__lcd_sendBuff_IT>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000068 	.word	0x20000068

08001288 <_lcd_ISR>:


/* Insert the next function in your ISR*/
void _lcd_ISR (void){
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
	I2CtxComplete=1;
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <_lcd_ISR+0x14>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	20000069 	.word	0x20000069

080012a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a6:	f001 fc6b 	bl	8002b80 <HAL_Init>

  /* USER CODE BEGIN Init */
  firstDoTunning = 36;
 80012aa:	4bad      	ldr	r3, [pc, #692]	; (8001560 <main+0x2c0>)
 80012ac:	2224      	movs	r2, #36	; 0x24
 80012ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b0:	f000 f9fa 	bl	80016a8 <SystemClock_Config>
   */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b4:	f7ff fd0c 	bl	8000cd0 <MX_GPIO_Init>
  MX_DAC_Init();
 80012b8:	f7ff fc92 	bl	8000be0 <MX_DAC_Init>
  MX_I2C1_Init();
 80012bc:	f7ff fd84 	bl	8000dc8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80012c0:	f00b fbe2 	bl	800ca88 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80012c4:	f001 fa84 	bl	80027d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012c8:	f001 face 	bl	8002868 <MX_TIM3_Init>
  MX_ADC1_Init();
 80012cc:	f7ff fb8c 	bl	80009e8 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80012d0:	f001 fb5a 	bl	8002988 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80012d4:	f001 fb82 	bl	80029dc <MX_USART6_UART_Init>
  MX_SPI1_Init();
 80012d8:	f001 f90c 	bl	80024f4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  spi_74HC165_init(&hspi1, PL_bot_GPIO_Port, PL_bot_Pin, CE_bot_GPIO_Port, CE_bot_Pin);
 80012dc:	2340      	movs	r3, #64	; 0x40
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	4ba0      	ldr	r3, [pc, #640]	; (8001564 <main+0x2c4>)
 80012e2:	2220      	movs	r2, #32
 80012e4:	499f      	ldr	r1, [pc, #636]	; (8001564 <main+0x2c4>)
 80012e6:	48a0      	ldr	r0, [pc, #640]	; (8001568 <main+0x2c8>)
 80012e8:	f7ff f8ee 	bl	80004c8 <spi_74HC165_init>
  spi_74HC595_init(&hspi1, ST_leds_GPIO_Port, ST_leds_Pin);
 80012ec:	2280      	movs	r2, #128	; 0x80
 80012ee:	499d      	ldr	r1, [pc, #628]	; (8001564 <main+0x2c4>)
 80012f0:	489d      	ldr	r0, [pc, #628]	; (8001568 <main+0x2c8>)
 80012f2:	f7ff f94d 	bl	8000590 <spi_74HC595_init>

  adc_potes_init();
 80012f6:	f001 f85b 	bl	80023b0 <adc_potes_init>

  HAL_TIM_Base_Start_IT(&htim2); // 1 ms tick timer.
 80012fa:	489c      	ldr	r0, [pc, #624]	; (800156c <main+0x2cc>)
 80012fc:	f007 fc2d 	bl	8008b5a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); // 44100Hz timer.
 8001300:	489b      	ldr	r0, [pc, #620]	; (8001570 <main+0x2d0>)
 8001302:	f007 fc2a 	bl	8008b5a <HAL_TIM_Base_Start_IT>

  osc_dac_init(&hdac, DAC_CHANNEL_1);
 8001306:	2100      	movs	r1, #0
 8001308:	489a      	ldr	r0, [pc, #616]	; (8001574 <main+0x2d4>)
 800130a:	f000 ff57 	bl	80021bc <osc_dac_init>
  osc_setRatios(100, 100, 100);
 800130e:	2264      	movs	r2, #100	; 0x64
 8001310:	2164      	movs	r1, #100	; 0x64
 8001312:	2064      	movs	r0, #100	; 0x64
 8001314:	f001 f820 	bl	8002358 <osc_setRatios>

  leds_buffer = 0xFFFF;
 8001318:	4b97      	ldr	r3, [pc, #604]	; (8001578 <main+0x2d8>)
 800131a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800131e:	801a      	strh	r2, [r3, #0]
  spi_74HC595_Transmit((uint8_t*) &leds_buffer, 2 /*bytes*/);
 8001320:	2102      	movs	r1, #2
 8001322:	4895      	ldr	r0, [pc, #596]	; (8001578 <main+0x2d8>)
 8001324:	f7ff f956 	bl	80005d4 <spi_74HC595_Transmit>

  lcd_init(&hi2c1, 0x3f);
 8001328:	213f      	movs	r1, #63	; 0x3f
 800132a:	4894      	ldr	r0, [pc, #592]	; (800157c <main+0x2dc>)
 800132c:	f7ff fea8 	bl	8001080 <lcd_init>

  //rutina de encendido//

  turnOnScreen();
 8001330:	f7ff f9be 	bl	80006b0 <turnOnScreen>
  HAL_Delay(500);
 8001334:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001338:	f001 fc94 	bl	8002c64 <HAL_Delay>
  showLeds();
 800133c:	f000 fe50 	bl	8001fe0 <showLeds>
  HAL_Delay(500);
 8001340:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001344:	f001 fc8e 	bl	8002c64 <HAL_Delay>
  mainScreen();
 8001348:	f7ff fa10 	bl	800076c <mainScreen>
  leds_octava = 0b1 << LED_OCT_M;
 800134c:	4b8c      	ldr	r3, [pc, #560]	; (8001580 <main+0x2e0>)
 800134e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001352:	801a      	strh	r2, [r3, #0]
  leds_buffer = leds_octava;
 8001354:	4b8a      	ldr	r3, [pc, #552]	; (8001580 <main+0x2e0>)
 8001356:	881a      	ldrh	r2, [r3, #0]
 8001358:	4b87      	ldr	r3, [pc, #540]	; (8001578 <main+0x2d8>)
 800135a:	801a      	strh	r2, [r3, #0]
  leds_buffer = ~leds_buffer;
 800135c:	4b86      	ldr	r3, [pc, #536]	; (8001578 <main+0x2d8>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	43db      	mvns	r3, r3
 8001362:	b29a      	uxth	r2, r3
 8001364:	4b84      	ldr	r3, [pc, #528]	; (8001578 <main+0x2d8>)
 8001366:	801a      	strh	r2, [r3, #0]
  spi_74HC595_Transmit((uint8_t*) &leds_buffer, 2 /*bytes*/);
 8001368:	2102      	movs	r1, #2
 800136a:	4883      	ldr	r0, [pc, #524]	; (8001578 <main+0x2d8>)
 800136c:	f7ff f932 	bl	80005d4 <spi_74HC595_Transmit>

  HAL_ADC_Start_IT(&hadc1);
 8001370:	4884      	ldr	r0, [pc, #528]	; (8001584 <main+0x2e4>)
 8001372:	f001 fd0f 	bl	8002d94 <HAL_ADC_Start_IT>
//  midi_msg[2] = 60;
//  midi_msg[3] = 0;	//last param == 0 (unused in program change).
//  MIDI_SendBuffer(midi_msg, 4);
  //fin mensaje midi de prueba//

  osc_setNote(24);
 8001376:	2018      	movs	r0, #24
 8001378:	f000 ffc8 	bl	800230c <osc_setNote>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (screenNum){
 800137c:	4b82      	ldr	r3, [pc, #520]	; (8001588 <main+0x2e8>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	3b03      	subs	r3, #3
 8001382:	2b08      	cmp	r3, #8
 8001384:	d855      	bhi.n	8001432 <main+0x192>
 8001386:	a201      	add	r2, pc, #4	; (adr r2, 800138c <main+0xec>)
 8001388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138c:	080013b1 	.word	0x080013b1
 8001390:	080013bf 	.word	0x080013bf
 8001394:	080013cd 	.word	0x080013cd
 8001398:	08001433 	.word	0x08001433
 800139c:	080013db 	.word	0x080013db
 80013a0:	080013f7 	.word	0x080013f7
 80013a4:	080013e9 	.word	0x080013e9
 80013a8:	08001411 	.word	0x08001411
 80013ac:	0800141f 	.word	0x0800141f
	  		case MAIN_SCREEN:
	  			mainScreen();
 80013b0:	f7ff f9dc 	bl	800076c <mainScreen>
	  			last_screenNum = screenNum;
 80013b4:	4b74      	ldr	r3, [pc, #464]	; (8001588 <main+0x2e8>)
 80013b6:	781a      	ldrb	r2, [r3, #0]
 80013b8:	4b74      	ldr	r3, [pc, #464]	; (800158c <main+0x2ec>)
 80013ba:	701a      	strb	r2, [r3, #0]
	  		break;
 80013bc:	e03a      	b.n	8001434 <main+0x194>
	  		case CHORD_SCREEN:
	  			chordScreen();
 80013be:	f7ff f98f 	bl	80006e0 <chordScreen>
	  			last_screenNum = screenNum;
 80013c2:	4b71      	ldr	r3, [pc, #452]	; (8001588 <main+0x2e8>)
 80013c4:	781a      	ldrb	r2, [r3, #0]
 80013c6:	4b71      	ldr	r3, [pc, #452]	; (800158c <main+0x2ec>)
 80013c8:	701a      	strb	r2, [r3, #0]
	  		break;
 80013ca:	e033      	b.n	8001434 <main+0x194>
	  		case TUNNE_SCREEN:
	  			tunneScreen();
 80013cc:	f7ff fa42 	bl	8000854 <tunneScreen>
	  			last_screenNum = screenNum;
 80013d0:	4b6d      	ldr	r3, [pc, #436]	; (8001588 <main+0x2e8>)
 80013d2:	781a      	ldrb	r2, [r3, #0]
 80013d4:	4b6d      	ldr	r3, [pc, #436]	; (800158c <main+0x2ec>)
 80013d6:	701a      	strb	r2, [r3, #0]
	  		break;
 80013d8:	e02c      	b.n	8001434 <main+0x194>
	  		case RECUEST_FOOTKEY_SCREEN:
	  			recuest_footkey();
 80013da:	f7ff fa81 	bl	80008e0 <recuest_footkey>
	  			last_screenNum = screenNum; //this variable must store the CHORD_SCREEN value, to use it as return point.
 80013de:	4b6a      	ldr	r3, [pc, #424]	; (8001588 <main+0x2e8>)
 80013e0:	781a      	ldrb	r2, [r3, #0]
 80013e2:	4b6a      	ldr	r3, [pc, #424]	; (800158c <main+0x2ec>)
 80013e4:	701a      	strb	r2, [r3, #0]
	  		break;
 80013e6:	e025      	b.n	8001434 <main+0x194>
	  		case POPUP_OCTAVE:
	  			on_off_octave();
 80013e8:	f7ff fa5e 	bl	80008a8 <on_off_octave>
	  			popup_time = 2000;
 80013ec:	4b68      	ldr	r3, [pc, #416]	; (8001590 <main+0x2f0>)
 80013ee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013f2:	601a      	str	r2, [r3, #0]
	  		break;
 80013f4:	e01e      	b.n	8001434 <main+0x194>
	  		case POPUP_SAVED_CHORD:
	  			pop_up_savedChord(lastKey_pos);
 80013f6:	4b67      	ldr	r3, [pc, #412]	; (8001594 <main+0x2f4>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fa88 	bl	8000910 <pop_up_savedChord>
	  			last_screenNum = CHORD_SCREEN;
 8001400:	4b62      	ldr	r3, [pc, #392]	; (800158c <main+0x2ec>)
 8001402:	2204      	movs	r2, #4
 8001404:	701a      	strb	r2, [r3, #0]
	  			popup_time = 2000;
 8001406:	4b62      	ldr	r3, [pc, #392]	; (8001590 <main+0x2f0>)
 8001408:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800140c:	601a      	str	r2, [r3, #0]
	  		break;
 800140e:	e011      	b.n	8001434 <main+0x194>
	  		case POPUP_SUSTAIN:
	  			pop_up_sustain();
 8001410:	f7ff faae 	bl	8000970 <pop_up_sustain>
	  			popup_time = 2000;
 8001414:	4b5e      	ldr	r3, [pc, #376]	; (8001590 <main+0x2f0>)
 8001416:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800141a:	601a      	str	r2, [r3, #0]
	  		break;
 800141c:	e00a      	b.n	8001434 <main+0x194>
	  		case POPUP_CANCEL:
	  			pop_up_cancel();
 800141e:	f7ff fad3 	bl	80009c8 <pop_up_cancel>
	  			popup_time = 2000;
 8001422:	4b5b      	ldr	r3, [pc, #364]	; (8001590 <main+0x2f0>)
 8001424:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001428:	601a      	str	r2, [r3, #0]
	  			last_screenNum = CHORD_SCREEN;
 800142a:	4b58      	ldr	r3, [pc, #352]	; (800158c <main+0x2ec>)
 800142c:	2204      	movs	r2, #4
 800142e:	701a      	strb	r2, [r3, #0]
	  		break;
 8001430:	e000      	b.n	8001434 <main+0x194>
	  		default:
	  		break;
 8001432:	bf00      	nop
	  	}
	  	screenNum = NO_SCREEN;
 8001434:	4b54      	ldr	r3, [pc, #336]	; (8001588 <main+0x2e8>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]

	  	if (popup_timeUp){
 800143a:	4b57      	ldr	r3, [pc, #348]	; (8001598 <main+0x2f8>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d00a      	beq.n	800145a <main+0x1ba>
	  		if (screenNum == NO_SCREEN) screenNum = last_screenNum;
 8001444:	4b50      	ldr	r3, [pc, #320]	; (8001588 <main+0x2e8>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d103      	bne.n	8001454 <main+0x1b4>
 800144c:	4b4f      	ldr	r3, [pc, #316]	; (800158c <main+0x2ec>)
 800144e:	781a      	ldrb	r2, [r3, #0]
 8001450:	4b4d      	ldr	r3, [pc, #308]	; (8001588 <main+0x2e8>)
 8001452:	701a      	strb	r2, [r3, #0]
	  		popup_timeUp = 0;
 8001454:	4b50      	ldr	r3, [pc, #320]	; (8001598 <main+0x2f8>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
	  	}

	  	//botones y teclas
	  	buttonFall = last_button & ~read_button;
 800145a:	4b50      	ldr	r3, [pc, #320]	; (800159c <main+0x2fc>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	43da      	mvns	r2, r3
 8001460:	4b4f      	ldr	r3, [pc, #316]	; (80015a0 <main+0x300>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4013      	ands	r3, r2
 8001466:	4a4f      	ldr	r2, [pc, #316]	; (80015a4 <main+0x304>)
 8001468:	6013      	str	r3, [r2, #0]
	  	buttonRise = ~last_button & read_button;
 800146a:	4b4d      	ldr	r3, [pc, #308]	; (80015a0 <main+0x300>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	43da      	mvns	r2, r3
 8001470:	4b4a      	ldr	r3, [pc, #296]	; (800159c <main+0x2fc>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4013      	ands	r3, r2
 8001476:	4a4c      	ldr	r2, [pc, #304]	; (80015a8 <main+0x308>)
 8001478:	6013      	str	r3, [r2, #0]
	  	if (GETBUTTONSTATUS(IN_BACK, buttonFall)){
 800147a:	4b4a      	ldr	r3, [pc, #296]	; (80015a4 <main+0x304>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	2b00      	cmp	r3, #0
 8001484:	d005      	beq.n	8001492 <main+0x1f2>
	  		screenNum = MAIN_SCREEN;
 8001486:	4b40      	ldr	r3, [pc, #256]	; (8001588 <main+0x2e8>)
 8001488:	2203      	movs	r2, #3
 800148a:	701a      	strb	r2, [r3, #0]
	  		menu = MAIN_SCREEN;
 800148c:	4b47      	ldr	r3, [pc, #284]	; (80015ac <main+0x30c>)
 800148e:	2203      	movs	r2, #3
 8001490:	701a      	strb	r2, [r3, #0]
	  	}
	  	if (GETBUTTONSTATUS(IN_SUST_PROP, buttonFall)){
 8001492:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <main+0x304>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <main+0x202>
	  		sustainProp();
 800149e:	f000 f96d 	bl	800177c <sustainProp>
	  	}
	  	if (GETBUTTONSTATUS(IN_SUST_MIDI, buttonFall)){
 80014a2:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <main+0x304>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <main+0x212>
	  		sustainMIDI();
 80014ae:	f000 f9d3 	bl	8001858 <sustainMIDI>
	  	}
	  	if (GETBUTTONSTATUS(IN_CHORD, buttonFall)){
 80014b2:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <main+0x304>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <main+0x222>
	  		inputChord();
 80014be:	f000 fa2d 	bl	800191c <inputChord>
	  	}
	  	inputOctave();
 80014c2:	f000 fa87 	bl	80019d4 <inputOctave>
	  	if (GETBUTTONSTATUS(IN_TUNNE, buttonFall)){
 80014c6:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <main+0x304>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <main+0x236>
	  		inputTunne();
 80014d2:	f000 fac1 	bl	8001a58 <inputTunne>
	  	}
	  	inputPresets();
 80014d6:	f000 fadb 	bl	8001a90 <inputPresets>

	  	last_button = read_button;
 80014da:	4b30      	ldr	r3, [pc, #192]	; (800159c <main+0x2fc>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a30      	ldr	r2, [pc, #192]	; (80015a0 <main+0x300>)
 80014e0:	6013      	str	r3, [r2, #0]
	  		default:
	  		break;
	  	}
	  	*/

	    switch (menu){ //manage the recuested menu function.
 80014e2:	4b32      	ldr	r3, [pc, #200]	; (80015ac <main+0x30c>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	3b03      	subs	r3, #3
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d81c      	bhi.n	8001526 <main+0x286>
 80014ec:	a201      	add	r2, pc, #4	; (adr r2, 80014f4 <main+0x254>)
 80014ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f2:	bf00      	nop
 80014f4:	08001509 	.word	0x08001509
 80014f8:	0800150f 	.word	0x0800150f
 80014fc:	08001519 	.word	0x08001519
 8001500:	08001527 	.word	0x08001527
 8001504:	08001523 	.word	0x08001523
	    	case MAIN_SCREEN:
	    		inputNotes();
 8001508:	f000 fb04 	bl	8001b14 <inputNotes>
	    	break;
 800150c:	e00c      	b.n	8001528 <main+0x288>
	  		case CHORD_SCREEN:
	  			chordSelect();
 800150e:	f000 fc0b 	bl	8001d28 <chordSelect>
	  			inputNotes();
 8001512:	f000 faff 	bl	8001b14 <inputNotes>
	  		break;
 8001516:	e007      	b.n	8001528 <main+0x288>
	  		case TUNNE_SCREEN:
	  			tunneSelect();
 8001518:	f000 fcca 	bl	8001eb0 <tunneSelect>
	  			inputNotes();
 800151c:	f000 fafa 	bl	8001b14 <inputNotes>
	  		break;
 8001520:	e002      	b.n	8001528 <main+0x288>
	  		case RECUEST_FOOTKEY_SCREEN:
	  			inputSaveChord(); // @suppress("No break at end of case")
 8001522:	f000 fbaf 	bl	8001c84 <inputSaveChord>
	  		default:
	  		break;
 8001526:	bf00      	nop

	    }

	    MIDI_SendCheck();
 8001528:	f00b fd00 	bl	800cf2c <MIDI_SendCheck>

		if (flag_dac != 0){
 800152c:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <main+0x310>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <main+0x29e>
		  osc_dac_update();
 8001534:	f000 fe5e 	bl	80021f4 <osc_dac_update>
		  flag_dac = 0;
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <main+0x310>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
		}


	    if (flag_tick != 0){
 800153e:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <main+0x314>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	f43f af1a 	beq.w	800137c <main+0xdc>

	    	if (lcd_refresh_time != 0){
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <main+0x318>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d035      	beq.n	80015bc <main+0x31c>
	    		lcd_refresh_time--;
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <main+0x318>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	3b01      	subs	r3, #1
 8001556:	b2da      	uxtb	r2, r3
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <main+0x318>)
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	e033      	b.n	80015c6 <main+0x326>
 800155e:	bf00      	nop
 8001560:	200003dc 	.word	0x200003dc
 8001564:	40020c00 	.word	0x40020c00
 8001568:	20000764 	.word	0x20000764
 800156c:	200007fc 	.word	0x200007fc
 8001570:	200007bc 	.word	0x200007bc
 8001574:	20000434 	.word	0x20000434
 8001578:	2000074e 	.word	0x2000074e
 800157c:	20000448 	.word	0x20000448
 8001580:	20000752 	.word	0x20000752
 8001584:	200003ec 	.word	0x200003ec
 8001588:	20000379 	.word	0x20000379
 800158c:	2000008a 	.word	0x2000008a
 8001590:	2000037c 	.word	0x2000037c
 8001594:	2000074c 	.word	0x2000074c
 8001598:	20000380 	.word	0x20000380
 800159c:	20000070 	.word	0x20000070
 80015a0:	20000074 	.word	0x20000074
 80015a4:	20000370 	.word	0x20000370
 80015a8:	20000374 	.word	0x20000374
 80015ac:	20000089 	.word	0x20000089
 80015b0:	20000383 	.word	0x20000383
 80015b4:	20000382 	.word	0x20000382
 80015b8:	2000008b 	.word	0x2000008b
	    	}else{
	    		lcd_upDate_IT();
 80015bc:	f7ff fe58 	bl	8001270 <lcd_upDate_IT>
	    		lcd_refresh_time = 25;
 80015c0:	4b2c      	ldr	r3, [pc, #176]	; (8001674 <main+0x3d4>)
 80015c2:	2219      	movs	r2, #25
 80015c4:	701a      	strb	r2, [r3, #0]
	    	}//end if lcd_refresh_time

	    	if (popup_time != 0){
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <main+0x3d8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00b      	beq.n	80015e6 <main+0x346>
				popup_time--;
 80015ce:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <main+0x3d8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	4a28      	ldr	r2, [pc, #160]	; (8001678 <main+0x3d8>)
 80015d6:	6013      	str	r3, [r2, #0]
				if (popup_time == 1) popup_timeUp = 1;
 80015d8:	4b27      	ldr	r3, [pc, #156]	; (8001678 <main+0x3d8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d102      	bne.n	80015e6 <main+0x346>
 80015e0:	4b26      	ldr	r3, [pc, #152]	; (800167c <main+0x3dc>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
			}//end if popup_time

	    	if (refresh_buttons != 0){
 80015e6:	4b26      	ldr	r3, [pc, #152]	; (8001680 <main+0x3e0>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d006      	beq.n	80015fc <main+0x35c>
	    		refresh_buttons--;
 80015ee:	4b24      	ldr	r3, [pc, #144]	; (8001680 <main+0x3e0>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4b22      	ldr	r3, [pc, #136]	; (8001680 <main+0x3e0>)
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	e01c      	b.n	8001636 <main+0x396>
	    	}else{
//	    		last_button = read_button;
	    		spi_74HC165_receive((uint8_t *)&read_button, sizeof(read_button));
 80015fc:	2104      	movs	r1, #4
 80015fe:	4821      	ldr	r0, [pc, #132]	; (8001684 <main+0x3e4>)
 8001600:	f7fe ff8a 	bl	8000518 <spi_74HC165_receive>

//	    		buttonFall = last_button & ~read_button;
//	    		buttonRise = ~last_button & read_button;

	    		leds_buffer = leds_octava | leds_presets | leds_resto;
 8001604:	4b20      	ldr	r3, [pc, #128]	; (8001688 <main+0x3e8>)
 8001606:	881a      	ldrh	r2, [r3, #0]
 8001608:	4b20      	ldr	r3, [pc, #128]	; (800168c <main+0x3ec>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	4313      	orrs	r3, r2
 800160e:	b29a      	uxth	r2, r3
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <main+0x3f0>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	4313      	orrs	r3, r2
 8001616:	b29a      	uxth	r2, r3
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <main+0x3f4>)
 800161a:	801a      	strh	r2, [r3, #0]
	    		leds_buffer = ~leds_buffer; //pasa a logica negativa
 800161c:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <main+0x3f4>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	43db      	mvns	r3, r3
 8001622:	b29a      	uxth	r2, r3
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <main+0x3f4>)
 8001626:	801a      	strh	r2, [r3, #0]
	    		spi_74HC595_Transmit((uint8_t*) &leds_buffer, 2 /*bytes*/);
 8001628:	2102      	movs	r1, #2
 800162a:	481a      	ldr	r0, [pc, #104]	; (8001694 <main+0x3f4>)
 800162c:	f7fe ffd2 	bl	80005d4 <spi_74HC595_Transmit>
//	    			spi_74HC595_Transmit((uint8_t*) &buff_leds, 2);
//	    			__NOP();
//	    		}


	    		refresh_buttons = 20;
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <main+0x3e0>)
 8001632:	2214      	movs	r2, #20
 8001634:	701a      	strb	r2, [r3, #0]
	    	}

	    	if (refresh_adc != 0){
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <main+0x3f8>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d006      	beq.n	800164c <main+0x3ac>
	    		refresh_adc--;
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <main+0x3f8>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	3b01      	subs	r3, #1
 8001644:	b29a      	uxth	r2, r3
 8001646:	4b14      	ldr	r3, [pc, #80]	; (8001698 <main+0x3f8>)
 8001648:	801a      	strh	r2, [r3, #0]
 800164a:	e00e      	b.n	800166a <main+0x3ca>
	    	}else{
	    		if (flag_adc != 0){
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <main+0x3fc>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00a      	beq.n	800166a <main+0x3ca>

	    			set_nextPote();
 8001654:	f000 fef2 	bl	800243c <set_nextPote>

	    			HAL_ADC_Start_IT(&hadc1);
 8001658:	4811      	ldr	r0, [pc, #68]	; (80016a0 <main+0x400>)
 800165a:	f001 fb9b 	bl	8002d94 <HAL_ADC_Start_IT>

	    			flag_adc = 0;
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <main+0x3fc>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]

	    			refresh_adc = 250;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <main+0x3f8>)
 8001666:	22fa      	movs	r2, #250	; 0xfa
 8001668:	801a      	strh	r2, [r3, #0]
	    		}
	    	}

	    	flag_tick = 0;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <main+0x404>)
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
	  switch (screenNum){
 8001670:	e684      	b.n	800137c <main+0xdc>
 8001672:	bf00      	nop
 8001674:	2000008b 	.word	0x2000008b
 8001678:	2000037c 	.word	0x2000037c
 800167c:	20000380 	.word	0x20000380
 8001680:	20000078 	.word	0x20000078
 8001684:	20000070 	.word	0x20000070
 8001688:	20000752 	.word	0x20000752
 800168c:	20000750 	.word	0x20000750
 8001690:	20000758 	.word	0x20000758
 8001694:	2000074e 	.word	0x2000074e
 8001698:	2000006c 	.word	0x2000006c
 800169c:	2000036d 	.word	0x2000036d
 80016a0:	200003ec 	.word	0x200003ec
 80016a4:	20000382 	.word	0x20000382

080016a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b094      	sub	sp, #80	; 0x50
 80016ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ae:	f107 0320 	add.w	r3, r7, #32
 80016b2:	2230      	movs	r2, #48	; 0x30
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f00b ff84 	bl	800d5c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	4b28      	ldr	r3, [pc, #160]	; (8001774 <SystemClock_Config+0xcc>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	4a27      	ldr	r2, [pc, #156]	; (8001774 <SystemClock_Config+0xcc>)
 80016d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016da:	6413      	str	r3, [r2, #64]	; 0x40
 80016dc:	4b25      	ldr	r3, [pc, #148]	; (8001774 <SystemClock_Config+0xcc>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e8:	2300      	movs	r3, #0
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	4b22      	ldr	r3, [pc, #136]	; (8001778 <SystemClock_Config+0xd0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a21      	ldr	r2, [pc, #132]	; (8001778 <SystemClock_Config+0xd0>)
 80016f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <SystemClock_Config+0xd0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001704:	2301      	movs	r3, #1
 8001706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800170e:	2302      	movs	r3, #2
 8001710:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001712:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001716:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001718:	2304      	movs	r3, #4
 800171a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800171c:	23a8      	movs	r3, #168	; 0xa8
 800171e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001720:	2302      	movs	r3, #2
 8001722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001724:	2307      	movs	r3, #7
 8001726:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001728:	f107 0320 	add.w	r3, r7, #32
 800172c:	4618      	mov	r0, r3
 800172e:	f005 ff13 	bl	8007558 <HAL_RCC_OscConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001738:	f000 fd38 	bl	80021ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800173c:	230f      	movs	r3, #15
 800173e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001740:	2302      	movs	r3, #2
 8001742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001748:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800174c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800174e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001752:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2105      	movs	r1, #5
 800175a:	4618      	mov	r0, r3
 800175c:	f006 f96c 	bl	8007a38 <HAL_RCC_ClockConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001766:	f000 fd21 	bl	80021ac <Error_Handler>
  }
}
 800176a:	bf00      	nop
 800176c:	3750      	adds	r7, #80	; 0x50
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	40007000 	.word	0x40007000

0800177c <sustainProp>:

/* USER CODE BEGIN 4 */

void sustainProp (void){
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0

		for (int j = 0; j <= 12; j++){
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	e00b      	b.n	80017a0 <sustainProp+0x24>
			sendChord(lastSendNote[j], 0, 1); // silents all notes
 8001788:	4a2c      	ldr	r2, [pc, #176]	; (800183c <sustainProp+0xc0>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001790:	2201      	movs	r2, #1
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f000 fbcd 	bl	8001f34 <sendChord>
		for (int j = 0; j <= 12; j++){
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3301      	adds	r3, #1
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b0c      	cmp	r3, #12
 80017a4:	ddf0      	ble.n	8001788 <sustainProp+0xc>
		}

		switch (sustainMode){
 80017a6:	4b26      	ldr	r3, [pc, #152]	; (8001840 <sustainProp+0xc4>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d029      	beq.n	8001802 <sustainProp+0x86>
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d002      	beq.n	80017b8 <sustainProp+0x3c>
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d010      	beq.n	80017d8 <sustainProp+0x5c>
 80017b6:	e039      	b.n	800182c <sustainProp+0xb0>
			case 2:
				//event = {0x0B, 0xB0 | MIDI_CHANNEL, 64, 0};
				//MidiUSB.sendMIDI(event);
				midi_msg[0] = 0x0B; //0x0B == type event (control change)
 80017b8:	4b22      	ldr	r3, [pc, #136]	; (8001844 <sustainProp+0xc8>)
 80017ba:	220b      	movs	r2, #11
 80017bc:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 80017be:	4b21      	ldr	r3, [pc, #132]	; (8001844 <sustainProp+0xc8>)
 80017c0:	22b1      	movs	r2, #177	; 0xb1
 80017c2:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	// 64 == sustain.
 80017c4:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <sustainProp+0xc8>)
 80017c6:	2240      	movs	r2, #64	; 0x40
 80017c8:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 0;
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <sustainProp+0xc8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4); // @suppress("No break at end of case")
 80017d0:	2104      	movs	r1, #4
 80017d2:	481c      	ldr	r0, [pc, #112]	; (8001844 <sustainProp+0xc8>)
 80017d4:	f00b fb74 	bl	800cec0 <MIDI_SendBuffer>
			case 0:
				lastSustainNote = 0;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <sustainProp+0xcc>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
				sustainMode = 1; //prop
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <sustainProp+0xc4>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
				leds_resto |= 0x1 << LED_SUST_P;
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <sustainProp+0xd0>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <sustainProp+0xd0>)
 80017f0:	801a      	strh	r2, [r3, #0]
				leds_resto &= ~(0x1 << LED_SUST_M);
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <sustainProp+0xd0>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	f023 0302 	bic.w	r3, r3, #2
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <sustainProp+0xd0>)
 80017fe:	801a      	strh	r2, [r3, #0]
			break;
 8001800:	e014      	b.n	800182c <sustainProp+0xb0>

			case 1:
				sustainFlag = 1;
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <sustainProp+0xd4>)
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
				sustainMode = 0;
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <sustainProp+0xc4>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
				leds_resto &= ~(0x1 << LED_SUST_M);
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <sustainProp+0xd0>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	f023 0302 	bic.w	r3, r3, #2
 8001816:	b29a      	uxth	r2, r3
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <sustainProp+0xd0>)
 800181a:	801a      	strh	r2, [r3, #0]
				leds_resto &= ~(0x1 << LED_SUST_P);
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <sustainProp+0xd0>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	f023 0304 	bic.w	r3, r3, #4
 8001824:	b29a      	uxth	r2, r3
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <sustainProp+0xd0>)
 8001828:	801a      	strh	r2, [r3, #0]
			break;
 800182a:	bf00      	nop
		} //end switch

		screenNum = POPUP_SUSTAIN;
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <sustainProp+0xd8>)
 800182e:	220a      	movs	r2, #10
 8001830:	701a      	strb	r2, [r3, #0]

} //end sustainProp()
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000334 	.word	0x20000334
 8001840:	2000036c 	.word	0x2000036c
 8001844:	20000754 	.word	0x20000754
 8001848:	20000368 	.word	0x20000368
 800184c:	20000758 	.word	0x20000758
 8001850:	2000006a 	.word	0x2000006a
 8001854:	20000379 	.word	0x20000379

08001858 <sustainMIDI>:

void sustainMIDI (void){
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0

		switch (sustainMode){
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <sustainMIDI+0xb0>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db4b      	blt.n	80018fc <sustainMIDI+0xa4>
 8001864:	2b01      	cmp	r3, #1
 8001866:	dd02      	ble.n	800186e <sustainMIDI+0x16>
 8001868:	2b02      	cmp	r3, #2
 800186a:	d025      	beq.n	80018b8 <sustainMIDI+0x60>
 800186c:	e046      	b.n	80018fc <sustainMIDI+0xa4>
			case 0:
			case 1:
				sustainFlag = 1;	// needed to normal notes functioning.
 800186e:	4b27      	ldr	r3, [pc, #156]	; (800190c <sustainMIDI+0xb4>)
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]

				midi_msg[0] = 0x0B;		//0x0B == type event (control change),
 8001874:	4b26      	ldr	r3, [pc, #152]	; (8001910 <sustainMIDI+0xb8>)
 8001876:	220b      	movs	r2, #11
 8001878:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 800187a:	4b25      	ldr	r3, [pc, #148]	; (8001910 <sustainMIDI+0xb8>)
 800187c:	22b1      	movs	r2, #177	; 0xb1
 800187e:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	//64 == sustain.
 8001880:	4b23      	ldr	r3, [pc, #140]	; (8001910 <sustainMIDI+0xb8>)
 8001882:	2240      	movs	r2, #64	; 0x40
 8001884:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 127;
 8001886:	4b22      	ldr	r3, [pc, #136]	; (8001910 <sustainMIDI+0xb8>)
 8001888:	227f      	movs	r2, #127	; 0x7f
 800188a:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4);
 800188c:	2104      	movs	r1, #4
 800188e:	4820      	ldr	r0, [pc, #128]	; (8001910 <sustainMIDI+0xb8>)
 8001890:	f00b fb16 	bl	800cec0 <MIDI_SendBuffer>

				sustainMode = 2;
 8001894:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <sustainMIDI+0xb0>)
 8001896:	2202      	movs	r2, #2
 8001898:	701a      	strb	r2, [r3, #0]
				leds_resto |= 0x1 << LED_SUST_M;
 800189a:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <sustainMIDI+0xbc>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	f043 0302 	orr.w	r3, r3, #2
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <sustainMIDI+0xbc>)
 80018a6:	801a      	strh	r2, [r3, #0]
				leds_resto &= ~(0x1 << LED_SUST_P);
 80018a8:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <sustainMIDI+0xbc>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	f023 0304 	bic.w	r3, r3, #4
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <sustainMIDI+0xbc>)
 80018b4:	801a      	strh	r2, [r3, #0]
			break;
 80018b6:	e021      	b.n	80018fc <sustainMIDI+0xa4>
			case 2:
				midi_msg[0] = 0x0B;	//0x0B == type event (control change)
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <sustainMIDI+0xb8>)
 80018ba:	220b      	movs	r2, #11
 80018bc:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <sustainMIDI+0xb8>)
 80018c0:	22b1      	movs	r2, #177	; 0xb1
 80018c2:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	//64 == sustain.
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <sustainMIDI+0xb8>)
 80018c6:	2240      	movs	r2, #64	; 0x40
 80018c8:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 0;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <sustainMIDI+0xb8>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4);
 80018d0:	2104      	movs	r1, #4
 80018d2:	480f      	ldr	r0, [pc, #60]	; (8001910 <sustainMIDI+0xb8>)
 80018d4:	f00b faf4 	bl	800cec0 <MIDI_SendBuffer>

				sustainMode = 0;
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <sustainMIDI+0xb0>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
				leds_resto &= ~(0x1 << LED_SUST_M);
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <sustainMIDI+0xbc>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	f023 0302 	bic.w	r3, r3, #2
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <sustainMIDI+0xbc>)
 80018ea:	801a      	strh	r2, [r3, #0]
				leds_resto &= ~(0x1 << LED_SUST_P);
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <sustainMIDI+0xbc>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	f023 0304 	bic.w	r3, r3, #4
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <sustainMIDI+0xbc>)
 80018f8:	801a      	strh	r2, [r3, #0]
			break;
 80018fa:	bf00      	nop
		} //end switch

		screenNum = POPUP_SUSTAIN;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <sustainMIDI+0xc0>)
 80018fe:	220a      	movs	r2, #10
 8001900:	701a      	strb	r2, [r3, #0]
} //end sustainMIDI()
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000036c 	.word	0x2000036c
 800190c:	2000006a 	.word	0x2000006a
 8001910:	20000754 	.word	0x20000754
 8001914:	20000758 	.word	0x20000758
 8001918:	20000379 	.word	0x20000379

0800191c <inputChord>:

void inputChord (void){
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

	switch (menu){
 8001920:	4b28      	ldr	r3, [pc, #160]	; (80019c4 <inputChord+0xa8>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b03      	cmp	r3, #3
 8001926:	d002      	beq.n	800192e <inputChord+0x12>
 8001928:	2b04      	cmp	r3, #4
 800192a:	d023      	beq.n	8001974 <inputChord+0x58>
 800192c:	e033      	b.n	8001996 <inputChord+0x7a>
		case MAIN_SCREEN:
			if (acorde != 0){
 800192e:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <inputChord+0xac>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00d      	beq.n	8001952 <inputChord+0x36>
				acorde = 0;
 8001936:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <inputChord+0xac>)
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
				leds_resto &= ~(0x1 << LED_CHORD);
 800193c:	4b23      	ldr	r3, [pc, #140]	; (80019cc <inputChord+0xb0>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	f023 0308 	bic.w	r3, r3, #8
 8001944:	b29a      	uxth	r2, r3
 8001946:	4b21      	ldr	r3, [pc, #132]	; (80019cc <inputChord+0xb0>)
 8001948:	801a      	strh	r2, [r3, #0]
				screenNum = MAIN_SCREEN;
 800194a:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <inputChord+0xb4>)
 800194c:	2203      	movs	r2, #3
 800194e:	701a      	strb	r2, [r3, #0]
				screenNum = CHORD_SCREEN;
				menu = CHORD_SCREEN;
				acorde = 1;
				leds_resto |= 0x1 << LED_CHORD;
			} //fin if acorde
		break;
 8001950:	e032      	b.n	80019b8 <inputChord+0x9c>
				screenNum = CHORD_SCREEN;
 8001952:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <inputChord+0xb4>)
 8001954:	2204      	movs	r2, #4
 8001956:	701a      	strb	r2, [r3, #0]
				menu = CHORD_SCREEN;
 8001958:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <inputChord+0xa8>)
 800195a:	2204      	movs	r2, #4
 800195c:	701a      	strb	r2, [r3, #0]
				acorde = 1;
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <inputChord+0xac>)
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
				leds_resto |= 0x1 << LED_CHORD;
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <inputChord+0xb0>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	f043 0308 	orr.w	r3, r3, #8
 800196c:	b29a      	uxth	r2, r3
 800196e:	4b17      	ldr	r3, [pc, #92]	; (80019cc <inputChord+0xb0>)
 8001970:	801a      	strh	r2, [r3, #0]
		break;
 8001972:	e021      	b.n	80019b8 <inputChord+0x9c>
		case CHORD_SCREEN:
			screenNum = MAIN_SCREEN;
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <inputChord+0xb4>)
 8001976:	2203      	movs	r2, #3
 8001978:	701a      	strb	r2, [r3, #0]
			menu = MAIN_SCREEN;
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <inputChord+0xa8>)
 800197c:	2203      	movs	r2, #3
 800197e:	701a      	strb	r2, [r3, #0]
			acorde = 0;
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <inputChord+0xac>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
			leds_resto &= ~(0x1 << LED_CHORD);
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <inputChord+0xb0>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	f023 0308 	bic.w	r3, r3, #8
 800198e:	b29a      	uxth	r2, r3
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <inputChord+0xb0>)
 8001992:	801a      	strh	r2, [r3, #0]
		break;
 8001994:	e010      	b.n	80019b8 <inputChord+0x9c>
		default:
			screenNum = CHORD_SCREEN;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <inputChord+0xb4>)
 8001998:	2204      	movs	r2, #4
 800199a:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN;
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <inputChord+0xa8>)
 800199e:	2204      	movs	r2, #4
 80019a0:	701a      	strb	r2, [r3, #0]
			acorde = 1;
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <inputChord+0xac>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	701a      	strb	r2, [r3, #0]
			leds_resto |= 0x1 << LED_CHORD;
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <inputChord+0xb0>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	f043 0308 	orr.w	r3, r3, #8
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <inputChord+0xb0>)
 80019b4:	801a      	strh	r2, [r3, #0]
		break;
 80019b6:	bf00      	nop
	} //fin switch menu

} //end inputChord()
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000089 	.word	0x20000089
 80019c8:	20000378 	.word	0x20000378
 80019cc:	20000758 	.word	0x20000758
 80019d0:	20000379 	.word	0x20000379

080019d4 <inputOctave>:


void inputOctave (void){
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

	if(GETBUTTONSTATUS(IN_OCT_G, buttonFall)){
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <inputOctave+0x74>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00b      	beq.n	80019fc <inputOctave+0x28>
		octava = -1;
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <inputOctave+0x78>)
 80019e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019ea:	601a      	str	r2, [r3, #0]
		screenNum=POPUP_OCTAVE;
 80019ec:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <inputOctave+0x7c>)
 80019ee:	2209      	movs	r2, #9
 80019f0:	701a      	strb	r2, [r3, #0]
		leds_octava = 0x1 << LED_OCT_G;
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <inputOctave+0x80>)
 80019f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f8:	801a      	strh	r2, [r3, #0]
		return;
 80019fa:	e021      	b.n	8001a40 <inputOctave+0x6c>
	}

	if (GETBUTTONSTATUS(IN_OCT_M, buttonFall)){
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <inputOctave+0x74>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00a      	beq.n	8001a1e <inputOctave+0x4a>
		octava = 0;
 8001a08:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <inputOctave+0x78>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
		screenNum=POPUP_OCTAVE;
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <inputOctave+0x7c>)
 8001a10:	2209      	movs	r2, #9
 8001a12:	701a      	strb	r2, [r3, #0]
		leds_octava = 0x1 << LED_OCT_M;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <inputOctave+0x80>)
 8001a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a1a:	801a      	strh	r2, [r3, #0]
		return;
 8001a1c:	e010      	b.n	8001a40 <inputOctave+0x6c>
	}

	if (GETBUTTONSTATUS(IN_OCT_A, buttonFall)){
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <inputOctave+0x74>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00a      	beq.n	8001a40 <inputOctave+0x6c>
		octava = 1;
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <inputOctave+0x78>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
		screenNum=POPUP_OCTAVE;
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <inputOctave+0x7c>)
 8001a32:	2209      	movs	r2, #9
 8001a34:	701a      	strb	r2, [r3, #0]
		leds_octava = 0x1 << LED_OCT_A;
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <inputOctave+0x80>)
 8001a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a3c:	801a      	strh	r2, [r3, #0]
		return;
 8001a3e:	bf00      	nop
	}
} //end inputOctave()
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	20000370 	.word	0x20000370
 8001a4c:	200002f4 	.word	0x200002f4
 8001a50:	20000379 	.word	0x20000379
 8001a54:	20000752 	.word	0x20000752

08001a58 <inputTunne>:


void inputTunne(void){
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

      if (menu != TUNNE_SCREEN){
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <inputTunne+0x30>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b05      	cmp	r3, #5
 8001a62:	d006      	beq.n	8001a72 <inputTunne+0x1a>
		screenNum = TUNNE_SCREEN;
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <inputTunne+0x34>)
 8001a66:	2205      	movs	r2, #5
 8001a68:	701a      	strb	r2, [r3, #0]
		menu = TUNNE_SCREEN;
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <inputTunne+0x30>)
 8001a6c:	2205      	movs	r2, #5
 8001a6e:	701a      	strb	r2, [r3, #0]
	  }else{
		screenNum = MAIN_SCREEN;
		menu = MAIN_SCREEN;
	  } //end  if menu

} //end inputTunne()
 8001a70:	e005      	b.n	8001a7e <inputTunne+0x26>
		screenNum = MAIN_SCREEN;
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <inputTunne+0x34>)
 8001a74:	2203      	movs	r2, #3
 8001a76:	701a      	strb	r2, [r3, #0]
		menu = MAIN_SCREEN;
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <inputTunne+0x30>)
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	701a      	strb	r2, [r3, #0]
} //end inputTunne()
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	20000089 	.word	0x20000089
 8001a8c:	20000379 	.word	0x20000379

08001a90 <inputPresets>:


void inputPresets (void){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++){                                         // 6 presets en total.
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	e02d      	b.n	8001af8 <inputPresets+0x68>

		if (GETBUTTONSTATUS(i + IN_PRESET0, buttonFall)){
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3308      	adds	r3, #8
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <inputPresets+0x78>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d01f      	beq.n	8001af2 <inputPresets+0x62>
			midi_msg[0] = 0x0C;	//0x0C == type event (program change)
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <inputPresets+0x7c>)
 8001ab4:	220c      	movs	r2, #12
 8001ab6:	701a      	strb	r2, [r3, #0]
			midi_msg[1] = 0xC0 | 1;
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <inputPresets+0x7c>)
 8001aba:	22c1      	movs	r2, #193	; 0xc1
 8001abc:	705a      	strb	r2, [r3, #1]
			midi_msg[2] = i;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <inputPresets+0x7c>)
 8001ac4:	709a      	strb	r2, [r3, #2]
			midi_msg[3] = 0;	//last param == 0 (unused in program change).
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <inputPresets+0x7c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	70da      	strb	r2, [r3, #3]
			MIDI_SendBuffer(midi_msg, 4);
 8001acc:	2104      	movs	r1, #4
 8001ace:	480f      	ldr	r0, [pc, #60]	; (8001b0c <inputPresets+0x7c>)
 8001ad0:	f00b f9f6 	bl	800cec0 <MIDI_SendBuffer>
			if (i == 5){
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b05      	cmp	r3, #5
 8001ad8:	d103      	bne.n	8001ae2 <inputPresets+0x52>
				leds_presets = 0x1;
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <inputPresets+0x80>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	801a      	strh	r2, [r3, #0]
 8001ae0:	e007      	b.n	8001af2 <inputPresets+0x62>
			}else{
				leds_presets = 0x1 << (LED_PS0 + i);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	330b      	adds	r3, #11
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <inputPresets+0x80>)
 8001af0:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 6; i++){                                         // 6 presets en total.
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3301      	adds	r3, #1
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	ddce      	ble.n	8001a9c <inputPresets+0xc>
			}
		} //end if GETBUTTONSTATUS

	} //end for

} //end inputPresets()
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000370 	.word	0x20000370
 8001b0c:	20000754 	.word	0x20000754
 8001b10:	20000750 	.word	0x20000750

08001b14 <inputNotes>:


void inputNotes(void){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0

  uint8_t pressedNote;

  for (int i = 0; i <= 12; i++){
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	e094      	b.n	8001c4a <inputNotes+0x136>

//    buttonState[i + IN_DO] = HAL_GPIO_ReadPin(notePort_list[i], notePin_list[i]); //read current button pin.

//    if(!buttonState[i + IN_DO] && lastState[i + IN_DO]){  // If we read 1, and the last time we read 0, means button was just pressed.
    if (GETBUTTONSTATUS(teclas[i], buttonFall)){
 8001b20:	4a4e      	ldr	r2, [pc, #312]	; (8001c5c <inputNotes+0x148>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	4093      	lsls	r3, r2
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b4b      	ldr	r3, [pc, #300]	; (8001c60 <inputNotes+0x14c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d067      	beq.n	8001c0a <inputNotes+0xf6>
        pressedNote = firstDoTunning + i + 12 * octava; //detects the pressed note.
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4b49      	ldr	r3, [pc, #292]	; (8001c64 <inputNotes+0x150>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4b48      	ldr	r3, [pc, #288]	; (8001c68 <inputNotes+0x154>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	0049      	lsls	r1, r1, #1
 8001b50:	440b      	add	r3, r1
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	70fb      	strb	r3, [r7, #3]

    	if (acorde){ //If chord mode is on...
 8001b5a:	4b44      	ldr	r3, [pc, #272]	; (8001c6c <inputNotes+0x158>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00c      	beq.n	8001b7c <inputNotes+0x68>
            lastSendNote[i] = makeChord(pressedNote, i); // saves the current chord config. on pressed note.
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fd5a 	bl	8000624 <makeChord>
 8001b70:	4601      	mov	r1, r0
 8001b72:	4a3f      	ldr	r2, [pc, #252]	; (8001c70 <inputNotes+0x15c>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001b7a:	e004      	b.n	8001b86 <inputNotes+0x72>

        }else{ //If chord mode is off...

            lastSendNote[i] = pressedNote; // saves nothing but pressed note.
 8001b7c:	78fa      	ldrb	r2, [r7, #3]
 8001b7e:	493c      	ldr	r1, [pc, #240]	; (8001c70 <inputNotes+0x15c>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        } //end if acorde


        if (sustainMode == 1){ // If proprietary sustain mode on...
 8001b86:	4b3b      	ldr	r3, [pc, #236]	; (8001c74 <inputNotes+0x160>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d122      	bne.n	8001bd4 <inputNotes+0xc0>

			if (lastSustainNote != lastSendNote[i]){ // If last sustained note differs from the current pressed one...
 8001b8e:	4a38      	ldr	r2, [pc, #224]	; (8001c70 <inputNotes+0x15c>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b96:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <inputNotes+0x164>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d010      	beq.n	8001bc0 <inputNotes+0xac>

				sendChord(lastSustainNote, 0, 1); // mute current chord. 0 in second param means "noteOff".
 8001b9e:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <inputNotes+0x164>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f9c4 	bl	8001f34 <sendChord>
				lastSustainNote = lastSendNote[i]; // and saves the current sustained note.
 8001bac:	4a30      	ldr	r2, [pc, #192]	; (8001c70 <inputNotes+0x15c>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb4:	4a30      	ldr	r2, [pc, #192]	; (8001c78 <inputNotes+0x164>)
 8001bb6:	6013      	str	r3, [r2, #0]
				sustainFlag = 1; // turn sustained note on
 8001bb8:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <inputNotes+0x168>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]
 8001bbe:	e009      	b.n	8001bd4 <inputNotes+0xc0>

			}else{ // If last sustained note and the current pressed one are the same...

				sustainFlag = !sustainFlag; // turn sustained note off.
 8001bc0:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <inputNotes+0x168>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf0c      	ite	eq
 8001bc8:	2301      	moveq	r3, #1
 8001bca:	2300      	movne	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <inputNotes+0x168>)
 8001bd2:	701a      	strb	r2, [r3, #0]

			}//end if lastSustainNote...
        }//end if sustainMode


        sendChord(lastSendNote[i], 127 * sustainFlag, 1); //send the appropriate midi message.
 8001bd4:	4a26      	ldr	r2, [pc, #152]	; (8001c70 <inputNotes+0x15c>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001bdc:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <inputNotes+0x168>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4613      	mov	r3, r2
 8001be4:	01db      	lsls	r3, r3, #7
 8001be6:	1a9b      	subs	r3, r3, r2
 8001be8:	2201      	movs	r2, #1
 8001bea:	4619      	mov	r1, r3
 8001bec:	f000 f9a2 	bl	8001f34 <sendChord>

        if (sustainFlag != 0){
 8001bf0:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <inputNotes+0x168>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d004      	beq.n	8001c02 <inputNotes+0xee>
        	osc_setNote(pressedNote);
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 fb86 	bl	800230c <osc_setNote>
 8001c00:	e020      	b.n	8001c44 <inputNotes+0x130>
        }else{
        	osc_setNote(0);
 8001c02:	2000      	movs	r0, #0
 8001c04:	f000 fb82 	bl	800230c <osc_setNote>
 8001c08:	e01c      	b.n	8001c44 <inputNotes+0x130>
        }

    }else if(GETBUTTONSTATUS(teclas[i], buttonRise)){
 8001c0a:	4a14      	ldr	r2, [pc, #80]	; (8001c5c <inputNotes+0x148>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4413      	add	r3, r2
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	2301      	movs	r3, #1
 8001c16:	4093      	lsls	r3, r2
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <inputNotes+0x16c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00f      	beq.n	8001c44 <inputNotes+0x130>

    	if (sustainMode != 1){ // If proprietary sustain mode off...
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <inputNotes+0x160>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d00b      	beq.n	8001c44 <inputNotes+0x130>
			sendChord(lastSendNote[i], 0, 1); // 0 in second param means "noteOff".
 8001c2c:	4a10      	ldr	r2, [pc, #64]	; (8001c70 <inputNotes+0x15c>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c34:	2201      	movs	r2, #1
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 f97b 	bl	8001f34 <sendChord>
			osc_setNote(0); // turn DAC off.
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f000 fb64 	bl	800230c <osc_setNote>
  for (int i = 0; i <= 12; i++){
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3301      	adds	r3, #1
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b0c      	cmp	r3, #12
 8001c4e:	f77f af67 	ble.w	8001b20 <inputNotes+0xc>
        }
    }

  }
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	2000007c 	.word	0x2000007c
 8001c60:	20000370 	.word	0x20000370
 8001c64:	200003dc 	.word	0x200003dc
 8001c68:	200002f4 	.word	0x200002f4
 8001c6c:	20000378 	.word	0x20000378
 8001c70:	20000334 	.word	0x20000334
 8001c74:	2000036c 	.word	0x2000036c
 8001c78:	20000368 	.word	0x20000368
 8001c7c:	2000006a 	.word	0x2000006a
 8001c80:	20000374 	.word	0x20000374

08001c84 <inputSaveChord>:


void inputSaveChord(void){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0

uint8_t flag = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	71fb      	strb	r3, [r7, #7]

	for (int i = 0; i <= 12; i++){
 8001c8e:	2300      	movs	r3, #0
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	e024      	b.n	8001cde <inputSaveChord+0x5a>

//		buttonState[i + IN_DO] = HAL_GPIO_ReadPin(notePort_list[i], notePin_list[i]);

//		if(!buttonState[i + IN_DO] && lastState[i + IN_DO]){       // If we read 1, and the last time we read 0, means button was just pressed
		if (GETBUTTONSTATUS(teclas[i], buttonFall)){
 8001c94:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <inputSaveChord+0x8c>)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	4413      	add	r3, r2
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <inputSaveChord+0x90>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d014      	beq.n	8001cd8 <inputSaveChord+0x54>

			//storing the selected chord:
			setChord(i);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fcd8 	bl	8000668 <setChord>
			footKey = NORMAL;
 8001cb8:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <inputSaveChord+0x94>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
			screenNum = POPUP_SAVED_CHORD;
 8001cbe:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <inputSaveChord+0x98>)
 8001cc0:	2208      	movs	r2, #8
 8001cc2:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN; 				//return point to chordSelect().
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <inputSaveChord+0x9c>)
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	701a      	strb	r2, [r3, #0]
			lastKey_pos = i; 					// to show in screen the foot key pressed.
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <inputSaveChord+0xa0>)
 8001cd0:	701a      	strb	r2, [r3, #0]
			flag = 1;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	71fb      	strb	r3, [r7, #7]
			break; 								 //it must exit from function.
 8001cd6:	e005      	b.n	8001ce4 <inputSaveChord+0x60>
	for (int i = 0; i <= 12; i++){
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2b0c      	cmp	r3, #12
 8001ce2:	ddd7      	ble.n	8001c94 <inputSaveChord+0x10>
		} //end if getStatusButton
	} //end for

	if (!flag){
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10e      	bne.n	8001d08 <inputSaveChord+0x84>


		if (GETBUTTONSTATUS(IN_LEFT, buttonFall)){
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <inputSaveChord+0x90>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d008      	beq.n	8001d08 <inputSaveChord+0x84>
			footKey = NORMAL;
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <inputSaveChord+0x94>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
			screenNum = POPUP_CANCEL;
 8001cfc:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <inputSaveChord+0x98>)
 8001cfe:	220b      	movs	r2, #11
 8001d00:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN;
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <inputSaveChord+0x9c>)
 8001d04:	2204      	movs	r2, #4
 8001d06:	701a      	strb	r2, [r3, #0]
		}
	} //end if !flag

} //end inputSaveChord()
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	2000007c 	.word	0x2000007c
 8001d14:	20000370 	.word	0x20000370
 8001d18:	20000381 	.word	0x20000381
 8001d1c:	20000379 	.word	0x20000379
 8001d20:	20000089 	.word	0x20000089
 8001d24:	2000074c 	.word	0x2000074c

08001d28 <chordSelect>:

void chordSelect(void){
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0

  uint8_t flag = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	71fb      	strb	r3, [r7, #7]

  switch (chordSelect_cursor){
 8001d32:	4b58      	ldr	r3, [pc, #352]	; (8001e94 <chordSelect+0x16c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d03a      	beq.n	8001db0 <chordSelect+0x88>
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d302      	bcc.n	8001d44 <chordSelect+0x1c>
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d079      	beq.n	8001e36 <chordSelect+0x10e>
 8001d42:	e09a      	b.n	8001e7a <chordSelect+0x152>

		case 0:

			if (GETBUTTONSTATUS(IN_DOWN, buttonFall)){
 8001d44:	4b54      	ldr	r3, [pc, #336]	; (8001e98 <chordSelect+0x170>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <chordSelect+0x36>
				chordSelect_cursor++;
 8001d50:	4b50      	ldr	r3, [pc, #320]	; (8001e94 <chordSelect+0x16c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	3301      	adds	r3, #1
 8001d56:	4a4f      	ldr	r2, [pc, #316]	; (8001e94 <chordSelect+0x16c>)
 8001d58:	6013      	str	r3, [r2, #0]
				flag = 1;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_LEFT, buttonFall)){
 8001d5e:	4b4e      	ldr	r3, [pc, #312]	; (8001e98 <chordSelect+0x170>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0310 	and.w	r3, r3, #16
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00d      	beq.n	8001d86 <chordSelect+0x5e>
				chord--;
 8001d6a:	4b4c      	ldr	r3, [pc, #304]	; (8001e9c <chordSelect+0x174>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	4a4a      	ldr	r2, [pc, #296]	; (8001e9c <chordSelect+0x174>)
 8001d72:	6013      	str	r3, [r2, #0]
				if (chord < 0)
 8001d74:	4b49      	ldr	r3, [pc, #292]	; (8001e9c <chordSelect+0x174>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	da02      	bge.n	8001d82 <chordSelect+0x5a>
					chord = 7;
 8001d7c:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <chordSelect+0x174>)
 8001d7e:	2207      	movs	r2, #7
 8001d80:	601a      	str	r2, [r3, #0]
				flag = 1;
 8001d82:	2301      	movs	r3, #1
 8001d84:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_RIGHT, buttonFall)){
 8001d86:	4b44      	ldr	r3, [pc, #272]	; (8001e98 <chordSelect+0x170>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d06e      	beq.n	8001e70 <chordSelect+0x148>
				chord++;
 8001d92:	4b42      	ldr	r3, [pc, #264]	; (8001e9c <chordSelect+0x174>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	3301      	adds	r3, #1
 8001d98:	4a40      	ldr	r2, [pc, #256]	; (8001e9c <chordSelect+0x174>)
 8001d9a:	6013      	str	r3, [r2, #0]
				if (chord > 7)
 8001d9c:	4b3f      	ldr	r3, [pc, #252]	; (8001e9c <chordSelect+0x174>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b07      	cmp	r3, #7
 8001da2:	dd02      	ble.n	8001daa <chordSelect+0x82>
					chord = 0;
 8001da4:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <chordSelect+0x174>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
				flag = 1;
 8001daa:	2301      	movs	r3, #1
 8001dac:	71fb      	strb	r3, [r7, #7]
			}

		break;
 8001dae:	e05f      	b.n	8001e70 <chordSelect+0x148>
		case 1:

			if (GETBUTTONSTATUS(IN_UP, buttonFall)){
 8001db0:	4b39      	ldr	r3, [pc, #228]	; (8001e98 <chordSelect+0x170>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d006      	beq.n	8001dca <chordSelect+0xa2>
				chordSelect_cursor--;
 8001dbc:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <chordSelect+0x16c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	4a34      	ldr	r2, [pc, #208]	; (8001e94 <chordSelect+0x16c>)
 8001dc4:	6013      	str	r3, [r2, #0]
				flag = 1;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_DOWN, buttonFall)){
 8001dca:	4b33      	ldr	r3, [pc, #204]	; (8001e98 <chordSelect+0x170>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d006      	beq.n	8001de4 <chordSelect+0xbc>
				chordSelect_cursor++;
 8001dd6:	4b2f      	ldr	r3, [pc, #188]	; (8001e94 <chordSelect+0x16c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	4a2d      	ldr	r2, [pc, #180]	; (8001e94 <chordSelect+0x16c>)
 8001dde:	6013      	str	r3, [r2, #0]
				flag = 1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_LEFT, buttonFall)){
 8001de4:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <chordSelect+0x170>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00d      	beq.n	8001e0c <chordSelect+0xe4>
				chordInv--;
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <chordSelect+0x178>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	4a2a      	ldr	r2, [pc, #168]	; (8001ea0 <chordSelect+0x178>)
 8001df8:	6013      	str	r3, [r2, #0]
				if (chordInv < 0)
 8001dfa:	4b29      	ldr	r3, [pc, #164]	; (8001ea0 <chordSelect+0x178>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da02      	bge.n	8001e08 <chordSelect+0xe0>
					chordInv = 2;
 8001e02:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <chordSelect+0x178>)
 8001e04:	2202      	movs	r2, #2
 8001e06:	601a      	str	r2, [r3, #0]
				flag = 1;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_RIGHT, buttonFall)){
 8001e0c:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <chordSelect+0x170>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d02d      	beq.n	8001e74 <chordSelect+0x14c>
				chordInv++;
 8001e18:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <chordSelect+0x178>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	4a20      	ldr	r2, [pc, #128]	; (8001ea0 <chordSelect+0x178>)
 8001e20:	6013      	str	r3, [r2, #0]
				if (chordInv > 2)
 8001e22:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <chordSelect+0x178>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	dd02      	ble.n	8001e30 <chordSelect+0x108>
					chordInv = 0;
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <chordSelect+0x178>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
				flag = 1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	71fb      	strb	r3, [r7, #7]
			}

		break;
 8001e34:	e01e      	b.n	8001e74 <chordSelect+0x14c>
		case 2:

			if (GETBUTTONSTATUS(IN_UP, buttonFall)){
 8001e36:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <chordSelect+0x170>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d006      	beq.n	8001e50 <chordSelect+0x128>
				chordSelect_cursor--;
 8001e42:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <chordSelect+0x16c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <chordSelect+0x16c>)
 8001e4a:	6013      	str	r3, [r2, #0]
				flag = 1;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_RIGHT, buttonFall)){
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <chordSelect+0x170>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0320 	and.w	r3, r3, #32
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00d      	beq.n	8001e78 <chordSelect+0x150>
				footKey = SAVE_CHORD; //
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <chordSelect+0x17c>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
				menu = RECUEST_FOOTKEY_SCREEN;
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <chordSelect+0x180>)
 8001e64:	2207      	movs	r2, #7
 8001e66:	701a      	strb	r2, [r3, #0]
				screenNum = RECUEST_FOOTKEY_SCREEN;
 8001e68:	4b10      	ldr	r3, [pc, #64]	; (8001eac <chordSelect+0x184>)
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	701a      	strb	r2, [r3, #0]
			}

		break;
 8001e6e:	e003      	b.n	8001e78 <chordSelect+0x150>
		break;
 8001e70:	bf00      	nop
 8001e72:	e002      	b.n	8001e7a <chordSelect+0x152>
		break;
 8001e74:	bf00      	nop
 8001e76:	e000      	b.n	8001e7a <chordSelect+0x152>
		break;
 8001e78:	bf00      	nop
	} //fin switch chordSelect_cursor

  if (flag){        ///flag de impresion
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <chordSelect+0x15e>

      screenNum = CHORD_SCREEN;
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <chordSelect+0x184>)
 8001e82:	2204      	movs	r2, #4
 8001e84:	701a      	strb	r2, [r3, #0]
  }
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	200003d8 	.word	0x200003d8
 8001e98:	20000370 	.word	0x20000370
 8001e9c:	200003e0 	.word	0x200003e0
 8001ea0:	200003e4 	.word	0x200003e4
 8001ea4:	20000381 	.word	0x20000381
 8001ea8:	20000089 	.word	0x20000089
 8001eac:	20000379 	.word	0x20000379

08001eb0 <tunneSelect>:


void tunneSelect(void){
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
	uint8_t flag = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	71fb      	strb	r3, [r7, #7]

	if (GETBUTTONSTATUS(IN_LEFT, buttonFall)){
 8001eba:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <tunneSelect+0x78>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00e      	beq.n	8001ee4 <tunneSelect+0x34>
		firstDoTunning--;
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <tunneSelect+0x7c>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <tunneSelect+0x7c>)
 8001ed0:	701a      	strb	r2, [r3, #0]
		if (firstDoTunning < MIDI_C2)
 8001ed2:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <tunneSelect+0x7c>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b23      	cmp	r3, #35	; 0x23
 8001ed8:	d802      	bhi.n	8001ee0 <tunneSelect+0x30>
			firstDoTunning = MIDI_B2;
 8001eda:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <tunneSelect+0x7c>)
 8001edc:	222f      	movs	r2, #47	; 0x2f
 8001ede:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	71fb      	strb	r3, [r7, #7]
	}
	if (GETBUTTONSTATUS(IN_RIGHT, buttonFall)){
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <tunneSelect+0x78>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0320 	and.w	r3, r3, #32
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00e      	beq.n	8001f0e <tunneSelect+0x5e>
		firstDoTunning++;
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <tunneSelect+0x7c>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <tunneSelect+0x7c>)
 8001efa:	701a      	strb	r2, [r3, #0]
		if (firstDoTunning >MIDI_B2)
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <tunneSelect+0x7c>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b2f      	cmp	r3, #47	; 0x2f
 8001f02:	d902      	bls.n	8001f0a <tunneSelect+0x5a>
			firstDoTunning = MIDI_C2;
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <tunneSelect+0x7c>)
 8001f06:	2224      	movs	r2, #36	; 0x24
 8001f08:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	71fb      	strb	r3, [r7, #7]
	}

	if (flag){
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <tunneSelect+0x6a>
		screenNum = TUNNE_SCREEN;
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <tunneSelect+0x80>)
 8001f16:	2205      	movs	r2, #5
 8001f18:	701a      	strb	r2, [r3, #0]
	}
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20000370 	.word	0x20000370
 8001f2c:	200003dc 	.word	0x200003dc
 8001f30:	20000379 	.word	0x20000379

08001f34 <sendChord>:


void sendChord(unsigned long bnotes, int velocity, int channel){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]

  uint8_t note1;
  uint8_t note2;
  uint8_t note3;

  note1 = (bnotes & 0x7f);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f48:	75fb      	strb	r3, [r7, #23]
  note2 = (bnotes >> 8) & 0x7f;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f54:	75bb      	strb	r3, [r7, #22]
  note3 = (bnotes >> 16) & 0x7f;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f60:	757b      	strb	r3, [r7, #21]

  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001f62:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <sendChord+0xa8>)
 8001f64:	2209      	movs	r2, #9
 8001f66:	701a      	strb	r2, [r3, #0]
  midi_msg[1] = 0x90 | 1;
 8001f68:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <sendChord+0xa8>)
 8001f6a:	2291      	movs	r2, #145	; 0x91
 8001f6c:	705a      	strb	r2, [r3, #1]
  midi_msg[2] = note1;
 8001f6e:	4a1b      	ldr	r2, [pc, #108]	; (8001fdc <sendChord+0xa8>)
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
 8001f72:	7093      	strb	r3, [r2, #2]
  midi_msg[3] = velocity;
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <sendChord+0xa8>)
 8001f7a:	70da      	strb	r2, [r3, #3]
  MIDI_SendBuffer(midi_msg, 4);
 8001f7c:	2104      	movs	r1, #4
 8001f7e:	4817      	ldr	r0, [pc, #92]	; (8001fdc <sendChord+0xa8>)
 8001f80:	f00a ff9e 	bl	800cec0 <MIDI_SendBuffer>

  if (note2 && note3){
 8001f84:	7dbb      	ldrb	r3, [r7, #22]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d024      	beq.n	8001fd4 <sendChord+0xa0>
 8001f8a:	7d7b      	ldrb	r3, [r7, #21]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d021      	beq.n	8001fd4 <sendChord+0xa0>

	  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <sendChord+0xa8>)
 8001f92:	2209      	movs	r2, #9
 8001f94:	701a      	strb	r2, [r3, #0]
	  midi_msg[1] = 0x90 | 1;
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <sendChord+0xa8>)
 8001f98:	2291      	movs	r2, #145	; 0x91
 8001f9a:	705a      	strb	r2, [r3, #1]
	  midi_msg[2] = note2;
 8001f9c:	4a0f      	ldr	r2, [pc, #60]	; (8001fdc <sendChord+0xa8>)
 8001f9e:	7dbb      	ldrb	r3, [r7, #22]
 8001fa0:	7093      	strb	r3, [r2, #2]
	  midi_msg[3] = velocity;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <sendChord+0xa8>)
 8001fa8:	70da      	strb	r2, [r3, #3]
	  MIDI_SendBuffer(midi_msg, 4);
 8001faa:	2104      	movs	r1, #4
 8001fac:	480b      	ldr	r0, [pc, #44]	; (8001fdc <sendChord+0xa8>)
 8001fae:	f00a ff87 	bl	800cec0 <MIDI_SendBuffer>

	  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <sendChord+0xa8>)
 8001fb4:	2209      	movs	r2, #9
 8001fb6:	701a      	strb	r2, [r3, #0]
	  midi_msg[1] = 0x90 | 1;
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <sendChord+0xa8>)
 8001fba:	2291      	movs	r2, #145	; 0x91
 8001fbc:	705a      	strb	r2, [r3, #1]
	  midi_msg[2] = note3;
 8001fbe:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <sendChord+0xa8>)
 8001fc0:	7d7b      	ldrb	r3, [r7, #21]
 8001fc2:	7093      	strb	r3, [r2, #2]
	  midi_msg[3] = velocity;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <sendChord+0xa8>)
 8001fca:	70da      	strb	r2, [r3, #3]
	  MIDI_SendBuffer(midi_msg, 4);
 8001fcc:	2104      	movs	r1, #4
 8001fce:	4803      	ldr	r0, [pc, #12]	; (8001fdc <sendChord+0xa8>)
 8001fd0:	f00a ff76 	bl	800cec0 <MIDI_SendBuffer>
  }
} //fin sendChord()
 8001fd4:	bf00      	nop
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000754 	.word	0x20000754

08001fe0 <showLeds>:


void showLeds(void){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0

	uint16_t demora = 50;
 8001fe6:	2332      	movs	r3, #50	; 0x32
 8001fe8:	82bb      	strh	r3, [r7, #20]
	uint8_t posLed[] = {	LED_OCT_G,
 8001fea:	4a51      	ldr	r2, [pc, #324]	; (8002130 <showLeds+0x150>)
 8001fec:	f107 0308 	add.w	r3, r7, #8
 8001ff0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ff2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
							LED_PS5,
							LED_SUST_P,
							LED_SUST_M,
							LED_CHORD };

	uint16_t indexLed = 0x1 << LED_OCT_G;
 8001ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ffa:	80fb      	strh	r3, [r7, #6]
	indexLed = ~indexLed;
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	b29b      	uxth	r3, r3
 8002002:	80fb      	strh	r3, [r7, #6]
	spi_74HC595_Transmit((uint8_t *)&indexLed, 2/*bytes*/);
 8002004:	1dbb      	adds	r3, r7, #6
 8002006:	2102      	movs	r1, #2
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fae3 	bl	80005d4 <spi_74HC595_Transmit>
	HAL_Delay(demora);
 800200e:	8abb      	ldrh	r3, [r7, #20]
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fe27 	bl	8002c64 <HAL_Delay>

	indexLed = (0x1 << posLed[0]) | (0x1 << posLed[1]);
 8002016:	7a3b      	ldrb	r3, [r7, #8]
 8002018:	461a      	mov	r2, r3
 800201a:	2301      	movs	r3, #1
 800201c:	4093      	lsls	r3, r2
 800201e:	b21a      	sxth	r2, r3
 8002020:	7a7b      	ldrb	r3, [r7, #9]
 8002022:	4619      	mov	r1, r3
 8002024:	2301      	movs	r3, #1
 8002026:	408b      	lsls	r3, r1
 8002028:	b21b      	sxth	r3, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	b21b      	sxth	r3, r3
 800202e:	b29b      	uxth	r3, r3
 8002030:	80fb      	strh	r3, [r7, #6]
	indexLed = ~indexLed;
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	43db      	mvns	r3, r3
 8002036:	b29b      	uxth	r3, r3
 8002038:	80fb      	strh	r3, [r7, #6]
	spi_74HC595_Transmit((uint8_t *)&indexLed, 2/*bytes*/);
 800203a:	1dbb      	adds	r3, r7, #6
 800203c:	2102      	movs	r1, #2
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fac8 	bl	80005d4 <spi_74HC595_Transmit>
	HAL_Delay(demora);
 8002044:	8abb      	ldrh	r3, [r7, #20]
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fe0c 	bl	8002c64 <HAL_Delay>

	for (uint8_t i=0; i<10; i++){
 800204c:	2300      	movs	r3, #0
 800204e:	75fb      	strb	r3, [r7, #23]
 8002050:	e035      	b.n	80020be <showLeds+0xde>
		indexLed = (0x1 << posLed[i]) | (0x1 << posLed[i + 1]) | (0x1 << posLed[i + 2]);
 8002052:	7dfb      	ldrb	r3, [r7, #23]
 8002054:	f107 0218 	add.w	r2, r7, #24
 8002058:	4413      	add	r3, r2
 800205a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800205e:	461a      	mov	r2, r3
 8002060:	2301      	movs	r3, #1
 8002062:	4093      	lsls	r3, r2
 8002064:	b21a      	sxth	r2, r3
 8002066:	7dfb      	ldrb	r3, [r7, #23]
 8002068:	3301      	adds	r3, #1
 800206a:	f107 0118 	add.w	r1, r7, #24
 800206e:	440b      	add	r3, r1
 8002070:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002074:	4619      	mov	r1, r3
 8002076:	2301      	movs	r3, #1
 8002078:	408b      	lsls	r3, r1
 800207a:	b21b      	sxth	r3, r3
 800207c:	4313      	orrs	r3, r2
 800207e:	b21a      	sxth	r2, r3
 8002080:	7dfb      	ldrb	r3, [r7, #23]
 8002082:	3302      	adds	r3, #2
 8002084:	f107 0118 	add.w	r1, r7, #24
 8002088:	440b      	add	r3, r1
 800208a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800208e:	4619      	mov	r1, r3
 8002090:	2301      	movs	r3, #1
 8002092:	408b      	lsls	r3, r1
 8002094:	b21b      	sxth	r3, r3
 8002096:	4313      	orrs	r3, r2
 8002098:	b21b      	sxth	r3, r3
 800209a:	b29b      	uxth	r3, r3
 800209c:	80fb      	strh	r3, [r7, #6]
		indexLed = ~indexLed;
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	80fb      	strh	r3, [r7, #6]
		spi_74HC595_Transmit((uint8_t *)&indexLed, 2/*bytes*/);
 80020a6:	1dbb      	adds	r3, r7, #6
 80020a8:	2102      	movs	r1, #2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fa92 	bl	80005d4 <spi_74HC595_Transmit>
		HAL_Delay(demora);
 80020b0:	8abb      	ldrh	r3, [r7, #20]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 fdd6 	bl	8002c64 <HAL_Delay>
	for (uint8_t i=0; i<10; i++){
 80020b8:	7dfb      	ldrb	r3, [r7, #23]
 80020ba:	3301      	adds	r3, #1
 80020bc:	75fb      	strb	r3, [r7, #23]
 80020be:	7dfb      	ldrb	r3, [r7, #23]
 80020c0:	2b09      	cmp	r3, #9
 80020c2:	d9c6      	bls.n	8002052 <showLeds+0x72>
	}

	indexLed = (0x1 << posLed[10]) | (0x1 << posLed[11]);
 80020c4:	7cbb      	ldrb	r3, [r7, #18]
 80020c6:	461a      	mov	r2, r3
 80020c8:	2301      	movs	r3, #1
 80020ca:	4093      	lsls	r3, r2
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	7cfb      	ldrb	r3, [r7, #19]
 80020d0:	4619      	mov	r1, r3
 80020d2:	2301      	movs	r3, #1
 80020d4:	408b      	lsls	r3, r1
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	4313      	orrs	r3, r2
 80020da:	b21b      	sxth	r3, r3
 80020dc:	b29b      	uxth	r3, r3
 80020de:	80fb      	strh	r3, [r7, #6]
	indexLed = ~indexLed;
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	80fb      	strh	r3, [r7, #6]
	spi_74HC595_Transmit((uint8_t *)&indexLed, 2/*bytes*/);
 80020e8:	1dbb      	adds	r3, r7, #6
 80020ea:	2102      	movs	r1, #2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fa71 	bl	80005d4 <spi_74HC595_Transmit>
	HAL_Delay(demora);
 80020f2:	8abb      	ldrh	r3, [r7, #20]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fdb5 	bl	8002c64 <HAL_Delay>

	indexLed = 0x1 << LED_CHORD;
 80020fa:	2308      	movs	r3, #8
 80020fc:	80fb      	strh	r3, [r7, #6]
	indexLed = ~indexLed;
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	43db      	mvns	r3, r3
 8002102:	b29b      	uxth	r3, r3
 8002104:	80fb      	strh	r3, [r7, #6]
	spi_74HC595_Transmit((uint8_t *)&indexLed, 2/*bytes*/);
 8002106:	1dbb      	adds	r3, r7, #6
 8002108:	2102      	movs	r1, #2
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fa62 	bl	80005d4 <spi_74HC595_Transmit>
	HAL_Delay(demora);
 8002110:	8abb      	ldrh	r3, [r7, #20]
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fda6 	bl	8002c64 <HAL_Delay>

	indexLed = 0xFFFF;
 8002118:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800211c:	80fb      	strh	r3, [r7, #6]
	spi_74HC595_Transmit((uint8_t *)&indexLed, 2/*bytes*/);
 800211e:	1dbb      	adds	r3, r7, #6
 8002120:	2102      	movs	r1, #2
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fa56 	bl	80005d4 <spi_74HC595_Transmit>
}
 8002128:	bf00      	nop
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	0800d934 	.word	0x0800d934

08002134 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){ // dac
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0a      	ldr	r2, [pc, #40]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d103      	bne.n	800214e <HAL_TIM_PeriodElapsedCallback+0x1a>
		flag_dac = 1;
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
	}else if (htim->Instance == TIM2){ //tick
		flag_tick = 1;
	}

}
 800214c:	e007      	b.n	800215e <HAL_TIM_PeriodElapsedCallback+0x2a>
	}else if (htim->Instance == TIM2){ //tick
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002156:	d102      	bne.n	800215e <HAL_TIM_PeriodElapsedCallback+0x2a>
		flag_tick = 1;
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40000400 	.word	0x40000400
 8002170:	20000383 	.word	0x20000383
 8002174:	20000382 	.word	0x20000382

08002178 <HAL_I2C_MasterTxCpltCallback>:


void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	_lcd_ISR();
 8002180:	f7ff f882 	bl	8001288 <_lcd_ISR>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	flag_adc = 1;
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	2000036d 	.word	0x2000036d

080021ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <osc_dac_init>:
uint8_t ratio_sen = 100;
uint8_t ratio_cuad = 100;
uint8_t ratio_ramp = 100;


void osc_dac_init(DAC_HandleTypeDef *p_hdac, uint32_t ch){
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
	handler_dac = p_hdac;
 80021c6:	4a09      	ldr	r2, [pc, #36]	; (80021ec <osc_dac_init+0x30>)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6013      	str	r3, [r2, #0]
	dac_ch = ch;
 80021cc:	4a08      	ldr	r2, [pc, #32]	; (80021f0 <osc_dac_init+0x34>)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6013      	str	r3, [r2, #0]

	HAL_DAC_Start(handler_dac, dac_ch);
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <osc_dac_init+0x30>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <osc_dac_init+0x34>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4619      	mov	r1, r3
 80021dc:	4610      	mov	r0, r2
 80021de:	f001 fb96 	bl	800390e <HAL_DAC_Start>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000760 	.word	0x20000760
 80021f0:	2000075c 	.word	0x2000075c

080021f4 <osc_dac_update>:

//must be handled with a 44100 Hz timer.
void osc_dac_update(void){
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0

	if (nota_activa!=-1){
 80021f8:	4b37      	ldr	r3, [pc, #220]	; (80022d8 <osc_dac_update+0xe4>)
 80021fa:	f993 3000 	ldrsb.w	r3, [r3]
 80021fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002202:	d057      	beq.n	80022b4 <osc_dac_update+0xc0>
		phase+= nota_incrFase[nota_activa];
 8002204:	4b34      	ldr	r3, [pc, #208]	; (80022d8 <osc_dac_update+0xe4>)
 8002206:	f993 3000 	ldrsb.w	r3, [r3]
 800220a:	461a      	mov	r2, r3
 800220c:	4b33      	ldr	r3, [pc, #204]	; (80022dc <osc_dac_update+0xe8>)
 800220e:	5c9b      	ldrb	r3, [r3, r2]
 8002210:	b29a      	uxth	r2, r3
 8002212:	4b33      	ldr	r3, [pc, #204]	; (80022e0 <osc_dac_update+0xec>)
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	4413      	add	r3, r2
 8002218:	b29a      	uxth	r2, r3
 800221a:	4b31      	ldr	r3, [pc, #196]	; (80022e0 <osc_dac_update+0xec>)
 800221c:	801a      	strh	r2, [r3, #0]
		if (phase>OSC_LAST) phase -= OSC_LAST;
 800221e:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <osc_dac_update+0xec>)
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	f244 520a 	movw	r2, #17674	; 0x450a
 8002226:	4293      	cmp	r3, r2
 8002228:	d907      	bls.n	800223a <osc_dac_update+0x46>
 800222a:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <osc_dac_update+0xec>)
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	f5a3 438a 	sub.w	r3, r3, #17664	; 0x4500
 8002232:	3b0a      	subs	r3, #10
 8002234:	b29a      	uxth	r2, r3
 8002236:	4b2a      	ldr	r3, [pc, #168]	; (80022e0 <osc_dac_update+0xec>)
 8002238:	801a      	strh	r2, [r3, #0]
		dac_out = ratio_sen/100*tabla_seno[phase] + ratio_cuad/100*tabla_cuadrada[phase] + ratio_ramp/100*tabla_sierra[phase];
 800223a:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <osc_dac_update+0xf0>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	4a2a      	ldr	r2, [pc, #168]	; (80022e8 <osc_dac_update+0xf4>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	095b      	lsrs	r3, r3, #5
 8002246:	b2db      	uxtb	r3, r3
 8002248:	b29a      	uxth	r2, r3
 800224a:	4b25      	ldr	r3, [pc, #148]	; (80022e0 <osc_dac_update+0xec>)
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	4619      	mov	r1, r3
 8002250:	4b26      	ldr	r3, [pc, #152]	; (80022ec <osc_dac_update+0xf8>)
 8002252:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002256:	b29b      	uxth	r3, r3
 8002258:	fb12 f303 	smulbb	r3, r2, r3
 800225c:	b29a      	uxth	r2, r3
 800225e:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <osc_dac_update+0xfc>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	4921      	ldr	r1, [pc, #132]	; (80022e8 <osc_dac_update+0xf4>)
 8002264:	fba1 1303 	umull	r1, r3, r1, r3
 8002268:	095b      	lsrs	r3, r3, #5
 800226a:	b2db      	uxtb	r3, r3
 800226c:	b299      	uxth	r1, r3
 800226e:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <osc_dac_update+0xec>)
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <osc_dac_update+0x100>)
 8002276:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800227a:	b29b      	uxth	r3, r3
 800227c:	fb11 f303 	smulbb	r3, r1, r3
 8002280:	b29b      	uxth	r3, r3
 8002282:	4413      	add	r3, r2
 8002284:	b29a      	uxth	r2, r3
 8002286:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <osc_dac_update+0x104>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	4917      	ldr	r1, [pc, #92]	; (80022e8 <osc_dac_update+0xf4>)
 800228c:	fba1 1303 	umull	r1, r3, r1, r3
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	b2db      	uxtb	r3, r3
 8002294:	b299      	uxth	r1, r3
 8002296:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <osc_dac_update+0xec>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	4b17      	ldr	r3, [pc, #92]	; (80022fc <osc_dac_update+0x108>)
 800229e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	fb11 f303 	smulbb	r3, r1, r3
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	4b14      	ldr	r3, [pc, #80]	; (8002300 <osc_dac_update+0x10c>)
 80022b0:	801a      	strh	r2, [r3, #0]
 80022b2:	e005      	b.n	80022c0 <osc_dac_update+0xcc>
		//HAL_DAC_SetValue(handler_dac, dac_ch, DAC_ALIGN_12B_R, dac_out);
	}else{
		phase = 0;
 80022b4:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <osc_dac_update+0xec>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	801a      	strh	r2, [r3, #0]
		dac_out = 0;
 80022ba:	4b11      	ldr	r3, [pc, #68]	; (8002300 <osc_dac_update+0x10c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	801a      	strh	r2, [r3, #0]
	}

	HAL_DAC_SetValue(handler_dac, dac_ch, DAC_ALIGN_12B_R, dac_out);
 80022c0:	4b10      	ldr	r3, [pc, #64]	; (8002304 <osc_dac_update+0x110>)
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	4b10      	ldr	r3, [pc, #64]	; (8002308 <osc_dac_update+0x114>)
 80022c6:	6819      	ldr	r1, [r3, #0]
 80022c8:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <osc_dac_update+0x10c>)
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f001 fbd1 	bl	8003a74 <HAL_DAC_SetValue>

//	flag_dac = 0;
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	2000008c 	.word	0x2000008c
 80022dc:	08041638 	.word	0x08041638
 80022e0:	20000396 	.word	0x20000396
 80022e4:	2000008d 	.word	0x2000008d
 80022e8:	51eb851f 	.word	0x51eb851f
 80022ec:	0800d9b4 	.word	0x0800d9b4
 80022f0:	2000008e 	.word	0x2000008e
 80022f4:	0801ede0 	.word	0x0801ede0
 80022f8:	2000008f 	.word	0x2000008f
 80022fc:	0803020c 	.word	0x0803020c
 8002300:	20000398 	.word	0x20000398
 8002304:	20000760 	.word	0x20000760
 8002308:	2000075c 	.word	0x2000075c

0800230c <osc_setNote>:


int8_t osc_setNote (uint8_t nn){
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]

	if (!nn){
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d104      	bne.n	8002326 <osc_setNote+0x1a>
		nota_activa = -1;
 800231c:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <osc_setNote+0x48>)
 800231e:	22ff      	movs	r2, #255	; 0xff
 8002320:	701a      	strb	r2, [r3, #0]
		return 0;
 8002322:	2300      	movs	r3, #0
 8002324:	e00f      	b.n	8002346 <osc_setNote+0x3a>
	}

	if(nn<24 || nn>60){
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2b17      	cmp	r3, #23
 800232a:	d902      	bls.n	8002332 <osc_setNote+0x26>
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	2b3c      	cmp	r3, #60	; 0x3c
 8002330:	d902      	bls.n	8002338 <osc_setNote+0x2c>
		return -1;
 8002332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002336:	e006      	b.n	8002346 <osc_setNote+0x3a>
	}

	nota_activa = nn - NOTA_C1;
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	3b18      	subs	r3, #24
 800233c:	b2db      	uxtb	r3, r3
 800233e:	b25a      	sxtb	r2, r3
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <osc_setNote+0x48>)
 8002342:	701a      	strb	r2, [r3, #0]
	return 0;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	2000008c 	.word	0x2000008c

08002358 <osc_setRatios>:

int8_t osc_setRatios(uint8_t rsen, uint8_t rcuad, uint8_t rsier){
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
 8002362:	460b      	mov	r3, r1
 8002364:	71bb      	strb	r3, [r7, #6]
 8002366:	4613      	mov	r3, r2
 8002368:	717b      	strb	r3, [r7, #5]

	if (rsen > 100 || rcuad > 100 || rsier > 100){
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	2b64      	cmp	r3, #100	; 0x64
 800236e:	d805      	bhi.n	800237c <osc_setRatios+0x24>
 8002370:	79bb      	ldrb	r3, [r7, #6]
 8002372:	2b64      	cmp	r3, #100	; 0x64
 8002374:	d802      	bhi.n	800237c <osc_setRatios+0x24>
 8002376:	797b      	ldrb	r3, [r7, #5]
 8002378:	2b64      	cmp	r3, #100	; 0x64
 800237a:	d902      	bls.n	8002382 <osc_setRatios+0x2a>
		return -1;
 800237c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002380:	e009      	b.n	8002396 <osc_setRatios+0x3e>
	}

	ratio_sen = rsen; ratio_cuad = rcuad; ratio_ramp = rsier;
 8002382:	4a08      	ldr	r2, [pc, #32]	; (80023a4 <osc_setRatios+0x4c>)
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	7013      	strb	r3, [r2, #0]
 8002388:	4a07      	ldr	r2, [pc, #28]	; (80023a8 <osc_setRatios+0x50>)
 800238a:	79bb      	ldrb	r3, [r7, #6]
 800238c:	7013      	strb	r3, [r2, #0]
 800238e:	4a07      	ldr	r2, [pc, #28]	; (80023ac <osc_setRatios+0x54>)
 8002390:	797b      	ldrb	r3, [r7, #5]
 8002392:	7013      	strb	r3, [r2, #0]
	return 0;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	2000008d 	.word	0x2000008d
 80023a8:	2000008e 	.word	0x2000008e
 80023ac:	2000008f 	.word	0x2000008f

080023b0 <adc_potes_init>:

void adc_potes_init (void){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
	HAL_ADC_DeInit(&hadc1);
 80023b4:	481d      	ldr	r0, [pc, #116]	; (800242c <adc_potes_init+0x7c>)
 80023b6:	f000 fcba 	bl	8002d2e <HAL_ADC_DeInit>

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80023ba:	4b1c      	ldr	r3, [pc, #112]	; (800242c <adc_potes_init+0x7c>)
 80023bc:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <adc_potes_init+0x80>)
 80023be:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80023c0:	4b1a      	ldr	r3, [pc, #104]	; (800242c <adc_potes_init+0x7c>)
 80023c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023c6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023c8:	4b18      	ldr	r3, [pc, #96]	; (800242c <adc_potes_init+0x7c>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 80023ce:	4b17      	ldr	r3, [pc, #92]	; (800242c <adc_potes_init+0x7c>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80023d4:	4b15      	ldr	r3, [pc, #84]	; (800242c <adc_potes_init+0x7c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023da:	4b14      	ldr	r3, [pc, #80]	; (800242c <adc_potes_init+0x7c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023e2:	4b12      	ldr	r3, [pc, #72]	; (800242c <adc_potes_init+0x7c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023e8:	4b10      	ldr	r3, [pc, #64]	; (800242c <adc_potes_init+0x7c>)
 80023ea:	4a12      	ldr	r2, [pc, #72]	; (8002434 <adc_potes_init+0x84>)
 80023ec:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023ee:	4b0f      	ldr	r3, [pc, #60]	; (800242c <adc_potes_init+0x7c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80023f4:	4b0d      	ldr	r3, [pc, #52]	; (800242c <adc_potes_init+0x7c>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80023fa:	4b0c      	ldr	r3, [pc, #48]	; (800242c <adc_potes_init+0x7c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <adc_potes_init+0x7c>)
 8002404:	2201      	movs	r2, #1
 8002406:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002408:	4808      	ldr	r0, [pc, #32]	; (800242c <adc_potes_init+0x7c>)
 800240a:	f000 fc4d 	bl	8002ca8 <HAL_ADC_Init>
	{
		//Error_Handler();
	}

	sConfig.Channel = ADC_CHANNEL_8;
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <adc_potes_init+0x88>)
 8002410:	2208      	movs	r2, #8
 8002412:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <adc_potes_init+0x88>)
 8002416:	2201      	movs	r2, #1
 8002418:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <adc_potes_init+0x88>)
 800241c:	2201      	movs	r2, #1
 800241e:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002420:	4905      	ldr	r1, [pc, #20]	; (8002438 <adc_potes_init+0x88>)
 8002422:	4802      	ldr	r0, [pc, #8]	; (800242c <adc_potes_init+0x7c>)
 8002424:	f000 fee8 	bl	80031f8 <HAL_ADC_ConfigChannel>
	{
//		Error_Handler();
	}
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	200003ec 	.word	0x200003ec
 8002430:	40012000 	.word	0x40012000
 8002434:	0f000001 	.word	0x0f000001
 8002438:	20000384 	.word	0x20000384

0800243c <set_nextPote>:

void set_nextPote (void){
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	//sConfig = NULL;

	switch (pote){
 8002440:	4b26      	ldr	r3, [pc, #152]	; (80024dc <set_nextPote+0xa0>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d019      	beq.n	800247c <set_nextPote+0x40>
 8002448:	2b02      	cmp	r3, #2
 800244a:	d02c      	beq.n	80024a6 <set_nextPote+0x6a>
 800244c:	2b00      	cmp	r3, #0
 800244e:	d000      	beq.n	8002452 <set_nextPote+0x16>
//				Error_Handler();
			}
			pote = 0;
		break;
		default:
		break;
 8002450:	e041      	b.n	80024d6 <set_nextPote+0x9a>
			ratio_cuad = (uint8_t)HAL_ADC_GetValue(&hadc1);
 8002452:	4823      	ldr	r0, [pc, #140]	; (80024e0 <set_nextPote+0xa4>)
 8002454:	f000 feaf 	bl	80031b6 <HAL_ADC_GetValue>
 8002458:	4603      	mov	r3, r0
 800245a:	b2da      	uxtb	r2, r3
 800245c:	4b21      	ldr	r3, [pc, #132]	; (80024e4 <set_nextPote+0xa8>)
 800245e:	701a      	strb	r2, [r3, #0]
			sConfig.Channel = ADC_CHANNEL_9;
 8002460:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <set_nextPote+0xac>)
 8002462:	2209      	movs	r2, #9
 8002464:	601a      	str	r2, [r3, #0]
			sConfig.Rank = 1;
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <set_nextPote+0xac>)
 8002468:	2201      	movs	r2, #1
 800246a:	605a      	str	r2, [r3, #4]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800246c:	491e      	ldr	r1, [pc, #120]	; (80024e8 <set_nextPote+0xac>)
 800246e:	481c      	ldr	r0, [pc, #112]	; (80024e0 <set_nextPote+0xa4>)
 8002470:	f000 fec2 	bl	80031f8 <HAL_ADC_ConfigChannel>
			pote = 1;
 8002474:	4b19      	ldr	r3, [pc, #100]	; (80024dc <set_nextPote+0xa0>)
 8002476:	2201      	movs	r2, #1
 8002478:	701a      	strb	r2, [r3, #0]
		break;
 800247a:	e02c      	b.n	80024d6 <set_nextPote+0x9a>
			ratio_ramp = (uint8_t)HAL_ADC_GetValue(&hadc1);
 800247c:	4818      	ldr	r0, [pc, #96]	; (80024e0 <set_nextPote+0xa4>)
 800247e:	f000 fe9a 	bl	80031b6 <HAL_ADC_GetValue>
 8002482:	4603      	mov	r3, r0
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4b19      	ldr	r3, [pc, #100]	; (80024ec <set_nextPote+0xb0>)
 8002488:	701a      	strb	r2, [r3, #0]
			sConfig.Channel = ADC_CHANNEL_10;
 800248a:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <set_nextPote+0xac>)
 800248c:	220a      	movs	r2, #10
 800248e:	601a      	str	r2, [r3, #0]
			sConfig.Rank = 1;
 8002490:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <set_nextPote+0xac>)
 8002492:	2201      	movs	r2, #1
 8002494:	605a      	str	r2, [r3, #4]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002496:	4914      	ldr	r1, [pc, #80]	; (80024e8 <set_nextPote+0xac>)
 8002498:	4811      	ldr	r0, [pc, #68]	; (80024e0 <set_nextPote+0xa4>)
 800249a:	f000 fead 	bl	80031f8 <HAL_ADC_ConfigChannel>
			pote = 2;
 800249e:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <set_nextPote+0xa0>)
 80024a0:	2202      	movs	r2, #2
 80024a2:	701a      	strb	r2, [r3, #0]
		break;
 80024a4:	e017      	b.n	80024d6 <set_nextPote+0x9a>
			ratio_sen = (uint8_t)HAL_ADC_GetValue(&hadc1);
 80024a6:	480e      	ldr	r0, [pc, #56]	; (80024e0 <set_nextPote+0xa4>)
 80024a8:	f000 fe85 	bl	80031b6 <HAL_ADC_GetValue>
 80024ac:	4603      	mov	r3, r0
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <set_nextPote+0xb4>)
 80024b2:	701a      	strb	r2, [r3, #0]
			sConfig.Channel = ADC_CHANNEL_8;
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <set_nextPote+0xac>)
 80024b6:	2208      	movs	r2, #8
 80024b8:	601a      	str	r2, [r3, #0]
			sConfig.Rank = 1;
 80024ba:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <set_nextPote+0xac>)
 80024bc:	2201      	movs	r2, #1
 80024be:	605a      	str	r2, [r3, #4]
			sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80024c0:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <set_nextPote+0xac>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	609a      	str	r2, [r3, #8]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024c6:	4908      	ldr	r1, [pc, #32]	; (80024e8 <set_nextPote+0xac>)
 80024c8:	4805      	ldr	r0, [pc, #20]	; (80024e0 <set_nextPote+0xa4>)
 80024ca:	f000 fe95 	bl	80031f8 <HAL_ADC_ConfigChannel>
			pote = 0;
 80024ce:	4b03      	ldr	r3, [pc, #12]	; (80024dc <set_nextPote+0xa0>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
		break;
 80024d4:	bf00      	nop
	} //end switch pote
} //end set_nextPote ()
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000394 	.word	0x20000394
 80024e0:	200003ec 	.word	0x200003ec
 80024e4:	2000008e 	.word	0x2000008e
 80024e8:	20000384 	.word	0x20000384
 80024ec:	2000008f 	.word	0x2000008f
 80024f0:	2000008d 	.word	0x2000008d

080024f4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80024f8:	4b17      	ldr	r3, [pc, #92]	; (8002558 <MX_SPI1_Init+0x64>)
 80024fa:	4a18      	ldr	r2, [pc, #96]	; (800255c <MX_SPI1_Init+0x68>)
 80024fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024fe:	4b16      	ldr	r3, [pc, #88]	; (8002558 <MX_SPI1_Init+0x64>)
 8002500:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002504:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <MX_SPI1_Init+0x64>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <MX_SPI1_Init+0x64>)
 800250e:	2200      	movs	r2, #0
 8002510:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <MX_SPI1_Init+0x64>)
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <MX_SPI1_Init+0x64>)
 800251a:	2200      	movs	r2, #0
 800251c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <MX_SPI1_Init+0x64>)
 8002520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002524:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <MX_SPI1_Init+0x64>)
 8002528:	2220      	movs	r2, #32
 800252a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800252c:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <MX_SPI1_Init+0x64>)
 800252e:	2200      	movs	r2, #0
 8002530:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <MX_SPI1_Init+0x64>)
 8002534:	2200      	movs	r2, #0
 8002536:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002538:	4b07      	ldr	r3, [pc, #28]	; (8002558 <MX_SPI1_Init+0x64>)
 800253a:	2200      	movs	r2, #0
 800253c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <MX_SPI1_Init+0x64>)
 8002540:	220a      	movs	r2, #10
 8002542:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002544:	4804      	ldr	r0, [pc, #16]	; (8002558 <MX_SPI1_Init+0x64>)
 8002546:	f005 fc69 	bl	8007e1c <HAL_SPI_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002550:	f7ff fe2c 	bl	80021ac <Error_Handler>
  }

}
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000764 	.word	0x20000764
 800255c:	40013000 	.word	0x40013000

08002560 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	; 0x28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <HAL_SPI_MspInit+0x94>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d133      	bne.n	80025ea <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <HAL_SPI_MspInit+0x98>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <HAL_SPI_MspInit+0x98>)
 800258c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002590:	6453      	str	r3, [r2, #68]	; 0x44
 8002592:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_SPI_MspInit+0x98>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <HAL_SPI_MspInit+0x98>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <HAL_SPI_MspInit+0x98>)
 80025a8:	f043 0302 	orr.w	r3, r3, #2
 80025ac:	6313      	str	r3, [r2, #48]	; 0x30
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <HAL_SPI_MspInit+0x98>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80025ba:	2338      	movs	r3, #56	; 0x38
 80025bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025be:	2302      	movs	r3, #2
 80025c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c6:	2303      	movs	r3, #3
 80025c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025ca:	2305      	movs	r3, #5
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ce:	f107 0314 	add.w	r3, r7, #20
 80025d2:	4619      	mov	r1, r3
 80025d4:	4809      	ldr	r0, [pc, #36]	; (80025fc <HAL_SPI_MspInit+0x9c>)
 80025d6:	f001 faa3 	bl	8003b20 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	2023      	movs	r0, #35	; 0x23
 80025e0:	f001 f92f 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80025e4:	2023      	movs	r0, #35	; 0x23
 80025e6:	f001 f948 	bl	800387a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80025ea:	bf00      	nop
 80025ec:	3728      	adds	r7, #40	; 0x28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40013000 	.word	0x40013000
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40020400 	.word	0x40020400

08002600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <HAL_MspInit+0x4c>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	4a0f      	ldr	r2, [pc, #60]	; (800264c <HAL_MspInit+0x4c>)
 8002610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002614:	6453      	str	r3, [r2, #68]	; 0x44
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <HAL_MspInit+0x4c>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261e:	607b      	str	r3, [r7, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	603b      	str	r3, [r7, #0]
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <HAL_MspInit+0x4c>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	4a08      	ldr	r2, [pc, #32]	; (800264c <HAL_MspInit+0x4c>)
 800262c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002630:	6413      	str	r3, [r2, #64]	; 0x40
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_MspInit+0x4c>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800263e:	2007      	movs	r0, #7
 8002640:	f001 f8f4 	bl	800382c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40023800 	.word	0x40023800

08002650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002662:	e7fe      	b.n	8002662 <HardFault_Handler+0x4>

08002664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002668:	e7fe      	b.n	8002668 <MemManage_Handler+0x4>

0800266a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800266e:	e7fe      	b.n	800266e <BusFault_Handler+0x4>

08002670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002674:	e7fe      	b.n	8002674 <UsageFault_Handler+0x4>

08002676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a4:	f000 fabe 	bl	8002c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}

080026ac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80026b0:	4802      	ldr	r0, [pc, #8]	; (80026bc <ADC_IRQHandler+0x10>)
 80026b2:	f000 fc3f 	bl	8002f34 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200003ec 	.word	0x200003ec

080026c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026c4:	4802      	ldr	r0, [pc, #8]	; (80026d0 <TIM2_IRQHandler+0x10>)
 80026c6:	f006 fa6c 	bl	8008ba2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200007fc 	.word	0x200007fc

080026d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026d8:	4802      	ldr	r0, [pc, #8]	; (80026e4 <TIM3_IRQHandler+0x10>)
 80026da:	f006 fa62 	bl	8008ba2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	200007bc 	.word	0x200007bc

080026e8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80026ec:	4802      	ldr	r0, [pc, #8]	; (80026f8 <I2C1_EV_IRQHandler+0x10>)
 80026ee:	f001 ffa1 	bl	8004634 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000448 	.word	0x20000448

080026fc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002700:	4802      	ldr	r0, [pc, #8]	; (800270c <I2C1_ER_IRQHandler+0x10>)
 8002702:	f002 f8fd 	bl	8004900 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000448 	.word	0x20000448

08002710 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002714:	4802      	ldr	r0, [pc, #8]	; (8002720 <SPI1_IRQHandler+0x10>)
 8002716:	f005 ffc5 	bl	80086a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000764 	.word	0x20000764

08002724 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002728:	4802      	ldr	r0, [pc, #8]	; (8002734 <OTG_FS_IRQHandler+0x10>)
 800272a:	f003 fee2 	bl	80064f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20000ed0 	.word	0x20000ed0

08002738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002740:	4a14      	ldr	r2, [pc, #80]	; (8002794 <_sbrk+0x5c>)
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <_sbrk+0x60>)
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800274c:	4b13      	ldr	r3, [pc, #76]	; (800279c <_sbrk+0x64>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d102      	bne.n	800275a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <_sbrk+0x64>)
 8002756:	4a12      	ldr	r2, [pc, #72]	; (80027a0 <_sbrk+0x68>)
 8002758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <_sbrk+0x64>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	429a      	cmp	r2, r3
 8002766:	d207      	bcs.n	8002778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002768:	f00a fef2 	bl	800d550 <__errno>
 800276c:	4602      	mov	r2, r0
 800276e:	230c      	movs	r3, #12
 8002770:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002776:	e009      	b.n	800278c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <_sbrk+0x64>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800277e:	4b07      	ldr	r3, [pc, #28]	; (800279c <_sbrk+0x64>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	4a05      	ldr	r2, [pc, #20]	; (800279c <_sbrk+0x64>)
 8002788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800278a:	68fb      	ldr	r3, [r7, #12]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20020000 	.word	0x20020000
 8002798:	00000400 	.word	0x00000400
 800279c:	2000039c 	.word	0x2000039c
 80027a0:	200012e0 	.word	0x200012e0

080027a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <SystemInit+0x28>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ae:	4a07      	ldr	r2, [pc, #28]	; (80027cc <SystemInit+0x28>)
 80027b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027b8:	4b04      	ldr	r3, [pc, #16]	; (80027cc <SystemInit+0x28>)
 80027ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027be:	609a      	str	r2, [r3, #8]
#endif
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027d6:	f107 0308 	add.w	r3, r7, #8
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e4:	463b      	mov	r3, r7
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80027ec:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <MX_TIM2_Init+0x94>)
 80027ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <MX_TIM2_Init+0x94>)
 80027f6:	2263      	movs	r2, #99	; 0x63
 80027f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027fa:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <MX_TIM2_Init+0x94>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 840-1;
 8002800:	4b18      	ldr	r3, [pc, #96]	; (8002864 <MX_TIM2_Init+0x94>)
 8002802:	f240 3247 	movw	r2, #839	; 0x347
 8002806:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002808:	4b16      	ldr	r3, [pc, #88]	; (8002864 <MX_TIM2_Init+0x94>)
 800280a:	2200      	movs	r2, #0
 800280c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <MX_TIM2_Init+0x94>)
 8002810:	2200      	movs	r2, #0
 8002812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002814:	4813      	ldr	r0, [pc, #76]	; (8002864 <MX_TIM2_Init+0x94>)
 8002816:	f006 f975 	bl	8008b04 <HAL_TIM_Base_Init>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002820:	f7ff fcc4 	bl	80021ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002828:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800282a:	f107 0308 	add.w	r3, r7, #8
 800282e:	4619      	mov	r1, r3
 8002830:	480c      	ldr	r0, [pc, #48]	; (8002864 <MX_TIM2_Init+0x94>)
 8002832:	f006 fabe 	bl	8008db2 <HAL_TIM_ConfigClockSource>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800283c:	f7ff fcb6 	bl	80021ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002840:	2300      	movs	r3, #0
 8002842:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002844:	2300      	movs	r3, #0
 8002846:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002848:	463b      	mov	r3, r7
 800284a:	4619      	mov	r1, r3
 800284c:	4805      	ldr	r0, [pc, #20]	; (8002864 <MX_TIM2_Init+0x94>)
 800284e:	f006 fcc9 	bl	80091e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002858:	f7ff fca8 	bl	80021ac <Error_Handler>
  }

}
 800285c:	bf00      	nop
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	200007fc 	.word	0x200007fc

08002868 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800286e:	f107 0308 	add.w	r3, r7, #8
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	605a      	str	r2, [r3, #4]
 8002878:	609a      	str	r2, [r3, #8]
 800287a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800287c:	463b      	mov	r3, r7
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002884:	4b1c      	ldr	r3, [pc, #112]	; (80028f8 <MX_TIM3_Init+0x90>)
 8002886:	4a1d      	ldr	r2, [pc, #116]	; (80028fc <MX_TIM3_Init+0x94>)
 8002888:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 119-1;
 800288a:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <MX_TIM3_Init+0x90>)
 800288c:	2276      	movs	r2, #118	; 0x76
 800288e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <MX_TIM3_Init+0x90>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16-1;
 8002896:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <MX_TIM3_Init+0x90>)
 8002898:	220f      	movs	r2, #15
 800289a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800289c:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <MX_TIM3_Init+0x90>)
 800289e:	2200      	movs	r2, #0
 80028a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <MX_TIM3_Init+0x90>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028a8:	4813      	ldr	r0, [pc, #76]	; (80028f8 <MX_TIM3_Init+0x90>)
 80028aa:	f006 f92b 	bl	8008b04 <HAL_TIM_Base_Init>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80028b4:	f7ff fc7a 	bl	80021ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028be:	f107 0308 	add.w	r3, r7, #8
 80028c2:	4619      	mov	r1, r3
 80028c4:	480c      	ldr	r0, [pc, #48]	; (80028f8 <MX_TIM3_Init+0x90>)
 80028c6:	f006 fa74 	bl	8008db2 <HAL_TIM_ConfigClockSource>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80028d0:	f7ff fc6c 	bl	80021ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028d4:	2300      	movs	r3, #0
 80028d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d8:	2300      	movs	r3, #0
 80028da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028dc:	463b      	mov	r3, r7
 80028de:	4619      	mov	r1, r3
 80028e0:	4805      	ldr	r0, [pc, #20]	; (80028f8 <MX_TIM3_Init+0x90>)
 80028e2:	f006 fc7f 	bl	80091e4 <HAL_TIMEx_MasterConfigSynchronization>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80028ec:	f7ff fc5e 	bl	80021ac <Error_Handler>
  }

}
 80028f0:	bf00      	nop
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	200007bc 	.word	0x200007bc
 80028fc:	40000400 	.word	0x40000400

08002900 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002910:	d116      	bne.n	8002940 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	4b1a      	ldr	r3, [pc, #104]	; (8002980 <HAL_TIM_Base_MspInit+0x80>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	4a19      	ldr	r2, [pc, #100]	; (8002980 <HAL_TIM_Base_MspInit+0x80>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6413      	str	r3, [r2, #64]	; 0x40
 8002922:	4b17      	ldr	r3, [pc, #92]	; (8002980 <HAL_TIM_Base_MspInit+0x80>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	2100      	movs	r1, #0
 8002932:	201c      	movs	r0, #28
 8002934:	f000 ff85 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002938:	201c      	movs	r0, #28
 800293a:	f000 ff9e 	bl	800387a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800293e:	e01a      	b.n	8002976 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM3)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0f      	ldr	r2, [pc, #60]	; (8002984 <HAL_TIM_Base_MspInit+0x84>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d115      	bne.n	8002976 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <HAL_TIM_Base_MspInit+0x80>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <HAL_TIM_Base_MspInit+0x80>)
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	6413      	str	r3, [r2, #64]	; 0x40
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HAL_TIM_Base_MspInit+0x80>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002966:	2200      	movs	r2, #0
 8002968:	2100      	movs	r1, #0
 800296a:	201d      	movs	r0, #29
 800296c:	f000 ff69 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002970:	201d      	movs	r0, #29
 8002972:	f000 ff82 	bl	800387a <HAL_NVIC_EnableIRQ>
}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800
 8002984:	40000400 	.word	0x40000400

08002988 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800298c:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <MX_USART3_UART_Init+0x4c>)
 800298e:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <MX_USART3_UART_Init+0x50>)
 8002990:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002992:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <MX_USART3_UART_Init+0x4c>)
 8002994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002998:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800299a:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <MX_USART3_UART_Init+0x4c>)
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <MX_USART3_UART_Init+0x4c>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <MX_USART3_UART_Init+0x4c>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029ac:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <MX_USART3_UART_Init+0x4c>)
 80029ae:	220c      	movs	r2, #12
 80029b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <MX_USART3_UART_Init+0x4c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029b8:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <MX_USART3_UART_Init+0x4c>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029be:	4805      	ldr	r0, [pc, #20]	; (80029d4 <MX_USART3_UART_Init+0x4c>)
 80029c0:	f006 fca0 	bl	8009304 <HAL_UART_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80029ca:	f7ff fbef 	bl	80021ac <Error_Handler>
  }

}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	2000083c 	.word	0x2000083c
 80029d8:	40004800 	.word	0x40004800

080029dc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 80029e0:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <MX_USART6_UART_Init+0x4c>)
 80029e2:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <MX_USART6_UART_Init+0x50>)
 80029e4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80029e6:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <MX_USART6_UART_Init+0x4c>)
 80029e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029ec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80029ee:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <MX_USART6_UART_Init+0x4c>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80029f4:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <MX_USART6_UART_Init+0x4c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <MX_USART6_UART_Init+0x4c>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002a00:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <MX_USART6_UART_Init+0x4c>)
 8002a02:	220c      	movs	r2, #12
 8002a04:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <MX_USART6_UART_Init+0x4c>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <MX_USART6_UART_Init+0x4c>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002a12:	4805      	ldr	r0, [pc, #20]	; (8002a28 <MX_USART6_UART_Init+0x4c>)
 8002a14:	f006 fc76 	bl	8009304 <HAL_UART_Init>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002a1e:	f7ff fbc5 	bl	80021ac <Error_Handler>
  }

}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	2000087c 	.word	0x2000087c
 8002a2c:	40011400 	.word	0x40011400

08002a30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08c      	sub	sp, #48	; 0x30
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	f107 031c 	add.w	r3, r7, #28
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a32      	ldr	r2, [pc, #200]	; (8002b18 <HAL_UART_MspInit+0xe8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d12d      	bne.n	8002aae <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	4b31      	ldr	r3, [pc, #196]	; (8002b1c <HAL_UART_MspInit+0xec>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	4a30      	ldr	r2, [pc, #192]	; (8002b1c <HAL_UART_MspInit+0xec>)
 8002a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a60:	6413      	str	r3, [r2, #64]	; 0x40
 8002a62:	4b2e      	ldr	r3, [pc, #184]	; (8002b1c <HAL_UART_MspInit+0xec>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a6a:	61bb      	str	r3, [r7, #24]
 8002a6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	4b2a      	ldr	r3, [pc, #168]	; (8002b1c <HAL_UART_MspInit+0xec>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a29      	ldr	r2, [pc, #164]	; (8002b1c <HAL_UART_MspInit+0xec>)
 8002a78:	f043 0302 	orr.w	r3, r3, #2
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7e:	4b27      	ldr	r3, [pc, #156]	; (8002b1c <HAL_UART_MspInit+0xec>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a90:	2302      	movs	r3, #2
 8002a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a9c:	2307      	movs	r3, #7
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa0:	f107 031c 	add.w	r3, r7, #28
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	481e      	ldr	r0, [pc, #120]	; (8002b20 <HAL_UART_MspInit+0xf0>)
 8002aa8:	f001 f83a 	bl	8003b20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002aac:	e030      	b.n	8002b10 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1c      	ldr	r2, [pc, #112]	; (8002b24 <HAL_UART_MspInit+0xf4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d12b      	bne.n	8002b10 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <HAL_UART_MspInit+0xec>)
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac0:	4a16      	ldr	r2, [pc, #88]	; (8002b1c <HAL_UART_MspInit+0xec>)
 8002ac2:	f043 0320 	orr.w	r3, r3, #32
 8002ac6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac8:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <HAL_UART_MspInit+0xec>)
 8002aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <HAL_UART_MspInit+0xec>)
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	4a0f      	ldr	r2, [pc, #60]	; (8002b1c <HAL_UART_MspInit+0xec>)
 8002ade:	f043 0304 	orr.w	r3, r3, #4
 8002ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae4:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <HAL_UART_MspInit+0xec>)
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MIDI_TX_Pin|MIDI_RX_Pin;
 8002af0:	23c0      	movs	r3, #192	; 0xc0
 8002af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af4:	2302      	movs	r3, #2
 8002af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afc:	2303      	movs	r3, #3
 8002afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b00:	2308      	movs	r3, #8
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b04:	f107 031c 	add.w	r3, r7, #28
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4807      	ldr	r0, [pc, #28]	; (8002b28 <HAL_UART_MspInit+0xf8>)
 8002b0c:	f001 f808 	bl	8003b20 <HAL_GPIO_Init>
}
 8002b10:	bf00      	nop
 8002b12:	3730      	adds	r7, #48	; 0x30
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40004800 	.word	0x40004800
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40020400 	.word	0x40020400
 8002b24:	40011400 	.word	0x40011400
 8002b28:	40020800 	.word	0x40020800

08002b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b32:	e003      	b.n	8002b3c <LoopCopyDataInit>

08002b34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b3a:	3104      	adds	r1, #4

08002b3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b3c:	480b      	ldr	r0, [pc, #44]	; (8002b6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b44:	d3f6      	bcc.n	8002b34 <CopyDataInit>
  ldr  r2, =_sbss
 8002b46:	4a0b      	ldr	r2, [pc, #44]	; (8002b74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b48:	e002      	b.n	8002b50 <LoopFillZerobss>

08002b4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b4c:	f842 3b04 	str.w	r3, [r2], #4

08002b50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b54:	d3f9      	bcc.n	8002b4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b56:	f7ff fe25 	bl	80027a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b5a:	f00a fcff 	bl	800d55c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b5e:	f7fe fb9f 	bl	80012a0 <main>
  bx  lr    
 8002b62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b68:	08041690 	.word	0x08041690
  ldr  r0, =_sdata
 8002b6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b70:	200002d8 	.word	0x200002d8
  ldr  r2, =_sbss
 8002b74:	200002d8 	.word	0x200002d8
  ldr  r3, = _ebss
 8002b78:	200012dc 	.word	0x200012dc

08002b7c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b7c:	e7fe      	b.n	8002b7c <CAN1_RX0_IRQHandler>
	...

08002b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b84:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <HAL_Init+0x40>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <HAL_Init+0x40>)
 8002b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_Init+0x40>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <HAL_Init+0x40>)
 8002b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_Init+0x40>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a07      	ldr	r2, [pc, #28]	; (8002bc0 <HAL_Init+0x40>)
 8002ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba8:	2003      	movs	r0, #3
 8002baa:	f000 fe3f 	bl	800382c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f000 f808 	bl	8002bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb4:	f7ff fd24 	bl	8002600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023c00 	.word	0x40023c00

08002bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bcc:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_InitTick+0x54>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_InitTick+0x58>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 fe65 	bl	80038b2 <HAL_SYSTICK_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00e      	b.n	8002c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b0f      	cmp	r3, #15
 8002bf6:	d80a      	bhi.n	8002c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c00:	f000 fe1f 	bl	8003842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c04:	4a06      	ldr	r2, [pc, #24]	; (8002c20 <HAL_InitTick+0x5c>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000090 	.word	0x20000090
 8002c1c:	20000098 	.word	0x20000098
 8002c20:	20000094 	.word	0x20000094

08002c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_IncTick+0x20>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_IncTick+0x24>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4413      	add	r3, r2
 8002c34:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <HAL_IncTick+0x24>)
 8002c36:	6013      	str	r3, [r2, #0]
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000098 	.word	0x20000098
 8002c48:	200008bc 	.word	0x200008bc

08002c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <HAL_GetTick+0x14>)
 8002c52:	681b      	ldr	r3, [r3, #0]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	200008bc 	.word	0x200008bc

08002c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c6c:	f7ff ffee 	bl	8002c4c <HAL_GetTick>
 8002c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c7c:	d005      	beq.n	8002c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c7e:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HAL_Delay+0x40>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4413      	add	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c8a:	bf00      	nop
 8002c8c:	f7ff ffde 	bl	8002c4c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d8f7      	bhi.n	8002c8c <HAL_Delay+0x28>
  {
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000098 	.word	0x20000098

08002ca8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e033      	b.n	8002d26 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d109      	bne.n	8002cda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fd fefc 	bl	8000ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d118      	bne.n	8002d18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cee:	f023 0302 	bic.w	r3, r3, #2
 8002cf2:	f043 0202 	orr.w	r2, r3, #2
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fb9e 	bl	800343c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f023 0303 	bic.w	r3, r3, #3
 8002d0e:	f043 0201 	orr.w	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40
 8002d16:	e001      	b.n	8002d1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e022      	b.n	8002d8a <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	f043 0202 	orr.w	r2, r3, #2
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0201 	bic.w	r2, r2, #1
 8002d5e:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d108      	bne.n	8002d80 <HAL_ADC_DeInit+0x52>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fd ff10 	bl	8000b94 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_ADC_Start_IT+0x1a>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e0b0      	b.n	8002f10 <HAL_ADC_Start_IT+0x17c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d018      	beq.n	8002df6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002dd4:	4b51      	ldr	r3, [pc, #324]	; (8002f1c <HAL_ADC_Start_IT+0x188>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a51      	ldr	r2, [pc, #324]	; (8002f20 <HAL_ADC_Start_IT+0x18c>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	0c9a      	lsrs	r2, r3, #18
 8002de0:	4613      	mov	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002de8:	e002      	b.n	8002df0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f9      	bne.n	8002dea <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	f040 8084 	bne.w	8002f0e <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e0e:	f023 0301 	bic.w	r3, r3, #1
 8002e12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d007      	beq.n	8002e38 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e44:	d106      	bne.n	8002e54 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	f023 0206 	bic.w	r2, r3, #6
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	645a      	str	r2, [r3, #68]	; 0x44
 8002e52:	e002      	b.n	8002e5a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e62:	4b30      	ldr	r3, [pc, #192]	; (8002f24 <HAL_ADC_Start_IT+0x190>)
 8002e64:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002e6e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e7e:	f043 0320 	orr.w	r3, r3, #32
 8002e82:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d12a      	bne.n	8002ee6 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a24      	ldr	r2, [pc, #144]	; (8002f28 <HAL_ADC_Start_IT+0x194>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d015      	beq.n	8002ec6 <HAL_ADC_Start_IT+0x132>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a23      	ldr	r2, [pc, #140]	; (8002f2c <HAL_ADC_Start_IT+0x198>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d105      	bne.n	8002eb0 <HAL_ADC_Start_IT+0x11c>
 8002ea4:	4b1f      	ldr	r3, [pc, #124]	; (8002f24 <HAL_ADC_Start_IT+0x190>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1e      	ldr	r2, [pc, #120]	; (8002f30 <HAL_ADC_Start_IT+0x19c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d129      	bne.n	8002f0e <HAL_ADC_Start_IT+0x17a>
 8002eba:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <HAL_ADC_Start_IT+0x190>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	2b0f      	cmp	r3, #15
 8002ec4:	d823      	bhi.n	8002f0e <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d11c      	bne.n	8002f0e <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	e013      	b.n	8002f0e <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a0f      	ldr	r2, [pc, #60]	; (8002f28 <HAL_ADC_Start_IT+0x194>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d10e      	bne.n	8002f0e <HAL_ADC_Start_IT+0x17a>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d107      	bne.n	8002f0e <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f0c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	20000090 	.word	0x20000090
 8002f20:	431bde83 	.word	0x431bde83
 8002f24:	40012300 	.word	0x40012300
 8002f28:	40012000 	.word	0x40012000
 8002f2c:	40012100 	.word	0x40012100
 8002f30:	40012200 	.word	0x40012200

08002f34 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	2300      	movs	r3, #0
 8002f42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	bf0c      	ite	eq
 8002f52:	2301      	moveq	r3, #1
 8002f54:	2300      	movne	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d049      	beq.n	800300a <HAL_ADC_IRQHandler+0xd6>
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d046      	beq.n	800300a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d105      	bne.n	8002f94 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d12b      	bne.n	8002ffa <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d127      	bne.n	8002ffa <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d006      	beq.n	8002fc6 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d119      	bne.n	8002ffa <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0220 	bic.w	r2, r2, #32
 8002fd4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d105      	bne.n	8002ffa <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f043 0201 	orr.w	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff f8c6 	bl	800218c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0212 	mvn.w	r2, #18
 8003008:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b04      	cmp	r3, #4
 8003016:	bf0c      	ite	eq
 8003018:	2301      	moveq	r3, #1
 800301a:	2300      	movne	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302a:	2b80      	cmp	r3, #128	; 0x80
 800302c:	bf0c      	ite	eq
 800302e:	2301      	moveq	r3, #1
 8003030:	2300      	movne	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d057      	beq.n	80030ec <HAL_ADC_IRQHandler+0x1b8>
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d054      	beq.n	80030ec <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	2b00      	cmp	r3, #0
 800304c:	d105      	bne.n	800305a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d139      	bne.n	80030dc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003072:	2b00      	cmp	r3, #0
 8003074:	d006      	beq.n	8003084 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003080:	2b00      	cmp	r3, #0
 8003082:	d12b      	bne.n	80030dc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800308e:	2b00      	cmp	r3, #0
 8003090:	d124      	bne.n	80030dc <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800309c:	2b00      	cmp	r3, #0
 800309e:	d11d      	bne.n	80030dc <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d119      	bne.n	80030dc <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d105      	bne.n	80030dc <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	f043 0201 	orr.w	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 faa9 	bl	8003634 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f06f 020c 	mvn.w	r2, #12
 80030ea:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	bf0c      	ite	eq
 80030fa:	2301      	moveq	r3, #1
 80030fc:	2300      	movne	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d017      	beq.n	800314e <HAL_ADC_IRQHandler+0x21a>
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d014      	beq.n	800314e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b01      	cmp	r3, #1
 8003130:	d10d      	bne.n	800314e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f846 	bl	80031d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0201 	mvn.w	r2, #1
 800314c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b20      	cmp	r3, #32
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800316e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d015      	beq.n	80031ae <HAL_ADC_IRQHandler+0x27a>
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d012      	beq.n	80031ae <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318c:	f043 0202 	orr.w	r2, r3, #2
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0220 	mvn.w	r2, #32
 800319c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f820 	bl	80031e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0220 	mvn.w	r2, #32
 80031ac:	601a      	str	r2, [r3, #0]
  }
}
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x1c>
 8003210:	2302      	movs	r3, #2
 8003212:	e105      	b.n	8003420 <HAL_ADC_ConfigChannel+0x228>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b09      	cmp	r3, #9
 8003222:	d925      	bls.n	8003270 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68d9      	ldr	r1, [r3, #12]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	b29b      	uxth	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	4613      	mov	r3, r2
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	4413      	add	r3, r2
 8003238:	3b1e      	subs	r3, #30
 800323a:	2207      	movs	r2, #7
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43da      	mvns	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	400a      	ands	r2, r1
 8003248:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68d9      	ldr	r1, [r3, #12]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	b29b      	uxth	r3, r3
 800325a:	4618      	mov	r0, r3
 800325c:	4603      	mov	r3, r0
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4403      	add	r3, r0
 8003262:	3b1e      	subs	r3, #30
 8003264:	409a      	lsls	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	e022      	b.n	80032b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6919      	ldr	r1, [r3, #16]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	b29b      	uxth	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	4613      	mov	r3, r2
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	4413      	add	r3, r2
 8003284:	2207      	movs	r2, #7
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43da      	mvns	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	400a      	ands	r2, r1
 8003292:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6919      	ldr	r1, [r3, #16]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	4618      	mov	r0, r3
 80032a6:	4603      	mov	r3, r0
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4403      	add	r3, r0
 80032ac:	409a      	lsls	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b06      	cmp	r3, #6
 80032bc:	d824      	bhi.n	8003308 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	3b05      	subs	r3, #5
 80032d0:	221f      	movs	r2, #31
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43da      	mvns	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	400a      	ands	r2, r1
 80032de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	4618      	mov	r0, r3
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	3b05      	subs	r3, #5
 80032fa:	fa00 f203 	lsl.w	r2, r0, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	635a      	str	r2, [r3, #52]	; 0x34
 8003306:	e04c      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b0c      	cmp	r3, #12
 800330e:	d824      	bhi.n	800335a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	3b23      	subs	r3, #35	; 0x23
 8003322:	221f      	movs	r2, #31
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43da      	mvns	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	400a      	ands	r2, r1
 8003330:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	b29b      	uxth	r3, r3
 800333e:	4618      	mov	r0, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	3b23      	subs	r3, #35	; 0x23
 800334c:	fa00 f203 	lsl.w	r2, r0, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
 8003358:	e023      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	3b41      	subs	r3, #65	; 0x41
 800336c:	221f      	movs	r2, #31
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43da      	mvns	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	400a      	ands	r2, r1
 800337a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	4618      	mov	r0, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	3b41      	subs	r3, #65	; 0x41
 8003396:	fa00 f203 	lsl.w	r2, r0, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033a2:	4b22      	ldr	r3, [pc, #136]	; (800342c <HAL_ADC_ConfigChannel+0x234>)
 80033a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a21      	ldr	r2, [pc, #132]	; (8003430 <HAL_ADC_ConfigChannel+0x238>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d109      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x1cc>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b12      	cmp	r3, #18
 80033b6:	d105      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a19      	ldr	r2, [pc, #100]	; (8003430 <HAL_ADC_ConfigChannel+0x238>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d123      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x21e>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b10      	cmp	r3, #16
 80033d4:	d003      	beq.n	80033de <HAL_ADC_ConfigChannel+0x1e6>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b11      	cmp	r3, #17
 80033dc:	d11b      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b10      	cmp	r3, #16
 80033f0:	d111      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033f2:	4b10      	ldr	r3, [pc, #64]	; (8003434 <HAL_ADC_ConfigChannel+0x23c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a10      	ldr	r2, [pc, #64]	; (8003438 <HAL_ADC_ConfigChannel+0x240>)
 80033f8:	fba2 2303 	umull	r2, r3, r2, r3
 80033fc:	0c9a      	lsrs	r2, r3, #18
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003408:	e002      	b.n	8003410 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	3b01      	subs	r3, #1
 800340e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f9      	bne.n	800340a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	40012300 	.word	0x40012300
 8003430:	40012000 	.word	0x40012000
 8003434:	20000090 	.word	0x20000090
 8003438:	431bde83 	.word	0x431bde83

0800343c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003444:	4b79      	ldr	r3, [pc, #484]	; (800362c <ADC_Init+0x1f0>)
 8003446:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	431a      	orrs	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003470:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6859      	ldr	r1, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	021a      	lsls	r2, r3, #8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003494:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6899      	ldr	r1, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	4a58      	ldr	r2, [pc, #352]	; (8003630 <ADC_Init+0x1f4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d022      	beq.n	800351a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6899      	ldr	r1, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003504:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6899      	ldr	r1, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	609a      	str	r2, [r3, #8]
 8003518:	e00f      	b.n	800353a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003528:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003538:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0202 	bic.w	r2, r2, #2
 8003548:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6899      	ldr	r1, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	7e1b      	ldrb	r3, [r3, #24]
 8003554:	005a      	lsls	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d01b      	beq.n	80035a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003576:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003586:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6859      	ldr	r1, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	3b01      	subs	r3, #1
 8003594:	035a      	lsls	r2, r3, #13
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	e007      	b.n	80035b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	051a      	lsls	r2, r3, #20
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6899      	ldr	r1, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035f2:	025a      	lsls	r2, r3, #9
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800360a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6899      	ldr	r1, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	029a      	lsls	r2, r3, #10
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	609a      	str	r2, [r3, #8]
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	40012300 	.word	0x40012300
 8003630:	0f000001 	.word	0x0f000001

08003634 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003658:	4b0c      	ldr	r3, [pc, #48]	; (800368c <__NVIC_SetPriorityGrouping+0x44>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003664:	4013      	ands	r3, r2
 8003666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800367a:	4a04      	ldr	r2, [pc, #16]	; (800368c <__NVIC_SetPriorityGrouping+0x44>)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	60d3      	str	r3, [r2, #12]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	e000ed00 	.word	0xe000ed00

08003690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003694:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	0a1b      	lsrs	r3, r3, #8
 800369a:	f003 0307 	and.w	r3, r3, #7
}
 800369e:	4618      	mov	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	db0b      	blt.n	80036d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	f003 021f 	and.w	r2, r3, #31
 80036c4:	4907      	ldr	r1, [pc, #28]	; (80036e4 <__NVIC_EnableIRQ+0x38>)
 80036c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2001      	movs	r0, #1
 80036ce:	fa00 f202 	lsl.w	r2, r0, r2
 80036d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	e000e100 	.word	0xe000e100

080036e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	db10      	blt.n	800371c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	f003 021f 	and.w	r2, r3, #31
 8003700:	4909      	ldr	r1, [pc, #36]	; (8003728 <__NVIC_DisableIRQ+0x40>)
 8003702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	2001      	movs	r0, #1
 800370a:	fa00 f202 	lsl.w	r2, r0, r2
 800370e:	3320      	adds	r3, #32
 8003710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003714:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003718:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	e000e100 	.word	0xe000e100

0800372c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	6039      	str	r1, [r7, #0]
 8003736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373c:	2b00      	cmp	r3, #0
 800373e:	db0a      	blt.n	8003756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	b2da      	uxtb	r2, r3
 8003744:	490c      	ldr	r1, [pc, #48]	; (8003778 <__NVIC_SetPriority+0x4c>)
 8003746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374a:	0112      	lsls	r2, r2, #4
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	440b      	add	r3, r1
 8003750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003754:	e00a      	b.n	800376c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4908      	ldr	r1, [pc, #32]	; (800377c <__NVIC_SetPriority+0x50>)
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	3b04      	subs	r3, #4
 8003764:	0112      	lsls	r2, r2, #4
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	440b      	add	r3, r1
 800376a:	761a      	strb	r2, [r3, #24]
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	e000e100 	.word	0xe000e100
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003780:	b480      	push	{r7}
 8003782:	b089      	sub	sp, #36	; 0x24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f1c3 0307 	rsb	r3, r3, #7
 800379a:	2b04      	cmp	r3, #4
 800379c:	bf28      	it	cs
 800379e:	2304      	movcs	r3, #4
 80037a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d902      	bls.n	80037b0 <NVIC_EncodePriority+0x30>
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3b03      	subs	r3, #3
 80037ae:	e000      	b.n	80037b2 <NVIC_EncodePriority+0x32>
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43da      	mvns	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	401a      	ands	r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	fa01 f303 	lsl.w	r3, r1, r3
 80037d2:	43d9      	mvns	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d8:	4313      	orrs	r3, r2
         );
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3724      	adds	r7, #36	; 0x24
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037f8:	d301      	bcc.n	80037fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037fa:	2301      	movs	r3, #1
 80037fc:	e00f      	b.n	800381e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037fe:	4a0a      	ldr	r2, [pc, #40]	; (8003828 <SysTick_Config+0x40>)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3b01      	subs	r3, #1
 8003804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003806:	210f      	movs	r1, #15
 8003808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800380c:	f7ff ff8e 	bl	800372c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <SysTick_Config+0x40>)
 8003812:	2200      	movs	r2, #0
 8003814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003816:	4b04      	ldr	r3, [pc, #16]	; (8003828 <SysTick_Config+0x40>)
 8003818:	2207      	movs	r2, #7
 800381a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	e000e010 	.word	0xe000e010

0800382c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ff07 	bl	8003648 <__NVIC_SetPriorityGrouping>
}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003842:	b580      	push	{r7, lr}
 8003844:	b086      	sub	sp, #24
 8003846:	af00      	add	r7, sp, #0
 8003848:	4603      	mov	r3, r0
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
 800384e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003854:	f7ff ff1c 	bl	8003690 <__NVIC_GetPriorityGrouping>
 8003858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	6978      	ldr	r0, [r7, #20]
 8003860:	f7ff ff8e 	bl	8003780 <NVIC_EncodePriority>
 8003864:	4602      	mov	r2, r0
 8003866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386a:	4611      	mov	r1, r2
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff ff5d 	bl	800372c <__NVIC_SetPriority>
}
 8003872:	bf00      	nop
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
 8003880:	4603      	mov	r3, r0
 8003882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff ff0f 	bl	80036ac <__NVIC_EnableIRQ>
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b082      	sub	sp, #8
 800389a:	af00      	add	r7, sp, #0
 800389c:	4603      	mov	r3, r0
 800389e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80038a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff ff1f 	bl	80036e8 <__NVIC_DisableIRQ>
}
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff ff94 	bl	80037e8 <SysTick_Config>
 80038c0:	4603      	mov	r3, r0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e014      	b.n	8003906 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	791b      	ldrb	r3, [r3, #4]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d105      	bne.n	80038f2 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7fd f9ab 	bl	8000c48 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2202      	movs	r2, #2
 80038f6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800390e:	b480      	push	{r7}
 8003910:	b085      	sub	sp, #20
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	2300      	movs	r3, #0
 800391e:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	795b      	ldrb	r3, [r3, #5]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_DAC_Start+0x1e>
 8003928:	2302      	movs	r3, #2
 800392a:	e050      	b.n	80039ce <HAL_DAC_Start+0xc0>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2202      	movs	r2, #2
 8003936:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6819      	ldr	r1, [r3, #0]
 800393e:	2201      	movs	r2, #1
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	409a      	lsls	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d11a      	bne.n	8003988 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003968:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d127      	bne.n	80039c0 <HAL_DAC_Start+0xb2>
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b38      	cmp	r3, #56	; 0x38
 8003974:	d124      	bne.n	80039c0 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0201 	orr.w	r2, r2, #1
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	e01b      	b.n	80039c0 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003992:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800399e:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039a6:	d10b      	bne.n	80039c0 <HAL_DAC_Start+0xb2>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80039ae:	d107      	bne.n	80039c0 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0202 	orr.w	r2, r2, #2
 80039be:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80039da:	b480      	push	{r7}
 80039dc:	b087      	sub	sp, #28
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	795b      	ldrb	r3, [r3, #5]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_DAC_ConfigChannel+0x20>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e036      	b.n	8003a68 <HAL_DAC_ConfigChannel+0x8e>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2202      	movs	r2, #2
 8003a04:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003a0e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6819      	ldr	r1, [r3, #0]
 8003a48:	22c0      	movs	r2, #192	; 0xc0
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43da      	mvns	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	400a      	ands	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d105      	bne.n	8003a9e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4413      	add	r3, r2
 8003a98:	3308      	adds	r3, #8
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	e004      	b.n	8003aa8 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3314      	adds	r3, #20
 8003aa6:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d004      	beq.n	8003adc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2280      	movs	r2, #128	; 0x80
 8003ad6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e00c      	b.n	8003af6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2205      	movs	r2, #5
 8003ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b10:	b2db      	uxtb	r3, r3
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b089      	sub	sp, #36	; 0x24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
 8003b3a:	e16b      	b.n	8003e14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	f040 815a 	bne.w	8003e0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d00b      	beq.n	8003b7a <HAL_GPIO_Init+0x5a>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d007      	beq.n	8003b7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b6e:	2b11      	cmp	r3, #17
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b12      	cmp	r3, #18
 8003b78:	d130      	bne.n	8003bdc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	2203      	movs	r2, #3
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	f003 0201 	and.w	r2, r3, #1
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	2203      	movs	r2, #3
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d003      	beq.n	8003c1c <HAL_GPIO_Init+0xfc>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b12      	cmp	r3, #18
 8003c1a:	d123      	bne.n	8003c64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	08da      	lsrs	r2, r3, #3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3208      	adds	r2, #8
 8003c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	220f      	movs	r2, #15
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	08da      	lsrs	r2, r3, #3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3208      	adds	r2, #8
 8003c5e:	69b9      	ldr	r1, [r7, #24]
 8003c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	2203      	movs	r2, #3
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 0203 	and.w	r2, r3, #3
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80b4 	beq.w	8003e0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	4b5f      	ldr	r3, [pc, #380]	; (8003e28 <HAL_GPIO_Init+0x308>)
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	4a5e      	ldr	r2, [pc, #376]	; (8003e28 <HAL_GPIO_Init+0x308>)
 8003cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cb6:	4b5c      	ldr	r3, [pc, #368]	; (8003e28 <HAL_GPIO_Init+0x308>)
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cc2:	4a5a      	ldr	r2, [pc, #360]	; (8003e2c <HAL_GPIO_Init+0x30c>)
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	089b      	lsrs	r3, r3, #2
 8003cc8:	3302      	adds	r3, #2
 8003cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	220f      	movs	r2, #15
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a51      	ldr	r2, [pc, #324]	; (8003e30 <HAL_GPIO_Init+0x310>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d02b      	beq.n	8003d46 <HAL_GPIO_Init+0x226>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a50      	ldr	r2, [pc, #320]	; (8003e34 <HAL_GPIO_Init+0x314>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d025      	beq.n	8003d42 <HAL_GPIO_Init+0x222>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a4f      	ldr	r2, [pc, #316]	; (8003e38 <HAL_GPIO_Init+0x318>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d01f      	beq.n	8003d3e <HAL_GPIO_Init+0x21e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a4e      	ldr	r2, [pc, #312]	; (8003e3c <HAL_GPIO_Init+0x31c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d019      	beq.n	8003d3a <HAL_GPIO_Init+0x21a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a4d      	ldr	r2, [pc, #308]	; (8003e40 <HAL_GPIO_Init+0x320>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d013      	beq.n	8003d36 <HAL_GPIO_Init+0x216>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a4c      	ldr	r2, [pc, #304]	; (8003e44 <HAL_GPIO_Init+0x324>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00d      	beq.n	8003d32 <HAL_GPIO_Init+0x212>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a4b      	ldr	r2, [pc, #300]	; (8003e48 <HAL_GPIO_Init+0x328>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d007      	beq.n	8003d2e <HAL_GPIO_Init+0x20e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a4a      	ldr	r2, [pc, #296]	; (8003e4c <HAL_GPIO_Init+0x32c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d101      	bne.n	8003d2a <HAL_GPIO_Init+0x20a>
 8003d26:	2307      	movs	r3, #7
 8003d28:	e00e      	b.n	8003d48 <HAL_GPIO_Init+0x228>
 8003d2a:	2308      	movs	r3, #8
 8003d2c:	e00c      	b.n	8003d48 <HAL_GPIO_Init+0x228>
 8003d2e:	2306      	movs	r3, #6
 8003d30:	e00a      	b.n	8003d48 <HAL_GPIO_Init+0x228>
 8003d32:	2305      	movs	r3, #5
 8003d34:	e008      	b.n	8003d48 <HAL_GPIO_Init+0x228>
 8003d36:	2304      	movs	r3, #4
 8003d38:	e006      	b.n	8003d48 <HAL_GPIO_Init+0x228>
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e004      	b.n	8003d48 <HAL_GPIO_Init+0x228>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e002      	b.n	8003d48 <HAL_GPIO_Init+0x228>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <HAL_GPIO_Init+0x228>
 8003d46:	2300      	movs	r3, #0
 8003d48:	69fa      	ldr	r2, [r7, #28]
 8003d4a:	f002 0203 	and.w	r2, r2, #3
 8003d4e:	0092      	lsls	r2, r2, #2
 8003d50:	4093      	lsls	r3, r2
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d58:	4934      	ldr	r1, [pc, #208]	; (8003e2c <HAL_GPIO_Init+0x30c>)
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	089b      	lsrs	r3, r3, #2
 8003d5e:	3302      	adds	r3, #2
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d66:	4b3a      	ldr	r3, [pc, #232]	; (8003e50 <HAL_GPIO_Init+0x330>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4013      	ands	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d8a:	4a31      	ldr	r2, [pc, #196]	; (8003e50 <HAL_GPIO_Init+0x330>)
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d90:	4b2f      	ldr	r3, [pc, #188]	; (8003e50 <HAL_GPIO_Init+0x330>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003db4:	4a26      	ldr	r2, [pc, #152]	; (8003e50 <HAL_GPIO_Init+0x330>)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dba:	4b25      	ldr	r3, [pc, #148]	; (8003e50 <HAL_GPIO_Init+0x330>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dde:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <HAL_GPIO_Init+0x330>)
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003de4:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <HAL_GPIO_Init+0x330>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	43db      	mvns	r3, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e08:	4a11      	ldr	r2, [pc, #68]	; (8003e50 <HAL_GPIO_Init+0x330>)
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	3301      	adds	r3, #1
 8003e12:	61fb      	str	r3, [r7, #28]
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	2b0f      	cmp	r3, #15
 8003e18:	f67f ae90 	bls.w	8003b3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	3724      	adds	r7, #36	; 0x24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	40013800 	.word	0x40013800
 8003e30:	40020000 	.word	0x40020000
 8003e34:	40020400 	.word	0x40020400
 8003e38:	40020800 	.word	0x40020800
 8003e3c:	40020c00 	.word	0x40020c00
 8003e40:	40021000 	.word	0x40021000
 8003e44:	40021400 	.word	0x40021400
 8003e48:	40021800 	.word	0x40021800
 8003e4c:	40021c00 	.word	0x40021c00
 8003e50:	40013c00 	.word	0x40013c00

08003e54 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	e0cd      	b.n	800400c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e70:	2201      	movs	r2, #1
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	f040 80bd 	bne.w	8004006 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003e8c:	4a64      	ldr	r2, [pc, #400]	; (8004020 <HAL_GPIO_DeInit+0x1cc>)
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	089b      	lsrs	r3, r3, #2
 8003e92:	3302      	adds	r3, #2
 8003e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e98:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	220f      	movs	r2, #15
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a5c      	ldr	r2, [pc, #368]	; (8004024 <HAL_GPIO_DeInit+0x1d0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d02b      	beq.n	8003f0e <HAL_GPIO_DeInit+0xba>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a5b      	ldr	r2, [pc, #364]	; (8004028 <HAL_GPIO_DeInit+0x1d4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d025      	beq.n	8003f0a <HAL_GPIO_DeInit+0xb6>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a5a      	ldr	r2, [pc, #360]	; (800402c <HAL_GPIO_DeInit+0x1d8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d01f      	beq.n	8003f06 <HAL_GPIO_DeInit+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a59      	ldr	r2, [pc, #356]	; (8004030 <HAL_GPIO_DeInit+0x1dc>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d019      	beq.n	8003f02 <HAL_GPIO_DeInit+0xae>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a58      	ldr	r2, [pc, #352]	; (8004034 <HAL_GPIO_DeInit+0x1e0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d013      	beq.n	8003efe <HAL_GPIO_DeInit+0xaa>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a57      	ldr	r2, [pc, #348]	; (8004038 <HAL_GPIO_DeInit+0x1e4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00d      	beq.n	8003efa <HAL_GPIO_DeInit+0xa6>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a56      	ldr	r2, [pc, #344]	; (800403c <HAL_GPIO_DeInit+0x1e8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d007      	beq.n	8003ef6 <HAL_GPIO_DeInit+0xa2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a55      	ldr	r2, [pc, #340]	; (8004040 <HAL_GPIO_DeInit+0x1ec>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d101      	bne.n	8003ef2 <HAL_GPIO_DeInit+0x9e>
 8003eee:	2307      	movs	r3, #7
 8003ef0:	e00e      	b.n	8003f10 <HAL_GPIO_DeInit+0xbc>
 8003ef2:	2308      	movs	r3, #8
 8003ef4:	e00c      	b.n	8003f10 <HAL_GPIO_DeInit+0xbc>
 8003ef6:	2306      	movs	r3, #6
 8003ef8:	e00a      	b.n	8003f10 <HAL_GPIO_DeInit+0xbc>
 8003efa:	2305      	movs	r3, #5
 8003efc:	e008      	b.n	8003f10 <HAL_GPIO_DeInit+0xbc>
 8003efe:	2304      	movs	r3, #4
 8003f00:	e006      	b.n	8003f10 <HAL_GPIO_DeInit+0xbc>
 8003f02:	2303      	movs	r3, #3
 8003f04:	e004      	b.n	8003f10 <HAL_GPIO_DeInit+0xbc>
 8003f06:	2302      	movs	r3, #2
 8003f08:	e002      	b.n	8003f10 <HAL_GPIO_DeInit+0xbc>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <HAL_GPIO_DeInit+0xbc>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	f002 0203 	and.w	r2, r2, #3
 8003f16:	0092      	lsls	r2, r2, #2
 8003f18:	4093      	lsls	r3, r2
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d132      	bne.n	8003f86 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003f20:	4b48      	ldr	r3, [pc, #288]	; (8004044 <HAL_GPIO_DeInit+0x1f0>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	43db      	mvns	r3, r3
 8003f28:	4946      	ldr	r1, [pc, #280]	; (8004044 <HAL_GPIO_DeInit+0x1f0>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003f2e:	4b45      	ldr	r3, [pc, #276]	; (8004044 <HAL_GPIO_DeInit+0x1f0>)
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	43db      	mvns	r3, r3
 8003f36:	4943      	ldr	r1, [pc, #268]	; (8004044 <HAL_GPIO_DeInit+0x1f0>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003f3c:	4b41      	ldr	r3, [pc, #260]	; (8004044 <HAL_GPIO_DeInit+0x1f0>)
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	43db      	mvns	r3, r3
 8003f44:	493f      	ldr	r1, [pc, #252]	; (8004044 <HAL_GPIO_DeInit+0x1f0>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003f4a:	4b3e      	ldr	r3, [pc, #248]	; (8004044 <HAL_GPIO_DeInit+0x1f0>)
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	43db      	mvns	r3, r3
 8003f52:	493c      	ldr	r1, [pc, #240]	; (8004044 <HAL_GPIO_DeInit+0x1f0>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	220f      	movs	r2, #15
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003f68:	4a2d      	ldr	r2, [pc, #180]	; (8004020 <HAL_GPIO_DeInit+0x1cc>)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	089b      	lsrs	r3, r3, #2
 8003f6e:	3302      	adds	r3, #2
 8003f70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	43da      	mvns	r2, r3
 8003f78:	4829      	ldr	r0, [pc, #164]	; (8004020 <HAL_GPIO_DeInit+0x1cc>)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	089b      	lsrs	r3, r3, #2
 8003f7e:	400a      	ands	r2, r1
 8003f80:	3302      	adds	r3, #2
 8003f82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	2103      	movs	r1, #3
 8003f90:	fa01 f303 	lsl.w	r3, r1, r3
 8003f94:	43db      	mvns	r3, r3
 8003f96:	401a      	ands	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	08da      	lsrs	r2, r3, #3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3208      	adds	r2, #8
 8003fa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	220f      	movs	r2, #15
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	08d2      	lsrs	r2, r2, #3
 8003fbc:	4019      	ands	r1, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3208      	adds	r2, #8
 8003fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	2103      	movs	r1, #3
 8003fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	401a      	ands	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	2103      	movs	r1, #3
 8003ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffe:	43db      	mvns	r3, r3
 8004000:	401a      	ands	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	3301      	adds	r3, #1
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2b0f      	cmp	r3, #15
 8004010:	f67f af2e 	bls.w	8003e70 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004014:	bf00      	nop
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	40013800 	.word	0x40013800
 8004024:	40020000 	.word	0x40020000
 8004028:	40020400 	.word	0x40020400
 800402c:	40020800 	.word	0x40020800
 8004030:	40020c00 	.word	0x40020c00
 8004034:	40021000 	.word	0x40021000
 8004038:	40021400 	.word	0x40021400
 800403c:	40021800 	.word	0x40021800
 8004040:	40021c00 	.word	0x40021c00
 8004044:	40013c00 	.word	0x40013c00

08004048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	807b      	strh	r3, [r7, #2]
 8004054:	4613      	mov	r3, r2
 8004056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004058:	787b      	ldrb	r3, [r7, #1]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800405e:	887a      	ldrh	r2, [r7, #2]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004064:	e003      	b.n	800406e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004066:	887b      	ldrh	r3, [r7, #2]
 8004068:	041a      	lsls	r2, r3, #16
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	619a      	str	r2, [r3, #24]
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
	...

0800407c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e11f      	b.n	80042ce <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fc febe 	bl	8000e24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2224      	movs	r2, #36	; 0x24
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040e0:	f003 fe74 	bl	8007dcc <HAL_RCC_GetPCLK1Freq>
 80040e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4a7b      	ldr	r2, [pc, #492]	; (80042d8 <HAL_I2C_Init+0x25c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d807      	bhi.n	8004100 <HAL_I2C_Init+0x84>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4a7a      	ldr	r2, [pc, #488]	; (80042dc <HAL_I2C_Init+0x260>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	bf94      	ite	ls
 80040f8:	2301      	movls	r3, #1
 80040fa:	2300      	movhi	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	e006      	b.n	800410e <HAL_I2C_Init+0x92>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4a77      	ldr	r2, [pc, #476]	; (80042e0 <HAL_I2C_Init+0x264>)
 8004104:	4293      	cmp	r3, r2
 8004106:	bf94      	ite	ls
 8004108:	2301      	movls	r3, #1
 800410a:	2300      	movhi	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e0db      	b.n	80042ce <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4a72      	ldr	r2, [pc, #456]	; (80042e4 <HAL_I2C_Init+0x268>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	0c9b      	lsrs	r3, r3, #18
 8004120:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	4a64      	ldr	r2, [pc, #400]	; (80042d8 <HAL_I2C_Init+0x25c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d802      	bhi.n	8004150 <HAL_I2C_Init+0xd4>
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	3301      	adds	r3, #1
 800414e:	e009      	b.n	8004164 <HAL_I2C_Init+0xe8>
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004156:	fb02 f303 	mul.w	r3, r2, r3
 800415a:	4a63      	ldr	r2, [pc, #396]	; (80042e8 <HAL_I2C_Init+0x26c>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	099b      	lsrs	r3, r3, #6
 8004162:	3301      	adds	r3, #1
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	430b      	orrs	r3, r1
 800416a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004176:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	4956      	ldr	r1, [pc, #344]	; (80042d8 <HAL_I2C_Init+0x25c>)
 8004180:	428b      	cmp	r3, r1
 8004182:	d80d      	bhi.n	80041a0 <HAL_I2C_Init+0x124>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	1e59      	subs	r1, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004192:	3301      	adds	r3, #1
 8004194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004198:	2b04      	cmp	r3, #4
 800419a:	bf38      	it	cc
 800419c:	2304      	movcc	r3, #4
 800419e:	e04f      	b.n	8004240 <HAL_I2C_Init+0x1c4>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d111      	bne.n	80041cc <HAL_I2C_Init+0x150>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	1e58      	subs	r0, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6859      	ldr	r1, [r3, #4]
 80041b0:	460b      	mov	r3, r1
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	440b      	add	r3, r1
 80041b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ba:	3301      	adds	r3, #1
 80041bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bf0c      	ite	eq
 80041c4:	2301      	moveq	r3, #1
 80041c6:	2300      	movne	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	e012      	b.n	80041f2 <HAL_I2C_Init+0x176>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	1e58      	subs	r0, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6859      	ldr	r1, [r3, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	0099      	lsls	r1, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	fbb0 f3f3 	udiv	r3, r0, r3
 80041e2:	3301      	adds	r3, #1
 80041e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	bf0c      	ite	eq
 80041ec:	2301      	moveq	r3, #1
 80041ee:	2300      	movne	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_I2C_Init+0x17e>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e022      	b.n	8004240 <HAL_I2C_Init+0x1c4>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10e      	bne.n	8004220 <HAL_I2C_Init+0x1a4>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1e58      	subs	r0, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6859      	ldr	r1, [r3, #4]
 800420a:	460b      	mov	r3, r1
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	440b      	add	r3, r1
 8004210:	fbb0 f3f3 	udiv	r3, r0, r3
 8004214:	3301      	adds	r3, #1
 8004216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800421a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800421e:	e00f      	b.n	8004240 <HAL_I2C_Init+0x1c4>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	1e58      	subs	r0, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6859      	ldr	r1, [r3, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	0099      	lsls	r1, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	fbb0 f3f3 	udiv	r3, r0, r3
 8004236:	3301      	adds	r3, #1
 8004238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800423c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	6809      	ldr	r1, [r1, #0]
 8004244:	4313      	orrs	r3, r2
 8004246:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69da      	ldr	r2, [r3, #28]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800426e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6911      	ldr	r1, [r2, #16]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	68d2      	ldr	r2, [r2, #12]
 800427a:	4311      	orrs	r1, r2
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	430b      	orrs	r3, r1
 8004282:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	000186a0 	.word	0x000186a0
 80042dc:	001e847f 	.word	0x001e847f
 80042e0:	003d08ff 	.word	0x003d08ff
 80042e4:	431bde83 	.word	0x431bde83
 80042e8:	10624dd3 	.word	0x10624dd3

080042ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	607a      	str	r2, [r7, #4]
 80042f6:	461a      	mov	r2, r3
 80042f8:	460b      	mov	r3, r1
 80042fa:	817b      	strh	r3, [r7, #10]
 80042fc:	4613      	mov	r3, r2
 80042fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004300:	f7fe fca4 	bl	8002c4c <HAL_GetTick>
 8004304:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b20      	cmp	r3, #32
 8004310:	f040 80e0 	bne.w	80044d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	2319      	movs	r3, #25
 800431a:	2201      	movs	r2, #1
 800431c:	4970      	ldr	r1, [pc, #448]	; (80044e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f001 fdf5 	bl	8005f0e <I2C_WaitOnFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800432a:	2302      	movs	r3, #2
 800432c:	e0d3      	b.n	80044d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_I2C_Master_Transmit+0x50>
 8004338:	2302      	movs	r3, #2
 800433a:	e0cc      	b.n	80044d6 <HAL_I2C_Master_Transmit+0x1ea>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b01      	cmp	r3, #1
 8004350:	d007      	beq.n	8004362 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0201 	orr.w	r2, r2, #1
 8004360:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004370:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2221      	movs	r2, #33	; 0x21
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2210      	movs	r2, #16
 800437e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	893a      	ldrh	r2, [r7, #8]
 8004392:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4a50      	ldr	r2, [pc, #320]	; (80044e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80043a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043a4:	8979      	ldrh	r1, [r7, #10]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	6a3a      	ldr	r2, [r7, #32]
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f001 fcae 	bl	8005d0c <I2C_MasterRequestWrite>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e08d      	b.n	80044d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ba:	2300      	movs	r3, #0
 80043bc:	613b      	str	r3, [r7, #16]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80043d0:	e066      	b.n	80044a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	6a39      	ldr	r1, [r7, #32]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f001 fe6f 	bl	80060ba <I2C_WaitOnTXEFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00d      	beq.n	80043fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d107      	bne.n	80043fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e06b      	b.n	80044d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	781a      	ldrb	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b04      	cmp	r3, #4
 800443a:	d11b      	bne.n	8004474 <HAL_I2C_Master_Transmit+0x188>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004440:	2b00      	cmp	r3, #0
 8004442:	d017      	beq.n	8004474 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	781a      	ldrb	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	6a39      	ldr	r1, [r7, #32]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f001 fe5f 	bl	800613c <I2C_WaitOnBTFFlagUntilTimeout>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00d      	beq.n	80044a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	2b04      	cmp	r3, #4
 800448a:	d107      	bne.n	800449c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800449a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e01a      	b.n	80044d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d194      	bne.n	80043d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	e000      	b.n	80044d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80044d4:	2302      	movs	r3, #2
  }
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	00100002 	.word	0x00100002
 80044e4:	ffff0000 	.word	0xffff0000

080044e8 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	607a      	str	r2, [r7, #4]
 80044f2:	461a      	mov	r2, r3
 80044f4:	460b      	mov	r3, r1
 80044f6:	817b      	strh	r3, [r7, #10]
 80044f8:	4613      	mov	r3, r2
 80044fa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b20      	cmp	r3, #32
 800450a:	f040 8085 	bne.w	8004618 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800450e:	4b46      	ldr	r3, [pc, #280]	; (8004628 <HAL_I2C_Master_Transmit_IT+0x140>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	08db      	lsrs	r3, r3, #3
 8004514:	4a45      	ldr	r2, [pc, #276]	; (800462c <HAL_I2C_Master_Transmit_IT+0x144>)
 8004516:	fba2 2303 	umull	r2, r3, r2, r3
 800451a:	0a1a      	lsrs	r2, r3, #8
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	009a      	lsls	r2, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	3b01      	subs	r3, #1
 800452c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d116      	bne.n	8004562 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2220      	movs	r2, #32
 800453e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f043 0220 	orr.w	r2, r3, #32
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e05b      	b.n	800461a <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b02      	cmp	r3, #2
 800456e:	d0db      	beq.n	8004528 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004576:	2b01      	cmp	r3, #1
 8004578:	d101      	bne.n	800457e <HAL_I2C_Master_Transmit_IT+0x96>
 800457a:	2302      	movs	r3, #2
 800457c:	e04d      	b.n	800461a <HAL_I2C_Master_Transmit_IT+0x132>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b01      	cmp	r3, #1
 8004592:	d007      	beq.n	80045a4 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2221      	movs	r2, #33	; 0x21
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2210      	movs	r2, #16
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	893a      	ldrh	r2, [r7, #8]
 80045d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4a13      	ldr	r2, [pc, #76]	; (8004630 <HAL_I2C_Master_Transmit_IT+0x148>)
 80045e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80045e6:	897a      	ldrh	r2, [r7, #10]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045fa:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004612:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	e000      	b.n	800461a <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8004618:	2302      	movs	r3, #2
  }
}
 800461a:	4618      	mov	r0, r3
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	20000090 	.word	0x20000090
 800462c:	14f8b589 	.word	0x14f8b589
 8004630:	ffff0000 	.word	0xffff0000

08004634 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004654:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	2b10      	cmp	r3, #16
 8004662:	d003      	beq.n	800466c <HAL_I2C_EV_IRQHandler+0x38>
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b40      	cmp	r3, #64	; 0x40
 8004668:	f040 80b6 	bne.w	80047d8 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10d      	bne.n	80046a2 <HAL_I2C_EV_IRQHandler+0x6e>
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800468c:	d003      	beq.n	8004696 <HAL_I2C_EV_IRQHandler+0x62>
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004694:	d101      	bne.n	800469a <HAL_I2C_EV_IRQHandler+0x66>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <HAL_I2C_EV_IRQHandler+0x68>
 800469a:	2300      	movs	r3, #0
 800469c:	2b01      	cmp	r3, #1
 800469e:	f000 8127 	beq.w	80048f0 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00c      	beq.n	80046c6 <HAL_I2C_EV_IRQHandler+0x92>
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	0a5b      	lsrs	r3, r3, #9
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d006      	beq.n	80046c6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f001 fdaf 	bl	800621c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fd12 	bl	80050e8 <I2C_Master_SB>
 80046c4:	e087      	b.n	80047d6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	08db      	lsrs	r3, r3, #3
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d009      	beq.n	80046e6 <HAL_I2C_EV_IRQHandler+0xb2>
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	0a5b      	lsrs	r3, r3, #9
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fd88 	bl	80051f4 <I2C_Master_ADD10>
 80046e4:	e077      	b.n	80047d6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d009      	beq.n	8004706 <HAL_I2C_EV_IRQHandler+0xd2>
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	0a5b      	lsrs	r3, r3, #9
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 fda2 	bl	8005248 <I2C_Master_ADDR>
 8004704:	e067      	b.n	80047d6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	089b      	lsrs	r3, r3, #2
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d030      	beq.n	8004774 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800471c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004720:	f000 80e8 	beq.w	80048f4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	09db      	lsrs	r3, r3, #7
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00f      	beq.n	8004750 <HAL_I2C_EV_IRQHandler+0x11c>
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	0a9b      	lsrs	r3, r3, #10
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d009      	beq.n	8004750 <HAL_I2C_EV_IRQHandler+0x11c>
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	089b      	lsrs	r3, r3, #2
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d103      	bne.n	8004750 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f9de 	bl	8004b0a <I2C_MasterTransmit_TXE>
 800474e:	e042      	b.n	80047d6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	089b      	lsrs	r3, r3, #2
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 80cb 	beq.w	80048f4 <HAL_I2C_EV_IRQHandler+0x2c0>
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	0a5b      	lsrs	r3, r3, #9
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 80c4 	beq.w	80048f4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fa68 	bl	8004c42 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004772:	e0bf      	b.n	80048f4 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800477e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004782:	f000 80b7 	beq.w	80048f4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	099b      	lsrs	r3, r3, #6
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00f      	beq.n	80047b2 <HAL_I2C_EV_IRQHandler+0x17e>
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	0a9b      	lsrs	r3, r3, #10
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d009      	beq.n	80047b2 <HAL_I2C_EV_IRQHandler+0x17e>
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	089b      	lsrs	r3, r3, #2
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d103      	bne.n	80047b2 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fb30 	bl	8004e10 <I2C_MasterReceive_RXNE>
 80047b0:	e011      	b.n	80047d6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	089b      	lsrs	r3, r3, #2
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 809a 	beq.w	80048f4 <HAL_I2C_EV_IRQHandler+0x2c0>
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	0a5b      	lsrs	r3, r3, #9
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 8093 	beq.w	80048f4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fba0 	bl	8004f14 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047d4:	e08e      	b.n	80048f4 <HAL_I2C_EV_IRQHandler+0x2c0>
 80047d6:	e08d      	b.n	80048f4 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d004      	beq.n	80047ea <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	61fb      	str	r3, [r7, #28]
 80047e8:	e007      	b.n	80047fa <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	085b      	lsrs	r3, r3, #1
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d012      	beq.n	800482c <HAL_I2C_EV_IRQHandler+0x1f8>
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	0a5b      	lsrs	r3, r3, #9
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00c      	beq.n	800482c <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004822:	69b9      	ldr	r1, [r7, #24]
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 ff5e 	bl	80056e6 <I2C_Slave_ADDR>
 800482a:	e066      	b.n	80048fa <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	091b      	lsrs	r3, r3, #4
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d009      	beq.n	800484c <HAL_I2C_EV_IRQHandler+0x218>
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	0a5b      	lsrs	r3, r3, #9
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 ff93 	bl	8005770 <I2C_Slave_STOPF>
 800484a:	e056      	b.n	80048fa <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800484c:	7bbb      	ldrb	r3, [r7, #14]
 800484e:	2b21      	cmp	r3, #33	; 0x21
 8004850:	d002      	beq.n	8004858 <HAL_I2C_EV_IRQHandler+0x224>
 8004852:	7bbb      	ldrb	r3, [r7, #14]
 8004854:	2b29      	cmp	r3, #41	; 0x29
 8004856:	d125      	bne.n	80048a4 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	09db      	lsrs	r3, r3, #7
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00f      	beq.n	8004884 <HAL_I2C_EV_IRQHandler+0x250>
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	0a9b      	lsrs	r3, r3, #10
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d009      	beq.n	8004884 <HAL_I2C_EV_IRQHandler+0x250>
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	089b      	lsrs	r3, r3, #2
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d103      	bne.n	8004884 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fe74 	bl	800556a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004882:	e039      	b.n	80048f8 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	089b      	lsrs	r3, r3, #2
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d033      	beq.n	80048f8 <HAL_I2C_EV_IRQHandler+0x2c4>
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	0a5b      	lsrs	r3, r3, #9
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d02d      	beq.n	80048f8 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fea1 	bl	80055e4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048a2:	e029      	b.n	80048f8 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	099b      	lsrs	r3, r3, #6
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00f      	beq.n	80048d0 <HAL_I2C_EV_IRQHandler+0x29c>
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	0a9b      	lsrs	r3, r3, #10
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d009      	beq.n	80048d0 <HAL_I2C_EV_IRQHandler+0x29c>
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	089b      	lsrs	r3, r3, #2
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d103      	bne.n	80048d0 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 feac 	bl	8005626 <I2C_SlaveReceive_RXNE>
 80048ce:	e014      	b.n	80048fa <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	089b      	lsrs	r3, r3, #2
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00e      	beq.n	80048fa <HAL_I2C_EV_IRQHandler+0x2c6>
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	0a5b      	lsrs	r3, r3, #9
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d008      	beq.n	80048fa <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 feda 	bl	80056a2 <I2C_SlaveReceive_BTF>
 80048ee:	e004      	b.n	80048fa <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 80048f0:	bf00      	nop
 80048f2:	e002      	b.n	80048fa <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048f4:	bf00      	nop
 80048f6:	e000      	b.n	80048fa <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048f8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80048fa:	3720      	adds	r7, #32
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	; 0x28
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004918:	2300      	movs	r3, #0
 800491a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004922:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	0a1b      	lsrs	r3, r3, #8
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00e      	beq.n	800494e <HAL_I2C_ER_IRQHandler+0x4e>
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	0a1b      	lsrs	r3, r3, #8
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d008      	beq.n	800494e <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800494c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	0a5b      	lsrs	r3, r3, #9
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00e      	beq.n	8004978 <HAL_I2C_ER_IRQHandler+0x78>
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	0a1b      	lsrs	r3, r3, #8
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	f043 0302 	orr.w	r3, r3, #2
 800496c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004976:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	0a9b      	lsrs	r3, r3, #10
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d03f      	beq.n	8004a04 <HAL_I2C_ER_IRQHandler+0x104>
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	0a1b      	lsrs	r3, r3, #8
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d039      	beq.n	8004a04 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004990:	7efb      	ldrb	r3, [r7, #27]
 8004992:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004998:	b29b      	uxth	r3, r3
 800499a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a2:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80049aa:	7ebb      	ldrb	r3, [r7, #26]
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d112      	bne.n	80049d6 <HAL_I2C_ER_IRQHandler+0xd6>
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10f      	bne.n	80049d6 <HAL_I2C_ER_IRQHandler+0xd6>
 80049b6:	7cfb      	ldrb	r3, [r7, #19]
 80049b8:	2b21      	cmp	r3, #33	; 0x21
 80049ba:	d008      	beq.n	80049ce <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80049bc:	7cfb      	ldrb	r3, [r7, #19]
 80049be:	2b29      	cmp	r3, #41	; 0x29
 80049c0:	d005      	beq.n	80049ce <HAL_I2C_ER_IRQHandler+0xce>
 80049c2:	7cfb      	ldrb	r3, [r7, #19]
 80049c4:	2b28      	cmp	r3, #40	; 0x28
 80049c6:	d106      	bne.n	80049d6 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2b21      	cmp	r3, #33	; 0x21
 80049cc:	d103      	bne.n	80049d6 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fffe 	bl	80059d0 <I2C_Slave_AF>
 80049d4:	e016      	b.n	8004a04 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049de:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	f043 0304 	orr.w	r3, r3, #4
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80049e8:	7efb      	ldrb	r3, [r7, #27]
 80049ea:	2b10      	cmp	r3, #16
 80049ec:	d002      	beq.n	80049f4 <HAL_I2C_ER_IRQHandler+0xf4>
 80049ee:	7efb      	ldrb	r3, [r7, #27]
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	d107      	bne.n	8004a04 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a02:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	0adb      	lsrs	r3, r3, #11
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00e      	beq.n	8004a2e <HAL_I2C_ER_IRQHandler+0x12e>
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	0a1b      	lsrs	r3, r3, #8
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d008      	beq.n	8004a2e <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	f043 0308 	orr.w	r3, r3, #8
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004a2c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f001 f835 	bl	8005ab0 <I2C_ITError>
  }
}
 8004a46:	bf00      	nop
 8004a48:	3728      	adds	r7, #40	; 0x28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	460b      	mov	r3, r1
 8004a94:	70fb      	strb	r3, [r7, #3]
 8004a96:	4613      	mov	r3, r2
 8004a98:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b084      	sub	sp, #16
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b18:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b20:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b26:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d150      	bne.n	8004bd2 <I2C_MasterTransmit_TXE+0xc8>
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	2b21      	cmp	r3, #33	; 0x21
 8004b34:	d14d      	bne.n	8004bd2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d01d      	beq.n	8004b78 <I2C_MasterTransmit_TXE+0x6e>
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	d01a      	beq.n	8004b78 <I2C_MasterTransmit_TXE+0x6e>
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b48:	d016      	beq.n	8004b78 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b58:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2211      	movs	r2, #17
 8004b5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7fd fb01 	bl	8002178 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b76:	e060      	b.n	8004c3a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b86:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b96:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b40      	cmp	r3, #64	; 0x40
 8004bb0:	d107      	bne.n	8004bc2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7ff ff7d 	bl	8004aba <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bc0:	e03b      	b.n	8004c3a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fd fad4 	bl	8002178 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bd0:	e033      	b.n	8004c3a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004bd2:	7bfb      	ldrb	r3, [r7, #15]
 8004bd4:	2b21      	cmp	r3, #33	; 0x21
 8004bd6:	d005      	beq.n	8004be4 <I2C_MasterTransmit_TXE+0xda>
 8004bd8:	7bbb      	ldrb	r3, [r7, #14]
 8004bda:	2b40      	cmp	r3, #64	; 0x40
 8004bdc:	d12d      	bne.n	8004c3a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
 8004be0:	2b22      	cmp	r3, #34	; 0x22
 8004be2:	d12a      	bne.n	8004c3a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d108      	bne.n	8004c00 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bfc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004bfe:	e01c      	b.n	8004c3a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b40      	cmp	r3, #64	; 0x40
 8004c0a:	d103      	bne.n	8004c14 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f898 	bl	8004d42 <I2C_MemoryTransmit_TXE_BTF>
}
 8004c12:	e012      	b.n	8004c3a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	781a      	ldrb	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c38:	e7ff      	b.n	8004c3a <I2C_MasterTransmit_TXE+0x130>
 8004c3a:	bf00      	nop
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b084      	sub	sp, #16
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b21      	cmp	r3, #33	; 0x21
 8004c5a:	d165      	bne.n	8004d28 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d012      	beq.n	8004c8c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	781a      	ldrb	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004c8a:	e056      	b.n	8004d3a <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d01d      	beq.n	8004cce <I2C_MasterTransmit_BTF+0x8c>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d01a      	beq.n	8004cce <I2C_MasterTransmit_BTF+0x8c>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c9e:	d016      	beq.n	8004cce <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cae:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2211      	movs	r2, #17
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fd fa56 	bl	8002178 <HAL_I2C_MasterTxCpltCallback>
}
 8004ccc:	e035      	b.n	8004d3a <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cdc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cec:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b40      	cmp	r3, #64	; 0x40
 8004d06:	d107      	bne.n	8004d18 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff fed2 	bl	8004aba <HAL_I2C_MemTxCpltCallback>
}
 8004d16:	e010      	b.n	8004d3a <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7fd fa29 	bl	8002178 <HAL_I2C_MasterTxCpltCallback>
}
 8004d26:	e008      	b.n	8004d3a <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	d102      	bne.n	8004d3a <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f804 	bl	8004d42 <I2C_MemoryTransmit_TXE_BTF>
}
 8004d3a:	bf00      	nop
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d11d      	bne.n	8004d8e <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d10b      	bne.n	8004d72 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6a:	1c9a      	adds	r2, r3, #2
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004d70:	e048      	b.n	8004e04 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	121b      	asrs	r3, r3, #8
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d86:	1c5a      	adds	r2, r3, #1
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d8c:	e03a      	b.n	8004e04 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d10b      	bne.n	8004dae <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004dac:	e02a      	b.n	8004e04 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d126      	bne.n	8004e04 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b22      	cmp	r3, #34	; 0x22
 8004dc0:	d108      	bne.n	8004dd4 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dd0:	601a      	str	r2, [r3, #0]
}
 8004dd2:	e017      	b.n	8004e04 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b21      	cmp	r3, #33	; 0x21
 8004dde:	d111      	bne.n	8004e04 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	781a      	ldrb	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b22      	cmp	r3, #34	; 0x22
 8004e22:	d173      	bne.n	8004f0c <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d920      	bls.n	8004e74 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d154      	bne.n	8004f0c <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e70:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004e72:	e04b      	b.n	8004f0c <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d047      	beq.n	8004f0c <I2C_MasterReceive_RXNE+0xfc>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d002      	beq.n	8004e88 <I2C_MasterReceive_RXNE+0x78>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d141      	bne.n	8004f0c <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e96:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ea6:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b40      	cmp	r3, #64	; 0x40
 8004ee0:	d10a      	bne.n	8004ef8 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7ff fdec 	bl	8004ace <HAL_I2C_MemRxCpltCallback>
}
 8004ef6:	e009      	b.n	8004f0c <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2212      	movs	r2, #18
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff fda1 	bl	8004a4e <HAL_I2C_MasterRxCpltCallback>
}
 8004f0c:	bf00      	nop
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d11b      	bne.n	8004f64 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f3a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	691a      	ldr	r2, [r3, #16]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	b2d2      	uxtb	r2, r2
 8004f48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004f62:	e0bd      	b.n	80050e0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d129      	bne.n	8004fc2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f7c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d00a      	beq.n	8004f9a <I2C_MasterReceive_BTF+0x86>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d007      	beq.n	8004f9a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f98:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004fc0:	e08e      	b.n	80050e0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d176      	bne.n	80050ba <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d002      	beq.n	8004fd8 <I2C_MasterReceive_BTF+0xc4>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2b10      	cmp	r3, #16
 8004fd6:	d108      	bne.n	8004fea <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	e019      	b.n	800501e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d002      	beq.n	8004ff6 <I2C_MasterReceive_BTF+0xe2>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d108      	bne.n	8005008 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	e00a      	b.n	800501e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b10      	cmp	r3, #16
 800500c:	d007      	beq.n	800501e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691a      	ldr	r2, [r3, #16]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005078:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b40      	cmp	r3, #64	; 0x40
 800508c:	d10a      	bne.n	80050a4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7ff fd16 	bl	8004ace <HAL_I2C_MemRxCpltCallback>
}
 80050a2:	e01d      	b.n	80050e0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2212      	movs	r2, #18
 80050b0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff fccb 	bl	8004a4e <HAL_I2C_MasterRxCpltCallback>
}
 80050b8:	e012      	b.n	80050e0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	691a      	ldr	r2, [r3, #16]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050e0:	bf00      	nop
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b40      	cmp	r3, #64	; 0x40
 80050fa:	d117      	bne.n	800512c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005100:	2b00      	cmp	r3, #0
 8005102:	d109      	bne.n	8005118 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005108:	b2db      	uxtb	r3, r3
 800510a:	461a      	mov	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005114:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005116:	e067      	b.n	80051e8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511c:	b2db      	uxtb	r3, r3
 800511e:	f043 0301 	orr.w	r3, r3, #1
 8005122:	b2da      	uxtb	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	611a      	str	r2, [r3, #16]
}
 800512a:	e05d      	b.n	80051e8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005134:	d133      	bne.n	800519e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b21      	cmp	r3, #33	; 0x21
 8005140:	d109      	bne.n	8005156 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005146:	b2db      	uxtb	r3, r3
 8005148:	461a      	mov	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005152:	611a      	str	r2, [r3, #16]
 8005154:	e008      	b.n	8005168 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515a:	b2db      	uxtb	r3, r3
 800515c:	f043 0301 	orr.w	r3, r3, #1
 8005160:	b2da      	uxtb	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516c:	2b00      	cmp	r3, #0
 800516e:	d004      	beq.n	800517a <I2C_Master_SB+0x92>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d108      	bne.n	800518c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	2b00      	cmp	r3, #0
 8005180:	d032      	beq.n	80051e8 <I2C_Master_SB+0x100>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005188:	2b00      	cmp	r3, #0
 800518a:	d02d      	beq.n	80051e8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800519a:	605a      	str	r2, [r3, #4]
}
 800519c:	e024      	b.n	80051e8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10e      	bne.n	80051c4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	11db      	asrs	r3, r3, #7
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	f003 0306 	and.w	r3, r3, #6
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	f063 030f 	orn	r3, r3, #15
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	611a      	str	r2, [r3, #16]
}
 80051c2:	e011      	b.n	80051e8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d10d      	bne.n	80051e8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	11db      	asrs	r3, r3, #7
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	f003 0306 	and.w	r3, r3, #6
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	f063 030e 	orn	r3, r3, #14
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	611a      	str	r2, [r3, #16]
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005200:	b2da      	uxtb	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520c:	2b00      	cmp	r3, #0
 800520e:	d103      	bne.n	8005218 <I2C_Master_ADD10+0x24>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	2b00      	cmp	r3, #0
 8005216:	d011      	beq.n	800523c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d104      	bne.n	800522c <I2C_Master_ADD10+0x38>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005228:	2b00      	cmp	r3, #0
 800522a:	d007      	beq.n	800523c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800523a:	605a      	str	r2, [r3, #4]
    }
  }
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005248:	b480      	push	{r7}
 800524a:	b091      	sub	sp, #68	; 0x44
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005256:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005264:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b22      	cmp	r3, #34	; 0x22
 8005270:	f040 8169 	bne.w	8005546 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10f      	bne.n	800529c <I2C_Master_ADDR+0x54>
 800527c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005280:	2b40      	cmp	r3, #64	; 0x40
 8005282:	d10b      	bne.n	800529c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005284:	2300      	movs	r3, #0
 8005286:	633b      	str	r3, [r7, #48]	; 0x30
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	633b      	str	r3, [r7, #48]	; 0x30
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	633b      	str	r3, [r7, #48]	; 0x30
 8005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529a:	e160      	b.n	800555e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d11d      	bne.n	80052e0 <I2C_Master_ADDR+0x98>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80052ac:	d118      	bne.n	80052e0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ae:	2300      	movs	r3, #0
 80052b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052d2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	651a      	str	r2, [r3, #80]	; 0x50
 80052de:	e13e      	b.n	800555e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d113      	bne.n	8005312 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ea:	2300      	movs	r3, #0
 80052ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052fe:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	e115      	b.n	800553e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b01      	cmp	r3, #1
 800531a:	f040 808a 	bne.w	8005432 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800531e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005320:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005324:	d137      	bne.n	8005396 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005334:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005344:	d113      	bne.n	800536e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005354:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005356:	2300      	movs	r3, #0
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	e0e7      	b.n	800553e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800536e:	2300      	movs	r3, #0
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	623b      	str	r3, [r7, #32]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	623b      	str	r3, [r7, #32]
 8005382:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	e0d3      	b.n	800553e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005398:	2b08      	cmp	r3, #8
 800539a:	d02e      	beq.n	80053fa <I2C_Master_ADDR+0x1b2>
 800539c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539e:	2b20      	cmp	r3, #32
 80053a0:	d02b      	beq.n	80053fa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80053a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a4:	2b12      	cmp	r3, #18
 80053a6:	d102      	bne.n	80053ae <I2C_Master_ADDR+0x166>
 80053a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d125      	bne.n	80053fa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d00e      	beq.n	80053d2 <I2C_Master_ADDR+0x18a>
 80053b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d00b      	beq.n	80053d2 <I2C_Master_ADDR+0x18a>
 80053ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053bc:	2b10      	cmp	r3, #16
 80053be:	d008      	beq.n	80053d2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	e007      	b.n	80053e2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e2:	2300      	movs	r3, #0
 80053e4:	61fb      	str	r3, [r7, #28]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	61fb      	str	r3, [r7, #28]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	61fb      	str	r3, [r7, #28]
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	e0a1      	b.n	800553e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005408:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800540a:	2300      	movs	r3, #0
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	61bb      	str	r3, [r7, #24]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	61bb      	str	r3, [r7, #24]
 800541e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	e085      	b.n	800553e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d14d      	bne.n	80054d8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800543c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543e:	2b04      	cmp	r3, #4
 8005440:	d016      	beq.n	8005470 <I2C_Master_ADDR+0x228>
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005444:	2b02      	cmp	r3, #2
 8005446:	d013      	beq.n	8005470 <I2C_Master_ADDR+0x228>
 8005448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544a:	2b10      	cmp	r3, #16
 800544c:	d010      	beq.n	8005470 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800545c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	e007      	b.n	8005480 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800547e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800548e:	d117      	bne.n	80054c0 <I2C_Master_ADDR+0x278>
 8005490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005492:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005496:	d00b      	beq.n	80054b0 <I2C_Master_ADDR+0x268>
 8005498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549a:	2b01      	cmp	r3, #1
 800549c:	d008      	beq.n	80054b0 <I2C_Master_ADDR+0x268>
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d005      	beq.n	80054b0 <I2C_Master_ADDR+0x268>
 80054a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a6:	2b10      	cmp	r3, #16
 80054a8:	d002      	beq.n	80054b0 <I2C_Master_ADDR+0x268>
 80054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	d107      	bne.n	80054c0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054be:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	e032      	b.n	800553e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054e6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054f6:	d117      	bne.n	8005528 <I2C_Master_ADDR+0x2e0>
 80054f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054fe:	d00b      	beq.n	8005518 <I2C_Master_ADDR+0x2d0>
 8005500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005502:	2b01      	cmp	r3, #1
 8005504:	d008      	beq.n	8005518 <I2C_Master_ADDR+0x2d0>
 8005506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005508:	2b08      	cmp	r3, #8
 800550a:	d005      	beq.n	8005518 <I2C_Master_ADDR+0x2d0>
 800550c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550e:	2b10      	cmp	r3, #16
 8005510:	d002      	beq.n	8005518 <I2C_Master_ADDR+0x2d0>
 8005512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005514:	2b20      	cmp	r3, #32
 8005516:	d107      	bne.n	8005528 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005526:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005528:	2300      	movs	r3, #0
 800552a:	613b      	str	r3, [r7, #16]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	613b      	str	r3, [r7, #16]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005544:	e00b      	b.n	800555e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	68fb      	ldr	r3, [r7, #12]
}
 800555c:	e7ff      	b.n	800555e <I2C_Master_ADDR+0x316>
 800555e:	bf00      	nop
 8005560:	3744      	adds	r7, #68	; 0x44
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005578:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d02b      	beq.n	80055dc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	781a      	ldrb	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800559e:	b29b      	uxth	r3, r3
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d114      	bne.n	80055dc <I2C_SlaveTransmit_TXE+0x72>
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
 80055b4:	2b29      	cmp	r3, #41	; 0x29
 80055b6:	d111      	bne.n	80055dc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2221      	movs	r2, #33	; 0x21
 80055cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2228      	movs	r2, #40	; 0x28
 80055d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7ff fa43 	bl	8004a62 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055dc:	bf00      	nop
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d011      	beq.n	800561a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	781a      	ldrb	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005610:	b29b      	uxth	r3, r3
 8005612:	3b01      	subs	r3, #1
 8005614:	b29a      	uxth	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005634:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563a:	b29b      	uxth	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d02c      	beq.n	800569a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566a:	b29b      	uxth	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d114      	bne.n	800569a <I2C_SlaveReceive_RXNE+0x74>
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	2b2a      	cmp	r3, #42	; 0x2a
 8005674:	d111      	bne.n	800569a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005684:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2222      	movs	r2, #34	; 0x22
 800568a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2228      	movs	r2, #40	; 0x28
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7ff f9ee 	bl	8004a76 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800569a:	bf00      	nop
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d012      	beq.n	80056da <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	691a      	ldr	r2, [r3, #16]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	3b01      	subs	r3, #1
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80056f0:	2300      	movs	r3, #0
 80056f2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005700:	2b28      	cmp	r3, #40	; 0x28
 8005702:	d127      	bne.n	8005754 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005712:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	089b      	lsrs	r3, r3, #2
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005720:	2301      	movs	r3, #1
 8005722:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	09db      	lsrs	r3, r3, #7
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d103      	bne.n	8005738 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	81bb      	strh	r3, [r7, #12]
 8005736:	e002      	b.n	800573e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005746:	89ba      	ldrh	r2, [r7, #12]
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff f99c 	bl	8004a8a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005752:	e008      	b.n	8005766 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0202 	mvn.w	r2, #2
 800575c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005766:	bf00      	nop
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800577e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800578e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005790:	2300      	movs	r3, #0
 8005792:	60bb      	str	r3, [r7, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	60bb      	str	r3, [r7, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0201 	orr.w	r2, r2, #1
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057bc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057cc:	d172      	bne.n	80058b4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
 80057d0:	2b22      	cmp	r3, #34	; 0x22
 80057d2:	d002      	beq.n	80057da <I2C_Slave_STOPF+0x6a>
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	2b2a      	cmp	r3, #42	; 0x2a
 80057d8:	d135      	bne.n	8005846 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d005      	beq.n	80057fe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	f043 0204 	orr.w	r2, r3, #4
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800580c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005812:	4618      	mov	r0, r3
 8005814:	f7fe f975 	bl	8003b02 <HAL_DMA_GetState>
 8005818:	4603      	mov	r3, r0
 800581a:	2b01      	cmp	r3, #1
 800581c:	d049      	beq.n	80058b2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	4a69      	ldr	r2, [pc, #420]	; (80059c8 <I2C_Slave_STOPF+0x258>)
 8005824:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	4618      	mov	r0, r3
 800582c:	f7fe f947 	bl	8003abe <HAL_DMA_Abort_IT>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d03d      	beq.n	80058b2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005840:	4610      	mov	r0, r2
 8005842:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005844:	e035      	b.n	80058b2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	b29a      	uxth	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005858:	b29b      	uxth	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d005      	beq.n	800586a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	f043 0204 	orr.w	r2, r3, #4
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005878:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587e:	4618      	mov	r0, r3
 8005880:	f7fe f93f 	bl	8003b02 <HAL_DMA_GetState>
 8005884:	4603      	mov	r3, r0
 8005886:	2b01      	cmp	r3, #1
 8005888:	d014      	beq.n	80058b4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588e:	4a4e      	ldr	r2, [pc, #312]	; (80059c8 <I2C_Slave_STOPF+0x258>)
 8005890:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005896:	4618      	mov	r0, r3
 8005898:	f7fe f911 	bl	8003abe <HAL_DMA_Abort_IT>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d008      	beq.n	80058b4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058ac:	4610      	mov	r0, r2
 80058ae:	4798      	blx	r3
 80058b0:	e000      	b.n	80058b4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058b2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d03e      	beq.n	800593c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d112      	bne.n	80058f2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	691a      	ldr	r2, [r3, #16]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	3b01      	subs	r3, #1
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fc:	2b40      	cmp	r3, #64	; 0x40
 80058fe:	d112      	bne.n	8005926 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	691a      	ldr	r2, [r3, #16]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	b2d2      	uxtb	r2, r2
 800590c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591c:	b29b      	uxth	r3, r3
 800591e:	3b01      	subs	r3, #1
 8005920:	b29a      	uxth	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d005      	beq.n	800593c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	f043 0204 	orr.w	r2, r3, #4
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f8b3 	bl	8005ab0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800594a:	e039      	b.n	80059c0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	2b2a      	cmp	r3, #42	; 0x2a
 8005950:	d109      	bne.n	8005966 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2228      	movs	r2, #40	; 0x28
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7ff f888 	bl	8004a76 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b28      	cmp	r3, #40	; 0x28
 8005970:	d111      	bne.n	8005996 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a15      	ldr	r2, [pc, #84]	; (80059cc <I2C_Slave_STOPF+0x25c>)
 8005976:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2220      	movs	r2, #32
 8005982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7ff f889 	bl	8004aa6 <HAL_I2C_ListenCpltCallback>
}
 8005994:	e014      	b.n	80059c0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	2b22      	cmp	r3, #34	; 0x22
 800599c:	d002      	beq.n	80059a4 <I2C_Slave_STOPF+0x234>
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	2b22      	cmp	r3, #34	; 0x22
 80059a2:	d10d      	bne.n	80059c0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff f85b 	bl	8004a76 <HAL_I2C_SlaveRxCpltCallback>
}
 80059c0:	bf00      	nop
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	08005e11 	.word	0x08005e11
 80059cc:	ffff0000 	.word	0xffff0000

080059d0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059de:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d002      	beq.n	80059f2 <I2C_Slave_AF+0x22>
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b20      	cmp	r3, #32
 80059f0:	d129      	bne.n	8005a46 <I2C_Slave_AF+0x76>
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	2b28      	cmp	r3, #40	; 0x28
 80059f6:	d126      	bne.n	8005a46 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a2c      	ldr	r2, [pc, #176]	; (8005aac <I2C_Slave_AF+0xdc>)
 80059fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a0c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a16:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a26:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff f831 	bl	8004aa6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005a44:	e02e      	b.n	8005aa4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
 8005a48:	2b21      	cmp	r3, #33	; 0x21
 8005a4a:	d126      	bne.n	8005a9a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a17      	ldr	r2, [pc, #92]	; (8005aac <I2C_Slave_AF+0xdc>)
 8005a50:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2221      	movs	r2, #33	; 0x21
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a76:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a80:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a90:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fe ffe5 	bl	8004a62 <HAL_I2C_SlaveTxCpltCallback>
}
 8005a98:	e004      	b.n	8005aa4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005aa2:	615a      	str	r2, [r3, #20]
}
 8005aa4:	bf00      	nop
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	ffff0000 	.word	0xffff0000

08005ab0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005abe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b10      	cmp	r3, #16
 8005aca:	d10a      	bne.n	8005ae2 <I2C_ITError+0x32>
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
 8005ace:	2b22      	cmp	r3, #34	; 0x22
 8005ad0:	d107      	bne.n	8005ae2 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ae0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ae2:	7bfb      	ldrb	r3, [r7, #15]
 8005ae4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ae8:	2b28      	cmp	r3, #40	; 0x28
 8005aea:	d107      	bne.n	8005afc <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2228      	movs	r2, #40	; 0x28
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005afa:	e015      	b.n	8005b28 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b0a:	d006      	beq.n	8005b1a <I2C_ITError+0x6a>
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
 8005b0e:	2b60      	cmp	r3, #96	; 0x60
 8005b10:	d003      	beq.n	8005b1a <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b36:	d162      	bne.n	8005bfe <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b46:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d020      	beq.n	8005b98 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5a:	4a6a      	ldr	r2, [pc, #424]	; (8005d04 <I2C_ITError+0x254>)
 8005b5c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fd ffab 	bl	8003abe <HAL_DMA_Abort_IT>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 8089 	beq.w	8005c82 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0201 	bic.w	r2, r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b92:	4610      	mov	r0, r2
 8005b94:	4798      	blx	r3
 8005b96:	e074      	b.n	8005c82 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9c:	4a59      	ldr	r2, [pc, #356]	; (8005d04 <I2C_ITError+0x254>)
 8005b9e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fd ff8a 	bl	8003abe <HAL_DMA_Abort_IT>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d068      	beq.n	8005c82 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bba:	2b40      	cmp	r3, #64	; 0x40
 8005bbc:	d10b      	bne.n	8005bd6 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	691a      	ldr	r2, [r3, #16]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0201 	bic.w	r2, r2, #1
 8005be4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	4798      	blx	r3
 8005bfc:	e041      	b.n	8005c82 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b60      	cmp	r3, #96	; 0x60
 8005c08:	d125      	bne.n	8005c56 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c22:	2b40      	cmp	r3, #64	; 0x40
 8005c24:	d10b      	bne.n	8005c3e <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691a      	ldr	r2, [r3, #16]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	b2d2      	uxtb	r2, r2
 8005c32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0201 	bic.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fe ff51 	bl	8004af6 <HAL_I2C_AbortCpltCallback>
 8005c54:	e015      	b.n	8005c82 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c60:	2b40      	cmp	r3, #64	; 0x40
 8005c62:	d10b      	bne.n	8005c7c <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	691a      	ldr	r2, [r3, #16]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	b2d2      	uxtb	r2, r2
 8005c70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7fe ff30 	bl	8004ae2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10e      	bne.n	8005cb0 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d109      	bne.n	8005cb0 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d104      	bne.n	8005cb0 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d007      	beq.n	8005cc0 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cbe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	f003 0304 	and.w	r3, r3, #4
 8005cd0:	2b04      	cmp	r3, #4
 8005cd2:	d113      	bne.n	8005cfc <I2C_ITError+0x24c>
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
 8005cd6:	2b28      	cmp	r3, #40	; 0x28
 8005cd8:	d110      	bne.n	8005cfc <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a0a      	ldr	r2, [pc, #40]	; (8005d08 <I2C_ITError+0x258>)
 8005cde:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fe fed5 	bl	8004aa6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005cfc:	bf00      	nop
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	08005e11 	.word	0x08005e11
 8005d08:	ffff0000 	.word	0xffff0000

08005d0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b088      	sub	sp, #32
 8005d10:	af02      	add	r7, sp, #8
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	607a      	str	r2, [r7, #4]
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d006      	beq.n	8005d36 <I2C_MasterRequestWrite+0x2a>
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d003      	beq.n	8005d36 <I2C_MasterRequestWrite+0x2a>
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d34:	d108      	bne.n	8005d48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	e00b      	b.n	8005d60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4c:	2b12      	cmp	r3, #18
 8005d4e:	d107      	bne.n	8005d60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 f8ce 	bl	8005f0e <I2C_WaitOnFlagUntilTimeout>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00c      	beq.n	8005d92 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e035      	b.n	8005dfe <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d9a:	d108      	bne.n	8005dae <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d9c:	897b      	ldrh	r3, [r7, #10]
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005daa:	611a      	str	r2, [r3, #16]
 8005dac:	e01b      	b.n	8005de6 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005dae:	897b      	ldrh	r3, [r7, #10]
 8005db0:	11db      	asrs	r3, r3, #7
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	f003 0306 	and.w	r3, r3, #6
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	f063 030f 	orn	r3, r3, #15
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	490f      	ldr	r1, [pc, #60]	; (8005e08 <I2C_MasterRequestWrite+0xfc>)
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 f8f5 	bl	8005fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e010      	b.n	8005dfe <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ddc:	897b      	ldrh	r3, [r7, #10]
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	4908      	ldr	r1, [pc, #32]	; (8005e0c <I2C_MasterRequestWrite+0x100>)
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 f8e5 	bl	8005fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e000      	b.n	8005dfe <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	00010008 	.word	0x00010008
 8005e0c:	00010002 	.word	0x00010002

08005e10 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e24:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e32:	2200      	movs	r2, #0
 8005e34:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e42:	2200      	movs	r2, #0
 8005e44:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e54:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e68:	2200      	movs	r2, #0
 8005e6a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d003      	beq.n	8005e7c <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e78:	2200      	movs	r2, #0
 8005e7a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0201 	bic.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b60      	cmp	r3, #96	; 0x60
 8005e96:	d10e      	bne.n	8005eb6 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f7fe fe21 	bl	8004af6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005eb4:	e027      	b.n	8005f06 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005eb6:	7afb      	ldrb	r3, [r7, #11]
 8005eb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ebc:	2b28      	cmp	r3, #40	; 0x28
 8005ebe:	d117      	bne.n	8005ef0 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0201 	orr.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ede:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2228      	movs	r2, #40	; 0x28
 8005eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005eee:	e007      	b.n	8005f00 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f7fe fdee 	bl	8004ae2 <HAL_I2C_ErrorCallback>
}
 8005f06:	bf00      	nop
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	60f8      	str	r0, [r7, #12]
 8005f16:	60b9      	str	r1, [r7, #8]
 8005f18:	603b      	str	r3, [r7, #0]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f1e:	e025      	b.n	8005f6c <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f26:	d021      	beq.n	8005f6c <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f28:	f7fc fe90 	bl	8002c4c <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d302      	bcc.n	8005f3e <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d116      	bne.n	8005f6c <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	f043 0220 	orr.w	r2, r3, #32
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e023      	b.n	8005fb4 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	0c1b      	lsrs	r3, r3, #16
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d10d      	bne.n	8005f92 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	43da      	mvns	r2, r3
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	4013      	ands	r3, r2
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	bf0c      	ite	eq
 8005f88:	2301      	moveq	r3, #1
 8005f8a:	2300      	movne	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	461a      	mov	r2, r3
 8005f90:	e00c      	b.n	8005fac <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	43da      	mvns	r2, r3
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	bf0c      	ite	eq
 8005fa4:	2301      	moveq	r3, #1
 8005fa6:	2300      	movne	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d0b6      	beq.n	8005f20 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fca:	e051      	b.n	8006070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fda:	d123      	bne.n	8006024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ff4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	f043 0204 	orr.w	r2, r3, #4
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e046      	b.n	80060b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800602a:	d021      	beq.n	8006070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800602c:	f7fc fe0e 	bl	8002c4c <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	429a      	cmp	r2, r3
 800603a:	d302      	bcc.n	8006042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d116      	bne.n	8006070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	f043 0220 	orr.w	r2, r3, #32
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e020      	b.n	80060b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	0c1b      	lsrs	r3, r3, #16
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b01      	cmp	r3, #1
 8006078:	d10c      	bne.n	8006094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	43da      	mvns	r2, r3
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	4013      	ands	r3, r2
 8006086:	b29b      	uxth	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	bf14      	ite	ne
 800608c:	2301      	movne	r3, #1
 800608e:	2300      	moveq	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	e00b      	b.n	80060ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	43da      	mvns	r2, r3
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4013      	ands	r3, r2
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	bf14      	ite	ne
 80060a6:	2301      	movne	r3, #1
 80060a8:	2300      	moveq	r3, #0
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d18d      	bne.n	8005fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b084      	sub	sp, #16
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	60b9      	str	r1, [r7, #8]
 80060c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060c6:	e02d      	b.n	8006124 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 f878 	bl	80061be <I2C_IsAcknowledgeFailed>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e02d      	b.n	8006134 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060de:	d021      	beq.n	8006124 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e0:	f7fc fdb4 	bl	8002c4c <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d302      	bcc.n	80060f6 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d116      	bne.n	8006124 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2220      	movs	r2, #32
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006110:	f043 0220 	orr.w	r2, r3, #32
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e007      	b.n	8006134 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612e:	2b80      	cmp	r3, #128	; 0x80
 8006130:	d1ca      	bne.n	80060c8 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006148:	e02d      	b.n	80061a6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f000 f837 	bl	80061be <I2C_IsAcknowledgeFailed>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e02d      	b.n	80061b6 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006160:	d021      	beq.n	80061a6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006162:	f7fc fd73 	bl	8002c4c <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	429a      	cmp	r2, r3
 8006170:	d302      	bcc.n	8006178 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d116      	bne.n	80061a6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2220      	movs	r2, #32
 8006182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	f043 0220 	orr.w	r2, r3, #32
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e007      	b.n	80061b6 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	f003 0304 	and.w	r3, r3, #4
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d1ca      	bne.n	800614a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d4:	d11b      	bne.n	800620e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	f043 0204 	orr.w	r2, r3, #4
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e000      	b.n	8006210 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006228:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800622c:	d103      	bne.n	8006236 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006234:	e007      	b.n	8006246 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800623e:	d102      	bne.n	8006246 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2208      	movs	r2, #8
 8006244:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006252:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006254:	b08f      	sub	sp, #60	; 0x3c
 8006256:	af0a      	add	r7, sp, #40	; 0x28
 8006258:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e10f      	b.n	8006484 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d106      	bne.n	8006284 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f006 fe6a 	bl	800cf58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2203      	movs	r2, #3
 8006288:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006294:	2b00      	cmp	r3, #0
 8006296:	d102      	bne.n	800629e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f003 fd0d 	bl	8009cc2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	603b      	str	r3, [r7, #0]
 80062ae:	687e      	ldr	r6, [r7, #4]
 80062b0:	466d      	mov	r5, sp
 80062b2:	f106 0410 	add.w	r4, r6, #16
 80062b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80062c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80062c6:	1d33      	adds	r3, r6, #4
 80062c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062ca:	6838      	ldr	r0, [r7, #0]
 80062cc:	f003 fbe4 	bl	8009a98 <USB_CoreInit>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d005      	beq.n	80062e2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2202      	movs	r2, #2
 80062da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e0d0      	b.n	8006484 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2100      	movs	r1, #0
 80062e8:	4618      	mov	r0, r3
 80062ea:	f003 fcfb 	bl	8009ce4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062ee:	2300      	movs	r3, #0
 80062f0:	73fb      	strb	r3, [r7, #15]
 80062f2:	e04a      	b.n	800638a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80062f4:	7bfa      	ldrb	r2, [r7, #15]
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	4613      	mov	r3, r2
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	440b      	add	r3, r1
 8006302:	333d      	adds	r3, #61	; 0x3d
 8006304:	2201      	movs	r2, #1
 8006306:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006308:	7bfa      	ldrb	r2, [r7, #15]
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	4613      	mov	r3, r2
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	1a9b      	subs	r3, r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	440b      	add	r3, r1
 8006316:	333c      	adds	r3, #60	; 0x3c
 8006318:	7bfa      	ldrb	r2, [r7, #15]
 800631a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800631c:	7bfa      	ldrb	r2, [r7, #15]
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	b298      	uxth	r0, r3
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	4613      	mov	r3, r2
 8006326:	00db      	lsls	r3, r3, #3
 8006328:	1a9b      	subs	r3, r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	440b      	add	r3, r1
 800632e:	3342      	adds	r3, #66	; 0x42
 8006330:	4602      	mov	r2, r0
 8006332:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006334:	7bfa      	ldrb	r2, [r7, #15]
 8006336:	6879      	ldr	r1, [r7, #4]
 8006338:	4613      	mov	r3, r2
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	1a9b      	subs	r3, r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	440b      	add	r3, r1
 8006342:	333f      	adds	r3, #63	; 0x3f
 8006344:	2200      	movs	r2, #0
 8006346:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006348:	7bfa      	ldrb	r2, [r7, #15]
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	4613      	mov	r3, r2
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	1a9b      	subs	r3, r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	440b      	add	r3, r1
 8006356:	3344      	adds	r3, #68	; 0x44
 8006358:	2200      	movs	r2, #0
 800635a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800635c:	7bfa      	ldrb	r2, [r7, #15]
 800635e:	6879      	ldr	r1, [r7, #4]
 8006360:	4613      	mov	r3, r2
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	1a9b      	subs	r3, r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	440b      	add	r3, r1
 800636a:	3348      	adds	r3, #72	; 0x48
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006370:	7bfa      	ldrb	r2, [r7, #15]
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	4613      	mov	r3, r2
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	1a9b      	subs	r3, r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	440b      	add	r3, r1
 800637e:	3350      	adds	r3, #80	; 0x50
 8006380:	2200      	movs	r2, #0
 8006382:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	3301      	adds	r3, #1
 8006388:	73fb      	strb	r3, [r7, #15]
 800638a:	7bfa      	ldrb	r2, [r7, #15]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	429a      	cmp	r2, r3
 8006392:	d3af      	bcc.n	80062f4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006394:	2300      	movs	r3, #0
 8006396:	73fb      	strb	r3, [r7, #15]
 8006398:	e044      	b.n	8006424 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800639a:	7bfa      	ldrb	r2, [r7, #15]
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	4613      	mov	r3, r2
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	1a9b      	subs	r3, r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	440b      	add	r3, r1
 80063a8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80063ac:	2200      	movs	r2, #0
 80063ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80063b0:	7bfa      	ldrb	r2, [r7, #15]
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	4613      	mov	r3, r2
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	1a9b      	subs	r3, r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	440b      	add	r3, r1
 80063be:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80063c2:	7bfa      	ldrb	r2, [r7, #15]
 80063c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80063c6:	7bfa      	ldrb	r2, [r7, #15]
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	4613      	mov	r3, r2
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	1a9b      	subs	r3, r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	440b      	add	r3, r1
 80063d4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80063dc:	7bfa      	ldrb	r2, [r7, #15]
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	4613      	mov	r3, r2
 80063e2:	00db      	lsls	r3, r3, #3
 80063e4:	1a9b      	subs	r3, r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	440b      	add	r3, r1
 80063ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80063f2:	7bfa      	ldrb	r2, [r7, #15]
 80063f4:	6879      	ldr	r1, [r7, #4]
 80063f6:	4613      	mov	r3, r2
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	1a9b      	subs	r3, r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	440b      	add	r3, r1
 8006400:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006408:	7bfa      	ldrb	r2, [r7, #15]
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	4613      	mov	r3, r2
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	1a9b      	subs	r3, r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	440b      	add	r3, r1
 8006416:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	3301      	adds	r3, #1
 8006422:	73fb      	strb	r3, [r7, #15]
 8006424:	7bfa      	ldrb	r2, [r7, #15]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	429a      	cmp	r2, r3
 800642c:	d3b5      	bcc.n	800639a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	603b      	str	r3, [r7, #0]
 8006434:	687e      	ldr	r6, [r7, #4]
 8006436:	466d      	mov	r5, sp
 8006438:	f106 0410 	add.w	r4, r6, #16
 800643c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800643e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006444:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006448:	e885 0003 	stmia.w	r5, {r0, r1}
 800644c:	1d33      	adds	r3, r6, #4
 800644e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006450:	6838      	ldr	r0, [r7, #0]
 8006452:	f003 fc71 	bl	8009d38 <USB_DevInit>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d005      	beq.n	8006468 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2202      	movs	r2, #2
 8006460:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e00d      	b.n	8006484 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4618      	mov	r0, r3
 800647e:	f004 fcb0 	bl	800ade2 <USB_DevDisconnect>

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800648c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <HAL_PCD_Start+0x1c>
 80064a4:	2302      	movs	r3, #2
 80064a6:	e020      	b.n	80064ea <HAL_PCD_Start+0x5e>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d109      	bne.n	80064cc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d005      	beq.n	80064cc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f004 fc6e 	bl	800adb2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4618      	mov	r0, r3
 80064dc:	f003 fbe0 	bl	8009ca0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80064f2:	b590      	push	{r4, r7, lr}
 80064f4:	b08d      	sub	sp, #52	; 0x34
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4618      	mov	r0, r3
 800650a:	f004 fd15 	bl	800af38 <USB_GetMode>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	f040 839d 	bne.w	8006c50 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4618      	mov	r0, r3
 800651c:	f004 fc79 	bl	800ae12 <USB_ReadInterrupts>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 8393 	beq.w	8006c4e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4618      	mov	r0, r3
 800652e:	f004 fc70 	bl	800ae12 <USB_ReadInterrupts>
 8006532:	4603      	mov	r3, r0
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b02      	cmp	r3, #2
 800653a:	d107      	bne.n	800654c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	695a      	ldr	r2, [r3, #20]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f002 0202 	and.w	r2, r2, #2
 800654a:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4618      	mov	r0, r3
 8006552:	f004 fc5e 	bl	800ae12 <USB_ReadInterrupts>
 8006556:	4603      	mov	r3, r0
 8006558:	f003 0310 	and.w	r3, r3, #16
 800655c:	2b10      	cmp	r3, #16
 800655e:	d161      	bne.n	8006624 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699a      	ldr	r2, [r3, #24]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0210 	bic.w	r2, r2, #16
 800656e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	f003 020f 	and.w	r2, r3, #15
 800657c:	4613      	mov	r3, r2
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	1a9b      	subs	r3, r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	4413      	add	r3, r2
 800658c:	3304      	adds	r3, #4
 800658e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	0c5b      	lsrs	r3, r3, #17
 8006594:	f003 030f 	and.w	r3, r3, #15
 8006598:	2b02      	cmp	r3, #2
 800659a:	d124      	bne.n	80065e6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80065a2:	4013      	ands	r3, r2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d035      	beq.n	8006614 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	091b      	lsrs	r3, r3, #4
 80065b0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80065b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	461a      	mov	r2, r3
 80065ba:	6a38      	ldr	r0, [r7, #32]
 80065bc:	f004 fad6 	bl	800ab6c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	68da      	ldr	r2, [r3, #12]
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	091b      	lsrs	r3, r3, #4
 80065c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065cc:	441a      	add	r2, r3
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	699a      	ldr	r2, [r3, #24]
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	091b      	lsrs	r3, r3, #4
 80065da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065de:	441a      	add	r2, r3
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	619a      	str	r2, [r3, #24]
 80065e4:	e016      	b.n	8006614 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	0c5b      	lsrs	r3, r3, #17
 80065ea:	f003 030f 	and.w	r3, r3, #15
 80065ee:	2b06      	cmp	r3, #6
 80065f0:	d110      	bne.n	8006614 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80065f8:	2208      	movs	r2, #8
 80065fa:	4619      	mov	r1, r3
 80065fc:	6a38      	ldr	r0, [r7, #32]
 80065fe:	f004 fab5 	bl	800ab6c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	699a      	ldr	r2, [r3, #24]
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	091b      	lsrs	r3, r3, #4
 800660a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800660e:	441a      	add	r2, r3
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	699a      	ldr	r2, [r3, #24]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 0210 	orr.w	r2, r2, #16
 8006622:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4618      	mov	r0, r3
 800662a:	f004 fbf2 	bl	800ae12 <USB_ReadInterrupts>
 800662e:	4603      	mov	r3, r0
 8006630:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006634:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006638:	d16e      	bne.n	8006718 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4618      	mov	r0, r3
 8006644:	f004 fbf8 	bl	800ae38 <USB_ReadDevAllOutEpInterrupt>
 8006648:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800664a:	e062      	b.n	8006712 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d057      	beq.n	8006706 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800665c:	b2d2      	uxtb	r2, r2
 800665e:	4611      	mov	r1, r2
 8006660:	4618      	mov	r0, r3
 8006662:	f004 fc1d 	bl	800aea0 <USB_ReadDevOutEPInterrupt>
 8006666:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00c      	beq.n	800668c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	4413      	add	r3, r2
 800667a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667e:	461a      	mov	r2, r3
 8006680:	2301      	movs	r3, #1
 8006682:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006684:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fdb0 	bl	80071ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	f003 0308 	and.w	r3, r3, #8
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00c      	beq.n	80066b0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a2:	461a      	mov	r2, r3
 80066a4:	2308      	movs	r3, #8
 80066a6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80066a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 feaa 	bl	8007404 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f003 0310 	and.w	r3, r3, #16
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d008      	beq.n	80066cc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c6:	461a      	mov	r2, r3
 80066c8:	2310      	movs	r3, #16
 80066ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f003 0320 	and.w	r3, r3, #32
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d008      	beq.n	80066e8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e2:	461a      	mov	r2, r3
 80066e4:	2320      	movs	r3, #32
 80066e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d009      	beq.n	8006706 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fe:	461a      	mov	r2, r3
 8006700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006704:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	3301      	adds	r3, #1
 800670a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	085b      	lsrs	r3, r3, #1
 8006710:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006714:	2b00      	cmp	r3, #0
 8006716:	d199      	bne.n	800664c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4618      	mov	r0, r3
 800671e:	f004 fb78 	bl	800ae12 <USB_ReadInterrupts>
 8006722:	4603      	mov	r3, r0
 8006724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006728:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800672c:	f040 80c0 	bne.w	80068b0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4618      	mov	r0, r3
 8006736:	f004 fb99 	bl	800ae6c <USB_ReadDevAllInEpInterrupt>
 800673a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006740:	e0b2      	b.n	80068a8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 80a7 	beq.w	800689c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006754:	b2d2      	uxtb	r2, r2
 8006756:	4611      	mov	r1, r2
 8006758:	4618      	mov	r0, r3
 800675a:	f004 fbbf 	bl	800aedc <USB_ReadDevInEPInterrupt>
 800675e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d057      	beq.n	800681a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	f003 030f 	and.w	r3, r3, #15
 8006770:	2201      	movs	r2, #1
 8006772:	fa02 f303 	lsl.w	r3, r2, r3
 8006776:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	43db      	mvns	r3, r3
 8006784:	69f9      	ldr	r1, [r7, #28]
 8006786:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800678a:	4013      	ands	r3, r2
 800678c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	4413      	add	r3, r2
 8006796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679a:	461a      	mov	r2, r3
 800679c:	2301      	movs	r3, #1
 800679e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d132      	bne.n	800680e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80067a8:	6879      	ldr	r1, [r7, #4]
 80067aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ac:	4613      	mov	r3, r2
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	1a9b      	subs	r3, r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	440b      	add	r3, r1
 80067b6:	3348      	adds	r3, #72	; 0x48
 80067b8:	6819      	ldr	r1, [r3, #0]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067be:	4613      	mov	r3, r2
 80067c0:	00db      	lsls	r3, r3, #3
 80067c2:	1a9b      	subs	r3, r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4403      	add	r3, r0
 80067c8:	3344      	adds	r3, #68	; 0x44
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4419      	add	r1, r3
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d2:	4613      	mov	r3, r2
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	1a9b      	subs	r3, r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4403      	add	r3, r0
 80067dc:	3348      	adds	r3, #72	; 0x48
 80067de:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d113      	bne.n	800680e <HAL_PCD_IRQHandler+0x31c>
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ea:	4613      	mov	r3, r2
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	1a9b      	subs	r3, r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	440b      	add	r3, r1
 80067f4:	3350      	adds	r3, #80	; 0x50
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d108      	bne.n	800680e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6818      	ldr	r0, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006806:	461a      	mov	r2, r3
 8006808:	2101      	movs	r1, #1
 800680a:	f004 fbc7 	bl	800af9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	b2db      	uxtb	r3, r3
 8006812:	4619      	mov	r1, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f006 fc20 	bl	800d05a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f003 0308 	and.w	r3, r3, #8
 8006820:	2b00      	cmp	r3, #0
 8006822:	d008      	beq.n	8006836 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006830:	461a      	mov	r2, r3
 8006832:	2308      	movs	r3, #8
 8006834:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f003 0310 	and.w	r3, r3, #16
 800683c:	2b00      	cmp	r3, #0
 800683e:	d008      	beq.n	8006852 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800684c:	461a      	mov	r2, r3
 800684e:	2310      	movs	r3, #16
 8006850:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006858:	2b00      	cmp	r3, #0
 800685a:	d008      	beq.n	800686e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006868:	461a      	mov	r2, r3
 800686a:	2340      	movs	r3, #64	; 0x40
 800686c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d008      	beq.n	800688a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006884:	461a      	mov	r2, r3
 8006886:	2302      	movs	r3, #2
 8006888:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fc1b 	bl	80070d2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	3301      	adds	r3, #1
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80068a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a4:	085b      	lsrs	r3, r3, #1
 80068a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80068a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f47f af49 	bne.w	8006742 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f004 faac 	bl	800ae12 <USB_ReadInterrupts>
 80068ba:	4603      	mov	r3, r0
 80068bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068c4:	d122      	bne.n	800690c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	69fa      	ldr	r2, [r7, #28]
 80068d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068d4:	f023 0301 	bic.w	r3, r3, #1
 80068d8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d108      	bne.n	80068f6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80068ec:	2100      	movs	r1, #0
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fe26 	bl	8007540 <HAL_PCDEx_LPM_Callback>
 80068f4:	e002      	b.n	80068fc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f006 fc26 	bl	800d148 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	695a      	ldr	r2, [r3, #20]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800690a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4618      	mov	r0, r3
 8006912:	f004 fa7e 	bl	800ae12 <USB_ReadInterrupts>
 8006916:	4603      	mov	r3, r0
 8006918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800691c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006920:	d112      	bne.n	8006948 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b01      	cmp	r3, #1
 8006930:	d102      	bne.n	8006938 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f006 fbe2 	bl	800d0fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	695a      	ldr	r2, [r3, #20]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006946:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4618      	mov	r0, r3
 800694e:	f004 fa60 	bl	800ae12 <USB_ReadInterrupts>
 8006952:	4603      	mov	r3, r0
 8006954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695c:	f040 80c7 	bne.w	8006aee <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	69fa      	ldr	r2, [r7, #28]
 800696a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800696e:	f023 0301 	bic.w	r3, r3, #1
 8006972:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2110      	movs	r1, #16
 800697a:	4618      	mov	r0, r3
 800697c:	f003 fb40 	bl	800a000 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006980:	2300      	movs	r3, #0
 8006982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006984:	e056      	b.n	8006a34 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	4413      	add	r3, r2
 800698e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006992:	461a      	mov	r2, r3
 8006994:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006998:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800699a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069aa:	0151      	lsls	r1, r2, #5
 80069ac:	69fa      	ldr	r2, [r7, #28]
 80069ae:	440a      	add	r2, r1
 80069b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069b8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80069ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069ca:	0151      	lsls	r1, r2, #5
 80069cc:	69fa      	ldr	r2, [r7, #28]
 80069ce:	440a      	add	r2, r1
 80069d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80069da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e6:	461a      	mov	r2, r3
 80069e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069ec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80069ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069fe:	0151      	lsls	r1, r2, #5
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	440a      	add	r2, r1
 8006a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a1e:	0151      	lsls	r1, r2, #5
 8006a20:	69fa      	ldr	r2, [r7, #28]
 8006a22:	440a      	add	r2, r1
 8006a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a2c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a30:	3301      	adds	r3, #1
 8006a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d3a3      	bcc.n	8006986 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	69fa      	ldr	r2, [r7, #28]
 8006a48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a4c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006a50:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d016      	beq.n	8006a88 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a64:	69fa      	ldr	r2, [r7, #28]
 8006a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a6a:	f043 030b 	orr.w	r3, r3, #11
 8006a6e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a7a:	69fa      	ldr	r2, [r7, #28]
 8006a7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a80:	f043 030b 	orr.w	r3, r3, #11
 8006a84:	6453      	str	r3, [r2, #68]	; 0x44
 8006a86:	e015      	b.n	8006ab4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	69fa      	ldr	r2, [r7, #28]
 8006a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a9a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006a9e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	69fa      	ldr	r2, [r7, #28]
 8006aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aae:	f043 030b 	orr.w	r3, r3, #11
 8006ab2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	69fa      	ldr	r2, [r7, #28]
 8006abe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ac2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006ac6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6818      	ldr	r0, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006ad8:	461a      	mov	r2, r3
 8006ada:	f004 fa5f 	bl	800af9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	695a      	ldr	r2, [r3, #20]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f004 f98d 	bl	800ae12 <USB_ReadInterrupts>
 8006af8:	4603      	mov	r3, r0
 8006afa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b02:	d124      	bne.n	8006b4e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f004 fa23 	bl	800af54 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f003 fad5 	bl	800a0c2 <USB_GetDevSpeed>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681c      	ldr	r4, [r3, #0]
 8006b24:	f001 f946 	bl	8007db4 <HAL_RCC_GetHCLKFreq>
 8006b28:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	461a      	mov	r2, r3
 8006b32:	4620      	mov	r0, r4
 8006b34:	f003 f812 	bl	8009b5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f006 fab6 	bl	800d0aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	695a      	ldr	r2, [r3, #20]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006b4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f004 f95d 	bl	800ae12 <USB_ReadInterrupts>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	f003 0308 	and.w	r3, r3, #8
 8006b5e:	2b08      	cmp	r3, #8
 8006b60:	d10a      	bne.n	8006b78 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f006 fa93 	bl	800d08e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	695a      	ldr	r2, [r3, #20]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f002 0208 	and.w	r2, r2, #8
 8006b76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f004 f948 	bl	800ae12 <USB_ReadInterrupts>
 8006b82:	4603      	mov	r3, r0
 8006b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b8c:	d10f      	bne.n	8006bae <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f006 faf5 	bl	800d188 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	695a      	ldr	r2, [r3, #20]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f004 f92d 	bl	800ae12 <USB_ReadInterrupts>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bc2:	d10f      	bne.n	8006be4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	4619      	mov	r1, r3
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f006 fac8 	bl	800d164 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	695a      	ldr	r2, [r3, #20]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006be2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f004 f912 	bl	800ae12 <USB_ReadInterrupts>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf8:	d10a      	bne.n	8006c10 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f006 fad6 	bl	800d1ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	695a      	ldr	r2, [r3, #20]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006c0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f004 f8fc 	bl	800ae12 <USB_ReadInterrupts>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	f003 0304 	and.w	r3, r3, #4
 8006c20:	2b04      	cmp	r3, #4
 8006c22:	d115      	bne.n	8006c50 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	f003 0304 	and.w	r3, r3, #4
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f006 fac6 	bl	800d1c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6859      	ldr	r1, [r3, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	605a      	str	r2, [r3, #4]
 8006c4c:	e000      	b.n	8006c50 <HAL_PCD_IRQHandler+0x75e>
      return;
 8006c4e:	bf00      	nop
    }
  }
}
 8006c50:	3734      	adds	r7, #52	; 0x34
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd90      	pop	{r4, r7, pc}

08006c56 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b082      	sub	sp, #8
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d101      	bne.n	8006c70 <HAL_PCD_SetAddress+0x1a>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e013      	b.n	8006c98 <HAL_PCD_SetAddress+0x42>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	78fa      	ldrb	r2, [r7, #3]
 8006c7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	78fa      	ldrb	r2, [r7, #3]
 8006c86:	4611      	mov	r1, r2
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f004 f86c 	bl	800ad66 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	4608      	mov	r0, r1
 8006caa:	4611      	mov	r1, r2
 8006cac:	461a      	mov	r2, r3
 8006cae:	4603      	mov	r3, r0
 8006cb0:	70fb      	strb	r3, [r7, #3]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	803b      	strh	r3, [r7, #0]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006cbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	da0f      	bge.n	8006ce6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cc6:	78fb      	ldrb	r3, [r7, #3]
 8006cc8:	f003 020f 	and.w	r2, r3, #15
 8006ccc:	4613      	mov	r3, r2
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	1a9b      	subs	r3, r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	3338      	adds	r3, #56	; 0x38
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	4413      	add	r3, r2
 8006cda:	3304      	adds	r3, #4
 8006cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	705a      	strb	r2, [r3, #1]
 8006ce4:	e00f      	b.n	8006d06 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ce6:	78fb      	ldrb	r3, [r7, #3]
 8006ce8:	f003 020f 	and.w	r2, r3, #15
 8006cec:	4613      	mov	r3, r2
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	1a9b      	subs	r3, r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006d06:	78fb      	ldrb	r3, [r7, #3]
 8006d08:	f003 030f 	and.w	r3, r3, #15
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006d12:	883a      	ldrh	r2, [r7, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	78ba      	ldrb	r2, [r7, #2]
 8006d1c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	785b      	ldrb	r3, [r3, #1]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d004      	beq.n	8006d30 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006d30:	78bb      	ldrb	r3, [r7, #2]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d102      	bne.n	8006d3c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d101      	bne.n	8006d4a <HAL_PCD_EP_Open+0xaa>
 8006d46:	2302      	movs	r3, #2
 8006d48:	e00e      	b.n	8006d68 <HAL_PCD_EP_Open+0xc8>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68f9      	ldr	r1, [r7, #12]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f003 f9d7 	bl	800a10c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006d66:	7afb      	ldrb	r3, [r7, #11]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006d7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	da0f      	bge.n	8006da4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d84:	78fb      	ldrb	r3, [r7, #3]
 8006d86:	f003 020f 	and.w	r2, r3, #15
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	00db      	lsls	r3, r3, #3
 8006d8e:	1a9b      	subs	r3, r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	3338      	adds	r3, #56	; 0x38
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	4413      	add	r3, r2
 8006d98:	3304      	adds	r3, #4
 8006d9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	705a      	strb	r2, [r3, #1]
 8006da2:	e00f      	b.n	8006dc4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	f003 020f 	and.w	r2, r3, #15
 8006daa:	4613      	mov	r3, r2
 8006dac:	00db      	lsls	r3, r3, #3
 8006dae:	1a9b      	subs	r3, r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	4413      	add	r3, r2
 8006dba:	3304      	adds	r3, #4
 8006dbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006dc4:	78fb      	ldrb	r3, [r7, #3]
 8006dc6:	f003 030f 	and.w	r3, r3, #15
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d101      	bne.n	8006dde <HAL_PCD_EP_Close+0x6e>
 8006dda:	2302      	movs	r3, #2
 8006ddc:	e00e      	b.n	8006dfc <HAL_PCD_EP_Close+0x8c>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68f9      	ldr	r1, [r7, #12]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f003 fa15 	bl	800a21c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	607a      	str	r2, [r7, #4]
 8006e0e:	603b      	str	r3, [r7, #0]
 8006e10:	460b      	mov	r3, r1
 8006e12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e14:	7afb      	ldrb	r3, [r7, #11]
 8006e16:	f003 020f 	and.w	r2, r3, #15
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	00db      	lsls	r3, r3, #3
 8006e1e:	1a9b      	subs	r3, r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	4413      	add	r3, r2
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	2200      	movs	r2, #0
 8006e44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e46:	7afb      	ldrb	r3, [r7, #11]
 8006e48:	f003 030f 	and.w	r3, r3, #15
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d102      	bne.n	8006e60 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006e60:	7afb      	ldrb	r3, [r7, #11]
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d109      	bne.n	8006e7e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6818      	ldr	r0, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	6979      	ldr	r1, [r7, #20]
 8006e78:	f003 fcf0 	bl	800a85c <USB_EP0StartXfer>
 8006e7c:	e008      	b.n	8006e90 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	461a      	mov	r2, r3
 8006e8a:	6979      	ldr	r1, [r7, #20]
 8006e8c:	f003 faa2 	bl	800a3d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006ea6:	78fb      	ldrb	r3, [r7, #3]
 8006ea8:	f003 020f 	and.w	r2, r3, #15
 8006eac:	6879      	ldr	r1, [r7, #4]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	00db      	lsls	r3, r3, #3
 8006eb2:	1a9b      	subs	r3, r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	440b      	add	r3, r1
 8006eb8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006ebc:	681b      	ldr	r3, [r3, #0]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b086      	sub	sp, #24
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	607a      	str	r2, [r7, #4]
 8006ed4:	603b      	str	r3, [r7, #0]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006eda:	7afb      	ldrb	r3, [r7, #11]
 8006edc:	f003 020f 	and.w	r2, r3, #15
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	3338      	adds	r3, #56	; 0x38
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	4413      	add	r3, r2
 8006eee:	3304      	adds	r3, #4
 8006ef0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2200      	movs	r2, #0
 8006f02:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	2201      	movs	r2, #1
 8006f08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f0a:	7afb      	ldrb	r3, [r7, #11]
 8006f0c:	f003 030f 	and.w	r3, r3, #15
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d102      	bne.n	8006f24 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006f24:	7afb      	ldrb	r3, [r7, #11]
 8006f26:	f003 030f 	and.w	r3, r3, #15
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d109      	bne.n	8006f42 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6818      	ldr	r0, [r3, #0]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	6979      	ldr	r1, [r7, #20]
 8006f3c:	f003 fc8e 	bl	800a85c <USB_EP0StartXfer>
 8006f40:	e008      	b.n	8006f54 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6818      	ldr	r0, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	6979      	ldr	r1, [r7, #20]
 8006f50:	f003 fa40 	bl	800a3d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b084      	sub	sp, #16
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	460b      	mov	r3, r1
 8006f68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006f6a:	78fb      	ldrb	r3, [r7, #3]
 8006f6c:	f003 020f 	and.w	r2, r3, #15
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d901      	bls.n	8006f7c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e050      	b.n	800701e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	da0f      	bge.n	8006fa4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f84:	78fb      	ldrb	r3, [r7, #3]
 8006f86:	f003 020f 	and.w	r2, r3, #15
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	00db      	lsls	r3, r3, #3
 8006f8e:	1a9b      	subs	r3, r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	3338      	adds	r3, #56	; 0x38
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	4413      	add	r3, r2
 8006f98:	3304      	adds	r3, #4
 8006f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	705a      	strb	r2, [r3, #1]
 8006fa2:	e00d      	b.n	8006fc0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006fa4:	78fa      	ldrb	r2, [r7, #3]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	00db      	lsls	r3, r3, #3
 8006faa:	1a9b      	subs	r3, r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006fc6:	78fb      	ldrb	r3, [r7, #3]
 8006fc8:	f003 030f 	and.w	r3, r3, #15
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d101      	bne.n	8006fe0 <HAL_PCD_EP_SetStall+0x82>
 8006fdc:	2302      	movs	r3, #2
 8006fde:	e01e      	b.n	800701e <HAL_PCD_EP_SetStall+0xc0>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68f9      	ldr	r1, [r7, #12]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f003 fde5 	bl	800abbe <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006ff4:	78fb      	ldrb	r3, [r7, #3]
 8006ff6:	f003 030f 	and.w	r3, r3, #15
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10a      	bne.n	8007014 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6818      	ldr	r0, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	b2d9      	uxtb	r1, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800700e:	461a      	mov	r2, r3
 8007010:	f003 ffc4 	bl	800af9c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	460b      	mov	r3, r1
 8007030:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007032:	78fb      	ldrb	r3, [r7, #3]
 8007034:	f003 020f 	and.w	r2, r3, #15
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	429a      	cmp	r2, r3
 800703e:	d901      	bls.n	8007044 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e042      	b.n	80070ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007044:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007048:	2b00      	cmp	r3, #0
 800704a:	da0f      	bge.n	800706c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800704c:	78fb      	ldrb	r3, [r7, #3]
 800704e:	f003 020f 	and.w	r2, r3, #15
 8007052:	4613      	mov	r3, r2
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	1a9b      	subs	r3, r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	3338      	adds	r3, #56	; 0x38
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	4413      	add	r3, r2
 8007060:	3304      	adds	r3, #4
 8007062:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2201      	movs	r2, #1
 8007068:	705a      	strb	r2, [r3, #1]
 800706a:	e00f      	b.n	800708c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800706c:	78fb      	ldrb	r3, [r7, #3]
 800706e:	f003 020f 	and.w	r2, r3, #15
 8007072:	4613      	mov	r3, r2
 8007074:	00db      	lsls	r3, r3, #3
 8007076:	1a9b      	subs	r3, r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	4413      	add	r3, r2
 8007082:	3304      	adds	r3, #4
 8007084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007092:	78fb      	ldrb	r3, [r7, #3]
 8007094:	f003 030f 	and.w	r3, r3, #15
 8007098:	b2da      	uxtb	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d101      	bne.n	80070ac <HAL_PCD_EP_ClrStall+0x86>
 80070a8:	2302      	movs	r3, #2
 80070aa:	e00e      	b.n	80070ca <HAL_PCD_EP_ClrStall+0xa4>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68f9      	ldr	r1, [r7, #12]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f003 fded 	bl	800ac9a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b08a      	sub	sp, #40	; 0x28
 80070d6:	af02      	add	r7, sp, #8
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	4613      	mov	r3, r2
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	1a9b      	subs	r3, r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	3338      	adds	r3, #56	; 0x38
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	4413      	add	r3, r2
 80070f6:	3304      	adds	r3, #4
 80070f8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	699a      	ldr	r2, [r3, #24]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	429a      	cmp	r2, r3
 8007104:	d901      	bls.n	800710a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e06c      	b.n	80071e4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	695a      	ldr	r2, [r3, #20]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	69fa      	ldr	r2, [r7, #28]
 800711c:	429a      	cmp	r2, r3
 800711e:	d902      	bls.n	8007126 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	3303      	adds	r3, #3
 800712a:	089b      	lsrs	r3, r3, #2
 800712c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800712e:	e02b      	b.n	8007188 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	695a      	ldr	r2, [r3, #20]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	69fa      	ldr	r2, [r7, #28]
 8007142:	429a      	cmp	r2, r3
 8007144:	d902      	bls.n	800714c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	3303      	adds	r3, #3
 8007150:	089b      	lsrs	r3, r3, #2
 8007152:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	68d9      	ldr	r1, [r3, #12]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	b2da      	uxtb	r2, r3
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007164:	b2db      	uxtb	r3, r3
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	4603      	mov	r3, r0
 800716a:	6978      	ldr	r0, [r7, #20]
 800716c:	f003 fcc9 	bl	800ab02 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	68da      	ldr	r2, [r3, #12]
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	441a      	add	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	699a      	ldr	r2, [r3, #24]
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	441a      	add	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	4413      	add	r3, r2
 8007190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	b29b      	uxth	r3, r3
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	429a      	cmp	r2, r3
 800719c:	d809      	bhi.n	80071b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	699a      	ldr	r2, [r3, #24]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d203      	bcs.n	80071b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1be      	bne.n	8007130 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	695a      	ldr	r2, [r3, #20]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d811      	bhi.n	80071e2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	f003 030f 	and.w	r3, r3, #15
 80071c4:	2201      	movs	r2, #1
 80071c6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ca:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	43db      	mvns	r3, r3
 80071d8:	6939      	ldr	r1, [r7, #16]
 80071da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071de:	4013      	ands	r3, r2
 80071e0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3720      	adds	r7, #32
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	333c      	adds	r3, #60	; 0x3c
 8007204:	3304      	adds	r3, #4
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	015a      	lsls	r2, r3, #5
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	4413      	add	r3, r2
 8007212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	2b01      	cmp	r3, #1
 8007220:	f040 80a0 	bne.w	8007364 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f003 0308 	and.w	r3, r3, #8
 800722a:	2b00      	cmp	r3, #0
 800722c:	d015      	beq.n	800725a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4a72      	ldr	r2, [pc, #456]	; (80073fc <PCD_EP_OutXfrComplete_int+0x210>)
 8007232:	4293      	cmp	r3, r2
 8007234:	f240 80dd 	bls.w	80073f2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 80d7 	beq.w	80073f2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007250:	461a      	mov	r2, r3
 8007252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007256:	6093      	str	r3, [r2, #8]
 8007258:	e0cb      	b.n	80073f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	f003 0320 	and.w	r3, r3, #32
 8007260:	2b00      	cmp	r3, #0
 8007262:	d009      	beq.n	8007278 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007270:	461a      	mov	r2, r3
 8007272:	2320      	movs	r3, #32
 8007274:	6093      	str	r3, [r2, #8]
 8007276:	e0bc      	b.n	80073f2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800727e:	2b00      	cmp	r3, #0
 8007280:	f040 80b7 	bne.w	80073f2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4a5d      	ldr	r2, [pc, #372]	; (80073fc <PCD_EP_OutXfrComplete_int+0x210>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d90f      	bls.n	80072ac <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00a      	beq.n	80072ac <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	4413      	add	r3, r2
 800729e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a2:	461a      	mov	r2, r3
 80072a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072a8:	6093      	str	r3, [r2, #8]
 80072aa:	e0a2      	b.n	80073f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80072ac:	6879      	ldr	r1, [r7, #4]
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	4613      	mov	r3, r2
 80072b2:	00db      	lsls	r3, r3, #3
 80072b4:	1a9b      	subs	r3, r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	440b      	add	r3, r1
 80072ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80072be:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	0159      	lsls	r1, r3, #5
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	440b      	add	r3, r1
 80072c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80072d2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	4613      	mov	r3, r2
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	1a9b      	subs	r3, r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4403      	add	r3, r0
 80072e2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80072e6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	4613      	mov	r3, r2
 80072ee:	00db      	lsls	r3, r3, #3
 80072f0:	1a9b      	subs	r3, r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	440b      	add	r3, r1
 80072f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80072fa:	6819      	ldr	r1, [r3, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	683a      	ldr	r2, [r7, #0]
 8007300:	4613      	mov	r3, r2
 8007302:	00db      	lsls	r3, r3, #3
 8007304:	1a9b      	subs	r3, r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4403      	add	r3, r0
 800730a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4419      	add	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	4613      	mov	r3, r2
 8007318:	00db      	lsls	r3, r3, #3
 800731a:	1a9b      	subs	r3, r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4403      	add	r3, r0
 8007320:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007324:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d114      	bne.n	8007356 <PCD_EP_OutXfrComplete_int+0x16a>
 800732c:	6879      	ldr	r1, [r7, #4]
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	4613      	mov	r3, r2
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	1a9b      	subs	r3, r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	440b      	add	r3, r1
 800733a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d108      	bne.n	8007356 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6818      	ldr	r0, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800734e:	461a      	mov	r2, r3
 8007350:	2101      	movs	r1, #1
 8007352:	f003 fe23 	bl	800af9c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	b2db      	uxtb	r3, r3
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f005 fe61 	bl	800d024 <HAL_PCD_DataOutStageCallback>
 8007362:	e046      	b.n	80073f2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4a26      	ldr	r2, [pc, #152]	; (8007400 <PCD_EP_OutXfrComplete_int+0x214>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d124      	bne.n	80073b6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00a      	beq.n	800738c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007382:	461a      	mov	r2, r3
 8007384:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007388:	6093      	str	r3, [r2, #8]
 800738a:	e032      	b.n	80073f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f003 0320 	and.w	r3, r3, #32
 8007392:	2b00      	cmp	r3, #0
 8007394:	d008      	beq.n	80073a8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a2:	461a      	mov	r2, r3
 80073a4:	2320      	movs	r3, #32
 80073a6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f005 fe38 	bl	800d024 <HAL_PCD_DataOutStageCallback>
 80073b4:	e01d      	b.n	80073f2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d114      	bne.n	80073e6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	4613      	mov	r3, r2
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	1a9b      	subs	r3, r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	440b      	add	r3, r1
 80073ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d108      	bne.n	80073e6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6818      	ldr	r0, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80073de:	461a      	mov	r2, r3
 80073e0:	2100      	movs	r1, #0
 80073e2:	f003 fddb 	bl	800af9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f005 fe19 	bl	800d024 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	4f54300a 	.word	0x4f54300a
 8007400:	4f54310a 	.word	0x4f54310a

08007404 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	333c      	adds	r3, #60	; 0x3c
 800741c:	3304      	adds	r3, #4
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	4413      	add	r3, r2
 800742a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	4a15      	ldr	r2, [pc, #84]	; (800748c <PCD_EP_OutSetupPacket_int+0x88>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d90e      	bls.n	8007458 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007440:	2b00      	cmp	r3, #0
 8007442:	d009      	beq.n	8007458 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007450:	461a      	mov	r2, r3
 8007452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007456:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f005 fdd1 	bl	800d000 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4a0a      	ldr	r2, [pc, #40]	; (800748c <PCD_EP_OutSetupPacket_int+0x88>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d90c      	bls.n	8007480 <PCD_EP_OutSetupPacket_int+0x7c>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d108      	bne.n	8007480 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6818      	ldr	r0, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007478:	461a      	mov	r2, r3
 800747a:	2101      	movs	r1, #1
 800747c:	f003 fd8e 	bl	800af9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3718      	adds	r7, #24
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	4f54300a 	.word	0x4f54300a

08007490 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	70fb      	strb	r3, [r7, #3]
 800749c:	4613      	mov	r3, r2
 800749e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80074a8:	78fb      	ldrb	r3, [r7, #3]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d107      	bne.n	80074be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80074ae:	883b      	ldrh	r3, [r7, #0]
 80074b0:	0419      	lsls	r1, r3, #16
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	629a      	str	r2, [r3, #40]	; 0x28
 80074bc:	e028      	b.n	8007510 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c4:	0c1b      	lsrs	r3, r3, #16
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	4413      	add	r3, r2
 80074ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80074cc:	2300      	movs	r3, #0
 80074ce:	73fb      	strb	r3, [r7, #15]
 80074d0:	e00d      	b.n	80074ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
 80074d8:	3340      	adds	r3, #64	; 0x40
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	0c1b      	lsrs	r3, r3, #16
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	4413      	add	r3, r2
 80074e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
 80074ea:	3301      	adds	r3, #1
 80074ec:	73fb      	strb	r3, [r7, #15]
 80074ee:	7bfa      	ldrb	r2, [r7, #15]
 80074f0:	78fb      	ldrb	r3, [r7, #3]
 80074f2:	3b01      	subs	r3, #1
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d3ec      	bcc.n	80074d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80074f8:	883b      	ldrh	r3, [r7, #0]
 80074fa:	0418      	lsls	r0, r3, #16
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6819      	ldr	r1, [r3, #0]
 8007500:	78fb      	ldrb	r3, [r7, #3]
 8007502:	3b01      	subs	r3, #1
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	4302      	orrs	r2, r0
 8007508:	3340      	adds	r3, #64	; 0x40
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	440b      	add	r3, r1
 800750e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	460b      	mov	r3, r1
 8007528:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	887a      	ldrh	r2, [r7, #2]
 8007530:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	460b      	mov	r3, r1
 800754a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e25b      	b.n	8007a22 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	d075      	beq.n	8007662 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007576:	4ba3      	ldr	r3, [pc, #652]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f003 030c 	and.w	r3, r3, #12
 800757e:	2b04      	cmp	r3, #4
 8007580:	d00c      	beq.n	800759c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007582:	4ba0      	ldr	r3, [pc, #640]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800758a:	2b08      	cmp	r3, #8
 800758c:	d112      	bne.n	80075b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800758e:	4b9d      	ldr	r3, [pc, #628]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800759a:	d10b      	bne.n	80075b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800759c:	4b99      	ldr	r3, [pc, #612]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d05b      	beq.n	8007660 <HAL_RCC_OscConfig+0x108>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d157      	bne.n	8007660 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e236      	b.n	8007a22 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075bc:	d106      	bne.n	80075cc <HAL_RCC_OscConfig+0x74>
 80075be:	4b91      	ldr	r3, [pc, #580]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a90      	ldr	r2, [pc, #576]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80075c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	e01d      	b.n	8007608 <HAL_RCC_OscConfig+0xb0>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075d4:	d10c      	bne.n	80075f0 <HAL_RCC_OscConfig+0x98>
 80075d6:	4b8b      	ldr	r3, [pc, #556]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a8a      	ldr	r2, [pc, #552]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80075dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	4b88      	ldr	r3, [pc, #544]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a87      	ldr	r2, [pc, #540]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80075e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	e00b      	b.n	8007608 <HAL_RCC_OscConfig+0xb0>
 80075f0:	4b84      	ldr	r3, [pc, #528]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a83      	ldr	r2, [pc, #524]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80075f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	4b81      	ldr	r3, [pc, #516]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a80      	ldr	r2, [pc, #512]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 8007602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d013      	beq.n	8007638 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007610:	f7fb fb1c 	bl	8002c4c <HAL_GetTick>
 8007614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007616:	e008      	b.n	800762a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007618:	f7fb fb18 	bl	8002c4c <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	2b64      	cmp	r3, #100	; 0x64
 8007624:	d901      	bls.n	800762a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e1fb      	b.n	8007a22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800762a:	4b76      	ldr	r3, [pc, #472]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0f0      	beq.n	8007618 <HAL_RCC_OscConfig+0xc0>
 8007636:	e014      	b.n	8007662 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007638:	f7fb fb08 	bl	8002c4c <HAL_GetTick>
 800763c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800763e:	e008      	b.n	8007652 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007640:	f7fb fb04 	bl	8002c4c <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	2b64      	cmp	r3, #100	; 0x64
 800764c:	d901      	bls.n	8007652 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e1e7      	b.n	8007a22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007652:	4b6c      	ldr	r3, [pc, #432]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1f0      	bne.n	8007640 <HAL_RCC_OscConfig+0xe8>
 800765e:	e000      	b.n	8007662 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b00      	cmp	r3, #0
 800766c:	d063      	beq.n	8007736 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800766e:	4b65      	ldr	r3, [pc, #404]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f003 030c 	and.w	r3, r3, #12
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00b      	beq.n	8007692 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800767a:	4b62      	ldr	r3, [pc, #392]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007682:	2b08      	cmp	r3, #8
 8007684:	d11c      	bne.n	80076c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007686:	4b5f      	ldr	r3, [pc, #380]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d116      	bne.n	80076c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007692:	4b5c      	ldr	r3, [pc, #368]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <HAL_RCC_OscConfig+0x152>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d001      	beq.n	80076aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e1bb      	b.n	8007a22 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076aa:	4b56      	ldr	r3, [pc, #344]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	00db      	lsls	r3, r3, #3
 80076b8:	4952      	ldr	r1, [pc, #328]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076be:	e03a      	b.n	8007736 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d020      	beq.n	800770a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076c8:	4b4f      	ldr	r3, [pc, #316]	; (8007808 <HAL_RCC_OscConfig+0x2b0>)
 80076ca:	2201      	movs	r2, #1
 80076cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ce:	f7fb fabd 	bl	8002c4c <HAL_GetTick>
 80076d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076d4:	e008      	b.n	80076e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076d6:	f7fb fab9 	bl	8002c4c <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d901      	bls.n	80076e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e19c      	b.n	8007a22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076e8:	4b46      	ldr	r3, [pc, #280]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0302 	and.w	r3, r3, #2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d0f0      	beq.n	80076d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076f4:	4b43      	ldr	r3, [pc, #268]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	00db      	lsls	r3, r3, #3
 8007702:	4940      	ldr	r1, [pc, #256]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 8007704:	4313      	orrs	r3, r2
 8007706:	600b      	str	r3, [r1, #0]
 8007708:	e015      	b.n	8007736 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800770a:	4b3f      	ldr	r3, [pc, #252]	; (8007808 <HAL_RCC_OscConfig+0x2b0>)
 800770c:	2200      	movs	r2, #0
 800770e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007710:	f7fb fa9c 	bl	8002c4c <HAL_GetTick>
 8007714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007716:	e008      	b.n	800772a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007718:	f7fb fa98 	bl	8002c4c <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	2b02      	cmp	r3, #2
 8007724:	d901      	bls.n	800772a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e17b      	b.n	8007a22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800772a:	4b36      	ldr	r3, [pc, #216]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1f0      	bne.n	8007718 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0308 	and.w	r3, r3, #8
 800773e:	2b00      	cmp	r3, #0
 8007740:	d030      	beq.n	80077a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d016      	beq.n	8007778 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800774a:	4b30      	ldr	r3, [pc, #192]	; (800780c <HAL_RCC_OscConfig+0x2b4>)
 800774c:	2201      	movs	r2, #1
 800774e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007750:	f7fb fa7c 	bl	8002c4c <HAL_GetTick>
 8007754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007756:	e008      	b.n	800776a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007758:	f7fb fa78 	bl	8002c4c <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	2b02      	cmp	r3, #2
 8007764:	d901      	bls.n	800776a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e15b      	b.n	8007a22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800776a:	4b26      	ldr	r3, [pc, #152]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 800776c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0f0      	beq.n	8007758 <HAL_RCC_OscConfig+0x200>
 8007776:	e015      	b.n	80077a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007778:	4b24      	ldr	r3, [pc, #144]	; (800780c <HAL_RCC_OscConfig+0x2b4>)
 800777a:	2200      	movs	r2, #0
 800777c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800777e:	f7fb fa65 	bl	8002c4c <HAL_GetTick>
 8007782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007784:	e008      	b.n	8007798 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007786:	f7fb fa61 	bl	8002c4c <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b02      	cmp	r3, #2
 8007792:	d901      	bls.n	8007798 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e144      	b.n	8007a22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007798:	4b1a      	ldr	r3, [pc, #104]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 800779a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800779c:	f003 0302 	and.w	r3, r3, #2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1f0      	bne.n	8007786 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0304 	and.w	r3, r3, #4
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 80a0 	beq.w	80078f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077b2:	2300      	movs	r3, #0
 80077b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077b6:	4b13      	ldr	r3, [pc, #76]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10f      	bne.n	80077e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077c2:	2300      	movs	r3, #0
 80077c4:	60bb      	str	r3, [r7, #8]
 80077c6:	4b0f      	ldr	r3, [pc, #60]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80077c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ca:	4a0e      	ldr	r2, [pc, #56]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80077cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077d0:	6413      	str	r3, [r2, #64]	; 0x40
 80077d2:	4b0c      	ldr	r3, [pc, #48]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80077d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077da:	60bb      	str	r3, [r7, #8]
 80077dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077de:	2301      	movs	r3, #1
 80077e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077e2:	4b0b      	ldr	r3, [pc, #44]	; (8007810 <HAL_RCC_OscConfig+0x2b8>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d121      	bne.n	8007832 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80077ee:	4b08      	ldr	r3, [pc, #32]	; (8007810 <HAL_RCC_OscConfig+0x2b8>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a07      	ldr	r2, [pc, #28]	; (8007810 <HAL_RCC_OscConfig+0x2b8>)
 80077f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077fa:	f7fb fa27 	bl	8002c4c <HAL_GetTick>
 80077fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007800:	e011      	b.n	8007826 <HAL_RCC_OscConfig+0x2ce>
 8007802:	bf00      	nop
 8007804:	40023800 	.word	0x40023800
 8007808:	42470000 	.word	0x42470000
 800780c:	42470e80 	.word	0x42470e80
 8007810:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007814:	f7fb fa1a 	bl	8002c4c <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	2b02      	cmp	r3, #2
 8007820:	d901      	bls.n	8007826 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e0fd      	b.n	8007a22 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007826:	4b81      	ldr	r3, [pc, #516]	; (8007a2c <HAL_RCC_OscConfig+0x4d4>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800782e:	2b00      	cmp	r3, #0
 8007830:	d0f0      	beq.n	8007814 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d106      	bne.n	8007848 <HAL_RCC_OscConfig+0x2f0>
 800783a:	4b7d      	ldr	r3, [pc, #500]	; (8007a30 <HAL_RCC_OscConfig+0x4d8>)
 800783c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783e:	4a7c      	ldr	r2, [pc, #496]	; (8007a30 <HAL_RCC_OscConfig+0x4d8>)
 8007840:	f043 0301 	orr.w	r3, r3, #1
 8007844:	6713      	str	r3, [r2, #112]	; 0x70
 8007846:	e01c      	b.n	8007882 <HAL_RCC_OscConfig+0x32a>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	2b05      	cmp	r3, #5
 800784e:	d10c      	bne.n	800786a <HAL_RCC_OscConfig+0x312>
 8007850:	4b77      	ldr	r3, [pc, #476]	; (8007a30 <HAL_RCC_OscConfig+0x4d8>)
 8007852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007854:	4a76      	ldr	r2, [pc, #472]	; (8007a30 <HAL_RCC_OscConfig+0x4d8>)
 8007856:	f043 0304 	orr.w	r3, r3, #4
 800785a:	6713      	str	r3, [r2, #112]	; 0x70
 800785c:	4b74      	ldr	r3, [pc, #464]	; (8007a30 <HAL_RCC_OscConfig+0x4d8>)
 800785e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007860:	4a73      	ldr	r2, [pc, #460]	; (8007a30 <HAL_RCC_OscConfig+0x4d8>)
 8007862:	f043 0301 	orr.w	r3, r3, #1
 8007866:	6713      	str	r3, [r2, #112]	; 0x70
 8007868:	e00b      	b.n	8007882 <HAL_RCC_OscConfig+0x32a>
 800786a:	4b71      	ldr	r3, [pc, #452]	; (8007a30 <HAL_RCC_OscConfig+0x4d8>)
 800786c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786e:	4a70      	ldr	r2, [pc, #448]	; (8007a30 <HAL_RCC_OscConfig+0x4d8>)
 8007870:	f023 0301 	bic.w	r3, r3, #1
 8007874:	6713      	str	r3, [r2, #112]	; 0x70
 8007876:	4b6e      	ldr	r3, [pc, #440]	; (8007a30 <HAL_RCC_OscConfig+0x4d8>)
 8007878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787a:	4a6d      	ldr	r2, [pc, #436]	; (8007a30 <HAL_RCC_OscConfig+0x4d8>)
 800787c:	f023 0304 	bic.w	r3, r3, #4
 8007880:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d015      	beq.n	80078b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800788a:	f7fb f9df 	bl	8002c4c <HAL_GetTick>
 800788e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007890:	e00a      	b.n	80078a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007892:	f7fb f9db 	bl	8002c4c <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	f241 3288 	movw	r2, #5000	; 0x1388
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d901      	bls.n	80078a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e0bc      	b.n	8007a22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078a8:	4b61      	ldr	r3, [pc, #388]	; (8007a30 <HAL_RCC_OscConfig+0x4d8>)
 80078aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ac:	f003 0302 	and.w	r3, r3, #2
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d0ee      	beq.n	8007892 <HAL_RCC_OscConfig+0x33a>
 80078b4:	e014      	b.n	80078e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078b6:	f7fb f9c9 	bl	8002c4c <HAL_GetTick>
 80078ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078bc:	e00a      	b.n	80078d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078be:	f7fb f9c5 	bl	8002c4c <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d901      	bls.n	80078d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e0a6      	b.n	8007a22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078d4:	4b56      	ldr	r3, [pc, #344]	; (8007a30 <HAL_RCC_OscConfig+0x4d8>)
 80078d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d8:	f003 0302 	and.w	r3, r3, #2
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1ee      	bne.n	80078be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078e0:	7dfb      	ldrb	r3, [r7, #23]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d105      	bne.n	80078f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078e6:	4b52      	ldr	r3, [pc, #328]	; (8007a30 <HAL_RCC_OscConfig+0x4d8>)
 80078e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ea:	4a51      	ldr	r2, [pc, #324]	; (8007a30 <HAL_RCC_OscConfig+0x4d8>)
 80078ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 8092 	beq.w	8007a20 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80078fc:	4b4c      	ldr	r3, [pc, #304]	; (8007a30 <HAL_RCC_OscConfig+0x4d8>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f003 030c 	and.w	r3, r3, #12
 8007904:	2b08      	cmp	r3, #8
 8007906:	d05c      	beq.n	80079c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	2b02      	cmp	r3, #2
 800790e:	d141      	bne.n	8007994 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007910:	4b48      	ldr	r3, [pc, #288]	; (8007a34 <HAL_RCC_OscConfig+0x4dc>)
 8007912:	2200      	movs	r2, #0
 8007914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007916:	f7fb f999 	bl	8002c4c <HAL_GetTick>
 800791a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800791c:	e008      	b.n	8007930 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800791e:	f7fb f995 	bl	8002c4c <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	2b02      	cmp	r3, #2
 800792a:	d901      	bls.n	8007930 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e078      	b.n	8007a22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007930:	4b3f      	ldr	r3, [pc, #252]	; (8007a30 <HAL_RCC_OscConfig+0x4d8>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1f0      	bne.n	800791e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	69da      	ldr	r2, [r3, #28]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	431a      	orrs	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794a:	019b      	lsls	r3, r3, #6
 800794c:	431a      	orrs	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007952:	085b      	lsrs	r3, r3, #1
 8007954:	3b01      	subs	r3, #1
 8007956:	041b      	lsls	r3, r3, #16
 8007958:	431a      	orrs	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795e:	061b      	lsls	r3, r3, #24
 8007960:	4933      	ldr	r1, [pc, #204]	; (8007a30 <HAL_RCC_OscConfig+0x4d8>)
 8007962:	4313      	orrs	r3, r2
 8007964:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007966:	4b33      	ldr	r3, [pc, #204]	; (8007a34 <HAL_RCC_OscConfig+0x4dc>)
 8007968:	2201      	movs	r2, #1
 800796a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800796c:	f7fb f96e 	bl	8002c4c <HAL_GetTick>
 8007970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007972:	e008      	b.n	8007986 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007974:	f7fb f96a 	bl	8002c4c <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	2b02      	cmp	r3, #2
 8007980:	d901      	bls.n	8007986 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e04d      	b.n	8007a22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007986:	4b2a      	ldr	r3, [pc, #168]	; (8007a30 <HAL_RCC_OscConfig+0x4d8>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0f0      	beq.n	8007974 <HAL_RCC_OscConfig+0x41c>
 8007992:	e045      	b.n	8007a20 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007994:	4b27      	ldr	r3, [pc, #156]	; (8007a34 <HAL_RCC_OscConfig+0x4dc>)
 8007996:	2200      	movs	r2, #0
 8007998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800799a:	f7fb f957 	bl	8002c4c <HAL_GetTick>
 800799e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079a0:	e008      	b.n	80079b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079a2:	f7fb f953 	bl	8002c4c <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d901      	bls.n	80079b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e036      	b.n	8007a22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079b4:	4b1e      	ldr	r3, [pc, #120]	; (8007a30 <HAL_RCC_OscConfig+0x4d8>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1f0      	bne.n	80079a2 <HAL_RCC_OscConfig+0x44a>
 80079c0:	e02e      	b.n	8007a20 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d101      	bne.n	80079ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e029      	b.n	8007a22 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079ce:	4b18      	ldr	r3, [pc, #96]	; (8007a30 <HAL_RCC_OscConfig+0x4d8>)
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	69db      	ldr	r3, [r3, #28]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d11c      	bne.n	8007a1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d115      	bne.n	8007a1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80079f6:	4013      	ands	r3, r2
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d10d      	bne.n	8007a1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d106      	bne.n	8007a1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d001      	beq.n	8007a20 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e000      	b.n	8007a22 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3718      	adds	r7, #24
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	40007000 	.word	0x40007000
 8007a30:	40023800 	.word	0x40023800
 8007a34:	42470060 	.word	0x42470060

08007a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d101      	bne.n	8007a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e0cc      	b.n	8007be6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a4c:	4b68      	ldr	r3, [pc, #416]	; (8007bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 030f 	and.w	r3, r3, #15
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d90c      	bls.n	8007a74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a5a:	4b65      	ldr	r3, [pc, #404]	; (8007bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8007a5c:	683a      	ldr	r2, [r7, #0]
 8007a5e:	b2d2      	uxtb	r2, r2
 8007a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a62:	4b63      	ldr	r3, [pc, #396]	; (8007bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 030f 	and.w	r3, r3, #15
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d001      	beq.n	8007a74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e0b8      	b.n	8007be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0302 	and.w	r3, r3, #2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d020      	beq.n	8007ac2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0304 	and.w	r3, r3, #4
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d005      	beq.n	8007a98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a8c:	4b59      	ldr	r3, [pc, #356]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	4a58      	ldr	r2, [pc, #352]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007a92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0308 	and.w	r3, r3, #8
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d005      	beq.n	8007ab0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007aa4:	4b53      	ldr	r3, [pc, #332]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	4a52      	ldr	r2, [pc, #328]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007aaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007aae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ab0:	4b50      	ldr	r3, [pc, #320]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	494d      	ldr	r1, [pc, #308]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d044      	beq.n	8007b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d107      	bne.n	8007ae6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ad6:	4b47      	ldr	r3, [pc, #284]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d119      	bne.n	8007b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e07f      	b.n	8007be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d003      	beq.n	8007af6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	d107      	bne.n	8007b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007af6:	4b3f      	ldr	r3, [pc, #252]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d109      	bne.n	8007b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e06f      	b.n	8007be6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b06:	4b3b      	ldr	r3, [pc, #236]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0302 	and.w	r3, r3, #2
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d101      	bne.n	8007b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e067      	b.n	8007be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b16:	4b37      	ldr	r3, [pc, #220]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f023 0203 	bic.w	r2, r3, #3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	4934      	ldr	r1, [pc, #208]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b24:	4313      	orrs	r3, r2
 8007b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b28:	f7fb f890 	bl	8002c4c <HAL_GetTick>
 8007b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b2e:	e00a      	b.n	8007b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b30:	f7fb f88c 	bl	8002c4c <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d901      	bls.n	8007b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e04f      	b.n	8007be6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b46:	4b2b      	ldr	r3, [pc, #172]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f003 020c 	and.w	r2, r3, #12
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d1eb      	bne.n	8007b30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b58:	4b25      	ldr	r3, [pc, #148]	; (8007bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 030f 	and.w	r3, r3, #15
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d20c      	bcs.n	8007b80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b66:	4b22      	ldr	r3, [pc, #136]	; (8007bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	b2d2      	uxtb	r2, r2
 8007b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b6e:	4b20      	ldr	r3, [pc, #128]	; (8007bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 030f 	and.w	r3, r3, #15
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d001      	beq.n	8007b80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e032      	b.n	8007be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0304 	and.w	r3, r3, #4
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d008      	beq.n	8007b9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b8c:	4b19      	ldr	r3, [pc, #100]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	4916      	ldr	r1, [pc, #88]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 0308 	and.w	r3, r3, #8
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d009      	beq.n	8007bbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007baa:	4b12      	ldr	r3, [pc, #72]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	00db      	lsls	r3, r3, #3
 8007bb8:	490e      	ldr	r1, [pc, #56]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007bbe:	f000 f821 	bl	8007c04 <HAL_RCC_GetSysClockFreq>
 8007bc2:	4601      	mov	r1, r0
 8007bc4:	4b0b      	ldr	r3, [pc, #44]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	091b      	lsrs	r3, r3, #4
 8007bca:	f003 030f 	and.w	r3, r3, #15
 8007bce:	4a0a      	ldr	r2, [pc, #40]	; (8007bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8007bd0:	5cd3      	ldrb	r3, [r2, r3]
 8007bd2:	fa21 f303 	lsr.w	r3, r1, r3
 8007bd6:	4a09      	ldr	r2, [pc, #36]	; (8007bfc <HAL_RCC_ClockConfig+0x1c4>)
 8007bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007bda:	4b09      	ldr	r3, [pc, #36]	; (8007c00 <HAL_RCC_ClockConfig+0x1c8>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fa fff0 	bl	8002bc4 <HAL_InitTick>

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	40023c00 	.word	0x40023c00
 8007bf4:	40023800 	.word	0x40023800
 8007bf8:	08041668 	.word	0x08041668
 8007bfc:	20000090 	.word	0x20000090
 8007c00:	20000094 	.word	0x20000094

08007c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	607b      	str	r3, [r7, #4]
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
 8007c12:	2300      	movs	r3, #0
 8007c14:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c1a:	4b63      	ldr	r3, [pc, #396]	; (8007da8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f003 030c 	and.w	r3, r3, #12
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	d007      	beq.n	8007c36 <HAL_RCC_GetSysClockFreq+0x32>
 8007c26:	2b08      	cmp	r3, #8
 8007c28:	d008      	beq.n	8007c3c <HAL_RCC_GetSysClockFreq+0x38>
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f040 80b4 	bne.w	8007d98 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c30:	4b5e      	ldr	r3, [pc, #376]	; (8007dac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007c32:	60bb      	str	r3, [r7, #8]
       break;
 8007c34:	e0b3      	b.n	8007d9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c36:	4b5e      	ldr	r3, [pc, #376]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007c38:	60bb      	str	r3, [r7, #8]
      break;
 8007c3a:	e0b0      	b.n	8007d9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c3c:	4b5a      	ldr	r3, [pc, #360]	; (8007da8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c46:	4b58      	ldr	r3, [pc, #352]	; (8007da8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d04a      	beq.n	8007ce8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c52:	4b55      	ldr	r3, [pc, #340]	; (8007da8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	099b      	lsrs	r3, r3, #6
 8007c58:	f04f 0400 	mov.w	r4, #0
 8007c5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007c60:	f04f 0200 	mov.w	r2, #0
 8007c64:	ea03 0501 	and.w	r5, r3, r1
 8007c68:	ea04 0602 	and.w	r6, r4, r2
 8007c6c:	4629      	mov	r1, r5
 8007c6e:	4632      	mov	r2, r6
 8007c70:	f04f 0300 	mov.w	r3, #0
 8007c74:	f04f 0400 	mov.w	r4, #0
 8007c78:	0154      	lsls	r4, r2, #5
 8007c7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007c7e:	014b      	lsls	r3, r1, #5
 8007c80:	4619      	mov	r1, r3
 8007c82:	4622      	mov	r2, r4
 8007c84:	1b49      	subs	r1, r1, r5
 8007c86:	eb62 0206 	sbc.w	r2, r2, r6
 8007c8a:	f04f 0300 	mov.w	r3, #0
 8007c8e:	f04f 0400 	mov.w	r4, #0
 8007c92:	0194      	lsls	r4, r2, #6
 8007c94:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007c98:	018b      	lsls	r3, r1, #6
 8007c9a:	1a5b      	subs	r3, r3, r1
 8007c9c:	eb64 0402 	sbc.w	r4, r4, r2
 8007ca0:	f04f 0100 	mov.w	r1, #0
 8007ca4:	f04f 0200 	mov.w	r2, #0
 8007ca8:	00e2      	lsls	r2, r4, #3
 8007caa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007cae:	00d9      	lsls	r1, r3, #3
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	4614      	mov	r4, r2
 8007cb4:	195b      	adds	r3, r3, r5
 8007cb6:	eb44 0406 	adc.w	r4, r4, r6
 8007cba:	f04f 0100 	mov.w	r1, #0
 8007cbe:	f04f 0200 	mov.w	r2, #0
 8007cc2:	0262      	lsls	r2, r4, #9
 8007cc4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007cc8:	0259      	lsls	r1, r3, #9
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4614      	mov	r4, r2
 8007cce:	4618      	mov	r0, r3
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f04f 0400 	mov.w	r4, #0
 8007cd8:	461a      	mov	r2, r3
 8007cda:	4623      	mov	r3, r4
 8007cdc:	f7f8 fa74 	bl	80001c8 <__aeabi_uldivmod>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	60fb      	str	r3, [r7, #12]
 8007ce6:	e049      	b.n	8007d7c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ce8:	4b2f      	ldr	r3, [pc, #188]	; (8007da8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	099b      	lsrs	r3, r3, #6
 8007cee:	f04f 0400 	mov.w	r4, #0
 8007cf2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007cf6:	f04f 0200 	mov.w	r2, #0
 8007cfa:	ea03 0501 	and.w	r5, r3, r1
 8007cfe:	ea04 0602 	and.w	r6, r4, r2
 8007d02:	4629      	mov	r1, r5
 8007d04:	4632      	mov	r2, r6
 8007d06:	f04f 0300 	mov.w	r3, #0
 8007d0a:	f04f 0400 	mov.w	r4, #0
 8007d0e:	0154      	lsls	r4, r2, #5
 8007d10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007d14:	014b      	lsls	r3, r1, #5
 8007d16:	4619      	mov	r1, r3
 8007d18:	4622      	mov	r2, r4
 8007d1a:	1b49      	subs	r1, r1, r5
 8007d1c:	eb62 0206 	sbc.w	r2, r2, r6
 8007d20:	f04f 0300 	mov.w	r3, #0
 8007d24:	f04f 0400 	mov.w	r4, #0
 8007d28:	0194      	lsls	r4, r2, #6
 8007d2a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007d2e:	018b      	lsls	r3, r1, #6
 8007d30:	1a5b      	subs	r3, r3, r1
 8007d32:	eb64 0402 	sbc.w	r4, r4, r2
 8007d36:	f04f 0100 	mov.w	r1, #0
 8007d3a:	f04f 0200 	mov.w	r2, #0
 8007d3e:	00e2      	lsls	r2, r4, #3
 8007d40:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007d44:	00d9      	lsls	r1, r3, #3
 8007d46:	460b      	mov	r3, r1
 8007d48:	4614      	mov	r4, r2
 8007d4a:	195b      	adds	r3, r3, r5
 8007d4c:	eb44 0406 	adc.w	r4, r4, r6
 8007d50:	f04f 0100 	mov.w	r1, #0
 8007d54:	f04f 0200 	mov.w	r2, #0
 8007d58:	02a2      	lsls	r2, r4, #10
 8007d5a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007d5e:	0299      	lsls	r1, r3, #10
 8007d60:	460b      	mov	r3, r1
 8007d62:	4614      	mov	r4, r2
 8007d64:	4618      	mov	r0, r3
 8007d66:	4621      	mov	r1, r4
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f04f 0400 	mov.w	r4, #0
 8007d6e:	461a      	mov	r2, r3
 8007d70:	4623      	mov	r3, r4
 8007d72:	f7f8 fa29 	bl	80001c8 <__aeabi_uldivmod>
 8007d76:	4603      	mov	r3, r0
 8007d78:	460c      	mov	r4, r1
 8007d7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d7c:	4b0a      	ldr	r3, [pc, #40]	; (8007da8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	0c1b      	lsrs	r3, r3, #16
 8007d82:	f003 0303 	and.w	r3, r3, #3
 8007d86:	3301      	adds	r3, #1
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d94:	60bb      	str	r3, [r7, #8]
      break;
 8007d96:	e002      	b.n	8007d9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d98:	4b04      	ldr	r3, [pc, #16]	; (8007dac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007d9a:	60bb      	str	r3, [r7, #8]
      break;
 8007d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007da8:	40023800 	.word	0x40023800
 8007dac:	00f42400 	.word	0x00f42400
 8007db0:	007a1200 	.word	0x007a1200

08007db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007db4:	b480      	push	{r7}
 8007db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007db8:	4b03      	ldr	r3, [pc, #12]	; (8007dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007dba:	681b      	ldr	r3, [r3, #0]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	20000090 	.word	0x20000090

08007dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007dd0:	f7ff fff0 	bl	8007db4 <HAL_RCC_GetHCLKFreq>
 8007dd4:	4601      	mov	r1, r0
 8007dd6:	4b05      	ldr	r3, [pc, #20]	; (8007dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	0a9b      	lsrs	r3, r3, #10
 8007ddc:	f003 0307 	and.w	r3, r3, #7
 8007de0:	4a03      	ldr	r2, [pc, #12]	; (8007df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007de2:	5cd3      	ldrb	r3, [r2, r3]
 8007de4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	40023800 	.word	0x40023800
 8007df0:	08041678 	.word	0x08041678

08007df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007df8:	f7ff ffdc 	bl	8007db4 <HAL_RCC_GetHCLKFreq>
 8007dfc:	4601      	mov	r1, r0
 8007dfe:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	0b5b      	lsrs	r3, r3, #13
 8007e04:	f003 0307 	and.w	r3, r3, #7
 8007e08:	4a03      	ldr	r2, [pc, #12]	; (8007e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e0a:	5cd3      	ldrb	r3, [r2, r3]
 8007e0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	40023800 	.word	0x40023800
 8007e18:	08041678 	.word	0x08041678

08007e1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e056      	b.n	8007edc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d106      	bne.n	8007e4e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7fa fb89 	bl	8002560 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2202      	movs	r2, #2
 8007e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e64:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	431a      	orrs	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	431a      	orrs	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	431a      	orrs	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	69db      	ldr	r3, [r3, #28]
 8007e90:	431a      	orrs	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	ea42 0103 	orr.w	r1, r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	0c1b      	lsrs	r3, r3, #16
 8007eac:	f003 0104 	and.w	r1, r3, #4
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	69da      	ldr	r2, [r3, #28]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007eca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b088      	sub	sp, #32
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d101      	bne.n	8007f06 <HAL_SPI_Transmit+0x22>
 8007f02:	2302      	movs	r3, #2
 8007f04:	e11e      	b.n	8008144 <HAL_SPI_Transmit+0x260>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f0e:	f7fa fe9d 	bl	8002c4c <HAL_GetTick>
 8007f12:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007f14:	88fb      	ldrh	r3, [r7, #6]
 8007f16:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d002      	beq.n	8007f2a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007f24:	2302      	movs	r3, #2
 8007f26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f28:	e103      	b.n	8008132 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d002      	beq.n	8007f36 <HAL_SPI_Transmit+0x52>
 8007f30:	88fb      	ldrh	r3, [r7, #6]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d102      	bne.n	8007f3c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f3a:	e0fa      	b.n	8008132 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2203      	movs	r2, #3
 8007f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	88fa      	ldrh	r2, [r7, #6]
 8007f54:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	88fa      	ldrh	r2, [r7, #6]
 8007f5a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f82:	d107      	bne.n	8007f94 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9e:	2b40      	cmp	r3, #64	; 0x40
 8007fa0:	d007      	beq.n	8007fb2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fba:	d14b      	bne.n	8008054 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <HAL_SPI_Transmit+0xe6>
 8007fc4:	8afb      	ldrh	r3, [r7, #22]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d13e      	bne.n	8008048 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fce:	881a      	ldrh	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fda:	1c9a      	adds	r2, r3, #2
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007fee:	e02b      	b.n	8008048 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f003 0302 	and.w	r3, r3, #2
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d112      	bne.n	8008024 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008002:	881a      	ldrh	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800e:	1c9a      	adds	r2, r3, #2
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b01      	subs	r3, #1
 800801c:	b29a      	uxth	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	86da      	strh	r2, [r3, #54]	; 0x36
 8008022:	e011      	b.n	8008048 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008024:	f7fa fe12 	bl	8002c4c <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	429a      	cmp	r2, r3
 8008032:	d803      	bhi.n	800803c <HAL_SPI_Transmit+0x158>
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800803a:	d102      	bne.n	8008042 <HAL_SPI_Transmit+0x15e>
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d102      	bne.n	8008048 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008046:	e074      	b.n	8008132 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800804c:	b29b      	uxth	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1ce      	bne.n	8007ff0 <HAL_SPI_Transmit+0x10c>
 8008052:	e04c      	b.n	80080ee <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <HAL_SPI_Transmit+0x17e>
 800805c:	8afb      	ldrh	r3, [r7, #22]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d140      	bne.n	80080e4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	330c      	adds	r3, #12
 800806c:	7812      	ldrb	r2, [r2, #0]
 800806e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800807e:	b29b      	uxth	r3, r3
 8008080:	3b01      	subs	r3, #1
 8008082:	b29a      	uxth	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008088:	e02c      	b.n	80080e4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f003 0302 	and.w	r3, r3, #2
 8008094:	2b02      	cmp	r3, #2
 8008096:	d113      	bne.n	80080c0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	330c      	adds	r3, #12
 80080a2:	7812      	ldrb	r2, [r2, #0]
 80080a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	3b01      	subs	r3, #1
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80080be:	e011      	b.n	80080e4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080c0:	f7fa fdc4 	bl	8002c4c <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d803      	bhi.n	80080d8 <HAL_SPI_Transmit+0x1f4>
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080d6:	d102      	bne.n	80080de <HAL_SPI_Transmit+0x1fa>
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d102      	bne.n	80080e4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80080e2:	e026      	b.n	8008132 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1cd      	bne.n	800808a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080ee:	69ba      	ldr	r2, [r7, #24]
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f000 fcc4 	bl	8008a80 <SPI_EndRxTxTransaction>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d002      	beq.n	8008104 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2220      	movs	r2, #32
 8008102:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10a      	bne.n	8008122 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800810c:	2300      	movs	r3, #0
 800810e:	613b      	str	r3, [r7, #16]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	613b      	str	r3, [r7, #16]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	613b      	str	r3, [r7, #16]
 8008120:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008126:	2b00      	cmp	r3, #0
 8008128:	d002      	beq.n	8008130 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	77fb      	strb	r3, [r7, #31]
 800812e:	e000      	b.n	8008132 <HAL_SPI_Transmit+0x24e>
  }

error:
 8008130:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008142:	7ffb      	ldrb	r3, [r7, #31]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3720      	adds	r7, #32
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af02      	add	r7, sp, #8
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	603b      	str	r3, [r7, #0]
 8008158:	4613      	mov	r3, r2
 800815a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008168:	d112      	bne.n	8008190 <HAL_SPI_Receive+0x44>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10e      	bne.n	8008190 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2204      	movs	r2, #4
 8008176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800817a:	88fa      	ldrh	r2, [r7, #6]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	4613      	mov	r3, r2
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	68b9      	ldr	r1, [r7, #8]
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 f8e9 	bl	800835e <HAL_SPI_TransmitReceive>
 800818c:	4603      	mov	r3, r0
 800818e:	e0e2      	b.n	8008356 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008196:	2b01      	cmp	r3, #1
 8008198:	d101      	bne.n	800819e <HAL_SPI_Receive+0x52>
 800819a:	2302      	movs	r3, #2
 800819c:	e0db      	b.n	8008356 <HAL_SPI_Receive+0x20a>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081a6:	f7fa fd51 	bl	8002c4c <HAL_GetTick>
 80081aa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d002      	beq.n	80081be <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80081b8:	2302      	movs	r3, #2
 80081ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80081bc:	e0c2      	b.n	8008344 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <HAL_SPI_Receive+0x7e>
 80081c4:	88fb      	ldrh	r3, [r7, #6]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d102      	bne.n	80081d0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80081ce:	e0b9      	b.n	8008344 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2204      	movs	r2, #4
 80081d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	88fa      	ldrh	r2, [r7, #6]
 80081e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	88fa      	ldrh	r2, [r7, #6]
 80081ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008216:	d107      	bne.n	8008228 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008226:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008232:	2b40      	cmp	r3, #64	; 0x40
 8008234:	d007      	beq.n	8008246 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008244:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d162      	bne.n	8008314 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800824e:	e02e      	b.n	80082ae <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	2b01      	cmp	r3, #1
 800825c:	d115      	bne.n	800828a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f103 020c 	add.w	r2, r3, #12
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826a:	7812      	ldrb	r2, [r2, #0]
 800826c:	b2d2      	uxtb	r2, r2
 800826e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008274:	1c5a      	adds	r2, r3, #1
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800827e:	b29b      	uxth	r3, r3
 8008280:	3b01      	subs	r3, #1
 8008282:	b29a      	uxth	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008288:	e011      	b.n	80082ae <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800828a:	f7fa fcdf 	bl	8002c4c <HAL_GetTick>
 800828e:	4602      	mov	r2, r0
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	429a      	cmp	r2, r3
 8008298:	d803      	bhi.n	80082a2 <HAL_SPI_Receive+0x156>
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082a0:	d102      	bne.n	80082a8 <HAL_SPI_Receive+0x15c>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d102      	bne.n	80082ae <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80082a8:	2303      	movs	r3, #3
 80082aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80082ac:	e04a      	b.n	8008344 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1cb      	bne.n	8008250 <HAL_SPI_Receive+0x104>
 80082b8:	e031      	b.n	800831e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	f003 0301 	and.w	r3, r3, #1
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d113      	bne.n	80082f0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68da      	ldr	r2, [r3, #12]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d2:	b292      	uxth	r2, r2
 80082d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082da:	1c9a      	adds	r2, r3, #2
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	3b01      	subs	r3, #1
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082ee:	e011      	b.n	8008314 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082f0:	f7fa fcac 	bl	8002c4c <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d803      	bhi.n	8008308 <HAL_SPI_Receive+0x1bc>
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008306:	d102      	bne.n	800830e <HAL_SPI_Receive+0x1c2>
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d102      	bne.n	8008314 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008312:	e017      	b.n	8008344 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008318:	b29b      	uxth	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1cd      	bne.n	80082ba <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f000 fb46 	bl	80089b4 <SPI_EndRxTransaction>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d002      	beq.n	8008334 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2220      	movs	r2, #32
 8008332:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	75fb      	strb	r3, [r7, #23]
 8008340:	e000      	b.n	8008344 <HAL_SPI_Receive+0x1f8>
  }

error :
 8008342:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008354:	7dfb      	ldrb	r3, [r7, #23]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3718      	adds	r7, #24
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b08c      	sub	sp, #48	; 0x30
 8008362:	af00      	add	r7, sp, #0
 8008364:	60f8      	str	r0, [r7, #12]
 8008366:	60b9      	str	r1, [r7, #8]
 8008368:	607a      	str	r2, [r7, #4]
 800836a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800836c:	2301      	movs	r3, #1
 800836e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008370:	2300      	movs	r3, #0
 8008372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800837c:	2b01      	cmp	r3, #1
 800837e:	d101      	bne.n	8008384 <HAL_SPI_TransmitReceive+0x26>
 8008380:	2302      	movs	r3, #2
 8008382:	e18a      	b.n	800869a <HAL_SPI_TransmitReceive+0x33c>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800838c:	f7fa fc5e 	bl	8002c4c <HAL_GetTick>
 8008390:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80083a2:	887b      	ldrh	r3, [r7, #2]
 80083a4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80083a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d00f      	beq.n	80083ce <HAL_SPI_TransmitReceive+0x70>
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083b4:	d107      	bne.n	80083c6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d103      	bne.n	80083c6 <HAL_SPI_TransmitReceive+0x68>
 80083be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083c2:	2b04      	cmp	r3, #4
 80083c4:	d003      	beq.n	80083ce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80083c6:	2302      	movs	r3, #2
 80083c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80083cc:	e15b      	b.n	8008686 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d005      	beq.n	80083e0 <HAL_SPI_TransmitReceive+0x82>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <HAL_SPI_TransmitReceive+0x82>
 80083da:	887b      	ldrh	r3, [r7, #2]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d103      	bne.n	80083e8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80083e6:	e14e      	b.n	8008686 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	2b04      	cmp	r3, #4
 80083f2:	d003      	beq.n	80083fc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2205      	movs	r2, #5
 80083f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	887a      	ldrh	r2, [r7, #2]
 800840c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	887a      	ldrh	r2, [r7, #2]
 8008412:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	887a      	ldrh	r2, [r7, #2]
 800841e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	887a      	ldrh	r2, [r7, #2]
 8008424:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800843c:	2b40      	cmp	r3, #64	; 0x40
 800843e:	d007      	beq.n	8008450 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800844e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008458:	d178      	bne.n	800854c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d002      	beq.n	8008468 <HAL_SPI_TransmitReceive+0x10a>
 8008462:	8b7b      	ldrh	r3, [r7, #26]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d166      	bne.n	8008536 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846c:	881a      	ldrh	r2, [r3, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008478:	1c9a      	adds	r2, r3, #2
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008482:	b29b      	uxth	r3, r3
 8008484:	3b01      	subs	r3, #1
 8008486:	b29a      	uxth	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800848c:	e053      	b.n	8008536 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f003 0302 	and.w	r3, r3, #2
 8008498:	2b02      	cmp	r3, #2
 800849a:	d11b      	bne.n	80084d4 <HAL_SPI_TransmitReceive+0x176>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d016      	beq.n	80084d4 <HAL_SPI_TransmitReceive+0x176>
 80084a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d113      	bne.n	80084d4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b0:	881a      	ldrh	r2, [r3, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084bc:	1c9a      	adds	r2, r3, #2
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	3b01      	subs	r3, #1
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084d0:	2300      	movs	r3, #0
 80084d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d119      	bne.n	8008516 <HAL_SPI_TransmitReceive+0x1b8>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d014      	beq.n	8008516 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68da      	ldr	r2, [r3, #12]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f6:	b292      	uxth	r2, r2
 80084f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fe:	1c9a      	adds	r2, r3, #2
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008508:	b29b      	uxth	r3, r3
 800850a:	3b01      	subs	r3, #1
 800850c:	b29a      	uxth	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008512:	2301      	movs	r3, #1
 8008514:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008516:	f7fa fb99 	bl	8002c4c <HAL_GetTick>
 800851a:	4602      	mov	r2, r0
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008522:	429a      	cmp	r2, r3
 8008524:	d807      	bhi.n	8008536 <HAL_SPI_TransmitReceive+0x1d8>
 8008526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800852c:	d003      	beq.n	8008536 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008534:	e0a7      	b.n	8008686 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800853a:	b29b      	uxth	r3, r3
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1a6      	bne.n	800848e <HAL_SPI_TransmitReceive+0x130>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008544:	b29b      	uxth	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1a1      	bne.n	800848e <HAL_SPI_TransmitReceive+0x130>
 800854a:	e07c      	b.n	8008646 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <HAL_SPI_TransmitReceive+0x1fc>
 8008554:	8b7b      	ldrh	r3, [r7, #26]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d16b      	bne.n	8008632 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	330c      	adds	r3, #12
 8008564:	7812      	ldrb	r2, [r2, #0]
 8008566:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856c:	1c5a      	adds	r2, r3, #1
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008576:	b29b      	uxth	r3, r3
 8008578:	3b01      	subs	r3, #1
 800857a:	b29a      	uxth	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008580:	e057      	b.n	8008632 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	f003 0302 	and.w	r3, r3, #2
 800858c:	2b02      	cmp	r3, #2
 800858e:	d11c      	bne.n	80085ca <HAL_SPI_TransmitReceive+0x26c>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008594:	b29b      	uxth	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d017      	beq.n	80085ca <HAL_SPI_TransmitReceive+0x26c>
 800859a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859c:	2b01      	cmp	r3, #1
 800859e:	d114      	bne.n	80085ca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	330c      	adds	r3, #12
 80085aa:	7812      	ldrb	r2, [r2, #0]
 80085ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085bc:	b29b      	uxth	r3, r3
 80085be:	3b01      	subs	r3, #1
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085c6:	2300      	movs	r3, #0
 80085c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f003 0301 	and.w	r3, r3, #1
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d119      	bne.n	800860c <HAL_SPI_TransmitReceive+0x2ae>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085dc:	b29b      	uxth	r3, r3
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d014      	beq.n	800860c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68da      	ldr	r2, [r3, #12]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ec:	b2d2      	uxtb	r2, r2
 80085ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085fe:	b29b      	uxth	r3, r3
 8008600:	3b01      	subs	r3, #1
 8008602:	b29a      	uxth	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008608:	2301      	movs	r3, #1
 800860a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800860c:	f7fa fb1e 	bl	8002c4c <HAL_GetTick>
 8008610:	4602      	mov	r2, r0
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008618:	429a      	cmp	r2, r3
 800861a:	d803      	bhi.n	8008624 <HAL_SPI_TransmitReceive+0x2c6>
 800861c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008622:	d102      	bne.n	800862a <HAL_SPI_TransmitReceive+0x2cc>
 8008624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008626:	2b00      	cmp	r3, #0
 8008628:	d103      	bne.n	8008632 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008630:	e029      	b.n	8008686 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008636:	b29b      	uxth	r3, r3
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1a2      	bne.n	8008582 <HAL_SPI_TransmitReceive+0x224>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008640:	b29b      	uxth	r3, r3
 8008642:	2b00      	cmp	r3, #0
 8008644:	d19d      	bne.n	8008582 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008648:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 fa18 	bl	8008a80 <SPI_EndRxTxTransaction>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d006      	beq.n	8008664 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2220      	movs	r2, #32
 8008660:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008662:	e010      	b.n	8008686 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10b      	bne.n	8008684 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800866c:	2300      	movs	r3, #0
 800866e:	617b      	str	r3, [r7, #20]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	617b      	str	r3, [r7, #20]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	617b      	str	r3, [r7, #20]
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	e000      	b.n	8008686 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008684:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008696:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800869a:	4618      	mov	r0, r3
 800869c:	3730      	adds	r7, #48	; 0x30
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
	...

080086a4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b088      	sub	sp, #32
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	099b      	lsrs	r3, r3, #6
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10f      	bne.n	80086e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00a      	beq.n	80086e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	099b      	lsrs	r3, r3, #6
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d004      	beq.n	80086e8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	4798      	blx	r3
    return;
 80086e6:	e0d8      	b.n	800889a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	085b      	lsrs	r3, r3, #1
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00a      	beq.n	800870a <HAL_SPI_IRQHandler+0x66>
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	09db      	lsrs	r3, r3, #7
 80086f8:	f003 0301 	and.w	r3, r3, #1
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d004      	beq.n	800870a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	4798      	blx	r3
    return;
 8008708:	e0c7      	b.n	800889a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	095b      	lsrs	r3, r3, #5
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10c      	bne.n	8008730 <HAL_SPI_IRQHandler+0x8c>
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	099b      	lsrs	r3, r3, #6
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	2b00      	cmp	r3, #0
 8008720:	d106      	bne.n	8008730 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	0a1b      	lsrs	r3, r3, #8
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 80b5 	beq.w	800889a <HAL_SPI_IRQHandler+0x1f6>
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	095b      	lsrs	r3, r3, #5
 8008734:	f003 0301 	and.w	r3, r3, #1
 8008738:	2b00      	cmp	r3, #0
 800873a:	f000 80ae 	beq.w	800889a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	099b      	lsrs	r3, r3, #6
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	2b00      	cmp	r3, #0
 8008748:	d023      	beq.n	8008792 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b03      	cmp	r3, #3
 8008754:	d011      	beq.n	800877a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800875a:	f043 0204 	orr.w	r2, r3, #4
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008762:	2300      	movs	r3, #0
 8008764:	617b      	str	r3, [r7, #20]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	617b      	str	r3, [r7, #20]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	617b      	str	r3, [r7, #20]
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	e00b      	b.n	8008792 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800877a:	2300      	movs	r3, #0
 800877c:	613b      	str	r3, [r7, #16]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	613b      	str	r3, [r7, #16]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	613b      	str	r3, [r7, #16]
 800878e:	693b      	ldr	r3, [r7, #16]
        return;
 8008790:	e083      	b.n	800889a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	095b      	lsrs	r3, r3, #5
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	2b00      	cmp	r3, #0
 800879c:	d014      	beq.n	80087c8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a2:	f043 0201 	orr.w	r2, r3, #1
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80087aa:	2300      	movs	r3, #0
 80087ac:	60fb      	str	r3, [r7, #12]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	60fb      	str	r3, [r7, #12]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	0a1b      	lsrs	r3, r3, #8
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00c      	beq.n	80087ee <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d8:	f043 0208 	orr.w	r2, r3, #8
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80087e0:	2300      	movs	r3, #0
 80087e2:	60bb      	str	r3, [r7, #8]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	60bb      	str	r3, [r7, #8]
 80087ec:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d050      	beq.n	8008898 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008804:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	f003 0302 	and.w	r3, r3, #2
 8008814:	2b00      	cmp	r3, #0
 8008816:	d104      	bne.n	8008822 <HAL_SPI_IRQHandler+0x17e>
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	2b00      	cmp	r3, #0
 8008820:	d034      	beq.n	800888c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	685a      	ldr	r2, [r3, #4]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f022 0203 	bic.w	r2, r2, #3
 8008830:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008836:	2b00      	cmp	r3, #0
 8008838:	d011      	beq.n	800885e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800883e:	4a18      	ldr	r2, [pc, #96]	; (80088a0 <HAL_SPI_IRQHandler+0x1fc>)
 8008840:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008846:	4618      	mov	r0, r3
 8008848:	f7fb f939 	bl	8003abe <HAL_DMA_Abort_IT>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d005      	beq.n	800885e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008856:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008862:	2b00      	cmp	r3, #0
 8008864:	d016      	beq.n	8008894 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800886a:	4a0d      	ldr	r2, [pc, #52]	; (80088a0 <HAL_SPI_IRQHandler+0x1fc>)
 800886c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008872:	4618      	mov	r0, r3
 8008874:	f7fb f923 	bl	8003abe <HAL_DMA_Abort_IT>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00a      	beq.n	8008894 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008882:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800888a:	e003      	b.n	8008894 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f809 	bl	80088a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008892:	e000      	b.n	8008896 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008894:	bf00      	nop
    return;
 8008896:	bf00      	nop
 8008898:	bf00      	nop
  }
}
 800889a:	3720      	adds	r7, #32
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	080088b9 	.word	0x080088b9

080088a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f7ff ffe6 	bl	80088a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80088d8:	bf00      	nop
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	603b      	str	r3, [r7, #0]
 80088ec:	4613      	mov	r3, r2
 80088ee:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088f0:	e04c      	b.n	800898c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088f8:	d048      	beq.n	800898c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80088fa:	f7fa f9a7 	bl	8002c4c <HAL_GetTick>
 80088fe:	4602      	mov	r2, r0
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	429a      	cmp	r2, r3
 8008908:	d902      	bls.n	8008910 <SPI_WaitFlagStateUntilTimeout+0x30>
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d13d      	bne.n	800898c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800891e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008928:	d111      	bne.n	800894e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008932:	d004      	beq.n	800893e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800893c:	d107      	bne.n	800894e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800894c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008956:	d10f      	bne.n	8008978 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008966:	601a      	str	r2, [r3, #0]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008976:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e00f      	b.n	80089ac <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	689a      	ldr	r2, [r3, #8]
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	4013      	ands	r3, r2
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	429a      	cmp	r2, r3
 800899a:	bf0c      	ite	eq
 800899c:	2301      	moveq	r3, #1
 800899e:	2300      	movne	r3, #0
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	461a      	mov	r2, r3
 80089a4:	79fb      	ldrb	r3, [r7, #7]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d1a3      	bne.n	80088f2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af02      	add	r7, sp, #8
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089c8:	d111      	bne.n	80089ee <SPI_EndRxTransaction+0x3a>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089d2:	d004      	beq.n	80089de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089dc:	d107      	bne.n	80089ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089f6:	d12a      	bne.n	8008a4e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a00:	d012      	beq.n	8008a28 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	2180      	movs	r1, #128	; 0x80
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f7ff ff67 	bl	80088e0 <SPI_WaitFlagStateUntilTimeout>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d02d      	beq.n	8008a74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a1c:	f043 0220 	orr.w	r2, r3, #32
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e026      	b.n	8008a76 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	2101      	movs	r1, #1
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f7ff ff54 	bl	80088e0 <SPI_WaitFlagStateUntilTimeout>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d01a      	beq.n	8008a74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a42:	f043 0220 	orr.w	r2, r3, #32
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e013      	b.n	8008a76 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	2200      	movs	r2, #0
 8008a56:	2101      	movs	r1, #1
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f7ff ff41 	bl	80088e0 <SPI_WaitFlagStateUntilTimeout>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d007      	beq.n	8008a74 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a68:	f043 0220 	orr.w	r2, r3, #32
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e000      	b.n	8008a76 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
	...

08008a80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b088      	sub	sp, #32
 8008a84:	af02      	add	r7, sp, #8
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008a8c:	4b1b      	ldr	r3, [pc, #108]	; (8008afc <SPI_EndRxTxTransaction+0x7c>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a1b      	ldr	r2, [pc, #108]	; (8008b00 <SPI_EndRxTxTransaction+0x80>)
 8008a92:	fba2 2303 	umull	r2, r3, r2, r3
 8008a96:	0d5b      	lsrs	r3, r3, #21
 8008a98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a9c:	fb02 f303 	mul.w	r3, r2, r3
 8008aa0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008aaa:	d112      	bne.n	8008ad2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	9300      	str	r3, [sp, #0]
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	2180      	movs	r1, #128	; 0x80
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f7ff ff12 	bl	80088e0 <SPI_WaitFlagStateUntilTimeout>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d016      	beq.n	8008af0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac6:	f043 0220 	orr.w	r2, r3, #32
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e00f      	b.n	8008af2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00a      	beq.n	8008aee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	3b01      	subs	r3, #1
 8008adc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ae8:	2b80      	cmp	r3, #128	; 0x80
 8008aea:	d0f2      	beq.n	8008ad2 <SPI_EndRxTxTransaction+0x52>
 8008aec:	e000      	b.n	8008af0 <SPI_EndRxTxTransaction+0x70>
        break;
 8008aee:	bf00      	nop
  }

  return HAL_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3718      	adds	r7, #24
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	20000090 	.word	0x20000090
 8008b00:	165e9f81 	.word	0x165e9f81

08008b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d101      	bne.n	8008b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e01d      	b.n	8008b52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d106      	bne.n	8008b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7f9 fee8 	bl	8002900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2202      	movs	r2, #2
 8008b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	4619      	mov	r1, r3
 8008b42:	4610      	mov	r0, r2
 8008b44:	f000 fa14 	bl	8008f70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b085      	sub	sp, #20
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68da      	ldr	r2, [r3, #12]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f042 0201 	orr.w	r2, r2, #1
 8008b70:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f003 0307 	and.w	r3, r3, #7
 8008b7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2b06      	cmp	r3, #6
 8008b82:	d007      	beq.n	8008b94 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f042 0201 	orr.w	r2, r2, #1
 8008b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3714      	adds	r7, #20
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b082      	sub	sp, #8
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	f003 0302 	and.w	r3, r3, #2
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d122      	bne.n	8008bfe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	f003 0302 	and.w	r3, r3, #2
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d11b      	bne.n	8008bfe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f06f 0202 	mvn.w	r2, #2
 8008bce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	f003 0303 	and.w	r3, r3, #3
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d003      	beq.n	8008bec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f9a5 	bl	8008f34 <HAL_TIM_IC_CaptureCallback>
 8008bea:	e005      	b.n	8008bf8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f997 	bl	8008f20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f9a8 	bl	8008f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	f003 0304 	and.w	r3, r3, #4
 8008c08:	2b04      	cmp	r3, #4
 8008c0a:	d122      	bne.n	8008c52 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	f003 0304 	and.w	r3, r3, #4
 8008c16:	2b04      	cmp	r3, #4
 8008c18:	d11b      	bne.n	8008c52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f06f 0204 	mvn.w	r2, #4
 8008c22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2202      	movs	r2, #2
 8008c28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d003      	beq.n	8008c40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f97b 	bl	8008f34 <HAL_TIM_IC_CaptureCallback>
 8008c3e:	e005      	b.n	8008c4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f96d 	bl	8008f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f97e 	bl	8008f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	f003 0308 	and.w	r3, r3, #8
 8008c5c:	2b08      	cmp	r3, #8
 8008c5e:	d122      	bne.n	8008ca6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	f003 0308 	and.w	r3, r3, #8
 8008c6a:	2b08      	cmp	r3, #8
 8008c6c:	d11b      	bne.n	8008ca6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f06f 0208 	mvn.w	r2, #8
 8008c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2204      	movs	r2, #4
 8008c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	69db      	ldr	r3, [r3, #28]
 8008c84:	f003 0303 	and.w	r3, r3, #3
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d003      	beq.n	8008c94 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f951 	bl	8008f34 <HAL_TIM_IC_CaptureCallback>
 8008c92:	e005      	b.n	8008ca0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f943 	bl	8008f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f954 	bl	8008f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	f003 0310 	and.w	r3, r3, #16
 8008cb0:	2b10      	cmp	r3, #16
 8008cb2:	d122      	bne.n	8008cfa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	f003 0310 	and.w	r3, r3, #16
 8008cbe:	2b10      	cmp	r3, #16
 8008cc0:	d11b      	bne.n	8008cfa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f06f 0210 	mvn.w	r2, #16
 8008cca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2208      	movs	r2, #8
 8008cd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	69db      	ldr	r3, [r3, #28]
 8008cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d003      	beq.n	8008ce8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f927 	bl	8008f34 <HAL_TIM_IC_CaptureCallback>
 8008ce6:	e005      	b.n	8008cf4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f919 	bl	8008f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f92a 	bl	8008f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d10e      	bne.n	8008d26 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	f003 0301 	and.w	r3, r3, #1
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d107      	bne.n	8008d26 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f06f 0201 	mvn.w	r2, #1
 8008d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7f9 fa07 	bl	8002134 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d30:	2b80      	cmp	r3, #128	; 0x80
 8008d32:	d10e      	bne.n	8008d52 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d3e:	2b80      	cmp	r3, #128	; 0x80
 8008d40:	d107      	bne.n	8008d52 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 facf 	bl	80092f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d5c:	2b40      	cmp	r3, #64	; 0x40
 8008d5e:	d10e      	bne.n	8008d7e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d6a:	2b40      	cmp	r3, #64	; 0x40
 8008d6c:	d107      	bne.n	8008d7e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f8ef 	bl	8008f5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	f003 0320 	and.w	r3, r3, #32
 8008d88:	2b20      	cmp	r3, #32
 8008d8a:	d10e      	bne.n	8008daa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	f003 0320 	and.w	r3, r3, #32
 8008d96:	2b20      	cmp	r3, #32
 8008d98:	d107      	bne.n	8008daa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f06f 0220 	mvn.w	r2, #32
 8008da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fa99 	bl	80092dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008daa:	bf00      	nop
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d101      	bne.n	8008dca <HAL_TIM_ConfigClockSource+0x18>
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	e0a6      	b.n	8008f18 <HAL_TIM_ConfigClockSource+0x166>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2202      	movs	r2, #2
 8008dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008de8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008df0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b40      	cmp	r3, #64	; 0x40
 8008e00:	d067      	beq.n	8008ed2 <HAL_TIM_ConfigClockSource+0x120>
 8008e02:	2b40      	cmp	r3, #64	; 0x40
 8008e04:	d80b      	bhi.n	8008e1e <HAL_TIM_ConfigClockSource+0x6c>
 8008e06:	2b10      	cmp	r3, #16
 8008e08:	d073      	beq.n	8008ef2 <HAL_TIM_ConfigClockSource+0x140>
 8008e0a:	2b10      	cmp	r3, #16
 8008e0c:	d802      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x62>
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d06f      	beq.n	8008ef2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008e12:	e078      	b.n	8008f06 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008e14:	2b20      	cmp	r3, #32
 8008e16:	d06c      	beq.n	8008ef2 <HAL_TIM_ConfigClockSource+0x140>
 8008e18:	2b30      	cmp	r3, #48	; 0x30
 8008e1a:	d06a      	beq.n	8008ef2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008e1c:	e073      	b.n	8008f06 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008e1e:	2b70      	cmp	r3, #112	; 0x70
 8008e20:	d00d      	beq.n	8008e3e <HAL_TIM_ConfigClockSource+0x8c>
 8008e22:	2b70      	cmp	r3, #112	; 0x70
 8008e24:	d804      	bhi.n	8008e30 <HAL_TIM_ConfigClockSource+0x7e>
 8008e26:	2b50      	cmp	r3, #80	; 0x50
 8008e28:	d033      	beq.n	8008e92 <HAL_TIM_ConfigClockSource+0xe0>
 8008e2a:	2b60      	cmp	r3, #96	; 0x60
 8008e2c:	d041      	beq.n	8008eb2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008e2e:	e06a      	b.n	8008f06 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e34:	d066      	beq.n	8008f04 <HAL_TIM_ConfigClockSource+0x152>
 8008e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e3a:	d017      	beq.n	8008e6c <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008e3c:	e063      	b.n	8008f06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6818      	ldr	r0, [r3, #0]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	6899      	ldr	r1, [r3, #8]
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	685a      	ldr	r2, [r3, #4]
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	f000 f9a9 	bl	80091a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	609a      	str	r2, [r3, #8]
      break;
 8008e6a:	e04c      	b.n	8008f06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6818      	ldr	r0, [r3, #0]
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	6899      	ldr	r1, [r3, #8]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	f000 f992 	bl	80091a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	689a      	ldr	r2, [r3, #8]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e8e:	609a      	str	r2, [r3, #8]
      break;
 8008e90:	e039      	b.n	8008f06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6818      	ldr	r0, [r3, #0]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	6859      	ldr	r1, [r3, #4]
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	f000 f906 	bl	80090b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2150      	movs	r1, #80	; 0x50
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 f95f 	bl	800916e <TIM_ITRx_SetConfig>
      break;
 8008eb0:	e029      	b.n	8008f06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6818      	ldr	r0, [r3, #0]
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	6859      	ldr	r1, [r3, #4]
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	f000 f925 	bl	800910e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2160      	movs	r1, #96	; 0x60
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f000 f94f 	bl	800916e <TIM_ITRx_SetConfig>
      break;
 8008ed0:	e019      	b.n	8008f06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6818      	ldr	r0, [r3, #0]
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	6859      	ldr	r1, [r3, #4]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	f000 f8e6 	bl	80090b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2140      	movs	r1, #64	; 0x40
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 f93f 	bl	800916e <TIM_ITRx_SetConfig>
      break;
 8008ef0:	e009      	b.n	8008f06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4619      	mov	r1, r3
 8008efc:	4610      	mov	r0, r2
 8008efe:	f000 f936 	bl	800916e <TIM_ITRx_SetConfig>
      break;
 8008f02:	e000      	b.n	8008f06 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008f04:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f50:	bf00      	nop
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a40      	ldr	r2, [pc, #256]	; (8009084 <TIM_Base_SetConfig+0x114>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d013      	beq.n	8008fb0 <TIM_Base_SetConfig+0x40>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f8e:	d00f      	beq.n	8008fb0 <TIM_Base_SetConfig+0x40>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a3d      	ldr	r2, [pc, #244]	; (8009088 <TIM_Base_SetConfig+0x118>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d00b      	beq.n	8008fb0 <TIM_Base_SetConfig+0x40>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a3c      	ldr	r2, [pc, #240]	; (800908c <TIM_Base_SetConfig+0x11c>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d007      	beq.n	8008fb0 <TIM_Base_SetConfig+0x40>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a3b      	ldr	r2, [pc, #236]	; (8009090 <TIM_Base_SetConfig+0x120>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d003      	beq.n	8008fb0 <TIM_Base_SetConfig+0x40>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a3a      	ldr	r2, [pc, #232]	; (8009094 <TIM_Base_SetConfig+0x124>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d108      	bne.n	8008fc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4a2f      	ldr	r2, [pc, #188]	; (8009084 <TIM_Base_SetConfig+0x114>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d02b      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fd0:	d027      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a2c      	ldr	r2, [pc, #176]	; (8009088 <TIM_Base_SetConfig+0x118>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d023      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a2b      	ldr	r2, [pc, #172]	; (800908c <TIM_Base_SetConfig+0x11c>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d01f      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a2a      	ldr	r2, [pc, #168]	; (8009090 <TIM_Base_SetConfig+0x120>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d01b      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a29      	ldr	r2, [pc, #164]	; (8009094 <TIM_Base_SetConfig+0x124>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d017      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a28      	ldr	r2, [pc, #160]	; (8009098 <TIM_Base_SetConfig+0x128>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d013      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a27      	ldr	r2, [pc, #156]	; (800909c <TIM_Base_SetConfig+0x12c>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d00f      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a26      	ldr	r2, [pc, #152]	; (80090a0 <TIM_Base_SetConfig+0x130>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d00b      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a25      	ldr	r2, [pc, #148]	; (80090a4 <TIM_Base_SetConfig+0x134>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d007      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a24      	ldr	r2, [pc, #144]	; (80090a8 <TIM_Base_SetConfig+0x138>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d003      	beq.n	8009022 <TIM_Base_SetConfig+0xb2>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a23      	ldr	r2, [pc, #140]	; (80090ac <TIM_Base_SetConfig+0x13c>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d108      	bne.n	8009034 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	4313      	orrs	r3, r2
 8009032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	695b      	ldr	r3, [r3, #20]
 800903e:	4313      	orrs	r3, r2
 8009040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	689a      	ldr	r2, [r3, #8]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a0a      	ldr	r2, [pc, #40]	; (8009084 <TIM_Base_SetConfig+0x114>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d003      	beq.n	8009068 <TIM_Base_SetConfig+0xf8>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a0c      	ldr	r2, [pc, #48]	; (8009094 <TIM_Base_SetConfig+0x124>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d103      	bne.n	8009070 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	691a      	ldr	r2, [r3, #16]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	615a      	str	r2, [r3, #20]
}
 8009076:	bf00      	nop
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	40010000 	.word	0x40010000
 8009088:	40000400 	.word	0x40000400
 800908c:	40000800 	.word	0x40000800
 8009090:	40000c00 	.word	0x40000c00
 8009094:	40010400 	.word	0x40010400
 8009098:	40014000 	.word	0x40014000
 800909c:	40014400 	.word	0x40014400
 80090a0:	40014800 	.word	0x40014800
 80090a4:	40001800 	.word	0x40001800
 80090a8:	40001c00 	.word	0x40001c00
 80090ac:	40002000 	.word	0x40002000

080090b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b087      	sub	sp, #28
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6a1b      	ldr	r3, [r3, #32]
 80090c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	f023 0201 	bic.w	r2, r3, #1
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	011b      	lsls	r3, r3, #4
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	f023 030a 	bic.w	r3, r3, #10
 80090ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090ee:	697a      	ldr	r2, [r7, #20]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	621a      	str	r2, [r3, #32]
}
 8009102:	bf00      	nop
 8009104:	371c      	adds	r7, #28
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr

0800910e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800910e:	b480      	push	{r7}
 8009110:	b087      	sub	sp, #28
 8009112:	af00      	add	r7, sp, #0
 8009114:	60f8      	str	r0, [r7, #12]
 8009116:	60b9      	str	r1, [r7, #8]
 8009118:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	f023 0210 	bic.w	r2, r3, #16
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6a1b      	ldr	r3, [r3, #32]
 8009130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009138:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	031b      	lsls	r3, r3, #12
 800913e:	697a      	ldr	r2, [r7, #20]
 8009140:	4313      	orrs	r3, r2
 8009142:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800914a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	011b      	lsls	r3, r3, #4
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	4313      	orrs	r3, r2
 8009154:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	697a      	ldr	r2, [r7, #20]
 800915a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	693a      	ldr	r2, [r7, #16]
 8009160:	621a      	str	r2, [r3, #32]
}
 8009162:	bf00      	nop
 8009164:	371c      	adds	r7, #28
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800916e:	b480      	push	{r7}
 8009170:	b085      	sub	sp, #20
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009184:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	4313      	orrs	r3, r2
 800918c:	f043 0307 	orr.w	r3, r3, #7
 8009190:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	609a      	str	r2, [r3, #8]
}
 8009198:	bf00      	nop
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b087      	sub	sp, #28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	021a      	lsls	r2, r3, #8
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	431a      	orrs	r2, r3
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	697a      	ldr	r2, [r7, #20]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	697a      	ldr	r2, [r7, #20]
 80091d6:	609a      	str	r2, [r3, #8]
}
 80091d8:	bf00      	nop
 80091da:	371c      	adds	r7, #28
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d101      	bne.n	80091fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091f8:	2302      	movs	r3, #2
 80091fa:	e05a      	b.n	80092b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2202      	movs	r2, #2
 8009208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009222:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	4313      	orrs	r3, r2
 800922c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a21      	ldr	r2, [pc, #132]	; (80092c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d022      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009248:	d01d      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a1d      	ldr	r2, [pc, #116]	; (80092c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d018      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a1b      	ldr	r2, [pc, #108]	; (80092c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d013      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a1a      	ldr	r2, [pc, #104]	; (80092cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d00e      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a18      	ldr	r2, [pc, #96]	; (80092d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d009      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a17      	ldr	r2, [pc, #92]	; (80092d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d004      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a15      	ldr	r2, [pc, #84]	; (80092d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d10c      	bne.n	80092a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800928c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	4313      	orrs	r3, r2
 8009296:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3714      	adds	r7, #20
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	40010000 	.word	0x40010000
 80092c4:	40000400 	.word	0x40000400
 80092c8:	40000800 	.word	0x40000800
 80092cc:	40000c00 	.word	0x40000c00
 80092d0:	40010400 	.word	0x40010400
 80092d4:	40014000 	.word	0x40014000
 80092d8:	40001800 	.word	0x40001800

080092dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d101      	bne.n	8009316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	e03f      	b.n	8009396 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800931c:	b2db      	uxtb	r3, r3
 800931e:	2b00      	cmp	r3, #0
 8009320:	d106      	bne.n	8009330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f7f9 fb80 	bl	8002a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2224      	movs	r2, #36	; 0x24
 8009334:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68da      	ldr	r2, [r3, #12]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009346:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f829 	bl	80093a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	691a      	ldr	r2, [r3, #16]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800935c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	695a      	ldr	r2, [r3, #20]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800936c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68da      	ldr	r2, [r3, #12]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800937c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2220      	movs	r2, #32
 8009388:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2220      	movs	r2, #32
 8009390:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
	...

080093a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a4:	b085      	sub	sp, #20
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	68da      	ldr	r2, [r3, #12]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	430a      	orrs	r2, r1
 80093be:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	689a      	ldr	r2, [r3, #8]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	431a      	orrs	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	431a      	orrs	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	69db      	ldr	r3, [r3, #28]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80093e2:	f023 030c 	bic.w	r3, r3, #12
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	6812      	ldr	r2, [r2, #0]
 80093ea:	68f9      	ldr	r1, [r7, #12]
 80093ec:	430b      	orrs	r3, r1
 80093ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	695b      	ldr	r3, [r3, #20]
 80093f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	699a      	ldr	r2, [r3, #24]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	430a      	orrs	r2, r1
 8009404:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	69db      	ldr	r3, [r3, #28]
 800940a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800940e:	f040 818b 	bne.w	8009728 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4ac1      	ldr	r2, [pc, #772]	; (800971c <UART_SetConfig+0x37c>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d005      	beq.n	8009428 <UART_SetConfig+0x88>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4abf      	ldr	r2, [pc, #764]	; (8009720 <UART_SetConfig+0x380>)
 8009422:	4293      	cmp	r3, r2
 8009424:	f040 80bd 	bne.w	80095a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009428:	f7fe fce4 	bl	8007df4 <HAL_RCC_GetPCLK2Freq>
 800942c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	461d      	mov	r5, r3
 8009432:	f04f 0600 	mov.w	r6, #0
 8009436:	46a8      	mov	r8, r5
 8009438:	46b1      	mov	r9, r6
 800943a:	eb18 0308 	adds.w	r3, r8, r8
 800943e:	eb49 0409 	adc.w	r4, r9, r9
 8009442:	4698      	mov	r8, r3
 8009444:	46a1      	mov	r9, r4
 8009446:	eb18 0805 	adds.w	r8, r8, r5
 800944a:	eb49 0906 	adc.w	r9, r9, r6
 800944e:	f04f 0100 	mov.w	r1, #0
 8009452:	f04f 0200 	mov.w	r2, #0
 8009456:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800945a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800945e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009462:	4688      	mov	r8, r1
 8009464:	4691      	mov	r9, r2
 8009466:	eb18 0005 	adds.w	r0, r8, r5
 800946a:	eb49 0106 	adc.w	r1, r9, r6
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	461d      	mov	r5, r3
 8009474:	f04f 0600 	mov.w	r6, #0
 8009478:	196b      	adds	r3, r5, r5
 800947a:	eb46 0406 	adc.w	r4, r6, r6
 800947e:	461a      	mov	r2, r3
 8009480:	4623      	mov	r3, r4
 8009482:	f7f6 fea1 	bl	80001c8 <__aeabi_uldivmod>
 8009486:	4603      	mov	r3, r0
 8009488:	460c      	mov	r4, r1
 800948a:	461a      	mov	r2, r3
 800948c:	4ba5      	ldr	r3, [pc, #660]	; (8009724 <UART_SetConfig+0x384>)
 800948e:	fba3 2302 	umull	r2, r3, r3, r2
 8009492:	095b      	lsrs	r3, r3, #5
 8009494:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	461d      	mov	r5, r3
 800949c:	f04f 0600 	mov.w	r6, #0
 80094a0:	46a9      	mov	r9, r5
 80094a2:	46b2      	mov	sl, r6
 80094a4:	eb19 0309 	adds.w	r3, r9, r9
 80094a8:	eb4a 040a 	adc.w	r4, sl, sl
 80094ac:	4699      	mov	r9, r3
 80094ae:	46a2      	mov	sl, r4
 80094b0:	eb19 0905 	adds.w	r9, r9, r5
 80094b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80094b8:	f04f 0100 	mov.w	r1, #0
 80094bc:	f04f 0200 	mov.w	r2, #0
 80094c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80094c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80094cc:	4689      	mov	r9, r1
 80094ce:	4692      	mov	sl, r2
 80094d0:	eb19 0005 	adds.w	r0, r9, r5
 80094d4:	eb4a 0106 	adc.w	r1, sl, r6
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	461d      	mov	r5, r3
 80094de:	f04f 0600 	mov.w	r6, #0
 80094e2:	196b      	adds	r3, r5, r5
 80094e4:	eb46 0406 	adc.w	r4, r6, r6
 80094e8:	461a      	mov	r2, r3
 80094ea:	4623      	mov	r3, r4
 80094ec:	f7f6 fe6c 	bl	80001c8 <__aeabi_uldivmod>
 80094f0:	4603      	mov	r3, r0
 80094f2:	460c      	mov	r4, r1
 80094f4:	461a      	mov	r2, r3
 80094f6:	4b8b      	ldr	r3, [pc, #556]	; (8009724 <UART_SetConfig+0x384>)
 80094f8:	fba3 1302 	umull	r1, r3, r3, r2
 80094fc:	095b      	lsrs	r3, r3, #5
 80094fe:	2164      	movs	r1, #100	; 0x64
 8009500:	fb01 f303 	mul.w	r3, r1, r3
 8009504:	1ad3      	subs	r3, r2, r3
 8009506:	00db      	lsls	r3, r3, #3
 8009508:	3332      	adds	r3, #50	; 0x32
 800950a:	4a86      	ldr	r2, [pc, #536]	; (8009724 <UART_SetConfig+0x384>)
 800950c:	fba2 2303 	umull	r2, r3, r2, r3
 8009510:	095b      	lsrs	r3, r3, #5
 8009512:	005b      	lsls	r3, r3, #1
 8009514:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009518:	4498      	add	r8, r3
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	461d      	mov	r5, r3
 800951e:	f04f 0600 	mov.w	r6, #0
 8009522:	46a9      	mov	r9, r5
 8009524:	46b2      	mov	sl, r6
 8009526:	eb19 0309 	adds.w	r3, r9, r9
 800952a:	eb4a 040a 	adc.w	r4, sl, sl
 800952e:	4699      	mov	r9, r3
 8009530:	46a2      	mov	sl, r4
 8009532:	eb19 0905 	adds.w	r9, r9, r5
 8009536:	eb4a 0a06 	adc.w	sl, sl, r6
 800953a:	f04f 0100 	mov.w	r1, #0
 800953e:	f04f 0200 	mov.w	r2, #0
 8009542:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009546:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800954a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800954e:	4689      	mov	r9, r1
 8009550:	4692      	mov	sl, r2
 8009552:	eb19 0005 	adds.w	r0, r9, r5
 8009556:	eb4a 0106 	adc.w	r1, sl, r6
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	461d      	mov	r5, r3
 8009560:	f04f 0600 	mov.w	r6, #0
 8009564:	196b      	adds	r3, r5, r5
 8009566:	eb46 0406 	adc.w	r4, r6, r6
 800956a:	461a      	mov	r2, r3
 800956c:	4623      	mov	r3, r4
 800956e:	f7f6 fe2b 	bl	80001c8 <__aeabi_uldivmod>
 8009572:	4603      	mov	r3, r0
 8009574:	460c      	mov	r4, r1
 8009576:	461a      	mov	r2, r3
 8009578:	4b6a      	ldr	r3, [pc, #424]	; (8009724 <UART_SetConfig+0x384>)
 800957a:	fba3 1302 	umull	r1, r3, r3, r2
 800957e:	095b      	lsrs	r3, r3, #5
 8009580:	2164      	movs	r1, #100	; 0x64
 8009582:	fb01 f303 	mul.w	r3, r1, r3
 8009586:	1ad3      	subs	r3, r2, r3
 8009588:	00db      	lsls	r3, r3, #3
 800958a:	3332      	adds	r3, #50	; 0x32
 800958c:	4a65      	ldr	r2, [pc, #404]	; (8009724 <UART_SetConfig+0x384>)
 800958e:	fba2 2303 	umull	r2, r3, r2, r3
 8009592:	095b      	lsrs	r3, r3, #5
 8009594:	f003 0207 	and.w	r2, r3, #7
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4442      	add	r2, r8
 800959e:	609a      	str	r2, [r3, #8]
 80095a0:	e26f      	b.n	8009a82 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80095a2:	f7fe fc13 	bl	8007dcc <HAL_RCC_GetPCLK1Freq>
 80095a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	461d      	mov	r5, r3
 80095ac:	f04f 0600 	mov.w	r6, #0
 80095b0:	46a8      	mov	r8, r5
 80095b2:	46b1      	mov	r9, r6
 80095b4:	eb18 0308 	adds.w	r3, r8, r8
 80095b8:	eb49 0409 	adc.w	r4, r9, r9
 80095bc:	4698      	mov	r8, r3
 80095be:	46a1      	mov	r9, r4
 80095c0:	eb18 0805 	adds.w	r8, r8, r5
 80095c4:	eb49 0906 	adc.w	r9, r9, r6
 80095c8:	f04f 0100 	mov.w	r1, #0
 80095cc:	f04f 0200 	mov.w	r2, #0
 80095d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80095d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80095d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80095dc:	4688      	mov	r8, r1
 80095de:	4691      	mov	r9, r2
 80095e0:	eb18 0005 	adds.w	r0, r8, r5
 80095e4:	eb49 0106 	adc.w	r1, r9, r6
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	461d      	mov	r5, r3
 80095ee:	f04f 0600 	mov.w	r6, #0
 80095f2:	196b      	adds	r3, r5, r5
 80095f4:	eb46 0406 	adc.w	r4, r6, r6
 80095f8:	461a      	mov	r2, r3
 80095fa:	4623      	mov	r3, r4
 80095fc:	f7f6 fde4 	bl	80001c8 <__aeabi_uldivmod>
 8009600:	4603      	mov	r3, r0
 8009602:	460c      	mov	r4, r1
 8009604:	461a      	mov	r2, r3
 8009606:	4b47      	ldr	r3, [pc, #284]	; (8009724 <UART_SetConfig+0x384>)
 8009608:	fba3 2302 	umull	r2, r3, r3, r2
 800960c:	095b      	lsrs	r3, r3, #5
 800960e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	461d      	mov	r5, r3
 8009616:	f04f 0600 	mov.w	r6, #0
 800961a:	46a9      	mov	r9, r5
 800961c:	46b2      	mov	sl, r6
 800961e:	eb19 0309 	adds.w	r3, r9, r9
 8009622:	eb4a 040a 	adc.w	r4, sl, sl
 8009626:	4699      	mov	r9, r3
 8009628:	46a2      	mov	sl, r4
 800962a:	eb19 0905 	adds.w	r9, r9, r5
 800962e:	eb4a 0a06 	adc.w	sl, sl, r6
 8009632:	f04f 0100 	mov.w	r1, #0
 8009636:	f04f 0200 	mov.w	r2, #0
 800963a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800963e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009642:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009646:	4689      	mov	r9, r1
 8009648:	4692      	mov	sl, r2
 800964a:	eb19 0005 	adds.w	r0, r9, r5
 800964e:	eb4a 0106 	adc.w	r1, sl, r6
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	461d      	mov	r5, r3
 8009658:	f04f 0600 	mov.w	r6, #0
 800965c:	196b      	adds	r3, r5, r5
 800965e:	eb46 0406 	adc.w	r4, r6, r6
 8009662:	461a      	mov	r2, r3
 8009664:	4623      	mov	r3, r4
 8009666:	f7f6 fdaf 	bl	80001c8 <__aeabi_uldivmod>
 800966a:	4603      	mov	r3, r0
 800966c:	460c      	mov	r4, r1
 800966e:	461a      	mov	r2, r3
 8009670:	4b2c      	ldr	r3, [pc, #176]	; (8009724 <UART_SetConfig+0x384>)
 8009672:	fba3 1302 	umull	r1, r3, r3, r2
 8009676:	095b      	lsrs	r3, r3, #5
 8009678:	2164      	movs	r1, #100	; 0x64
 800967a:	fb01 f303 	mul.w	r3, r1, r3
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	00db      	lsls	r3, r3, #3
 8009682:	3332      	adds	r3, #50	; 0x32
 8009684:	4a27      	ldr	r2, [pc, #156]	; (8009724 <UART_SetConfig+0x384>)
 8009686:	fba2 2303 	umull	r2, r3, r2, r3
 800968a:	095b      	lsrs	r3, r3, #5
 800968c:	005b      	lsls	r3, r3, #1
 800968e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009692:	4498      	add	r8, r3
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	461d      	mov	r5, r3
 8009698:	f04f 0600 	mov.w	r6, #0
 800969c:	46a9      	mov	r9, r5
 800969e:	46b2      	mov	sl, r6
 80096a0:	eb19 0309 	adds.w	r3, r9, r9
 80096a4:	eb4a 040a 	adc.w	r4, sl, sl
 80096a8:	4699      	mov	r9, r3
 80096aa:	46a2      	mov	sl, r4
 80096ac:	eb19 0905 	adds.w	r9, r9, r5
 80096b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80096b4:	f04f 0100 	mov.w	r1, #0
 80096b8:	f04f 0200 	mov.w	r2, #0
 80096bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80096c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80096c8:	4689      	mov	r9, r1
 80096ca:	4692      	mov	sl, r2
 80096cc:	eb19 0005 	adds.w	r0, r9, r5
 80096d0:	eb4a 0106 	adc.w	r1, sl, r6
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	461d      	mov	r5, r3
 80096da:	f04f 0600 	mov.w	r6, #0
 80096de:	196b      	adds	r3, r5, r5
 80096e0:	eb46 0406 	adc.w	r4, r6, r6
 80096e4:	461a      	mov	r2, r3
 80096e6:	4623      	mov	r3, r4
 80096e8:	f7f6 fd6e 	bl	80001c8 <__aeabi_uldivmod>
 80096ec:	4603      	mov	r3, r0
 80096ee:	460c      	mov	r4, r1
 80096f0:	461a      	mov	r2, r3
 80096f2:	4b0c      	ldr	r3, [pc, #48]	; (8009724 <UART_SetConfig+0x384>)
 80096f4:	fba3 1302 	umull	r1, r3, r3, r2
 80096f8:	095b      	lsrs	r3, r3, #5
 80096fa:	2164      	movs	r1, #100	; 0x64
 80096fc:	fb01 f303 	mul.w	r3, r1, r3
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	00db      	lsls	r3, r3, #3
 8009704:	3332      	adds	r3, #50	; 0x32
 8009706:	4a07      	ldr	r2, [pc, #28]	; (8009724 <UART_SetConfig+0x384>)
 8009708:	fba2 2303 	umull	r2, r3, r2, r3
 800970c:	095b      	lsrs	r3, r3, #5
 800970e:	f003 0207 	and.w	r2, r3, #7
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4442      	add	r2, r8
 8009718:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800971a:	e1b2      	b.n	8009a82 <UART_SetConfig+0x6e2>
 800971c:	40011000 	.word	0x40011000
 8009720:	40011400 	.word	0x40011400
 8009724:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4ad7      	ldr	r2, [pc, #860]	; (8009a8c <UART_SetConfig+0x6ec>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d005      	beq.n	800973e <UART_SetConfig+0x39e>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4ad6      	ldr	r2, [pc, #856]	; (8009a90 <UART_SetConfig+0x6f0>)
 8009738:	4293      	cmp	r3, r2
 800973a:	f040 80d1 	bne.w	80098e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800973e:	f7fe fb59 	bl	8007df4 <HAL_RCC_GetPCLK2Freq>
 8009742:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	469a      	mov	sl, r3
 8009748:	f04f 0b00 	mov.w	fp, #0
 800974c:	46d0      	mov	r8, sl
 800974e:	46d9      	mov	r9, fp
 8009750:	eb18 0308 	adds.w	r3, r8, r8
 8009754:	eb49 0409 	adc.w	r4, r9, r9
 8009758:	4698      	mov	r8, r3
 800975a:	46a1      	mov	r9, r4
 800975c:	eb18 080a 	adds.w	r8, r8, sl
 8009760:	eb49 090b 	adc.w	r9, r9, fp
 8009764:	f04f 0100 	mov.w	r1, #0
 8009768:	f04f 0200 	mov.w	r2, #0
 800976c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009770:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009774:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009778:	4688      	mov	r8, r1
 800977a:	4691      	mov	r9, r2
 800977c:	eb1a 0508 	adds.w	r5, sl, r8
 8009780:	eb4b 0609 	adc.w	r6, fp, r9
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	4619      	mov	r1, r3
 800978a:	f04f 0200 	mov.w	r2, #0
 800978e:	f04f 0300 	mov.w	r3, #0
 8009792:	f04f 0400 	mov.w	r4, #0
 8009796:	0094      	lsls	r4, r2, #2
 8009798:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800979c:	008b      	lsls	r3, r1, #2
 800979e:	461a      	mov	r2, r3
 80097a0:	4623      	mov	r3, r4
 80097a2:	4628      	mov	r0, r5
 80097a4:	4631      	mov	r1, r6
 80097a6:	f7f6 fd0f 	bl	80001c8 <__aeabi_uldivmod>
 80097aa:	4603      	mov	r3, r0
 80097ac:	460c      	mov	r4, r1
 80097ae:	461a      	mov	r2, r3
 80097b0:	4bb8      	ldr	r3, [pc, #736]	; (8009a94 <UART_SetConfig+0x6f4>)
 80097b2:	fba3 2302 	umull	r2, r3, r3, r2
 80097b6:	095b      	lsrs	r3, r3, #5
 80097b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	469b      	mov	fp, r3
 80097c0:	f04f 0c00 	mov.w	ip, #0
 80097c4:	46d9      	mov	r9, fp
 80097c6:	46e2      	mov	sl, ip
 80097c8:	eb19 0309 	adds.w	r3, r9, r9
 80097cc:	eb4a 040a 	adc.w	r4, sl, sl
 80097d0:	4699      	mov	r9, r3
 80097d2:	46a2      	mov	sl, r4
 80097d4:	eb19 090b 	adds.w	r9, r9, fp
 80097d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80097dc:	f04f 0100 	mov.w	r1, #0
 80097e0:	f04f 0200 	mov.w	r2, #0
 80097e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80097ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80097f0:	4689      	mov	r9, r1
 80097f2:	4692      	mov	sl, r2
 80097f4:	eb1b 0509 	adds.w	r5, fp, r9
 80097f8:	eb4c 060a 	adc.w	r6, ip, sl
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	4619      	mov	r1, r3
 8009802:	f04f 0200 	mov.w	r2, #0
 8009806:	f04f 0300 	mov.w	r3, #0
 800980a:	f04f 0400 	mov.w	r4, #0
 800980e:	0094      	lsls	r4, r2, #2
 8009810:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009814:	008b      	lsls	r3, r1, #2
 8009816:	461a      	mov	r2, r3
 8009818:	4623      	mov	r3, r4
 800981a:	4628      	mov	r0, r5
 800981c:	4631      	mov	r1, r6
 800981e:	f7f6 fcd3 	bl	80001c8 <__aeabi_uldivmod>
 8009822:	4603      	mov	r3, r0
 8009824:	460c      	mov	r4, r1
 8009826:	461a      	mov	r2, r3
 8009828:	4b9a      	ldr	r3, [pc, #616]	; (8009a94 <UART_SetConfig+0x6f4>)
 800982a:	fba3 1302 	umull	r1, r3, r3, r2
 800982e:	095b      	lsrs	r3, r3, #5
 8009830:	2164      	movs	r1, #100	; 0x64
 8009832:	fb01 f303 	mul.w	r3, r1, r3
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	011b      	lsls	r3, r3, #4
 800983a:	3332      	adds	r3, #50	; 0x32
 800983c:	4a95      	ldr	r2, [pc, #596]	; (8009a94 <UART_SetConfig+0x6f4>)
 800983e:	fba2 2303 	umull	r2, r3, r2, r3
 8009842:	095b      	lsrs	r3, r3, #5
 8009844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009848:	4498      	add	r8, r3
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	469b      	mov	fp, r3
 800984e:	f04f 0c00 	mov.w	ip, #0
 8009852:	46d9      	mov	r9, fp
 8009854:	46e2      	mov	sl, ip
 8009856:	eb19 0309 	adds.w	r3, r9, r9
 800985a:	eb4a 040a 	adc.w	r4, sl, sl
 800985e:	4699      	mov	r9, r3
 8009860:	46a2      	mov	sl, r4
 8009862:	eb19 090b 	adds.w	r9, r9, fp
 8009866:	eb4a 0a0c 	adc.w	sl, sl, ip
 800986a:	f04f 0100 	mov.w	r1, #0
 800986e:	f04f 0200 	mov.w	r2, #0
 8009872:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009876:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800987a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800987e:	4689      	mov	r9, r1
 8009880:	4692      	mov	sl, r2
 8009882:	eb1b 0509 	adds.w	r5, fp, r9
 8009886:	eb4c 060a 	adc.w	r6, ip, sl
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	4619      	mov	r1, r3
 8009890:	f04f 0200 	mov.w	r2, #0
 8009894:	f04f 0300 	mov.w	r3, #0
 8009898:	f04f 0400 	mov.w	r4, #0
 800989c:	0094      	lsls	r4, r2, #2
 800989e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80098a2:	008b      	lsls	r3, r1, #2
 80098a4:	461a      	mov	r2, r3
 80098a6:	4623      	mov	r3, r4
 80098a8:	4628      	mov	r0, r5
 80098aa:	4631      	mov	r1, r6
 80098ac:	f7f6 fc8c 	bl	80001c8 <__aeabi_uldivmod>
 80098b0:	4603      	mov	r3, r0
 80098b2:	460c      	mov	r4, r1
 80098b4:	461a      	mov	r2, r3
 80098b6:	4b77      	ldr	r3, [pc, #476]	; (8009a94 <UART_SetConfig+0x6f4>)
 80098b8:	fba3 1302 	umull	r1, r3, r3, r2
 80098bc:	095b      	lsrs	r3, r3, #5
 80098be:	2164      	movs	r1, #100	; 0x64
 80098c0:	fb01 f303 	mul.w	r3, r1, r3
 80098c4:	1ad3      	subs	r3, r2, r3
 80098c6:	011b      	lsls	r3, r3, #4
 80098c8:	3332      	adds	r3, #50	; 0x32
 80098ca:	4a72      	ldr	r2, [pc, #456]	; (8009a94 <UART_SetConfig+0x6f4>)
 80098cc:	fba2 2303 	umull	r2, r3, r2, r3
 80098d0:	095b      	lsrs	r3, r3, #5
 80098d2:	f003 020f 	and.w	r2, r3, #15
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4442      	add	r2, r8
 80098dc:	609a      	str	r2, [r3, #8]
 80098de:	e0d0      	b.n	8009a82 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80098e0:	f7fe fa74 	bl	8007dcc <HAL_RCC_GetPCLK1Freq>
 80098e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	469a      	mov	sl, r3
 80098ea:	f04f 0b00 	mov.w	fp, #0
 80098ee:	46d0      	mov	r8, sl
 80098f0:	46d9      	mov	r9, fp
 80098f2:	eb18 0308 	adds.w	r3, r8, r8
 80098f6:	eb49 0409 	adc.w	r4, r9, r9
 80098fa:	4698      	mov	r8, r3
 80098fc:	46a1      	mov	r9, r4
 80098fe:	eb18 080a 	adds.w	r8, r8, sl
 8009902:	eb49 090b 	adc.w	r9, r9, fp
 8009906:	f04f 0100 	mov.w	r1, #0
 800990a:	f04f 0200 	mov.w	r2, #0
 800990e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009912:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009916:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800991a:	4688      	mov	r8, r1
 800991c:	4691      	mov	r9, r2
 800991e:	eb1a 0508 	adds.w	r5, sl, r8
 8009922:	eb4b 0609 	adc.w	r6, fp, r9
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	4619      	mov	r1, r3
 800992c:	f04f 0200 	mov.w	r2, #0
 8009930:	f04f 0300 	mov.w	r3, #0
 8009934:	f04f 0400 	mov.w	r4, #0
 8009938:	0094      	lsls	r4, r2, #2
 800993a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800993e:	008b      	lsls	r3, r1, #2
 8009940:	461a      	mov	r2, r3
 8009942:	4623      	mov	r3, r4
 8009944:	4628      	mov	r0, r5
 8009946:	4631      	mov	r1, r6
 8009948:	f7f6 fc3e 	bl	80001c8 <__aeabi_uldivmod>
 800994c:	4603      	mov	r3, r0
 800994e:	460c      	mov	r4, r1
 8009950:	461a      	mov	r2, r3
 8009952:	4b50      	ldr	r3, [pc, #320]	; (8009a94 <UART_SetConfig+0x6f4>)
 8009954:	fba3 2302 	umull	r2, r3, r3, r2
 8009958:	095b      	lsrs	r3, r3, #5
 800995a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	469b      	mov	fp, r3
 8009962:	f04f 0c00 	mov.w	ip, #0
 8009966:	46d9      	mov	r9, fp
 8009968:	46e2      	mov	sl, ip
 800996a:	eb19 0309 	adds.w	r3, r9, r9
 800996e:	eb4a 040a 	adc.w	r4, sl, sl
 8009972:	4699      	mov	r9, r3
 8009974:	46a2      	mov	sl, r4
 8009976:	eb19 090b 	adds.w	r9, r9, fp
 800997a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800997e:	f04f 0100 	mov.w	r1, #0
 8009982:	f04f 0200 	mov.w	r2, #0
 8009986:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800998a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800998e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009992:	4689      	mov	r9, r1
 8009994:	4692      	mov	sl, r2
 8009996:	eb1b 0509 	adds.w	r5, fp, r9
 800999a:	eb4c 060a 	adc.w	r6, ip, sl
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	4619      	mov	r1, r3
 80099a4:	f04f 0200 	mov.w	r2, #0
 80099a8:	f04f 0300 	mov.w	r3, #0
 80099ac:	f04f 0400 	mov.w	r4, #0
 80099b0:	0094      	lsls	r4, r2, #2
 80099b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80099b6:	008b      	lsls	r3, r1, #2
 80099b8:	461a      	mov	r2, r3
 80099ba:	4623      	mov	r3, r4
 80099bc:	4628      	mov	r0, r5
 80099be:	4631      	mov	r1, r6
 80099c0:	f7f6 fc02 	bl	80001c8 <__aeabi_uldivmod>
 80099c4:	4603      	mov	r3, r0
 80099c6:	460c      	mov	r4, r1
 80099c8:	461a      	mov	r2, r3
 80099ca:	4b32      	ldr	r3, [pc, #200]	; (8009a94 <UART_SetConfig+0x6f4>)
 80099cc:	fba3 1302 	umull	r1, r3, r3, r2
 80099d0:	095b      	lsrs	r3, r3, #5
 80099d2:	2164      	movs	r1, #100	; 0x64
 80099d4:	fb01 f303 	mul.w	r3, r1, r3
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	011b      	lsls	r3, r3, #4
 80099dc:	3332      	adds	r3, #50	; 0x32
 80099de:	4a2d      	ldr	r2, [pc, #180]	; (8009a94 <UART_SetConfig+0x6f4>)
 80099e0:	fba2 2303 	umull	r2, r3, r2, r3
 80099e4:	095b      	lsrs	r3, r3, #5
 80099e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099ea:	4498      	add	r8, r3
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	469b      	mov	fp, r3
 80099f0:	f04f 0c00 	mov.w	ip, #0
 80099f4:	46d9      	mov	r9, fp
 80099f6:	46e2      	mov	sl, ip
 80099f8:	eb19 0309 	adds.w	r3, r9, r9
 80099fc:	eb4a 040a 	adc.w	r4, sl, sl
 8009a00:	4699      	mov	r9, r3
 8009a02:	46a2      	mov	sl, r4
 8009a04:	eb19 090b 	adds.w	r9, r9, fp
 8009a08:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009a0c:	f04f 0100 	mov.w	r1, #0
 8009a10:	f04f 0200 	mov.w	r2, #0
 8009a14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009a1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009a20:	4689      	mov	r9, r1
 8009a22:	4692      	mov	sl, r2
 8009a24:	eb1b 0509 	adds.w	r5, fp, r9
 8009a28:	eb4c 060a 	adc.w	r6, ip, sl
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	4619      	mov	r1, r3
 8009a32:	f04f 0200 	mov.w	r2, #0
 8009a36:	f04f 0300 	mov.w	r3, #0
 8009a3a:	f04f 0400 	mov.w	r4, #0
 8009a3e:	0094      	lsls	r4, r2, #2
 8009a40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009a44:	008b      	lsls	r3, r1, #2
 8009a46:	461a      	mov	r2, r3
 8009a48:	4623      	mov	r3, r4
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	4631      	mov	r1, r6
 8009a4e:	f7f6 fbbb 	bl	80001c8 <__aeabi_uldivmod>
 8009a52:	4603      	mov	r3, r0
 8009a54:	460c      	mov	r4, r1
 8009a56:	461a      	mov	r2, r3
 8009a58:	4b0e      	ldr	r3, [pc, #56]	; (8009a94 <UART_SetConfig+0x6f4>)
 8009a5a:	fba3 1302 	umull	r1, r3, r3, r2
 8009a5e:	095b      	lsrs	r3, r3, #5
 8009a60:	2164      	movs	r1, #100	; 0x64
 8009a62:	fb01 f303 	mul.w	r3, r1, r3
 8009a66:	1ad3      	subs	r3, r2, r3
 8009a68:	011b      	lsls	r3, r3, #4
 8009a6a:	3332      	adds	r3, #50	; 0x32
 8009a6c:	4a09      	ldr	r2, [pc, #36]	; (8009a94 <UART_SetConfig+0x6f4>)
 8009a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a72:	095b      	lsrs	r3, r3, #5
 8009a74:	f003 020f 	and.w	r2, r3, #15
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4442      	add	r2, r8
 8009a7e:	609a      	str	r2, [r3, #8]
}
 8009a80:	e7ff      	b.n	8009a82 <UART_SetConfig+0x6e2>
 8009a82:	bf00      	nop
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a8c:	40011000 	.word	0x40011000
 8009a90:	40011400 	.word	0x40011400
 8009a94:	51eb851f 	.word	0x51eb851f

08009a98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a98:	b084      	sub	sp, #16
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	f107 001c 	add.w	r0, r7, #28
 8009aa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d122      	bne.n	8009af6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d105      	bne.n	8009aea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f001 fab4 	bl	800b058 <USB_CoreReset>
 8009af0:	4603      	mov	r3, r0
 8009af2:	73fb      	strb	r3, [r7, #15]
 8009af4:	e01a      	b.n	8009b2c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f001 faa8 	bl	800b058 <USB_CoreReset>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d106      	bne.n	8009b20 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	639a      	str	r2, [r3, #56]	; 0x38
 8009b1e:	e005      	b.n	8009b2c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d10b      	bne.n	8009b4a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	f043 0206 	orr.w	r2, r3, #6
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	f043 0220 	orr.w	r2, r3, #32
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b56:	b004      	add	sp, #16
 8009b58:	4770      	bx	lr
	...

08009b5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b087      	sub	sp, #28
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	4613      	mov	r3, r2
 8009b68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009b6a:	79fb      	ldrb	r3, [r7, #7]
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d165      	bne.n	8009c3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	4a41      	ldr	r2, [pc, #260]	; (8009c78 <USB_SetTurnaroundTime+0x11c>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d906      	bls.n	8009b86 <USB_SetTurnaroundTime+0x2a>
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	4a40      	ldr	r2, [pc, #256]	; (8009c7c <USB_SetTurnaroundTime+0x120>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d802      	bhi.n	8009b86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009b80:	230f      	movs	r3, #15
 8009b82:	617b      	str	r3, [r7, #20]
 8009b84:	e062      	b.n	8009c4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	4a3c      	ldr	r2, [pc, #240]	; (8009c7c <USB_SetTurnaroundTime+0x120>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d906      	bls.n	8009b9c <USB_SetTurnaroundTime+0x40>
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	4a3b      	ldr	r2, [pc, #236]	; (8009c80 <USB_SetTurnaroundTime+0x124>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d802      	bhi.n	8009b9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009b96:	230e      	movs	r3, #14
 8009b98:	617b      	str	r3, [r7, #20]
 8009b9a:	e057      	b.n	8009c4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	4a38      	ldr	r2, [pc, #224]	; (8009c80 <USB_SetTurnaroundTime+0x124>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d906      	bls.n	8009bb2 <USB_SetTurnaroundTime+0x56>
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	4a37      	ldr	r2, [pc, #220]	; (8009c84 <USB_SetTurnaroundTime+0x128>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d802      	bhi.n	8009bb2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009bac:	230d      	movs	r3, #13
 8009bae:	617b      	str	r3, [r7, #20]
 8009bb0:	e04c      	b.n	8009c4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	4a33      	ldr	r2, [pc, #204]	; (8009c84 <USB_SetTurnaroundTime+0x128>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d906      	bls.n	8009bc8 <USB_SetTurnaroundTime+0x6c>
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	4a32      	ldr	r2, [pc, #200]	; (8009c88 <USB_SetTurnaroundTime+0x12c>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d802      	bhi.n	8009bc8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009bc2:	230c      	movs	r3, #12
 8009bc4:	617b      	str	r3, [r7, #20]
 8009bc6:	e041      	b.n	8009c4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	4a2f      	ldr	r2, [pc, #188]	; (8009c88 <USB_SetTurnaroundTime+0x12c>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d906      	bls.n	8009bde <USB_SetTurnaroundTime+0x82>
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	4a2e      	ldr	r2, [pc, #184]	; (8009c8c <USB_SetTurnaroundTime+0x130>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d802      	bhi.n	8009bde <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009bd8:	230b      	movs	r3, #11
 8009bda:	617b      	str	r3, [r7, #20]
 8009bdc:	e036      	b.n	8009c4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	4a2a      	ldr	r2, [pc, #168]	; (8009c8c <USB_SetTurnaroundTime+0x130>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d906      	bls.n	8009bf4 <USB_SetTurnaroundTime+0x98>
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	4a29      	ldr	r2, [pc, #164]	; (8009c90 <USB_SetTurnaroundTime+0x134>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d802      	bhi.n	8009bf4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009bee:	230a      	movs	r3, #10
 8009bf0:	617b      	str	r3, [r7, #20]
 8009bf2:	e02b      	b.n	8009c4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	4a26      	ldr	r2, [pc, #152]	; (8009c90 <USB_SetTurnaroundTime+0x134>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d906      	bls.n	8009c0a <USB_SetTurnaroundTime+0xae>
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	4a25      	ldr	r2, [pc, #148]	; (8009c94 <USB_SetTurnaroundTime+0x138>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d802      	bhi.n	8009c0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009c04:	2309      	movs	r3, #9
 8009c06:	617b      	str	r3, [r7, #20]
 8009c08:	e020      	b.n	8009c4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	4a21      	ldr	r2, [pc, #132]	; (8009c94 <USB_SetTurnaroundTime+0x138>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d906      	bls.n	8009c20 <USB_SetTurnaroundTime+0xc4>
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	4a20      	ldr	r2, [pc, #128]	; (8009c98 <USB_SetTurnaroundTime+0x13c>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d802      	bhi.n	8009c20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009c1a:	2308      	movs	r3, #8
 8009c1c:	617b      	str	r3, [r7, #20]
 8009c1e:	e015      	b.n	8009c4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	4a1d      	ldr	r2, [pc, #116]	; (8009c98 <USB_SetTurnaroundTime+0x13c>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d906      	bls.n	8009c36 <USB_SetTurnaroundTime+0xda>
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	4a1c      	ldr	r2, [pc, #112]	; (8009c9c <USB_SetTurnaroundTime+0x140>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d802      	bhi.n	8009c36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009c30:	2307      	movs	r3, #7
 8009c32:	617b      	str	r3, [r7, #20]
 8009c34:	e00a      	b.n	8009c4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009c36:	2306      	movs	r3, #6
 8009c38:	617b      	str	r3, [r7, #20]
 8009c3a:	e007      	b.n	8009c4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009c3c:	79fb      	ldrb	r3, [r7, #7]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d102      	bne.n	8009c48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009c42:	2309      	movs	r3, #9
 8009c44:	617b      	str	r3, [r7, #20]
 8009c46:	e001      	b.n	8009c4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009c48:	2309      	movs	r3, #9
 8009c4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	68da      	ldr	r2, [r3, #12]
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	029b      	lsls	r3, r3, #10
 8009c60:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009c64:	431a      	orrs	r2, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	371c      	adds	r7, #28
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr
 8009c78:	00d8acbf 	.word	0x00d8acbf
 8009c7c:	00e4e1bf 	.word	0x00e4e1bf
 8009c80:	00f423ff 	.word	0x00f423ff
 8009c84:	0106737f 	.word	0x0106737f
 8009c88:	011a499f 	.word	0x011a499f
 8009c8c:	01312cff 	.word	0x01312cff
 8009c90:	014ca43f 	.word	0x014ca43f
 8009c94:	016e35ff 	.word	0x016e35ff
 8009c98:	01a6ab1f 	.word	0x01a6ab1f
 8009c9c:	01e847ff 	.word	0x01e847ff

08009ca0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	f043 0201 	orr.w	r2, r3, #1
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	370c      	adds	r7, #12
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009cc2:	b480      	push	{r7}
 8009cc4:	b083      	sub	sp, #12
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	f023 0201 	bic.w	r2, r3, #1
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009cfc:	78fb      	ldrb	r3, [r7, #3]
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d106      	bne.n	8009d10 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	60da      	str	r2, [r3, #12]
 8009d0e:	e00b      	b.n	8009d28 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009d10:	78fb      	ldrb	r3, [r7, #3]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d106      	bne.n	8009d24 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	60da      	str	r2, [r3, #12]
 8009d22:	e001      	b.n	8009d28 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	e003      	b.n	8009d30 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009d28:	2032      	movs	r0, #50	; 0x32
 8009d2a:	f7f8 ff9b 	bl	8002c64 <HAL_Delay>

  return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3708      	adds	r7, #8
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d38:	b084      	sub	sp, #16
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b086      	sub	sp, #24
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009d46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009d52:	2300      	movs	r3, #0
 8009d54:	613b      	str	r3, [r7, #16]
 8009d56:	e009      	b.n	8009d6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	3340      	adds	r3, #64	; 0x40
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	4413      	add	r3, r2
 8009d62:	2200      	movs	r2, #0
 8009d64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	613b      	str	r3, [r7, #16]
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	2b0e      	cmp	r3, #14
 8009d70:	d9f2      	bls.n	8009d58 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d11c      	bne.n	8009db2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d86:	f043 0302 	orr.w	r3, r3, #2
 8009d8a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	639a      	str	r2, [r3, #56]	; 0x38
 8009db0:	e00b      	b.n	8009dca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ddc:	4619      	mov	r1, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009de4:	461a      	mov	r2, r3
 8009de6:	680b      	ldr	r3, [r1, #0]
 8009de8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d10c      	bne.n	8009e0a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d104      	bne.n	8009e00 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009df6:	2100      	movs	r1, #0
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f949 	bl	800a090 <USB_SetDevSpeed>
 8009dfe:	e008      	b.n	8009e12 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009e00:	2101      	movs	r1, #1
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 f944 	bl	800a090 <USB_SetDevSpeed>
 8009e08:	e003      	b.n	8009e12 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009e0a:	2103      	movs	r1, #3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f93f 	bl	800a090 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009e12:	2110      	movs	r1, #16
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 f8f3 	bl	800a000 <USB_FlushTxFifo>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d001      	beq.n	8009e24 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f911 	bl	800a04c <USB_FlushRxFifo>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d001      	beq.n	8009e34 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e46:	461a      	mov	r2, r3
 8009e48:	2300      	movs	r3, #0
 8009e4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e52:	461a      	mov	r2, r3
 8009e54:	2300      	movs	r3, #0
 8009e56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e58:	2300      	movs	r3, #0
 8009e5a:	613b      	str	r3, [r7, #16]
 8009e5c:	e043      	b.n	8009ee6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	015a      	lsls	r2, r3, #5
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	4413      	add	r3, r2
 8009e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e74:	d118      	bne.n	8009ea8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10a      	bne.n	8009e92 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	015a      	lsls	r2, r3, #5
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e88:	461a      	mov	r2, r3
 8009e8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e8e:	6013      	str	r3, [r2, #0]
 8009e90:	e013      	b.n	8009eba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	015a      	lsls	r2, r3, #5
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	4413      	add	r3, r2
 8009e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009ea4:	6013      	str	r3, [r2, #0]
 8009ea6:	e008      	b.n	8009eba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	015a      	lsls	r2, r3, #5
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	4413      	add	r3, r2
 8009eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	015a      	lsls	r2, r3, #5
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	2300      	movs	r3, #0
 8009eca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	015a      	lsls	r2, r3, #5
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed8:	461a      	mov	r2, r3
 8009eda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ede:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	613b      	str	r3, [r7, #16]
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d3b7      	bcc.n	8009e5e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009eee:	2300      	movs	r3, #0
 8009ef0:	613b      	str	r3, [r7, #16]
 8009ef2:	e043      	b.n	8009f7c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f0a:	d118      	bne.n	8009f3e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d10a      	bne.n	8009f28 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	015a      	lsls	r2, r3, #5
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	4413      	add	r3, r2
 8009f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f1e:	461a      	mov	r2, r3
 8009f20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009f24:	6013      	str	r3, [r2, #0]
 8009f26:	e013      	b.n	8009f50 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	015a      	lsls	r2, r3, #5
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	4413      	add	r3, r2
 8009f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f34:	461a      	mov	r2, r3
 8009f36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009f3a:	6013      	str	r3, [r2, #0]
 8009f3c:	e008      	b.n	8009f50 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	015a      	lsls	r2, r3, #5
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	4413      	add	r3, r2
 8009f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	015a      	lsls	r2, r3, #5
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	4413      	add	r3, r2
 8009f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	2300      	movs	r3, #0
 8009f60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	015a      	lsls	r2, r3, #5
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	4413      	add	r3, r2
 8009f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f6e:	461a      	mov	r2, r3
 8009f70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009f74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	613b      	str	r3, [r7, #16]
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7e:	693a      	ldr	r2, [r7, #16]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d3b7      	bcc.n	8009ef4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f8a:	691b      	ldr	r3, [r3, #16]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009fa4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d105      	bne.n	8009fb8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	f043 0210 	orr.w	r2, r3, #16
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	699a      	ldr	r2, [r3, #24]
 8009fbc:	4b0f      	ldr	r3, [pc, #60]	; (8009ffc <USB_DevInit+0x2c4>)
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d005      	beq.n	8009fd6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	699b      	ldr	r3, [r3, #24]
 8009fce:	f043 0208 	orr.w	r2, r3, #8
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d107      	bne.n	8009fec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	699b      	ldr	r3, [r3, #24]
 8009fe0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fe4:	f043 0304 	orr.w	r3, r3, #4
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3718      	adds	r7, #24
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ff8:	b004      	add	sp, #16
 8009ffa:	4770      	bx	lr
 8009ffc:	803c3800 	.word	0x803c3800

0800a000 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a00a:	2300      	movs	r3, #0
 800a00c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	019b      	lsls	r3, r3, #6
 800a012:	f043 0220 	orr.w	r2, r3, #32
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	3301      	adds	r3, #1
 800a01e:	60fb      	str	r3, [r7, #12]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	4a09      	ldr	r2, [pc, #36]	; (800a048 <USB_FlushTxFifo+0x48>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d901      	bls.n	800a02c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a028:	2303      	movs	r3, #3
 800a02a:	e006      	b.n	800a03a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	f003 0320 	and.w	r3, r3, #32
 800a034:	2b20      	cmp	r3, #32
 800a036:	d0f0      	beq.n	800a01a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3714      	adds	r7, #20
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	00030d40 	.word	0x00030d40

0800a04c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a054:	2300      	movs	r3, #0
 800a056:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2210      	movs	r2, #16
 800a05c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	3301      	adds	r3, #1
 800a062:	60fb      	str	r3, [r7, #12]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	4a09      	ldr	r2, [pc, #36]	; (800a08c <USB_FlushRxFifo+0x40>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d901      	bls.n	800a070 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a06c:	2303      	movs	r3, #3
 800a06e:	e006      	b.n	800a07e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	f003 0310 	and.w	r3, r3, #16
 800a078:	2b10      	cmp	r3, #16
 800a07a:	d0f0      	beq.n	800a05e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3714      	adds	r7, #20
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	00030d40 	.word	0x00030d40

0800a090 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	78fb      	ldrb	r3, [r7, #3]
 800a0aa:	68f9      	ldr	r1, [r7, #12]
 800a0ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3714      	adds	r7, #20
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a0c2:	b480      	push	{r7}
 800a0c4:	b087      	sub	sp, #28
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	f003 0306 	and.w	r3, r3, #6
 800a0da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d102      	bne.n	800a0e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	75fb      	strb	r3, [r7, #23]
 800a0e6:	e00a      	b.n	800a0fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d002      	beq.n	800a0f4 <USB_GetDevSpeed+0x32>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2b06      	cmp	r3, #6
 800a0f2:	d102      	bne.n	800a0fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a0f4:	2302      	movs	r3, #2
 800a0f6:	75fb      	strb	r3, [r7, #23]
 800a0f8:	e001      	b.n	800a0fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a0fa:	230f      	movs	r3, #15
 800a0fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a0fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a100:	4618      	mov	r0, r3
 800a102:	371c      	adds	r7, #28
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	785b      	ldrb	r3, [r3, #1]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d13a      	bne.n	800a19e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a12e:	69da      	ldr	r2, [r3, #28]
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	f003 030f 	and.w	r3, r3, #15
 800a138:	2101      	movs	r1, #1
 800a13a:	fa01 f303 	lsl.w	r3, r1, r3
 800a13e:	b29b      	uxth	r3, r3
 800a140:	68f9      	ldr	r1, [r7, #12]
 800a142:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a146:	4313      	orrs	r3, r2
 800a148:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	015a      	lsls	r2, r3, #5
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	4413      	add	r3, r2
 800a152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d155      	bne.n	800a20c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	015a      	lsls	r2, r3, #5
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	4413      	add	r3, r2
 800a168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	78db      	ldrb	r3, [r3, #3]
 800a17a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a17c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	059b      	lsls	r3, r3, #22
 800a182:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a184:	4313      	orrs	r3, r2
 800a186:	68ba      	ldr	r2, [r7, #8]
 800a188:	0151      	lsls	r1, r2, #5
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	440a      	add	r2, r1
 800a18e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a19a:	6013      	str	r3, [r2, #0]
 800a19c:	e036      	b.n	800a20c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1a4:	69da      	ldr	r2, [r3, #28]
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	f003 030f 	and.w	r3, r3, #15
 800a1ae:	2101      	movs	r1, #1
 800a1b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a1b4:	041b      	lsls	r3, r3, #16
 800a1b6:	68f9      	ldr	r1, [r7, #12]
 800a1b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	015a      	lsls	r2, r3, #5
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d11a      	bne.n	800a20c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	015a      	lsls	r2, r3, #5
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	4413      	add	r3, r2
 800a1de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	78db      	ldrb	r3, [r3, #3]
 800a1f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a1f2:	430b      	orrs	r3, r1
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	68ba      	ldr	r2, [r7, #8]
 800a1f8:	0151      	lsls	r1, r2, #5
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	440a      	add	r2, r1
 800a1fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a20a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3714      	adds	r7, #20
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr
	...

0800a21c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b085      	sub	sp, #20
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	785b      	ldrb	r3, [r3, #1]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d161      	bne.n	800a2fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	015a      	lsls	r2, r3, #5
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	4413      	add	r3, r2
 800a240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a24a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a24e:	d11f      	bne.n	800a290 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	015a      	lsls	r2, r3, #5
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	4413      	add	r3, r2
 800a258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	0151      	lsls	r1, r2, #5
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	440a      	add	r2, r1
 800a266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a26a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a26e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	015a      	lsls	r2, r3, #5
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	4413      	add	r3, r2
 800a278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	0151      	lsls	r1, r2, #5
 800a282:	68fa      	ldr	r2, [r7, #12]
 800a284:	440a      	add	r2, r1
 800a286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a28a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a28e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	f003 030f 	and.w	r3, r3, #15
 800a2a0:	2101      	movs	r1, #1
 800a2a2:	fa01 f303 	lsl.w	r3, r1, r3
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	43db      	mvns	r3, r3
 800a2aa:	68f9      	ldr	r1, [r7, #12]
 800a2ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ba:	69da      	ldr	r2, [r3, #28]
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	f003 030f 	and.w	r3, r3, #15
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	43db      	mvns	r3, r3
 800a2ce:	68f9      	ldr	r1, [r7, #12]
 800a2d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	015a      	lsls	r2, r3, #5
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	4413      	add	r3, r2
 800a2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	0159      	lsls	r1, r3, #5
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	440b      	add	r3, r1
 800a2ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	4b35      	ldr	r3, [pc, #212]	; (800a3cc <USB_DeactivateEndpoint+0x1b0>)
 800a2f6:	4013      	ands	r3, r2
 800a2f8:	600b      	str	r3, [r1, #0]
 800a2fa:	e060      	b.n	800a3be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	015a      	lsls	r2, r3, #5
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	4413      	add	r3, r2
 800a304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a30e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a312:	d11f      	bne.n	800a354 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	015a      	lsls	r2, r3, #5
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	4413      	add	r3, r2
 800a31c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	0151      	lsls	r1, r2, #5
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	440a      	add	r2, r1
 800a32a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a32e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a332:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	015a      	lsls	r2, r3, #5
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	4413      	add	r3, r2
 800a33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	68ba      	ldr	r2, [r7, #8]
 800a344:	0151      	lsls	r1, r2, #5
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	440a      	add	r2, r1
 800a34a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a34e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a352:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a35a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	f003 030f 	and.w	r3, r3, #15
 800a364:	2101      	movs	r1, #1
 800a366:	fa01 f303 	lsl.w	r3, r1, r3
 800a36a:	041b      	lsls	r3, r3, #16
 800a36c:	43db      	mvns	r3, r3
 800a36e:	68f9      	ldr	r1, [r7, #12]
 800a370:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a374:	4013      	ands	r3, r2
 800a376:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a37e:	69da      	ldr	r2, [r3, #28]
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	f003 030f 	and.w	r3, r3, #15
 800a388:	2101      	movs	r1, #1
 800a38a:	fa01 f303 	lsl.w	r3, r1, r3
 800a38e:	041b      	lsls	r3, r3, #16
 800a390:	43db      	mvns	r3, r3
 800a392:	68f9      	ldr	r1, [r7, #12]
 800a394:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a398:	4013      	ands	r3, r2
 800a39a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	015a      	lsls	r2, r3, #5
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	0159      	lsls	r1, r3, #5
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	440b      	add	r3, r1
 800a3b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	4b05      	ldr	r3, [pc, #20]	; (800a3d0 <USB_DeactivateEndpoint+0x1b4>)
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a3be:	2300      	movs	r3, #0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3714      	adds	r7, #20
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr
 800a3cc:	ec337800 	.word	0xec337800
 800a3d0:	eff37800 	.word	0xeff37800

0800a3d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b08a      	sub	sp, #40	; 0x28
 800a3d8:	af02      	add	r7, sp, #8
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	4613      	mov	r3, r2
 800a3e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	785b      	ldrb	r3, [r3, #1]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	f040 815c 	bne.w	800a6ae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	695b      	ldr	r3, [r3, #20]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d132      	bne.n	800a464 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	015a      	lsls	r2, r3, #5
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	4413      	add	r3, r2
 800a406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	69ba      	ldr	r2, [r7, #24]
 800a40e:	0151      	lsls	r1, r2, #5
 800a410:	69fa      	ldr	r2, [r7, #28]
 800a412:	440a      	add	r2, r1
 800a414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a418:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a41c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a420:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	015a      	lsls	r2, r3, #5
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	4413      	add	r3, r2
 800a42a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a42e:	691b      	ldr	r3, [r3, #16]
 800a430:	69ba      	ldr	r2, [r7, #24]
 800a432:	0151      	lsls	r1, r2, #5
 800a434:	69fa      	ldr	r2, [r7, #28]
 800a436:	440a      	add	r2, r1
 800a438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a43c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a440:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	015a      	lsls	r2, r3, #5
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	4413      	add	r3, r2
 800a44a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	69ba      	ldr	r2, [r7, #24]
 800a452:	0151      	lsls	r1, r2, #5
 800a454:	69fa      	ldr	r2, [r7, #28]
 800a456:	440a      	add	r2, r1
 800a458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a45c:	0cdb      	lsrs	r3, r3, #19
 800a45e:	04db      	lsls	r3, r3, #19
 800a460:	6113      	str	r3, [r2, #16]
 800a462:	e074      	b.n	800a54e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	015a      	lsls	r2, r3, #5
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	4413      	add	r3, r2
 800a46c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	69ba      	ldr	r2, [r7, #24]
 800a474:	0151      	lsls	r1, r2, #5
 800a476:	69fa      	ldr	r2, [r7, #28]
 800a478:	440a      	add	r2, r1
 800a47a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a47e:	0cdb      	lsrs	r3, r3, #19
 800a480:	04db      	lsls	r3, r3, #19
 800a482:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	015a      	lsls	r2, r3, #5
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	4413      	add	r3, r2
 800a48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	69ba      	ldr	r2, [r7, #24]
 800a494:	0151      	lsls	r1, r2, #5
 800a496:	69fa      	ldr	r2, [r7, #28]
 800a498:	440a      	add	r2, r1
 800a49a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a49e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a4a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a4a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	015a      	lsls	r2, r3, #5
 800a4ac:	69fb      	ldr	r3, [r7, #28]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b4:	691a      	ldr	r2, [r3, #16]
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	6959      	ldr	r1, [r3, #20]
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	440b      	add	r3, r1
 800a4c0:	1e59      	subs	r1, r3, #1
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	fbb1 f3f3 	udiv	r3, r1, r3
 800a4ca:	04d9      	lsls	r1, r3, #19
 800a4cc:	4b9d      	ldr	r3, [pc, #628]	; (800a744 <USB_EPStartXfer+0x370>)
 800a4ce:	400b      	ands	r3, r1
 800a4d0:	69b9      	ldr	r1, [r7, #24]
 800a4d2:	0148      	lsls	r0, r1, #5
 800a4d4:	69f9      	ldr	r1, [r7, #28]
 800a4d6:	4401      	add	r1, r0
 800a4d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	015a      	lsls	r2, r3, #5
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4ec:	691a      	ldr	r2, [r3, #16]
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4f6:	69b9      	ldr	r1, [r7, #24]
 800a4f8:	0148      	lsls	r0, r1, #5
 800a4fa:	69f9      	ldr	r1, [r7, #28]
 800a4fc:	4401      	add	r1, r0
 800a4fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a502:	4313      	orrs	r3, r2
 800a504:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	78db      	ldrb	r3, [r3, #3]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d11f      	bne.n	800a54e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	015a      	lsls	r2, r3, #5
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	4413      	add	r3, r2
 800a516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	69ba      	ldr	r2, [r7, #24]
 800a51e:	0151      	lsls	r1, r2, #5
 800a520:	69fa      	ldr	r2, [r7, #28]
 800a522:	440a      	add	r2, r1
 800a524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a528:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a52c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	015a      	lsls	r2, r3, #5
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	4413      	add	r3, r2
 800a536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	69ba      	ldr	r2, [r7, #24]
 800a53e:	0151      	lsls	r1, r2, #5
 800a540:	69fa      	ldr	r2, [r7, #28]
 800a542:	440a      	add	r2, r1
 800a544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a548:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a54c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a54e:	79fb      	ldrb	r3, [r7, #7]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d14b      	bne.n	800a5ec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	691b      	ldr	r3, [r3, #16]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d009      	beq.n	800a570 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	015a      	lsls	r2, r3, #5
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	4413      	add	r3, r2
 800a564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a568:	461a      	mov	r2, r3
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	78db      	ldrb	r3, [r3, #3]
 800a574:	2b01      	cmp	r3, #1
 800a576:	d128      	bne.n	800a5ca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a584:	2b00      	cmp	r3, #0
 800a586:	d110      	bne.n	800a5aa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	015a      	lsls	r2, r3, #5
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	4413      	add	r3, r2
 800a590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	69ba      	ldr	r2, [r7, #24]
 800a598:	0151      	lsls	r1, r2, #5
 800a59a:	69fa      	ldr	r2, [r7, #28]
 800a59c:	440a      	add	r2, r1
 800a59e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a5a6:	6013      	str	r3, [r2, #0]
 800a5a8:	e00f      	b.n	800a5ca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	015a      	lsls	r2, r3, #5
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	69ba      	ldr	r2, [r7, #24]
 800a5ba:	0151      	lsls	r1, r2, #5
 800a5bc:	69fa      	ldr	r2, [r7, #28]
 800a5be:	440a      	add	r2, r1
 800a5c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	015a      	lsls	r2, r3, #5
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	69ba      	ldr	r2, [r7, #24]
 800a5da:	0151      	lsls	r1, r2, #5
 800a5dc:	69fa      	ldr	r2, [r7, #28]
 800a5de:	440a      	add	r2, r1
 800a5e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a5e8:	6013      	str	r3, [r2, #0]
 800a5ea:	e12f      	b.n	800a84c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	015a      	lsls	r2, r3, #5
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	69ba      	ldr	r2, [r7, #24]
 800a5fc:	0151      	lsls	r1, r2, #5
 800a5fe:	69fa      	ldr	r2, [r7, #28]
 800a600:	440a      	add	r2, r1
 800a602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a606:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a60a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	78db      	ldrb	r3, [r3, #3]
 800a610:	2b01      	cmp	r3, #1
 800a612:	d015      	beq.n	800a640 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	695b      	ldr	r3, [r3, #20]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f000 8117 	beq.w	800a84c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	f003 030f 	and.w	r3, r3, #15
 800a62e:	2101      	movs	r1, #1
 800a630:	fa01 f303 	lsl.w	r3, r1, r3
 800a634:	69f9      	ldr	r1, [r7, #28]
 800a636:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a63a:	4313      	orrs	r3, r2
 800a63c:	634b      	str	r3, [r1, #52]	; 0x34
 800a63e:	e105      	b.n	800a84c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d110      	bne.n	800a672 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	015a      	lsls	r2, r3, #5
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	4413      	add	r3, r2
 800a658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	69ba      	ldr	r2, [r7, #24]
 800a660:	0151      	lsls	r1, r2, #5
 800a662:	69fa      	ldr	r2, [r7, #28]
 800a664:	440a      	add	r2, r1
 800a666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a66a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a66e:	6013      	str	r3, [r2, #0]
 800a670:	e00f      	b.n	800a692 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	015a      	lsls	r2, r3, #5
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	4413      	add	r3, r2
 800a67a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	69ba      	ldr	r2, [r7, #24]
 800a682:	0151      	lsls	r1, r2, #5
 800a684:	69fa      	ldr	r2, [r7, #28]
 800a686:	440a      	add	r2, r1
 800a688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a68c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a690:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	68d9      	ldr	r1, [r3, #12]
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	781a      	ldrb	r2, [r3, #0]
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	695b      	ldr	r3, [r3, #20]
 800a69e:	b298      	uxth	r0, r3
 800a6a0:	79fb      	ldrb	r3, [r7, #7]
 800a6a2:	9300      	str	r3, [sp, #0]
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f000 fa2b 	bl	800ab02 <USB_WritePacket>
 800a6ac:	e0ce      	b.n	800a84c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	015a      	lsls	r2, r3, #5
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	69ba      	ldr	r2, [r7, #24]
 800a6be:	0151      	lsls	r1, r2, #5
 800a6c0:	69fa      	ldr	r2, [r7, #28]
 800a6c2:	440a      	add	r2, r1
 800a6c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6c8:	0cdb      	lsrs	r3, r3, #19
 800a6ca:	04db      	lsls	r3, r3, #19
 800a6cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	015a      	lsls	r2, r3, #5
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	69ba      	ldr	r2, [r7, #24]
 800a6de:	0151      	lsls	r1, r2, #5
 800a6e0:	69fa      	ldr	r2, [r7, #28]
 800a6e2:	440a      	add	r2, r1
 800a6e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a6ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a6f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d126      	bne.n	800a748 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a6fa:	69bb      	ldr	r3, [r7, #24]
 800a6fc:	015a      	lsls	r2, r3, #5
 800a6fe:	69fb      	ldr	r3, [r7, #28]
 800a700:	4413      	add	r3, r2
 800a702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a706:	691a      	ldr	r2, [r3, #16]
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a710:	69b9      	ldr	r1, [r7, #24]
 800a712:	0148      	lsls	r0, r1, #5
 800a714:	69f9      	ldr	r1, [r7, #28]
 800a716:	4401      	add	r1, r0
 800a718:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a71c:	4313      	orrs	r3, r2
 800a71e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	015a      	lsls	r2, r3, #5
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	4413      	add	r3, r2
 800a728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	69ba      	ldr	r2, [r7, #24]
 800a730:	0151      	lsls	r1, r2, #5
 800a732:	69fa      	ldr	r2, [r7, #28]
 800a734:	440a      	add	r2, r1
 800a736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a73a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a73e:	6113      	str	r3, [r2, #16]
 800a740:	e036      	b.n	800a7b0 <USB_EPStartXfer+0x3dc>
 800a742:	bf00      	nop
 800a744:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	695a      	ldr	r2, [r3, #20]
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	4413      	add	r3, r2
 800a752:	1e5a      	subs	r2, r3, #1
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	fbb2 f3f3 	udiv	r3, r2, r3
 800a75c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a75e:	69bb      	ldr	r3, [r7, #24]
 800a760:	015a      	lsls	r2, r3, #5
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	4413      	add	r3, r2
 800a766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a76a:	691a      	ldr	r2, [r3, #16]
 800a76c:	8afb      	ldrh	r3, [r7, #22]
 800a76e:	04d9      	lsls	r1, r3, #19
 800a770:	4b39      	ldr	r3, [pc, #228]	; (800a858 <USB_EPStartXfer+0x484>)
 800a772:	400b      	ands	r3, r1
 800a774:	69b9      	ldr	r1, [r7, #24]
 800a776:	0148      	lsls	r0, r1, #5
 800a778:	69f9      	ldr	r1, [r7, #28]
 800a77a:	4401      	add	r1, r0
 800a77c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a780:	4313      	orrs	r3, r2
 800a782:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	015a      	lsls	r2, r3, #5
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	4413      	add	r3, r2
 800a78c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a790:	691a      	ldr	r2, [r3, #16]
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	8af9      	ldrh	r1, [r7, #22]
 800a798:	fb01 f303 	mul.w	r3, r1, r3
 800a79c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7a0:	69b9      	ldr	r1, [r7, #24]
 800a7a2:	0148      	lsls	r0, r1, #5
 800a7a4:	69f9      	ldr	r1, [r7, #28]
 800a7a6:	4401      	add	r1, r0
 800a7a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a7b0:	79fb      	ldrb	r3, [r7, #7]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d10d      	bne.n	800a7d2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d009      	beq.n	800a7d2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	68d9      	ldr	r1, [r3, #12]
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	015a      	lsls	r2, r3, #5
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ce:	460a      	mov	r2, r1
 800a7d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	78db      	ldrb	r3, [r3, #3]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d128      	bne.n	800a82c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d110      	bne.n	800a80c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	015a      	lsls	r2, r3, #5
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	69ba      	ldr	r2, [r7, #24]
 800a7fa:	0151      	lsls	r1, r2, #5
 800a7fc:	69fa      	ldr	r2, [r7, #28]
 800a7fe:	440a      	add	r2, r1
 800a800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a804:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a808:	6013      	str	r3, [r2, #0]
 800a80a:	e00f      	b.n	800a82c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	015a      	lsls	r2, r3, #5
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	4413      	add	r3, r2
 800a814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	69ba      	ldr	r2, [r7, #24]
 800a81c:	0151      	lsls	r1, r2, #5
 800a81e:	69fa      	ldr	r2, [r7, #28]
 800a820:	440a      	add	r2, r1
 800a822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a82a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	015a      	lsls	r2, r3, #5
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	4413      	add	r3, r2
 800a834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	69ba      	ldr	r2, [r7, #24]
 800a83c:	0151      	lsls	r1, r2, #5
 800a83e:	69fa      	ldr	r2, [r7, #28]
 800a840:	440a      	add	r2, r1
 800a842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a846:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a84a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3720      	adds	r7, #32
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	1ff80000 	.word	0x1ff80000

0800a85c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b087      	sub	sp, #28
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	4613      	mov	r3, r2
 800a868:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	785b      	ldrb	r3, [r3, #1]
 800a878:	2b01      	cmp	r3, #1
 800a87a:	f040 80cd 	bne.w	800aa18 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	695b      	ldr	r3, [r3, #20]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d132      	bne.n	800a8ec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	015a      	lsls	r2, r3, #5
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	4413      	add	r3, r2
 800a88e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	0151      	lsls	r1, r2, #5
 800a898:	697a      	ldr	r2, [r7, #20]
 800a89a:	440a      	add	r2, r1
 800a89c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a8a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a8a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	015a      	lsls	r2, r3, #5
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	693a      	ldr	r2, [r7, #16]
 800a8ba:	0151      	lsls	r1, r2, #5
 800a8bc:	697a      	ldr	r2, [r7, #20]
 800a8be:	440a      	add	r2, r1
 800a8c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a8c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	015a      	lsls	r2, r3, #5
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8d6:	691b      	ldr	r3, [r3, #16]
 800a8d8:	693a      	ldr	r2, [r7, #16]
 800a8da:	0151      	lsls	r1, r2, #5
 800a8dc:	697a      	ldr	r2, [r7, #20]
 800a8de:	440a      	add	r2, r1
 800a8e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8e4:	0cdb      	lsrs	r3, r3, #19
 800a8e6:	04db      	lsls	r3, r3, #19
 800a8e8:	6113      	str	r3, [r2, #16]
 800a8ea:	e04e      	b.n	800a98a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	015a      	lsls	r2, r3, #5
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	693a      	ldr	r2, [r7, #16]
 800a8fc:	0151      	lsls	r1, r2, #5
 800a8fe:	697a      	ldr	r2, [r7, #20]
 800a900:	440a      	add	r2, r1
 800a902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a906:	0cdb      	lsrs	r3, r3, #19
 800a908:	04db      	lsls	r3, r3, #19
 800a90a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	015a      	lsls	r2, r3, #5
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	4413      	add	r3, r2
 800a914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a918:	691b      	ldr	r3, [r3, #16]
 800a91a:	693a      	ldr	r2, [r7, #16]
 800a91c:	0151      	lsls	r1, r2, #5
 800a91e:	697a      	ldr	r2, [r7, #20]
 800a920:	440a      	add	r2, r1
 800a922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a926:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a92a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a92e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	695a      	ldr	r2, [r3, #20]
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d903      	bls.n	800a944 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	689a      	ldr	r2, [r3, #8]
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	015a      	lsls	r2, r3, #5
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	4413      	add	r3, r2
 800a94c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a950:	691b      	ldr	r3, [r3, #16]
 800a952:	693a      	ldr	r2, [r7, #16]
 800a954:	0151      	lsls	r1, r2, #5
 800a956:	697a      	ldr	r2, [r7, #20]
 800a958:	440a      	add	r2, r1
 800a95a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a95e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a962:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	015a      	lsls	r2, r3, #5
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	4413      	add	r3, r2
 800a96c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a970:	691a      	ldr	r2, [r3, #16]
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	695b      	ldr	r3, [r3, #20]
 800a976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a97a:	6939      	ldr	r1, [r7, #16]
 800a97c:	0148      	lsls	r0, r1, #5
 800a97e:	6979      	ldr	r1, [r7, #20]
 800a980:	4401      	add	r1, r0
 800a982:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a986:	4313      	orrs	r3, r2
 800a988:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a98a:	79fb      	ldrb	r3, [r7, #7]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d11e      	bne.n	800a9ce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d009      	beq.n	800a9ac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	015a      	lsls	r2, r3, #5
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	4413      	add	r3, r2
 800a9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	691b      	ldr	r3, [r3, #16]
 800a9aa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	015a      	lsls	r2, r3, #5
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	693a      	ldr	r2, [r7, #16]
 800a9bc:	0151      	lsls	r1, r2, #5
 800a9be:	697a      	ldr	r2, [r7, #20]
 800a9c0:	440a      	add	r2, r1
 800a9c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a9ca:	6013      	str	r3, [r2, #0]
 800a9cc:	e092      	b.n	800aaf4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	015a      	lsls	r2, r3, #5
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	693a      	ldr	r2, [r7, #16]
 800a9de:	0151      	lsls	r1, r2, #5
 800a9e0:	697a      	ldr	r2, [r7, #20]
 800a9e2:	440a      	add	r2, r1
 800a9e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a9ec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	695b      	ldr	r3, [r3, #20]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d07e      	beq.n	800aaf4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	f003 030f 	and.w	r3, r3, #15
 800aa06:	2101      	movs	r1, #1
 800aa08:	fa01 f303 	lsl.w	r3, r1, r3
 800aa0c:	6979      	ldr	r1, [r7, #20]
 800aa0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa12:	4313      	orrs	r3, r2
 800aa14:	634b      	str	r3, [r1, #52]	; 0x34
 800aa16:	e06d      	b.n	800aaf4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	015a      	lsls	r2, r3, #5
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	4413      	add	r3, r2
 800aa20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	693a      	ldr	r2, [r7, #16]
 800aa28:	0151      	lsls	r1, r2, #5
 800aa2a:	697a      	ldr	r2, [r7, #20]
 800aa2c:	440a      	add	r2, r1
 800aa2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa32:	0cdb      	lsrs	r3, r3, #19
 800aa34:	04db      	lsls	r3, r3, #19
 800aa36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	015a      	lsls	r2, r3, #5
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	4413      	add	r3, r2
 800aa40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa44:	691b      	ldr	r3, [r3, #16]
 800aa46:	693a      	ldr	r2, [r7, #16]
 800aa48:	0151      	lsls	r1, r2, #5
 800aa4a:	697a      	ldr	r2, [r7, #20]
 800aa4c:	440a      	add	r2, r1
 800aa4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aa56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aa5a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	695b      	ldr	r3, [r3, #20]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d003      	beq.n	800aa6c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	689a      	ldr	r2, [r3, #8]
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	015a      	lsls	r2, r3, #5
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	4413      	add	r3, r2
 800aa74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	693a      	ldr	r2, [r7, #16]
 800aa7c:	0151      	lsls	r1, r2, #5
 800aa7e:	697a      	ldr	r2, [r7, #20]
 800aa80:	440a      	add	r2, r1
 800aa82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	015a      	lsls	r2, r3, #5
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	4413      	add	r3, r2
 800aa94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa98:	691a      	ldr	r2, [r3, #16]
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aaa2:	6939      	ldr	r1, [r7, #16]
 800aaa4:	0148      	lsls	r0, r1, #5
 800aaa6:	6979      	ldr	r1, [r7, #20]
 800aaa8:	4401      	add	r1, r0
 800aaaa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aaae:	4313      	orrs	r3, r2
 800aab0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800aab2:	79fb      	ldrb	r3, [r7, #7]
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d10d      	bne.n	800aad4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d009      	beq.n	800aad4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	68d9      	ldr	r1, [r3, #12]
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	015a      	lsls	r2, r3, #5
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	4413      	add	r3, r2
 800aacc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aad0:	460a      	mov	r2, r1
 800aad2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	015a      	lsls	r2, r3, #5
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	4413      	add	r3, r2
 800aadc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	693a      	ldr	r2, [r7, #16]
 800aae4:	0151      	lsls	r1, r2, #5
 800aae6:	697a      	ldr	r2, [r7, #20]
 800aae8:	440a      	add	r2, r1
 800aaea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aaf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	371c      	adds	r7, #28
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ab02:	b480      	push	{r7}
 800ab04:	b089      	sub	sp, #36	; 0x24
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	60f8      	str	r0, [r7, #12]
 800ab0a:	60b9      	str	r1, [r7, #8]
 800ab0c:	4611      	mov	r1, r2
 800ab0e:	461a      	mov	r2, r3
 800ab10:	460b      	mov	r3, r1
 800ab12:	71fb      	strb	r3, [r7, #7]
 800ab14:	4613      	mov	r3, r2
 800ab16:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ab20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d11a      	bne.n	800ab5e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ab28:	88bb      	ldrh	r3, [r7, #4]
 800ab2a:	3303      	adds	r3, #3
 800ab2c:	089b      	lsrs	r3, r3, #2
 800ab2e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ab30:	2300      	movs	r3, #0
 800ab32:	61bb      	str	r3, [r7, #24]
 800ab34:	e00f      	b.n	800ab56 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ab36:	79fb      	ldrb	r3, [r7, #7]
 800ab38:	031a      	lsls	r2, r3, #12
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab42:	461a      	mov	r2, r3
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	3304      	adds	r3, #4
 800ab4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ab50:	69bb      	ldr	r3, [r7, #24]
 800ab52:	3301      	adds	r3, #1
 800ab54:	61bb      	str	r3, [r7, #24]
 800ab56:	69ba      	ldr	r2, [r7, #24]
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d3eb      	bcc.n	800ab36 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3724      	adds	r7, #36	; 0x24
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b089      	sub	sp, #36	; 0x24
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	4613      	mov	r3, r2
 800ab78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ab82:	88fb      	ldrh	r3, [r7, #6]
 800ab84:	3303      	adds	r3, #3
 800ab86:	089b      	lsrs	r3, r3, #2
 800ab88:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	61bb      	str	r3, [r7, #24]
 800ab8e:	e00b      	b.n	800aba8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	601a      	str	r2, [r3, #0]
    pDest++;
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	3304      	adds	r3, #4
 800aba0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	3301      	adds	r3, #1
 800aba6:	61bb      	str	r3, [r7, #24]
 800aba8:	69ba      	ldr	r2, [r7, #24]
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	429a      	cmp	r2, r3
 800abae:	d3ef      	bcc.n	800ab90 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800abb0:	69fb      	ldr	r3, [r7, #28]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3724      	adds	r7, #36	; 0x24
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr

0800abbe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800abbe:	b480      	push	{r7}
 800abc0:	b085      	sub	sp, #20
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	785b      	ldrb	r3, [r3, #1]
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d12c      	bne.n	800ac34 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	015a      	lsls	r2, r3, #5
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	4413      	add	r3, r2
 800abe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	db12      	blt.n	800ac12 <USB_EPSetStall+0x54>
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00f      	beq.n	800ac12 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	015a      	lsls	r2, r3, #5
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	4413      	add	r3, r2
 800abfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	68ba      	ldr	r2, [r7, #8]
 800ac02:	0151      	lsls	r1, r2, #5
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	440a      	add	r2, r1
 800ac08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac10:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	015a      	lsls	r2, r3, #5
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	4413      	add	r3, r2
 800ac1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	68ba      	ldr	r2, [r7, #8]
 800ac22:	0151      	lsls	r1, r2, #5
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	440a      	add	r2, r1
 800ac28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac30:	6013      	str	r3, [r2, #0]
 800ac32:	e02b      	b.n	800ac8c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	015a      	lsls	r2, r3, #5
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	db12      	blt.n	800ac6c <USB_EPSetStall+0xae>
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d00f      	beq.n	800ac6c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	015a      	lsls	r2, r3, #5
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	4413      	add	r3, r2
 800ac54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	0151      	lsls	r1, r2, #5
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	440a      	add	r2, r1
 800ac62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac6a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	015a      	lsls	r2, r3, #5
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	4413      	add	r3, r2
 800ac74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	0151      	lsls	r1, r2, #5
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	440a      	add	r2, r1
 800ac82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3714      	adds	r7, #20
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr

0800ac9a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac9a:	b480      	push	{r7}
 800ac9c:	b085      	sub	sp, #20
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	785b      	ldrb	r3, [r3, #1]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d128      	bne.n	800ad08 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	015a      	lsls	r2, r3, #5
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	4413      	add	r3, r2
 800acbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	68ba      	ldr	r2, [r7, #8]
 800acc6:	0151      	lsls	r1, r2, #5
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	440a      	add	r2, r1
 800accc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800acd4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	78db      	ldrb	r3, [r3, #3]
 800acda:	2b03      	cmp	r3, #3
 800acdc:	d003      	beq.n	800ace6 <USB_EPClearStall+0x4c>
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	78db      	ldrb	r3, [r3, #3]
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d138      	bne.n	800ad58 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	015a      	lsls	r2, r3, #5
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	4413      	add	r3, r2
 800acee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68ba      	ldr	r2, [r7, #8]
 800acf6:	0151      	lsls	r1, r2, #5
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	440a      	add	r2, r1
 800acfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad04:	6013      	str	r3, [r2, #0]
 800ad06:	e027      	b.n	800ad58 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	015a      	lsls	r2, r3, #5
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	4413      	add	r3, r2
 800ad10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68ba      	ldr	r2, [r7, #8]
 800ad18:	0151      	lsls	r1, r2, #5
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	440a      	add	r2, r1
 800ad1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ad26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	78db      	ldrb	r3, [r3, #3]
 800ad2c:	2b03      	cmp	r3, #3
 800ad2e:	d003      	beq.n	800ad38 <USB_EPClearStall+0x9e>
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	78db      	ldrb	r3, [r3, #3]
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	d10f      	bne.n	800ad58 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	015a      	lsls	r2, r3, #5
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	4413      	add	r3, r2
 800ad40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	0151      	lsls	r1, r2, #5
 800ad4a:	68fa      	ldr	r2, [r7, #12]
 800ad4c:	440a      	add	r2, r1
 800ad4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad56:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3714      	adds	r7, #20
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr

0800ad66 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ad66:	b480      	push	{r7}
 800ad68:	b085      	sub	sp, #20
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	460b      	mov	r3, r1
 800ad70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	68fa      	ldr	r2, [r7, #12]
 800ad80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad84:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ad88:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	78fb      	ldrb	r3, [r7, #3]
 800ad94:	011b      	lsls	r3, r3, #4
 800ad96:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ad9a:	68f9      	ldr	r1, [r7, #12]
 800ad9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ada0:	4313      	orrs	r3, r2
 800ada2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3714      	adds	r7, #20
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr

0800adb2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b084      	sub	sp, #16
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800adcc:	f023 0302 	bic.w	r3, r3, #2
 800add0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800add2:	2003      	movs	r0, #3
 800add4:	f7f7 ff46 	bl	8002c64 <HAL_Delay>

  return HAL_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b084      	sub	sp, #16
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800adfc:	f043 0302 	orr.w	r3, r3, #2
 800ae00:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ae02:	2003      	movs	r0, #3
 800ae04:	f7f7 ff2e 	bl	8002c64 <HAL_Delay>

  return HAL_OK;
 800ae08:	2300      	movs	r3, #0
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ae12:	b480      	push	{r7}
 800ae14:	b085      	sub	sp, #20
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	695b      	ldr	r3, [r3, #20]
 800ae1e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	699b      	ldr	r3, [r3, #24]
 800ae24:	68fa      	ldr	r2, [r7, #12]
 800ae26:	4013      	ands	r3, r2
 800ae28:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3714      	adds	r7, #20
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae4a:	699b      	ldr	r3, [r3, #24]
 800ae4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae54:	69db      	ldr	r3, [r3, #28]
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	4013      	ands	r3, r2
 800ae5a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	0c1b      	lsrs	r3, r3, #16
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3714      	adds	r7, #20
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae7e:	699b      	ldr	r3, [r3, #24]
 800ae80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae88:	69db      	ldr	r3, [r3, #28]
 800ae8a:	68ba      	ldr	r2, [r7, #8]
 800ae8c:	4013      	ands	r3, r2
 800ae8e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	b29b      	uxth	r3, r3
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3714      	adds	r7, #20
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	460b      	mov	r3, r1
 800aeaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800aeb0:	78fb      	ldrb	r3, [r7, #3]
 800aeb2:	015a      	lsls	r2, r3, #5
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aec6:	695b      	ldr	r3, [r3, #20]
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	4013      	ands	r3, r2
 800aecc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aece:	68bb      	ldr	r3, [r7, #8]
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3714      	adds	r7, #20
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aedc:	b480      	push	{r7}
 800aede:	b087      	sub	sp, #28
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	460b      	mov	r3, r1
 800aee6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aef2:	691b      	ldr	r3, [r3, #16]
 800aef4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aefc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aefe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800af00:	78fb      	ldrb	r3, [r7, #3]
 800af02:	f003 030f 	and.w	r3, r3, #15
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	fa22 f303 	lsr.w	r3, r2, r3
 800af0c:	01db      	lsls	r3, r3, #7
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	693a      	ldr	r2, [r7, #16]
 800af12:	4313      	orrs	r3, r2
 800af14:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800af16:	78fb      	ldrb	r3, [r7, #3]
 800af18:	015a      	lsls	r2, r3, #5
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	4413      	add	r3, r2
 800af1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	693a      	ldr	r2, [r7, #16]
 800af26:	4013      	ands	r3, r2
 800af28:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800af2a:	68bb      	ldr	r3, [r7, #8]
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	371c      	adds	r7, #28
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800af38:	b480      	push	{r7}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	695b      	ldr	r3, [r3, #20]
 800af44:	f003 0301 	and.w	r3, r3, #1
}
 800af48:	4618      	mov	r0, r3
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	68fa      	ldr	r2, [r7, #12]
 800af6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800af72:	f023 0307 	bic.w	r3, r3, #7
 800af76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3714      	adds	r7, #20
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr
	...

0800af9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b087      	sub	sp, #28
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	460b      	mov	r3, r1
 800afa6:	607a      	str	r2, [r7, #4]
 800afa8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	333c      	adds	r3, #60	; 0x3c
 800afb2:	3304      	adds	r3, #4
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	4a26      	ldr	r2, [pc, #152]	; (800b054 <USB_EP0_OutStart+0xb8>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d90a      	bls.n	800afd6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800afcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800afd0:	d101      	bne.n	800afd6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800afd2:	2300      	movs	r3, #0
 800afd4:	e037      	b.n	800b046 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afdc:	461a      	mov	r2, r3
 800afde:	2300      	movs	r3, #0
 800afe0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	697a      	ldr	r2, [r7, #20]
 800afec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aff0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aff4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800affc:	691b      	ldr	r3, [r3, #16]
 800affe:	697a      	ldr	r2, [r7, #20]
 800b000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b004:	f043 0318 	orr.w	r3, r3, #24
 800b008:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	697a      	ldr	r2, [r7, #20]
 800b014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b018:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b01c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b01e:	7afb      	ldrb	r3, [r7, #11]
 800b020:	2b01      	cmp	r3, #1
 800b022:	d10f      	bne.n	800b044 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b02a:	461a      	mov	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	697a      	ldr	r2, [r7, #20]
 800b03a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b03e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b042:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b044:	2300      	movs	r3, #0
}
 800b046:	4618      	mov	r0, r3
 800b048:	371c      	adds	r7, #28
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	4f54300a 	.word	0x4f54300a

0800b058 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b058:	b480      	push	{r7}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b060:	2300      	movs	r3, #0
 800b062:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	3301      	adds	r3, #1
 800b068:	60fb      	str	r3, [r7, #12]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	4a13      	ldr	r2, [pc, #76]	; (800b0bc <USB_CoreReset+0x64>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d901      	bls.n	800b076 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b072:	2303      	movs	r3, #3
 800b074:	e01b      	b.n	800b0ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	691b      	ldr	r3, [r3, #16]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	daf2      	bge.n	800b064 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b07e:	2300      	movs	r3, #0
 800b080:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	f043 0201 	orr.w	r2, r3, #1
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	3301      	adds	r3, #1
 800b092:	60fb      	str	r3, [r7, #12]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	4a09      	ldr	r2, [pc, #36]	; (800b0bc <USB_CoreReset+0x64>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d901      	bls.n	800b0a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b09c:	2303      	movs	r3, #3
 800b09e:	e006      	b.n	800b0ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	691b      	ldr	r3, [r3, #16]
 800b0a4:	f003 0301 	and.w	r3, r3, #1
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d0f0      	beq.n	800b08e <USB_CoreReset+0x36>

  return HAL_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3714      	adds	r7, #20
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	00030d40 	.word	0x00030d40

0800b0c0 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

    /* Allocate Audio structure */
  haudio = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 800b0cc:	f641 30d0 	movw	r0, #7120	; 0x1bd0
 800b0d0:	f002 fa68 	bl	800d5a4 <malloc>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d105      	bne.n	800b0ea <USBD_AUDIO_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b0e6:	2302      	movs	r3, #2
 800b0e8:	e04b      	b.n	800b182 <USBD_AUDIO_Init+0xc2>
  }

  pdev->pClassData = (void *)haudio;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	7c1b      	ldrb	r3, [r3, #16]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d104      	bne.n	800b104 <USBD_AUDIO_Init+0x44>
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 800b102:	e003      	b.n	800b10c <USBD_AUDIO_Init+0x4c>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800b10c:	2358      	movs	r3, #88	; 0x58
 800b10e:	2201      	movs	r2, #1
 800b110:	2101      	movs	r1, #1
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f002 f8cd 	bl	800d2b2 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  haudio->alt_setting = 0U;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2200      	movs	r2, #0
 800b124:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b12c:	3304      	adds	r3, #4
 800b12e:	2203      	movs	r2, #3
 800b130:	701a      	strb	r2, [r3, #0]
  haudio->wr_ptr = 0U;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b138:	3308      	adds	r3, #8
 800b13a:	2200      	movs	r2, #0
 800b13c:	801a      	strh	r2, [r3, #0]
  haudio->rd_ptr = 0U;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b144:	3306      	adds	r3, #6
 800b146:	2200      	movs	r2, #0
 800b148:	801a      	strh	r2, [r3, #0]
  haudio->rd_enable = 0U;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b150:	3305      	adds	r3, #5
 800b152:	2200      	movs	r2, #0
 800b154:	701a      	strb	r2, [r3, #0]

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2200      	movs	r2, #0
 800b160:	2146      	movs	r1, #70	; 0x46
 800b162:	f245 6054 	movw	r0, #22100	; 0x5654
 800b166:	4798      	blx	r3
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d001      	beq.n	800b172 <USBD_AUDIO_Init+0xb2>
                                                       AUDIO_DEFAULT_VOLUME,
                                                       0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 800b16e:	2303      	movs	r3, #3
 800b170:	e007      	b.n	800b182 <USBD_AUDIO_Init+0xc2>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	1d1a      	adds	r2, r3, #4
 800b176:	2358      	movs	r3, #88	; 0x58
 800b178:	2101      	movs	r1, #1
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f002 f988 	bl	800d490 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}

0800b18a <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b18a:	b580      	push	{r7, lr}
 800b18c:	b082      	sub	sp, #8
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
 800b192:	460b      	mov	r3, r1
 800b194:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 800b196:	2101      	movs	r1, #1
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f002 f8b0 	bl	800d2fe <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = 0U;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d00f      	beq.n	800b1d8 <USBD_AUDIO_DeInit+0x4e>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f002 f9f2 	bl	800d5b4 <free>
    pdev->pClassData = NULL;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3708      	adds	r7, #8
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
	...

0800b1e4 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1fc:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b206:	2b00      	cmp	r3, #0
 800b208:	d01a      	beq.n	800b240 <USBD_AUDIO_Setup+0x5c>
 800b20a:	2b20      	cmp	r3, #32
 800b20c:	f040 809e 	bne.w	800b34c <USBD_AUDIO_Setup+0x168>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	785b      	ldrb	r3, [r3, #1]
 800b214:	2b01      	cmp	r3, #1
 800b216:	d006      	beq.n	800b226 <USBD_AUDIO_Setup+0x42>
 800b218:	2b81      	cmp	r3, #129	; 0x81
 800b21a:	d109      	bne.n	800b230 <USBD_AUDIO_Setup+0x4c>
    {
    case AUDIO_REQ_GET_CUR:
      AUDIO_REQ_GetCurrent(pdev, req);
 800b21c:	6839      	ldr	r1, [r7, #0]
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f9a0 	bl	800b564 <AUDIO_REQ_GetCurrent>
      break;
 800b224:	e00b      	b.n	800b23e <USBD_AUDIO_Setup+0x5a>

    case AUDIO_REQ_SET_CUR:
      AUDIO_REQ_SetCurrent(pdev, req);
 800b226:	6839      	ldr	r1, [r7, #0]
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 f9bb 	bl	800b5a4 <AUDIO_REQ_SetCurrent>
      break;
 800b22e:	e006      	b.n	800b23e <USBD_AUDIO_Setup+0x5a>

    default:
      USBD_CtlError(pdev, req);
 800b230:	6839      	ldr	r1, [r7, #0]
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f001 fb36 	bl	800c8a4 <USBD_CtlError>
      ret = USBD_FAIL;
 800b238:	2303      	movs	r3, #3
 800b23a:	75fb      	strb	r3, [r7, #23]
      break;
 800b23c:	bf00      	nop
    }
    break;
 800b23e:	e08c      	b.n	800b35a <USBD_AUDIO_Setup+0x176>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	785b      	ldrb	r3, [r3, #1]
 800b244:	2b0b      	cmp	r3, #11
 800b246:	d876      	bhi.n	800b336 <USBD_AUDIO_Setup+0x152>
 800b248:	a201      	add	r2, pc, #4	; (adr r2, 800b250 <USBD_AUDIO_Setup+0x6c>)
 800b24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24e:	bf00      	nop
 800b250:	0800b281 	.word	0x0800b281
 800b254:	0800b345 	.word	0x0800b345
 800b258:	0800b337 	.word	0x0800b337
 800b25c:	0800b337 	.word	0x0800b337
 800b260:	0800b337 	.word	0x0800b337
 800b264:	0800b337 	.word	0x0800b337
 800b268:	0800b2a9 	.word	0x0800b2a9
 800b26c:	0800b337 	.word	0x0800b337
 800b270:	0800b337 	.word	0x0800b337
 800b274:	0800b337 	.word	0x0800b337
 800b278:	0800b2d3 	.word	0x0800b2d3
 800b27c:	0800b2f9 	.word	0x0800b2f9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b286:	2b03      	cmp	r3, #3
 800b288:	d107      	bne.n	800b29a <USBD_AUDIO_Setup+0xb6>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b28a:	f107 0308 	add.w	r3, r7, #8
 800b28e:	2202      	movs	r2, #2
 800b290:	4619      	mov	r1, r3
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f001 fb77 	bl	800c986 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b298:	e057      	b.n	800b34a <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 800b29a:	6839      	ldr	r1, [r7, #0]
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f001 fb01 	bl	800c8a4 <USBD_CtlError>
        ret = USBD_FAIL;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	75fb      	strb	r3, [r7, #23]
      break;
 800b2a6:	e050      	b.n	800b34a <USBD_AUDIO_Setup+0x166>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	885b      	ldrh	r3, [r3, #2]
 800b2ac:	0a1b      	lsrs	r3, r3, #8
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	2b21      	cmp	r3, #33	; 0x21
 800b2b2:	d149      	bne.n	800b348 <USBD_AUDIO_Setup+0x164>
      {
        pbuf = USBD_AUDIO_CfgDesc + 18;
 800b2b4:	4b2b      	ldr	r3, [pc, #172]	; (800b364 <USBD_AUDIO_Setup+0x180>)
 800b2b6:	60fb      	str	r3, [r7, #12]
        len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	88db      	ldrh	r3, [r3, #6]
 800b2bc:	2b09      	cmp	r3, #9
 800b2be:	bf28      	it	cs
 800b2c0:	2309      	movcs	r3, #9
 800b2c2:	817b      	strh	r3, [r7, #10]

        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b2c4:	897b      	ldrh	r3, [r7, #10]
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	68f9      	ldr	r1, [r7, #12]
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f001 fb5b 	bl	800c986 <USBD_CtlSendData>
      }
      break;
 800b2d0:	e03a      	b.n	800b348 <USBD_AUDIO_Setup+0x164>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2d8:	2b03      	cmp	r3, #3
 800b2da:	d106      	bne.n	800b2ea <USBD_AUDIO_Setup+0x106>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f001 fb4f 	bl	800c986 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b2e8:	e02f      	b.n	800b34a <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 800b2ea:	6839      	ldr	r1, [r7, #0]
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f001 fad9 	bl	800c8a4 <USBD_CtlError>
        ret = USBD_FAIL;
 800b2f2:	2303      	movs	r3, #3
 800b2f4:	75fb      	strb	r3, [r7, #23]
      break;
 800b2f6:	e028      	b.n	800b34a <USBD_AUDIO_Setup+0x166>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2fe:	2b03      	cmp	r3, #3
 800b300:	d112      	bne.n	800b328 <USBD_AUDIO_Setup+0x144>
      {
        if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	885b      	ldrh	r3, [r3, #2]
 800b306:	b2db      	uxtb	r3, r3
 800b308:	2b02      	cmp	r3, #2
 800b30a:	d806      	bhi.n	800b31a <USBD_AUDIO_Setup+0x136>
        {
          haudio->alt_setting = (uint8_t)(req->wValue);
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	885b      	ldrh	r3, [r3, #2]
 800b310:	b2db      	uxtb	r3, r3
 800b312:	461a      	mov	r2, r3
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	601a      	str	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b318:	e017      	b.n	800b34a <USBD_AUDIO_Setup+0x166>
          USBD_CtlError(pdev, req);
 800b31a:	6839      	ldr	r1, [r7, #0]
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f001 fac1 	bl	800c8a4 <USBD_CtlError>
          ret = USBD_FAIL;
 800b322:	2303      	movs	r3, #3
 800b324:	75fb      	strb	r3, [r7, #23]
      break;
 800b326:	e010      	b.n	800b34a <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f001 faba 	bl	800c8a4 <USBD_CtlError>
        ret = USBD_FAIL;
 800b330:	2303      	movs	r3, #3
 800b332:	75fb      	strb	r3, [r7, #23]
      break;
 800b334:	e009      	b.n	800b34a <USBD_AUDIO_Setup+0x166>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b336:	6839      	ldr	r1, [r7, #0]
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f001 fab3 	bl	800c8a4 <USBD_CtlError>
      ret = USBD_FAIL;
 800b33e:	2303      	movs	r3, #3
 800b340:	75fb      	strb	r3, [r7, #23]
      break;
 800b342:	e002      	b.n	800b34a <USBD_AUDIO_Setup+0x166>
      break;
 800b344:	bf00      	nop
 800b346:	e008      	b.n	800b35a <USBD_AUDIO_Setup+0x176>
      break;
 800b348:	bf00      	nop
    }
    break;
 800b34a:	e006      	b.n	800b35a <USBD_AUDIO_Setup+0x176>
  default:
    USBD_CtlError(pdev, req);
 800b34c:	6839      	ldr	r1, [r7, #0]
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f001 faa8 	bl	800c8a4 <USBD_CtlError>
    ret = USBD_FAIL;
 800b354:	2303      	movs	r3, #3
 800b356:	75fb      	strb	r3, [r7, #23]
    break;
 800b358:	bf00      	nop
  }

  return (uint8_t)ret;
 800b35a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3718      	adds	r7, #24
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	200000e6 	.word	0x200000e6

0800b368 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	226d      	movs	r2, #109	; 0x6d
 800b374:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 800b376:	4b03      	ldr	r3, [pc, #12]	; (800b384 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 800b378:	4618      	mov	r0, r3
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr
 800b384:	200000d4 	.word	0x200000d4

0800b388 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	460b      	mov	r3, r1
 800b392:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 800b394:	2300      	movs	r3, #0
}
 800b396:	4618      	mov	r0, r3
 800b398:	370c      	adds	r7, #12
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr

0800b3a2 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b084      	sub	sp, #16
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3b0:	60fb      	str	r3, [r7, #12]

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b3b8:	330a      	adds	r3, #10
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d11d      	bne.n	800b3fc <USBD_AUDIO_EP0_RxReady+0x5a>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800b3c6:	330c      	adds	r3, #12
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	2b02      	cmp	r3, #2
 800b3cc:	d116      	bne.n	800b3fc <USBD_AUDIO_EP0_RxReady+0x5a>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3d4:	691a      	ldr	r2, [r3, #16]
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b3dc:	330b      	adds	r3, #11
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	4790      	blx	r2
      haudio->control.cmd = 0U;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b3ea:	330a      	adds	r3, #10
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	701a      	strb	r2, [r3, #0]
      haudio->control.len = 0U;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800b3f6:	330b      	adds	r3, #11
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	701a      	strb	r2, [r3, #0]
    }
  }

  return (uint8_t)USBD_OK;
 800b3fc:	2300      	movs	r3, #0
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3710      	adds	r7, #16
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}

0800b406 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800b406:	b480      	push	{r7}
 800b408:	b083      	sub	sp, #12
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	370c      	adds	r7, #12
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr

0800b432 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b432:	b480      	push	{r7}
 800b434:	b083      	sub	sp, #12
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
 800b43a:	460b      	mov	r3, r1
 800b43c:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800b43e:	2300      	movs	r3, #0
}
 800b440:	4618      	mov	r0, r3
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	460b      	mov	r3, r1
 800b456:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	370c      	adds	r7, #12
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b466:	b590      	push	{r4, r7, lr}
 800b468:	b085      	sub	sp, #20
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
 800b46e:	460b      	mov	r3, r1
 800b470:	70fb      	strb	r3, [r7, #3]
  uint16_t PacketSize;
  USBD_AUDIO_HandleTypeDef *haudio;

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b478:	60fb      	str	r3, [r7, #12]

  if (epnum == AUDIO_OUT_EP)
 800b47a:	78fb      	ldrb	r3, [r7, #3]
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d16c      	bne.n	800b55a <USBD_AUDIO_DataOut+0xf4>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 800b480:	78fb      	ldrb	r3, [r7, #3]
 800b482:	4619      	mov	r1, r3
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f002 f824 	bl	800d4d2 <USBD_LL_GetRxDataSize>
 800b48a:	4603      	mov	r3, r0
 800b48c:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b494:	695c      	ldr	r4, [r3, #20]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b49c:	3308      	adds	r3, #8
 800b49e:	881b      	ldrh	r3, [r3, #0]
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	4413      	add	r3, r2
 800b4a6:	3304      	adds	r3, #4
 800b4a8:	8979      	ldrh	r1, [r7, #10]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	47a0      	blx	r4
                                                           PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b4b6:	3308      	adds	r3, #8
 800b4b8:	881a      	ldrh	r2, [r3, #0]
 800b4ba:	897b      	ldrh	r3, [r7, #10]
 800b4bc:	4413      	add	r3, r2
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b4c6:	3308      	adds	r3, #8
 800b4c8:	801a      	strh	r2, [r3, #0]

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b4d0:	3308      	adds	r3, #8
 800b4d2:	881b      	ldrh	r3, [r3, #0]
 800b4d4:	f5b3 5fdc 	cmp.w	r3, #7040	; 0x1b80
 800b4d8:	d11c      	bne.n	800b514 <USBD_AUDIO_DataOut+0xae>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b4e0:	3308      	adds	r3, #8
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	801a      	strh	r2, [r3, #0]

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b4ec:	3304      	adds	r3, #4
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	2b03      	cmp	r3, #3
 800b4f2:	d10f      	bne.n	800b514 <USBD_AUDIO_DataOut+0xae>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	68fa      	ldr	r2, [r7, #12]
 800b4fe:	1d10      	adds	r0, r2, #4
 800b500:	2201      	movs	r2, #1
 800b502:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 800b506:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b50e:	3304      	adds	r3, #4
 800b510:	2200      	movs	r2, #0
 800b512:	701a      	strb	r2, [r3, #0]
      }
    }

    if (haudio->rd_enable == 0U)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b51a:	3305      	adds	r3, #5
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10d      	bne.n	800b53e <USBD_AUDIO_DataOut+0xd8>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b528:	3308      	adds	r3, #8
 800b52a:	881b      	ldrh	r3, [r3, #0]
 800b52c:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 800b530:	d105      	bne.n	800b53e <USBD_AUDIO_DataOut+0xd8>
      {
        haudio->rd_enable = 1U;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b538:	3305      	adds	r3, #5
 800b53a:	2201      	movs	r2, #1
 800b53c:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
                                 &haudio->buffer[haudio->wr_ptr],
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b544:	3308      	adds	r3, #8
 800b546:	881b      	ldrh	r3, [r3, #0]
 800b548:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	4413      	add	r3, r2
 800b54e:	1d1a      	adds	r2, r3, #4
 800b550:	2358      	movs	r3, #88	; 0x58
 800b552:	2101      	movs	r1, #1
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f001 ff9b 	bl	800d490 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3714      	adds	r7, #20
 800b560:	46bd      	mov	sp, r7
 800b562:	bd90      	pop	{r4, r7, pc}

0800b564 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b574:	60fb      	str	r3, [r7, #12]

  (void)USBD_memset(haudio->control.data, 0, 64U);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b57c:	330b      	adds	r3, #11
 800b57e:	2240      	movs	r2, #64	; 0x40
 800b580:	2100      	movs	r1, #0
 800b582:	4618      	mov	r0, r3
 800b584:	f002 f81e 	bl	800d5c4 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b58e:	330b      	adds	r3, #11
 800b590:	683a      	ldr	r2, [r7, #0]
 800b592:	88d2      	ldrh	r2, [r2, #6]
 800b594:	4619      	mov	r1, r3
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f001 f9f5 	bl	800c986 <USBD_CtlSendData>
}
 800b59c:	bf00      	nop
 800b59e:	3710      	adds	r7, #16
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5b4:	60fb      	str	r3, [r7, #12]

  if (req->wLength != 0U)
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	88db      	ldrh	r3, [r3, #6]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d021      	beq.n	800b602 <AUDIO_REQ_SetCurrent+0x5e>
  {
    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b5c4:	330b      	adds	r3, #11
 800b5c6:	683a      	ldr	r2, [r7, #0]
 800b5c8:	88d2      	ldrh	r2, [r2, #6]
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f001 fa06 	bl	800c9de <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b5d8:	330a      	adds	r3, #10
 800b5da:	2201      	movs	r2, #1
 800b5dc:	701a      	strb	r2, [r3, #0]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	88db      	ldrh	r3, [r3, #6]
 800b5e2:	b2da      	uxtb	r2, r3
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800b5ea:	330b      	adds	r3, #11
 800b5ec:	701a      	strb	r2, [r3, #0]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	889b      	ldrh	r3, [r3, #4]
 800b5f2:	0a1b      	lsrs	r3, r3, #8
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	b2da      	uxtb	r2, r3
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800b5fe:	330c      	adds	r3, #12
 800b600:	701a      	strb	r2, [r3, #0]
  }
}
 800b602:	bf00      	nop
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
	...

0800b60c <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	220a      	movs	r2, #10
 800b618:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 800b61a:	4b03      	ldr	r3, [pc, #12]	; (800b628 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr
 800b628:	20000144 	.word	0x20000144

0800b62c <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d101      	bne.n	800b640 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b63c:	2303      	movs	r3, #3
 800b63e:	e004      	b.n	800b64a <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	683a      	ldr	r2, [r7, #0]
 800b644:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b648:	2300      	movs	r3, #0
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	370c      	adds	r7, #12
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr
	...

0800b658 <USBD_MIDI_Init>:
  // IN endpoint descriptor
  0x09, 0x05, MIDI_IN_EP, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x25, 0x01, 0x01, 0x03,
};

static uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	460b      	mov	r3, r1
 800b662:	70fb      	strb	r3, [r7, #3]
  pInstance = pdev;
 800b664:	4a0c      	ldr	r2, [pc, #48]	; (800b698 <USBD_MIDI_Init+0x40>)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6013      	str	r3, [r2, #0]
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 800b66a:	2340      	movs	r3, #64	; 0x40
 800b66c:	2202      	movs	r2, #2
 800b66e:	2181      	movs	r1, #129	; 0x81
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f001 fe1e 	bl	800d2b2 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 800b676:	2340      	movs	r3, #64	; 0x40
 800b678:	2202      	movs	r2, #2
 800b67a:	2101      	movs	r1, #1
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f001 fe18 	bl	800d2b2 <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 800b682:	2340      	movs	r3, #64	; 0x40
 800b684:	4a05      	ldr	r2, [pc, #20]	; (800b69c <USBD_MIDI_Init+0x44>)
 800b686:	2101      	movs	r1, #1
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f001 ff01 	bl	800d490 <USBD_LL_PrepareReceive>
  return 0;
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	200003a0 	.word	0x200003a0
 800b69c:	200008c0 	.word	0x200008c0

0800b6a0 <USBD_MIDI_DeInit>:

static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	70fb      	strb	r3, [r7, #3]
  pInstance = NULL;
 800b6ac:	4b07      	ldr	r3, [pc, #28]	; (800b6cc <USBD_MIDI_DeInit+0x2c>)
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	601a      	str	r2, [r3, #0]
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 800b6b2:	2181      	movs	r1, #129	; 0x81
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f001 fe22 	bl	800d2fe <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,MIDI_OUT_EP);
 800b6ba:	2101      	movs	r1, #1
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f001 fe1e 	bl	800d2fe <USBD_LL_CloseEP>
  return 0;
 800b6c2:	2300      	movs	r3, #0
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	200003a0 	.word	0x200003a0

0800b6d0 <USBD_MIDI_DataIn>:

//midi data incoming to host
static uint8_t USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum){
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	460b      	mov	r3, r1
 800b6da:	70fb      	strb	r3, [r7, #3]

  if (USB_Tx_State == 1){
 800b6dc:	4b06      	ldr	r3, [pc, #24]	; (800b6f8 <USBD_MIDI_DataIn+0x28>)
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d102      	bne.n	800b6ea <USBD_MIDI_DataIn+0x1a>
    USB_Tx_State = 0;
 800b6e4:	4b04      	ldr	r3, [pc, #16]	; (800b6f8 <USBD_MIDI_DataIn+0x28>)
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	701a      	strb	r2, [r3, #0]
  }

  return USBD_OK;
 800b6ea:	2300      	movs	r3, #0
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr
 800b6f8:	200003b0 	.word	0x200003b0

0800b6fc <USBD_MIDI_DataOut>:

//midi data outcoming from host
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	460b      	mov	r3, r1
 800b706:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;

  USBD_MIDI_ItfTypeDef *pmidi;
  pmidi = (USBD_MIDI_ItfTypeDef *)(pdev->pUserData);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b70e:	60fb      	str	r3, [r7, #12]

  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
 800b716:	78fa      	ldrb	r2, [r7, #3]
 800b718:	4613      	mov	r3, r2
 800b71a:	00db      	lsls	r3, r3, #3
 800b71c:	1a9b      	subs	r3, r3, r2
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	440b      	add	r3, r1
 800b722:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	817b      	strh	r3, [r7, #10]

  pmidi->pIf_MidiRx((uint8_t *)&USB_Rx_Buffer, USB_Rx_Cnt);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	897a      	ldrh	r2, [r7, #10]
 800b730:	4611      	mov	r1, r2
 800b732:	4806      	ldr	r0, [pc, #24]	; (800b74c <USBD_MIDI_DataOut+0x50>)
 800b734:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 800b736:	2340      	movs	r3, #64	; 0x40
 800b738:	4a04      	ldr	r2, [pc, #16]	; (800b74c <USBD_MIDI_DataOut+0x50>)
 800b73a:	2101      	movs	r1, #1
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f001 fea7 	bl	800d490 <USBD_LL_PrepareReceive>
  return USBD_OK;
 800b742:	2300      	movs	r3, #0
}
 800b744:	4618      	mov	r0, r3
 800b746:	3710      	adds	r7, #16
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	200008c0 	.word	0x200008c0

0800b750 <USBD_MIDI_SendPacket>:

void USBD_MIDI_SendPacket (){
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if(USB_Tx_State != 1){
 800b756:	4b30      	ldr	r3, [pc, #192]	; (800b818 <USBD_MIDI_SendPacket+0xc8>)
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d059      	beq.n	800b812 <USBD_MIDI_SendPacket+0xc2>
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE){
 800b75e:	4b2f      	ldr	r3, [pc, #188]	; (800b81c <USBD_MIDI_SendPacket+0xcc>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b766:	d102      	bne.n	800b76e <USBD_MIDI_SendPacket+0x1e>
      APP_Rx_ptr_out = 0;
 800b768:	4b2c      	ldr	r3, [pc, #176]	; (800b81c <USBD_MIDI_SendPacket+0xcc>)
 800b76a:	2200      	movs	r2, #0
 800b76c:	601a      	str	r2, [r3, #0]
    }

    if(APP_Rx_ptr_out == APP_Rx_ptr_in){
 800b76e:	4b2b      	ldr	r3, [pc, #172]	; (800b81c <USBD_MIDI_SendPacket+0xcc>)
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	4b2b      	ldr	r3, [pc, #172]	; (800b820 <USBD_MIDI_SendPacket+0xd0>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	429a      	cmp	r2, r3
 800b778:	d103      	bne.n	800b782 <USBD_MIDI_SendPacket+0x32>
      USB_Tx_State = 0;
 800b77a:	4b27      	ldr	r3, [pc, #156]	; (800b818 <USBD_MIDI_SendPacket+0xc8>)
 800b77c:	2200      	movs	r2, #0
 800b77e:	701a      	strb	r2, [r3, #0]
      return;
 800b780:	e047      	b.n	800b812 <USBD_MIDI_SendPacket+0xc2>
    }

    if(APP_Rx_ptr_out > APP_Rx_ptr_in){
 800b782:	4b26      	ldr	r3, [pc, #152]	; (800b81c <USBD_MIDI_SendPacket+0xcc>)
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	4b26      	ldr	r3, [pc, #152]	; (800b820 <USBD_MIDI_SendPacket+0xd0>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d906      	bls.n	800b79c <USBD_MIDI_SendPacket+0x4c>
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 800b78e:	4b23      	ldr	r3, [pc, #140]	; (800b81c <USBD_MIDI_SendPacket+0xcc>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b796:	4a23      	ldr	r2, [pc, #140]	; (800b824 <USBD_MIDI_SendPacket+0xd4>)
 800b798:	6013      	str	r3, [r2, #0]
 800b79a:	e006      	b.n	800b7aa <USBD_MIDI_SendPacket+0x5a>
    }else{
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 800b79c:	4b20      	ldr	r3, [pc, #128]	; (800b820 <USBD_MIDI_SendPacket+0xd0>)
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	4b1e      	ldr	r3, [pc, #120]	; (800b81c <USBD_MIDI_SendPacket+0xcc>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	1ad3      	subs	r3, r2, r3
 800b7a6:	4a1f      	ldr	r2, [pc, #124]	; (800b824 <USBD_MIDI_SendPacket+0xd4>)
 800b7a8:	6013      	str	r3, [r2, #0]
    }

    if (APP_Rx_length > MIDI_DATA_IN_PACKET_SIZE){
 800b7aa:	4b1e      	ldr	r3, [pc, #120]	; (800b824 <USBD_MIDI_SendPacket+0xd4>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2b40      	cmp	r3, #64	; 0x40
 800b7b0:	d90f      	bls.n	800b7d2 <USBD_MIDI_SendPacket+0x82>
      USB_Tx_ptr = APP_Rx_ptr_out;
 800b7b2:	4b1a      	ldr	r3, [pc, #104]	; (800b81c <USBD_MIDI_SendPacket+0xcc>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = MIDI_DATA_IN_PACKET_SIZE;
 800b7b8:	2340      	movs	r3, #64	; 0x40
 800b7ba:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += MIDI_DATA_IN_PACKET_SIZE;
 800b7bc:	4b17      	ldr	r3, [pc, #92]	; (800b81c <USBD_MIDI_SendPacket+0xcc>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	3340      	adds	r3, #64	; 0x40
 800b7c2:	4a16      	ldr	r2, [pc, #88]	; (800b81c <USBD_MIDI_SendPacket+0xcc>)
 800b7c4:	6013      	str	r3, [r2, #0]
      APP_Rx_length -= MIDI_DATA_IN_PACKET_SIZE;
 800b7c6:	4b17      	ldr	r3, [pc, #92]	; (800b824 <USBD_MIDI_SendPacket+0xd4>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	3b40      	subs	r3, #64	; 0x40
 800b7cc:	4a15      	ldr	r2, [pc, #84]	; (800b824 <USBD_MIDI_SendPacket+0xd4>)
 800b7ce:	6013      	str	r3, [r2, #0]
 800b7d0:	e00f      	b.n	800b7f2 <USBD_MIDI_SendPacket+0xa2>
    }else{
      USB_Tx_ptr = APP_Rx_ptr_out;
 800b7d2:	4b12      	ldr	r3, [pc, #72]	; (800b81c <USBD_MIDI_SendPacket+0xcc>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = APP_Rx_length;
 800b7d8:	4b12      	ldr	r3, [pc, #72]	; (800b824 <USBD_MIDI_SendPacket+0xd4>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += APP_Rx_length;
 800b7de:	4b0f      	ldr	r3, [pc, #60]	; (800b81c <USBD_MIDI_SendPacket+0xcc>)
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	4b10      	ldr	r3, [pc, #64]	; (800b824 <USBD_MIDI_SendPacket+0xd4>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	4a0c      	ldr	r2, [pc, #48]	; (800b81c <USBD_MIDI_SendPacket+0xcc>)
 800b7ea:	6013      	str	r3, [r2, #0]
      APP_Rx_length = 0;
 800b7ec:	4b0d      	ldr	r3, [pc, #52]	; (800b824 <USBD_MIDI_SendPacket+0xd4>)
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1;
 800b7f2:	4b09      	ldr	r3, [pc, #36]	; (800b818 <USBD_MIDI_SendPacket+0xc8>)
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	701a      	strb	r2, [r3, #0]
    while(USBD_LL_Transmit(pInstance,
 800b7f8:	bf00      	nop
 800b7fa:	4b0b      	ldr	r3, [pc, #44]	; (800b828 <USBD_MIDI_SendPacket+0xd8>)
 800b7fc:	6818      	ldr	r0, [r3, #0]
    		MIDI_IN_EP,(uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],USB_Tx_length) != USBD_OK);
 800b7fe:	88fb      	ldrh	r3, [r7, #6]
    while(USBD_LL_Transmit(pInstance,
 800b800:	4a0a      	ldr	r2, [pc, #40]	; (800b82c <USBD_MIDI_SendPacket+0xdc>)
 800b802:	441a      	add	r2, r3
 800b804:	88bb      	ldrh	r3, [r7, #4]
 800b806:	2181      	movs	r1, #129	; 0x81
 800b808:	f001 fe21 	bl	800d44e <USBD_LL_Transmit>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1f3      	bne.n	800b7fa <USBD_MIDI_SendPacket+0xaa>
  }
}
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}
 800b818:	200003b0 	.word	0x200003b0
 800b81c:	200003a8 	.word	0x200003a8
 800b820:	200003a4 	.word	0x200003a4
 800b824:	200003ac 	.word	0x200003ac
 800b828:	200003a0 	.word	0x200003a0
 800b82c:	20000900 	.word	0x20000900

0800b830 <USBD_MIDI_GetCfgDesc>:

static uint8_t *USBD_MIDI_GetCfgDesc (uint16_t *length){
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2265      	movs	r2, #101	; 0x65
 800b83c:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 800b83e:	4b03      	ldr	r3, [pc, #12]	; (800b84c <USBD_MIDI_GetCfgDesc+0x1c>)
}
 800b840:	4618      	mov	r0, r3
 800b842:	370c      	adds	r7, #12
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr
 800b84c:	20000188 	.word	0x20000188

0800b850 <USBD_MIDI_RegisterInterface>:
//  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
//  return USBD_MIDI_DeviceQualifierDesc;
//}

uint8_t USBD_MIDI_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_MIDI_ItfTypeDef *fops)
{
 800b850:	b480      	push	{r7}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  uint8_t ret = USBD_FAIL;
 800b85a:	2303      	movs	r3, #3
 800b85c:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL){
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d005      	beq.n	800b870 <USBD_MIDI_RegisterInterface+0x20>
    pdev->pUserData= fops;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	683a      	ldr	r2, [r7, #0]
 800b868:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;    
 800b86c:	2300      	movs	r3, #0
 800b86e:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800b870:	7bfb      	ldrb	r3, [r7, #15]
}
 800b872:	4618      	mov	r0, r3
 800b874:	3714      	adds	r7, #20
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr

0800b87e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b086      	sub	sp, #24
 800b882:	af00      	add	r7, sp, #0
 800b884:	60f8      	str	r0, [r7, #12]
 800b886:	60b9      	str	r1, [r7, #8]
 800b888:	4613      	mov	r3, r2
 800b88a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d101      	bne.n	800b896 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b892:	2303      	movs	r3, #3
 800b894:	e025      	b.n	800b8e2 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d003      	beq.n	800b8a8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d003      	beq.n	800b8ba <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d003      	beq.n	800b8c8 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	68ba      	ldr	r2, [r7, #8]
 800b8c4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	79fa      	ldrb	r2, [r7, #7]
 800b8d4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b8d6:	68f8      	ldr	r0, [r7, #12]
 800b8d8:	f001 fc84 	bl	800d1e4 <USBD_LL_Init>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b8e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3718      	adds	r7, #24
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b084      	sub	sp, #16
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
 800b8f2:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d101      	bne.n	800b902 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b8fe:	2303      	movs	r3, #3
 800b900:	e010      	b.n	800b924 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	683a      	ldr	r2, [r7, #0]
 800b906:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b912:	f107 020e 	add.w	r2, r7, #14
 800b916:	4610      	mov	r0, r2
 800b918:	4798      	blx	r3
 800b91a:	4602      	mov	r2, r0
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
#endif /* USE_USB_FS */


  return USBD_OK;
 800b922:	2300      	movs	r3, #0
}
 800b924:	4618      	mov	r0, r3
 800b926:	3710      	adds	r7, #16
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f001 fca1 	bl	800d27c <USBD_LL_Start>
 800b93a:	4603      	mov	r3, r0
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3708      	adds	r7, #8
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b94c:	2300      	movs	r3, #0
}
 800b94e:	4618      	mov	r0, r3
 800b950:	370c      	adds	r7, #12
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr

0800b95a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b084      	sub	sp, #16
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
 800b962:	460b      	mov	r3, r1
 800b964:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b966:	2303      	movs	r3, #3
 800b968:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b970:	2b00      	cmp	r3, #0
 800b972:	d009      	beq.n	800b988 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	78fa      	ldrb	r2, [r7, #3]
 800b97e:	4611      	mov	r1, r2
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	4798      	blx	r3
 800b984:	4603      	mov	r3, r0
 800b986:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b988:	7bfb      	ldrb	r3, [r7, #15]
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b082      	sub	sp, #8
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
 800b99a:	460b      	mov	r3, r1
 800b99c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d007      	beq.n	800b9b8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	78fa      	ldrb	r2, [r7, #3]
 800b9b2:	4611      	mov	r1, r2
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	4798      	blx	r3
  }

  return USBD_OK;
 800b9b8:	2300      	movs	r3, #0
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3708      	adds	r7, #8
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b084      	sub	sp, #16
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
 800b9ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b9d2:	6839      	ldr	r1, [r7, #0]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f000 ff2b 	bl	800c830 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b9f6:	f003 031f 	and.w	r3, r3, #31
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d00e      	beq.n	800ba1c <USBD_LL_SetupStage+0x5a>
 800b9fe:	2b01      	cmp	r3, #1
 800ba00:	d302      	bcc.n	800ba08 <USBD_LL_SetupStage+0x46>
 800ba02:	2b02      	cmp	r3, #2
 800ba04:	d014      	beq.n	800ba30 <USBD_LL_SetupStage+0x6e>
 800ba06:	e01d      	b.n	800ba44 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba0e:	4619      	mov	r1, r3
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 fa17 	bl	800be44 <USBD_StdDevReq>
 800ba16:	4603      	mov	r3, r0
 800ba18:	73fb      	strb	r3, [r7, #15]
      break;
 800ba1a:	e020      	b.n	800ba5e <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba22:	4619      	mov	r1, r3
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 fa7b 	bl	800bf20 <USBD_StdItfReq>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba2e:	e016      	b.n	800ba5e <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba36:	4619      	mov	r1, r3
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 fab7 	bl	800bfac <USBD_StdEPReq>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	73fb      	strb	r3, [r7, #15]
      break;
 800ba42:	e00c      	b.n	800ba5e <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ba4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	4619      	mov	r1, r3
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f001 fc72 	bl	800d33c <USBD_LL_StallEP>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ba5c:	bf00      	nop
  }

  return ret;
 800ba5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b086      	sub	sp, #24
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	460b      	mov	r3, r1
 800ba72:	607a      	str	r2, [r7, #4]
 800ba74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ba76:	7afb      	ldrb	r3, [r7, #11]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d137      	bne.n	800baec <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ba82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ba8a:	2b03      	cmp	r3, #3
 800ba8c:	d14a      	bne.n	800bb24 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	689a      	ldr	r2, [r3, #8]
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	68db      	ldr	r3, [r3, #12]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d913      	bls.n	800bac2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	689a      	ldr	r2, [r3, #8]
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	1ad2      	subs	r2, r2, r3
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	68da      	ldr	r2, [r3, #12]
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	4293      	cmp	r3, r2
 800bab2:	bf28      	it	cs
 800bab4:	4613      	movcs	r3, r2
 800bab6:	461a      	mov	r2, r3
 800bab8:	6879      	ldr	r1, [r7, #4]
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f000 ffac 	bl	800ca18 <USBD_CtlContinueRx>
 800bac0:	e030      	b.n	800bb24 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bac8:	691b      	ldr	r3, [r3, #16]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00a      	beq.n	800bae4 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bad4:	2b03      	cmp	r3, #3
 800bad6:	d105      	bne.n	800bae4 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bade:	691b      	ldr	r3, [r3, #16]
 800bae0:	68f8      	ldr	r0, [r7, #12]
 800bae2:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	f000 ffa8 	bl	800ca3a <USBD_CtlSendStatus>
 800baea:	e01b      	b.n	800bb24 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baf2:	699b      	ldr	r3, [r3, #24]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d013      	beq.n	800bb20 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bafe:	2b03      	cmp	r3, #3
 800bb00:	d10e      	bne.n	800bb20 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb08:	699b      	ldr	r3, [r3, #24]
 800bb0a:	7afa      	ldrb	r2, [r7, #11]
 800bb0c:	4611      	mov	r1, r2
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	4798      	blx	r3
 800bb12:	4603      	mov	r3, r0
 800bb14:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bb16:	7dfb      	ldrb	r3, [r7, #23]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d003      	beq.n	800bb24 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800bb1c:	7dfb      	ldrb	r3, [r7, #23]
 800bb1e:	e002      	b.n	800bb26 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bb20:	2303      	movs	r3, #3
 800bb22:	e000      	b.n	800bb26 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3718      	adds	r7, #24
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b086      	sub	sp, #24
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	60f8      	str	r0, [r7, #12]
 800bb36:	460b      	mov	r3, r1
 800bb38:	607a      	str	r2, [r7, #4]
 800bb3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bb3c:	7afb      	ldrb	r3, [r7, #11]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d16a      	bne.n	800bc18 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	3314      	adds	r3, #20
 800bb46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb4e:	2b02      	cmp	r3, #2
 800bb50:	d155      	bne.n	800bbfe <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	689a      	ldr	r2, [r3, #8]
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d914      	bls.n	800bb88 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	689a      	ldr	r2, [r3, #8]
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	68db      	ldr	r3, [r3, #12]
 800bb66:	1ad2      	subs	r2, r2, r3
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	461a      	mov	r2, r3
 800bb72:	6879      	ldr	r1, [r7, #4]
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f000 ff21 	bl	800c9bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	2100      	movs	r1, #0
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	f001 fc85 	bl	800d490 <USBD_LL_PrepareReceive>
 800bb86:	e03a      	b.n	800bbfe <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	68da      	ldr	r2, [r3, #12]
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d11c      	bne.n	800bbce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	685a      	ldr	r2, [r3, #4]
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d316      	bcc.n	800bbce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	685a      	ldr	r2, [r3, #4]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d20f      	bcs.n	800bbce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bbae:	2200      	movs	r2, #0
 800bbb0:	2100      	movs	r1, #0
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f000 ff02 	bl	800c9bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	2100      	movs	r1, #0
 800bbc6:	68f8      	ldr	r0, [r7, #12]
 800bbc8:	f001 fc62 	bl	800d490 <USBD_LL_PrepareReceive>
 800bbcc:	e017      	b.n	800bbfe <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d00a      	beq.n	800bbf0 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bbe0:	2b03      	cmp	r3, #3
 800bbe2:	d105      	bne.n	800bbf0 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbf0:	2180      	movs	r1, #128	; 0x80
 800bbf2:	68f8      	ldr	r0, [r7, #12]
 800bbf4:	f001 fba2 	bl	800d33c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bbf8:	68f8      	ldr	r0, [r7, #12]
 800bbfa:	f000 ff31 	bl	800ca60 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d123      	bne.n	800bc50 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bc08:	68f8      	ldr	r0, [r7, #12]
 800bc0a:	f7ff fe9b 	bl	800b944 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bc16:	e01b      	b.n	800bc50 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc1e:	695b      	ldr	r3, [r3, #20]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d013      	beq.n	800bc4c <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bc2a:	2b03      	cmp	r3, #3
 800bc2c:	d10e      	bne.n	800bc4c <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc34:	695b      	ldr	r3, [r3, #20]
 800bc36:	7afa      	ldrb	r2, [r7, #11]
 800bc38:	4611      	mov	r1, r2
 800bc3a:	68f8      	ldr	r0, [r7, #12]
 800bc3c:	4798      	blx	r3
 800bc3e:	4603      	mov	r3, r0
 800bc40:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bc42:	7dfb      	ldrb	r3, [r7, #23]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d003      	beq.n	800bc50 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800bc48:	7dfb      	ldrb	r3, [r7, #23]
 800bc4a:	e002      	b.n	800bc52 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bc4c:	2303      	movs	r3, #3
 800bc4e:	e000      	b.n	800bc52 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3718      	adds	r7, #24
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bc5a:	b580      	push	{r7, lr}
 800bc5c:	b082      	sub	sp, #8
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2201      	movs	r2, #1
 800bc66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2200      	movs	r2, #0
 800bc76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d009      	beq.n	800bc9e <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	6852      	ldr	r2, [r2, #4]
 800bc96:	b2d2      	uxtb	r2, r2
 800bc98:	4611      	mov	r1, r2
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc9e:	2340      	movs	r3, #64	; 0x40
 800bca0:	2200      	movs	r2, #0
 800bca2:	2100      	movs	r1, #0
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f001 fb04 	bl	800d2b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2201      	movs	r2, #1
 800bcae:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2240      	movs	r2, #64	; 0x40
 800bcb6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bcba:	2340      	movs	r3, #64	; 0x40
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	2180      	movs	r1, #128	; 0x80
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f001 faf6 	bl	800d2b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2201      	movs	r2, #1
 800bcca:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2240      	movs	r2, #64	; 0x40
 800bcd0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bcd2:	2300      	movs	r3, #0
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3708      	adds	r7, #8
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	460b      	mov	r3, r1
 800bce6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	78fa      	ldrb	r2, [r7, #3]
 800bcec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2204      	movs	r2, #4
 800bd14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	370c      	adds	r7, #12
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr

0800bd26 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bd26:	b480      	push	{r7}
 800bd28:	b083      	sub	sp, #12
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd34:	2b04      	cmp	r3, #4
 800bd36:	d105      	bne.n	800bd44 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	370c      	adds	r7, #12
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr

0800bd52 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b082      	sub	sp, #8
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd60:	2b03      	cmp	r3, #3
 800bd62:	d10b      	bne.n	800bd7c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd6a:	69db      	ldr	r3, [r3, #28]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d005      	beq.n	800bd7c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd76:	69db      	ldr	r3, [r3, #28]
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd7c:	2300      	movs	r3, #0
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3708      	adds	r7, #8
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bd86:	b480      	push	{r7}
 800bd88:	b083      	sub	sp, #12
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
 800bd8e:	460b      	mov	r3, r1
 800bd90:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	460b      	mov	r3, r1
 800bdaa:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bdac:	2300      	movs	r3, #0
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	370c      	adds	r7, #12
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr

0800bdba <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bdba:	b480      	push	{r7}
 800bdbc:	b083      	sub	sp, #12
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bdc2:	2300      	movs	r3, #0
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2201      	movs	r2, #1
 800bddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d009      	beq.n	800bdfe <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	6852      	ldr	r2, [r2, #4]
 800bdf6:	b2d2      	uxtb	r2, r2
 800bdf8:	4611      	mov	r1, r2
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	4798      	blx	r3
  }

  return USBD_OK;
 800bdfe:	2300      	movs	r3, #0
}
 800be00:	4618      	mov	r0, r3
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800be08:	b480      	push	{r7}
 800be0a:	b087      	sub	sp, #28
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	3301      	adds	r3, #1
 800be1e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800be26:	8a3b      	ldrh	r3, [r7, #16]
 800be28:	021b      	lsls	r3, r3, #8
 800be2a:	b21a      	sxth	r2, r3
 800be2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be30:	4313      	orrs	r3, r2
 800be32:	b21b      	sxth	r3, r3
 800be34:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800be36:	89fb      	ldrh	r3, [r7, #14]
}
 800be38:	4618      	mov	r0, r3
 800be3a:	371c      	adds	r7, #28
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be4e:	2300      	movs	r3, #0
 800be50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be5a:	2b20      	cmp	r3, #32
 800be5c:	d004      	beq.n	800be68 <USBD_StdDevReq+0x24>
 800be5e:	2b40      	cmp	r3, #64	; 0x40
 800be60:	d002      	beq.n	800be68 <USBD_StdDevReq+0x24>
 800be62:	2b00      	cmp	r3, #0
 800be64:	d00a      	beq.n	800be7c <USBD_StdDevReq+0x38>
 800be66:	e050      	b.n	800bf0a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	6839      	ldr	r1, [r7, #0]
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	4798      	blx	r3
 800be76:	4603      	mov	r3, r0
 800be78:	73fb      	strb	r3, [r7, #15]
    break;
 800be7a:	e04b      	b.n	800bf14 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	785b      	ldrb	r3, [r3, #1]
 800be80:	2b09      	cmp	r3, #9
 800be82:	d83c      	bhi.n	800befe <USBD_StdDevReq+0xba>
 800be84:	a201      	add	r2, pc, #4	; (adr r2, 800be8c <USBD_StdDevReq+0x48>)
 800be86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be8a:	bf00      	nop
 800be8c:	0800bee1 	.word	0x0800bee1
 800be90:	0800bef5 	.word	0x0800bef5
 800be94:	0800beff 	.word	0x0800beff
 800be98:	0800beeb 	.word	0x0800beeb
 800be9c:	0800beff 	.word	0x0800beff
 800bea0:	0800bebf 	.word	0x0800bebf
 800bea4:	0800beb5 	.word	0x0800beb5
 800bea8:	0800beff 	.word	0x0800beff
 800beac:	0800bed7 	.word	0x0800bed7
 800beb0:	0800bec9 	.word	0x0800bec9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800beb4:	6839      	ldr	r1, [r7, #0]
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 f9ce 	bl	800c258 <USBD_GetDescriptor>
      break;
 800bebc:	e024      	b.n	800bf08 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800bebe:	6839      	ldr	r1, [r7, #0]
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f000 fb33 	bl	800c52c <USBD_SetAddress>
      break;
 800bec6:	e01f      	b.n	800bf08 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800bec8:	6839      	ldr	r1, [r7, #0]
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 fb70 	bl	800c5b0 <USBD_SetConfig>
 800bed0:	4603      	mov	r3, r0
 800bed2:	73fb      	strb	r3, [r7, #15]
      break;
 800bed4:	e018      	b.n	800bf08 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800bed6:	6839      	ldr	r1, [r7, #0]
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fc0d 	bl	800c6f8 <USBD_GetConfig>
      break;
 800bede:	e013      	b.n	800bf08 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800bee0:	6839      	ldr	r1, [r7, #0]
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 fc3c 	bl	800c760 <USBD_GetStatus>
      break;
 800bee8:	e00e      	b.n	800bf08 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800beea:	6839      	ldr	r1, [r7, #0]
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 fc6a 	bl	800c7c6 <USBD_SetFeature>
      break;
 800bef2:	e009      	b.n	800bf08 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800bef4:	6839      	ldr	r1, [r7, #0]
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 fc79 	bl	800c7ee <USBD_ClrFeature>
      break;
 800befc:	e004      	b.n	800bf08 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800befe:	6839      	ldr	r1, [r7, #0]
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 fccf 	bl	800c8a4 <USBD_CtlError>
      break;
 800bf06:	bf00      	nop
    }
    break;
 800bf08:	e004      	b.n	800bf14 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800bf0a:	6839      	ldr	r1, [r7, #0]
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 fcc9 	bl	800c8a4 <USBD_CtlError>
    break;
 800bf12:	bf00      	nop
  }

  return ret;
 800bf14:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop

0800bf20 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf36:	2b20      	cmp	r3, #32
 800bf38:	d003      	beq.n	800bf42 <USBD_StdItfReq+0x22>
 800bf3a:	2b40      	cmp	r3, #64	; 0x40
 800bf3c:	d001      	beq.n	800bf42 <USBD_StdItfReq+0x22>
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d12a      	bne.n	800bf98 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf48:	3b01      	subs	r3, #1
 800bf4a:	2b02      	cmp	r3, #2
 800bf4c:	d81d      	bhi.n	800bf8a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	889b      	ldrh	r3, [r3, #4]
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	2b02      	cmp	r3, #2
 800bf56:	d813      	bhi.n	800bf80 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	6839      	ldr	r1, [r7, #0]
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	4798      	blx	r3
 800bf66:	4603      	mov	r3, r0
 800bf68:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	88db      	ldrh	r3, [r3, #6]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d110      	bne.n	800bf94 <USBD_StdItfReq+0x74>
 800bf72:	7bfb      	ldrb	r3, [r7, #15]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d10d      	bne.n	800bf94 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 fd5e 	bl	800ca3a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800bf7e:	e009      	b.n	800bf94 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800bf80:	6839      	ldr	r1, [r7, #0]
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 fc8e 	bl	800c8a4 <USBD_CtlError>
      break;
 800bf88:	e004      	b.n	800bf94 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800bf8a:	6839      	ldr	r1, [r7, #0]
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 fc89 	bl	800c8a4 <USBD_CtlError>
      break;
 800bf92:	e000      	b.n	800bf96 <USBD_StdItfReq+0x76>
      break;
 800bf94:	bf00      	nop
    }
    break;
 800bf96:	e004      	b.n	800bfa2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800bf98:	6839      	ldr	r1, [r7, #0]
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fc82 	bl	800c8a4 <USBD_CtlError>
    break;
 800bfa0:	bf00      	nop
  }

  return ret;
 800bfa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3710      	adds	r7, #16
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	889b      	ldrh	r3, [r3, #4]
 800bfbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfc8:	2b20      	cmp	r3, #32
 800bfca:	d004      	beq.n	800bfd6 <USBD_StdEPReq+0x2a>
 800bfcc:	2b40      	cmp	r3, #64	; 0x40
 800bfce:	d002      	beq.n	800bfd6 <USBD_StdEPReq+0x2a>
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d00a      	beq.n	800bfea <USBD_StdEPReq+0x3e>
 800bfd4:	e135      	b.n	800c242 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	6839      	ldr	r1, [r7, #0]
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	4798      	blx	r3
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	73fb      	strb	r3, [r7, #15]
    break;
 800bfe8:	e130      	b.n	800c24c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	785b      	ldrb	r3, [r3, #1]
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	d03e      	beq.n	800c070 <USBD_StdEPReq+0xc4>
 800bff2:	2b03      	cmp	r3, #3
 800bff4:	d002      	beq.n	800bffc <USBD_StdEPReq+0x50>
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d077      	beq.n	800c0ea <USBD_StdEPReq+0x13e>
 800bffa:	e11c      	b.n	800c236 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c002:	2b02      	cmp	r3, #2
 800c004:	d002      	beq.n	800c00c <USBD_StdEPReq+0x60>
 800c006:	2b03      	cmp	r3, #3
 800c008:	d015      	beq.n	800c036 <USBD_StdEPReq+0x8a>
 800c00a:	e02b      	b.n	800c064 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c00c:	7bbb      	ldrb	r3, [r7, #14]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d00c      	beq.n	800c02c <USBD_StdEPReq+0x80>
 800c012:	7bbb      	ldrb	r3, [r7, #14]
 800c014:	2b80      	cmp	r3, #128	; 0x80
 800c016:	d009      	beq.n	800c02c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c018:	7bbb      	ldrb	r3, [r7, #14]
 800c01a:	4619      	mov	r1, r3
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f001 f98d 	bl	800d33c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c022:	2180      	movs	r1, #128	; 0x80
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f001 f989 	bl	800d33c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c02a:	e020      	b.n	800c06e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c02c:	6839      	ldr	r1, [r7, #0]
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 fc38 	bl	800c8a4 <USBD_CtlError>
        break;
 800c034:	e01b      	b.n	800c06e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	885b      	ldrh	r3, [r3, #2]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d10e      	bne.n	800c05c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c03e:	7bbb      	ldrb	r3, [r7, #14]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d00b      	beq.n	800c05c <USBD_StdEPReq+0xb0>
 800c044:	7bbb      	ldrb	r3, [r7, #14]
 800c046:	2b80      	cmp	r3, #128	; 0x80
 800c048:	d008      	beq.n	800c05c <USBD_StdEPReq+0xb0>
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	88db      	ldrh	r3, [r3, #6]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d104      	bne.n	800c05c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c052:	7bbb      	ldrb	r3, [r7, #14]
 800c054:	4619      	mov	r1, r3
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f001 f970 	bl	800d33c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 fcec 	bl	800ca3a <USBD_CtlSendStatus>

        break;
 800c062:	e004      	b.n	800c06e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c064:	6839      	ldr	r1, [r7, #0]
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 fc1c 	bl	800c8a4 <USBD_CtlError>
        break;
 800c06c:	bf00      	nop
      }
      break;
 800c06e:	e0e7      	b.n	800c240 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c076:	2b02      	cmp	r3, #2
 800c078:	d002      	beq.n	800c080 <USBD_StdEPReq+0xd4>
 800c07a:	2b03      	cmp	r3, #3
 800c07c:	d015      	beq.n	800c0aa <USBD_StdEPReq+0xfe>
 800c07e:	e02d      	b.n	800c0dc <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c080:	7bbb      	ldrb	r3, [r7, #14]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d00c      	beq.n	800c0a0 <USBD_StdEPReq+0xf4>
 800c086:	7bbb      	ldrb	r3, [r7, #14]
 800c088:	2b80      	cmp	r3, #128	; 0x80
 800c08a:	d009      	beq.n	800c0a0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c08c:	7bbb      	ldrb	r3, [r7, #14]
 800c08e:	4619      	mov	r1, r3
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f001 f953 	bl	800d33c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c096:	2180      	movs	r1, #128	; 0x80
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f001 f94f 	bl	800d33c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c09e:	e023      	b.n	800c0e8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c0a0:	6839      	ldr	r1, [r7, #0]
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 fbfe 	bl	800c8a4 <USBD_CtlError>
        break;
 800c0a8:	e01e      	b.n	800c0e8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	885b      	ldrh	r3, [r3, #2]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d119      	bne.n	800c0e6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c0b2:	7bbb      	ldrb	r3, [r7, #14]
 800c0b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d004      	beq.n	800c0c6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0bc:	7bbb      	ldrb	r3, [r7, #14]
 800c0be:	4619      	mov	r1, r3
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f001 f95a 	bl	800d37a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 fcb7 	bl	800ca3a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0d2:	689b      	ldr	r3, [r3, #8]
 800c0d4:	6839      	ldr	r1, [r7, #0]
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	4798      	blx	r3
        }
        break;
 800c0da:	e004      	b.n	800c0e6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c0dc:	6839      	ldr	r1, [r7, #0]
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 fbe0 	bl	800c8a4 <USBD_CtlError>
        break;
 800c0e4:	e000      	b.n	800c0e8 <USBD_StdEPReq+0x13c>
        break;
 800c0e6:	bf00      	nop
      }
      break;
 800c0e8:	e0aa      	b.n	800c240 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0f0:	2b02      	cmp	r3, #2
 800c0f2:	d002      	beq.n	800c0fa <USBD_StdEPReq+0x14e>
 800c0f4:	2b03      	cmp	r3, #3
 800c0f6:	d032      	beq.n	800c15e <USBD_StdEPReq+0x1b2>
 800c0f8:	e097      	b.n	800c22a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0fa:	7bbb      	ldrb	r3, [r7, #14]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d007      	beq.n	800c110 <USBD_StdEPReq+0x164>
 800c100:	7bbb      	ldrb	r3, [r7, #14]
 800c102:	2b80      	cmp	r3, #128	; 0x80
 800c104:	d004      	beq.n	800c110 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c106:	6839      	ldr	r1, [r7, #0]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 fbcb 	bl	800c8a4 <USBD_CtlError>
          break;
 800c10e:	e091      	b.n	800c234 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c114:	2b00      	cmp	r3, #0
 800c116:	da0b      	bge.n	800c130 <USBD_StdEPReq+0x184>
 800c118:	7bbb      	ldrb	r3, [r7, #14]
 800c11a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c11e:	4613      	mov	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	4413      	add	r3, r2
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	3310      	adds	r3, #16
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	4413      	add	r3, r2
 800c12c:	3304      	adds	r3, #4
 800c12e:	e00b      	b.n	800c148 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c130:	7bbb      	ldrb	r3, [r7, #14]
 800c132:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c136:	4613      	mov	r3, r2
 800c138:	009b      	lsls	r3, r3, #2
 800c13a:	4413      	add	r3, r2
 800c13c:	009b      	lsls	r3, r3, #2
 800c13e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	4413      	add	r3, r2
 800c146:	3304      	adds	r3, #4
 800c148:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	2200      	movs	r2, #0
 800c14e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	2202      	movs	r2, #2
 800c154:	4619      	mov	r1, r3
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 fc15 	bl	800c986 <USBD_CtlSendData>
        break;
 800c15c:	e06a      	b.n	800c234 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c15e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c162:	2b00      	cmp	r3, #0
 800c164:	da11      	bge.n	800c18a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c166:	7bbb      	ldrb	r3, [r7, #14]
 800c168:	f003 020f 	and.w	r2, r3, #15
 800c16c:	6879      	ldr	r1, [r7, #4]
 800c16e:	4613      	mov	r3, r2
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	4413      	add	r3, r2
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	440b      	add	r3, r1
 800c178:	3324      	adds	r3, #36	; 0x24
 800c17a:	881b      	ldrh	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d117      	bne.n	800c1b0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c180:	6839      	ldr	r1, [r7, #0]
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 fb8e 	bl	800c8a4 <USBD_CtlError>
            break;
 800c188:	e054      	b.n	800c234 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c18a:	7bbb      	ldrb	r3, [r7, #14]
 800c18c:	f003 020f 	and.w	r2, r3, #15
 800c190:	6879      	ldr	r1, [r7, #4]
 800c192:	4613      	mov	r3, r2
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	4413      	add	r3, r2
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	440b      	add	r3, r1
 800c19c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c1a0:	881b      	ldrh	r3, [r3, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d104      	bne.n	800c1b0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c1a6:	6839      	ldr	r1, [r7, #0]
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 fb7b 	bl	800c8a4 <USBD_CtlError>
            break;
 800c1ae:	e041      	b.n	800c234 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	da0b      	bge.n	800c1d0 <USBD_StdEPReq+0x224>
 800c1b8:	7bbb      	ldrb	r3, [r7, #14]
 800c1ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1be:	4613      	mov	r3, r2
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	4413      	add	r3, r2
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	3310      	adds	r3, #16
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	3304      	adds	r3, #4
 800c1ce:	e00b      	b.n	800c1e8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c1d0:	7bbb      	ldrb	r3, [r7, #14]
 800c1d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	4413      	add	r3, r2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	3304      	adds	r3, #4
 800c1e8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c1ea:	7bbb      	ldrb	r3, [r7, #14]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d002      	beq.n	800c1f6 <USBD_StdEPReq+0x24a>
 800c1f0:	7bbb      	ldrb	r3, [r7, #14]
 800c1f2:	2b80      	cmp	r3, #128	; 0x80
 800c1f4:	d103      	bne.n	800c1fe <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	601a      	str	r2, [r3, #0]
 800c1fc:	e00e      	b.n	800c21c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c1fe:	7bbb      	ldrb	r3, [r7, #14]
 800c200:	4619      	mov	r1, r3
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f001 f8d8 	bl	800d3b8 <USBD_LL_IsStallEP>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d003      	beq.n	800c216 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	2201      	movs	r2, #1
 800c212:	601a      	str	r2, [r3, #0]
 800c214:	e002      	b.n	800c21c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	2200      	movs	r2, #0
 800c21a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	2202      	movs	r2, #2
 800c220:	4619      	mov	r1, r3
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 fbaf 	bl	800c986 <USBD_CtlSendData>
          break;
 800c228:	e004      	b.n	800c234 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800c22a:	6839      	ldr	r1, [r7, #0]
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 fb39 	bl	800c8a4 <USBD_CtlError>
        break;
 800c232:	bf00      	nop
      }
      break;
 800c234:	e004      	b.n	800c240 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800c236:	6839      	ldr	r1, [r7, #0]
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 fb33 	bl	800c8a4 <USBD_CtlError>
      break;
 800c23e:	bf00      	nop
    }
    break;
 800c240:	e004      	b.n	800c24c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800c242:	6839      	ldr	r1, [r7, #0]
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 fb2d 	bl	800c8a4 <USBD_CtlError>
    break;
 800c24a:	bf00      	nop
  }

  return ret;
 800c24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
	...

0800c258 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c262:	2300      	movs	r3, #0
 800c264:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c266:	2300      	movs	r3, #0
 800c268:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c26a:	2300      	movs	r3, #0
 800c26c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	885b      	ldrh	r3, [r3, #2]
 800c272:	0a1b      	lsrs	r3, r3, #8
 800c274:	b29b      	uxth	r3, r3
 800c276:	3b01      	subs	r3, #1
 800c278:	2b06      	cmp	r3, #6
 800c27a:	f200 8128 	bhi.w	800c4ce <USBD_GetDescriptor+0x276>
 800c27e:	a201      	add	r2, pc, #4	; (adr r2, 800c284 <USBD_GetDescriptor+0x2c>)
 800c280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c284:	0800c2a1 	.word	0x0800c2a1
 800c288:	0800c2b9 	.word	0x0800c2b9
 800c28c:	0800c2f9 	.word	0x0800c2f9
 800c290:	0800c4cf 	.word	0x0800c4cf
 800c294:	0800c4cf 	.word	0x0800c4cf
 800c298:	0800c46f 	.word	0x0800c46f
 800c29c:	0800c49b 	.word	0x0800c49b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	7c12      	ldrb	r2, [r2, #16]
 800c2ac:	f107 0108 	add.w	r1, r7, #8
 800c2b0:	4610      	mov	r0, r2
 800c2b2:	4798      	blx	r3
 800c2b4:	60f8      	str	r0, [r7, #12]
    break;
 800c2b6:	e112      	b.n	800c4de <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	7c1b      	ldrb	r3, [r3, #16]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d10d      	bne.n	800c2dc <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c8:	f107 0208 	add.w	r2, r7, #8
 800c2cc:	4610      	mov	r0, r2
 800c2ce:	4798      	blx	r3
 800c2d0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	2202      	movs	r2, #2
 800c2d8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c2da:	e100      	b.n	800c4de <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e4:	f107 0208 	add.w	r2, r7, #8
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	4798      	blx	r3
 800c2ec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	2202      	movs	r2, #2
 800c2f4:	701a      	strb	r2, [r3, #0]
    break;
 800c2f6:	e0f2      	b.n	800c4de <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	885b      	ldrh	r3, [r3, #2]
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	2b05      	cmp	r3, #5
 800c300:	f200 80ac 	bhi.w	800c45c <USBD_GetDescriptor+0x204>
 800c304:	a201      	add	r2, pc, #4	; (adr r2, 800c30c <USBD_GetDescriptor+0xb4>)
 800c306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c30a:	bf00      	nop
 800c30c:	0800c325 	.word	0x0800c325
 800c310:	0800c359 	.word	0x0800c359
 800c314:	0800c38d 	.word	0x0800c38d
 800c318:	0800c3c1 	.word	0x0800c3c1
 800c31c:	0800c3f5 	.word	0x0800c3f5
 800c320:	0800c429 	.word	0x0800c429
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d00b      	beq.n	800c348 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	7c12      	ldrb	r2, [r2, #16]
 800c33c:	f107 0108 	add.w	r1, r7, #8
 800c340:	4610      	mov	r0, r2
 800c342:	4798      	blx	r3
 800c344:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c346:	e091      	b.n	800c46c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c348:	6839      	ldr	r1, [r7, #0]
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 faaa 	bl	800c8a4 <USBD_CtlError>
        err++;
 800c350:	7afb      	ldrb	r3, [r7, #11]
 800c352:	3301      	adds	r3, #1
 800c354:	72fb      	strb	r3, [r7, #11]
      break;
 800c356:	e089      	b.n	800c46c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c35e:	689b      	ldr	r3, [r3, #8]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d00b      	beq.n	800c37c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	7c12      	ldrb	r2, [r2, #16]
 800c370:	f107 0108 	add.w	r1, r7, #8
 800c374:	4610      	mov	r0, r2
 800c376:	4798      	blx	r3
 800c378:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c37a:	e077      	b.n	800c46c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c37c:	6839      	ldr	r1, [r7, #0]
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 fa90 	bl	800c8a4 <USBD_CtlError>
        err++;
 800c384:	7afb      	ldrb	r3, [r7, #11]
 800c386:	3301      	adds	r3, #1
 800c388:	72fb      	strb	r3, [r7, #11]
      break;
 800c38a:	e06f      	b.n	800c46c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c392:	68db      	ldr	r3, [r3, #12]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d00b      	beq.n	800c3b0 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	7c12      	ldrb	r2, [r2, #16]
 800c3a4:	f107 0108 	add.w	r1, r7, #8
 800c3a8:	4610      	mov	r0, r2
 800c3aa:	4798      	blx	r3
 800c3ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3ae:	e05d      	b.n	800c46c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c3b0:	6839      	ldr	r1, [r7, #0]
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 fa76 	bl	800c8a4 <USBD_CtlError>
        err++;
 800c3b8:	7afb      	ldrb	r3, [r7, #11]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	72fb      	strb	r3, [r7, #11]
      break;
 800c3be:	e055      	b.n	800c46c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3c6:	691b      	ldr	r3, [r3, #16]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00b      	beq.n	800c3e4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3d2:	691b      	ldr	r3, [r3, #16]
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	7c12      	ldrb	r2, [r2, #16]
 800c3d8:	f107 0108 	add.w	r1, r7, #8
 800c3dc:	4610      	mov	r0, r2
 800c3de:	4798      	blx	r3
 800c3e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3e2:	e043      	b.n	800c46c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c3e4:	6839      	ldr	r1, [r7, #0]
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 fa5c 	bl	800c8a4 <USBD_CtlError>
        err++;
 800c3ec:	7afb      	ldrb	r3, [r7, #11]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	72fb      	strb	r3, [r7, #11]
      break;
 800c3f2:	e03b      	b.n	800c46c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3fa:	695b      	ldr	r3, [r3, #20]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d00b      	beq.n	800c418 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c406:	695b      	ldr	r3, [r3, #20]
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	7c12      	ldrb	r2, [r2, #16]
 800c40c:	f107 0108 	add.w	r1, r7, #8
 800c410:	4610      	mov	r0, r2
 800c412:	4798      	blx	r3
 800c414:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c416:	e029      	b.n	800c46c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c418:	6839      	ldr	r1, [r7, #0]
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 fa42 	bl	800c8a4 <USBD_CtlError>
        err++;
 800c420:	7afb      	ldrb	r3, [r7, #11]
 800c422:	3301      	adds	r3, #1
 800c424:	72fb      	strb	r3, [r7, #11]
      break;
 800c426:	e021      	b.n	800c46c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c42e:	699b      	ldr	r3, [r3, #24]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00b      	beq.n	800c44c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c43a:	699b      	ldr	r3, [r3, #24]
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	7c12      	ldrb	r2, [r2, #16]
 800c440:	f107 0108 	add.w	r1, r7, #8
 800c444:	4610      	mov	r0, r2
 800c446:	4798      	blx	r3
 800c448:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c44a:	e00f      	b.n	800c46c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c44c:	6839      	ldr	r1, [r7, #0]
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 fa28 	bl	800c8a4 <USBD_CtlError>
        err++;
 800c454:	7afb      	ldrb	r3, [r7, #11]
 800c456:	3301      	adds	r3, #1
 800c458:	72fb      	strb	r3, [r7, #11]
      break;
 800c45a:	e007      	b.n	800c46c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c45c:	6839      	ldr	r1, [r7, #0]
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f000 fa20 	bl	800c8a4 <USBD_CtlError>
      err++;
 800c464:	7afb      	ldrb	r3, [r7, #11]
 800c466:	3301      	adds	r3, #1
 800c468:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c46a:	bf00      	nop
    }
    break;
 800c46c:	e037      	b.n	800c4de <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	7c1b      	ldrb	r3, [r3, #16]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d109      	bne.n	800c48a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c47c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c47e:	f107 0208 	add.w	r2, r7, #8
 800c482:	4610      	mov	r0, r2
 800c484:	4798      	blx	r3
 800c486:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c488:	e029      	b.n	800c4de <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c48a:	6839      	ldr	r1, [r7, #0]
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f000 fa09 	bl	800c8a4 <USBD_CtlError>
      err++;
 800c492:	7afb      	ldrb	r3, [r7, #11]
 800c494:	3301      	adds	r3, #1
 800c496:	72fb      	strb	r3, [r7, #11]
    break;
 800c498:	e021      	b.n	800c4de <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	7c1b      	ldrb	r3, [r3, #16]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d10d      	bne.n	800c4be <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4aa:	f107 0208 	add.w	r2, r7, #8
 800c4ae:	4610      	mov	r0, r2
 800c4b0:	4798      	blx	r3
 800c4b2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	2207      	movs	r2, #7
 800c4ba:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c4bc:	e00f      	b.n	800c4de <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c4be:	6839      	ldr	r1, [r7, #0]
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f000 f9ef 	bl	800c8a4 <USBD_CtlError>
      err++;
 800c4c6:	7afb      	ldrb	r3, [r7, #11]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	72fb      	strb	r3, [r7, #11]
    break;
 800c4cc:	e007      	b.n	800c4de <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800c4ce:	6839      	ldr	r1, [r7, #0]
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f000 f9e7 	bl	800c8a4 <USBD_CtlError>
    err++;
 800c4d6:	7afb      	ldrb	r3, [r7, #11]
 800c4d8:	3301      	adds	r3, #1
 800c4da:	72fb      	strb	r3, [r7, #11]
    break;
 800c4dc:	bf00      	nop
  }

  if (err != 0U)
 800c4de:	7afb      	ldrb	r3, [r7, #11]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d11e      	bne.n	800c522 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	88db      	ldrh	r3, [r3, #6]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d016      	beq.n	800c51a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800c4ec:	893b      	ldrh	r3, [r7, #8]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d00e      	beq.n	800c510 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	88da      	ldrh	r2, [r3, #6]
 800c4f6:	893b      	ldrh	r3, [r7, #8]
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	bf28      	it	cs
 800c4fc:	4613      	movcs	r3, r2
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c502:	893b      	ldrh	r3, [r7, #8]
 800c504:	461a      	mov	r2, r3
 800c506:	68f9      	ldr	r1, [r7, #12]
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f000 fa3c 	bl	800c986 <USBD_CtlSendData>
 800c50e:	e009      	b.n	800c524 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c510:	6839      	ldr	r1, [r7, #0]
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 f9c6 	bl	800c8a4 <USBD_CtlError>
 800c518:	e004      	b.n	800c524 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fa8d 	bl	800ca3a <USBD_CtlSendStatus>
 800c520:	e000      	b.n	800c524 <USBD_GetDescriptor+0x2cc>
    return;
 800c522:	bf00      	nop
    }
  }
}
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop

0800c52c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	889b      	ldrh	r3, [r3, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d130      	bne.n	800c5a0 <USBD_SetAddress+0x74>
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	88db      	ldrh	r3, [r3, #6]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d12c      	bne.n	800c5a0 <USBD_SetAddress+0x74>
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	885b      	ldrh	r3, [r3, #2]
 800c54a:	2b7f      	cmp	r3, #127	; 0x7f
 800c54c:	d828      	bhi.n	800c5a0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	885b      	ldrh	r3, [r3, #2]
 800c552:	b2db      	uxtb	r3, r3
 800c554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c558:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c560:	2b03      	cmp	r3, #3
 800c562:	d104      	bne.n	800c56e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c564:	6839      	ldr	r1, [r7, #0]
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 f99c 	bl	800c8a4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c56c:	e01c      	b.n	800c5a8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	7bfa      	ldrb	r2, [r7, #15]
 800c572:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c576:	7bfb      	ldrb	r3, [r7, #15]
 800c578:	4619      	mov	r1, r3
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 ff48 	bl	800d410 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 fa5a 	bl	800ca3a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c586:	7bfb      	ldrb	r3, [r7, #15]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d004      	beq.n	800c596 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2202      	movs	r2, #2
 800c590:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c594:	e008      	b.n	800c5a8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2201      	movs	r2, #1
 800c59a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c59e:	e003      	b.n	800c5a8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c5a0:	6839      	ldr	r1, [r7, #0]
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 f97e 	bl	800c8a4 <USBD_CtlError>
  }
}
 800c5a8:	bf00      	nop
 800c5aa:	3710      	adds	r7, #16
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	885b      	ldrh	r3, [r3, #2]
 800c5c2:	b2da      	uxtb	r2, r3
 800c5c4:	4b4b      	ldr	r3, [pc, #300]	; (800c6f4 <USBD_SetConfig+0x144>)
 800c5c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c5c8:	4b4a      	ldr	r3, [pc, #296]	; (800c6f4 <USBD_SetConfig+0x144>)
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d905      	bls.n	800c5dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c5d0:	6839      	ldr	r1, [r7, #0]
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 f966 	bl	800c8a4 <USBD_CtlError>
    return USBD_FAIL;
 800c5d8:	2303      	movs	r3, #3
 800c5da:	e087      	b.n	800c6ec <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5e2:	2b02      	cmp	r3, #2
 800c5e4:	d002      	beq.n	800c5ec <USBD_SetConfig+0x3c>
 800c5e6:	2b03      	cmp	r3, #3
 800c5e8:	d025      	beq.n	800c636 <USBD_SetConfig+0x86>
 800c5ea:	e071      	b.n	800c6d0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c5ec:	4b41      	ldr	r3, [pc, #260]	; (800c6f4 <USBD_SetConfig+0x144>)
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d01c      	beq.n	800c62e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c5f4:	4b3f      	ldr	r3, [pc, #252]	; (800c6f4 <USBD_SetConfig+0x144>)
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c5fe:	4b3d      	ldr	r3, [pc, #244]	; (800c6f4 <USBD_SetConfig+0x144>)
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	4619      	mov	r1, r3
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f7ff f9a8 	bl	800b95a <USBD_SetClassConfig>
 800c60a:	4603      	mov	r3, r0
 800c60c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c60e:	7bfb      	ldrb	r3, [r7, #15]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d004      	beq.n	800c61e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c614:	6839      	ldr	r1, [r7, #0]
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 f944 	bl	800c8a4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c61c:	e065      	b.n	800c6ea <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 fa0b 	bl	800ca3a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2203      	movs	r2, #3
 800c628:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c62c:	e05d      	b.n	800c6ea <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 fa03 	bl	800ca3a <USBD_CtlSendStatus>
    break;
 800c634:	e059      	b.n	800c6ea <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c636:	4b2f      	ldr	r3, [pc, #188]	; (800c6f4 <USBD_SetConfig+0x144>)
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d112      	bne.n	800c664 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2202      	movs	r2, #2
 800c642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c646:	4b2b      	ldr	r3, [pc, #172]	; (800c6f4 <USBD_SetConfig+0x144>)
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	461a      	mov	r2, r3
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c650:	4b28      	ldr	r3, [pc, #160]	; (800c6f4 <USBD_SetConfig+0x144>)
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	4619      	mov	r1, r3
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f7ff f99b 	bl	800b992 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 f9ec 	bl	800ca3a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c662:	e042      	b.n	800c6ea <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c664:	4b23      	ldr	r3, [pc, #140]	; (800c6f4 <USBD_SetConfig+0x144>)
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	461a      	mov	r2, r3
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d02a      	beq.n	800c6c8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	b2db      	uxtb	r3, r3
 800c678:	4619      	mov	r1, r3
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f7ff f989 	bl	800b992 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c680:	4b1c      	ldr	r3, [pc, #112]	; (800c6f4 <USBD_SetConfig+0x144>)
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	461a      	mov	r2, r3
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c68a:	4b1a      	ldr	r3, [pc, #104]	; (800c6f4 <USBD_SetConfig+0x144>)
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	4619      	mov	r1, r3
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f7ff f962 	bl	800b95a <USBD_SetClassConfig>
 800c696:	4603      	mov	r3, r0
 800c698:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800c69a:	7bfb      	ldrb	r3, [r7, #15]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d00f      	beq.n	800c6c0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800c6a0:	6839      	ldr	r1, [r7, #0]
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 f8fe 	bl	800c8a4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f7ff f96e 	bl	800b992 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2202      	movs	r2, #2
 800c6ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c6be:	e014      	b.n	800c6ea <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 f9ba 	bl	800ca3a <USBD_CtlSendStatus>
    break;
 800c6c6:	e010      	b.n	800c6ea <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 f9b6 	bl	800ca3a <USBD_CtlSendStatus>
    break;
 800c6ce:	e00c      	b.n	800c6ea <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800c6d0:	6839      	ldr	r1, [r7, #0]
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 f8e6 	bl	800c8a4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c6d8:	4b06      	ldr	r3, [pc, #24]	; (800c6f4 <USBD_SetConfig+0x144>)
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	4619      	mov	r1, r3
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f7ff f957 	bl	800b992 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800c6e4:	2303      	movs	r3, #3
 800c6e6:	73fb      	strb	r3, [r7, #15]
    break;
 800c6e8:	bf00      	nop
  }

  return ret;
 800c6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3710      	adds	r7, #16
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	200003b1 	.word	0x200003b1

0800c6f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	88db      	ldrh	r3, [r3, #6]
 800c706:	2b01      	cmp	r3, #1
 800c708:	d004      	beq.n	800c714 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c70a:	6839      	ldr	r1, [r7, #0]
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 f8c9 	bl	800c8a4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c712:	e021      	b.n	800c758 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	db17      	blt.n	800c74e <USBD_GetConfig+0x56>
 800c71e:	2b02      	cmp	r3, #2
 800c720:	dd02      	ble.n	800c728 <USBD_GetConfig+0x30>
 800c722:	2b03      	cmp	r3, #3
 800c724:	d00b      	beq.n	800c73e <USBD_GetConfig+0x46>
 800c726:	e012      	b.n	800c74e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	3308      	adds	r3, #8
 800c732:	2201      	movs	r2, #1
 800c734:	4619      	mov	r1, r3
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 f925 	bl	800c986 <USBD_CtlSendData>
      break;
 800c73c:	e00c      	b.n	800c758 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	3304      	adds	r3, #4
 800c742:	2201      	movs	r2, #1
 800c744:	4619      	mov	r1, r3
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 f91d 	bl	800c986 <USBD_CtlSendData>
      break;
 800c74c:	e004      	b.n	800c758 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800c74e:	6839      	ldr	r1, [r7, #0]
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f000 f8a7 	bl	800c8a4 <USBD_CtlError>
      break;
 800c756:	bf00      	nop
}
 800c758:	bf00      	nop
 800c75a:	3708      	adds	r7, #8
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b082      	sub	sp, #8
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c770:	3b01      	subs	r3, #1
 800c772:	2b02      	cmp	r3, #2
 800c774:	d81e      	bhi.n	800c7b4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	88db      	ldrh	r3, [r3, #6]
 800c77a:	2b02      	cmp	r3, #2
 800c77c:	d004      	beq.n	800c788 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c77e:	6839      	ldr	r1, [r7, #0]
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 f88f 	bl	800c8a4 <USBD_CtlError>
      break;
 800c786:	e01a      	b.n	800c7be <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2201      	movs	r2, #1
 800c78c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c794:	2b00      	cmp	r3, #0
 800c796:	d005      	beq.n	800c7a4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	f043 0202 	orr.w	r2, r3, #2
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	330c      	adds	r3, #12
 800c7a8:	2202      	movs	r2, #2
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 f8ea 	bl	800c986 <USBD_CtlSendData>
    break;
 800c7b2:	e004      	b.n	800c7be <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c7b4:	6839      	ldr	r1, [r7, #0]
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 f874 	bl	800c8a4 <USBD_CtlError>
    break;
 800c7bc:	bf00      	nop
  }
}
 800c7be:	bf00      	nop
 800c7c0:	3708      	adds	r7, #8
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b082      	sub	sp, #8
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
 800c7ce:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	885b      	ldrh	r3, [r3, #2]
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d106      	bne.n	800c7e6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 f92a 	bl	800ca3a <USBD_CtlSendStatus>
  }
}
 800c7e6:	bf00      	nop
 800c7e8:	3708      	adds	r7, #8
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b082      	sub	sp, #8
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
 800c7f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7fe:	3b01      	subs	r3, #1
 800c800:	2b02      	cmp	r3, #2
 800c802:	d80b      	bhi.n	800c81c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	885b      	ldrh	r3, [r3, #2]
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d10c      	bne.n	800c826 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 f910 	bl	800ca3a <USBD_CtlSendStatus>
      }
      break;
 800c81a:	e004      	b.n	800c826 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 f840 	bl	800c8a4 <USBD_CtlError>
      break;
 800c824:	e000      	b.n	800c828 <USBD_ClrFeature+0x3a>
      break;
 800c826:	bf00      	nop
  }
}
 800c828:	bf00      	nop
 800c82a:	3708      	adds	r7, #8
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	781a      	ldrb	r2, [r3, #0]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	3301      	adds	r3, #1
 800c84a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	781a      	ldrb	r2, [r3, #0]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	3301      	adds	r3, #1
 800c858:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c85a:	68f8      	ldr	r0, [r7, #12]
 800c85c:	f7ff fad4 	bl	800be08 <SWAPBYTE>
 800c860:	4603      	mov	r3, r0
 800c862:	461a      	mov	r2, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	3301      	adds	r3, #1
 800c86c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	3301      	adds	r3, #1
 800c872:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	f7ff fac7 	bl	800be08 <SWAPBYTE>
 800c87a:	4603      	mov	r3, r0
 800c87c:	461a      	mov	r2, r3
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	3301      	adds	r3, #1
 800c886:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	3301      	adds	r3, #1
 800c88c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c88e:	68f8      	ldr	r0, [r7, #12]
 800c890:	f7ff faba 	bl	800be08 <SWAPBYTE>
 800c894:	4603      	mov	r3, r0
 800c896:	461a      	mov	r2, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	80da      	strh	r2, [r3, #6]
}
 800c89c:	bf00      	nop
 800c89e:	3710      	adds	r7, #16
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8ae:	2180      	movs	r1, #128	; 0x80
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f000 fd43 	bl	800d33c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c8b6:	2100      	movs	r1, #0
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 fd3f 	bl	800d33c <USBD_LL_StallEP>
}
 800c8be:	bf00      	nop
 800c8c0:	3708      	adds	r7, #8
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b086      	sub	sp, #24
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	60f8      	str	r0, [r7, #12]
 800c8ce:	60b9      	str	r1, [r7, #8]
 800c8d0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d036      	beq.n	800c94a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c8e0:	6938      	ldr	r0, [r7, #16]
 800c8e2:	f000 f836 	bl	800c952 <USBD_GetLen>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	005b      	lsls	r3, r3, #1
 800c8ee:	b29a      	uxth	r2, r3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c8f4:	7dfb      	ldrb	r3, [r7, #23]
 800c8f6:	68ba      	ldr	r2, [r7, #8]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	7812      	ldrb	r2, [r2, #0]
 800c8fe:	701a      	strb	r2, [r3, #0]
  idx++;
 800c900:	7dfb      	ldrb	r3, [r7, #23]
 800c902:	3301      	adds	r3, #1
 800c904:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c906:	7dfb      	ldrb	r3, [r7, #23]
 800c908:	68ba      	ldr	r2, [r7, #8]
 800c90a:	4413      	add	r3, r2
 800c90c:	2203      	movs	r2, #3
 800c90e:	701a      	strb	r2, [r3, #0]
  idx++;
 800c910:	7dfb      	ldrb	r3, [r7, #23]
 800c912:	3301      	adds	r3, #1
 800c914:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c916:	e013      	b.n	800c940 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c918:	7dfb      	ldrb	r3, [r7, #23]
 800c91a:	68ba      	ldr	r2, [r7, #8]
 800c91c:	4413      	add	r3, r2
 800c91e:	693a      	ldr	r2, [r7, #16]
 800c920:	7812      	ldrb	r2, [r2, #0]
 800c922:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	3301      	adds	r3, #1
 800c928:	613b      	str	r3, [r7, #16]
    idx++;
 800c92a:	7dfb      	ldrb	r3, [r7, #23]
 800c92c:	3301      	adds	r3, #1
 800c92e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c930:	7dfb      	ldrb	r3, [r7, #23]
 800c932:	68ba      	ldr	r2, [r7, #8]
 800c934:	4413      	add	r3, r2
 800c936:	2200      	movs	r2, #0
 800c938:	701a      	strb	r2, [r3, #0]
    idx++;
 800c93a:	7dfb      	ldrb	r3, [r7, #23]
 800c93c:	3301      	adds	r3, #1
 800c93e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d1e7      	bne.n	800c918 <USBD_GetString+0x52>
 800c948:	e000      	b.n	800c94c <USBD_GetString+0x86>
    return;
 800c94a:	bf00      	nop
  }
}
 800c94c:	3718      	adds	r7, #24
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}

0800c952 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c952:	b480      	push	{r7}
 800c954:	b085      	sub	sp, #20
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c95a:	2300      	movs	r3, #0
 800c95c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c962:	e005      	b.n	800c970 <USBD_GetLen+0x1e>
  {
    len++;
 800c964:	7bfb      	ldrb	r3, [r7, #15]
 800c966:	3301      	adds	r3, #1
 800c968:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	3301      	adds	r3, #1
 800c96e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d1f5      	bne.n	800c964 <USBD_GetLen+0x12>
  }

  return len;
 800c978:	7bfb      	ldrb	r3, [r7, #15]
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3714      	adds	r7, #20
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr

0800c986 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b084      	sub	sp, #16
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	60f8      	str	r0, [r7, #12]
 800c98e:	60b9      	str	r1, [r7, #8]
 800c990:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2202      	movs	r2, #2
 800c996:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	68ba      	ldr	r2, [r7, #8]
 800c9aa:	2100      	movs	r1, #0
 800c9ac:	68f8      	ldr	r0, [r7, #12]
 800c9ae:	f000 fd4e 	bl	800d44e <USBD_LL_Transmit>

  return USBD_OK;
 800c9b2:	2300      	movs	r3, #0
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3710      	adds	r7, #16
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b084      	sub	sp, #16
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	68ba      	ldr	r2, [r7, #8]
 800c9cc:	2100      	movs	r1, #0
 800c9ce:	68f8      	ldr	r0, [r7, #12]
 800c9d0:	f000 fd3d 	bl	800d44e <USBD_LL_Transmit>

  return USBD_OK;
 800c9d4:	2300      	movs	r3, #0
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3710      	adds	r7, #16
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}

0800c9de <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	b084      	sub	sp, #16
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	60f8      	str	r0, [r7, #12]
 800c9e6:	60b9      	str	r1, [r7, #8]
 800c9e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2203      	movs	r2, #3
 800c9ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	68ba      	ldr	r2, [r7, #8]
 800ca06:	2100      	movs	r1, #0
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f000 fd41 	bl	800d490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca0e:	2300      	movs	r3, #0
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3710      	adds	r7, #16
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b084      	sub	sp, #16
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	60f8      	str	r0, [r7, #12]
 800ca20:	60b9      	str	r1, [r7, #8]
 800ca22:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	2100      	movs	r1, #0
 800ca2a:	68f8      	ldr	r0, [r7, #12]
 800ca2c:	f000 fd30 	bl	800d490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ca3a:	b580      	push	{r7, lr}
 800ca3c:	b082      	sub	sp, #8
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2204      	movs	r2, #4
 800ca46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	2100      	movs	r1, #0
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 fcfc 	bl	800d44e <USBD_LL_Transmit>

  return USBD_OK;
 800ca56:	2300      	movs	r3, #0
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3708      	adds	r7, #8
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2205      	movs	r2, #5
 800ca6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca70:	2300      	movs	r3, #0
 800ca72:	2200      	movs	r2, #0
 800ca74:	2100      	movs	r1, #0
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 fd0a 	bl	800d490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca7c:	2300      	movs	r3, #0
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3708      	adds	r7, #8
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
	...

0800ca88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	4918      	ldr	r1, [pc, #96]	; (800caf0 <MX_USB_DEVICE_Init+0x68>)
 800ca90:	4818      	ldr	r0, [pc, #96]	; (800caf4 <MX_USB_DEVICE_Init+0x6c>)
 800ca92:	f7fe fef4 	bl	800b87e <USBD_Init>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d001      	beq.n	800caa0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ca9c:	f7f5 fb86 	bl	80021ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800caa0:	4915      	ldr	r1, [pc, #84]	; (800caf8 <MX_USB_DEVICE_Init+0x70>)
 800caa2:	4814      	ldr	r0, [pc, #80]	; (800caf4 <MX_USB_DEVICE_Init+0x6c>)
 800caa4:	f7fe ff21 	bl	800b8ea <USBD_RegisterClass>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d001      	beq.n	800cab2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800caae:	f7f5 fb7d 	bl	80021ac <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800cab2:	4912      	ldr	r1, [pc, #72]	; (800cafc <MX_USB_DEVICE_Init+0x74>)
 800cab4:	480f      	ldr	r0, [pc, #60]	; (800caf4 <MX_USB_DEVICE_Init+0x6c>)
 800cab6:	f7fe fdb9 	bl	800b62c <USBD_AUDIO_RegisterInterface>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d001      	beq.n	800cac4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cac0:	f7f5 fb74 	bl	80021ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cac4:	480b      	ldr	r0, [pc, #44]	; (800caf4 <MX_USB_DEVICE_Init+0x6c>)
 800cac6:	f7fe ff31 	bl	800b92c <USBD_Start>
 800caca:	4603      	mov	r3, r0
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d001      	beq.n	800cad4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cad0:	f7f5 fb6c 	bl	80021ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI);
 800cad4:	490a      	ldr	r1, [pc, #40]	; (800cb00 <MX_USB_DEVICE_Init+0x78>)
 800cad6:	4807      	ldr	r0, [pc, #28]	; (800caf4 <MX_USB_DEVICE_Init+0x6c>)
 800cad8:	f7fe ff07 	bl	800b8ea <USBD_RegisterClass>

	USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800cadc:	4909      	ldr	r1, [pc, #36]	; (800cb04 <MX_USB_DEVICE_Init+0x7c>)
 800cade:	4805      	ldr	r0, [pc, #20]	; (800caf4 <MX_USB_DEVICE_Init+0x6c>)
 800cae0:	f7fe feb6 	bl	800b850 <USBD_MIDI_RegisterInterface>

	USBD_Start(&hUsbDeviceFS);
 800cae4:	4803      	ldr	r0, [pc, #12]	; (800caf4 <MX_USB_DEVICE_Init+0x6c>)
 800cae6:	f7fe ff21 	bl	800b92c <USBD_Start>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800caea:	bf00      	nop
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	2000020c 	.word	0x2000020c
 800caf4:	20000a00 	.word	0x20000a00
 800caf8:	2000009c 	.word	0x2000009c
 800cafc:	200001f0 	.word	0x200001f0
 800cb00:	20000150 	.word	0x20000150
 800cb04:	2000026c 	.word	0x2000026c

0800cb08 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b085      	sub	sp, #20
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 800cb14:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3714      	adds	r7, #20
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr

0800cb22 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800cb22:	b480      	push	{r7}
 800cb24:	b083      	sub	sp, #12
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 800cb2a:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	370c      	adds	r7, #12
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr

0800cb38 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b085      	sub	sp, #20
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	4613      	mov	r3, r2
 800cb44:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800cb46:	79fb      	ldrb	r3, [r7, #7]
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d001      	beq.n	800cb50 <AUDIO_AudioCmd_FS+0x18>
 800cb4c:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800cb4e:	e000      	b.n	800cb52 <AUDIO_AudioCmd_FS+0x1a>
    break;
 800cb50:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800cb52:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3714      	adds	r7, #20
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr

0800cb60 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b083      	sub	sp, #12
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	4603      	mov	r3, r0
 800cb68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 800cb6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	370c      	adds	r7, #12
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	4603      	mov	r3, r0
 800cb80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 800cb82:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	370c      	adds	r7, #12
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr

0800cb90 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b085      	sub	sp, #20
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	60b9      	str	r1, [r7, #8]
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800cb9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3714      	adds	r7, #20
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr

0800cbac <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800cbac:	b480      	push	{r7}
 800cbae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800cbb0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	6039      	str	r1, [r7, #0]
 800cbc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	2212      	movs	r2, #18
 800cbcc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cbce:	4b03      	ldr	r3, [pc, #12]	; (800cbdc <USBD_FS_DeviceDescriptor+0x20>)
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	370c      	adds	r7, #12
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr
 800cbdc:	20000228 	.word	0x20000228

0800cbe0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b083      	sub	sp, #12
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	6039      	str	r1, [r7, #0]
 800cbea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	2204      	movs	r2, #4
 800cbf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cbf2:	4b03      	ldr	r3, [pc, #12]	; (800cc00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	370c      	adds	r7, #12
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr
 800cc00:	2000023c 	.word	0x2000023c

0800cc04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	6039      	str	r1, [r7, #0]
 800cc0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc10:	79fb      	ldrb	r3, [r7, #7]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d105      	bne.n	800cc22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc16:	683a      	ldr	r2, [r7, #0]
 800cc18:	4907      	ldr	r1, [pc, #28]	; (800cc38 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc1a:	4808      	ldr	r0, [pc, #32]	; (800cc3c <USBD_FS_ProductStrDescriptor+0x38>)
 800cc1c:	f7ff fe53 	bl	800c8c6 <USBD_GetString>
 800cc20:	e004      	b.n	800cc2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc22:	683a      	ldr	r2, [r7, #0]
 800cc24:	4904      	ldr	r1, [pc, #16]	; (800cc38 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc26:	4805      	ldr	r0, [pc, #20]	; (800cc3c <USBD_FS_ProductStrDescriptor+0x38>)
 800cc28:	f7ff fe4d 	bl	800c8c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc2c:	4b02      	ldr	r3, [pc, #8]	; (800cc38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3708      	adds	r7, #8
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	20000cd0 	.word	0x20000cd0
 800cc3c:	0800d940 	.word	0x0800d940

0800cc40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	4603      	mov	r3, r0
 800cc48:	6039      	str	r1, [r7, #0]
 800cc4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc4c:	683a      	ldr	r2, [r7, #0]
 800cc4e:	4904      	ldr	r1, [pc, #16]	; (800cc60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc50:	4804      	ldr	r0, [pc, #16]	; (800cc64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc52:	f7ff fe38 	bl	800c8c6 <USBD_GetString>
  return USBD_StrDesc;
 800cc56:	4b02      	ldr	r3, [pc, #8]	; (800cc60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3708      	adds	r7, #8
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}
 800cc60:	20000cd0 	.word	0x20000cd0
 800cc64:	0800d940 	.word	0x0800d940

0800cc68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	4603      	mov	r3, r0
 800cc70:	6039      	str	r1, [r7, #0]
 800cc72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	221a      	movs	r2, #26
 800cc78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc7a:	f000 f843 	bl	800cd04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc7e:	4b02      	ldr	r3, [pc, #8]	; (800cc88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3708      	adds	r7, #8
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}
 800cc88:	20000240 	.word	0x20000240

0800cc8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	4603      	mov	r3, r0
 800cc94:	6039      	str	r1, [r7, #0]
 800cc96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cc98:	79fb      	ldrb	r3, [r7, #7]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d105      	bne.n	800ccaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc9e:	683a      	ldr	r2, [r7, #0]
 800cca0:	4907      	ldr	r1, [pc, #28]	; (800ccc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cca2:	4808      	ldr	r0, [pc, #32]	; (800ccc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cca4:	f7ff fe0f 	bl	800c8c6 <USBD_GetString>
 800cca8:	e004      	b.n	800ccb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccaa:	683a      	ldr	r2, [r7, #0]
 800ccac:	4904      	ldr	r1, [pc, #16]	; (800ccc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ccae:	4805      	ldr	r0, [pc, #20]	; (800ccc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ccb0:	f7ff fe09 	bl	800c8c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccb4:	4b02      	ldr	r3, [pc, #8]	; (800ccc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3708      	adds	r7, #8
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	20000cd0 	.word	0x20000cd0
 800ccc4:	0800d954 	.word	0x0800d954

0800ccc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	4603      	mov	r3, r0
 800ccd0:	6039      	str	r1, [r7, #0]
 800ccd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccd4:	79fb      	ldrb	r3, [r7, #7]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d105      	bne.n	800cce6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccda:	683a      	ldr	r2, [r7, #0]
 800ccdc:	4907      	ldr	r1, [pc, #28]	; (800ccfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccde:	4808      	ldr	r0, [pc, #32]	; (800cd00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cce0:	f7ff fdf1 	bl	800c8c6 <USBD_GetString>
 800cce4:	e004      	b.n	800ccf0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cce6:	683a      	ldr	r2, [r7, #0]
 800cce8:	4904      	ldr	r1, [pc, #16]	; (800ccfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccea:	4805      	ldr	r0, [pc, #20]	; (800cd00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccec:	f7ff fdeb 	bl	800c8c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccf0:	4b02      	ldr	r3, [pc, #8]	; (800ccfc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3708      	adds	r7, #8
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	20000cd0 	.word	0x20000cd0
 800cd00:	0800d96c 	.word	0x0800d96c

0800cd04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd0a:	4b0f      	ldr	r3, [pc, #60]	; (800cd48 <Get_SerialNum+0x44>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd10:	4b0e      	ldr	r3, [pc, #56]	; (800cd4c <Get_SerialNum+0x48>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd16:	4b0e      	ldr	r3, [pc, #56]	; (800cd50 <Get_SerialNum+0x4c>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd1c:	68fa      	ldr	r2, [r7, #12]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	4413      	add	r3, r2
 800cd22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d009      	beq.n	800cd3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd2a:	2208      	movs	r2, #8
 800cd2c:	4909      	ldr	r1, [pc, #36]	; (800cd54 <Get_SerialNum+0x50>)
 800cd2e:	68f8      	ldr	r0, [r7, #12]
 800cd30:	f000 f814 	bl	800cd5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd34:	2204      	movs	r2, #4
 800cd36:	4908      	ldr	r1, [pc, #32]	; (800cd58 <Get_SerialNum+0x54>)
 800cd38:	68b8      	ldr	r0, [r7, #8]
 800cd3a:	f000 f80f 	bl	800cd5c <IntToUnicode>
  }
}
 800cd3e:	bf00      	nop
 800cd40:	3710      	adds	r7, #16
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	1fff7a10 	.word	0x1fff7a10
 800cd4c:	1fff7a14 	.word	0x1fff7a14
 800cd50:	1fff7a18 	.word	0x1fff7a18
 800cd54:	20000242 	.word	0x20000242
 800cd58:	20000252 	.word	0x20000252

0800cd5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b087      	sub	sp, #28
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	4613      	mov	r3, r2
 800cd68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd6e:	2300      	movs	r3, #0
 800cd70:	75fb      	strb	r3, [r7, #23]
 800cd72:	e027      	b.n	800cdc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	0f1b      	lsrs	r3, r3, #28
 800cd78:	2b09      	cmp	r3, #9
 800cd7a:	d80b      	bhi.n	800cd94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	0f1b      	lsrs	r3, r3, #28
 800cd80:	b2da      	uxtb	r2, r3
 800cd82:	7dfb      	ldrb	r3, [r7, #23]
 800cd84:	005b      	lsls	r3, r3, #1
 800cd86:	4619      	mov	r1, r3
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	440b      	add	r3, r1
 800cd8c:	3230      	adds	r2, #48	; 0x30
 800cd8e:	b2d2      	uxtb	r2, r2
 800cd90:	701a      	strb	r2, [r3, #0]
 800cd92:	e00a      	b.n	800cdaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	0f1b      	lsrs	r3, r3, #28
 800cd98:	b2da      	uxtb	r2, r3
 800cd9a:	7dfb      	ldrb	r3, [r7, #23]
 800cd9c:	005b      	lsls	r3, r3, #1
 800cd9e:	4619      	mov	r1, r3
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	440b      	add	r3, r1
 800cda4:	3237      	adds	r2, #55	; 0x37
 800cda6:	b2d2      	uxtb	r2, r2
 800cda8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	011b      	lsls	r3, r3, #4
 800cdae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cdb0:	7dfb      	ldrb	r3, [r7, #23]
 800cdb2:	005b      	lsls	r3, r3, #1
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	68ba      	ldr	r2, [r7, #8]
 800cdb8:	4413      	add	r3, r2
 800cdba:	2200      	movs	r2, #0
 800cdbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cdbe:	7dfb      	ldrb	r3, [r7, #23]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	75fb      	strb	r3, [r7, #23]
 800cdc4:	7dfa      	ldrb	r2, [r7, #23]
 800cdc6:	79fb      	ldrb	r3, [r7, #7]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d3d3      	bcc.n	800cd74 <IntToUnicode+0x18>
  }
}
 800cdcc:	bf00      	nop
 800cdce:	371c      	adds	r7, #28
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr

0800cdd8 <MIDI_DataRx>:
};

uint8_t flag_sendMidi = 0;

uint16_t MIDI_DataRx(uint8_t *msg, uint16_t length)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b084      	sub	sp, #16
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	460b      	mov	r3, r1
 800cde2:	807b      	strh	r3, [r7, #2]
  //uint8_t chan = msg[0] & 0x0F;
  uint8_t msgtype = msg[0] & 0xF0;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	f023 030f 	bic.w	r3, r3, #15
 800cdec:	73fb      	strb	r3, [r7, #15]
  uint8_t b1 =  msg[2];
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	789b      	ldrb	r3, [r3, #2]
 800cdf2:	73bb      	strb	r3, [r7, #14]
  uint8_t b2 =  msg[3];
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	78db      	ldrb	r3, [r3, #3]
 800cdf8:	737b      	strb	r3, [r7, #13]
 // uint16_t b = ((b2 & 0x7F) << 7) | (b1 & 0x7F);
 
  switch (msgtype)
 800cdfa:	7bfb      	ldrb	r3, [r7, #15]
 800cdfc:	2bb0      	cmp	r3, #176	; 0xb0
 800cdfe:	d01c      	beq.n	800ce3a <MIDI_DataRx+0x62>
 800ce00:	2bb0      	cmp	r3, #176	; 0xb0
 800ce02:	dc05      	bgt.n	800ce10 <MIDI_DataRx+0x38>
 800ce04:	2b90      	cmp	r3, #144	; 0x90
 800ce06:	d01a      	beq.n	800ce3e <MIDI_DataRx+0x66>
 800ce08:	2ba0      	cmp	r3, #160	; 0xa0
 800ce0a:	d01a      	beq.n	800ce42 <MIDI_DataRx+0x6a>
 800ce0c:	2b80      	cmp	r3, #128	; 0x80
	  //key = b1;
	  //velocity = b2;
	  //notepos = key - 8 + transpose;
	  //stop_note(notepos);
	  //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7); //blink LED
	  break;
 800ce0e:	e01f      	b.n	800ce50 <MIDI_DataRx+0x78>
  switch (msgtype)
 800ce10:	2bd0      	cmp	r3, #208	; 0xd0
 800ce12:	d018      	beq.n	800ce46 <MIDI_DataRx+0x6e>
 800ce14:	2bd0      	cmp	r3, #208	; 0xd0
 800ce16:	dc01      	bgt.n	800ce1c <MIDI_DataRx+0x44>
 800ce18:	2bc0      	cmp	r3, #192	; 0xc0
							break;
					}*/
	  break;
  case 0xC0:
	  //data = b1;
	  break;
 800ce1a:	e019      	b.n	800ce50 <MIDI_DataRx+0x78>
  switch (msgtype)
 800ce1c:	2be0      	cmp	r3, #224	; 0xe0
 800ce1e:	d014      	beq.n	800ce4a <MIDI_DataRx+0x72>
 800ce20:	2bf0      	cmp	r3, #240	; 0xf0
 800ce22:	d115      	bne.n	800ce50 <MIDI_DataRx+0x78>
  case 0xE0:
	  //data = b2;
	  //		bend = data;
	  break;
  case 0xF0: {
	  if((b1 == 0x7E) && (b2 == 0x7F)) {
 800ce24:	7bbb      	ldrb	r3, [r7, #14]
 800ce26:	2b7e      	cmp	r3, #126	; 0x7e
 800ce28:	d111      	bne.n	800ce4e <MIDI_DataRx+0x76>
 800ce2a:	7b7b      	ldrb	r3, [r7, #13]
 800ce2c:	2b7f      	cmp	r3, #127	; 0x7f
 800ce2e:	d10e      	bne.n	800ce4e <MIDI_DataRx+0x76>
		  MIDI_DataTx(SysexID, 15);
 800ce30:	210f      	movs	r1, #15
 800ce32:	480a      	ldr	r0, [pc, #40]	; (800ce5c <MIDI_DataRx+0x84>)
 800ce34:	f000 f814 	bl	800ce60 <MIDI_DataTx>
	  }
	  break;
 800ce38:	e009      	b.n	800ce4e <MIDI_DataRx+0x76>
	  break;
 800ce3a:	bf00      	nop
 800ce3c:	e008      	b.n	800ce50 <MIDI_DataRx+0x78>
	  break;
 800ce3e:	bf00      	nop
 800ce40:	e006      	b.n	800ce50 <MIDI_DataRx+0x78>
	  break;
 800ce42:	bf00      	nop
 800ce44:	e004      	b.n	800ce50 <MIDI_DataRx+0x78>
	  break;
 800ce46:	bf00      	nop
 800ce48:	e002      	b.n	800ce50 <MIDI_DataRx+0x78>
	  break;
 800ce4a:	bf00      	nop
 800ce4c:	e000      	b.n	800ce50 <MIDI_DataRx+0x78>
	  break;
 800ce4e:	bf00      	nop
  }
  }
  return 0;
 800ce50:	2300      	movs	r3, #0
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3710      	adds	r7, #16
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	2000025c 	.word	0x2000025c

0800ce60 <MIDI_DataTx>:

uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b084      	sub	sp, #16
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	460b      	mov	r3, r1
 800ce6a:	807b      	strh	r3, [r7, #2]
  uint32_t i = 0;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	60fb      	str	r3, [r7, #12]
  while (i < length) {
 800ce70:	e017      	b.n	800cea2 <MIDI_DataTx+0x42>
    APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	441a      	add	r2, r3
 800ce78:	4b0f      	ldr	r3, [pc, #60]	; (800ceb8 <MIDI_DataTx+0x58>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	7811      	ldrb	r1, [r2, #0]
 800ce7e:	4a0f      	ldr	r2, [pc, #60]	; (800cebc <MIDI_DataTx+0x5c>)
 800ce80:	54d1      	strb	r1, [r2, r3]
    APP_Rx_ptr_in++;
 800ce82:	4b0d      	ldr	r3, [pc, #52]	; (800ceb8 <MIDI_DataTx+0x58>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	3301      	adds	r3, #1
 800ce88:	4a0b      	ldr	r2, [pc, #44]	; (800ceb8 <MIDI_DataTx+0x58>)
 800ce8a:	6013      	str	r3, [r2, #0]
    i++;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	3301      	adds	r3, #1
 800ce90:	60fb      	str	r3, [r7, #12]
    if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 800ce92:	4b09      	ldr	r3, [pc, #36]	; (800ceb8 <MIDI_DataTx+0x58>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce9a:	d102      	bne.n	800cea2 <MIDI_DataTx+0x42>
      APP_Rx_ptr_in = 0;
 800ce9c:	4b06      	ldr	r3, [pc, #24]	; (800ceb8 <MIDI_DataTx+0x58>)
 800ce9e:	2200      	movs	r2, #0
 800cea0:	601a      	str	r2, [r3, #0]
  while (i < length) {
 800cea2:	887b      	ldrh	r3, [r7, #2]
 800cea4:	68fa      	ldr	r2, [r7, #12]
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d3e3      	bcc.n	800ce72 <MIDI_DataTx+0x12>
    }
  }
  USBD_MIDI_SendPacket();
 800ceaa:	f7fe fc51 	bl	800b750 <USBD_MIDI_SendPacket>
  return USBD_OK;
 800ceae:	2300      	movs	r3, #0
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3710      	adds	r7, #16
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	200003a4 	.word	0x200003a4
 800cebc:	20000900 	.word	0x20000900

0800cec0 <MIDI_SendBuffer>:

uint16_t MIDI_SendBuffer(uint8_t *msg, uint16_t length){
 800cec0:	b480      	push	{r7}
 800cec2:	b085      	sub	sp, #20
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	460b      	mov	r3, r1
 800ceca:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800cecc:	2300      	movs	r3, #0
 800cece:	60fb      	str	r3, [r7, #12]
	while (i < length) {
 800ced0:	e017      	b.n	800cf02 <MIDI_SendBuffer+0x42>
		APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	441a      	add	r2, r3
 800ced8:	4b11      	ldr	r3, [pc, #68]	; (800cf20 <MIDI_SendBuffer+0x60>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	7811      	ldrb	r1, [r2, #0]
 800cede:	4a11      	ldr	r2, [pc, #68]	; (800cf24 <MIDI_SendBuffer+0x64>)
 800cee0:	54d1      	strb	r1, [r2, r3]
		APP_Rx_ptr_in++;
 800cee2:	4b0f      	ldr	r3, [pc, #60]	; (800cf20 <MIDI_SendBuffer+0x60>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	3301      	adds	r3, #1
 800cee8:	4a0d      	ldr	r2, [pc, #52]	; (800cf20 <MIDI_SendBuffer+0x60>)
 800ceea:	6013      	str	r3, [r2, #0]
		i++;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	3301      	adds	r3, #1
 800cef0:	60fb      	str	r3, [r7, #12]
		if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 800cef2:	4b0b      	ldr	r3, [pc, #44]	; (800cf20 <MIDI_SendBuffer+0x60>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cefa:	d102      	bne.n	800cf02 <MIDI_SendBuffer+0x42>
			APP_Rx_ptr_in = 0;
 800cefc:	4b08      	ldr	r3, [pc, #32]	; (800cf20 <MIDI_SendBuffer+0x60>)
 800cefe:	2200      	movs	r2, #0
 800cf00:	601a      	str	r2, [r3, #0]
	while (i < length) {
 800cf02:	887b      	ldrh	r3, [r7, #2]
 800cf04:	68fa      	ldr	r2, [r7, #12]
 800cf06:	429a      	cmp	r2, r3
 800cf08:	d3e3      	bcc.n	800ced2 <MIDI_SendBuffer+0x12>
		}
	}
	flag_sendMidi = 1;
 800cf0a:	4b07      	ldr	r3, [pc, #28]	; (800cf28 <MIDI_SendBuffer+0x68>)
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 800cf10:	2300      	movs	r3, #0
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3714      	adds	r7, #20
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr
 800cf1e:	bf00      	nop
 800cf20:	200003a4 	.word	0x200003a4
 800cf24:	20000900 	.word	0x20000900
 800cf28:	200003b2 	.word	0x200003b2

0800cf2c <MIDI_SendCheck>:

void MIDI_SendCheck(void){
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	af00      	add	r7, sp, #0
	if (flag_sendMidi != 0){
 800cf30:	4b07      	ldr	r3, [pc, #28]	; (800cf50 <MIDI_SendCheck+0x24>)
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d008      	beq.n	800cf4a <MIDI_SendCheck+0x1e>
		if (USB_Tx_State == 0){
 800cf38:	4b06      	ldr	r3, [pc, #24]	; (800cf54 <MIDI_SendCheck+0x28>)
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d104      	bne.n	800cf4a <MIDI_SendCheck+0x1e>
			USBD_MIDI_SendPacket();
 800cf40:	f7fe fc06 	bl	800b750 <USBD_MIDI_SendPacket>
			flag_sendMidi = 0;
 800cf44:	4b02      	ldr	r3, [pc, #8]	; (800cf50 <MIDI_SendCheck+0x24>)
 800cf46:	2200      	movs	r2, #0
 800cf48:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800cf4a:	bf00      	nop
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	200003b2 	.word	0x200003b2
 800cf54:	200003b0 	.word	0x200003b0

0800cf58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b08a      	sub	sp, #40	; 0x28
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf60:	f107 0314 	add.w	r3, r7, #20
 800cf64:	2200      	movs	r2, #0
 800cf66:	601a      	str	r2, [r3, #0]
 800cf68:	605a      	str	r2, [r3, #4]
 800cf6a:	609a      	str	r2, [r3, #8]
 800cf6c:	60da      	str	r2, [r3, #12]
 800cf6e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf78:	d13a      	bne.n	800cff0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	613b      	str	r3, [r7, #16]
 800cf7e:	4b1e      	ldr	r3, [pc, #120]	; (800cff8 <HAL_PCD_MspInit+0xa0>)
 800cf80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf82:	4a1d      	ldr	r2, [pc, #116]	; (800cff8 <HAL_PCD_MspInit+0xa0>)
 800cf84:	f043 0301 	orr.w	r3, r3, #1
 800cf88:	6313      	str	r3, [r2, #48]	; 0x30
 800cf8a:	4b1b      	ldr	r3, [pc, #108]	; (800cff8 <HAL_PCD_MspInit+0xa0>)
 800cf8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf8e:	f003 0301 	and.w	r3, r3, #1
 800cf92:	613b      	str	r3, [r7, #16]
 800cf94:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cf96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cf9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf9c:	2302      	movs	r3, #2
 800cf9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cfa4:	2303      	movs	r3, #3
 800cfa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cfa8:	230a      	movs	r3, #10
 800cfaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cfac:	f107 0314 	add.w	r3, r7, #20
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	4812      	ldr	r0, [pc, #72]	; (800cffc <HAL_PCD_MspInit+0xa4>)
 800cfb4:	f7f6 fdb4 	bl	8003b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cfb8:	4b0f      	ldr	r3, [pc, #60]	; (800cff8 <HAL_PCD_MspInit+0xa0>)
 800cfba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfbc:	4a0e      	ldr	r2, [pc, #56]	; (800cff8 <HAL_PCD_MspInit+0xa0>)
 800cfbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfc2:	6353      	str	r3, [r2, #52]	; 0x34
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	60fb      	str	r3, [r7, #12]
 800cfc8:	4b0b      	ldr	r3, [pc, #44]	; (800cff8 <HAL_PCD_MspInit+0xa0>)
 800cfca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfcc:	4a0a      	ldr	r2, [pc, #40]	; (800cff8 <HAL_PCD_MspInit+0xa0>)
 800cfce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cfd2:	6453      	str	r3, [r2, #68]	; 0x44
 800cfd4:	4b08      	ldr	r3, [pc, #32]	; (800cff8 <HAL_PCD_MspInit+0xa0>)
 800cfd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfdc:	60fb      	str	r3, [r7, #12]
 800cfde:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	2100      	movs	r1, #0
 800cfe4:	2043      	movs	r0, #67	; 0x43
 800cfe6:	f7f6 fc2c 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cfea:	2043      	movs	r0, #67	; 0x43
 800cfec:	f7f6 fc45 	bl	800387a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cff0:	bf00      	nop
 800cff2:	3728      	adds	r7, #40	; 0x28
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}
 800cff8:	40023800 	.word	0x40023800
 800cffc:	40020000 	.word	0x40020000

0800d000 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d014:	4619      	mov	r1, r3
 800d016:	4610      	mov	r0, r2
 800d018:	f7fe fcd3 	bl	800b9c2 <USBD_LL_SetupStage>
}
 800d01c:	bf00      	nop
 800d01e:	3708      	adds	r7, #8
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	460b      	mov	r3, r1
 800d02e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d036:	78fa      	ldrb	r2, [r7, #3]
 800d038:	6879      	ldr	r1, [r7, #4]
 800d03a:	4613      	mov	r3, r2
 800d03c:	00db      	lsls	r3, r3, #3
 800d03e:	1a9b      	subs	r3, r3, r2
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	440b      	add	r3, r1
 800d044:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	78fb      	ldrb	r3, [r7, #3]
 800d04c:	4619      	mov	r1, r3
 800d04e:	f7fe fd0b 	bl	800ba68 <USBD_LL_DataOutStage>
}
 800d052:	bf00      	nop
 800d054:	3708      	adds	r7, #8
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}

0800d05a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d05a:	b580      	push	{r7, lr}
 800d05c:	b082      	sub	sp, #8
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
 800d062:	460b      	mov	r3, r1
 800d064:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d06c:	78fa      	ldrb	r2, [r7, #3]
 800d06e:	6879      	ldr	r1, [r7, #4]
 800d070:	4613      	mov	r3, r2
 800d072:	00db      	lsls	r3, r3, #3
 800d074:	1a9b      	subs	r3, r3, r2
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	440b      	add	r3, r1
 800d07a:	3348      	adds	r3, #72	; 0x48
 800d07c:	681a      	ldr	r2, [r3, #0]
 800d07e:	78fb      	ldrb	r3, [r7, #3]
 800d080:	4619      	mov	r1, r3
 800d082:	f7fe fd54 	bl	800bb2e <USBD_LL_DataInStage>
}
 800d086:	bf00      	nop
 800d088:	3708      	adds	r7, #8
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}

0800d08e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d08e:	b580      	push	{r7, lr}
 800d090:	b082      	sub	sp, #8
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7fe fe58 	bl	800bd52 <USBD_LL_SOF>
}
 800d0a2:	bf00      	nop
 800d0a4:	3708      	adds	r7, #8
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}

0800d0aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0aa:	b580      	push	{r7, lr}
 800d0ac:	b084      	sub	sp, #16
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	68db      	ldr	r3, [r3, #12]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d102      	bne.n	800d0c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	73fb      	strb	r3, [r7, #15]
 800d0c2:	e008      	b.n	800d0d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	2b02      	cmp	r3, #2
 800d0ca:	d102      	bne.n	800d0d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	73fb      	strb	r3, [r7, #15]
 800d0d0:	e001      	b.n	800d0d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d0d2:	f7f5 f86b 	bl	80021ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d0dc:	7bfa      	ldrb	r2, [r7, #15]
 800d0de:	4611      	mov	r1, r2
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7fe fdfb 	bl	800bcdc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f7fe fdb4 	bl	800bc5a <USBD_LL_Reset>
}
 800d0f2:	bf00      	nop
 800d0f4:	3710      	adds	r7, #16
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
	...

0800d0fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fe fdf6 	bl	800bcfc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	6812      	ldr	r2, [r2, #0]
 800d11e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d122:	f043 0301 	orr.w	r3, r3, #1
 800d126:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6a1b      	ldr	r3, [r3, #32]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d005      	beq.n	800d13c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d130:	4b04      	ldr	r3, [pc, #16]	; (800d144 <HAL_PCD_SuspendCallback+0x48>)
 800d132:	691b      	ldr	r3, [r3, #16]
 800d134:	4a03      	ldr	r2, [pc, #12]	; (800d144 <HAL_PCD_SuspendCallback+0x48>)
 800d136:	f043 0306 	orr.w	r3, r3, #6
 800d13a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d13c:	bf00      	nop
 800d13e:	3708      	adds	r7, #8
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}
 800d144:	e000ed00 	.word	0xe000ed00

0800d148 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d156:	4618      	mov	r0, r3
 800d158:	f7fe fde5 	bl	800bd26 <USBD_LL_Resume>
}
 800d15c:	bf00      	nop
 800d15e:	3708      	adds	r7, #8
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b082      	sub	sp, #8
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	460b      	mov	r3, r1
 800d16e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d176:	78fa      	ldrb	r2, [r7, #3]
 800d178:	4611      	mov	r1, r2
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7fe fe10 	bl	800bda0 <USBD_LL_IsoOUTIncomplete>
}
 800d180:	bf00      	nop
 800d182:	3708      	adds	r7, #8
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}

0800d188 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	460b      	mov	r3, r1
 800d192:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d19a:	78fa      	ldrb	r2, [r7, #3]
 800d19c:	4611      	mov	r1, r2
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7fe fdf1 	bl	800bd86 <USBD_LL_IsoINIncomplete>
}
 800d1a4:	bf00      	nop
 800d1a6:	3708      	adds	r7, #8
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7fe fdfd 	bl	800bdba <USBD_LL_DevConnected>
}
 800d1c0:	bf00      	nop
 800d1c2:	3708      	adds	r7, #8
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7fe fdfa 	bl	800bdd0 <USBD_LL_DevDisconnected>
}
 800d1dc:	bf00      	nop
 800d1de:	3708      	adds	r7, #8
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d13c      	bne.n	800d26e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d1f4:	4a20      	ldr	r2, [pc, #128]	; (800d278 <USBD_LL_Init+0x94>)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	4a1e      	ldr	r2, [pc, #120]	; (800d278 <USBD_LL_Init+0x94>)
 800d200:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d204:	4b1c      	ldr	r3, [pc, #112]	; (800d278 <USBD_LL_Init+0x94>)
 800d206:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d20a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d20c:	4b1a      	ldr	r3, [pc, #104]	; (800d278 <USBD_LL_Init+0x94>)
 800d20e:	2204      	movs	r2, #4
 800d210:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d212:	4b19      	ldr	r3, [pc, #100]	; (800d278 <USBD_LL_Init+0x94>)
 800d214:	2202      	movs	r2, #2
 800d216:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d218:	4b17      	ldr	r3, [pc, #92]	; (800d278 <USBD_LL_Init+0x94>)
 800d21a:	2200      	movs	r2, #0
 800d21c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d21e:	4b16      	ldr	r3, [pc, #88]	; (800d278 <USBD_LL_Init+0x94>)
 800d220:	2202      	movs	r2, #2
 800d222:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d224:	4b14      	ldr	r3, [pc, #80]	; (800d278 <USBD_LL_Init+0x94>)
 800d226:	2200      	movs	r2, #0
 800d228:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d22a:	4b13      	ldr	r3, [pc, #76]	; (800d278 <USBD_LL_Init+0x94>)
 800d22c:	2200      	movs	r2, #0
 800d22e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d230:	4b11      	ldr	r3, [pc, #68]	; (800d278 <USBD_LL_Init+0x94>)
 800d232:	2200      	movs	r2, #0
 800d234:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d236:	4b10      	ldr	r3, [pc, #64]	; (800d278 <USBD_LL_Init+0x94>)
 800d238:	2200      	movs	r2, #0
 800d23a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d23c:	4b0e      	ldr	r3, [pc, #56]	; (800d278 <USBD_LL_Init+0x94>)
 800d23e:	2200      	movs	r2, #0
 800d240:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d242:	480d      	ldr	r0, [pc, #52]	; (800d278 <USBD_LL_Init+0x94>)
 800d244:	f7f9 f805 	bl	8006252 <HAL_PCD_Init>
 800d248:	4603      	mov	r3, r0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d001      	beq.n	800d252 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d24e:	f7f4 ffad 	bl	80021ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d252:	2180      	movs	r1, #128	; 0x80
 800d254:	4808      	ldr	r0, [pc, #32]	; (800d278 <USBD_LL_Init+0x94>)
 800d256:	f7fa f962 	bl	800751e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d25a:	2240      	movs	r2, #64	; 0x40
 800d25c:	2100      	movs	r1, #0
 800d25e:	4806      	ldr	r0, [pc, #24]	; (800d278 <USBD_LL_Init+0x94>)
 800d260:	f7fa f916 	bl	8007490 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d264:	2280      	movs	r2, #128	; 0x80
 800d266:	2101      	movs	r1, #1
 800d268:	4803      	ldr	r0, [pc, #12]	; (800d278 <USBD_LL_Init+0x94>)
 800d26a:	f7fa f911 	bl	8007490 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d26e:	2300      	movs	r3, #0
}
 800d270:	4618      	mov	r0, r3
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}
 800d278:	20000ed0 	.word	0x20000ed0

0800d27c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b084      	sub	sp, #16
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d284:	2300      	movs	r3, #0
 800d286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d288:	2300      	movs	r3, #0
 800d28a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d292:	4618      	mov	r0, r3
 800d294:	f7f9 f8fa 	bl	800648c <HAL_PCD_Start>
 800d298:	4603      	mov	r3, r0
 800d29a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d29c:	7bfb      	ldrb	r3, [r7, #15]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f000 f92a 	bl	800d4f8 <USBD_Get_USB_Status>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b084      	sub	sp, #16
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
 800d2ba:	4608      	mov	r0, r1
 800d2bc:	4611      	mov	r1, r2
 800d2be:	461a      	mov	r2, r3
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	70fb      	strb	r3, [r7, #3]
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	70bb      	strb	r3, [r7, #2]
 800d2c8:	4613      	mov	r3, r2
 800d2ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d2da:	78bb      	ldrb	r3, [r7, #2]
 800d2dc:	883a      	ldrh	r2, [r7, #0]
 800d2de:	78f9      	ldrb	r1, [r7, #3]
 800d2e0:	f7f9 fcde 	bl	8006ca0 <HAL_PCD_EP_Open>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2e8:	7bfb      	ldrb	r3, [r7, #15]
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f000 f904 	bl	800d4f8 <USBD_Get_USB_Status>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3710      	adds	r7, #16
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}

0800d2fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2fe:	b580      	push	{r7, lr}
 800d300:	b084      	sub	sp, #16
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
 800d306:	460b      	mov	r3, r1
 800d308:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d30a:	2300      	movs	r3, #0
 800d30c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d30e:	2300      	movs	r3, #0
 800d310:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d318:	78fa      	ldrb	r2, [r7, #3]
 800d31a:	4611      	mov	r1, r2
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7f9 fd27 	bl	8006d70 <HAL_PCD_EP_Close>
 800d322:	4603      	mov	r3, r0
 800d324:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d326:	7bfb      	ldrb	r3, [r7, #15]
 800d328:	4618      	mov	r0, r3
 800d32a:	f000 f8e5 	bl	800d4f8 <USBD_Get_USB_Status>
 800d32e:	4603      	mov	r3, r0
 800d330:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d332:	7bbb      	ldrb	r3, [r7, #14]
}
 800d334:	4618      	mov	r0, r3
 800d336:	3710      	adds	r7, #16
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	460b      	mov	r3, r1
 800d346:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d348:	2300      	movs	r3, #0
 800d34a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d34c:	2300      	movs	r3, #0
 800d34e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d356:	78fa      	ldrb	r2, [r7, #3]
 800d358:	4611      	mov	r1, r2
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7f9 fdff 	bl	8006f5e <HAL_PCD_EP_SetStall>
 800d360:	4603      	mov	r3, r0
 800d362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d364:	7bfb      	ldrb	r3, [r7, #15]
 800d366:	4618      	mov	r0, r3
 800d368:	f000 f8c6 	bl	800d4f8 <USBD_Get_USB_Status>
 800d36c:	4603      	mov	r3, r0
 800d36e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d370:	7bbb      	ldrb	r3, [r7, #14]
}
 800d372:	4618      	mov	r0, r3
 800d374:	3710      	adds	r7, #16
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b084      	sub	sp, #16
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
 800d382:	460b      	mov	r3, r1
 800d384:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d386:	2300      	movs	r3, #0
 800d388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d38a:	2300      	movs	r3, #0
 800d38c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d394:	78fa      	ldrb	r2, [r7, #3]
 800d396:	4611      	mov	r1, r2
 800d398:	4618      	mov	r0, r3
 800d39a:	f7f9 fe44 	bl	8007026 <HAL_PCD_EP_ClrStall>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3a2:	7bfb      	ldrb	r3, [r7, #15]
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f000 f8a7 	bl	800d4f8 <USBD_Get_USB_Status>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3710      	adds	r7, #16
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b085      	sub	sp, #20
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	460b      	mov	r3, r1
 800d3c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d3ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d3cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	da0b      	bge.n	800d3ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d3d4:	78fb      	ldrb	r3, [r7, #3]
 800d3d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3da:	68f9      	ldr	r1, [r7, #12]
 800d3dc:	4613      	mov	r3, r2
 800d3de:	00db      	lsls	r3, r3, #3
 800d3e0:	1a9b      	subs	r3, r3, r2
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	440b      	add	r3, r1
 800d3e6:	333e      	adds	r3, #62	; 0x3e
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	e00b      	b.n	800d404 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d3ec:	78fb      	ldrb	r3, [r7, #3]
 800d3ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3f2:	68f9      	ldr	r1, [r7, #12]
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	00db      	lsls	r3, r3, #3
 800d3f8:	1a9b      	subs	r3, r3, r2
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	440b      	add	r3, r1
 800d3fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d402:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d404:	4618      	mov	r0, r3
 800d406:	3714      	adds	r7, #20
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr

0800d410 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b084      	sub	sp, #16
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	460b      	mov	r3, r1
 800d41a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d41c:	2300      	movs	r3, #0
 800d41e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d420:	2300      	movs	r3, #0
 800d422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d42a:	78fa      	ldrb	r2, [r7, #3]
 800d42c:	4611      	mov	r1, r2
 800d42e:	4618      	mov	r0, r3
 800d430:	f7f9 fc11 	bl	8006c56 <HAL_PCD_SetAddress>
 800d434:	4603      	mov	r3, r0
 800d436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d438:	7bfb      	ldrb	r3, [r7, #15]
 800d43a:	4618      	mov	r0, r3
 800d43c:	f000 f85c 	bl	800d4f8 <USBD_Get_USB_Status>
 800d440:	4603      	mov	r3, r0
 800d442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d444:	7bbb      	ldrb	r3, [r7, #14]
}
 800d446:	4618      	mov	r0, r3
 800d448:	3710      	adds	r7, #16
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}

0800d44e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d44e:	b580      	push	{r7, lr}
 800d450:	b086      	sub	sp, #24
 800d452:	af00      	add	r7, sp, #0
 800d454:	60f8      	str	r0, [r7, #12]
 800d456:	607a      	str	r2, [r7, #4]
 800d458:	603b      	str	r3, [r7, #0]
 800d45a:	460b      	mov	r3, r1
 800d45c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d45e:	2300      	movs	r3, #0
 800d460:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d462:	2300      	movs	r3, #0
 800d464:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d46c:	7af9      	ldrb	r1, [r7, #11]
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	687a      	ldr	r2, [r7, #4]
 800d472:	f7f9 fd2a 	bl	8006eca <HAL_PCD_EP_Transmit>
 800d476:	4603      	mov	r3, r0
 800d478:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d47a:	7dfb      	ldrb	r3, [r7, #23]
 800d47c:	4618      	mov	r0, r3
 800d47e:	f000 f83b 	bl	800d4f8 <USBD_Get_USB_Status>
 800d482:	4603      	mov	r3, r0
 800d484:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d486:	7dbb      	ldrb	r3, [r7, #22]
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3718      	adds	r7, #24
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b086      	sub	sp, #24
 800d494:	af00      	add	r7, sp, #0
 800d496:	60f8      	str	r0, [r7, #12]
 800d498:	607a      	str	r2, [r7, #4]
 800d49a:	603b      	str	r3, [r7, #0]
 800d49c:	460b      	mov	r3, r1
 800d49e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d4ae:	7af9      	ldrb	r1, [r7, #11]
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	f7f9 fca6 	bl	8006e04 <HAL_PCD_EP_Receive>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4bc:	7dfb      	ldrb	r3, [r7, #23]
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f000 f81a 	bl	800d4f8 <USBD_Get_USB_Status>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d4c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3718      	adds	r7, #24
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b082      	sub	sp, #8
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
 800d4da:	460b      	mov	r3, r1
 800d4dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d4e4:	78fa      	ldrb	r2, [r7, #3]
 800d4e6:	4611      	mov	r1, r2
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7f9 fcd6 	bl	8006e9a <HAL_PCD_EP_GetRxCount>
 800d4ee:	4603      	mov	r3, r0
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3708      	adds	r7, #8
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b085      	sub	sp, #20
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	4603      	mov	r3, r0
 800d500:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d502:	2300      	movs	r3, #0
 800d504:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d506:	79fb      	ldrb	r3, [r7, #7]
 800d508:	2b03      	cmp	r3, #3
 800d50a:	d817      	bhi.n	800d53c <USBD_Get_USB_Status+0x44>
 800d50c:	a201      	add	r2, pc, #4	; (adr r2, 800d514 <USBD_Get_USB_Status+0x1c>)
 800d50e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d512:	bf00      	nop
 800d514:	0800d525 	.word	0x0800d525
 800d518:	0800d52b 	.word	0x0800d52b
 800d51c:	0800d531 	.word	0x0800d531
 800d520:	0800d537 	.word	0x0800d537
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d524:	2300      	movs	r3, #0
 800d526:	73fb      	strb	r3, [r7, #15]
    break;
 800d528:	e00b      	b.n	800d542 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d52a:	2303      	movs	r3, #3
 800d52c:	73fb      	strb	r3, [r7, #15]
    break;
 800d52e:	e008      	b.n	800d542 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d530:	2301      	movs	r3, #1
 800d532:	73fb      	strb	r3, [r7, #15]
    break;
 800d534:	e005      	b.n	800d542 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d536:	2303      	movs	r3, #3
 800d538:	73fb      	strb	r3, [r7, #15]
    break;
 800d53a:	e002      	b.n	800d542 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d53c:	2303      	movs	r3, #3
 800d53e:	73fb      	strb	r3, [r7, #15]
    break;
 800d540:	bf00      	nop
  }
  return usb_status;
 800d542:	7bfb      	ldrb	r3, [r7, #15]
}
 800d544:	4618      	mov	r0, r3
 800d546:	3714      	adds	r7, #20
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr

0800d550 <__errno>:
 800d550:	4b01      	ldr	r3, [pc, #4]	; (800d558 <__errno+0x8>)
 800d552:	6818      	ldr	r0, [r3, #0]
 800d554:	4770      	bx	lr
 800d556:	bf00      	nop
 800d558:	20000274 	.word	0x20000274

0800d55c <__libc_init_array>:
 800d55c:	b570      	push	{r4, r5, r6, lr}
 800d55e:	4e0d      	ldr	r6, [pc, #52]	; (800d594 <__libc_init_array+0x38>)
 800d560:	4c0d      	ldr	r4, [pc, #52]	; (800d598 <__libc_init_array+0x3c>)
 800d562:	1ba4      	subs	r4, r4, r6
 800d564:	10a4      	asrs	r4, r4, #2
 800d566:	2500      	movs	r5, #0
 800d568:	42a5      	cmp	r5, r4
 800d56a:	d109      	bne.n	800d580 <__libc_init_array+0x24>
 800d56c:	4e0b      	ldr	r6, [pc, #44]	; (800d59c <__libc_init_array+0x40>)
 800d56e:	4c0c      	ldr	r4, [pc, #48]	; (800d5a0 <__libc_init_array+0x44>)
 800d570:	f000 f8ea 	bl	800d748 <_init>
 800d574:	1ba4      	subs	r4, r4, r6
 800d576:	10a4      	asrs	r4, r4, #2
 800d578:	2500      	movs	r5, #0
 800d57a:	42a5      	cmp	r5, r4
 800d57c:	d105      	bne.n	800d58a <__libc_init_array+0x2e>
 800d57e:	bd70      	pop	{r4, r5, r6, pc}
 800d580:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d584:	4798      	blx	r3
 800d586:	3501      	adds	r5, #1
 800d588:	e7ee      	b.n	800d568 <__libc_init_array+0xc>
 800d58a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d58e:	4798      	blx	r3
 800d590:	3501      	adds	r5, #1
 800d592:	e7f2      	b.n	800d57a <__libc_init_array+0x1e>
 800d594:	08041688 	.word	0x08041688
 800d598:	08041688 	.word	0x08041688
 800d59c:	08041688 	.word	0x08041688
 800d5a0:	0804168c 	.word	0x0804168c

0800d5a4 <malloc>:
 800d5a4:	4b02      	ldr	r3, [pc, #8]	; (800d5b0 <malloc+0xc>)
 800d5a6:	4601      	mov	r1, r0
 800d5a8:	6818      	ldr	r0, [r3, #0]
 800d5aa:	f000 b861 	b.w	800d670 <_malloc_r>
 800d5ae:	bf00      	nop
 800d5b0:	20000274 	.word	0x20000274

0800d5b4 <free>:
 800d5b4:	4b02      	ldr	r3, [pc, #8]	; (800d5c0 <free+0xc>)
 800d5b6:	4601      	mov	r1, r0
 800d5b8:	6818      	ldr	r0, [r3, #0]
 800d5ba:	f000 b80b 	b.w	800d5d4 <_free_r>
 800d5be:	bf00      	nop
 800d5c0:	20000274 	.word	0x20000274

0800d5c4 <memset>:
 800d5c4:	4402      	add	r2, r0
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d100      	bne.n	800d5ce <memset+0xa>
 800d5cc:	4770      	bx	lr
 800d5ce:	f803 1b01 	strb.w	r1, [r3], #1
 800d5d2:	e7f9      	b.n	800d5c8 <memset+0x4>

0800d5d4 <_free_r>:
 800d5d4:	b538      	push	{r3, r4, r5, lr}
 800d5d6:	4605      	mov	r5, r0
 800d5d8:	2900      	cmp	r1, #0
 800d5da:	d045      	beq.n	800d668 <_free_r+0x94>
 800d5dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5e0:	1f0c      	subs	r4, r1, #4
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	bfb8      	it	lt
 800d5e6:	18e4      	addlt	r4, r4, r3
 800d5e8:	f000 f8ac 	bl	800d744 <__malloc_lock>
 800d5ec:	4a1f      	ldr	r2, [pc, #124]	; (800d66c <_free_r+0x98>)
 800d5ee:	6813      	ldr	r3, [r2, #0]
 800d5f0:	4610      	mov	r0, r2
 800d5f2:	b933      	cbnz	r3, 800d602 <_free_r+0x2e>
 800d5f4:	6063      	str	r3, [r4, #4]
 800d5f6:	6014      	str	r4, [r2, #0]
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5fe:	f000 b8a2 	b.w	800d746 <__malloc_unlock>
 800d602:	42a3      	cmp	r3, r4
 800d604:	d90c      	bls.n	800d620 <_free_r+0x4c>
 800d606:	6821      	ldr	r1, [r4, #0]
 800d608:	1862      	adds	r2, r4, r1
 800d60a:	4293      	cmp	r3, r2
 800d60c:	bf04      	itt	eq
 800d60e:	681a      	ldreq	r2, [r3, #0]
 800d610:	685b      	ldreq	r3, [r3, #4]
 800d612:	6063      	str	r3, [r4, #4]
 800d614:	bf04      	itt	eq
 800d616:	1852      	addeq	r2, r2, r1
 800d618:	6022      	streq	r2, [r4, #0]
 800d61a:	6004      	str	r4, [r0, #0]
 800d61c:	e7ec      	b.n	800d5f8 <_free_r+0x24>
 800d61e:	4613      	mov	r3, r2
 800d620:	685a      	ldr	r2, [r3, #4]
 800d622:	b10a      	cbz	r2, 800d628 <_free_r+0x54>
 800d624:	42a2      	cmp	r2, r4
 800d626:	d9fa      	bls.n	800d61e <_free_r+0x4a>
 800d628:	6819      	ldr	r1, [r3, #0]
 800d62a:	1858      	adds	r0, r3, r1
 800d62c:	42a0      	cmp	r0, r4
 800d62e:	d10b      	bne.n	800d648 <_free_r+0x74>
 800d630:	6820      	ldr	r0, [r4, #0]
 800d632:	4401      	add	r1, r0
 800d634:	1858      	adds	r0, r3, r1
 800d636:	4282      	cmp	r2, r0
 800d638:	6019      	str	r1, [r3, #0]
 800d63a:	d1dd      	bne.n	800d5f8 <_free_r+0x24>
 800d63c:	6810      	ldr	r0, [r2, #0]
 800d63e:	6852      	ldr	r2, [r2, #4]
 800d640:	605a      	str	r2, [r3, #4]
 800d642:	4401      	add	r1, r0
 800d644:	6019      	str	r1, [r3, #0]
 800d646:	e7d7      	b.n	800d5f8 <_free_r+0x24>
 800d648:	d902      	bls.n	800d650 <_free_r+0x7c>
 800d64a:	230c      	movs	r3, #12
 800d64c:	602b      	str	r3, [r5, #0]
 800d64e:	e7d3      	b.n	800d5f8 <_free_r+0x24>
 800d650:	6820      	ldr	r0, [r4, #0]
 800d652:	1821      	adds	r1, r4, r0
 800d654:	428a      	cmp	r2, r1
 800d656:	bf04      	itt	eq
 800d658:	6811      	ldreq	r1, [r2, #0]
 800d65a:	6852      	ldreq	r2, [r2, #4]
 800d65c:	6062      	str	r2, [r4, #4]
 800d65e:	bf04      	itt	eq
 800d660:	1809      	addeq	r1, r1, r0
 800d662:	6021      	streq	r1, [r4, #0]
 800d664:	605c      	str	r4, [r3, #4]
 800d666:	e7c7      	b.n	800d5f8 <_free_r+0x24>
 800d668:	bd38      	pop	{r3, r4, r5, pc}
 800d66a:	bf00      	nop
 800d66c:	200003b4 	.word	0x200003b4

0800d670 <_malloc_r>:
 800d670:	b570      	push	{r4, r5, r6, lr}
 800d672:	1ccd      	adds	r5, r1, #3
 800d674:	f025 0503 	bic.w	r5, r5, #3
 800d678:	3508      	adds	r5, #8
 800d67a:	2d0c      	cmp	r5, #12
 800d67c:	bf38      	it	cc
 800d67e:	250c      	movcc	r5, #12
 800d680:	2d00      	cmp	r5, #0
 800d682:	4606      	mov	r6, r0
 800d684:	db01      	blt.n	800d68a <_malloc_r+0x1a>
 800d686:	42a9      	cmp	r1, r5
 800d688:	d903      	bls.n	800d692 <_malloc_r+0x22>
 800d68a:	230c      	movs	r3, #12
 800d68c:	6033      	str	r3, [r6, #0]
 800d68e:	2000      	movs	r0, #0
 800d690:	bd70      	pop	{r4, r5, r6, pc}
 800d692:	f000 f857 	bl	800d744 <__malloc_lock>
 800d696:	4a21      	ldr	r2, [pc, #132]	; (800d71c <_malloc_r+0xac>)
 800d698:	6814      	ldr	r4, [r2, #0]
 800d69a:	4621      	mov	r1, r4
 800d69c:	b991      	cbnz	r1, 800d6c4 <_malloc_r+0x54>
 800d69e:	4c20      	ldr	r4, [pc, #128]	; (800d720 <_malloc_r+0xb0>)
 800d6a0:	6823      	ldr	r3, [r4, #0]
 800d6a2:	b91b      	cbnz	r3, 800d6ac <_malloc_r+0x3c>
 800d6a4:	4630      	mov	r0, r6
 800d6a6:	f000 f83d 	bl	800d724 <_sbrk_r>
 800d6aa:	6020      	str	r0, [r4, #0]
 800d6ac:	4629      	mov	r1, r5
 800d6ae:	4630      	mov	r0, r6
 800d6b0:	f000 f838 	bl	800d724 <_sbrk_r>
 800d6b4:	1c43      	adds	r3, r0, #1
 800d6b6:	d124      	bne.n	800d702 <_malloc_r+0x92>
 800d6b8:	230c      	movs	r3, #12
 800d6ba:	6033      	str	r3, [r6, #0]
 800d6bc:	4630      	mov	r0, r6
 800d6be:	f000 f842 	bl	800d746 <__malloc_unlock>
 800d6c2:	e7e4      	b.n	800d68e <_malloc_r+0x1e>
 800d6c4:	680b      	ldr	r3, [r1, #0]
 800d6c6:	1b5b      	subs	r3, r3, r5
 800d6c8:	d418      	bmi.n	800d6fc <_malloc_r+0x8c>
 800d6ca:	2b0b      	cmp	r3, #11
 800d6cc:	d90f      	bls.n	800d6ee <_malloc_r+0x7e>
 800d6ce:	600b      	str	r3, [r1, #0]
 800d6d0:	50cd      	str	r5, [r1, r3]
 800d6d2:	18cc      	adds	r4, r1, r3
 800d6d4:	4630      	mov	r0, r6
 800d6d6:	f000 f836 	bl	800d746 <__malloc_unlock>
 800d6da:	f104 000b 	add.w	r0, r4, #11
 800d6de:	1d23      	adds	r3, r4, #4
 800d6e0:	f020 0007 	bic.w	r0, r0, #7
 800d6e4:	1ac3      	subs	r3, r0, r3
 800d6e6:	d0d3      	beq.n	800d690 <_malloc_r+0x20>
 800d6e8:	425a      	negs	r2, r3
 800d6ea:	50e2      	str	r2, [r4, r3]
 800d6ec:	e7d0      	b.n	800d690 <_malloc_r+0x20>
 800d6ee:	428c      	cmp	r4, r1
 800d6f0:	684b      	ldr	r3, [r1, #4]
 800d6f2:	bf16      	itet	ne
 800d6f4:	6063      	strne	r3, [r4, #4]
 800d6f6:	6013      	streq	r3, [r2, #0]
 800d6f8:	460c      	movne	r4, r1
 800d6fa:	e7eb      	b.n	800d6d4 <_malloc_r+0x64>
 800d6fc:	460c      	mov	r4, r1
 800d6fe:	6849      	ldr	r1, [r1, #4]
 800d700:	e7cc      	b.n	800d69c <_malloc_r+0x2c>
 800d702:	1cc4      	adds	r4, r0, #3
 800d704:	f024 0403 	bic.w	r4, r4, #3
 800d708:	42a0      	cmp	r0, r4
 800d70a:	d005      	beq.n	800d718 <_malloc_r+0xa8>
 800d70c:	1a21      	subs	r1, r4, r0
 800d70e:	4630      	mov	r0, r6
 800d710:	f000 f808 	bl	800d724 <_sbrk_r>
 800d714:	3001      	adds	r0, #1
 800d716:	d0cf      	beq.n	800d6b8 <_malloc_r+0x48>
 800d718:	6025      	str	r5, [r4, #0]
 800d71a:	e7db      	b.n	800d6d4 <_malloc_r+0x64>
 800d71c:	200003b4 	.word	0x200003b4
 800d720:	200003b8 	.word	0x200003b8

0800d724 <_sbrk_r>:
 800d724:	b538      	push	{r3, r4, r5, lr}
 800d726:	4c06      	ldr	r4, [pc, #24]	; (800d740 <_sbrk_r+0x1c>)
 800d728:	2300      	movs	r3, #0
 800d72a:	4605      	mov	r5, r0
 800d72c:	4608      	mov	r0, r1
 800d72e:	6023      	str	r3, [r4, #0]
 800d730:	f7f5 f802 	bl	8002738 <_sbrk>
 800d734:	1c43      	adds	r3, r0, #1
 800d736:	d102      	bne.n	800d73e <_sbrk_r+0x1a>
 800d738:	6823      	ldr	r3, [r4, #0]
 800d73a:	b103      	cbz	r3, 800d73e <_sbrk_r+0x1a>
 800d73c:	602b      	str	r3, [r5, #0]
 800d73e:	bd38      	pop	{r3, r4, r5, pc}
 800d740:	200012d8 	.word	0x200012d8

0800d744 <__malloc_lock>:
 800d744:	4770      	bx	lr

0800d746 <__malloc_unlock>:
 800d746:	4770      	bx	lr

0800d748 <_init>:
 800d748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d74a:	bf00      	nop
 800d74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d74e:	bc08      	pop	{r3}
 800d750:	469e      	mov	lr, r3
 800d752:	4770      	bx	lr

0800d754 <_fini>:
 800d754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d756:	bf00      	nop
 800d758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d75a:	bc08      	pop	{r3}
 800d75c:	469e      	mov	lr, r3
 800d75e:	4770      	bx	lr
