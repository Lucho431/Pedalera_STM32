
PEDALERA_beta_V04_STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00033f04  0800c748  0800c748  0001c748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804064c  0804064c  000602c4  2**0
                  CONTENTS
  4 .ARM          00000008  0804064c  0804064c  0005064c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08040654  08040654  000602c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08040654  08040654  00050654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08040658  08040658  00050658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0804065c  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fe4  200002c4  08040920  000602c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200012a8  08040920  000612a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000602c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002638e  00000000  00000000  000602f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005284  00000000  00000000  00086682  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c38  00000000  00000000  0008b908  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019c0  00000000  00000000  0008d540  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028562  00000000  00000000  0008ef00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ca5b  00000000  00000000  000b7462  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8fe6  00000000  00000000  000d3ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001acea3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000754c  00000000  00000000  001acf20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200002c4 	.word	0x200002c4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c730 	.word	0x0800c730

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200002c8 	.word	0x200002c8
 80001c4:	0800c730 	.word	0x0800c730

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <spi_74HC165_init>:
GPIO_TypeDef* portPL;
GPIO_TypeDef* portCE;
uint16_t pinPL, pinCE;


void spi_74HC165_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* PLport, uint16_t PLpin, GPIO_TypeDef* CEport, uint16_t CEpin){
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	4613      	mov	r3, r2
 80004d6:	80fb      	strh	r3, [r7, #6]

	spi_handler=hspi;
 80004d8:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <spi_74HC165_init+0x3c>)
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	6013      	str	r3, [r2, #0]

	portPL = PLport;
 80004de:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <spi_74HC165_init+0x40>)
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	6013      	str	r3, [r2, #0]
	pinPL = PLpin;
 80004e4:	4a09      	ldr	r2, [pc, #36]	; (800050c <spi_74HC165_init+0x44>)
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	8013      	strh	r3, [r2, #0]

	portCE = CEport;
 80004ea:	4a09      	ldr	r2, [pc, #36]	; (8000510 <spi_74HC165_init+0x48>)
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	6013      	str	r3, [r2, #0]
	pinCE = CEpin;
 80004f0:	4a08      	ldr	r2, [pc, #32]	; (8000514 <spi_74HC165_init+0x4c>)
 80004f2:	8b3b      	ldrh	r3, [r7, #24]
 80004f4:	8013      	strh	r3, [r2, #0]

}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000394 	.word	0x20000394
 8000508:	2000039c 	.word	0x2000039c
 800050c:	20000398 	.word	0x20000398
 8000510:	200003a4 	.word	0x200003a4
 8000514:	200003a0 	.word	0x200003a0

08000518 <spi_74HC165_receive>:


void spi_74HC165_receive (uint8_t* pdata, uint16_t sizeData){
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	807b      	strh	r3, [r7, #2]

	//carga paralela
	HAL_GPIO_WritePin(portPL, pinPL, 0);
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <spi_74HC165_receive+0x64>)
 8000526:	6818      	ldr	r0, [r3, #0]
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <spi_74HC165_receive+0x68>)
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	2200      	movs	r2, #0
 800052e:	4619      	mov	r1, r3
 8000530:	f002 feb2 	bl	8003298 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portPL, pinPL, 1);
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <spi_74HC165_receive+0x64>)
 8000536:	6818      	ldr	r0, [r3, #0]
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <spi_74HC165_receive+0x68>)
 800053a:	881b      	ldrh	r3, [r3, #0]
 800053c:	2201      	movs	r2, #1
 800053e:	4619      	mov	r1, r3
 8000540:	f002 feaa 	bl	8003298 <HAL_GPIO_WritePin>

	//clock enable
	HAL_GPIO_WritePin(portCE, pinCE, 0);
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <spi_74HC165_receive+0x6c>)
 8000546:	6818      	ldr	r0, [r3, #0]
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <spi_74HC165_receive+0x70>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	2200      	movs	r2, #0
 800054e:	4619      	mov	r1, r3
 8000550:	f002 fea2 	bl	8003298 <HAL_GPIO_WritePin>

	//SPI
	HAL_SPI_Receive(spi_handler, pdata, sizeData, 100);
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <spi_74HC165_receive+0x74>)
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	887a      	ldrh	r2, [r7, #2]
 800055a:	2364      	movs	r3, #100	; 0x64
 800055c:	6879      	ldr	r1, [r7, #4]
 800055e:	f006 fde9 	bl	8007134 <HAL_SPI_Receive>

	//clock disable
	HAL_GPIO_WritePin(portCE, pinCE, 1);
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <spi_74HC165_receive+0x6c>)
 8000564:	6818      	ldr	r0, [r3, #0]
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <spi_74HC165_receive+0x70>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	2201      	movs	r2, #1
 800056c:	4619      	mov	r1, r3
 800056e:	f002 fe93 	bl	8003298 <HAL_GPIO_WritePin>
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	2000039c 	.word	0x2000039c
 8000580:	20000398 	.word	0x20000398
 8000584:	200003a4 	.word	0x200003a4
 8000588:	200003a0 	.word	0x200003a0
 800058c:	20000394 	.word	0x20000394

08000590 <makeChord>:

	Parameter: fchord		Number of the chord sent. It was made by setChord() and store in "chordSet[]" vector.

	Returns:	unsigned long	(0xXXXXXX) A 3-byte number that contains the fundamental note in the least significant byte, followed by the 2nd and 3rd notes of the chord.
*/
unsigned long makeChord(unsigned long bnote, uint8_t fchord){
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	70fb      	strb	r3, [r7, #3]

	unsigned long notes;

	notes = bnote;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	60fb      	str	r3, [r7, #12]
	notes += (bnote << 8);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	68fa      	ldr	r2, [r7, #12]
 80005a6:	4413      	add	r3, r2
 80005a8:	60fb      	str	r3, [r7, #12]
	notes += (bnote << 16);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	041b      	lsls	r3, r3, #16
 80005ae:	68fa      	ldr	r2, [r7, #12]
 80005b0:	4413      	add	r3, r2
 80005b2:	60fb      	str	r3, [r7, #12]


	notes += chordSet[fchord];
 80005b4:	78fb      	ldrb	r3, [r7, #3]
 80005b6:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <makeChord+0x40>)
 80005b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005bc:	68fa      	ldr	r2, [r7, #12]
 80005be:	4413      	add	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]


	return notes;
 80005c2:	68fb      	ldr	r3, [r7, #12]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	200002e4 	.word	0x200002e4

080005d4 <setChord>:

	Parameter: fnote		id of the pressed note.

	Returns:	void
*/
void setChord(uint8_t fnote){
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]

chordSet[fnote] = hex_chord[chord] - hex_chordInv[chordInv];
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <setChord+0x34>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a0a      	ldr	r2, [pc, #40]	; (800060c <setChord+0x38>)
 80005e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <setChord+0x3c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a09      	ldr	r2, [pc, #36]	; (8000614 <setChord+0x40>)
 80005ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	1a8a      	subs	r2, r1, r2
 80005f6:	4908      	ldr	r1, [pc, #32]	; (8000618 <setChord+0x44>)
 80005f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	200003b0 	.word	0x200003b0
 800060c:	0800c954 	.word	0x0800c954
 8000610:	200003b4 	.word	0x200003b4
 8000614:	0800c974 	.word	0x0800c974
 8000618:	200002e4 	.word	0x200002e4

0800061c <turnOnScreen>:
	Parameters: void

	Returns:	void
*/

void turnOnScreen(void){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0

	/////////////CARACTERES ESPECIALES

	lcd_cursor_buff(5, 2);
 8000620:	2102      	movs	r1, #2
 8000622:	2005      	movs	r0, #5
 8000624:	f000 fc4c 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("BASS  PEDAL");
 8000628:	4808      	ldr	r0, [pc, #32]	; (800064c <turnOnScreen+0x30>)
 800062a:	f000 fccd 	bl	8000fc8 <lcd_string_buff>
	lcd_cursor_buff(5, 3);
 800062e:	2103      	movs	r1, #3
 8000630:	2005      	movs	r0, #5
 8000632:	f000 fc45 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("SYNTHESIZER");
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <turnOnScreen+0x34>)
 8000638:	f000 fcc6 	bl	8000fc8 <lcd_string_buff>
	lcd_upDate_IT();
 800063c:	f000 fd70 	bl	8001120 <lcd_upDate_IT>


	HAL_Delay(3000);
 8000640:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000644:	f001 ffce 	bl	80025e4 <HAL_Delay>
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	0800c7f4 	.word	0x0800c7f4
 8000650:	0800c800 	.word	0x0800c800

08000654 <chordScreen>:
	Parameters: void

	Returns:	void
*/

void chordScreen(void){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	lcd_clearScreen_buff();
 8000658:	f000 fc1c 	bl	8000e94 <lcd_clearScreen_buff>
	lcd_cursor_buff(1,0);
 800065c:	2100      	movs	r1, #0
 800065e:	2001      	movs	r0, #1
 8000660:	f000 fc2e 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("Acorde: ");
 8000664:	4815      	ldr	r0, [pc, #84]	; (80006bc <chordScreen+0x68>)
 8000666:	f000 fcaf 	bl	8000fc8 <lcd_string_buff>
	lcd_string_buff( str_chord[chord]);
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <chordScreen+0x6c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <chordScreen+0x70>)
 8000670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fca7 	bl	8000fc8 <lcd_string_buff>
	lcd_cursor_buff(1,1);
 800067a:	2101      	movs	r1, #1
 800067c:	2001      	movs	r0, #1
 800067e:	f000 fc1f 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("Pos:");
 8000682:	4811      	ldr	r0, [pc, #68]	; (80006c8 <chordScreen+0x74>)
 8000684:	f000 fca0 	bl	8000fc8 <lcd_string_buff>
	lcd_string_buff( str_chordInv[chordInv]);
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <chordScreen+0x78>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a10      	ldr	r2, [pc, #64]	; (80006d0 <chordScreen+0x7c>)
 800068e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fc98 	bl	8000fc8 <lcd_string_buff>
	lcd_cursor_buff(1,2);
 8000698:	2102      	movs	r1, #2
 800069a:	2001      	movs	r0, #1
 800069c:	f000 fc10 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("Grabar acorde");
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <chordScreen+0x80>)
 80006a2:	f000 fc91 	bl	8000fc8 <lcd_string_buff>

	lcd_cursor_buff(0, chordSelect_cursor);
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <chordScreen+0x84>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4619      	mov	r1, r3
 80006ac:	2000      	movs	r0, #0
 80006ae:	f000 fc07 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff(">");
 80006b2:	480a      	ldr	r0, [pc, #40]	; (80006dc <chordScreen+0x88>)
 80006b4:	f000 fc88 	bl	8000fc8 <lcd_string_buff>

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	0800c80c 	.word	0x0800c80c
 80006c0:	200003b0 	.word	0x200003b0
 80006c4:	20000030 	.word	0x20000030
 80006c8:	0800c818 	.word	0x0800c818
 80006cc:	200003b4 	.word	0x200003b4
 80006d0:	20000050 	.word	0x20000050
 80006d4:	0800c820 	.word	0x0800c820
 80006d8:	200003a8 	.word	0x200003a8
 80006dc:	0800c830 	.word	0x0800c830

080006e0 <mainScreen>:
	Parameters: void

	Returns:	void
*/

void mainScreen(void){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

	extern uint8_t sustainMode;
	extern uint8_t acorde;

  	lcd_clearScreen_buff();
 80006e4:	f000 fbd6 	bl	8000e94 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 80006e8:	2100      	movs	r1, #0
 80006ea:	2000      	movs	r0, #0
 80006ec:	f000 fbe8 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("Afinacion: ");
 80006f0:	4827      	ldr	r0, [pc, #156]	; (8000790 <mainScreen+0xb0>)
 80006f2:	f000 fc69 	bl	8000fc8 <lcd_string_buff>
	lcd_string_buff(str_tunne[firstDoTunning - 48]);
 80006f6:	4b27      	ldr	r3, [pc, #156]	; (8000794 <mainScreen+0xb4>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	3b30      	subs	r3, #48	; 0x30
 80006fc:	4a26      	ldr	r2, [pc, #152]	; (8000798 <mainScreen+0xb8>)
 80006fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fc60 	bl	8000fc8 <lcd_string_buff>
	lcd_cursor_buff(0,1);
 8000708:	2101      	movs	r1, #1
 800070a:	2000      	movs	r0, #0
 800070c:	f000 fbd8 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("Octava: ");
 8000710:	4822      	ldr	r0, [pc, #136]	; (800079c <mainScreen+0xbc>)
 8000712:	f000 fc59 	bl	8000fc8 <lcd_string_buff>
	lcd_string_buff(str_octava[octava + 1]);
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <mainScreen+0xc0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	3301      	adds	r3, #1
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <mainScreen+0xc4>)
 800071e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000722:	4618      	mov	r0, r3
 8000724:	f000 fc50 	bl	8000fc8 <lcd_string_buff>
	lcd_cursor_buff(0,2);
 8000728:	2102      	movs	r1, #2
 800072a:	2000      	movs	r0, #0
 800072c:	f000 fbc8 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("Sustain: ");
 8000730:	481d      	ldr	r0, [pc, #116]	; (80007a8 <mainScreen+0xc8>)
 8000732:	f000 fc49 	bl	8000fc8 <lcd_string_buff>
	switch (sustainMode){
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <mainScreen+0xcc>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d007      	beq.n	800074e <mainScreen+0x6e>
 800073e:	2b02      	cmp	r3, #2
 8000740:	d009      	beq.n	8000756 <mainScreen+0x76>
 8000742:	2b00      	cmp	r3, #0
 8000744:	d10b      	bne.n	800075e <mainScreen+0x7e>
		case 0:
			lcd_string_buff("OFF");
 8000746:	481a      	ldr	r0, [pc, #104]	; (80007b0 <mainScreen+0xd0>)
 8000748:	f000 fc3e 	bl	8000fc8 <lcd_string_buff>
		break;
 800074c:	e007      	b.n	800075e <mainScreen+0x7e>
		case 1:
			lcd_string_buff("smart");
 800074e:	4819      	ldr	r0, [pc, #100]	; (80007b4 <mainScreen+0xd4>)
 8000750:	f000 fc3a 	bl	8000fc8 <lcd_string_buff>
		break;
 8000754:	e003      	b.n	800075e <mainScreen+0x7e>
		case 2:
			lcd_string_buff("clasico");
 8000756:	4818      	ldr	r0, [pc, #96]	; (80007b8 <mainScreen+0xd8>)
 8000758:	f000 fc36 	bl	8000fc8 <lcd_string_buff>
		break;
 800075c:	bf00      	nop
	}//end switch.
	lcd_cursor_buff(0,3);
 800075e:	2103      	movs	r1, #3
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fbad 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("Acordes: ");
 8000766:	4815      	ldr	r0, [pc, #84]	; (80007bc <mainScreen+0xdc>)
 8000768:	f000 fc2e 	bl	8000fc8 <lcd_string_buff>
	switch (acorde){
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <mainScreen+0xe0>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d002      	beq.n	800077a <mainScreen+0x9a>
 8000774:	2b01      	cmp	r3, #1
 8000776:	d004      	beq.n	8000782 <mainScreen+0xa2>
			lcd_string_buff("ON");
		break;
	}//end switch.


}
 8000778:	e007      	b.n	800078a <mainScreen+0xaa>
			lcd_string_buff("OFF");
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <mainScreen+0xd0>)
 800077c:	f000 fc24 	bl	8000fc8 <lcd_string_buff>
		break;
 8000780:	e003      	b.n	800078a <mainScreen+0xaa>
			lcd_string_buff("ON");
 8000782:	4810      	ldr	r0, [pc, #64]	; (80007c4 <mainScreen+0xe4>)
 8000784:	f000 fc20 	bl	8000fc8 <lcd_string_buff>
		break;
 8000788:	bf00      	nop
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	0800c834 	.word	0x0800c834
 8000794:	200003ac 	.word	0x200003ac
 8000798:	20000000 	.word	0x20000000
 800079c:	0800c840 	.word	0x0800c840
 80007a0:	200002e0 	.word	0x200002e0
 80007a4:	2000005c 	.word	0x2000005c
 80007a8:	0800c84c 	.word	0x0800c84c
 80007ac:	20000358 	.word	0x20000358
 80007b0:	0800c858 	.word	0x0800c858
 80007b4:	0800c85c 	.word	0x0800c85c
 80007b8:	0800c864 	.word	0x0800c864
 80007bc:	0800c86c 	.word	0x0800c86c
 80007c0:	20000364 	.word	0x20000364
 80007c4:	0800c878 	.word	0x0800c878

080007c8 <tunneScreen>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void tunneScreen(void){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 80007cc:	f000 fb62 	bl	8000e94 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 80007d0:	2100      	movs	r1, #0
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 fb74 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("AFINACION: ");
 80007d8:	4806      	ldr	r0, [pc, #24]	; (80007f4 <tunneScreen+0x2c>)
 80007da:	f000 fbf5 	bl	8000fc8 <lcd_string_buff>
	lcd_string_buff(str_tunne[firstDoTunning - 48]);
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <tunneScreen+0x30>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	3b30      	subs	r3, #48	; 0x30
 80007e4:	4a05      	ldr	r2, [pc, #20]	; (80007fc <tunneScreen+0x34>)
 80007e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fbec 	bl	8000fc8 <lcd_string_buff>
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	0800c87c 	.word	0x0800c87c
 80007f8:	200003ac 	.word	0x200003ac
 80007fc:	20000000 	.word	0x20000000

08000800 <on_off_octave>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void on_off_octave (void){
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 8000804:	f000 fb46 	bl	8000e94 <lcd_clearScreen_buff>
	lcd_cursor_buff(3,2);
 8000808:	2102      	movs	r1, #2
 800080a:	2003      	movs	r0, #3
 800080c:	f000 fb58 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("Octava:  ");
 8000810:	4806      	ldr	r0, [pc, #24]	; (800082c <on_off_octave+0x2c>)
 8000812:	f000 fbd9 	bl	8000fc8 <lcd_string_buff>
	lcd_string_buff(str_octava[octava + 1]);
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <on_off_octave+0x30>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	3301      	adds	r3, #1
 800081c:	4a05      	ldr	r2, [pc, #20]	; (8000834 <on_off_octave+0x34>)
 800081e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fbd0 	bl	8000fc8 <lcd_string_buff>

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	0800c8a0 	.word	0x0800c8a0
 8000830:	200002e0 	.word	0x200002e0
 8000834:	2000005c 	.word	0x2000005c

08000838 <recuest_footkey>:
	Parameter: void

	Returns:	void
*/

void recuest_footkey (void){
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 800083c:	f000 fb2a 	bl	8000e94 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 8000840:	2100      	movs	r1, #0
 8000842:	2000      	movs	r0, #0
 8000844:	f000 fb3c 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("Pulse una tecla para");
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <recuest_footkey+0x28>)
 800084a:	f000 fbbd 	bl	8000fc8 <lcd_string_buff>
	lcd_cursor_buff(0,1);
 800084e:	2101      	movs	r1, #1
 8000850:	2000      	movs	r0, #0
 8000852:	f000 fb35 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("grabar el acorde...");
 8000856:	4803      	ldr	r0, [pc, #12]	; (8000864 <recuest_footkey+0x2c>)
 8000858:	f000 fbb6 	bl	8000fc8 <lcd_string_buff>

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	0800c8ac 	.word	0x0800c8ac
 8000864:	0800c8c4 	.word	0x0800c8c4

08000868 <pop_up_savedChord>:
	Parameter: void

	Returns:	void
*/

void pop_up_savedChord (uint8_t fk){
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]

	lcd_clearScreen_buff();
 8000872:	f000 fb0f 	bl	8000e94 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,1);
 8000876:	2101      	movs	r1, #1
 8000878:	2000      	movs	r0, #0
 800087a:	f000 fb21 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("ACORDE GRABADO EN LA");
 800087e:	480a      	ldr	r0, [pc, #40]	; (80008a8 <pop_up_savedChord+0x40>)
 8000880:	f000 fba2 	bl	8000fc8 <lcd_string_buff>
	lcd_cursor_buff(0,2);
 8000884:	2102      	movs	r1, #2
 8000886:	2000      	movs	r0, #0
 8000888:	f000 fb1a 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("TECLA ");
 800088c:	4807      	ldr	r0, [pc, #28]	; (80008ac <pop_up_savedChord+0x44>)
 800088e:	f000 fb9b 	bl	8000fc8 <lcd_string_buff>
	lcd_string_buff(str_tunne[fk]);
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <pop_up_savedChord+0x48>)
 8000896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fb94 	bl	8000fc8 <lcd_string_buff>

}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	0800c8d8 	.word	0x0800c8d8
 80008ac:	0800c8f0 	.word	0x0800c8f0
 80008b0:	20000000 	.word	0x20000000

080008b4 <pop_up_sustain>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void pop_up_sustain (void){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

	extern uint8_t sustainMode;

	lcd_clearScreen_buff();
 80008b8:	f000 faec 	bl	8000e94 <lcd_clearScreen_buff>
	lcd_cursor_buff(2,1);
 80008bc:	2101      	movs	r1, #1
 80008be:	2002      	movs	r0, #2
 80008c0:	f000 fafe 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("Sustain: ");
 80008c4:	480c      	ldr	r0, [pc, #48]	; (80008f8 <pop_up_sustain+0x44>)
 80008c6:	f000 fb7f 	bl	8000fc8 <lcd_string_buff>
	switch (sustainMode){
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <pop_up_sustain+0x48>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d008      	beq.n	80008e4 <pop_up_sustain+0x30>
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d00a      	beq.n	80008ec <pop_up_sustain+0x38>
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d000      	beq.n	80008dc <pop_up_sustain+0x28>
		case 2:
			lcd_string_buff("clasico");
		break;
	}//end switch.

}
 80008da:	e00b      	b.n	80008f4 <pop_up_sustain+0x40>
			lcd_string_buff("OFF");
 80008dc:	4808      	ldr	r0, [pc, #32]	; (8000900 <pop_up_sustain+0x4c>)
 80008de:	f000 fb73 	bl	8000fc8 <lcd_string_buff>
		break;
 80008e2:	e007      	b.n	80008f4 <pop_up_sustain+0x40>
			lcd_string_buff("smart");
 80008e4:	4807      	ldr	r0, [pc, #28]	; (8000904 <pop_up_sustain+0x50>)
 80008e6:	f000 fb6f 	bl	8000fc8 <lcd_string_buff>
		break;
 80008ea:	e003      	b.n	80008f4 <pop_up_sustain+0x40>
			lcd_string_buff("clasico");
 80008ec:	4806      	ldr	r0, [pc, #24]	; (8000908 <pop_up_sustain+0x54>)
 80008ee:	f000 fb6b 	bl	8000fc8 <lcd_string_buff>
		break;
 80008f2:	bf00      	nop
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	0800c84c 	.word	0x0800c84c
 80008fc:	20000358 	.word	0x20000358
 8000900:	0800c858 	.word	0x0800c858
 8000904:	0800c85c 	.word	0x0800c85c
 8000908:	0800c864 	.word	0x0800c864

0800090c <pop_up_cancel>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void pop_up_cancel (void){
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 8000910:	f000 fac0 	bl	8000e94 <lcd_clearScreen_buff>
	lcd_cursor_buff(2,1);
 8000914:	2101      	movs	r1, #1
 8000916:	2002      	movs	r0, #2
 8000918:	f000 fad2 	bl	8000ec0 <lcd_cursor_buff>
	lcd_string_buff("ACCION CANCELADA");
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <pop_up_cancel+0x1c>)
 800091e:	f000 fb53 	bl	8000fc8 <lcd_string_buff>

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	0800c8f8 	.word	0x0800c8f8

0800092c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000932:	463b      	mov	r3, r7
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <MX_ADC1_Init+0x98>)
 8000940:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <MX_ADC1_Init+0x9c>)
 8000942:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <MX_ADC1_Init+0x98>)
 8000946:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800094a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800094c:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <MX_ADC1_Init+0x98>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_ADC1_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_ADC1_Init+0x98>)
 800095a:	2200      	movs	r2, #0
 800095c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <MX_ADC1_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_ADC1_Init+0x98>)
 8000968:	2200      	movs	r2, #0
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_ADC1_Init+0x98>)
 800096e:	4a17      	ldr	r2, [pc, #92]	; (80009cc <MX_ADC1_Init+0xa0>)
 8000970:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_ADC1_Init+0x98>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_ADC1_Init+0x98>)
 800097a:	2201      	movs	r2, #1
 800097c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_ADC1_Init+0x98>)
 8000980:	2200      	movs	r2, #0
 8000982:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_ADC1_Init+0x98>)
 8000988:	2201      	movs	r2, #1
 800098a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <MX_ADC1_Init+0x98>)
 800098e:	f001 fe4b 	bl	8002628 <HAL_ADC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000998:	f001 f974 	bl	8001c84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800099c:	2308      	movs	r3, #8
 800099e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_ADC1_Init+0x98>)
 80009ae:	f001 fe7f 	bl	80026b0 <HAL_ADC_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009b8:	f001 f964 	bl	8001c84 <Error_Handler>
  }

}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200003bc 	.word	0x200003bc
 80009c8:	40012000 	.word	0x40012000
 80009cc:	0f000001 	.word	0x0f000001

080009d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a24      	ldr	r2, [pc, #144]	; (8000a80 <HAL_ADC_MspInit+0xb0>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d141      	bne.n	8000a76 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <HAL_ADC_MspInit+0xb4>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	4a22      	ldr	r2, [pc, #136]	; (8000a84 <HAL_ADC_MspInit+0xb4>)
 80009fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a00:	6453      	str	r3, [r2, #68]	; 0x44
 8000a02:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <HAL_ADC_MspInit+0xb4>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <HAL_ADC_MspInit+0xb4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <HAL_ADC_MspInit+0xb4>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <HAL_ADC_MspInit+0xb4>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_ADC_MspInit+0xb4>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <HAL_ADC_MspInit+0xb4>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_ADC_MspInit+0xb4>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a46:	2303      	movs	r3, #3
 8000a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	480b      	ldr	r0, [pc, #44]	; (8000a88 <HAL_ADC_MspInit+0xb8>)
 8000a5a:	f002 fa83 	bl	8002f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a62:	2303      	movs	r3, #3
 8000a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4806      	ldr	r0, [pc, #24]	; (8000a8c <HAL_ADC_MspInit+0xbc>)
 8000a72:	f002 fa77 	bl	8002f64 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	; 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40012000 	.word	0x40012000
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020800 	.word	0x40020800
 8000a8c:	40020400 	.word	0x40020400

08000a90 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000a96:	463b      	mov	r3, r7
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000a9e:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_DAC_Init+0x60>)
 8000aa0:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <MX_DAC_Init+0x64>)
 8000aa2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000aa4:	4812      	ldr	r0, [pc, #72]	; (8000af0 <MX_DAC_Init+0x60>)
 8000aa6:	f002 f932 	bl	8002d0e <HAL_DAC_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ab0:	f001 f8e8 	bl	8001c84 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000abc:	463b      	mov	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480b      	ldr	r0, [pc, #44]	; (8000af0 <MX_DAC_Init+0x60>)
 8000ac4:	f002 f9ab 	bl	8002e1e <HAL_DAC_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000ace:	f001 f8d9 	bl	8001c84 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	2210      	movs	r2, #16
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_DAC_Init+0x60>)
 8000ada:	f002 f9a0 	bl	8002e1e <HAL_DAC_ConfigChannel>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000ae4:	f001 f8ce 	bl	8001c84 <Error_Handler>
  }

}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000404 	.word	0x20000404
 8000af4:	40007400 	.word	0x40007400

08000af8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <HAL_DAC_MspInit+0x7c>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d127      	bne.n	8000b6a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <HAL_DAC_MspInit+0x80>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <HAL_DAC_MspInit+0x80>)
 8000b24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_DAC_MspInit+0x80>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <HAL_DAC_MspInit+0x80>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <HAL_DAC_MspInit+0x80>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <HAL_DAC_MspInit+0x80>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b52:	2330      	movs	r3, #48	; 0x30
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b56:	2303      	movs	r3, #3
 8000b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <HAL_DAC_MspInit+0x84>)
 8000b66:	f002 f9fd 	bl	8002f64 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	3728      	adds	r7, #40	; 0x28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40007400 	.word	0x40007400
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020000 	.word	0x40020000

08000b80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a33      	ldr	r2, [pc, #204]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b31      	ldr	r3, [pc, #196]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a2c      	ldr	r2, [pc, #176]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a25      	ldr	r2, [pc, #148]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a1e      	ldr	r2, [pc, #120]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_VERDE_Pin|LED_NARANJA_Pin|LED_ROJO_Pin|LED_AZUL_Pin
 8000c22:	2200      	movs	r2, #0
 8000c24:	f24f 01e0 	movw	r1, #61664	; 0xf0e0
 8000c28:	4811      	ldr	r0, [pc, #68]	; (8000c70 <MX_GPIO_Init+0xf0>)
 8000c2a:	f002 fb35 	bl	8003298 <HAL_GPIO_WritePin>
                          |PL_bot_Pin|CE_bot_Pin|ST_leds_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOTON_AZUL_Pin;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOTON_AZUL_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480c      	ldr	r0, [pc, #48]	; (8000c74 <MX_GPIO_Init+0xf4>)
 8000c42:	f002 f98f 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_VERDE_Pin|LED_NARANJA_Pin|LED_ROJO_Pin|LED_AZUL_Pin
 8000c46:	f24f 03e0 	movw	r3, #61664	; 0xf0e0
 8000c4a:	617b      	str	r3, [r7, #20]
                          |PL_bot_Pin|CE_bot_Pin|ST_leds_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_GPIO_Init+0xf0>)
 8000c60:	f002 f980 	bl	8002f64 <HAL_GPIO_Init>

}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	; 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020c00 	.word	0x40020c00
 8000c74:	40020000 	.word	0x40020000

08000c78 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c7e:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <MX_I2C1_Init+0x54>)
 8000c80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <MX_I2C1_Init+0x58>)
 8000c86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000cb6:	f002 fb09 	bl	80032cc <HAL_I2C_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cc0:	f000 ffe0 	bl	8001c84 <Error_Handler>
  }

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000418 	.word	0x20000418
 8000ccc:	40005400 	.word	0x40005400
 8000cd0:	00061a80 	.word	0x00061a80

08000cd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a21      	ldr	r2, [pc, #132]	; (8000d78 <HAL_I2C_MspInit+0xa4>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d13b      	bne.n	8000d6e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <HAL_I2C_MspInit+0xa8>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a1f      	ldr	r2, [pc, #124]	; (8000d7c <HAL_I2C_MspInit+0xa8>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <HAL_I2C_MspInit+0xa8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d12:	23c0      	movs	r3, #192	; 0xc0
 8000d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d16:	2312      	movs	r3, #18
 8000d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d22:	2304      	movs	r3, #4
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4814      	ldr	r0, [pc, #80]	; (8000d80 <HAL_I2C_MspInit+0xac>)
 8000d2e:	f002 f919 	bl	8002f64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_I2C_MspInit+0xa8>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <HAL_I2C_MspInit+0xa8>)
 8000d3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d40:	6413      	str	r3, [r2, #64]	; 0x40
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_I2C_MspInit+0xa8>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2100      	movs	r1, #0
 8000d52:	201f      	movs	r0, #31
 8000d54:	f001 ffa5 	bl	8002ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d58:	201f      	movs	r0, #31
 8000d5a:	f001 ffbe 	bl	8002cda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	2020      	movs	r0, #32
 8000d64:	f001 ff9d 	bl	8002ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d68:	2020      	movs	r0, #32
 8000d6a:	f001 ffb6 	bl	8002cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020400 	.word	0x40020400

08000d84 <__lcd_send_cmd>:
uint8_t flag_sendLcd = 1;
uint8_t I2CtxComplete = 1;

/*Used by lcd_init() only*/
void __lcd_send_cmd (char cmd)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af02      	add	r7, sp, #8
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f023 030f 	bic.w	r3, r3, #15
 8000d94:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	011b      	lsls	r3, r3, #4
 8000d9a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	f043 030c 	orr.w	r3, r3, #12
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000db0:	7bbb      	ldrb	r3, [r7, #14]
 8000db2:	f043 030c 	orr.w	r3, r3, #12
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000dba:	7bbb      	ldrb	r3, [r7, #14]
 8000dbc:	f043 0308 	orr.w	r3, r3, #8
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <__lcd_send_cmd+0x60>)
 8000dc6:	6818      	ldr	r0, [r3, #0]
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <__lcd_send_cmd+0x64>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b299      	uxth	r1, r3
 8000dce:	f107 0208 	add.w	r2, r7, #8
 8000dd2:	2364      	movs	r3, #100	; 0x64
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	f002 fbb0 	bl	800353c <HAL_I2C_Master_Transmit>
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000718 	.word	0x20000718
 8000de8:	20000714 	.word	0x20000714

08000dec <__lcd_send_cmd_buff>:

void __lcd_send_cmd_buff (char cmd)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	f023 030f 	bic.w	r3, r3, #15
 8000dfc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	011b      	lsls	r3, r3, #4
 8000e02:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	f043 030c 	orr.w	r3, r3, #12
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000e18:	7bbb      	ldrb	r3, [r7, #14]
 8000e1a:	f043 030c 	orr.w	r3, r3, #12
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e22:	7bbb      	ldrb	r3, [r7, #14]
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
	__add_to_lcdBuff((uint8_t*)data_t,4);
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	2104      	movs	r1, #4
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f8dc 	bl	8000ff0 <__add_to_lcdBuff>
}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <__lcd_send_data_buff>:


void __lcd_send_data_buff (char data)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	f023 030f 	bic.w	r3, r3, #15
 8000e50:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	f043 030d 	orr.w	r3, r3, #13
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	f043 0309 	orr.w	r3, r3, #9
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000e6c:	7bbb      	ldrb	r3, [r7, #14]
 8000e6e:	f043 030d 	orr.w	r3, r3, #13
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000e76:	7bbb      	ldrb	r3, [r7, #14]
 8000e78:	f043 0309 	orr.w	r3, r3, #9
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
	__add_to_lcdBuff((uint8_t*)data_t,4);
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	2104      	movs	r1, #4
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f8b2 	bl	8000ff0 <__add_to_lcdBuff>
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <lcd_clearScreen_buff>:


void lcd_clearScreen_buff (void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
	__lcd_send_cmd_buff (0x80);
 8000e9a:	2080      	movs	r0, #128	; 0x80
 8000e9c:	f7ff ffa6 	bl	8000dec <__lcd_send_cmd_buff>
	for (int i=0; i<80; i++)
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	e005      	b.n	8000eb2 <lcd_clearScreen_buff+0x1e>
	{
		__lcd_send_data_buff (' ');
 8000ea6:	2020      	movs	r0, #32
 8000ea8:	f7ff ffca 	bl	8000e40 <__lcd_send_data_buff>
	for (int i=0; i<80; i++)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b4f      	cmp	r3, #79	; 0x4f
 8000eb6:	ddf6      	ble.n	8000ea6 <lcd_clearScreen_buff+0x12>
	}
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <lcd_cursor_buff>:


void lcd_cursor_buff(int x, int y)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
    switch (y){
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d82b      	bhi.n	8000f28 <lcd_cursor_buff+0x68>
 8000ed0:	a201      	add	r2, pc, #4	; (adr r2, 8000ed8 <lcd_cursor_buff+0x18>)
 8000ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed6:	bf00      	nop
 8000ed8:	08000ee9 	.word	0x08000ee9
 8000edc:	08000ef9 	.word	0x08000ef9
 8000ee0:	08000f09 	.word	0x08000f09
 8000ee4:	08000f19 	.word	0x08000f19
    	case 0:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE1 + x);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	3b80      	subs	r3, #128	; 0x80
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff7b 	bl	8000dec <__lcd_send_cmd_buff>
    	break;
 8000ef6:	e017      	b.n	8000f28 <lcd_cursor_buff+0x68>
    	case 1:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE2 + x);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	3b40      	subs	r3, #64	; 0x40
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff73 	bl	8000dec <__lcd_send_cmd_buff>
    	break;
 8000f06:	e00f      	b.n	8000f28 <lcd_cursor_buff+0x68>
    	case 2:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE3 + x);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	3b6c      	subs	r3, #108	; 0x6c
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff6b 	bl	8000dec <__lcd_send_cmd_buff>
    	break;
 8000f16:	e007      	b.n	8000f28 <lcd_cursor_buff+0x68>
    	case 3:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE4 + x);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	3b2c      	subs	r3, #44	; 0x2c
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff63 	bl	8000dec <__lcd_send_cmd_buff>
    	break;
 8000f26:	bf00      	nop
    }
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <lcd_init>:


void lcd_init (I2C_HandleTypeDef* hi2c, uint8_t i2c_address)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]
	i2c_handler = hi2c; //set the i2c handler struct.
 8000f3c:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <lcd_init+0x90>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
	SLAVE_ADDRESS_LCD = (i2c_address << 1); //set the lcd i2c address (left alignment).
 8000f42:	78fb      	ldrb	r3, [r7, #3]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <lcd_init+0x94>)
 8000f4a:	701a      	strb	r2, [r3, #0]

	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000f4c:	2032      	movs	r0, #50	; 0x32
 8000f4e:	f001 fb49 	bl	80025e4 <HAL_Delay>
	__lcd_send_cmd (0x30);
 8000f52:	2030      	movs	r0, #48	; 0x30
 8000f54:	f7ff ff16 	bl	8000d84 <__lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000f58:	2005      	movs	r0, #5
 8000f5a:	f001 fb43 	bl	80025e4 <HAL_Delay>
	__lcd_send_cmd (0x30);
 8000f5e:	2030      	movs	r0, #48	; 0x30
 8000f60:	f7ff ff10 	bl	8000d84 <__lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000f64:	2001      	movs	r0, #1
 8000f66:	f001 fb3d 	bl	80025e4 <HAL_Delay>
	__lcd_send_cmd (0x30);
 8000f6a:	2030      	movs	r0, #48	; 0x30
 8000f6c:	f7ff ff0a 	bl	8000d84 <__lcd_send_cmd>
	HAL_Delay(10);
 8000f70:	200a      	movs	r0, #10
 8000f72:	f001 fb37 	bl	80025e4 <HAL_Delay>
	__lcd_send_cmd (0x20);  // 4bit mode
 8000f76:	2020      	movs	r0, #32
 8000f78:	f7ff ff04 	bl	8000d84 <__lcd_send_cmd>
	HAL_Delay(10);
 8000f7c:	200a      	movs	r0, #10
 8000f7e:	f001 fb31 	bl	80025e4 <HAL_Delay>

  // dislay initialisation
	__lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000f82:	2028      	movs	r0, #40	; 0x28
 8000f84:	f7ff fefe 	bl	8000d84 <__lcd_send_cmd>
	HAL_Delay(1);
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f001 fb2b 	bl	80025e4 <HAL_Delay>
	__lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000f8e:	2008      	movs	r0, #8
 8000f90:	f7ff fef8 	bl	8000d84 <__lcd_send_cmd>
	HAL_Delay(1);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f001 fb25 	bl	80025e4 <HAL_Delay>
	__lcd_send_cmd (0x01);  // clear display
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f7ff fef2 	bl	8000d84 <__lcd_send_cmd>
	HAL_Delay(2);
 8000fa0:	2002      	movs	r0, #2
 8000fa2:	f001 fb1f 	bl	80025e4 <HAL_Delay>
	__lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000fa6:	2006      	movs	r0, #6
 8000fa8:	f7ff feec 	bl	8000d84 <__lcd_send_cmd>
	HAL_Delay(1);
 8000fac:	2001      	movs	r0, #1
 8000fae:	f001 fb19 	bl	80025e4 <HAL_Delay>
	__lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000fb2:	200c      	movs	r0, #12
 8000fb4:	f7ff fee6 	bl	8000d84 <__lcd_send_cmd>
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000718 	.word	0x20000718
 8000fc4:	20000714 	.word	0x20000714

08000fc8 <lcd_string_buff>:


void lcd_string_buff (char *str)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	while (*str) __lcd_send_data_buff(*str++);
 8000fd0:	e006      	b.n	8000fe0 <lcd_string_buff+0x18>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	607a      	str	r2, [r7, #4]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ff30 	bl	8000e40 <__lcd_send_data_buff>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1f4      	bne.n	8000fd2 <lcd_string_buff+0xa>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <__add_to_lcdBuff>:


void __add_to_lcdBuff(uint8_t* data, uint8_t sizeData){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
	while (i < sizeData){
 8001000:	e018      	b.n	8001034 <__add_to_lcdBuff+0x44>
		lcd_circ_buffer[lcd_circ_buff_in] = *(data + i);
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	4413      	add	r3, r2
 8001008:	4a11      	ldr	r2, [pc, #68]	; (8001050 <__add_to_lcdBuff+0x60>)
 800100a:	8812      	ldrh	r2, [r2, #0]
 800100c:	7819      	ldrb	r1, [r3, #0]
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <__add_to_lcdBuff+0x64>)
 8001010:	5499      	strb	r1, [r3, r2]
		lcd_circ_buff_in++;
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <__add_to_lcdBuff+0x60>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	3301      	adds	r3, #1
 8001018:	b29a      	uxth	r2, r3
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <__add_to_lcdBuff+0x60>)
 800101c:	801a      	strh	r2, [r3, #0]
		i++;
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	3301      	adds	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
		if (lcd_circ_buff_in == LCD_CIRCBUFF_MAX){
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <__add_to_lcdBuff+0x60>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800102c:	d102      	bne.n	8001034 <__add_to_lcdBuff+0x44>
			lcd_circ_buff_in = 0;
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <__add_to_lcdBuff+0x60>)
 8001030:	2200      	movs	r2, #0
 8001032:	801a      	strh	r2, [r3, #0]
	while (i < sizeData){
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	78fb      	ldrb	r3, [r7, #3]
 8001038:	429a      	cmp	r2, r3
 800103a:	d3e2      	bcc.n	8001002 <__add_to_lcdBuff+0x12>
		}
	}
	flag_sendLcd = 1;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <__add_to_lcdBuff+0x68>)
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000318 	.word	0x20000318
 8001054:	2000046c 	.word	0x2000046c
 8001058:	20000068 	.word	0x20000068

0800105c <__lcd_sendBuff_IT>:


void __lcd_sendBuff_IT (void){
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
	uint16_t I2C_Tx_ptr;
	uint16_t I2C_Tx_length;

	//if (I2CtxComplete != 0){ //si no termino la transmision anterior...

		if (lcd_circ_buff_out == LCD_CIRCBUFF_MAX){
 8001062:	4b27      	ldr	r3, [pc, #156]	; (8001100 <__lcd_sendBuff_IT+0xa4>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800106a:	d102      	bne.n	8001072 <__lcd_sendBuff_IT+0x16>
			lcd_circ_buff_out = 0;
 800106c:	4b24      	ldr	r3, [pc, #144]	; (8001100 <__lcd_sendBuff_IT+0xa4>)
 800106e:	2200      	movs	r2, #0
 8001070:	801a      	strh	r2, [r3, #0]
		}

		if (lcd_circ_buff_out == lcd_circ_buff_in){
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <__lcd_sendBuff_IT+0xa4>)
 8001074:	881a      	ldrh	r2, [r3, #0]
 8001076:	4b23      	ldr	r3, [pc, #140]	; (8001104 <__lcd_sendBuff_IT+0xa8>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	429a      	cmp	r2, r3
 800107c:	d103      	bne.n	8001086 <__lcd_sendBuff_IT+0x2a>
			//no hay transmisión acá
			flag_sendLcd = 0;
 800107e:	4b22      	ldr	r3, [pc, #136]	; (8001108 <__lcd_sendBuff_IT+0xac>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
			return;
 8001084:	e038      	b.n	80010f8 <__lcd_sendBuff_IT+0x9c>
		}

		if (lcd_circ_buff_out > lcd_circ_buff_in){
 8001086:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <__lcd_sendBuff_IT+0xa4>)
 8001088:	881a      	ldrh	r2, [r3, #0]
 800108a:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <__lcd_sendBuff_IT+0xa8>)
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	d907      	bls.n	80010a2 <__lcd_sendBuff_IT+0x46>
			lcd_tx_length = LCD_CIRCBUFF_MAX - lcd_circ_buff_out;//transmite solo hasta el final del buffer, para luego reacomodar los punteros.
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <__lcd_sendBuff_IT+0xa4>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	f5c3 732a 	rsb	r3, r3, #680	; 0x2a8
 800109a:	b29a      	uxth	r2, r3
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <__lcd_sendBuff_IT+0xb0>)
 800109e:	801a      	strh	r2, [r3, #0]
 80010a0:	e007      	b.n	80010b2 <__lcd_sendBuff_IT+0x56>
		}else{
			lcd_tx_length = lcd_circ_buff_in - lcd_circ_buff_out;
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <__lcd_sendBuff_IT+0xa8>)
 80010a4:	881a      	ldrh	r2, [r3, #0]
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <__lcd_sendBuff_IT+0xa4>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <__lcd_sendBuff_IT+0xb0>)
 80010b0:	801a      	strh	r2, [r3, #0]
//		I2C_Tx_ptr = lcd_circ_buff_out;
//		I2C_Tx_length = lcd_tx_length;
//		lcd_circ_buff_out += lcd_tx_length;
//		lcd_tx_length = 0;

		if (I2CtxComplete != 0){
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <__lcd_sendBuff_IT+0xb4>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d01e      	beq.n	80010f8 <__lcd_sendBuff_IT+0x9c>
			I2CtxComplete = 0;
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <__lcd_sendBuff_IT+0xb4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]

			I2C_Tx_ptr = lcd_circ_buff_out;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <__lcd_sendBuff_IT+0xa4>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	80fb      	strh	r3, [r7, #6]
			I2C_Tx_length = lcd_tx_length;
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <__lcd_sendBuff_IT+0xb0>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	80bb      	strh	r3, [r7, #4]
			lcd_circ_buff_out += lcd_tx_length;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <__lcd_sendBuff_IT+0xa4>)
 80010ce:	881a      	ldrh	r2, [r3, #0]
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <__lcd_sendBuff_IT+0xb0>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	4413      	add	r3, r2
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <__lcd_sendBuff_IT+0xa4>)
 80010da:	801a      	strh	r2, [r3, #0]
			lcd_tx_length = 0;
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <__lcd_sendBuff_IT+0xb0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	801a      	strh	r2, [r3, #0]
			HAL_I2C_Master_Transmit_IT(i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) &lcd_circ_buffer[I2C_Tx_ptr],I2C_Tx_length);
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <__lcd_sendBuff_IT+0xb8>)
 80010e4:	6818      	ldr	r0, [r3, #0]
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <__lcd_sendBuff_IT+0xbc>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b299      	uxth	r1, r3
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <__lcd_sendBuff_IT+0xc0>)
 80010f0:	441a      	add	r2, r3
 80010f2:	88bb      	ldrh	r3, [r7, #4]
 80010f4:	f002 fb20 	bl	8003738 <HAL_I2C_Master_Transmit_IT>
		}
	//}
}
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000031a 	.word	0x2000031a
 8001104:	20000318 	.word	0x20000318
 8001108:	20000068 	.word	0x20000068
 800110c:	2000031c 	.word	0x2000031c
 8001110:	20000069 	.word	0x20000069
 8001114:	20000718 	.word	0x20000718
 8001118:	20000714 	.word	0x20000714
 800111c:	2000046c 	.word	0x2000046c

08001120 <lcd_upDate_IT>:


void lcd_upDate_IT(void){
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	if (flag_sendLcd) __lcd_sendBuff_IT();
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <lcd_upDate_IT+0x14>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <lcd_upDate_IT+0x10>
 800112c:	f7ff ff96 	bl	800105c <__lcd_sendBuff_IT>
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000068 	.word	0x20000068

08001138 <_lcd_ISR>:


/* Insert the next function in your ISR*/
void _lcd_ISR (void){
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
	I2CtxComplete=1;
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <_lcd_ISR+0x14>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	20000069 	.word	0x20000069

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001156:	f001 f9d3 	bl	8002500 <HAL_Init>

  /* USER CODE BEGIN Init */
  firstDoTunning = 36;
 800115a:	4ba4      	ldr	r3, [pc, #656]	; (80013ec <main+0x29c>)
 800115c:	2224      	movs	r2, #36	; 0x24
 800115e:	701a      	strb	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001160:	f000 f96e 	bl	8001440 <SystemClock_Config>
   */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001164:	f7ff fd0c 	bl	8000b80 <MX_GPIO_Init>
  MX_DAC_Init();
 8001168:	f7ff fc92 	bl	8000a90 <MX_DAC_Init>
  MX_I2C1_Init();
 800116c:	f7ff fd84 	bl	8000c78 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001170:	f00a fc7e 	bl	800ba70 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001174:	f000 ffec 	bl	8002150 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001178:	f001 f836 	bl	80021e8 <MX_TIM3_Init>
  MX_ADC1_Init();
 800117c:	f7ff fbd6 	bl	800092c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001180:	f001 f8c2 	bl	8002308 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001184:	f001 f8ea 	bl	800235c <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8001188:	f000 fe7e 	bl	8001e88 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  spi_74HC165_init(&hspi1, PL_bot_GPIO_Port, PL_bot_Pin, CE_bot_GPIO_Port, CE_bot_Pin);
 800118c:	2340      	movs	r3, #64	; 0x40
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	4b97      	ldr	r3, [pc, #604]	; (80013f0 <main+0x2a0>)
 8001192:	2220      	movs	r2, #32
 8001194:	4996      	ldr	r1, [pc, #600]	; (80013f0 <main+0x2a0>)
 8001196:	4897      	ldr	r0, [pc, #604]	; (80013f4 <main+0x2a4>)
 8001198:	f7ff f996 	bl	80004c8 <spi_74HC165_init>

  HAL_TIM_Base_Start_IT(&htim2); // 1 ms tick timer.
 800119c:	4896      	ldr	r0, [pc, #600]	; (80013f8 <main+0x2a8>)
 800119e:	f006 fcd0 	bl	8007b42 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); // 44100Hz timer.
 80011a2:	4896      	ldr	r0, [pc, #600]	; (80013fc <main+0x2ac>)
 80011a4:	f006 fccd 	bl	8007b42 <HAL_TIM_Base_Start_IT>

  osc_dac_init(&hdac, DAC_CHANNEL_1);
 80011a8:	2100      	movs	r1, #0
 80011aa:	4895      	ldr	r0, [pc, #596]	; (8001400 <main+0x2b0>)
 80011ac:	f000 fd72 	bl	8001c94 <osc_dac_init>
  osc_setRatios(100, 100, 100);
 80011b0:	2264      	movs	r2, #100	; 0x64
 80011b2:	2164      	movs	r1, #100	; 0x64
 80011b4:	2064      	movs	r0, #100	; 0x64
 80011b6:	f000 fe3b 	bl	8001e30 <osc_setRatios>

  lcd_init(&hi2c1, 0x3f);
 80011ba:	213f      	movs	r1, #63	; 0x3f
 80011bc:	4891      	ldr	r0, [pc, #580]	; (8001404 <main+0x2b4>)
 80011be:	f7ff feb7 	bl	8000f30 <lcd_init>
  turnOnScreen();
 80011c2:	f7ff fa2b 	bl	800061c <turnOnScreen>
  mainScreen();
 80011c6:	f7ff fa8b 	bl	80006e0 <mainScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	switch (screenNum){
 80011ca:	4b8f      	ldr	r3, [pc, #572]	; (8001408 <main+0x2b8>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	3b03      	subs	r3, #3
 80011d0:	2b08      	cmp	r3, #8
 80011d2:	d856      	bhi.n	8001282 <main+0x132>
 80011d4:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <main+0x8c>)
 80011d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011da:	bf00      	nop
 80011dc:	08001201 	.word	0x08001201
 80011e0:	0800120f 	.word	0x0800120f
 80011e4:	0800121d 	.word	0x0800121d
 80011e8:	08001283 	.word	0x08001283
 80011ec:	0800122b 	.word	0x0800122b
 80011f0:	08001247 	.word	0x08001247
 80011f4:	08001239 	.word	0x08001239
 80011f8:	08001261 	.word	0x08001261
 80011fc:	0800126f 	.word	0x0800126f
	  		case MAIN_SCREEN:
	  			mainScreen();
 8001200:	f7ff fa6e 	bl	80006e0 <mainScreen>
	  			last_screenNum = screenNum;
 8001204:	4b80      	ldr	r3, [pc, #512]	; (8001408 <main+0x2b8>)
 8001206:	781a      	ldrb	r2, [r3, #0]
 8001208:	4b80      	ldr	r3, [pc, #512]	; (800140c <main+0x2bc>)
 800120a:	701a      	strb	r2, [r3, #0]
	  		break;
 800120c:	e03a      	b.n	8001284 <main+0x134>
	  		case CHORD_SCREEN:
	  			chordScreen();
 800120e:	f7ff fa21 	bl	8000654 <chordScreen>
	  			last_screenNum = screenNum;
 8001212:	4b7d      	ldr	r3, [pc, #500]	; (8001408 <main+0x2b8>)
 8001214:	781a      	ldrb	r2, [r3, #0]
 8001216:	4b7d      	ldr	r3, [pc, #500]	; (800140c <main+0x2bc>)
 8001218:	701a      	strb	r2, [r3, #0]
	  		break;
 800121a:	e033      	b.n	8001284 <main+0x134>
	  		case TUNNE_SCREEN:
	  			tunneScreen();
 800121c:	f7ff fad4 	bl	80007c8 <tunneScreen>
	  			last_screenNum = screenNum;
 8001220:	4b79      	ldr	r3, [pc, #484]	; (8001408 <main+0x2b8>)
 8001222:	781a      	ldrb	r2, [r3, #0]
 8001224:	4b79      	ldr	r3, [pc, #484]	; (800140c <main+0x2bc>)
 8001226:	701a      	strb	r2, [r3, #0]
	  		break;
 8001228:	e02c      	b.n	8001284 <main+0x134>
	  		case RECUEST_FOOTKEY_SCREEN:
	  			recuest_footkey();
 800122a:	f7ff fb05 	bl	8000838 <recuest_footkey>
	  			last_screenNum = screenNum; //this variable must store the CHORD_SCREEN value, to use it as return point.
 800122e:	4b76      	ldr	r3, [pc, #472]	; (8001408 <main+0x2b8>)
 8001230:	781a      	ldrb	r2, [r3, #0]
 8001232:	4b76      	ldr	r3, [pc, #472]	; (800140c <main+0x2bc>)
 8001234:	701a      	strb	r2, [r3, #0]
	  		break;
 8001236:	e025      	b.n	8001284 <main+0x134>
	  		case POPUP_OCTAVE:
	  			on_off_octave();
 8001238:	f7ff fae2 	bl	8000800 <on_off_octave>
	  			popup_time = 2000;
 800123c:	4b74      	ldr	r3, [pc, #464]	; (8001410 <main+0x2c0>)
 800123e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001242:	601a      	str	r2, [r3, #0]
	  		break;
 8001244:	e01e      	b.n	8001284 <main+0x134>
	  		case POPUP_SAVED_CHORD:
	  			pop_up_savedChord(lastKey_pos);
 8001246:	4b73      	ldr	r3, [pc, #460]	; (8001414 <main+0x2c4>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fb0c 	bl	8000868 <pop_up_savedChord>
	  			last_screenNum = CHORD_SCREEN;
 8001250:	4b6e      	ldr	r3, [pc, #440]	; (800140c <main+0x2bc>)
 8001252:	2204      	movs	r2, #4
 8001254:	701a      	strb	r2, [r3, #0]
	  			popup_time = 2000;
 8001256:	4b6e      	ldr	r3, [pc, #440]	; (8001410 <main+0x2c0>)
 8001258:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800125c:	601a      	str	r2, [r3, #0]
	  		break;
 800125e:	e011      	b.n	8001284 <main+0x134>
	  		case POPUP_SUSTAIN:
	  			pop_up_sustain();
 8001260:	f7ff fb28 	bl	80008b4 <pop_up_sustain>
	  			popup_time = 2000;
 8001264:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <main+0x2c0>)
 8001266:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800126a:	601a      	str	r2, [r3, #0]
	  		break;
 800126c:	e00a      	b.n	8001284 <main+0x134>
	  		case POPUP_CANCEL:
	  			pop_up_cancel();
 800126e:	f7ff fb4d 	bl	800090c <pop_up_cancel>
	  			popup_time = 2000;
 8001272:	4b67      	ldr	r3, [pc, #412]	; (8001410 <main+0x2c0>)
 8001274:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001278:	601a      	str	r2, [r3, #0]
	  			last_screenNum = CHORD_SCREEN;
 800127a:	4b64      	ldr	r3, [pc, #400]	; (800140c <main+0x2bc>)
 800127c:	2204      	movs	r2, #4
 800127e:	701a      	strb	r2, [r3, #0]
	  		break;
 8001280:	e000      	b.n	8001284 <main+0x134>
	  		default:
	  		break;
 8001282:	bf00      	nop
	  	}
	  	screenNum = NO_SCREEN;
 8001284:	4b60      	ldr	r3, [pc, #384]	; (8001408 <main+0x2b8>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]

	  	if (popup_timeUp){
 800128a:	4b63      	ldr	r3, [pc, #396]	; (8001418 <main+0x2c8>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00a      	beq.n	80012aa <main+0x15a>
	  		if (screenNum == NO_SCREEN) screenNum = last_screenNum;
 8001294:	4b5c      	ldr	r3, [pc, #368]	; (8001408 <main+0x2b8>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d103      	bne.n	80012a4 <main+0x154>
 800129c:	4b5b      	ldr	r3, [pc, #364]	; (800140c <main+0x2bc>)
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	4b59      	ldr	r3, [pc, #356]	; (8001408 <main+0x2b8>)
 80012a2:	701a      	strb	r2, [r3, #0]
	  		popup_timeUp = 0;
 80012a4:	4b5c      	ldr	r3, [pc, #368]	; (8001418 <main+0x2c8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
	  	}

	  	if (GETBUTTONSTATUS(IN_SUST_PROP, buttonFall)) sustainProp();
 80012aa:	4b5c      	ldr	r3, [pc, #368]	; (800141c <main+0x2cc>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <main+0x16a>
 80012b6:	f000 f92d 	bl	8001514 <sustainProp>
	  	if (GETBUTTONSTATUS(IN_SUST_MIDI, buttonFall)) sustainMIDI();
 80012ba:	4b58      	ldr	r3, [pc, #352]	; (800141c <main+0x2cc>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <main+0x17a>
 80012c6:	f000 f975 	bl	80015b4 <sustainMIDI>
	  	if (GETBUTTONSTATUS(IN_CHORD, buttonFall)) inputChord();
 80012ca:	4b54      	ldr	r3, [pc, #336]	; (800141c <main+0x2cc>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <main+0x18a>
 80012d6:	f000 f9b1 	bl	800163c <inputChord>
	  	inputOctave();
 80012da:	f000 f9d7 	bl	800168c <inputOctave>
	  	if (GETBUTTONSTATUS(IN_TUNNE, buttonFall)) inputTunne();
 80012de:	4b4f      	ldr	r3, [pc, #316]	; (800141c <main+0x2cc>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <main+0x19e>
 80012ea:	f000 fa03 	bl	80016f4 <inputTunne>
	  	inputPresets();
 80012ee:	f000 fa29 	bl	8001744 <inputPresets>
	  		default:
	  		break;
	  	}
	  	*/

	    switch (menu){ //manage the recuested menu function.
 80012f2:	4b4b      	ldr	r3, [pc, #300]	; (8001420 <main+0x2d0>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	3b03      	subs	r3, #3
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d81c      	bhi.n	8001336 <main+0x1e6>
 80012fc:	a201      	add	r2, pc, #4	; (adr r2, 8001304 <main+0x1b4>)
 80012fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001302:	bf00      	nop
 8001304:	08001319 	.word	0x08001319
 8001308:	0800131f 	.word	0x0800131f
 800130c:	08001329 	.word	0x08001329
 8001310:	08001337 	.word	0x08001337
 8001314:	08001333 	.word	0x08001333
	    	case MAIN_SCREEN:
	    		inputNotes();
 8001318:	f000 fa44 	bl	80017a4 <inputNotes>
	    	break;
 800131c:	e00c      	b.n	8001338 <main+0x1e8>
	  		case CHORD_SCREEN:
	  			chordSelect();
 800131e:	f000 fb3f 	bl	80019a0 <chordSelect>
	  			inputNotes();
 8001322:	f000 fa3f 	bl	80017a4 <inputNotes>
	  		break;
 8001326:	e007      	b.n	8001338 <main+0x1e8>
	  		case TUNNE_SCREEN:
	  			tunneSelect();
 8001328:	f000 fbec 	bl	8001b04 <tunneSelect>
	  			inputNotes();
 800132c:	f000 fa3a 	bl	80017a4 <inputNotes>
	  		break;
 8001330:	e002      	b.n	8001338 <main+0x1e8>
	  		case RECUEST_FOOTKEY_SCREEN:
	  			inputSaveChord(); // @suppress("No break at end of case")
 8001332:	f000 fae7 	bl	8001904 <inputSaveChord>
	  		default:
	  		break;
 8001336:	bf00      	nop

	    }

	    MIDI_SendCheck();
 8001338:	f00a fdec 	bl	800bf14 <MIDI_SendCheck>

		if (flag_dac != 0){
 800133c:	4b39      	ldr	r3, [pc, #228]	; (8001424 <main+0x2d4>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d004      	beq.n	800134e <main+0x1fe>
		  osc_dac_update();
 8001344:	f000 fcc2 	bl	8001ccc <osc_dac_update>
		  flag_dac = 0;
 8001348:	4b36      	ldr	r3, [pc, #216]	; (8001424 <main+0x2d4>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
		}

	    if (flag_tick != 0){
 800134e:	4b36      	ldr	r3, [pc, #216]	; (8001428 <main+0x2d8>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f43f af39 	beq.w	80011ca <main+0x7a>

	    	if (lcd_refresh_time != 0){
 8001358:	4b34      	ldr	r3, [pc, #208]	; (800142c <main+0x2dc>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <main+0x21e>
	    		lcd_refresh_time--;
 8001360:	4b32      	ldr	r3, [pc, #200]	; (800142c <main+0x2dc>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	3b01      	subs	r3, #1
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b30      	ldr	r3, [pc, #192]	; (800142c <main+0x2dc>)
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	e004      	b.n	8001378 <main+0x228>
	    	}else{
	    		lcd_upDate_IT();
 800136e:	f7ff fed7 	bl	8001120 <lcd_upDate_IT>
	    		lcd_refresh_time = 25;
 8001372:	4b2e      	ldr	r3, [pc, #184]	; (800142c <main+0x2dc>)
 8001374:	2219      	movs	r2, #25
 8001376:	701a      	strb	r2, [r3, #0]
	    	}//end if lcd_refresh_time

	    	if (popup_time != 0){
 8001378:	4b25      	ldr	r3, [pc, #148]	; (8001410 <main+0x2c0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00b      	beq.n	8001398 <main+0x248>
				popup_time--;
 8001380:	4b23      	ldr	r3, [pc, #140]	; (8001410 <main+0x2c0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3b01      	subs	r3, #1
 8001386:	4a22      	ldr	r2, [pc, #136]	; (8001410 <main+0x2c0>)
 8001388:	6013      	str	r3, [r2, #0]
				if (popup_time == 1) popup_timeUp = 1;
 800138a:	4b21      	ldr	r3, [pc, #132]	; (8001410 <main+0x2c0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d102      	bne.n	8001398 <main+0x248>
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <main+0x2c8>)
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
			}//end if popup_time

	    	if (refresh_buttons != 0){
 8001398:	4b25      	ldr	r3, [pc, #148]	; (8001430 <main+0x2e0>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d006      	beq.n	80013ae <main+0x25e>
	    		refresh_buttons--;
 80013a0:	4b23      	ldr	r3, [pc, #140]	; (8001430 <main+0x2e0>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b21      	ldr	r3, [pc, #132]	; (8001430 <main+0x2e0>)
 80013aa:	701a      	strb	r2, [r3, #0]
 80013ac:	e01a      	b.n	80013e4 <main+0x294>
	    	}else{
	    		last_button = read_button;
 80013ae:	4b21      	ldr	r3, [pc, #132]	; (8001434 <main+0x2e4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a21      	ldr	r2, [pc, #132]	; (8001438 <main+0x2e8>)
 80013b4:	6013      	str	r3, [r2, #0]
	    		spi_74HC165_receive((uint8_t *)&read_button, sizeof(read_button));
 80013b6:	2104      	movs	r1, #4
 80013b8:	481e      	ldr	r0, [pc, #120]	; (8001434 <main+0x2e4>)
 80013ba:	f7ff f8ad 	bl	8000518 <spi_74HC165_receive>

	    		buttonFall = last_button & ~read_button;
 80013be:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <main+0x2e4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	43da      	mvns	r2, r3
 80013c4:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <main+0x2e8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4013      	ands	r3, r2
 80013ca:	4a14      	ldr	r2, [pc, #80]	; (800141c <main+0x2cc>)
 80013cc:	6013      	str	r3, [r2, #0]
	    		buttonRise = ~last_button & read_button;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <main+0x2e8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	43da      	mvns	r2, r3
 80013d4:	4b17      	ldr	r3, [pc, #92]	; (8001434 <main+0x2e4>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4013      	ands	r3, r2
 80013da:	4a18      	ldr	r2, [pc, #96]	; (800143c <main+0x2ec>)
 80013dc:	6013      	str	r3, [r2, #0]

	    		refresh_buttons = 20;
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <main+0x2e0>)
 80013e0:	2214      	movs	r2, #20
 80013e2:	701a      	strb	r2, [r3, #0]
	    	}

	    	flag_tick = 0;
 80013e4:	4b10      	ldr	r3, [pc, #64]	; (8001428 <main+0x2d8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
	  	switch (screenNum){
 80013ea:	e6ee      	b.n	80011ca <main+0x7a>
 80013ec:	200003ac 	.word	0x200003ac
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	20000730 	.word	0x20000730
 80013f8:	200007c8 	.word	0x200007c8
 80013fc:	20000788 	.word	0x20000788
 8001400:	20000404 	.word	0x20000404
 8001404:	20000418 	.word	0x20000418
 8001408:	20000366 	.word	0x20000366
 800140c:	20000076 	.word	0x20000076
 8001410:	20000368 	.word	0x20000368
 8001414:	2000071c 	.word	0x2000071c
 8001418:	2000036c 	.word	0x2000036c
 800141c:	2000035c 	.word	0x2000035c
 8001420:	20000075 	.word	0x20000075
 8001424:	2000036f 	.word	0x2000036f
 8001428:	2000036e 	.word	0x2000036e
 800142c:	20000077 	.word	0x20000077
 8001430:	20000074 	.word	0x20000074
 8001434:	2000006c 	.word	0x2000006c
 8001438:	20000070 	.word	0x20000070
 800143c:	20000360 	.word	0x20000360

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b094      	sub	sp, #80	; 0x50
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 0320 	add.w	r3, r7, #32
 800144a:	2230      	movs	r2, #48	; 0x30
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f00b f8ac 	bl	800c5ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	4b28      	ldr	r3, [pc, #160]	; (800150c <SystemClock_Config+0xcc>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	4a27      	ldr	r2, [pc, #156]	; (800150c <SystemClock_Config+0xcc>)
 800146e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001472:	6413      	str	r3, [r2, #64]	; 0x40
 8001474:	4b25      	ldr	r3, [pc, #148]	; (800150c <SystemClock_Config+0xcc>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001480:	2300      	movs	r3, #0
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	4b22      	ldr	r3, [pc, #136]	; (8001510 <SystemClock_Config+0xd0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a21      	ldr	r2, [pc, #132]	; (8001510 <SystemClock_Config+0xd0>)
 800148a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <SystemClock_Config+0xd0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800149c:	2301      	movs	r3, #1
 800149e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a6:	2302      	movs	r3, #2
 80014a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014b0:	2304      	movs	r3, #4
 80014b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014b4:	23a8      	movs	r3, #168	; 0xa8
 80014b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b8:	2302      	movs	r3, #2
 80014ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014bc:	2307      	movs	r3, #7
 80014be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c0:	f107 0320 	add.w	r3, r7, #32
 80014c4:	4618      	mov	r0, r3
 80014c6:	f005 f96f 	bl	80067a8 <HAL_RCC_OscConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014d0:	f000 fbd8 	bl	8001c84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d4:	230f      	movs	r3, #15
 80014d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d8:	2302      	movs	r3, #2
 80014da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	2105      	movs	r1, #5
 80014f2:	4618      	mov	r0, r3
 80014f4:	f005 fbc8 	bl	8006c88 <HAL_RCC_ClockConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014fe:	f000 fbc1 	bl	8001c84 <Error_Handler>
  }
}
 8001502:	bf00      	nop
 8001504:	3750      	adds	r7, #80	; 0x50
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800
 8001510:	40007000 	.word	0x40007000

08001514 <sustainProp>:

/* USER CODE BEGIN 4 */

void sustainProp (void){
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0

		for (int j = 0; j <= 12; j++){
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	e00b      	b.n	8001538 <sustainProp+0x24>
			sendChord(lastSendNote[j], 0, 1); // silents all notes
 8001520:	4a1e      	ldr	r2, [pc, #120]	; (800159c <sustainProp+0x88>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001528:	2201      	movs	r2, #1
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f000 fb27 	bl	8001b80 <sendChord>
		for (int j = 0; j <= 12; j++){
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3301      	adds	r3, #1
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b0c      	cmp	r3, #12
 800153c:	ddf0      	ble.n	8001520 <sustainProp+0xc>
		}

		switch (sustainMode){
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <sustainProp+0x8c>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d01b      	beq.n	800157e <sustainProp+0x6a>
 8001546:	2b02      	cmp	r3, #2
 8001548:	d002      	beq.n	8001550 <sustainProp+0x3c>
 800154a:	2b00      	cmp	r3, #0
 800154c:	d010      	beq.n	8001570 <sustainProp+0x5c>
 800154e:	e01d      	b.n	800158c <sustainProp+0x78>
			case 2:
				//event = {0x0B, 0xB0 | MIDI_CHANNEL, 64, 0};
				//MidiUSB.sendMIDI(event);
				midi_msg[0] = 0x0B; //0x0B == type event (control change)
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <sustainProp+0x90>)
 8001552:	220b      	movs	r2, #11
 8001554:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <sustainProp+0x90>)
 8001558:	22b1      	movs	r2, #177	; 0xb1
 800155a:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	// 64 == sustain.
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <sustainProp+0x90>)
 800155e:	2240      	movs	r2, #64	; 0x40
 8001560:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 0;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <sustainProp+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4); // @suppress("No break at end of case")
 8001568:	2104      	movs	r1, #4
 800156a:	480e      	ldr	r0, [pc, #56]	; (80015a4 <sustainProp+0x90>)
 800156c:	f00a fc9c 	bl	800bea8 <MIDI_SendBuffer>
			case 0:
				lastSustainNote = 0;
 8001570:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <sustainProp+0x94>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
				sustainMode = 1; //prop
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <sustainProp+0x8c>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
			break;
 800157c:	e006      	b.n	800158c <sustainProp+0x78>

			case 1:
				sustainFlag = 1;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <sustainProp+0x98>)
 8001580:	2201      	movs	r2, #1
 8001582:	701a      	strb	r2, [r3, #0]
				sustainMode = 0;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <sustainProp+0x8c>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
			break;
 800158a:	bf00      	nop
		} //end switch

		screenNum = POPUP_SUSTAIN;
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <sustainProp+0x9c>)
 800158e:	220a      	movs	r2, #10
 8001590:	701a      	strb	r2, [r3, #0]

} //end sustainProp()
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000320 	.word	0x20000320
 80015a0:	20000358 	.word	0x20000358
 80015a4:	20000724 	.word	0x20000724
 80015a8:	20000354 	.word	0x20000354
 80015ac:	2000006a 	.word	0x2000006a
 80015b0:	20000366 	.word	0x20000366

080015b4 <sustainMIDI>:

void sustainMIDI (void){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0

		switch (sustainMode){
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <sustainMIDI+0x78>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	db2f      	blt.n	8001620 <sustainMIDI+0x6c>
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	dd02      	ble.n	80015ca <sustainMIDI+0x16>
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d017      	beq.n	80015f8 <sustainMIDI+0x44>
 80015c8:	e02a      	b.n	8001620 <sustainMIDI+0x6c>
			case 0:
			case 1:
				sustainFlag = 1;	// needed to normal notes functioning.
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <sustainMIDI+0x7c>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]

				midi_msg[0] = 0x0B;		//0x0B == type event (control change),
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <sustainMIDI+0x80>)
 80015d2:	220b      	movs	r2, #11
 80015d4:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <sustainMIDI+0x80>)
 80015d8:	22b1      	movs	r2, #177	; 0xb1
 80015da:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	//64 == sustain.
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <sustainMIDI+0x80>)
 80015de:	2240      	movs	r2, #64	; 0x40
 80015e0:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 127;
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <sustainMIDI+0x80>)
 80015e4:	227f      	movs	r2, #127	; 0x7f
 80015e6:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4);
 80015e8:	2104      	movs	r1, #4
 80015ea:	4812      	ldr	r0, [pc, #72]	; (8001634 <sustainMIDI+0x80>)
 80015ec:	f00a fc5c 	bl	800bea8 <MIDI_SendBuffer>

				sustainMode = 2;
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <sustainMIDI+0x78>)
 80015f2:	2202      	movs	r2, #2
 80015f4:	701a      	strb	r2, [r3, #0]
			break;
 80015f6:	e013      	b.n	8001620 <sustainMIDI+0x6c>
			case 2:
				midi_msg[0] = 0x0B;	//0x0B == type event (control change)
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <sustainMIDI+0x80>)
 80015fa:	220b      	movs	r2, #11
 80015fc:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 80015fe:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <sustainMIDI+0x80>)
 8001600:	22b1      	movs	r2, #177	; 0xb1
 8001602:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	//64 == sustain.
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <sustainMIDI+0x80>)
 8001606:	2240      	movs	r2, #64	; 0x40
 8001608:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 0;
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <sustainMIDI+0x80>)
 800160c:	2200      	movs	r2, #0
 800160e:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4);
 8001610:	2104      	movs	r1, #4
 8001612:	4808      	ldr	r0, [pc, #32]	; (8001634 <sustainMIDI+0x80>)
 8001614:	f00a fc48 	bl	800bea8 <MIDI_SendBuffer>

				sustainMode = 0;
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <sustainMIDI+0x78>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
			break;
 800161e:	bf00      	nop
		} //end switch

		screenNum = POPUP_SUSTAIN;
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <sustainMIDI+0x84>)
 8001622:	220a      	movs	r2, #10
 8001624:	701a      	strb	r2, [r3, #0]
} //end sustainMIDI()
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000358 	.word	0x20000358
 8001630:	2000006a 	.word	0x2000006a
 8001634:	20000724 	.word	0x20000724
 8001638:	20000366 	.word	0x20000366

0800163c <inputChord>:

void inputChord (void){
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

		acorde = !acorde;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <inputChord+0x44>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	bf0c      	ite	eq
 8001648:	2301      	moveq	r3, #1
 800164a:	2300      	movne	r3, #0
 800164c:	b2db      	uxtb	r3, r3
 800164e:	461a      	mov	r2, r3
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <inputChord+0x44>)
 8001652:	701a      	strb	r2, [r3, #0]

		if (acorde){
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <inputChord+0x44>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d006      	beq.n	800166a <inputChord+0x2e>
			screenNum = CHORD_SCREEN;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <inputChord+0x48>)
 800165e:	2204      	movs	r2, #4
 8001660:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN;
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <inputChord+0x4c>)
 8001664:	2204      	movs	r2, #4
 8001666:	701a      	strb	r2, [r3, #0]
		}else{
			screenNum = MAIN_SCREEN;
			menu = MAIN_SCREEN;
		} //end if acorde

} //end inputChord()
 8001668:	e005      	b.n	8001676 <inputChord+0x3a>
			screenNum = MAIN_SCREEN;
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <inputChord+0x48>)
 800166c:	2203      	movs	r2, #3
 800166e:	701a      	strb	r2, [r3, #0]
			menu = MAIN_SCREEN;
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <inputChord+0x4c>)
 8001672:	2203      	movs	r2, #3
 8001674:	701a      	strb	r2, [r3, #0]
} //end inputChord()
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	20000364 	.word	0x20000364
 8001684:	20000366 	.word	0x20000366
 8001688:	20000075 	.word	0x20000075

0800168c <inputOctave>:


void inputOctave (void){
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

	if(GETBUTTONSTATUS(IN_OCT_G, buttonFall)){
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <inputOctave+0x5c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d007      	beq.n	80016ac <inputOctave+0x20>
		octava = -1;
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <inputOctave+0x60>)
 800169e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016a2:	601a      	str	r2, [r3, #0]
		screenNum=POPUP_OCTAVE;
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <inputOctave+0x64>)
 80016a6:	2209      	movs	r2, #9
 80016a8:	701a      	strb	r2, [r3, #0]
		return;
 80016aa:	e019      	b.n	80016e0 <inputOctave+0x54>
	}

	if (GETBUTTONSTATUS(IN_OCT_M, buttonFall)){
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <inputOctave+0x5c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d006      	beq.n	80016c6 <inputOctave+0x3a>
		octava = 0;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <inputOctave+0x60>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
		screenNum=POPUP_OCTAVE;
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <inputOctave+0x64>)
 80016c0:	2209      	movs	r2, #9
 80016c2:	701a      	strb	r2, [r3, #0]
		return;
 80016c4:	e00c      	b.n	80016e0 <inputOctave+0x54>
	}

	if (GETBUTTONSTATUS(IN_OCT_A, buttonFall)){
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <inputOctave+0x5c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d006      	beq.n	80016e0 <inputOctave+0x54>
		octava = 1;
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <inputOctave+0x60>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	601a      	str	r2, [r3, #0]
		screenNum=POPUP_OCTAVE;
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <inputOctave+0x64>)
 80016da:	2209      	movs	r2, #9
 80016dc:	701a      	strb	r2, [r3, #0]
		return;
 80016de:	bf00      	nop
	}
} //end inputOctave()
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	2000035c 	.word	0x2000035c
 80016ec:	200002e0 	.word	0x200002e0
 80016f0:	20000366 	.word	0x20000366

080016f4 <inputTunne>:


void inputTunne(void){
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

      tunne = !tunne;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <inputTunne+0x44>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	bf0c      	ite	eq
 8001700:	2301      	moveq	r3, #1
 8001702:	2300      	movne	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <inputTunne+0x44>)
 800170a:	701a      	strb	r2, [r3, #0]

	  if (tunne){
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <inputTunne+0x44>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <inputTunne+0x2e>
		screenNum = TUNNE_SCREEN;
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <inputTunne+0x48>)
 8001716:	2205      	movs	r2, #5
 8001718:	701a      	strb	r2, [r3, #0]
		menu = TUNNE_SCREEN;
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <inputTunne+0x4c>)
 800171c:	2205      	movs	r2, #5
 800171e:	701a      	strb	r2, [r3, #0]
	  }else{
		screenNum = MAIN_SCREEN;
		menu = MAIN_SCREEN;
	  } //end if tunne

} //end inputTunne()
 8001720:	e005      	b.n	800172e <inputTunne+0x3a>
		screenNum = MAIN_SCREEN;
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <inputTunne+0x48>)
 8001724:	2203      	movs	r2, #3
 8001726:	701a      	strb	r2, [r3, #0]
		menu = MAIN_SCREEN;
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <inputTunne+0x4c>)
 800172a:	2203      	movs	r2, #3
 800172c:	701a      	strb	r2, [r3, #0]
} //end inputTunne()
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	20000365 	.word	0x20000365
 800173c:	20000366 	.word	0x20000366
 8001740:	20000075 	.word	0x20000075

08001744 <inputPresets>:


void inputPresets (void){
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++){                                         // 6 presets en total.
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	e01e      	b.n	800178e <inputPresets+0x4a>

		if (GETBUTTONSTATUS(i + IN_PRESET0, buttonFall)){
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3310      	adds	r3, #16
 8001754:	2201      	movs	r2, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	461a      	mov	r2, r3
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <inputPresets+0x58>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4013      	ands	r3, r2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d010      	beq.n	8001788 <inputPresets+0x44>
			midi_msg[0] = 0x0C;	//0x0C == type event (program change)
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <inputPresets+0x5c>)
 8001768:	220c      	movs	r2, #12
 800176a:	701a      	strb	r2, [r3, #0]
			midi_msg[1] = 0xC0 | 1;
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <inputPresets+0x5c>)
 800176e:	22c1      	movs	r2, #193	; 0xc1
 8001770:	705a      	strb	r2, [r3, #1]
			midi_msg[2] = i;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <inputPresets+0x5c>)
 8001778:	709a      	strb	r2, [r3, #2]
			midi_msg[3] = 0;	//last param == 0 (unused in program change).
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <inputPresets+0x5c>)
 800177c:	2200      	movs	r2, #0
 800177e:	70da      	strb	r2, [r3, #3]
			MIDI_SendBuffer(midi_msg, 4);
 8001780:	2104      	movs	r1, #4
 8001782:	4807      	ldr	r0, [pc, #28]	; (80017a0 <inputPresets+0x5c>)
 8001784:	f00a fb90 	bl	800bea8 <MIDI_SendBuffer>
	for (int i = 0; i < 6; i++){                                         // 6 presets en total.
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3301      	adds	r3, #1
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b05      	cmp	r3, #5
 8001792:	dddd      	ble.n	8001750 <inputPresets+0xc>
		} //end if

	} //end for

} //end inputPresets()
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	2000035c 	.word	0x2000035c
 80017a0:	20000724 	.word	0x20000724

080017a4 <inputNotes>:


void inputNotes(void){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0

  uint8_t pressedNote;

  for (int i = 0; i <= 12; i++){
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	e08e      	b.n	80018ce <inputNotes+0x12a>

//    buttonState[i + IN_DO] = HAL_GPIO_ReadPin(notePort_list[i], notePin_list[i]); //read current button pin.

//    if(!buttonState[i + IN_DO] && lastState[i + IN_DO]){  // If we read 1, and the last time we read 0, means button was just pressed.
    if (GETBUTTONSTATUS(i + IN_DO, buttonFall)){
 80017b0:	2201      	movs	r2, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b49      	ldr	r3, [pc, #292]	; (80018e0 <inputNotes+0x13c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d067      	beq.n	8001894 <inputNotes+0xf0>
        pressedNote = firstDoTunning + i + 12 * octava; //detects the pressed note.
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b46      	ldr	r3, [pc, #280]	; (80018e4 <inputNotes+0x140>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4413      	add	r3, r2
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b45      	ldr	r3, [pc, #276]	; (80018e8 <inputNotes+0x144>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	4619      	mov	r1, r3
 80017d8:	0049      	lsls	r1, r1, #1
 80017da:	440b      	add	r3, r1
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	4413      	add	r3, r2
 80017e2:	70fb      	strb	r3, [r7, #3]

    	if (acorde){ //If chord mode is on...
 80017e4:	4b41      	ldr	r3, [pc, #260]	; (80018ec <inputNotes+0x148>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00c      	beq.n	8001806 <inputNotes+0x62>
            lastSendNote[i] = makeChord(pressedNote, i); // saves the current chord config. on pressed note.
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fecb 	bl	8000590 <makeChord>
 80017fa:	4601      	mov	r1, r0
 80017fc:	4a3c      	ldr	r2, [pc, #240]	; (80018f0 <inputNotes+0x14c>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001804:	e004      	b.n	8001810 <inputNotes+0x6c>

        }else{ //If chord mode is off...

            lastSendNote[i] = pressedNote; // saves nothing but pressed note.
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	4939      	ldr	r1, [pc, #228]	; (80018f0 <inputNotes+0x14c>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        } //end if acorde


        if (sustainMode == 1){ // If proprietary sustain mode on...
 8001810:	4b38      	ldr	r3, [pc, #224]	; (80018f4 <inputNotes+0x150>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d122      	bne.n	800185e <inputNotes+0xba>

			if (lastSustainNote != lastSendNote[i]){ // If last sustained note differs from the current pressed one...
 8001818:	4a35      	ldr	r2, [pc, #212]	; (80018f0 <inputNotes+0x14c>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001820:	4b35      	ldr	r3, [pc, #212]	; (80018f8 <inputNotes+0x154>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d010      	beq.n	800184a <inputNotes+0xa6>

				sendChord(lastSustainNote, 0, 1); // mute current chord. 0 in second param means "noteOff".
 8001828:	4b33      	ldr	r3, [pc, #204]	; (80018f8 <inputNotes+0x154>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2201      	movs	r2, #1
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f000 f9a5 	bl	8001b80 <sendChord>
				lastSustainNote = lastSendNote[i]; // and saves the current sustained note.
 8001836:	4a2e      	ldr	r2, [pc, #184]	; (80018f0 <inputNotes+0x14c>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183e:	4a2e      	ldr	r2, [pc, #184]	; (80018f8 <inputNotes+0x154>)
 8001840:	6013      	str	r3, [r2, #0]
				sustainFlag = 1; // turn sustained note on
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <inputNotes+0x158>)
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	e009      	b.n	800185e <inputNotes+0xba>

			}else{ // If last sustained note and the current pressed one are the same...

				sustainFlag = !sustainFlag; // turn sustained note off.
 800184a:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <inputNotes+0x158>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	bf0c      	ite	eq
 8001852:	2301      	moveq	r3, #1
 8001854:	2300      	movne	r3, #0
 8001856:	b2db      	uxtb	r3, r3
 8001858:	461a      	mov	r2, r3
 800185a:	4b28      	ldr	r3, [pc, #160]	; (80018fc <inputNotes+0x158>)
 800185c:	701a      	strb	r2, [r3, #0]

			}//end if lastSustainNote...
        }//end if sustainMode


        sendChord(lastSendNote[i], 127 * sustainFlag, 1); //send the appropriate midi message.
 800185e:	4a24      	ldr	r2, [pc, #144]	; (80018f0 <inputNotes+0x14c>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001866:	4b25      	ldr	r3, [pc, #148]	; (80018fc <inputNotes+0x158>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	4613      	mov	r3, r2
 800186e:	01db      	lsls	r3, r3, #7
 8001870:	1a9b      	subs	r3, r3, r2
 8001872:	2201      	movs	r2, #1
 8001874:	4619      	mov	r1, r3
 8001876:	f000 f983 	bl	8001b80 <sendChord>

        if (sustainFlag != 0){
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <inputNotes+0x158>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d004      	beq.n	800188c <inputNotes+0xe8>
        	osc_setNote(pressedNote);
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	4618      	mov	r0, r3
 8001886:	f000 faad 	bl	8001de4 <osc_setNote>
 800188a:	e01d      	b.n	80018c8 <inputNotes+0x124>
        }else{
        	osc_setNote(0);
 800188c:	2000      	movs	r0, #0
 800188e:	f000 faa9 	bl	8001de4 <osc_setNote>
 8001892:	e019      	b.n	80018c8 <inputNotes+0x124>
        }

    }else if(GETBUTTONSTATUS(i + IN_DO, buttonRise)){
 8001894:	2201      	movs	r2, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	461a      	mov	r2, r3
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <inputNotes+0x15c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00f      	beq.n	80018c8 <inputNotes+0x124>

    	if (sustainMode != 1){ // If proprietary sustain mode off...
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <inputNotes+0x150>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d00b      	beq.n	80018c8 <inputNotes+0x124>
			sendChord(lastSendNote[i], 0, 1); // 0 in second param means "noteOff".
 80018b0:	4a0f      	ldr	r2, [pc, #60]	; (80018f0 <inputNotes+0x14c>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b8:	2201      	movs	r2, #1
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 f95f 	bl	8001b80 <sendChord>
			osc_setNote(0); // turn DAC off.
 80018c2:	2000      	movs	r0, #0
 80018c4:	f000 fa8e 	bl	8001de4 <osc_setNote>
  for (int i = 0; i <= 12; i++){
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3301      	adds	r3, #1
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b0c      	cmp	r3, #12
 80018d2:	f77f af6d 	ble.w	80017b0 <inputNotes+0xc>
        }
    }

  }
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000035c 	.word	0x2000035c
 80018e4:	200003ac 	.word	0x200003ac
 80018e8:	200002e0 	.word	0x200002e0
 80018ec:	20000364 	.word	0x20000364
 80018f0:	20000320 	.word	0x20000320
 80018f4:	20000358 	.word	0x20000358
 80018f8:	20000354 	.word	0x20000354
 80018fc:	2000006a 	.word	0x2000006a
 8001900:	20000360 	.word	0x20000360

08001904 <inputSaveChord>:


void inputSaveChord(void){
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0

uint8_t flag = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	71fb      	strb	r3, [r7, #7]

	for (int i = 0; i <= 12; i++){
 800190e:	2300      	movs	r3, #0
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	e021      	b.n	8001958 <inputSaveChord+0x54>

//		buttonState[i + IN_DO] = HAL_GPIO_ReadPin(notePort_list[i], notePin_list[i]);

//		if(!buttonState[i + IN_DO] && lastState[i + IN_DO]){       // If we read 1, and the last time we read 0, means button was just pressed
		if (GETBUTTONSTATUS(i + IN_DO, buttonFall)){
 8001914:	2201      	movs	r2, #1
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	461a      	mov	r2, r3
 800191e:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <inputSaveChord+0x84>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d014      	beq.n	8001952 <inputSaveChord+0x4e>

			//storing the selected chord:
			setChord(i);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fe51 	bl	80005d4 <setChord>
			footKey = NORMAL;
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <inputSaveChord+0x88>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
			screenNum = POPUP_SAVED_CHORD;
 8001938:	4b15      	ldr	r3, [pc, #84]	; (8001990 <inputSaveChord+0x8c>)
 800193a:	2208      	movs	r2, #8
 800193c:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN; 				//return point to chordSelect().
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <inputSaveChord+0x90>)
 8001940:	2204      	movs	r2, #4
 8001942:	701a      	strb	r2, [r3, #0]
			lastKey_pos = i; 					// to show in screen the foot key pressed.
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <inputSaveChord+0x94>)
 800194a:	701a      	strb	r2, [r3, #0]
			flag = 1;
 800194c:	2301      	movs	r3, #1
 800194e:	71fb      	strb	r3, [r7, #7]
			break; 								 //it must exit from function.
 8001950:	e005      	b.n	800195e <inputSaveChord+0x5a>
	for (int i = 0; i <= 12; i++){
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	3301      	adds	r3, #1
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b0c      	cmp	r3, #12
 800195c:	ddda      	ble.n	8001914 <inputSaveChord+0x10>
		} //end if getStatusButton
	} //end for

	if (!flag){
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10c      	bne.n	800197e <inputSaveChord+0x7a>
		if (d_pad == IN_LEFT){
 8001964:	4b0d      	ldr	r3, [pc, #52]	; (800199c <inputSaveChord+0x98>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b1c      	cmp	r3, #28
 800196a:	d108      	bne.n	800197e <inputSaveChord+0x7a>
			footKey = NORMAL;
 800196c:	4b07      	ldr	r3, [pc, #28]	; (800198c <inputSaveChord+0x88>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
			screenNum = POPUP_CANCEL;
 8001972:	4b07      	ldr	r3, [pc, #28]	; (8001990 <inputSaveChord+0x8c>)
 8001974:	220b      	movs	r2, #11
 8001976:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <inputSaveChord+0x90>)
 800197a:	2204      	movs	r2, #4
 800197c:	701a      	strb	r2, [r3, #0]
		}
	} //end if !flag

} //end inputSaveChord()
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	2000035c 	.word	0x2000035c
 800198c:	2000036d 	.word	0x2000036d
 8001990:	20000366 	.word	0x20000366
 8001994:	20000075 	.word	0x20000075
 8001998:	2000071c 	.word	0x2000071c
 800199c:	20000720 	.word	0x20000720

080019a0 <chordSelect>:

void chordSelect(void){
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0

  uint8_t flag = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	71fb      	strb	r3, [r7, #7]

  switch (chordSelect_cursor){
 80019aa:	4b4f      	ldr	r3, [pc, #316]	; (8001ae8 <chordSelect+0x148>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d034      	beq.n	8001a1c <chordSelect+0x7c>
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d302      	bcc.n	80019bc <chordSelect+0x1c>
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d06f      	beq.n	8001a9a <chordSelect+0xfa>
 80019ba:	e089      	b.n	8001ad0 <chordSelect+0x130>

		case 0:

			switch (d_pad){
 80019bc:	4b4b      	ldr	r3, [pc, #300]	; (8001aec <chordSelect+0x14c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b1c      	cmp	r3, #28
 80019c2:	d00c      	beq.n	80019de <chordSelect+0x3e>
 80019c4:	2b1d      	cmp	r3, #29
 80019c6:	d019      	beq.n	80019fc <chordSelect+0x5c>
 80019c8:	2b1b      	cmp	r3, #27
 80019ca:	d000      	beq.n	80019ce <chordSelect+0x2e>
					if (chord > 7)
						chord = 0;
					flag = 1;
					break;
			}
			break;
 80019cc:	e080      	b.n	8001ad0 <chordSelect+0x130>
					chordSelect_cursor++;
 80019ce:	4b46      	ldr	r3, [pc, #280]	; (8001ae8 <chordSelect+0x148>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	3301      	adds	r3, #1
 80019d4:	4a44      	ldr	r2, [pc, #272]	; (8001ae8 <chordSelect+0x148>)
 80019d6:	6013      	str	r3, [r2, #0]
					flag = 1;
 80019d8:	2301      	movs	r3, #1
 80019da:	71fb      	strb	r3, [r7, #7]
					break;
 80019dc:	e01d      	b.n	8001a1a <chordSelect+0x7a>
					chord--;
 80019de:	4b44      	ldr	r3, [pc, #272]	; (8001af0 <chordSelect+0x150>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	4a42      	ldr	r2, [pc, #264]	; (8001af0 <chordSelect+0x150>)
 80019e6:	6013      	str	r3, [r2, #0]
					if (chord < 0)
 80019e8:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <chordSelect+0x150>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	da02      	bge.n	80019f6 <chordSelect+0x56>
						chord = 7;
 80019f0:	4b3f      	ldr	r3, [pc, #252]	; (8001af0 <chordSelect+0x150>)
 80019f2:	2207      	movs	r2, #7
 80019f4:	601a      	str	r2, [r3, #0]
					flag = 1;
 80019f6:	2301      	movs	r3, #1
 80019f8:	71fb      	strb	r3, [r7, #7]
					break;
 80019fa:	e00e      	b.n	8001a1a <chordSelect+0x7a>
					chord++;
 80019fc:	4b3c      	ldr	r3, [pc, #240]	; (8001af0 <chordSelect+0x150>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	3301      	adds	r3, #1
 8001a02:	4a3b      	ldr	r2, [pc, #236]	; (8001af0 <chordSelect+0x150>)
 8001a04:	6013      	str	r3, [r2, #0]
					if (chord > 7)
 8001a06:	4b3a      	ldr	r3, [pc, #232]	; (8001af0 <chordSelect+0x150>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b07      	cmp	r3, #7
 8001a0c:	dd02      	ble.n	8001a14 <chordSelect+0x74>
						chord = 0;
 8001a0e:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <chordSelect+0x150>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
					flag = 1;
 8001a14:	2301      	movs	r3, #1
 8001a16:	71fb      	strb	r3, [r7, #7]
					break;
 8001a18:	bf00      	nop
			break;
 8001a1a:	e059      	b.n	8001ad0 <chordSelect+0x130>
		case 1:

			switch (d_pad){
 8001a1c:	4b33      	ldr	r3, [pc, #204]	; (8001aec <chordSelect+0x14c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	3b1a      	subs	r3, #26
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d853      	bhi.n	8001ace <chordSelect+0x12e>
 8001a26:	a201      	add	r2, pc, #4	; (adr r2, 8001a2c <chordSelect+0x8c>)
 8001a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2c:	08001a3d 	.word	0x08001a3d
 8001a30:	08001a4d 	.word	0x08001a4d
 8001a34:	08001a5d 	.word	0x08001a5d
 8001a38:	08001a7b 	.word	0x08001a7b
				case IN_UP:
					chordSelect_cursor--;
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <chordSelect+0x148>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	4a29      	ldr	r2, [pc, #164]	; (8001ae8 <chordSelect+0x148>)
 8001a44:	6013      	str	r3, [r2, #0]
					flag = 1;
 8001a46:	2301      	movs	r3, #1
 8001a48:	71fb      	strb	r3, [r7, #7]
					break;
 8001a4a:	e025      	b.n	8001a98 <chordSelect+0xf8>
				case IN_DOWN:
					chordSelect_cursor++;
 8001a4c:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <chordSelect+0x148>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	3301      	adds	r3, #1
 8001a52:	4a25      	ldr	r2, [pc, #148]	; (8001ae8 <chordSelect+0x148>)
 8001a54:	6013      	str	r3, [r2, #0]
					flag = 1;
 8001a56:	2301      	movs	r3, #1
 8001a58:	71fb      	strb	r3, [r7, #7]
					break;
 8001a5a:	e01d      	b.n	8001a98 <chordSelect+0xf8>
				case IN_LEFT:
					chordInv--;
 8001a5c:	4b25      	ldr	r3, [pc, #148]	; (8001af4 <chordSelect+0x154>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	4a24      	ldr	r2, [pc, #144]	; (8001af4 <chordSelect+0x154>)
 8001a64:	6013      	str	r3, [r2, #0]
					if (chordInv < 0)
 8001a66:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <chordSelect+0x154>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	da02      	bge.n	8001a74 <chordSelect+0xd4>
						chordInv = 2;
 8001a6e:	4b21      	ldr	r3, [pc, #132]	; (8001af4 <chordSelect+0x154>)
 8001a70:	2202      	movs	r2, #2
 8001a72:	601a      	str	r2, [r3, #0]
					flag = 1;
 8001a74:	2301      	movs	r3, #1
 8001a76:	71fb      	strb	r3, [r7, #7]
					break;
 8001a78:	e00e      	b.n	8001a98 <chordSelect+0xf8>
				case IN_RIGHT:
					chordInv++;
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <chordSelect+0x154>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	4a1c      	ldr	r2, [pc, #112]	; (8001af4 <chordSelect+0x154>)
 8001a82:	6013      	str	r3, [r2, #0]
					if (chordInv > 2)
 8001a84:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <chordSelect+0x154>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	dd02      	ble.n	8001a92 <chordSelect+0xf2>
						chordInv = 0;
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <chordSelect+0x154>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
					flag = 1;
 8001a92:	2301      	movs	r3, #1
 8001a94:	71fb      	strb	r3, [r7, #7]
					break;
 8001a96:	bf00      	nop
			}
			break;
 8001a98:	e019      	b.n	8001ace <chordSelect+0x12e>
		case 2:

			switch (d_pad){
 8001a9a:	4b14      	ldr	r3, [pc, #80]	; (8001aec <chordSelect+0x14c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2b1a      	cmp	r3, #26
 8001aa0:	d002      	beq.n	8001aa8 <chordSelect+0x108>
 8001aa2:	2b1d      	cmp	r3, #29
 8001aa4:	d008      	beq.n	8001ab8 <chordSelect+0x118>
					footKey = SAVE_CHORD; //
					menu = RECUEST_FOOTKEY_SCREEN;
					screenNum = RECUEST_FOOTKEY_SCREEN;
					break;
			}
			break;
 8001aa6:	e013      	b.n	8001ad0 <chordSelect+0x130>
					chordSelect_cursor--;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <chordSelect+0x148>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <chordSelect+0x148>)
 8001ab0:	6013      	str	r3, [r2, #0]
					flag = 1;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	71fb      	strb	r3, [r7, #7]
					break;
 8001ab6:	e009      	b.n	8001acc <chordSelect+0x12c>
					footKey = SAVE_CHORD; //
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <chordSelect+0x158>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]
					menu = RECUEST_FOOTKEY_SCREEN;
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <chordSelect+0x15c>)
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	701a      	strb	r2, [r3, #0]
					screenNum = RECUEST_FOOTKEY_SCREEN;
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <chordSelect+0x160>)
 8001ac6:	2207      	movs	r2, #7
 8001ac8:	701a      	strb	r2, [r3, #0]
					break;
 8001aca:	bf00      	nop
			break;
 8001acc:	e000      	b.n	8001ad0 <chordSelect+0x130>
			break;
 8001ace:	bf00      	nop
	}

  if (flag){        ///flag de impresion
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <chordSelect+0x13c>

      screenNum = CHORD_SCREEN;
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <chordSelect+0x160>)
 8001ad8:	2204      	movs	r2, #4
 8001ada:	701a      	strb	r2, [r3, #0]
  }
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	200003a8 	.word	0x200003a8
 8001aec:	20000720 	.word	0x20000720
 8001af0:	200003b0 	.word	0x200003b0
 8001af4:	200003b4 	.word	0x200003b4
 8001af8:	2000036d 	.word	0x2000036d
 8001afc:	20000075 	.word	0x20000075
 8001b00:	20000366 	.word	0x20000366

08001b04 <tunneSelect>:


void tunneSelect(void){
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
	uint8_t flag = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	71fb      	strb	r3, [r7, #7]

	switch (d_pad){
 8001b0e:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <tunneSelect+0x70>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b1c      	cmp	r3, #28
 8001b14:	d011      	beq.n	8001b3a <tunneSelect+0x36>
 8001b16:	2b1d      	cmp	r3, #29
 8001b18:	d11f      	bne.n	8001b5a <tunneSelect+0x56>
		case IN_RIGHT:
			firstDoTunning++;
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <tunneSelect+0x74>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <tunneSelect+0x74>)
 8001b24:	701a      	strb	r2, [r3, #0]
			if (firstDoTunning >MIDI_B2)
 8001b26:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <tunneSelect+0x74>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b2f      	cmp	r3, #47	; 0x2f
 8001b2c:	d902      	bls.n	8001b34 <tunneSelect+0x30>
				firstDoTunning = MIDI_C2;
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <tunneSelect+0x74>)
 8001b30:	2224      	movs	r2, #36	; 0x24
 8001b32:	701a      	strb	r2, [r3, #0]
			flag = 1;
 8001b34:	2301      	movs	r3, #1
 8001b36:	71fb      	strb	r3, [r7, #7]
			break;
 8001b38:	e00f      	b.n	8001b5a <tunneSelect+0x56>
		case IN_LEFT:
			firstDoTunning--;
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <tunneSelect+0x74>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <tunneSelect+0x74>)
 8001b44:	701a      	strb	r2, [r3, #0]
			if (firstDoTunning < MIDI_C2)
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <tunneSelect+0x74>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b23      	cmp	r3, #35	; 0x23
 8001b4c:	d802      	bhi.n	8001b54 <tunneSelect+0x50>
				firstDoTunning = MIDI_B2;
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <tunneSelect+0x74>)
 8001b50:	222f      	movs	r2, #47	; 0x2f
 8001b52:	701a      	strb	r2, [r3, #0]
			flag = 1;
 8001b54:	2301      	movs	r3, #1
 8001b56:	71fb      	strb	r3, [r7, #7]
			break;
 8001b58:	bf00      	nop
	}

	if (flag){
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <tunneSelect+0x62>
		screenNum = TUNNE_SCREEN;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <tunneSelect+0x78>)
 8001b62:	2205      	movs	r2, #5
 8001b64:	701a      	strb	r2, [r3, #0]
	}
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000720 	.word	0x20000720
 8001b78:	200003ac 	.word	0x200003ac
 8001b7c:	20000366 	.word	0x20000366

08001b80 <sendChord>:


void sendChord(unsigned long bnotes, int velocity, int channel){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]

  uint8_t note1;
  uint8_t note2;
  uint8_t note3;

  note1 = (bnotes & 0x7f);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b94:	75fb      	strb	r3, [r7, #23]
  note2 = (bnotes >> 8) & 0x7f;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ba0:	75bb      	strb	r3, [r7, #22]
  note3 = (bnotes >> 16) & 0x7f;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	0c1b      	lsrs	r3, r3, #16
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bac:	757b      	strb	r3, [r7, #21]

  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001bae:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <sendChord+0xa8>)
 8001bb0:	2209      	movs	r2, #9
 8001bb2:	701a      	strb	r2, [r3, #0]
  midi_msg[1] = 0x90 | 1;
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <sendChord+0xa8>)
 8001bb6:	2291      	movs	r2, #145	; 0x91
 8001bb8:	705a      	strb	r2, [r3, #1]
  midi_msg[2] = note1;
 8001bba:	4a1b      	ldr	r2, [pc, #108]	; (8001c28 <sendChord+0xa8>)
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	7093      	strb	r3, [r2, #2]
  midi_msg[3] = velocity;
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <sendChord+0xa8>)
 8001bc6:	70da      	strb	r2, [r3, #3]
  MIDI_SendBuffer(midi_msg, 4);
 8001bc8:	2104      	movs	r1, #4
 8001bca:	4817      	ldr	r0, [pc, #92]	; (8001c28 <sendChord+0xa8>)
 8001bcc:	f00a f96c 	bl	800bea8 <MIDI_SendBuffer>

  if (note2 && note3){
 8001bd0:	7dbb      	ldrb	r3, [r7, #22]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d024      	beq.n	8001c20 <sendChord+0xa0>
 8001bd6:	7d7b      	ldrb	r3, [r7, #21]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d021      	beq.n	8001c20 <sendChord+0xa0>

	  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <sendChord+0xa8>)
 8001bde:	2209      	movs	r2, #9
 8001be0:	701a      	strb	r2, [r3, #0]
	  midi_msg[1] = 0x90 | 1;
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <sendChord+0xa8>)
 8001be4:	2291      	movs	r2, #145	; 0x91
 8001be6:	705a      	strb	r2, [r3, #1]
	  midi_msg[2] = note2;
 8001be8:	4a0f      	ldr	r2, [pc, #60]	; (8001c28 <sendChord+0xa8>)
 8001bea:	7dbb      	ldrb	r3, [r7, #22]
 8001bec:	7093      	strb	r3, [r2, #2]
	  midi_msg[3] = velocity;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <sendChord+0xa8>)
 8001bf4:	70da      	strb	r2, [r3, #3]
	  MIDI_SendBuffer(midi_msg, 4);
 8001bf6:	2104      	movs	r1, #4
 8001bf8:	480b      	ldr	r0, [pc, #44]	; (8001c28 <sendChord+0xa8>)
 8001bfa:	f00a f955 	bl	800bea8 <MIDI_SendBuffer>

	  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <sendChord+0xa8>)
 8001c00:	2209      	movs	r2, #9
 8001c02:	701a      	strb	r2, [r3, #0]
	  midi_msg[1] = 0x90 | 1;
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <sendChord+0xa8>)
 8001c06:	2291      	movs	r2, #145	; 0x91
 8001c08:	705a      	strb	r2, [r3, #1]
	  midi_msg[2] = note3;
 8001c0a:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <sendChord+0xa8>)
 8001c0c:	7d7b      	ldrb	r3, [r7, #21]
 8001c0e:	7093      	strb	r3, [r2, #2]
	  midi_msg[3] = velocity;
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <sendChord+0xa8>)
 8001c16:	70da      	strb	r2, [r3, #3]
	  MIDI_SendBuffer(midi_msg, 4);
 8001c18:	2104      	movs	r1, #4
 8001c1a:	4803      	ldr	r0, [pc, #12]	; (8001c28 <sendChord+0xa8>)
 8001c1c:	f00a f944 	bl	800bea8 <MIDI_SendBuffer>
  }
}
 8001c20:	bf00      	nop
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000724 	.word	0x20000724

08001c2c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){ // dac
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d103      	bne.n	8001c46 <HAL_TIM_PeriodElapsedCallback+0x1a>
		flag_dac = 1;
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
	}else if (htim->Instance == TIM2){ //tick
		flag_tick = 1;
	}

}
 8001c44:	e007      	b.n	8001c56 <HAL_TIM_PeriodElapsedCallback+0x2a>
	}else if (htim->Instance == TIM2){ //tick
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4e:	d102      	bne.n	8001c56 <HAL_TIM_PeriodElapsedCallback+0x2a>
		flag_tick = 1;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	701a      	strb	r2, [r3, #0]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40000400 	.word	0x40000400
 8001c68:	2000036f 	.word	0x2000036f
 8001c6c:	2000036e 	.word	0x2000036e

08001c70 <HAL_I2C_MasterTxCpltCallback>:


void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	_lcd_ISR();
 8001c78:	f7ff fa5e 	bl	8001138 <_lcd_ISR>
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <osc_dac_init>:
uint8_t ratio_sen = 100;
uint8_t ratio_cuad = 100;
uint8_t ratio_ramp = 100;


void osc_dac_init(DAC_HandleTypeDef *p_hdac, uint32_t ch){
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
	handler_dac = p_hdac;
 8001c9e:	4a09      	ldr	r2, [pc, #36]	; (8001cc4 <osc_dac_init+0x30>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6013      	str	r3, [r2, #0]
	dac_ch = ch;
 8001ca4:	4a08      	ldr	r2, [pc, #32]	; (8001cc8 <osc_dac_init+0x34>)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	6013      	str	r3, [r2, #0]

	HAL_DAC_Start(handler_dac, dac_ch);
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <osc_dac_init+0x30>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <osc_dac_init+0x34>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	f001 f84c 	bl	8002d52 <HAL_DAC_Start>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	2000072c 	.word	0x2000072c
 8001cc8:	20000728 	.word	0x20000728

08001ccc <osc_dac_update>:

//must be handled with a 44100 Hz timer.
void osc_dac_update(void){
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0

	if (nota_activa!=-1){
 8001cd0:	4b37      	ldr	r3, [pc, #220]	; (8001db0 <osc_dac_update+0xe4>)
 8001cd2:	f993 3000 	ldrsb.w	r3, [r3]
 8001cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cda:	d057      	beq.n	8001d8c <osc_dac_update+0xc0>
		phase+= nota_incrFase[nota_activa];
 8001cdc:	4b34      	ldr	r3, [pc, #208]	; (8001db0 <osc_dac_update+0xe4>)
 8001cde:	f993 3000 	ldrsb.w	r3, [r3]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b33      	ldr	r3, [pc, #204]	; (8001db4 <osc_dac_update+0xe8>)
 8001ce6:	5c9b      	ldrb	r3, [r3, r2]
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	4b33      	ldr	r3, [pc, #204]	; (8001db8 <osc_dac_update+0xec>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	4b31      	ldr	r3, [pc, #196]	; (8001db8 <osc_dac_update+0xec>)
 8001cf4:	801a      	strh	r2, [r3, #0]
		if (phase>OSC_LAST) phase -= OSC_LAST;
 8001cf6:	4b30      	ldr	r3, [pc, #192]	; (8001db8 <osc_dac_update+0xec>)
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	f244 520a 	movw	r2, #17674	; 0x450a
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d907      	bls.n	8001d12 <osc_dac_update+0x46>
 8001d02:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <osc_dac_update+0xec>)
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	f5a3 438a 	sub.w	r3, r3, #17664	; 0x4500
 8001d0a:	3b0a      	subs	r3, #10
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <osc_dac_update+0xec>)
 8001d10:	801a      	strh	r2, [r3, #0]
		dac_out = ratio_sen/100*tabla_seno[phase] + ratio_cuad/100*tabla_cuadrada[phase] + ratio_ramp/100*tabla_sierra[phase];
 8001d12:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <osc_dac_update+0xf0>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	4a2a      	ldr	r2, [pc, #168]	; (8001dc0 <osc_dac_update+0xf4>)
 8001d18:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1c:	095b      	lsrs	r3, r3, #5
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <osc_dac_update+0xec>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	4619      	mov	r1, r3
 8001d28:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <osc_dac_update+0xf8>)
 8001d2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	fb12 f303 	smulbb	r3, r2, r3
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <osc_dac_update+0xfc>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	4921      	ldr	r1, [pc, #132]	; (8001dc0 <osc_dac_update+0xf4>)
 8001d3c:	fba1 1303 	umull	r1, r3, r1, r3
 8001d40:	095b      	lsrs	r3, r3, #5
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	b299      	uxth	r1, r3
 8001d46:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <osc_dac_update+0xec>)
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <osc_dac_update+0x100>)
 8001d4e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	fb11 f303 	smulbb	r3, r1, r3
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <osc_dac_update+0x104>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	4917      	ldr	r1, [pc, #92]	; (8001dc0 <osc_dac_update+0xf4>)
 8001d64:	fba1 1303 	umull	r1, r3, r1, r3
 8001d68:	095b      	lsrs	r3, r3, #5
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	b299      	uxth	r1, r3
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <osc_dac_update+0xec>)
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <osc_dac_update+0x108>)
 8001d76:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	fb11 f303 	smulbb	r3, r1, r3
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	4413      	add	r3, r2
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <osc_dac_update+0x10c>)
 8001d88:	801a      	strh	r2, [r3, #0]
 8001d8a:	e005      	b.n	8001d98 <osc_dac_update+0xcc>
		//HAL_DAC_SetValue(handler_dac, dac_ch, DAC_ALIGN_12B_R, dac_out);
	}else{
		phase = 0;
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <osc_dac_update+0xec>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	801a      	strh	r2, [r3, #0]
		dac_out = 0;
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <osc_dac_update+0x10c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	801a      	strh	r2, [r3, #0]
	}

	HAL_DAC_SetValue(handler_dac, dac_ch, DAC_ALIGN_12B_R, dac_out);
 8001d98:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <osc_dac_update+0x110>)
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <osc_dac_update+0x114>)
 8001d9e:	6819      	ldr	r1, [r3, #0]
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <osc_dac_update+0x10c>)
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f001 f887 	bl	8002eb8 <HAL_DAC_SetValue>

//	flag_dac = 0;
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000078 	.word	0x20000078
 8001db4:	08040604 	.word	0x08040604
 8001db8:	20000370 	.word	0x20000370
 8001dbc:	20000079 	.word	0x20000079
 8001dc0:	51eb851f 	.word	0x51eb851f
 8001dc4:	0800c980 	.word	0x0800c980
 8001dc8:	2000007a 	.word	0x2000007a
 8001dcc:	0801ddac 	.word	0x0801ddac
 8001dd0:	2000007b 	.word	0x2000007b
 8001dd4:	0802f1d8 	.word	0x0802f1d8
 8001dd8:	20000372 	.word	0x20000372
 8001ddc:	2000072c 	.word	0x2000072c
 8001de0:	20000728 	.word	0x20000728

08001de4 <osc_setNote>:


int8_t osc_setNote (uint8_t nn){
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]

	if (!nn){
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d104      	bne.n	8001dfe <osc_setNote+0x1a>
		nota_activa = -1;
 8001df4:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <osc_setNote+0x48>)
 8001df6:	22ff      	movs	r2, #255	; 0xff
 8001df8:	701a      	strb	r2, [r3, #0]
		return 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e00f      	b.n	8001e1e <osc_setNote+0x3a>
	}

	if(nn<24 || nn>60){
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	2b17      	cmp	r3, #23
 8001e02:	d902      	bls.n	8001e0a <osc_setNote+0x26>
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	2b3c      	cmp	r3, #60	; 0x3c
 8001e08:	d902      	bls.n	8001e10 <osc_setNote+0x2c>
		return -1;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e0e:	e006      	b.n	8001e1e <osc_setNote+0x3a>
	}

	nota_activa = nn - NOTA_C1;
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	3b18      	subs	r3, #24
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	b25a      	sxtb	r2, r3
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <osc_setNote+0x48>)
 8001e1a:	701a      	strb	r2, [r3, #0]
	return 0;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000078 	.word	0x20000078

08001e30 <osc_setRatios>:

int8_t osc_setRatios(uint8_t rsen, uint8_t rcuad, uint8_t rsier){
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	71bb      	strb	r3, [r7, #6]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	717b      	strb	r3, [r7, #5]

	if (rsen > 100 || rcuad > 100 || rsier > 100){
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	2b64      	cmp	r3, #100	; 0x64
 8001e46:	d805      	bhi.n	8001e54 <osc_setRatios+0x24>
 8001e48:	79bb      	ldrb	r3, [r7, #6]
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d802      	bhi.n	8001e54 <osc_setRatios+0x24>
 8001e4e:	797b      	ldrb	r3, [r7, #5]
 8001e50:	2b64      	cmp	r3, #100	; 0x64
 8001e52:	d902      	bls.n	8001e5a <osc_setRatios+0x2a>
		return -1;
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e58:	e009      	b.n	8001e6e <osc_setRatios+0x3e>
	}

	ratio_sen = rsen; ratio_cuad = rcuad; ratio_ramp = rsier;
 8001e5a:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <osc_setRatios+0x4c>)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	7013      	strb	r3, [r2, #0]
 8001e60:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <osc_setRatios+0x50>)
 8001e62:	79bb      	ldrb	r3, [r7, #6]
 8001e64:	7013      	strb	r3, [r2, #0]
 8001e66:	4a07      	ldr	r2, [pc, #28]	; (8001e84 <osc_setRatios+0x54>)
 8001e68:	797b      	ldrb	r3, [r7, #5]
 8001e6a:	7013      	strb	r3, [r2, #0]
	return 0;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000079 	.word	0x20000079
 8001e80:	2000007a 	.word	0x2000007a
 8001e84:	2000007b 	.word	0x2000007b

08001e88 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001e8c:	4b17      	ldr	r3, [pc, #92]	; (8001eec <MX_SPI1_Init+0x64>)
 8001e8e:	4a18      	ldr	r2, [pc, #96]	; (8001ef0 <MX_SPI1_Init+0x68>)
 8001e90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e92:	4b16      	ldr	r3, [pc, #88]	; (8001eec <MX_SPI1_Init+0x64>)
 8001e94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e9a:	4b14      	ldr	r3, [pc, #80]	; (8001eec <MX_SPI1_Init+0x64>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ea0:	4b12      	ldr	r3, [pc, #72]	; (8001eec <MX_SPI1_Init+0x64>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <MX_SPI1_Init+0x64>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eac:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <MX_SPI1_Init+0x64>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <MX_SPI1_Init+0x64>)
 8001eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <MX_SPI1_Init+0x64>)
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <MX_SPI1_Init+0x64>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <MX_SPI1_Init+0x64>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ecc:	4b07      	ldr	r3, [pc, #28]	; (8001eec <MX_SPI1_Init+0x64>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <MX_SPI1_Init+0x64>)
 8001ed4:	220a      	movs	r2, #10
 8001ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ed8:	4804      	ldr	r0, [pc, #16]	; (8001eec <MX_SPI1_Init+0x64>)
 8001eda:	f005 f8c7 	bl	800706c <HAL_SPI_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ee4:	f7ff fece 	bl	8001c84 <Error_Handler>
  }

}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000730 	.word	0x20000730
 8001ef0:	40013000 	.word	0x40013000

08001ef4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a1d      	ldr	r2, [pc, #116]	; (8001f88 <HAL_SPI_MspInit+0x94>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d133      	bne.n	8001f7e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <HAL_SPI_MspInit+0x98>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	4a1b      	ldr	r2, [pc, #108]	; (8001f8c <HAL_SPI_MspInit+0x98>)
 8001f20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f24:	6453      	str	r3, [r2, #68]	; 0x44
 8001f26:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <HAL_SPI_MspInit+0x98>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <HAL_SPI_MspInit+0x98>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <HAL_SPI_MspInit+0x98>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_SPI_MspInit+0x98>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001f4e:	2338      	movs	r3, #56	; 0x38
 8001f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f5e:	2305      	movs	r3, #5
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	4809      	ldr	r0, [pc, #36]	; (8001f90 <HAL_SPI_MspInit+0x9c>)
 8001f6a:	f000 fffb 	bl	8002f64 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	2023      	movs	r0, #35	; 0x23
 8001f74:	f000 fe95 	bl	8002ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001f78:	2023      	movs	r0, #35	; 0x23
 8001f7a:	f000 feae 	bl	8002cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001f7e:	bf00      	nop
 8001f80:	3728      	adds	r7, #40	; 0x28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40013000 	.word	0x40013000
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020400 	.word	0x40020400

08001f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <HAL_MspInit+0x4c>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	4a0f      	ldr	r2, [pc, #60]	; (8001fe0 <HAL_MspInit+0x4c>)
 8001fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001faa:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <HAL_MspInit+0x4c>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <HAL_MspInit+0x4c>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	4a08      	ldr	r2, [pc, #32]	; (8001fe0 <HAL_MspInit+0x4c>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_MspInit+0x4c>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fd2:	2007      	movs	r0, #7
 8001fd4:	f000 fe5a 	bl	8002c8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40023800 	.word	0x40023800

08001fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff6:	e7fe      	b.n	8001ff6 <HardFault_Handler+0x4>

08001ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <MemManage_Handler+0x4>

08001ffe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002002:	e7fe      	b.n	8002002 <BusFault_Handler+0x4>

08002004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <UsageFault_Handler+0x4>

0800200a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002038:	f000 fab4 	bl	80025a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}

08002040 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <TIM2_IRQHandler+0x10>)
 8002046:	f005 fda0 	bl	8007b8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200007c8 	.word	0x200007c8

08002054 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002058:	4802      	ldr	r0, [pc, #8]	; (8002064 <TIM3_IRQHandler+0x10>)
 800205a:	f005 fd96 	bl	8007b8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000788 	.word	0x20000788

08002068 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <I2C1_EV_IRQHandler+0x10>)
 800206e:	f001 fc09 	bl	8003884 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000418 	.word	0x20000418

0800207c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <I2C1_ER_IRQHandler+0x10>)
 8002082:	f001 fd65 	bl	8003b50 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000418 	.word	0x20000418

08002090 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <SPI1_IRQHandler+0x10>)
 8002096:	f005 faf9 	bl	800768c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000730 	.word	0x20000730

080020a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <OTG_FS_IRQHandler+0x10>)
 80020aa:	f003 fb4a 	bl	8005742 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000e9c 	.word	0x20000e9c

080020b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c0:	4a14      	ldr	r2, [pc, #80]	; (8002114 <_sbrk+0x5c>)
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <_sbrk+0x60>)
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020cc:	4b13      	ldr	r3, [pc, #76]	; (800211c <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d102      	bne.n	80020da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <_sbrk+0x64>)
 80020d6:	4a12      	ldr	r2, [pc, #72]	; (8002120 <_sbrk+0x68>)
 80020d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <_sbrk+0x64>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d207      	bcs.n	80020f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e8:	f00a fa26 	bl	800c538 <__errno>
 80020ec:	4602      	mov	r2, r0
 80020ee:	230c      	movs	r3, #12
 80020f0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020f6:	e009      	b.n	800210c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f8:	4b08      	ldr	r3, [pc, #32]	; (800211c <_sbrk+0x64>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <_sbrk+0x64>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	4a05      	ldr	r2, [pc, #20]	; (800211c <_sbrk+0x64>)
 8002108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800210a:	68fb      	ldr	r3, [r7, #12]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20020000 	.word	0x20020000
 8002118:	00000400 	.word	0x00000400
 800211c:	20000374 	.word	0x20000374
 8002120:	200012a8 	.word	0x200012a8

08002124 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <SystemInit+0x28>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212e:	4a07      	ldr	r2, [pc, #28]	; (800214c <SystemInit+0x28>)
 8002130:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002134:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002138:	4b04      	ldr	r3, [pc, #16]	; (800214c <SystemInit+0x28>)
 800213a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800213e:	609a      	str	r2, [r3, #8]
#endif
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002156:	f107 0308 	add.w	r3, r7, #8
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002164:	463b      	mov	r3, r7
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800216c:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <MX_TIM2_Init+0x94>)
 800216e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002172:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <MX_TIM2_Init+0x94>)
 8002176:	2263      	movs	r2, #99	; 0x63
 8002178:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217a:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <MX_TIM2_Init+0x94>)
 800217c:	2200      	movs	r2, #0
 800217e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 840-1;
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <MX_TIM2_Init+0x94>)
 8002182:	f240 3247 	movw	r2, #839	; 0x347
 8002186:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002188:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <MX_TIM2_Init+0x94>)
 800218a:	2200      	movs	r2, #0
 800218c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <MX_TIM2_Init+0x94>)
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002194:	4813      	ldr	r0, [pc, #76]	; (80021e4 <MX_TIM2_Init+0x94>)
 8002196:	f005 fca9 	bl	8007aec <HAL_TIM_Base_Init>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80021a0:	f7ff fd70 	bl	8001c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021aa:	f107 0308 	add.w	r3, r7, #8
 80021ae:	4619      	mov	r1, r3
 80021b0:	480c      	ldr	r0, [pc, #48]	; (80021e4 <MX_TIM2_Init+0x94>)
 80021b2:	f005 fdf2 	bl	8007d9a <HAL_TIM_ConfigClockSource>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80021bc:	f7ff fd62 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c0:	2300      	movs	r3, #0
 80021c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021c8:	463b      	mov	r3, r7
 80021ca:	4619      	mov	r1, r3
 80021cc:	4805      	ldr	r0, [pc, #20]	; (80021e4 <MX_TIM2_Init+0x94>)
 80021ce:	f005 fffd 	bl	80081cc <HAL_TIMEx_MasterConfigSynchronization>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80021d8:	f7ff fd54 	bl	8001c84 <Error_Handler>
  }

}
 80021dc:	bf00      	nop
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	200007c8 	.word	0x200007c8

080021e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ee:	f107 0308 	add.w	r3, r7, #8
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021fc:	463b      	mov	r3, r7
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002204:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <MX_TIM3_Init+0x90>)
 8002206:	4a1d      	ldr	r2, [pc, #116]	; (800227c <MX_TIM3_Init+0x94>)
 8002208:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 119-1;
 800220a:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <MX_TIM3_Init+0x90>)
 800220c:	2276      	movs	r2, #118	; 0x76
 800220e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002210:	4b19      	ldr	r3, [pc, #100]	; (8002278 <MX_TIM3_Init+0x90>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16-1;
 8002216:	4b18      	ldr	r3, [pc, #96]	; (8002278 <MX_TIM3_Init+0x90>)
 8002218:	220f      	movs	r2, #15
 800221a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221c:	4b16      	ldr	r3, [pc, #88]	; (8002278 <MX_TIM3_Init+0x90>)
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <MX_TIM3_Init+0x90>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002228:	4813      	ldr	r0, [pc, #76]	; (8002278 <MX_TIM3_Init+0x90>)
 800222a:	f005 fc5f 	bl	8007aec <HAL_TIM_Base_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002234:	f7ff fd26 	bl	8001c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800223e:	f107 0308 	add.w	r3, r7, #8
 8002242:	4619      	mov	r1, r3
 8002244:	480c      	ldr	r0, [pc, #48]	; (8002278 <MX_TIM3_Init+0x90>)
 8002246:	f005 fda8 	bl	8007d9a <HAL_TIM_ConfigClockSource>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002250:	f7ff fd18 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800225c:	463b      	mov	r3, r7
 800225e:	4619      	mov	r1, r3
 8002260:	4805      	ldr	r0, [pc, #20]	; (8002278 <MX_TIM3_Init+0x90>)
 8002262:	f005 ffb3 	bl	80081cc <HAL_TIMEx_MasterConfigSynchronization>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800226c:	f7ff fd0a 	bl	8001c84 <Error_Handler>
  }

}
 8002270:	bf00      	nop
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000788 	.word	0x20000788
 800227c:	40000400 	.word	0x40000400

08002280 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002290:	d116      	bne.n	80022c0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <HAL_TIM_Base_MspInit+0x80>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a19      	ldr	r2, [pc, #100]	; (8002300 <HAL_TIM_Base_MspInit+0x80>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
 80022a2:	4b17      	ldr	r3, [pc, #92]	; (8002300 <HAL_TIM_Base_MspInit+0x80>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	201c      	movs	r0, #28
 80022b4:	f000 fcf5 	bl	8002ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022b8:	201c      	movs	r0, #28
 80022ba:	f000 fd0e 	bl	8002cda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80022be:	e01a      	b.n	80022f6 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM3)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0f      	ldr	r2, [pc, #60]	; (8002304 <HAL_TIM_Base_MspInit+0x84>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d115      	bne.n	80022f6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <HAL_TIM_Base_MspInit+0x80>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	4a0b      	ldr	r2, [pc, #44]	; (8002300 <HAL_TIM_Base_MspInit+0x80>)
 80022d4:	f043 0302 	orr.w	r3, r3, #2
 80022d8:	6413      	str	r3, [r2, #64]	; 0x40
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_TIM_Base_MspInit+0x80>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	201d      	movs	r0, #29
 80022ec:	f000 fcd9 	bl	8002ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022f0:	201d      	movs	r0, #29
 80022f2:	f000 fcf2 	bl	8002cda <HAL_NVIC_EnableIRQ>
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	40000400 	.word	0x40000400

08002308 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <MX_USART3_UART_Init+0x4c>)
 800230e:	4a12      	ldr	r2, [pc, #72]	; (8002358 <MX_USART3_UART_Init+0x50>)
 8002310:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002312:	4b10      	ldr	r3, [pc, #64]	; (8002354 <MX_USART3_UART_Init+0x4c>)
 8002314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002318:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800231a:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <MX_USART3_UART_Init+0x4c>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <MX_USART3_UART_Init+0x4c>)
 8002322:	2200      	movs	r2, #0
 8002324:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002326:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <MX_USART3_UART_Init+0x4c>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800232c:	4b09      	ldr	r3, [pc, #36]	; (8002354 <MX_USART3_UART_Init+0x4c>)
 800232e:	220c      	movs	r2, #12
 8002330:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002332:	4b08      	ldr	r3, [pc, #32]	; (8002354 <MX_USART3_UART_Init+0x4c>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <MX_USART3_UART_Init+0x4c>)
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800233e:	4805      	ldr	r0, [pc, #20]	; (8002354 <MX_USART3_UART_Init+0x4c>)
 8002340:	f005 ffd4 	bl	80082ec <HAL_UART_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800234a:	f7ff fc9b 	bl	8001c84 <Error_Handler>
  }

}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000808 	.word	0x20000808
 8002358:	40004800 	.word	0x40004800

0800235c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <MX_USART6_UART_Init+0x4c>)
 8002362:	4a12      	ldr	r2, [pc, #72]	; (80023ac <MX_USART6_UART_Init+0x50>)
 8002364:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <MX_USART6_UART_Init+0x4c>)
 8002368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800236c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <MX_USART6_UART_Init+0x4c>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <MX_USART6_UART_Init+0x4c>)
 8002376:	2200      	movs	r2, #0
 8002378:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800237a:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <MX_USART6_UART_Init+0x4c>)
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <MX_USART6_UART_Init+0x4c>)
 8002382:	220c      	movs	r2, #12
 8002384:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <MX_USART6_UART_Init+0x4c>)
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <MX_USART6_UART_Init+0x4c>)
 800238e:	2200      	movs	r2, #0
 8002390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002392:	4805      	ldr	r0, [pc, #20]	; (80023a8 <MX_USART6_UART_Init+0x4c>)
 8002394:	f005 ffaa 	bl	80082ec <HAL_UART_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800239e:	f7ff fc71 	bl	8001c84 <Error_Handler>
  }

}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000848 	.word	0x20000848
 80023ac:	40011400 	.word	0x40011400

080023b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08c      	sub	sp, #48	; 0x30
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a32      	ldr	r2, [pc, #200]	; (8002498 <HAL_UART_MspInit+0xe8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d12d      	bne.n	800242e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
 80023d6:	4b31      	ldr	r3, [pc, #196]	; (800249c <HAL_UART_MspInit+0xec>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	4a30      	ldr	r2, [pc, #192]	; (800249c <HAL_UART_MspInit+0xec>)
 80023dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e0:	6413      	str	r3, [r2, #64]	; 0x40
 80023e2:	4b2e      	ldr	r3, [pc, #184]	; (800249c <HAL_UART_MspInit+0xec>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ea:	61bb      	str	r3, [r7, #24]
 80023ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	4b2a      	ldr	r3, [pc, #168]	; (800249c <HAL_UART_MspInit+0xec>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a29      	ldr	r2, [pc, #164]	; (800249c <HAL_UART_MspInit+0xec>)
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b27      	ldr	r3, [pc, #156]	; (800249c <HAL_UART_MspInit+0xec>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800240a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800240e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002410:	2302      	movs	r3, #2
 8002412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002418:	2303      	movs	r3, #3
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800241c:	2307      	movs	r3, #7
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002420:	f107 031c 	add.w	r3, r7, #28
 8002424:	4619      	mov	r1, r3
 8002426:	481e      	ldr	r0, [pc, #120]	; (80024a0 <HAL_UART_MspInit+0xf0>)
 8002428:	f000 fd9c 	bl	8002f64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800242c:	e030      	b.n	8002490 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1c      	ldr	r2, [pc, #112]	; (80024a4 <HAL_UART_MspInit+0xf4>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d12b      	bne.n	8002490 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002438:	2300      	movs	r3, #0
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	4b17      	ldr	r3, [pc, #92]	; (800249c <HAL_UART_MspInit+0xec>)
 800243e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002440:	4a16      	ldr	r2, [pc, #88]	; (800249c <HAL_UART_MspInit+0xec>)
 8002442:	f043 0320 	orr.w	r3, r3, #32
 8002446:	6453      	str	r3, [r2, #68]	; 0x44
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <HAL_UART_MspInit+0xec>)
 800244a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <HAL_UART_MspInit+0xec>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	4a0f      	ldr	r2, [pc, #60]	; (800249c <HAL_UART_MspInit+0xec>)
 800245e:	f043 0304 	orr.w	r3, r3, #4
 8002462:	6313      	str	r3, [r2, #48]	; 0x30
 8002464:	4b0d      	ldr	r3, [pc, #52]	; (800249c <HAL_UART_MspInit+0xec>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MIDI_TX_Pin|MIDI_RX_Pin;
 8002470:	23c0      	movs	r3, #192	; 0xc0
 8002472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	2302      	movs	r3, #2
 8002476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247c:	2303      	movs	r3, #3
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002480:	2308      	movs	r3, #8
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002484:	f107 031c 	add.w	r3, r7, #28
 8002488:	4619      	mov	r1, r3
 800248a:	4807      	ldr	r0, [pc, #28]	; (80024a8 <HAL_UART_MspInit+0xf8>)
 800248c:	f000 fd6a 	bl	8002f64 <HAL_GPIO_Init>
}
 8002490:	bf00      	nop
 8002492:	3730      	adds	r7, #48	; 0x30
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40004800 	.word	0x40004800
 800249c:	40023800 	.word	0x40023800
 80024a0:	40020400 	.word	0x40020400
 80024a4:	40011400 	.word	0x40011400
 80024a8:	40020800 	.word	0x40020800

080024ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024b2:	e003      	b.n	80024bc <LoopCopyDataInit>

080024b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024ba:	3104      	adds	r1, #4

080024bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024bc:	480b      	ldr	r0, [pc, #44]	; (80024ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024be:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024c4:	d3f6      	bcc.n	80024b4 <CopyDataInit>
  ldr  r2, =_sbss
 80024c6:	4a0b      	ldr	r2, [pc, #44]	; (80024f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024c8:	e002      	b.n	80024d0 <LoopFillZerobss>

080024ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80024ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80024cc:	f842 3b04 	str.w	r3, [r2], #4

080024d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80024d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80024d4:	d3f9      	bcc.n	80024ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024d6:	f7ff fe25 	bl	8002124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024da:	f00a f833 	bl	800c544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024de:	f7fe fe37 	bl	8001150 <main>
  bx  lr    
 80024e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80024e8:	0804065c 	.word	0x0804065c
  ldr  r0, =_sdata
 80024ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80024f0:	200002c4 	.word	0x200002c4
  ldr  r2, =_sbss
 80024f4:	200002c4 	.word	0x200002c4
  ldr  r3, = _ebss
 80024f8:	200012a8 	.word	0x200012a8

080024fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024fc:	e7fe      	b.n	80024fc <ADC_IRQHandler>
	...

08002500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002504:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <HAL_Init+0x40>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0d      	ldr	r2, [pc, #52]	; (8002540 <HAL_Init+0x40>)
 800250a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800250e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_Init+0x40>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <HAL_Init+0x40>)
 8002516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800251a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800251c:	4b08      	ldr	r3, [pc, #32]	; (8002540 <HAL_Init+0x40>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a07      	ldr	r2, [pc, #28]	; (8002540 <HAL_Init+0x40>)
 8002522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002526:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002528:	2003      	movs	r0, #3
 800252a:	f000 fbaf 	bl	8002c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800252e:	2000      	movs	r0, #0
 8002530:	f000 f808 	bl	8002544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002534:	f7ff fd2e 	bl	8001f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023c00 	.word	0x40023c00

08002544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800254c:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_InitTick+0x54>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <HAL_InitTick+0x58>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	4619      	mov	r1, r3
 8002556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800255a:	fbb3 f3f1 	udiv	r3, r3, r1
 800255e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fbc7 	bl	8002cf6 <HAL_SYSTICK_Config>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e00e      	b.n	8002590 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b0f      	cmp	r3, #15
 8002576:	d80a      	bhi.n	800258e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002578:	2200      	movs	r2, #0
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002580:	f000 fb8f 	bl	8002ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002584:	4a06      	ldr	r2, [pc, #24]	; (80025a0 <HAL_InitTick+0x5c>)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	e000      	b.n	8002590 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	2000007c 	.word	0x2000007c
 800259c:	20000084 	.word	0x20000084
 80025a0:	20000080 	.word	0x20000080

080025a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_IncTick+0x20>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_IncTick+0x24>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <HAL_IncTick+0x24>)
 80025b6:	6013      	str	r3, [r2, #0]
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	20000084 	.word	0x20000084
 80025c8:	20000888 	.word	0x20000888

080025cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return uwTick;
 80025d0:	4b03      	ldr	r3, [pc, #12]	; (80025e0 <HAL_GetTick+0x14>)
 80025d2:	681b      	ldr	r3, [r3, #0]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000888 	.word	0x20000888

080025e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ec:	f7ff ffee 	bl	80025cc <HAL_GetTick>
 80025f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025fc:	d005      	beq.n	800260a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <HAL_Delay+0x40>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4413      	add	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800260a:	bf00      	nop
 800260c:	f7ff ffde 	bl	80025cc <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	429a      	cmp	r2, r3
 800261a:	d8f7      	bhi.n	800260c <HAL_Delay+0x28>
  {
  }
}
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000084 	.word	0x20000084

08002628 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e033      	b.n	80026a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fe f9c2 	bl	80009d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	d118      	bne.n	8002698 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800266e:	f023 0302 	bic.w	r3, r3, #2
 8002672:	f043 0202 	orr.w	r2, r3, #2
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f93a 	bl	80028f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f023 0303 	bic.w	r3, r3, #3
 800268e:	f043 0201 	orr.w	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	641a      	str	r2, [r3, #64]	; 0x40
 8002696:	e001      	b.n	800269c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x1c>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e105      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x228>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b09      	cmp	r3, #9
 80026da:	d925      	bls.n	8002728 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68d9      	ldr	r1, [r3, #12]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	3b1e      	subs	r3, #30
 80026f2:	2207      	movs	r2, #7
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43da      	mvns	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	400a      	ands	r2, r1
 8002700:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68d9      	ldr	r1, [r3, #12]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	4618      	mov	r0, r3
 8002714:	4603      	mov	r3, r0
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4403      	add	r3, r0
 800271a:	3b1e      	subs	r3, #30
 800271c:	409a      	lsls	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	e022      	b.n	800276e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6919      	ldr	r1, [r3, #16]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	2207      	movs	r2, #7
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	400a      	ands	r2, r1
 800274a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6919      	ldr	r1, [r3, #16]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	4618      	mov	r0, r3
 800275e:	4603      	mov	r3, r0
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4403      	add	r3, r0
 8002764:	409a      	lsls	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b06      	cmp	r3, #6
 8002774:	d824      	bhi.n	80027c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	3b05      	subs	r3, #5
 8002788:	221f      	movs	r2, #31
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43da      	mvns	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	400a      	ands	r2, r1
 8002796:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	4618      	mov	r0, r3
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	3b05      	subs	r3, #5
 80027b2:	fa00 f203 	lsl.w	r2, r0, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	635a      	str	r2, [r3, #52]	; 0x34
 80027be:	e04c      	b.n	800285a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b0c      	cmp	r3, #12
 80027c6:	d824      	bhi.n	8002812 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	3b23      	subs	r3, #35	; 0x23
 80027da:	221f      	movs	r2, #31
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43da      	mvns	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	400a      	ands	r2, r1
 80027e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	4618      	mov	r0, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	3b23      	subs	r3, #35	; 0x23
 8002804:	fa00 f203 	lsl.w	r2, r0, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
 8002810:	e023      	b.n	800285a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	3b41      	subs	r3, #65	; 0x41
 8002824:	221f      	movs	r2, #31
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43da      	mvns	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	400a      	ands	r2, r1
 8002832:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	4618      	mov	r0, r3
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	3b41      	subs	r3, #65	; 0x41
 800284e:	fa00 f203 	lsl.w	r2, r0, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800285a:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <HAL_ADC_ConfigChannel+0x234>)
 800285c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a21      	ldr	r2, [pc, #132]	; (80028e8 <HAL_ADC_ConfigChannel+0x238>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d109      	bne.n	800287c <HAL_ADC_ConfigChannel+0x1cc>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b12      	cmp	r3, #18
 800286e:	d105      	bne.n	800287c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a19      	ldr	r2, [pc, #100]	; (80028e8 <HAL_ADC_ConfigChannel+0x238>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d123      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x21e>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b10      	cmp	r3, #16
 800288c:	d003      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x1e6>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b11      	cmp	r3, #17
 8002894:	d11b      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b10      	cmp	r3, #16
 80028a8:	d111      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <HAL_ADC_ConfigChannel+0x23c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a10      	ldr	r2, [pc, #64]	; (80028f0 <HAL_ADC_ConfigChannel+0x240>)
 80028b0:	fba2 2303 	umull	r2, r3, r2, r3
 80028b4:	0c9a      	lsrs	r2, r3, #18
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028c0:	e002      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f9      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	40012300 	.word	0x40012300
 80028e8:	40012000 	.word	0x40012000
 80028ec:	2000007c 	.word	0x2000007c
 80028f0:	431bde83 	.word	0x431bde83

080028f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028fc:	4b79      	ldr	r3, [pc, #484]	; (8002ae4 <ADC_Init+0x1f0>)
 80028fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	431a      	orrs	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002928:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6859      	ldr	r1, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	021a      	lsls	r2, r3, #8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800294c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800296e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6899      	ldr	r1, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	4a58      	ldr	r2, [pc, #352]	; (8002ae8 <ADC_Init+0x1f4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d022      	beq.n	80029d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800299a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6899      	ldr	r1, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6899      	ldr	r1, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	e00f      	b.n	80029f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0202 	bic.w	r2, r2, #2
 8002a00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6899      	ldr	r1, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7e1b      	ldrb	r3, [r3, #24]
 8002a0c:	005a      	lsls	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01b      	beq.n	8002a58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6859      	ldr	r1, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	035a      	lsls	r2, r3, #13
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	e007      	b.n	8002a68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	051a      	lsls	r2, r3, #20
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6899      	ldr	r1, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aaa:	025a      	lsls	r2, r3, #9
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6899      	ldr	r1, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	029a      	lsls	r2, r3, #10
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	609a      	str	r2, [r3, #8]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	40012300 	.word	0x40012300
 8002ae8:	0f000001 	.word	0x0f000001

08002aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1e:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	60d3      	str	r3, [r2, #12]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b38:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <__NVIC_GetPriorityGrouping+0x18>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	0a1b      	lsrs	r3, r3, #8
 8002b3e:	f003 0307 	and.w	r3, r3, #7
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	db0b      	blt.n	8002b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	f003 021f 	and.w	r2, r3, #31
 8002b68:	4907      	ldr	r1, [pc, #28]	; (8002b88 <__NVIC_EnableIRQ+0x38>)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	2001      	movs	r0, #1
 8002b72:	fa00 f202 	lsl.w	r2, r0, r2
 8002b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	e000e100 	.word	0xe000e100

08002b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	6039      	str	r1, [r7, #0]
 8002b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	db0a      	blt.n	8002bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	490c      	ldr	r1, [pc, #48]	; (8002bd8 <__NVIC_SetPriority+0x4c>)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	0112      	lsls	r2, r2, #4
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	440b      	add	r3, r1
 8002bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb4:	e00a      	b.n	8002bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4908      	ldr	r1, [pc, #32]	; (8002bdc <__NVIC_SetPriority+0x50>)
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	3b04      	subs	r3, #4
 8002bc4:	0112      	lsls	r2, r2, #4
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	440b      	add	r3, r1
 8002bca:	761a      	strb	r2, [r3, #24]
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000e100 	.word	0xe000e100
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	; 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f1c3 0307 	rsb	r3, r3, #7
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	bf28      	it	cs
 8002bfe:	2304      	movcs	r3, #4
 8002c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3304      	adds	r3, #4
 8002c06:	2b06      	cmp	r3, #6
 8002c08:	d902      	bls.n	8002c10 <NVIC_EncodePriority+0x30>
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3b03      	subs	r3, #3
 8002c0e:	e000      	b.n	8002c12 <NVIC_EncodePriority+0x32>
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	401a      	ands	r2, r3
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c32:	43d9      	mvns	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	4313      	orrs	r3, r2
         );
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3724      	adds	r7, #36	; 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
	...

08002c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c58:	d301      	bcc.n	8002c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e00f      	b.n	8002c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <SysTick_Config+0x40>)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c66:	210f      	movs	r1, #15
 8002c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c6c:	f7ff ff8e 	bl	8002b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <SysTick_Config+0x40>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c76:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <SysTick_Config+0x40>)
 8002c78:	2207      	movs	r2, #7
 8002c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	e000e010 	.word	0xe000e010

08002c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff ff29 	bl	8002aec <__NVIC_SetPriorityGrouping>
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b086      	sub	sp, #24
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	4603      	mov	r3, r0
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb4:	f7ff ff3e 	bl	8002b34 <__NVIC_GetPriorityGrouping>
 8002cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	6978      	ldr	r0, [r7, #20]
 8002cc0:	f7ff ff8e 	bl	8002be0 <NVIC_EncodePriority>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff ff5d 	bl	8002b8c <__NVIC_SetPriority>
}
 8002cd2:	bf00      	nop
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ff31 	bl	8002b50 <__NVIC_EnableIRQ>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff ffa2 	bl	8002c48 <SysTick_Config>
 8002d04:	4603      	mov	r3, r0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e014      	b.n	8002d4a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	791b      	ldrb	r3, [r3, #4]
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d105      	bne.n	8002d36 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7fd fee1 	bl	8000af8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	2300      	movs	r3, #0
 8002d62:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	795b      	ldrb	r3, [r3, #5]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_DAC_Start+0x1e>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e050      	b.n	8002e12 <HAL_DAC_Start+0xc0>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6819      	ldr	r1, [r3, #0]
 8002d82:	2201      	movs	r2, #1
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	409a      	lsls	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d11a      	bne.n	8002dcc <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dac:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d127      	bne.n	8002e04 <HAL_DAC_Start+0xb2>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b38      	cmp	r3, #56	; 0x38
 8002db8:	d124      	bne.n	8002e04 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0201 	orr.w	r2, r2, #1
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	e01b      	b.n	8002e04 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dd6:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8002de2:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dea:	d10b      	bne.n	8002e04 <HAL_DAC_Start+0xb2>
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8002df2:	d107      	bne.n	8002e04 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0202 	orr.w	r2, r2, #2
 8002e02:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b087      	sub	sp, #28
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	795b      	ldrb	r3, [r3, #5]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_DAC_ConfigChannel+0x20>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e036      	b.n	8002eac <HAL_DAC_ConfigChannel+0x8e>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2202      	movs	r2, #2
 8002e48:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002e52:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4013      	ands	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6819      	ldr	r1, [r3, #0]
 8002e8c:	22c0      	movs	r2, #192	; 0xc0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43da      	mvns	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	400a      	ands	r2, r1
 8002e9c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d105      	bne.n	8002ee2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4413      	add	r3, r2
 8002edc:	3308      	adds	r3, #8
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	e004      	b.n	8002eec <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3314      	adds	r3, #20
 8002eea:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d004      	beq.n	8002f20 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2280      	movs	r2, #128	; 0x80
 8002f1a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e00c      	b.n	8002f3a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2205      	movs	r2, #5
 8002f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0201 	bic.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f54:	b2db      	uxtb	r3, r3
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
	...

08002f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b089      	sub	sp, #36	; 0x24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	e16b      	b.n	8003258 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f80:	2201      	movs	r2, #1
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4013      	ands	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	f040 815a 	bne.w	8003252 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d00b      	beq.n	8002fbe <HAL_GPIO_Init+0x5a>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d007      	beq.n	8002fbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fb2:	2b11      	cmp	r3, #17
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b12      	cmp	r3, #18
 8002fbc:	d130      	bne.n	8003020 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	2203      	movs	r2, #3
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	091b      	lsrs	r3, r3, #4
 800300a:	f003 0201 	and.w	r2, r3, #1
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	2203      	movs	r2, #3
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b02      	cmp	r3, #2
 8003056:	d003      	beq.n	8003060 <HAL_GPIO_Init+0xfc>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b12      	cmp	r3, #18
 800305e:	d123      	bne.n	80030a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	08da      	lsrs	r2, r3, #3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3208      	adds	r2, #8
 8003068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800306c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	220f      	movs	r2, #15
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	08da      	lsrs	r2, r3, #3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3208      	adds	r2, #8
 80030a2:	69b9      	ldr	r1, [r7, #24]
 80030a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	2203      	movs	r2, #3
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0203 	and.w	r2, r3, #3
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80b4 	beq.w	8003252 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	4b5f      	ldr	r3, [pc, #380]	; (800326c <HAL_GPIO_Init+0x308>)
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	4a5e      	ldr	r2, [pc, #376]	; (800326c <HAL_GPIO_Init+0x308>)
 80030f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030f8:	6453      	str	r3, [r2, #68]	; 0x44
 80030fa:	4b5c      	ldr	r3, [pc, #368]	; (800326c <HAL_GPIO_Init+0x308>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003106:	4a5a      	ldr	r2, [pc, #360]	; (8003270 <HAL_GPIO_Init+0x30c>)
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	089b      	lsrs	r3, r3, #2
 800310c:	3302      	adds	r3, #2
 800310e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	220f      	movs	r2, #15
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a51      	ldr	r2, [pc, #324]	; (8003274 <HAL_GPIO_Init+0x310>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d02b      	beq.n	800318a <HAL_GPIO_Init+0x226>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a50      	ldr	r2, [pc, #320]	; (8003278 <HAL_GPIO_Init+0x314>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d025      	beq.n	8003186 <HAL_GPIO_Init+0x222>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a4f      	ldr	r2, [pc, #316]	; (800327c <HAL_GPIO_Init+0x318>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01f      	beq.n	8003182 <HAL_GPIO_Init+0x21e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a4e      	ldr	r2, [pc, #312]	; (8003280 <HAL_GPIO_Init+0x31c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d019      	beq.n	800317e <HAL_GPIO_Init+0x21a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a4d      	ldr	r2, [pc, #308]	; (8003284 <HAL_GPIO_Init+0x320>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_GPIO_Init+0x216>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a4c      	ldr	r2, [pc, #304]	; (8003288 <HAL_GPIO_Init+0x324>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00d      	beq.n	8003176 <HAL_GPIO_Init+0x212>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a4b      	ldr	r2, [pc, #300]	; (800328c <HAL_GPIO_Init+0x328>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d007      	beq.n	8003172 <HAL_GPIO_Init+0x20e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a4a      	ldr	r2, [pc, #296]	; (8003290 <HAL_GPIO_Init+0x32c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d101      	bne.n	800316e <HAL_GPIO_Init+0x20a>
 800316a:	2307      	movs	r3, #7
 800316c:	e00e      	b.n	800318c <HAL_GPIO_Init+0x228>
 800316e:	2308      	movs	r3, #8
 8003170:	e00c      	b.n	800318c <HAL_GPIO_Init+0x228>
 8003172:	2306      	movs	r3, #6
 8003174:	e00a      	b.n	800318c <HAL_GPIO_Init+0x228>
 8003176:	2305      	movs	r3, #5
 8003178:	e008      	b.n	800318c <HAL_GPIO_Init+0x228>
 800317a:	2304      	movs	r3, #4
 800317c:	e006      	b.n	800318c <HAL_GPIO_Init+0x228>
 800317e:	2303      	movs	r3, #3
 8003180:	e004      	b.n	800318c <HAL_GPIO_Init+0x228>
 8003182:	2302      	movs	r3, #2
 8003184:	e002      	b.n	800318c <HAL_GPIO_Init+0x228>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_GPIO_Init+0x228>
 800318a:	2300      	movs	r3, #0
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	f002 0203 	and.w	r2, r2, #3
 8003192:	0092      	lsls	r2, r2, #2
 8003194:	4093      	lsls	r3, r2
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800319c:	4934      	ldr	r1, [pc, #208]	; (8003270 <HAL_GPIO_Init+0x30c>)
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	089b      	lsrs	r3, r3, #2
 80031a2:	3302      	adds	r3, #2
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031aa:	4b3a      	ldr	r3, [pc, #232]	; (8003294 <HAL_GPIO_Init+0x330>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031ce:	4a31      	ldr	r2, [pc, #196]	; (8003294 <HAL_GPIO_Init+0x330>)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031d4:	4b2f      	ldr	r3, [pc, #188]	; (8003294 <HAL_GPIO_Init+0x330>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031f8:	4a26      	ldr	r2, [pc, #152]	; (8003294 <HAL_GPIO_Init+0x330>)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031fe:	4b25      	ldr	r3, [pc, #148]	; (8003294 <HAL_GPIO_Init+0x330>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003222:	4a1c      	ldr	r2, [pc, #112]	; (8003294 <HAL_GPIO_Init+0x330>)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003228:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <HAL_GPIO_Init+0x330>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800324c:	4a11      	ldr	r2, [pc, #68]	; (8003294 <HAL_GPIO_Init+0x330>)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3301      	adds	r3, #1
 8003256:	61fb      	str	r3, [r7, #28]
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	2b0f      	cmp	r3, #15
 800325c:	f67f ae90 	bls.w	8002f80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003260:	bf00      	nop
 8003262:	3724      	adds	r7, #36	; 0x24
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	40023800 	.word	0x40023800
 8003270:	40013800 	.word	0x40013800
 8003274:	40020000 	.word	0x40020000
 8003278:	40020400 	.word	0x40020400
 800327c:	40020800 	.word	0x40020800
 8003280:	40020c00 	.word	0x40020c00
 8003284:	40021000 	.word	0x40021000
 8003288:	40021400 	.word	0x40021400
 800328c:	40021800 	.word	0x40021800
 8003290:	40021c00 	.word	0x40021c00
 8003294:	40013c00 	.word	0x40013c00

08003298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	807b      	strh	r3, [r7, #2]
 80032a4:	4613      	mov	r3, r2
 80032a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032a8:	787b      	ldrb	r3, [r7, #1]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ae:	887a      	ldrh	r2, [r7, #2]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032b4:	e003      	b.n	80032be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032b6:	887b      	ldrh	r3, [r7, #2]
 80032b8:	041a      	lsls	r2, r3, #16
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	619a      	str	r2, [r3, #24]
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e11f      	b.n	800351e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7fd fcee 	bl	8000cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2224      	movs	r2, #36	; 0x24
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800331e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800332e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003330:	f003 fe74 	bl	800701c <HAL_RCC_GetPCLK1Freq>
 8003334:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4a7b      	ldr	r2, [pc, #492]	; (8003528 <HAL_I2C_Init+0x25c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d807      	bhi.n	8003350 <HAL_I2C_Init+0x84>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4a7a      	ldr	r2, [pc, #488]	; (800352c <HAL_I2C_Init+0x260>)
 8003344:	4293      	cmp	r3, r2
 8003346:	bf94      	ite	ls
 8003348:	2301      	movls	r3, #1
 800334a:	2300      	movhi	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	e006      	b.n	800335e <HAL_I2C_Init+0x92>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4a77      	ldr	r2, [pc, #476]	; (8003530 <HAL_I2C_Init+0x264>)
 8003354:	4293      	cmp	r3, r2
 8003356:	bf94      	ite	ls
 8003358:	2301      	movls	r3, #1
 800335a:	2300      	movhi	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e0db      	b.n	800351e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4a72      	ldr	r2, [pc, #456]	; (8003534 <HAL_I2C_Init+0x268>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	0c9b      	lsrs	r3, r3, #18
 8003370:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	430a      	orrs	r2, r1
 8003384:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	4a64      	ldr	r2, [pc, #400]	; (8003528 <HAL_I2C_Init+0x25c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d802      	bhi.n	80033a0 <HAL_I2C_Init+0xd4>
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	3301      	adds	r3, #1
 800339e:	e009      	b.n	80033b4 <HAL_I2C_Init+0xe8>
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033a6:	fb02 f303 	mul.w	r3, r2, r3
 80033aa:	4a63      	ldr	r2, [pc, #396]	; (8003538 <HAL_I2C_Init+0x26c>)
 80033ac:	fba2 2303 	umull	r2, r3, r2, r3
 80033b0:	099b      	lsrs	r3, r3, #6
 80033b2:	3301      	adds	r3, #1
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	4956      	ldr	r1, [pc, #344]	; (8003528 <HAL_I2C_Init+0x25c>)
 80033d0:	428b      	cmp	r3, r1
 80033d2:	d80d      	bhi.n	80033f0 <HAL_I2C_Init+0x124>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1e59      	subs	r1, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	fbb1 f3f3 	udiv	r3, r1, r3
 80033e2:	3301      	adds	r3, #1
 80033e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	bf38      	it	cc
 80033ec:	2304      	movcc	r3, #4
 80033ee:	e04f      	b.n	8003490 <HAL_I2C_Init+0x1c4>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d111      	bne.n	800341c <HAL_I2C_Init+0x150>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1e58      	subs	r0, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	440b      	add	r3, r1
 8003406:	fbb0 f3f3 	udiv	r3, r0, r3
 800340a:	3301      	adds	r3, #1
 800340c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	e012      	b.n	8003442 <HAL_I2C_Init+0x176>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	1e58      	subs	r0, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	0099      	lsls	r1, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003432:	3301      	adds	r3, #1
 8003434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003438:	2b00      	cmp	r3, #0
 800343a:	bf0c      	ite	eq
 800343c:	2301      	moveq	r3, #1
 800343e:	2300      	movne	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_I2C_Init+0x17e>
 8003446:	2301      	movs	r3, #1
 8003448:	e022      	b.n	8003490 <HAL_I2C_Init+0x1c4>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10e      	bne.n	8003470 <HAL_I2C_Init+0x1a4>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	1e58      	subs	r0, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6859      	ldr	r1, [r3, #4]
 800345a:	460b      	mov	r3, r1
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	440b      	add	r3, r1
 8003460:	fbb0 f3f3 	udiv	r3, r0, r3
 8003464:	3301      	adds	r3, #1
 8003466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800346e:	e00f      	b.n	8003490 <HAL_I2C_Init+0x1c4>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1e58      	subs	r0, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6859      	ldr	r1, [r3, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	0099      	lsls	r1, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	fbb0 f3f3 	udiv	r3, r0, r3
 8003486:	3301      	adds	r3, #1
 8003488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	6809      	ldr	r1, [r1, #0]
 8003494:	4313      	orrs	r3, r2
 8003496:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69da      	ldr	r2, [r3, #28]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6911      	ldr	r1, [r2, #16]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	68d2      	ldr	r2, [r2, #12]
 80034ca:	4311      	orrs	r1, r2
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	000186a0 	.word	0x000186a0
 800352c:	001e847f 	.word	0x001e847f
 8003530:	003d08ff 	.word	0x003d08ff
 8003534:	431bde83 	.word	0x431bde83
 8003538:	10624dd3 	.word	0x10624dd3

0800353c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af02      	add	r7, sp, #8
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	461a      	mov	r2, r3
 8003548:	460b      	mov	r3, r1
 800354a:	817b      	strh	r3, [r7, #10]
 800354c:	4613      	mov	r3, r2
 800354e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003550:	f7ff f83c 	bl	80025cc <HAL_GetTick>
 8003554:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b20      	cmp	r3, #32
 8003560:	f040 80e0 	bne.w	8003724 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	2319      	movs	r3, #25
 800356a:	2201      	movs	r2, #1
 800356c:	4970      	ldr	r1, [pc, #448]	; (8003730 <HAL_I2C_Master_Transmit+0x1f4>)
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f001 fdf5 	bl	800515e <I2C_WaitOnFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800357a:	2302      	movs	r3, #2
 800357c:	e0d3      	b.n	8003726 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_I2C_Master_Transmit+0x50>
 8003588:	2302      	movs	r3, #2
 800358a:	e0cc      	b.n	8003726 <HAL_I2C_Master_Transmit+0x1ea>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d007      	beq.n	80035b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0201 	orr.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2221      	movs	r2, #33	; 0x21
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2210      	movs	r2, #16
 80035ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	893a      	ldrh	r2, [r7, #8]
 80035e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4a50      	ldr	r2, [pc, #320]	; (8003734 <HAL_I2C_Master_Transmit+0x1f8>)
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035f4:	8979      	ldrh	r1, [r7, #10]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	6a3a      	ldr	r2, [r7, #32]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f001 fcae 	bl	8004f5c <I2C_MasterRequestWrite>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e08d      	b.n	8003726 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800360a:	2300      	movs	r3, #0
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003620:	e066      	b.n	80036f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	6a39      	ldr	r1, [r7, #32]
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f001 fe6f 	bl	800530a <I2C_WaitOnTXEFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00d      	beq.n	800364e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	2b04      	cmp	r3, #4
 8003638:	d107      	bne.n	800364a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003648:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e06b      	b.n	8003726 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	781a      	ldrb	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003676:	3b01      	subs	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b04      	cmp	r3, #4
 800368a:	d11b      	bne.n	80036c4 <HAL_I2C_Master_Transmit+0x188>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003690:	2b00      	cmp	r3, #0
 8003692:	d017      	beq.n	80036c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	781a      	ldrb	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	6a39      	ldr	r1, [r7, #32]
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f001 fe5f 	bl	800538c <I2C_WaitOnBTFFlagUntilTimeout>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00d      	beq.n	80036f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d107      	bne.n	80036ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e01a      	b.n	8003726 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d194      	bne.n	8003622 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	e000      	b.n	8003726 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003724:	2302      	movs	r3, #2
  }
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	00100002 	.word	0x00100002
 8003734:	ffff0000 	.word	0xffff0000

08003738 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	461a      	mov	r2, r3
 8003744:	460b      	mov	r3, r1
 8003746:	817b      	strh	r3, [r7, #10]
 8003748:	4613      	mov	r3, r2
 800374a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b20      	cmp	r3, #32
 800375a:	f040 8085 	bne.w	8003868 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800375e:	4b46      	ldr	r3, [pc, #280]	; (8003878 <HAL_I2C_Master_Transmit_IT+0x140>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	08db      	lsrs	r3, r3, #3
 8003764:	4a45      	ldr	r2, [pc, #276]	; (800387c <HAL_I2C_Master_Transmit_IT+0x144>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	0a1a      	lsrs	r2, r3, #8
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	009a      	lsls	r2, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	3b01      	subs	r3, #1
 800377c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d116      	bne.n	80037b2 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f043 0220 	orr.w	r2, r3, #32
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e05b      	b.n	800386a <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d0db      	beq.n	8003778 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d101      	bne.n	80037ce <HAL_I2C_Master_Transmit_IT+0x96>
 80037ca:	2302      	movs	r3, #2
 80037cc:	e04d      	b.n	800386a <HAL_I2C_Master_Transmit_IT+0x132>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d007      	beq.n	80037f4 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0201 	orr.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003802:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2221      	movs	r2, #33	; 0x21
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2210      	movs	r2, #16
 8003810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	893a      	ldrh	r2, [r7, #8]
 8003824:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4a13      	ldr	r2, [pc, #76]	; (8003880 <HAL_I2C_Master_Transmit_IT+0x148>)
 8003834:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003836:	897a      	ldrh	r2, [r7, #10]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800384a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003862:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	e000      	b.n	800386a <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8003868:	2302      	movs	r3, #2
  }
}
 800386a:	4618      	mov	r0, r3
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	2000007c 	.word	0x2000007c
 800387c:	14f8b589 	.word	0x14f8b589
 8003880:	ffff0000 	.word	0xffff0000

08003884 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b088      	sub	sp, #32
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ac:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d003      	beq.n	80038bc <HAL_I2C_EV_IRQHandler+0x38>
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	2b40      	cmp	r3, #64	; 0x40
 80038b8:	f040 80b6 	bne.w	8003a28 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10d      	bne.n	80038f2 <HAL_I2C_EV_IRQHandler+0x6e>
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80038dc:	d003      	beq.n	80038e6 <HAL_I2C_EV_IRQHandler+0x62>
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80038e4:	d101      	bne.n	80038ea <HAL_I2C_EV_IRQHandler+0x66>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <HAL_I2C_EV_IRQHandler+0x68>
 80038ea:	2300      	movs	r3, #0
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	f000 8127 	beq.w	8003b40 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00c      	beq.n	8003916 <HAL_I2C_EV_IRQHandler+0x92>
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	0a5b      	lsrs	r3, r3, #9
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d006      	beq.n	8003916 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f001 fdaf 	bl	800546c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fd12 	bl	8004338 <I2C_Master_SB>
 8003914:	e087      	b.n	8003a26 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	08db      	lsrs	r3, r3, #3
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d009      	beq.n	8003936 <HAL_I2C_EV_IRQHandler+0xb2>
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	0a5b      	lsrs	r3, r3, #9
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fd88 	bl	8004444 <I2C_Master_ADD10>
 8003934:	e077      	b.n	8003a26 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	085b      	lsrs	r3, r3, #1
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d009      	beq.n	8003956 <HAL_I2C_EV_IRQHandler+0xd2>
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	0a5b      	lsrs	r3, r3, #9
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fda2 	bl	8004498 <I2C_Master_ADDR>
 8003954:	e067      	b.n	8003a26 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	089b      	lsrs	r3, r3, #2
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d030      	beq.n	80039c4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800396c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003970:	f000 80e8 	beq.w	8003b44 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	09db      	lsrs	r3, r3, #7
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00f      	beq.n	80039a0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	0a9b      	lsrs	r3, r3, #10
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d009      	beq.n	80039a0 <HAL_I2C_EV_IRQHandler+0x11c>
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d103      	bne.n	80039a0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f9de 	bl	8003d5a <I2C_MasterTransmit_TXE>
 800399e:	e042      	b.n	8003a26 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	089b      	lsrs	r3, r3, #2
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80cb 	beq.w	8003b44 <HAL_I2C_EV_IRQHandler+0x2c0>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	0a5b      	lsrs	r3, r3, #9
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80c4 	beq.w	8003b44 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fa68 	bl	8003e92 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039c2:	e0bf      	b.n	8003b44 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d2:	f000 80b7 	beq.w	8003b44 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	099b      	lsrs	r3, r3, #6
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00f      	beq.n	8003a02 <HAL_I2C_EV_IRQHandler+0x17e>
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	0a9b      	lsrs	r3, r3, #10
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_I2C_EV_IRQHandler+0x17e>
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	089b      	lsrs	r3, r3, #2
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d103      	bne.n	8003a02 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fb30 	bl	8004060 <I2C_MasterReceive_RXNE>
 8003a00:	e011      	b.n	8003a26 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	089b      	lsrs	r3, r3, #2
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 809a 	beq.w	8003b44 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	0a5b      	lsrs	r3, r3, #9
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 8093 	beq.w	8003b44 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fba0 	bl	8004164 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a24:	e08e      	b.n	8003b44 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003a26:	e08d      	b.n	8003b44 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d004      	beq.n	8003a3a <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	61fb      	str	r3, [r7, #28]
 8003a38:	e007      	b.n	8003a4a <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	085b      	lsrs	r3, r3, #1
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d012      	beq.n	8003a7c <HAL_I2C_EV_IRQHandler+0x1f8>
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	0a5b      	lsrs	r3, r3, #9
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00c      	beq.n	8003a7c <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003a72:	69b9      	ldr	r1, [r7, #24]
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 ff5e 	bl	8004936 <I2C_Slave_ADDR>
 8003a7a:	e066      	b.n	8003b4a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d009      	beq.n	8003a9c <HAL_I2C_EV_IRQHandler+0x218>
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	0a5b      	lsrs	r3, r3, #9
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 ff93 	bl	80049c0 <I2C_Slave_STOPF>
 8003a9a:	e056      	b.n	8003b4a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a9c:	7bbb      	ldrb	r3, [r7, #14]
 8003a9e:	2b21      	cmp	r3, #33	; 0x21
 8003aa0:	d002      	beq.n	8003aa8 <HAL_I2C_EV_IRQHandler+0x224>
 8003aa2:	7bbb      	ldrb	r3, [r7, #14]
 8003aa4:	2b29      	cmp	r3, #41	; 0x29
 8003aa6:	d125      	bne.n	8003af4 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	09db      	lsrs	r3, r3, #7
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00f      	beq.n	8003ad4 <HAL_I2C_EV_IRQHandler+0x250>
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	0a9b      	lsrs	r3, r3, #10
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d009      	beq.n	8003ad4 <HAL_I2C_EV_IRQHandler+0x250>
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	089b      	lsrs	r3, r3, #2
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d103      	bne.n	8003ad4 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fe74 	bl	80047ba <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ad2:	e039      	b.n	8003b48 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	089b      	lsrs	r3, r3, #2
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d033      	beq.n	8003b48 <HAL_I2C_EV_IRQHandler+0x2c4>
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	0a5b      	lsrs	r3, r3, #9
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d02d      	beq.n	8003b48 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fea1 	bl	8004834 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003af2:	e029      	b.n	8003b48 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	099b      	lsrs	r3, r3, #6
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00f      	beq.n	8003b20 <HAL_I2C_EV_IRQHandler+0x29c>
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	0a9b      	lsrs	r3, r3, #10
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d009      	beq.n	8003b20 <HAL_I2C_EV_IRQHandler+0x29c>
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	089b      	lsrs	r3, r3, #2
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d103      	bne.n	8003b20 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 feac 	bl	8004876 <I2C_SlaveReceive_RXNE>
 8003b1e:	e014      	b.n	8003b4a <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	089b      	lsrs	r3, r3, #2
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00e      	beq.n	8003b4a <HAL_I2C_EV_IRQHandler+0x2c6>
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	0a5b      	lsrs	r3, r3, #9
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 feda 	bl	80048f2 <I2C_SlaveReceive_BTF>
 8003b3e:	e004      	b.n	8003b4a <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003b40:	bf00      	nop
 8003b42:	e002      	b.n	8003b4a <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b44:	bf00      	nop
 8003b46:	e000      	b.n	8003b4a <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b48:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003b4a:	3720      	adds	r7, #32
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	; 0x28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b72:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	0a1b      	lsrs	r3, r3, #8
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00e      	beq.n	8003b9e <HAL_I2C_ER_IRQHandler+0x4e>
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	0a1b      	lsrs	r3, r3, #8
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b9c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	0a5b      	lsrs	r3, r3, #9
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00e      	beq.n	8003bc8 <HAL_I2C_ER_IRQHandler+0x78>
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	0a1b      	lsrs	r3, r3, #8
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	f043 0302 	orr.w	r3, r3, #2
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003bc6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	0a9b      	lsrs	r3, r3, #10
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d03f      	beq.n	8003c54 <HAL_I2C_ER_IRQHandler+0x104>
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	0a1b      	lsrs	r3, r3, #8
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d039      	beq.n	8003c54 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003be0:	7efb      	ldrb	r3, [r7, #27]
 8003be2:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf2:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003bfa:	7ebb      	ldrb	r3, [r7, #26]
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d112      	bne.n	8003c26 <HAL_I2C_ER_IRQHandler+0xd6>
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10f      	bne.n	8003c26 <HAL_I2C_ER_IRQHandler+0xd6>
 8003c06:	7cfb      	ldrb	r3, [r7, #19]
 8003c08:	2b21      	cmp	r3, #33	; 0x21
 8003c0a:	d008      	beq.n	8003c1e <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003c0c:	7cfb      	ldrb	r3, [r7, #19]
 8003c0e:	2b29      	cmp	r3, #41	; 0x29
 8003c10:	d005      	beq.n	8003c1e <HAL_I2C_ER_IRQHandler+0xce>
 8003c12:	7cfb      	ldrb	r3, [r7, #19]
 8003c14:	2b28      	cmp	r3, #40	; 0x28
 8003c16:	d106      	bne.n	8003c26 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b21      	cmp	r3, #33	; 0x21
 8003c1c:	d103      	bne.n	8003c26 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fffe 	bl	8004c20 <I2C_Slave_AF>
 8003c24:	e016      	b.n	8003c54 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c2e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	f043 0304 	orr.w	r3, r3, #4
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c38:	7efb      	ldrb	r3, [r7, #27]
 8003c3a:	2b10      	cmp	r3, #16
 8003c3c:	d002      	beq.n	8003c44 <HAL_I2C_ER_IRQHandler+0xf4>
 8003c3e:	7efb      	ldrb	r3, [r7, #27]
 8003c40:	2b40      	cmp	r3, #64	; 0x40
 8003c42:	d107      	bne.n	8003c54 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c52:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	0adb      	lsrs	r3, r3, #11
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00e      	beq.n	8003c7e <HAL_I2C_ER_IRQHandler+0x12e>
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	f043 0308 	orr.w	r3, r3, #8
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003c7c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d008      	beq.n	8003c96 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f001 f835 	bl	8004d00 <I2C_ITError>
  }
}
 8003c96:	bf00      	nop
 8003c98:	3728      	adds	r7, #40	; 0x28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	70fb      	strb	r3, [r7, #3]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d68:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d70:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d150      	bne.n	8003e22 <I2C_MasterTransmit_TXE+0xc8>
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	2b21      	cmp	r3, #33	; 0x21
 8003d84:	d14d      	bne.n	8003e22 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d01d      	beq.n	8003dc8 <I2C_MasterTransmit_TXE+0x6e>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d01a      	beq.n	8003dc8 <I2C_MasterTransmit_TXE+0x6e>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d98:	d016      	beq.n	8003dc8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003da8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2211      	movs	r2, #17
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7fd ff55 	bl	8001c70 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dc6:	e060      	b.n	8003e8a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dd6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b40      	cmp	r3, #64	; 0x40
 8003e00:	d107      	bne.n	8003e12 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff ff7d 	bl	8003d0a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e10:	e03b      	b.n	8003e8a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fd ff28 	bl	8001c70 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e20:	e033      	b.n	8003e8a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	2b21      	cmp	r3, #33	; 0x21
 8003e26:	d005      	beq.n	8003e34 <I2C_MasterTransmit_TXE+0xda>
 8003e28:	7bbb      	ldrb	r3, [r7, #14]
 8003e2a:	2b40      	cmp	r3, #64	; 0x40
 8003e2c:	d12d      	bne.n	8003e8a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	2b22      	cmp	r3, #34	; 0x22
 8003e32:	d12a      	bne.n	8003e8a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d108      	bne.n	8003e50 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e4c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003e4e:	e01c      	b.n	8003e8a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b40      	cmp	r3, #64	; 0x40
 8003e5a:	d103      	bne.n	8003e64 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f898 	bl	8003f92 <I2C_MemoryTransmit_TXE_BTF>
}
 8003e62:	e012      	b.n	8003e8a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	781a      	ldrb	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003e88:	e7ff      	b.n	8003e8a <I2C_MasterTransmit_TXE+0x130>
 8003e8a:	bf00      	nop
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b21      	cmp	r3, #33	; 0x21
 8003eaa:	d165      	bne.n	8003f78 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d012      	beq.n	8003edc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	781a      	ldrb	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003eda:	e056      	b.n	8003f8a <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d01d      	beq.n	8003f1e <I2C_MasterTransmit_BTF+0x8c>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b20      	cmp	r3, #32
 8003ee6:	d01a      	beq.n	8003f1e <I2C_MasterTransmit_BTF+0x8c>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eee:	d016      	beq.n	8003f1e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003efe:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2211      	movs	r2, #17
 8003f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fd feaa 	bl	8001c70 <HAL_I2C_MasterTxCpltCallback>
}
 8003f1c:	e035      	b.n	8003f8a <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f2c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b40      	cmp	r3, #64	; 0x40
 8003f56:	d107      	bne.n	8003f68 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff fed2 	bl	8003d0a <HAL_I2C_MemTxCpltCallback>
}
 8003f66:	e010      	b.n	8003f8a <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7fd fe7d 	bl	8001c70 <HAL_I2C_MasterTxCpltCallback>
}
 8003f76:	e008      	b.n	8003f8a <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b40      	cmp	r3, #64	; 0x40
 8003f82:	d102      	bne.n	8003f8a <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f804 	bl	8003f92 <I2C_MemoryTransmit_TXE_BTF>
}
 8003f8a:	bf00      	nop
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d11d      	bne.n	8003fde <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d10b      	bne.n	8003fc2 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fba:	1c9a      	adds	r2, r3, #2
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003fc0:	e048      	b.n	8004054 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	121b      	asrs	r3, r3, #8
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003fdc:	e03a      	b.n	8004054 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d10b      	bne.n	8003ffe <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ffc:	e02a      	b.n	8004054 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004002:	2b02      	cmp	r3, #2
 8004004:	d126      	bne.n	8004054 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b22      	cmp	r3, #34	; 0x22
 8004010:	d108      	bne.n	8004024 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004020:	601a      	str	r2, [r3, #0]
}
 8004022:	e017      	b.n	8004054 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b21      	cmp	r3, #33	; 0x21
 800402e:	d111      	bne.n	8004054 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	781a      	ldrb	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b22      	cmp	r3, #34	; 0x22
 8004072:	d173      	bne.n	800415c <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b03      	cmp	r3, #3
 8004080:	d920      	bls.n	80040c4 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d154      	bne.n	800415c <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80040c2:	e04b      	b.n	800415c <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d047      	beq.n	800415c <I2C_MasterReceive_RXNE+0xfc>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d002      	beq.n	80040d8 <I2C_MasterReceive_RXNE+0x78>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d141      	bne.n	800415c <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040f6:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b40      	cmp	r3, #64	; 0x40
 8004130:	d10a      	bne.n	8004148 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff fdec 	bl	8003d1e <HAL_I2C_MemRxCpltCallback>
}
 8004146:	e009      	b.n	800415c <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2212      	movs	r2, #18
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff fda1 	bl	8003c9e <HAL_I2C_MasterRxCpltCallback>
}
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b04      	cmp	r3, #4
 800417a:	d11b      	bne.n	80041b4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80041b2:	e0bd      	b.n	8004330 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d129      	bne.n	8004212 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041cc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d00a      	beq.n	80041ea <I2C_MasterReceive_BTF+0x86>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d007      	beq.n	80041ea <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004210:	e08e      	b.n	8004330 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d176      	bne.n	800430a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d002      	beq.n	8004228 <I2C_MasterReceive_BTF+0xc4>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b10      	cmp	r3, #16
 8004226:	d108      	bne.n	800423a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	e019      	b.n	800426e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b04      	cmp	r3, #4
 800423e:	d002      	beq.n	8004246 <I2C_MasterReceive_BTF+0xe2>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d108      	bne.n	8004258 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	e00a      	b.n	800426e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b10      	cmp	r3, #16
 800425c:	d007      	beq.n	800426e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800426c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428a:	b29b      	uxth	r3, r3
 800428c:	3b01      	subs	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80042c8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b40      	cmp	r3, #64	; 0x40
 80042dc:	d10a      	bne.n	80042f4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff fd16 	bl	8003d1e <HAL_I2C_MemRxCpltCallback>
}
 80042f2:	e01d      	b.n	8004330 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2212      	movs	r2, #18
 8004300:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff fccb 	bl	8003c9e <HAL_I2C_MasterRxCpltCallback>
}
 8004308:	e012      	b.n	8004330 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004330:	bf00      	nop
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b40      	cmp	r3, #64	; 0x40
 800434a:	d117      	bne.n	800437c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004350:	2b00      	cmp	r3, #0
 8004352:	d109      	bne.n	8004368 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004358:	b2db      	uxtb	r3, r3
 800435a:	461a      	mov	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004364:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004366:	e067      	b.n	8004438 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436c:	b2db      	uxtb	r3, r3
 800436e:	f043 0301 	orr.w	r3, r3, #1
 8004372:	b2da      	uxtb	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	611a      	str	r2, [r3, #16]
}
 800437a:	e05d      	b.n	8004438 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004384:	d133      	bne.n	80043ee <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b21      	cmp	r3, #33	; 0x21
 8004390:	d109      	bne.n	80043a6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004396:	b2db      	uxtb	r3, r3
 8004398:	461a      	mov	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043a2:	611a      	str	r2, [r3, #16]
 80043a4:	e008      	b.n	80043b8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	f043 0301 	orr.w	r3, r3, #1
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d004      	beq.n	80043ca <I2C_Master_SB+0x92>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d108      	bne.n	80043dc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d032      	beq.n	8004438 <I2C_Master_SB+0x100>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d02d      	beq.n	8004438 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ea:	605a      	str	r2, [r3, #4]
}
 80043ec:	e024      	b.n	8004438 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10e      	bne.n	8004414 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	11db      	asrs	r3, r3, #7
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	f003 0306 	and.w	r3, r3, #6
 8004404:	b2db      	uxtb	r3, r3
 8004406:	f063 030f 	orn	r3, r3, #15
 800440a:	b2da      	uxtb	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	611a      	str	r2, [r3, #16]
}
 8004412:	e011      	b.n	8004438 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004418:	2b01      	cmp	r3, #1
 800441a:	d10d      	bne.n	8004438 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004420:	b29b      	uxth	r3, r3
 8004422:	11db      	asrs	r3, r3, #7
 8004424:	b2db      	uxtb	r3, r3
 8004426:	f003 0306 	and.w	r3, r3, #6
 800442a:	b2db      	uxtb	r3, r3
 800442c:	f063 030e 	orn	r3, r3, #14
 8004430:	b2da      	uxtb	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	611a      	str	r2, [r3, #16]
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004450:	b2da      	uxtb	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445c:	2b00      	cmp	r3, #0
 800445e:	d103      	bne.n	8004468 <I2C_Master_ADD10+0x24>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004464:	2b00      	cmp	r3, #0
 8004466:	d011      	beq.n	800448c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d104      	bne.n	800447c <I2C_Master_ADD10+0x38>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004478:	2b00      	cmp	r3, #0
 800447a:	d007      	beq.n	800448c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800448a:	605a      	str	r2, [r3, #4]
    }
  }
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004498:	b480      	push	{r7}
 800449a:	b091      	sub	sp, #68	; 0x44
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ae:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b22      	cmp	r3, #34	; 0x22
 80044c0:	f040 8169 	bne.w	8004796 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10f      	bne.n	80044ec <I2C_Master_ADDR+0x54>
 80044cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80044d0:	2b40      	cmp	r3, #64	; 0x40
 80044d2:	d10b      	bne.n	80044ec <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d4:	2300      	movs	r3, #0
 80044d6:	633b      	str	r3, [r7, #48]	; 0x30
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	633b      	str	r3, [r7, #48]	; 0x30
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	633b      	str	r3, [r7, #48]	; 0x30
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	e160      	b.n	80047ae <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d11d      	bne.n	8004530 <I2C_Master_ADDR+0x98>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044fc:	d118      	bne.n	8004530 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044fe:	2300      	movs	r3, #0
 8004500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004512:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004522:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	651a      	str	r2, [r3, #80]	; 0x50
 800452e:	e13e      	b.n	80047ae <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d113      	bne.n	8004562 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800453a:	2300      	movs	r3, #0
 800453c:	62bb      	str	r3, [r7, #40]	; 0x28
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	62bb      	str	r3, [r7, #40]	; 0x28
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	62bb      	str	r3, [r7, #40]	; 0x28
 800454e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	e115      	b.n	800478e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004566:	b29b      	uxth	r3, r3
 8004568:	2b01      	cmp	r3, #1
 800456a:	f040 808a 	bne.w	8004682 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800456e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004570:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004574:	d137      	bne.n	80045e6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004584:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004594:	d113      	bne.n	80045be <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a6:	2300      	movs	r3, #0
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	e0e7      	b.n	800478e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045be:	2300      	movs	r3, #0
 80045c0:	623b      	str	r3, [r7, #32]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	623b      	str	r3, [r7, #32]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	623b      	str	r3, [r7, #32]
 80045d2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	e0d3      	b.n	800478e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80045e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d02e      	beq.n	800464a <I2C_Master_ADDR+0x1b2>
 80045ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d02b      	beq.n	800464a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80045f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f4:	2b12      	cmp	r3, #18
 80045f6:	d102      	bne.n	80045fe <I2C_Master_ADDR+0x166>
 80045f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d125      	bne.n	800464a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80045fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004600:	2b04      	cmp	r3, #4
 8004602:	d00e      	beq.n	8004622 <I2C_Master_ADDR+0x18a>
 8004604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004606:	2b02      	cmp	r3, #2
 8004608:	d00b      	beq.n	8004622 <I2C_Master_ADDR+0x18a>
 800460a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460c:	2b10      	cmp	r3, #16
 800460e:	d008      	beq.n	8004622 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	e007      	b.n	8004632 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004630:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	61fb      	str	r3, [r7, #28]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	61fb      	str	r3, [r7, #28]
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	e0a1      	b.n	800478e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004658:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800465a:	2300      	movs	r3, #0
 800465c:	61bb      	str	r3, [r7, #24]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	e085      	b.n	800478e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004686:	b29b      	uxth	r3, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d14d      	bne.n	8004728 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800468c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468e:	2b04      	cmp	r3, #4
 8004690:	d016      	beq.n	80046c0 <I2C_Master_ADDR+0x228>
 8004692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004694:	2b02      	cmp	r3, #2
 8004696:	d013      	beq.n	80046c0 <I2C_Master_ADDR+0x228>
 8004698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469a:	2b10      	cmp	r3, #16
 800469c:	d010      	beq.n	80046c0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ac:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	e007      	b.n	80046d0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046ce:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046de:	d117      	bne.n	8004710 <I2C_Master_ADDR+0x278>
 80046e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046e6:	d00b      	beq.n	8004700 <I2C_Master_ADDR+0x268>
 80046e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d008      	beq.n	8004700 <I2C_Master_ADDR+0x268>
 80046ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d005      	beq.n	8004700 <I2C_Master_ADDR+0x268>
 80046f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f6:	2b10      	cmp	r3, #16
 80046f8:	d002      	beq.n	8004700 <I2C_Master_ADDR+0x268>
 80046fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d107      	bne.n	8004710 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800470e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	e032      	b.n	800478e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004736:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004746:	d117      	bne.n	8004778 <I2C_Master_ADDR+0x2e0>
 8004748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800474e:	d00b      	beq.n	8004768 <I2C_Master_ADDR+0x2d0>
 8004750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004752:	2b01      	cmp	r3, #1
 8004754:	d008      	beq.n	8004768 <I2C_Master_ADDR+0x2d0>
 8004756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004758:	2b08      	cmp	r3, #8
 800475a:	d005      	beq.n	8004768 <I2C_Master_ADDR+0x2d0>
 800475c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475e:	2b10      	cmp	r3, #16
 8004760:	d002      	beq.n	8004768 <I2C_Master_ADDR+0x2d0>
 8004762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004764:	2b20      	cmp	r3, #32
 8004766:	d107      	bne.n	8004778 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004776:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004778:	2300      	movs	r3, #0
 800477a:	613b      	str	r3, [r7, #16]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	613b      	str	r3, [r7, #16]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004794:	e00b      	b.n	80047ae <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	68fb      	ldr	r3, [r7, #12]
}
 80047ac:	e7ff      	b.n	80047ae <I2C_Master_ADDR+0x316>
 80047ae:	bf00      	nop
 80047b0:	3744      	adds	r7, #68	; 0x44
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d02b      	beq.n	800482c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	781a      	ldrb	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d114      	bne.n	800482c <I2C_SlaveTransmit_TXE+0x72>
 8004802:	7bfb      	ldrb	r3, [r7, #15]
 8004804:	2b29      	cmp	r3, #41	; 0x29
 8004806:	d111      	bne.n	800482c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004816:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2221      	movs	r2, #33	; 0x21
 800481c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2228      	movs	r2, #40	; 0x28
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff fa43 	bl	8003cb2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800482c:	bf00      	nop
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d011      	beq.n	800486a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	781a      	ldrb	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004860:	b29b      	uxth	r3, r3
 8004862:	3b01      	subs	r3, #1
 8004864:	b29a      	uxth	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004884:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488a:	b29b      	uxth	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	d02c      	beq.n	80048ea <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691a      	ldr	r2, [r3, #16]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d114      	bne.n	80048ea <I2C_SlaveReceive_RXNE+0x74>
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
 80048c2:	2b2a      	cmp	r3, #42	; 0x2a
 80048c4:	d111      	bne.n	80048ea <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2222      	movs	r2, #34	; 0x22
 80048da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2228      	movs	r2, #40	; 0x28
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff f9ee 	bl	8003cc6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80048ea:	bf00      	nop
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d012      	beq.n	800492a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691a      	ldr	r2, [r3, #16]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	b2d2      	uxtb	r2, r2
 8004910:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b084      	sub	sp, #16
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004940:	2300      	movs	r3, #0
 8004942:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004950:	2b28      	cmp	r3, #40	; 0x28
 8004952:	d127      	bne.n	80049a4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004962:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	089b      	lsrs	r3, r3, #2
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004970:	2301      	movs	r3, #1
 8004972:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	09db      	lsrs	r3, r3, #7
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d103      	bne.n	8004988 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	81bb      	strh	r3, [r7, #12]
 8004986:	e002      	b.n	800498e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004996:	89ba      	ldrh	r2, [r7, #12]
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	4619      	mov	r1, r3
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff f99c 	bl	8003cda <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80049a2:	e008      	b.n	80049b6 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0202 	mvn.w	r2, #2
 80049ac:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ce:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049de:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80049e0:	2300      	movs	r3, #0
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	60bb      	str	r3, [r7, #8]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0201 	orr.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a0c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a1c:	d172      	bne.n	8004b04 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	2b22      	cmp	r3, #34	; 0x22
 8004a22:	d002      	beq.n	8004a2a <I2C_Slave_STOPF+0x6a>
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	2b2a      	cmp	r3, #42	; 0x2a
 8004a28:	d135      	bne.n	8004a96 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	f043 0204 	orr.w	r2, r3, #4
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a5c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fe fa6f 	bl	8002f46 <HAL_DMA_GetState>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d049      	beq.n	8004b02 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	4a69      	ldr	r2, [pc, #420]	; (8004c18 <I2C_Slave_STOPF+0x258>)
 8004a74:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fe fa41 	bl	8002f02 <HAL_DMA_Abort_IT>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d03d      	beq.n	8004b02 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a90:	4610      	mov	r0, r2
 8004a92:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a94:	e035      	b.n	8004b02 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d005      	beq.n	8004aba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	f043 0204 	orr.w	r2, r3, #4
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ac8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fe fa39 	bl	8002f46 <HAL_DMA_GetState>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d014      	beq.n	8004b04 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ade:	4a4e      	ldr	r2, [pc, #312]	; (8004c18 <I2C_Slave_STOPF+0x258>)
 8004ae0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fe fa0b 	bl	8002f02 <HAL_DMA_Abort_IT>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d008      	beq.n	8004b04 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004afc:	4610      	mov	r0, r2
 8004afe:	4798      	blx	r3
 8004b00:	e000      	b.n	8004b04 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b02:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d03e      	beq.n	8004b8c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b04      	cmp	r3, #4
 8004b1a:	d112      	bne.n	8004b42 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691a      	ldr	r2, [r3, #16]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	d112      	bne.n	8004b76 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	f043 0204 	orr.w	r2, r3, #4
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f8b3 	bl	8004d00 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004b9a:	e039      	b.n	8004c10 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	2b2a      	cmp	r3, #42	; 0x2a
 8004ba0:	d109      	bne.n	8004bb6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2228      	movs	r2, #40	; 0x28
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff f888 	bl	8003cc6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b28      	cmp	r3, #40	; 0x28
 8004bc0:	d111      	bne.n	8004be6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a15      	ldr	r2, [pc, #84]	; (8004c1c <I2C_Slave_STOPF+0x25c>)
 8004bc6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff f889 	bl	8003cf6 <HAL_I2C_ListenCpltCallback>
}
 8004be4:	e014      	b.n	8004c10 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bea:	2b22      	cmp	r3, #34	; 0x22
 8004bec:	d002      	beq.n	8004bf4 <I2C_Slave_STOPF+0x234>
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	2b22      	cmp	r3, #34	; 0x22
 8004bf2:	d10d      	bne.n	8004c10 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7ff f85b 	bl	8003cc6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004c10:	bf00      	nop
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	08005061 	.word	0x08005061
 8004c1c:	ffff0000 	.word	0xffff0000

08004c20 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d002      	beq.n	8004c42 <I2C_Slave_AF+0x22>
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	d129      	bne.n	8004c96 <I2C_Slave_AF+0x76>
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
 8004c44:	2b28      	cmp	r3, #40	; 0x28
 8004c46:	d126      	bne.n	8004c96 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a2c      	ldr	r2, [pc, #176]	; (8004cfc <I2C_Slave_AF+0xdc>)
 8004c4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c5c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c66:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c76:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7ff f831 	bl	8003cf6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004c94:	e02e      	b.n	8004cf4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
 8004c98:	2b21      	cmp	r3, #33	; 0x21
 8004c9a:	d126      	bne.n	8004cea <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a17      	ldr	r2, [pc, #92]	; (8004cfc <I2C_Slave_AF+0xdc>)
 8004ca0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2221      	movs	r2, #33	; 0x21
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cc6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cd0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fe ffe5 	bl	8003cb2 <HAL_I2C_SlaveTxCpltCallback>
}
 8004ce8:	e004      	b.n	8004cf4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cf2:	615a      	str	r2, [r3, #20]
}
 8004cf4:	bf00      	nop
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	ffff0000 	.word	0xffff0000

08004d00 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b10      	cmp	r3, #16
 8004d1a:	d10a      	bne.n	8004d32 <I2C_ITError+0x32>
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
 8004d1e:	2b22      	cmp	r3, #34	; 0x22
 8004d20:	d107      	bne.n	8004d32 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d30:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d38:	2b28      	cmp	r3, #40	; 0x28
 8004d3a:	d107      	bne.n	8004d4c <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2228      	movs	r2, #40	; 0x28
 8004d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d4a:	e015      	b.n	8004d78 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d5a:	d006      	beq.n	8004d6a <I2C_ITError+0x6a>
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
 8004d5e:	2b60      	cmp	r3, #96	; 0x60
 8004d60:	d003      	beq.n	8004d6a <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d86:	d162      	bne.n	8004e4e <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d96:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d020      	beq.n	8004de8 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004daa:	4a6a      	ldr	r2, [pc, #424]	; (8004f54 <I2C_ITError+0x254>)
 8004dac:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe f8a5 	bl	8002f02 <HAL_DMA_Abort_IT>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 8089 	beq.w	8004ed2 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0201 	bic.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004de2:	4610      	mov	r0, r2
 8004de4:	4798      	blx	r3
 8004de6:	e074      	b.n	8004ed2 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dec:	4a59      	ldr	r2, [pc, #356]	; (8004f54 <I2C_ITError+0x254>)
 8004dee:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7fe f884 	bl	8002f02 <HAL_DMA_Abort_IT>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d068      	beq.n	8004ed2 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0a:	2b40      	cmp	r3, #64	; 0x40
 8004e0c:	d10b      	bne.n	8004e26 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0201 	bic.w	r2, r2, #1
 8004e34:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e48:	4610      	mov	r0, r2
 8004e4a:	4798      	blx	r3
 8004e4c:	e041      	b.n	8004ed2 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b60      	cmp	r3, #96	; 0x60
 8004e58:	d125      	bne.n	8004ea6 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e72:	2b40      	cmp	r3, #64	; 0x40
 8004e74:	d10b      	bne.n	8004e8e <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0201 	bic.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fe ff51 	bl	8003d46 <HAL_I2C_AbortCpltCallback>
 8004ea4:	e015      	b.n	8004ed2 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb0:	2b40      	cmp	r3, #64	; 0x40
 8004eb2:	d10b      	bne.n	8004ecc <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691a      	ldr	r2, [r3, #16]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7fe ff30 	bl	8003d32 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10e      	bne.n	8004f00 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d109      	bne.n	8004f00 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d104      	bne.n	8004f00 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d007      	beq.n	8004f10 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f0e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f16:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d113      	bne.n	8004f4c <I2C_ITError+0x24c>
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
 8004f26:	2b28      	cmp	r3, #40	; 0x28
 8004f28:	d110      	bne.n	8004f4c <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a0a      	ldr	r2, [pc, #40]	; (8004f58 <I2C_ITError+0x258>)
 8004f2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7fe fed5 	bl	8003cf6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f4c:	bf00      	nop
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	08005061 	.word	0x08005061
 8004f58:	ffff0000 	.word	0xffff0000

08004f5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b088      	sub	sp, #32
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	607a      	str	r2, [r7, #4]
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d006      	beq.n	8004f86 <I2C_MasterRequestWrite+0x2a>
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d003      	beq.n	8004f86 <I2C_MasterRequestWrite+0x2a>
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f84:	d108      	bne.n	8004f98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	e00b      	b.n	8004fb0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9c:	2b12      	cmp	r3, #18
 8004f9e:	d107      	bne.n	8004fb0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 f8ce 	bl	800515e <I2C_WaitOnFlagUntilTimeout>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00c      	beq.n	8004fe2 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e035      	b.n	800504e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fea:	d108      	bne.n	8004ffe <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fec:	897b      	ldrh	r3, [r7, #10]
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ffa:	611a      	str	r2, [r3, #16]
 8004ffc:	e01b      	b.n	8005036 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ffe:	897b      	ldrh	r3, [r7, #10]
 8005000:	11db      	asrs	r3, r3, #7
 8005002:	b2db      	uxtb	r3, r3
 8005004:	f003 0306 	and.w	r3, r3, #6
 8005008:	b2db      	uxtb	r3, r3
 800500a:	f063 030f 	orn	r3, r3, #15
 800500e:	b2da      	uxtb	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	490f      	ldr	r1, [pc, #60]	; (8005058 <I2C_MasterRequestWrite+0xfc>)
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f8f5 	bl	800520c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e010      	b.n	800504e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800502c:	897b      	ldrh	r3, [r7, #10]
 800502e:	b2da      	uxtb	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	4908      	ldr	r1, [pc, #32]	; (800505c <I2C_MasterRequestWrite+0x100>)
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 f8e5 	bl	800520c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e000      	b.n	800504e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	00010008 	.word	0x00010008
 800505c:	00010002 	.word	0x00010002

08005060 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005074:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005082:	2200      	movs	r2, #0
 8005084:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005092:	2200      	movs	r2, #0
 8005094:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b8:	2200      	movs	r2, #0
 80050ba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	2200      	movs	r2, #0
 80050ca:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0201 	bic.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b60      	cmp	r3, #96	; 0x60
 80050e6:	d10e      	bne.n	8005106 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f7fe fe21 	bl	8003d46 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005104:	e027      	b.n	8005156 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005106:	7afb      	ldrb	r3, [r7, #11]
 8005108:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800510c:	2b28      	cmp	r3, #40	; 0x28
 800510e:	d117      	bne.n	8005140 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0201 	orr.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800512e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2228      	movs	r2, #40	; 0x28
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800513e:	e007      	b.n	8005150 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f7fe fdee 	bl	8003d32 <HAL_I2C_ErrorCallback>
}
 8005156:	bf00      	nop
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	603b      	str	r3, [r7, #0]
 800516a:	4613      	mov	r3, r2
 800516c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800516e:	e025      	b.n	80051bc <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005176:	d021      	beq.n	80051bc <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005178:	f7fd fa28 	bl	80025cc <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d302      	bcc.n	800518e <I2C_WaitOnFlagUntilTimeout+0x30>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d116      	bne.n	80051bc <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	f043 0220 	orr.w	r2, r3, #32
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e023      	b.n	8005204 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	0c1b      	lsrs	r3, r3, #16
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d10d      	bne.n	80051e2 <I2C_WaitOnFlagUntilTimeout+0x84>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	43da      	mvns	r2, r3
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	4013      	ands	r3, r2
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	bf0c      	ite	eq
 80051d8:	2301      	moveq	r3, #1
 80051da:	2300      	movne	r3, #0
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	461a      	mov	r2, r3
 80051e0:	e00c      	b.n	80051fc <I2C_WaitOnFlagUntilTimeout+0x9e>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	43da      	mvns	r2, r3
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	4013      	ands	r3, r2
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	bf0c      	ite	eq
 80051f4:	2301      	moveq	r3, #1
 80051f6:	2300      	movne	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	461a      	mov	r2, r3
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d0b6      	beq.n	8005170 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800521a:	e051      	b.n	80052c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800522a:	d123      	bne.n	8005274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800523a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005244:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	f043 0204 	orr.w	r2, r3, #4
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e046      	b.n	8005302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800527a:	d021      	beq.n	80052c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527c:	f7fd f9a6 	bl	80025cc <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	429a      	cmp	r2, r3
 800528a:	d302      	bcc.n	8005292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d116      	bne.n	80052c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2220      	movs	r2, #32
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ac:	f043 0220 	orr.w	r2, r3, #32
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e020      	b.n	8005302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	0c1b      	lsrs	r3, r3, #16
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d10c      	bne.n	80052e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	43da      	mvns	r2, r3
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	4013      	ands	r3, r2
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	bf14      	ite	ne
 80052dc:	2301      	movne	r3, #1
 80052de:	2300      	moveq	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	e00b      	b.n	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	43da      	mvns	r2, r3
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	4013      	ands	r3, r2
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	bf14      	ite	ne
 80052f6:	2301      	movne	r3, #1
 80052f8:	2300      	moveq	r3, #0
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d18d      	bne.n	800521c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b084      	sub	sp, #16
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005316:	e02d      	b.n	8005374 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 f878 	bl	800540e <I2C_IsAcknowledgeFailed>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e02d      	b.n	8005384 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800532e:	d021      	beq.n	8005374 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005330:	f7fd f94c 	bl	80025cc <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	429a      	cmp	r2, r3
 800533e:	d302      	bcc.n	8005346 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d116      	bne.n	8005374 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	f043 0220 	orr.w	r2, r3, #32
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e007      	b.n	8005384 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537e:	2b80      	cmp	r3, #128	; 0x80
 8005380:	d1ca      	bne.n	8005318 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005398:	e02d      	b.n	80053f6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 f837 	bl	800540e <I2C_IsAcknowledgeFailed>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e02d      	b.n	8005406 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053b0:	d021      	beq.n	80053f6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b2:	f7fd f90b 	bl	80025cc <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d302      	bcc.n	80053c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d116      	bne.n	80053f6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	f043 0220 	orr.w	r2, r3, #32
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e007      	b.n	8005406 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b04      	cmp	r3, #4
 8005402:	d1ca      	bne.n	800539a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005424:	d11b      	bne.n	800545e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800542e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	f043 0204 	orr.w	r2, r3, #4
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e000      	b.n	8005460 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800547c:	d103      	bne.n	8005486 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005484:	e007      	b.n	8005496 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800548e:	d102      	bne.n	8005496 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2208      	movs	r2, #8
 8005494:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80054a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054a4:	b08f      	sub	sp, #60	; 0x3c
 80054a6:	af0a      	add	r7, sp, #40	; 0x28
 80054a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e10f      	b.n	80056d4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d106      	bne.n	80054d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f006 fd36 	bl	800bf40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2203      	movs	r2, #3
 80054d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d102      	bne.n	80054ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f003 fbd9 	bl	8008caa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	603b      	str	r3, [r7, #0]
 80054fe:	687e      	ldr	r6, [r7, #4]
 8005500:	466d      	mov	r5, sp
 8005502:	f106 0410 	add.w	r4, r6, #16
 8005506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800550a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800550c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800550e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005512:	e885 0003 	stmia.w	r5, {r0, r1}
 8005516:	1d33      	adds	r3, r6, #4
 8005518:	cb0e      	ldmia	r3, {r1, r2, r3}
 800551a:	6838      	ldr	r0, [r7, #0]
 800551c:	f003 fab0 	bl	8008a80 <USB_CoreInit>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d005      	beq.n	8005532 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2202      	movs	r2, #2
 800552a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e0d0      	b.n	80056d4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2100      	movs	r1, #0
 8005538:	4618      	mov	r0, r3
 800553a:	f003 fbc7 	bl	8008ccc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800553e:	2300      	movs	r3, #0
 8005540:	73fb      	strb	r3, [r7, #15]
 8005542:	e04a      	b.n	80055da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005544:	7bfa      	ldrb	r2, [r7, #15]
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	4613      	mov	r3, r2
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	1a9b      	subs	r3, r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	440b      	add	r3, r1
 8005552:	333d      	adds	r3, #61	; 0x3d
 8005554:	2201      	movs	r2, #1
 8005556:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005558:	7bfa      	ldrb	r2, [r7, #15]
 800555a:	6879      	ldr	r1, [r7, #4]
 800555c:	4613      	mov	r3, r2
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	1a9b      	subs	r3, r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	440b      	add	r3, r1
 8005566:	333c      	adds	r3, #60	; 0x3c
 8005568:	7bfa      	ldrb	r2, [r7, #15]
 800556a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800556c:	7bfa      	ldrb	r2, [r7, #15]
 800556e:	7bfb      	ldrb	r3, [r7, #15]
 8005570:	b298      	uxth	r0, r3
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	4613      	mov	r3, r2
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	1a9b      	subs	r3, r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	440b      	add	r3, r1
 800557e:	3342      	adds	r3, #66	; 0x42
 8005580:	4602      	mov	r2, r0
 8005582:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005584:	7bfa      	ldrb	r2, [r7, #15]
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	4613      	mov	r3, r2
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	333f      	adds	r3, #63	; 0x3f
 8005594:	2200      	movs	r2, #0
 8005596:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005598:	7bfa      	ldrb	r2, [r7, #15]
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	4613      	mov	r3, r2
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	1a9b      	subs	r3, r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	3344      	adds	r3, #68	; 0x44
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80055ac:	7bfa      	ldrb	r2, [r7, #15]
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	4613      	mov	r3, r2
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	1a9b      	subs	r3, r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	3348      	adds	r3, #72	; 0x48
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80055c0:	7bfa      	ldrb	r2, [r7, #15]
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	4613      	mov	r3, r2
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	1a9b      	subs	r3, r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	440b      	add	r3, r1
 80055ce:	3350      	adds	r3, #80	; 0x50
 80055d0:	2200      	movs	r2, #0
 80055d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
 80055d6:	3301      	adds	r3, #1
 80055d8:	73fb      	strb	r3, [r7, #15]
 80055da:	7bfa      	ldrb	r2, [r7, #15]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d3af      	bcc.n	8005544 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055e4:	2300      	movs	r3, #0
 80055e6:	73fb      	strb	r3, [r7, #15]
 80055e8:	e044      	b.n	8005674 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055ea:	7bfa      	ldrb	r2, [r7, #15]
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	4613      	mov	r3, r2
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	1a9b      	subs	r3, r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	440b      	add	r3, r1
 80055f8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80055fc:	2200      	movs	r2, #0
 80055fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005600:	7bfa      	ldrb	r2, [r7, #15]
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	4613      	mov	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	1a9b      	subs	r3, r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	440b      	add	r3, r1
 800560e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005612:	7bfa      	ldrb	r2, [r7, #15]
 8005614:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005616:	7bfa      	ldrb	r2, [r7, #15]
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	4613      	mov	r3, r2
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	1a9b      	subs	r3, r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	440b      	add	r3, r1
 8005624:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005628:	2200      	movs	r2, #0
 800562a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800562c:	7bfa      	ldrb	r2, [r7, #15]
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	4613      	mov	r3, r2
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	1a9b      	subs	r3, r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	440b      	add	r3, r1
 800563a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005642:	7bfa      	ldrb	r2, [r7, #15]
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	4613      	mov	r3, r2
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	1a9b      	subs	r3, r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	440b      	add	r3, r1
 8005650:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005658:	7bfa      	ldrb	r2, [r7, #15]
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	4613      	mov	r3, r2
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	1a9b      	subs	r3, r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800566e:	7bfb      	ldrb	r3, [r7, #15]
 8005670:	3301      	adds	r3, #1
 8005672:	73fb      	strb	r3, [r7, #15]
 8005674:	7bfa      	ldrb	r2, [r7, #15]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	429a      	cmp	r2, r3
 800567c:	d3b5      	bcc.n	80055ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	603b      	str	r3, [r7, #0]
 8005684:	687e      	ldr	r6, [r7, #4]
 8005686:	466d      	mov	r5, sp
 8005688:	f106 0410 	add.w	r4, r6, #16
 800568c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800568e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005694:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005698:	e885 0003 	stmia.w	r5, {r0, r1}
 800569c:	1d33      	adds	r3, r6, #4
 800569e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056a0:	6838      	ldr	r0, [r7, #0]
 80056a2:	f003 fb3d 	bl	8008d20 <USB_DevInit>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e00d      	b.n	80056d4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f004 fb7c 	bl	8009dca <USB_DevDisconnect>

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d101      	bne.n	80056f8 <HAL_PCD_Start+0x1c>
 80056f4:	2302      	movs	r3, #2
 80056f6:	e020      	b.n	800573a <HAL_PCD_Start+0x5e>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005704:	2b01      	cmp	r3, #1
 8005706:	d109      	bne.n	800571c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800570c:	2b01      	cmp	r3, #1
 800570e:	d005      	beq.n	800571c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005714:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4618      	mov	r0, r3
 8005722:	f004 fb3a 	bl	8009d9a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f003 faac 	bl	8008c88 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005742:	b590      	push	{r4, r7, lr}
 8005744:	b08d      	sub	sp, #52	; 0x34
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4618      	mov	r0, r3
 800575a:	f004 fbe1 	bl	8009f20 <USB_GetMode>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	f040 839d 	bne.w	8005ea0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f004 fb45 	bl	8009dfa <USB_ReadInterrupts>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 8393 	beq.w	8005e9e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f004 fb3c 	bl	8009dfa <USB_ReadInterrupts>
 8005782:	4603      	mov	r3, r0
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b02      	cmp	r3, #2
 800578a:	d107      	bne.n	800579c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695a      	ldr	r2, [r3, #20]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f002 0202 	and.w	r2, r2, #2
 800579a:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f004 fb2a 	bl	8009dfa <USB_ReadInterrupts>
 80057a6:	4603      	mov	r3, r0
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	2b10      	cmp	r3, #16
 80057ae:	d161      	bne.n	8005874 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699a      	ldr	r2, [r3, #24]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0210 	bic.w	r2, r2, #16
 80057be:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	f003 020f 	and.w	r2, r3, #15
 80057cc:	4613      	mov	r3, r2
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	1a9b      	subs	r3, r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	4413      	add	r3, r2
 80057dc:	3304      	adds	r3, #4
 80057de:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	0c5b      	lsrs	r3, r3, #17
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d124      	bne.n	8005836 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80057f2:	4013      	ands	r3, r2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d035      	beq.n	8005864 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	091b      	lsrs	r3, r3, #4
 8005800:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005806:	b29b      	uxth	r3, r3
 8005808:	461a      	mov	r2, r3
 800580a:	6a38      	ldr	r0, [r7, #32]
 800580c:	f004 f9a2 	bl	8009b54 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	091b      	lsrs	r3, r3, #4
 8005818:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800581c:	441a      	add	r2, r3
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	699a      	ldr	r2, [r3, #24]
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	091b      	lsrs	r3, r3, #4
 800582a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800582e:	441a      	add	r2, r3
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	619a      	str	r2, [r3, #24]
 8005834:	e016      	b.n	8005864 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	0c5b      	lsrs	r3, r3, #17
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	2b06      	cmp	r3, #6
 8005840:	d110      	bne.n	8005864 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005848:	2208      	movs	r2, #8
 800584a:	4619      	mov	r1, r3
 800584c:	6a38      	ldr	r0, [r7, #32]
 800584e:	f004 f981 	bl	8009b54 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	091b      	lsrs	r3, r3, #4
 800585a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800585e:	441a      	add	r2, r3
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0210 	orr.w	r2, r2, #16
 8005872:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4618      	mov	r0, r3
 800587a:	f004 fabe 	bl	8009dfa <USB_ReadInterrupts>
 800587e:	4603      	mov	r3, r0
 8005880:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005884:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005888:	d16e      	bne.n	8005968 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800588a:	2300      	movs	r3, #0
 800588c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f004 fac4 	bl	8009e20 <USB_ReadDevAllOutEpInterrupt>
 8005898:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800589a:	e062      	b.n	8005962 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d057      	beq.n	8005956 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	4611      	mov	r1, r2
 80058b0:	4618      	mov	r0, r3
 80058b2:	f004 fae9 	bl	8009e88 <USB_ReadDevOutEPInterrupt>
 80058b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00c      	beq.n	80058dc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ce:	461a      	mov	r2, r3
 80058d0:	2301      	movs	r3, #1
 80058d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80058d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fdb0 	bl	800643c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f003 0308 	and.w	r3, r3, #8
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00c      	beq.n	8005900 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f2:	461a      	mov	r2, r3
 80058f4:	2308      	movs	r3, #8
 80058f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80058f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 feaa 	bl	8006654 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f003 0310 	and.w	r3, r3, #16
 8005906:	2b00      	cmp	r3, #0
 8005908:	d008      	beq.n	800591c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005916:	461a      	mov	r2, r3
 8005918:	2310      	movs	r3, #16
 800591a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b00      	cmp	r3, #0
 8005924:	d008      	beq.n	8005938 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005932:	461a      	mov	r2, r3
 8005934:	2320      	movs	r3, #32
 8005936:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d009      	beq.n	8005956 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	4413      	add	r3, r2
 800594a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594e:	461a      	mov	r2, r3
 8005950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005954:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	3301      	adds	r3, #1
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	085b      	lsrs	r3, r3, #1
 8005960:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005964:	2b00      	cmp	r3, #0
 8005966:	d199      	bne.n	800589c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4618      	mov	r0, r3
 800596e:	f004 fa44 	bl	8009dfa <USB_ReadInterrupts>
 8005972:	4603      	mov	r3, r0
 8005974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005978:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800597c:	f040 80c0 	bne.w	8005b00 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4618      	mov	r0, r3
 8005986:	f004 fa65 	bl	8009e54 <USB_ReadDevAllInEpInterrupt>
 800598a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005990:	e0b2      	b.n	8005af8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 80a7 	beq.w	8005aec <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	4611      	mov	r1, r2
 80059a8:	4618      	mov	r0, r3
 80059aa:	f004 fa8b 	bl	8009ec4 <USB_ReadDevInEPInterrupt>
 80059ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d057      	beq.n	8005a6a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	f003 030f 	and.w	r3, r3, #15
 80059c0:	2201      	movs	r2, #1
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	43db      	mvns	r3, r3
 80059d4:	69f9      	ldr	r1, [r7, #28]
 80059d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059da:	4013      	ands	r3, r2
 80059dc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ea:	461a      	mov	r2, r3
 80059ec:	2301      	movs	r3, #1
 80059ee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d132      	bne.n	8005a5e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80059f8:	6879      	ldr	r1, [r7, #4]
 80059fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059fc:	4613      	mov	r3, r2
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	1a9b      	subs	r3, r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	440b      	add	r3, r1
 8005a06:	3348      	adds	r3, #72	; 0x48
 8005a08:	6819      	ldr	r1, [r3, #0]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a0e:	4613      	mov	r3, r2
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	1a9b      	subs	r3, r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4403      	add	r3, r0
 8005a18:	3344      	adds	r3, #68	; 0x44
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4419      	add	r1, r3
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a22:	4613      	mov	r3, r2
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	1a9b      	subs	r3, r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4403      	add	r3, r0
 8005a2c:	3348      	adds	r3, #72	; 0x48
 8005a2e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d113      	bne.n	8005a5e <HAL_PCD_IRQHandler+0x31c>
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	1a9b      	subs	r3, r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	440b      	add	r3, r1
 8005a44:	3350      	adds	r3, #80	; 0x50
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d108      	bne.n	8005a5e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a56:	461a      	mov	r2, r3
 8005a58:	2101      	movs	r1, #1
 8005a5a:	f004 fa93 	bl	8009f84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	4619      	mov	r1, r3
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f006 faec 	bl	800c042 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f003 0308 	and.w	r3, r3, #8
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d008      	beq.n	8005a86 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a80:	461a      	mov	r2, r3
 8005a82:	2308      	movs	r3, #8
 8005a84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f003 0310 	and.w	r3, r3, #16
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d008      	beq.n	8005aa2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	2310      	movs	r3, #16
 8005aa0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d008      	beq.n	8005abe <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab8:	461a      	mov	r2, r3
 8005aba:	2340      	movs	r3, #64	; 0x40
 8005abc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d008      	beq.n	8005ada <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fc1b 	bl	8006322 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	3301      	adds	r3, #1
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	085b      	lsrs	r3, r3, #1
 8005af6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f47f af49 	bne.w	8005992 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f004 f978 	bl	8009dfa <USB_ReadInterrupts>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b14:	d122      	bne.n	8005b5c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	69fa      	ldr	r2, [r7, #28]
 8005b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b24:	f023 0301 	bic.w	r3, r3, #1
 8005b28:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d108      	bne.n	8005b46 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fe26 	bl	8006790 <HAL_PCDEx_LPM_Callback>
 8005b44:	e002      	b.n	8005b4c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f006 faf2 	bl	800c130 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695a      	ldr	r2, [r3, #20]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005b5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f004 f94a 	bl	8009dfa <USB_ReadInterrupts>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b70:	d112      	bne.n	8005b98 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d102      	bne.n	8005b88 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f006 faae 	bl	800c0e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	695a      	ldr	r2, [r3, #20]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005b96:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f004 f92c 	bl	8009dfa <USB_ReadInterrupts>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bac:	f040 80c7 	bne.w	8005d3e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bbe:	f023 0301 	bic.w	r3, r3, #1
 8005bc2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2110      	movs	r1, #16
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f003 fa0c 	bl	8008fe8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bd4:	e056      	b.n	8005c84 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be2:	461a      	mov	r2, r3
 8005be4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005be8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bfa:	0151      	lsls	r1, r2, #5
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	440a      	add	r2, r1
 8005c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c08:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c1a:	0151      	lsls	r1, r2, #5
 8005c1c:	69fa      	ldr	r2, [r7, #28]
 8005c1e:	440a      	add	r2, r1
 8005c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c36:	461a      	mov	r2, r3
 8005c38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c4e:	0151      	lsls	r1, r2, #5
 8005c50:	69fa      	ldr	r2, [r7, #28]
 8005c52:	440a      	add	r2, r1
 8005c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c6e:	0151      	lsls	r1, r2, #5
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	440a      	add	r2, r1
 8005c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c7c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c80:	3301      	adds	r3, #1
 8005c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d3a3      	bcc.n	8005bd6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c9c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005ca0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d016      	beq.n	8005cd8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cba:	f043 030b 	orr.w	r3, r3, #11
 8005cbe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cd0:	f043 030b 	orr.w	r3, r3, #11
 8005cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8005cd6:	e015      	b.n	8005d04 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	69fa      	ldr	r2, [r7, #28]
 8005ce2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ce6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005cea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005cee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cfe:	f043 030b 	orr.w	r3, r3, #11
 8005d02:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	69fa      	ldr	r2, [r7, #28]
 8005d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d16:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6818      	ldr	r0, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d28:	461a      	mov	r2, r3
 8005d2a:	f004 f92b 	bl	8009f84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	695a      	ldr	r2, [r3, #20]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f004 f859 	bl	8009dfa <USB_ReadInterrupts>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d52:	d124      	bne.n	8005d9e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f004 f8ef 	bl	8009f3c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f003 f9a1 	bl	80090aa <USB_GetDevSpeed>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681c      	ldr	r4, [r3, #0]
 8005d74:	f001 f946 	bl	8007004 <HAL_RCC_GetHCLKFreq>
 8005d78:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	461a      	mov	r2, r3
 8005d82:	4620      	mov	r0, r4
 8005d84:	f002 fede 	bl	8008b44 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f006 f982 	bl	800c092 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	695a      	ldr	r2, [r3, #20]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005d9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f004 f829 	bl	8009dfa <USB_ReadInterrupts>
 8005da8:	4603      	mov	r3, r0
 8005daa:	f003 0308 	and.w	r3, r3, #8
 8005dae:	2b08      	cmp	r3, #8
 8005db0:	d10a      	bne.n	8005dc8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f006 f95f 	bl	800c076 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695a      	ldr	r2, [r3, #20]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f002 0208 	and.w	r2, r2, #8
 8005dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f004 f814 	bl	8009dfa <USB_ReadInterrupts>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ddc:	d10f      	bne.n	8005dfe <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	4619      	mov	r1, r3
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f006 f9c1 	bl	800c170 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	695a      	ldr	r2, [r3, #20]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f003 fff9 	bl	8009dfa <USB_ReadInterrupts>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e12:	d10f      	bne.n	8005e34 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005e14:	2300      	movs	r3, #0
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f006 f994 	bl	800c14c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695a      	ldr	r2, [r3, #20]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005e32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f003 ffde 	bl	8009dfa <USB_ReadInterrupts>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e48:	d10a      	bne.n	8005e60 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f006 f9a2 	bl	800c194 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695a      	ldr	r2, [r3, #20]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005e5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f003 ffc8 	bl	8009dfa <USB_ReadInterrupts>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d115      	bne.n	8005ea0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	f003 0304 	and.w	r3, r3, #4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f006 f992 	bl	800c1b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6859      	ldr	r1, [r3, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	605a      	str	r2, [r3, #4]
 8005e9c:	e000      	b.n	8005ea0 <HAL_PCD_IRQHandler+0x75e>
      return;
 8005e9e:	bf00      	nop
    }
  }
}
 8005ea0:	3734      	adds	r7, #52	; 0x34
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd90      	pop	{r4, r7, pc}

08005ea6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b082      	sub	sp, #8
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d101      	bne.n	8005ec0 <HAL_PCD_SetAddress+0x1a>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e013      	b.n	8005ee8 <HAL_PCD_SetAddress+0x42>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	78fa      	ldrb	r2, [r7, #3]
 8005ecc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	78fa      	ldrb	r2, [r7, #3]
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f003 ff38 	bl	8009d4e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	4608      	mov	r0, r1
 8005efa:	4611      	mov	r1, r2
 8005efc:	461a      	mov	r2, r3
 8005efe:	4603      	mov	r3, r0
 8005f00:	70fb      	strb	r3, [r7, #3]
 8005f02:	460b      	mov	r3, r1
 8005f04:	803b      	strh	r3, [r7, #0]
 8005f06:	4613      	mov	r3, r2
 8005f08:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	da0f      	bge.n	8005f36 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	f003 020f 	and.w	r2, r3, #15
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	1a9b      	subs	r3, r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	3338      	adds	r3, #56	; 0x38
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	4413      	add	r3, r2
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2201      	movs	r2, #1
 8005f32:	705a      	strb	r2, [r3, #1]
 8005f34:	e00f      	b.n	8005f56 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f36:	78fb      	ldrb	r3, [r7, #3]
 8005f38:	f003 020f 	and.w	r2, r3, #15
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	1a9b      	subs	r3, r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f56:	78fb      	ldrb	r3, [r7, #3]
 8005f58:	f003 030f 	and.w	r3, r3, #15
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005f62:	883a      	ldrh	r2, [r7, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	78ba      	ldrb	r2, [r7, #2]
 8005f6c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	785b      	ldrb	r3, [r3, #1]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d004      	beq.n	8005f80 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005f80:	78bb      	ldrb	r3, [r7, #2]
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d102      	bne.n	8005f8c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d101      	bne.n	8005f9a <HAL_PCD_EP_Open+0xaa>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e00e      	b.n	8005fb8 <HAL_PCD_EP_Open+0xc8>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68f9      	ldr	r1, [r7, #12]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f003 f8a3 	bl	80090f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005fb6:	7afb      	ldrb	r3, [r7, #11]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005fcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	da0f      	bge.n	8005ff4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fd4:	78fb      	ldrb	r3, [r7, #3]
 8005fd6:	f003 020f 	and.w	r2, r3, #15
 8005fda:	4613      	mov	r3, r2
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	1a9b      	subs	r3, r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	3338      	adds	r3, #56	; 0x38
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	3304      	adds	r3, #4
 8005fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	705a      	strb	r2, [r3, #1]
 8005ff2:	e00f      	b.n	8006014 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ff4:	78fb      	ldrb	r3, [r7, #3]
 8005ff6:	f003 020f 	and.w	r2, r3, #15
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	00db      	lsls	r3, r3, #3
 8005ffe:	1a9b      	subs	r3, r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	4413      	add	r3, r2
 800600a:	3304      	adds	r3, #4
 800600c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	b2da      	uxtb	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006026:	2b01      	cmp	r3, #1
 8006028:	d101      	bne.n	800602e <HAL_PCD_EP_Close+0x6e>
 800602a:	2302      	movs	r3, #2
 800602c:	e00e      	b.n	800604c <HAL_PCD_EP_Close+0x8c>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68f9      	ldr	r1, [r7, #12]
 800603c:	4618      	mov	r0, r3
 800603e:	f003 f8e1 	bl	8009204 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	607a      	str	r2, [r7, #4]
 800605e:	603b      	str	r3, [r7, #0]
 8006060:	460b      	mov	r3, r1
 8006062:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006064:	7afb      	ldrb	r3, [r7, #11]
 8006066:	f003 020f 	and.w	r2, r3, #15
 800606a:	4613      	mov	r3, r2
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	1a9b      	subs	r3, r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4413      	add	r3, r2
 800607a:	3304      	adds	r3, #4
 800607c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2200      	movs	r2, #0
 800608e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	2200      	movs	r2, #0
 8006094:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006096:	7afb      	ldrb	r3, [r7, #11]
 8006098:	f003 030f 	and.w	r3, r3, #15
 800609c:	b2da      	uxtb	r2, r3
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d102      	bne.n	80060b0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060b0:	7afb      	ldrb	r3, [r7, #11]
 80060b2:	f003 030f 	and.w	r3, r3, #15
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d109      	bne.n	80060ce <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6818      	ldr	r0, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	6979      	ldr	r1, [r7, #20]
 80060c8:	f003 fbbc 	bl	8009844 <USB_EP0StartXfer>
 80060cc:	e008      	b.n	80060e0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	461a      	mov	r2, r3
 80060da:	6979      	ldr	r1, [r7, #20]
 80060dc:	f003 f96e 	bl	80093bc <USB_EPStartXfer>
  }

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	460b      	mov	r3, r1
 80060f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	f003 020f 	and.w	r2, r3, #15
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	4613      	mov	r3, r2
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	1a9b      	subs	r3, r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	440b      	add	r3, r1
 8006108:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800610c:	681b      	ldr	r3, [r3, #0]
}
 800610e:	4618      	mov	r0, r3
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b086      	sub	sp, #24
 800611e:	af00      	add	r7, sp, #0
 8006120:	60f8      	str	r0, [r7, #12]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	603b      	str	r3, [r7, #0]
 8006126:	460b      	mov	r3, r1
 8006128:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800612a:	7afb      	ldrb	r3, [r7, #11]
 800612c:	f003 020f 	and.w	r2, r3, #15
 8006130:	4613      	mov	r3, r2
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	1a9b      	subs	r3, r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	3338      	adds	r3, #56	; 0x38
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4413      	add	r3, r2
 800613e:	3304      	adds	r3, #4
 8006140:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2200      	movs	r2, #0
 8006152:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2201      	movs	r2, #1
 8006158:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800615a:	7afb      	ldrb	r3, [r7, #11]
 800615c:	f003 030f 	and.w	r3, r3, #15
 8006160:	b2da      	uxtb	r2, r3
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d102      	bne.n	8006174 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006174:	7afb      	ldrb	r3, [r7, #11]
 8006176:	f003 030f 	and.w	r3, r3, #15
 800617a:	2b00      	cmp	r3, #0
 800617c:	d109      	bne.n	8006192 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6818      	ldr	r0, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	b2db      	uxtb	r3, r3
 8006188:	461a      	mov	r2, r3
 800618a:	6979      	ldr	r1, [r7, #20]
 800618c:	f003 fb5a 	bl	8009844 <USB_EP0StartXfer>
 8006190:	e008      	b.n	80061a4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6818      	ldr	r0, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	b2db      	uxtb	r3, r3
 800619c:	461a      	mov	r2, r3
 800619e:	6979      	ldr	r1, [r7, #20]
 80061a0:	f003 f90c 	bl	80093bc <USB_EPStartXfer>
  }

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	460b      	mov	r3, r1
 80061b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80061ba:	78fb      	ldrb	r3, [r7, #3]
 80061bc:	f003 020f 	and.w	r2, r3, #15
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d901      	bls.n	80061cc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e050      	b.n	800626e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	da0f      	bge.n	80061f4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061d4:	78fb      	ldrb	r3, [r7, #3]
 80061d6:	f003 020f 	and.w	r2, r3, #15
 80061da:	4613      	mov	r3, r2
 80061dc:	00db      	lsls	r3, r3, #3
 80061de:	1a9b      	subs	r3, r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	3338      	adds	r3, #56	; 0x38
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	4413      	add	r3, r2
 80061e8:	3304      	adds	r3, #4
 80061ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2201      	movs	r2, #1
 80061f0:	705a      	strb	r2, [r3, #1]
 80061f2:	e00d      	b.n	8006210 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80061f4:	78fa      	ldrb	r2, [r7, #3]
 80061f6:	4613      	mov	r3, r2
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	1a9b      	subs	r3, r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	4413      	add	r3, r2
 8006206:	3304      	adds	r3, #4
 8006208:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2201      	movs	r2, #1
 8006214:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006216:	78fb      	ldrb	r3, [r7, #3]
 8006218:	f003 030f 	and.w	r3, r3, #15
 800621c:	b2da      	uxtb	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006228:	2b01      	cmp	r3, #1
 800622a:	d101      	bne.n	8006230 <HAL_PCD_EP_SetStall+0x82>
 800622c:	2302      	movs	r3, #2
 800622e:	e01e      	b.n	800626e <HAL_PCD_EP_SetStall+0xc0>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68f9      	ldr	r1, [r7, #12]
 800623e:	4618      	mov	r0, r3
 8006240:	f003 fcb1 	bl	8009ba6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006244:	78fb      	ldrb	r3, [r7, #3]
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10a      	bne.n	8006264 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	b2d9      	uxtb	r1, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800625e:	461a      	mov	r2, r3
 8006260:	f003 fe90 	bl	8009f84 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	460b      	mov	r3, r1
 8006280:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	f003 020f 	and.w	r2, r3, #15
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	429a      	cmp	r2, r3
 800628e:	d901      	bls.n	8006294 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e042      	b.n	800631a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006294:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006298:	2b00      	cmp	r3, #0
 800629a:	da0f      	bge.n	80062bc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	f003 020f 	and.w	r2, r3, #15
 80062a2:	4613      	mov	r3, r2
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	1a9b      	subs	r3, r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	3338      	adds	r3, #56	; 0x38
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	4413      	add	r3, r2
 80062b0:	3304      	adds	r3, #4
 80062b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2201      	movs	r2, #1
 80062b8:	705a      	strb	r2, [r3, #1]
 80062ba:	e00f      	b.n	80062dc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062bc:	78fb      	ldrb	r3, [r7, #3]
 80062be:	f003 020f 	and.w	r2, r3, #15
 80062c2:	4613      	mov	r3, r2
 80062c4:	00db      	lsls	r3, r3, #3
 80062c6:	1a9b      	subs	r3, r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	4413      	add	r3, r2
 80062d2:	3304      	adds	r3, #4
 80062d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062e2:	78fb      	ldrb	r3, [r7, #3]
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d101      	bne.n	80062fc <HAL_PCD_EP_ClrStall+0x86>
 80062f8:	2302      	movs	r3, #2
 80062fa:	e00e      	b.n	800631a <HAL_PCD_EP_ClrStall+0xa4>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68f9      	ldr	r1, [r7, #12]
 800630a:	4618      	mov	r0, r3
 800630c:	f003 fcb9 	bl	8009c82 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b08a      	sub	sp, #40	; 0x28
 8006326:	af02      	add	r7, sp, #8
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	4613      	mov	r3, r2
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	1a9b      	subs	r3, r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	3338      	adds	r3, #56	; 0x38
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	4413      	add	r3, r2
 8006346:	3304      	adds	r3, #4
 8006348:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	699a      	ldr	r2, [r3, #24]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	429a      	cmp	r2, r3
 8006354:	d901      	bls.n	800635a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e06c      	b.n	8006434 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	695a      	ldr	r2, [r3, #20]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	69fa      	ldr	r2, [r7, #28]
 800636c:	429a      	cmp	r2, r3
 800636e:	d902      	bls.n	8006376 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	3303      	adds	r3, #3
 800637a:	089b      	lsrs	r3, r3, #2
 800637c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800637e:	e02b      	b.n	80063d8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	695a      	ldr	r2, [r3, #20]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	69fa      	ldr	r2, [r7, #28]
 8006392:	429a      	cmp	r2, r3
 8006394:	d902      	bls.n	800639c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	3303      	adds	r3, #3
 80063a0:	089b      	lsrs	r3, r3, #2
 80063a2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	68d9      	ldr	r1, [r3, #12]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	4603      	mov	r3, r0
 80063ba:	6978      	ldr	r0, [r7, #20]
 80063bc:	f003 fb95 	bl	8009aea <USB_WritePacket>

    ep->xfer_buff  += len;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	68da      	ldr	r2, [r3, #12]
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	441a      	add	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	699a      	ldr	r2, [r3, #24]
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	441a      	add	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d809      	bhi.n	8006402 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d203      	bcs.n	8006402 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1be      	bne.n	8006380 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	695a      	ldr	r2, [r3, #20]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	429a      	cmp	r2, r3
 800640c:	d811      	bhi.n	8006432 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	f003 030f 	and.w	r3, r3, #15
 8006414:	2201      	movs	r2, #1
 8006416:	fa02 f303 	lsl.w	r3, r2, r3
 800641a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	43db      	mvns	r3, r3
 8006428:	6939      	ldr	r1, [r7, #16]
 800642a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800642e:	4013      	ands	r3, r2
 8006430:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3720      	adds	r7, #32
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	333c      	adds	r3, #60	; 0x3c
 8006454:	3304      	adds	r3, #4
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b01      	cmp	r3, #1
 8006470:	f040 80a0 	bne.w	80065b4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f003 0308 	and.w	r3, r3, #8
 800647a:	2b00      	cmp	r3, #0
 800647c:	d015      	beq.n	80064aa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4a72      	ldr	r2, [pc, #456]	; (800664c <PCD_EP_OutXfrComplete_int+0x210>)
 8006482:	4293      	cmp	r3, r2
 8006484:	f240 80dd 	bls.w	8006642 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 80d7 	beq.w	8006642 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a0:	461a      	mov	r2, r3
 80064a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064a6:	6093      	str	r3, [r2, #8]
 80064a8:	e0cb      	b.n	8006642 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f003 0320 	and.w	r3, r3, #32
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d009      	beq.n	80064c8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c0:	461a      	mov	r2, r3
 80064c2:	2320      	movs	r3, #32
 80064c4:	6093      	str	r3, [r2, #8]
 80064c6:	e0bc      	b.n	8006642 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f040 80b7 	bne.w	8006642 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4a5d      	ldr	r2, [pc, #372]	; (800664c <PCD_EP_OutXfrComplete_int+0x210>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d90f      	bls.n	80064fc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f2:	461a      	mov	r2, r3
 80064f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064f8:	6093      	str	r3, [r2, #8]
 80064fa:	e0a2      	b.n	8006642 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	4613      	mov	r3, r2
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	1a9b      	subs	r3, r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	440b      	add	r3, r1
 800650a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800650e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	0159      	lsls	r1, r3, #5
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	440b      	add	r3, r1
 8006518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006522:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	4613      	mov	r3, r2
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	1a9b      	subs	r3, r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4403      	add	r3, r0
 8006532:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006536:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006538:	6879      	ldr	r1, [r7, #4]
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	4613      	mov	r3, r2
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	1a9b      	subs	r3, r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	440b      	add	r3, r1
 8006546:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800654a:	6819      	ldr	r1, [r3, #0]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	4613      	mov	r3, r2
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	1a9b      	subs	r3, r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4403      	add	r3, r0
 800655a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4419      	add	r1, r3
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	4613      	mov	r3, r2
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	1a9b      	subs	r3, r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4403      	add	r3, r0
 8006570:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006574:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d114      	bne.n	80065a6 <PCD_EP_OutXfrComplete_int+0x16a>
 800657c:	6879      	ldr	r1, [r7, #4]
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	4613      	mov	r3, r2
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	1a9b      	subs	r3, r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	440b      	add	r3, r1
 800658a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d108      	bne.n	80065a6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6818      	ldr	r0, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800659e:	461a      	mov	r2, r3
 80065a0:	2101      	movs	r1, #1
 80065a2:	f003 fcef 	bl	8009f84 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f005 fd2d 	bl	800c00c <HAL_PCD_DataOutStageCallback>
 80065b2:	e046      	b.n	8006642 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4a26      	ldr	r2, [pc, #152]	; (8006650 <PCD_EP_OutXfrComplete_int+0x214>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d124      	bne.n	8006606 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d2:	461a      	mov	r2, r3
 80065d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065d8:	6093      	str	r3, [r2, #8]
 80065da:	e032      	b.n	8006642 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f003 0320 	and.w	r3, r3, #32
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d008      	beq.n	80065f8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f2:	461a      	mov	r2, r3
 80065f4:	2320      	movs	r3, #32
 80065f6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	4619      	mov	r1, r3
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f005 fd04 	bl	800c00c <HAL_PCD_DataOutStageCallback>
 8006604:	e01d      	b.n	8006642 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d114      	bne.n	8006636 <PCD_EP_OutXfrComplete_int+0x1fa>
 800660c:	6879      	ldr	r1, [r7, #4]
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	4613      	mov	r3, r2
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	1a9b      	subs	r3, r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	440b      	add	r3, r1
 800661a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d108      	bne.n	8006636 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6818      	ldr	r0, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800662e:	461a      	mov	r2, r3
 8006630:	2100      	movs	r1, #0
 8006632:	f003 fca7 	bl	8009f84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	b2db      	uxtb	r3, r3
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f005 fce5 	bl	800c00c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	4f54300a 	.word	0x4f54300a
 8006650:	4f54310a 	.word	0x4f54310a

08006654 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	333c      	adds	r3, #60	; 0x3c
 800666c:	3304      	adds	r3, #4
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	4413      	add	r3, r2
 800667a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4a15      	ldr	r2, [pc, #84]	; (80066dc <PCD_EP_OutSetupPacket_int+0x88>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d90e      	bls.n	80066a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006690:	2b00      	cmp	r3, #0
 8006692:	d009      	beq.n	80066a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a0:	461a      	mov	r2, r3
 80066a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f005 fc9d 	bl	800bfe8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4a0a      	ldr	r2, [pc, #40]	; (80066dc <PCD_EP_OutSetupPacket_int+0x88>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d90c      	bls.n	80066d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d108      	bne.n	80066d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80066c8:	461a      	mov	r2, r3
 80066ca:	2101      	movs	r1, #1
 80066cc:	f003 fc5a 	bl	8009f84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3718      	adds	r7, #24
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	4f54300a 	.word	0x4f54300a

080066e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	70fb      	strb	r3, [r7, #3]
 80066ec:	4613      	mov	r3, r2
 80066ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80066f8:	78fb      	ldrb	r3, [r7, #3]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d107      	bne.n	800670e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80066fe:	883b      	ldrh	r3, [r7, #0]
 8006700:	0419      	lsls	r1, r3, #16
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	430a      	orrs	r2, r1
 800670a:	629a      	str	r2, [r3, #40]	; 0x28
 800670c:	e028      	b.n	8006760 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006714:	0c1b      	lsrs	r3, r3, #16
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	4413      	add	r3, r2
 800671a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800671c:	2300      	movs	r3, #0
 800671e:	73fb      	strb	r3, [r7, #15]
 8006720:	e00d      	b.n	800673e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	3340      	adds	r3, #64	; 0x40
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	0c1b      	lsrs	r3, r3, #16
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	4413      	add	r3, r2
 8006736:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	3301      	adds	r3, #1
 800673c:	73fb      	strb	r3, [r7, #15]
 800673e:	7bfa      	ldrb	r2, [r7, #15]
 8006740:	78fb      	ldrb	r3, [r7, #3]
 8006742:	3b01      	subs	r3, #1
 8006744:	429a      	cmp	r2, r3
 8006746:	d3ec      	bcc.n	8006722 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006748:	883b      	ldrh	r3, [r7, #0]
 800674a:	0418      	lsls	r0, r3, #16
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6819      	ldr	r1, [r3, #0]
 8006750:	78fb      	ldrb	r3, [r7, #3]
 8006752:	3b01      	subs	r3, #1
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	4302      	orrs	r2, r0
 8006758:	3340      	adds	r3, #64	; 0x40
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	440b      	add	r3, r1
 800675e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800676e:	b480      	push	{r7}
 8006770:	b083      	sub	sp, #12
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	460b      	mov	r3, r1
 8006778:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	887a      	ldrh	r2, [r7, #2]
 8006780:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e25b      	b.n	8006c72 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d075      	beq.n	80068b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067c6:	4ba3      	ldr	r3, [pc, #652]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f003 030c 	and.w	r3, r3, #12
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	d00c      	beq.n	80067ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067d2:	4ba0      	ldr	r3, [pc, #640]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067da:	2b08      	cmp	r3, #8
 80067dc:	d112      	bne.n	8006804 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067de:	4b9d      	ldr	r3, [pc, #628]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067ea:	d10b      	bne.n	8006804 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067ec:	4b99      	ldr	r3, [pc, #612]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d05b      	beq.n	80068b0 <HAL_RCC_OscConfig+0x108>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d157      	bne.n	80068b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e236      	b.n	8006c72 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800680c:	d106      	bne.n	800681c <HAL_RCC_OscConfig+0x74>
 800680e:	4b91      	ldr	r3, [pc, #580]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a90      	ldr	r2, [pc, #576]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 8006814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006818:	6013      	str	r3, [r2, #0]
 800681a:	e01d      	b.n	8006858 <HAL_RCC_OscConfig+0xb0>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006824:	d10c      	bne.n	8006840 <HAL_RCC_OscConfig+0x98>
 8006826:	4b8b      	ldr	r3, [pc, #556]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a8a      	ldr	r2, [pc, #552]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 800682c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006830:	6013      	str	r3, [r2, #0]
 8006832:	4b88      	ldr	r3, [pc, #544]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a87      	ldr	r2, [pc, #540]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 8006838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	e00b      	b.n	8006858 <HAL_RCC_OscConfig+0xb0>
 8006840:	4b84      	ldr	r3, [pc, #528]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a83      	ldr	r2, [pc, #524]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 8006846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800684a:	6013      	str	r3, [r2, #0]
 800684c:	4b81      	ldr	r3, [pc, #516]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a80      	ldr	r2, [pc, #512]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 8006852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d013      	beq.n	8006888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006860:	f7fb feb4 	bl	80025cc <HAL_GetTick>
 8006864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006866:	e008      	b.n	800687a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006868:	f7fb feb0 	bl	80025cc <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b64      	cmp	r3, #100	; 0x64
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e1fb      	b.n	8006c72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800687a:	4b76      	ldr	r3, [pc, #472]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0f0      	beq.n	8006868 <HAL_RCC_OscConfig+0xc0>
 8006886:	e014      	b.n	80068b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006888:	f7fb fea0 	bl	80025cc <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006890:	f7fb fe9c 	bl	80025cc <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b64      	cmp	r3, #100	; 0x64
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e1e7      	b.n	8006c72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068a2:	4b6c      	ldr	r3, [pc, #432]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1f0      	bne.n	8006890 <HAL_RCC_OscConfig+0xe8>
 80068ae:	e000      	b.n	80068b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d063      	beq.n	8006986 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068be:	4b65      	ldr	r3, [pc, #404]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f003 030c 	and.w	r3, r3, #12
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00b      	beq.n	80068e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068ca:	4b62      	ldr	r3, [pc, #392]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068d2:	2b08      	cmp	r3, #8
 80068d4:	d11c      	bne.n	8006910 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068d6:	4b5f      	ldr	r3, [pc, #380]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d116      	bne.n	8006910 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068e2:	4b5c      	ldr	r3, [pc, #368]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d005      	beq.n	80068fa <HAL_RCC_OscConfig+0x152>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d001      	beq.n	80068fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e1bb      	b.n	8006c72 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068fa:	4b56      	ldr	r3, [pc, #344]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	4952      	ldr	r1, [pc, #328]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 800690a:	4313      	orrs	r3, r2
 800690c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800690e:	e03a      	b.n	8006986 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d020      	beq.n	800695a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006918:	4b4f      	ldr	r3, [pc, #316]	; (8006a58 <HAL_RCC_OscConfig+0x2b0>)
 800691a:	2201      	movs	r2, #1
 800691c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800691e:	f7fb fe55 	bl	80025cc <HAL_GetTick>
 8006922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006924:	e008      	b.n	8006938 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006926:	f7fb fe51 	bl	80025cc <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	2b02      	cmp	r3, #2
 8006932:	d901      	bls.n	8006938 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e19c      	b.n	8006c72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006938:	4b46      	ldr	r3, [pc, #280]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0f0      	beq.n	8006926 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006944:	4b43      	ldr	r3, [pc, #268]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	00db      	lsls	r3, r3, #3
 8006952:	4940      	ldr	r1, [pc, #256]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 8006954:	4313      	orrs	r3, r2
 8006956:	600b      	str	r3, [r1, #0]
 8006958:	e015      	b.n	8006986 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800695a:	4b3f      	ldr	r3, [pc, #252]	; (8006a58 <HAL_RCC_OscConfig+0x2b0>)
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006960:	f7fb fe34 	bl	80025cc <HAL_GetTick>
 8006964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006966:	e008      	b.n	800697a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006968:	f7fb fe30 	bl	80025cc <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b02      	cmp	r3, #2
 8006974:	d901      	bls.n	800697a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e17b      	b.n	8006c72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800697a:	4b36      	ldr	r3, [pc, #216]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1f0      	bne.n	8006968 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0308 	and.w	r3, r3, #8
 800698e:	2b00      	cmp	r3, #0
 8006990:	d030      	beq.n	80069f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d016      	beq.n	80069c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800699a:	4b30      	ldr	r3, [pc, #192]	; (8006a5c <HAL_RCC_OscConfig+0x2b4>)
 800699c:	2201      	movs	r2, #1
 800699e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069a0:	f7fb fe14 	bl	80025cc <HAL_GetTick>
 80069a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069a6:	e008      	b.n	80069ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069a8:	f7fb fe10 	bl	80025cc <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e15b      	b.n	8006c72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069ba:	4b26      	ldr	r3, [pc, #152]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 80069bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0f0      	beq.n	80069a8 <HAL_RCC_OscConfig+0x200>
 80069c6:	e015      	b.n	80069f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069c8:	4b24      	ldr	r3, [pc, #144]	; (8006a5c <HAL_RCC_OscConfig+0x2b4>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069ce:	f7fb fdfd 	bl	80025cc <HAL_GetTick>
 80069d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069d4:	e008      	b.n	80069e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069d6:	f7fb fdf9 	bl	80025cc <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d901      	bls.n	80069e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e144      	b.n	8006c72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069e8:	4b1a      	ldr	r3, [pc, #104]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 80069ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1f0      	bne.n	80069d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 80a0 	beq.w	8006b42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a02:	2300      	movs	r3, #0
 8006a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a06:	4b13      	ldr	r3, [pc, #76]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10f      	bne.n	8006a32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a12:	2300      	movs	r3, #0
 8006a14:	60bb      	str	r3, [r7, #8]
 8006a16:	4b0f      	ldr	r3, [pc, #60]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 8006a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1a:	4a0e      	ldr	r2, [pc, #56]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 8006a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a20:	6413      	str	r3, [r2, #64]	; 0x40
 8006a22:	4b0c      	ldr	r3, [pc, #48]	; (8006a54 <HAL_RCC_OscConfig+0x2ac>)
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a2a:	60bb      	str	r3, [r7, #8]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a32:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <HAL_RCC_OscConfig+0x2b8>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d121      	bne.n	8006a82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a3e:	4b08      	ldr	r3, [pc, #32]	; (8006a60 <HAL_RCC_OscConfig+0x2b8>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a07      	ldr	r2, [pc, #28]	; (8006a60 <HAL_RCC_OscConfig+0x2b8>)
 8006a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a4a:	f7fb fdbf 	bl	80025cc <HAL_GetTick>
 8006a4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a50:	e011      	b.n	8006a76 <HAL_RCC_OscConfig+0x2ce>
 8006a52:	bf00      	nop
 8006a54:	40023800 	.word	0x40023800
 8006a58:	42470000 	.word	0x42470000
 8006a5c:	42470e80 	.word	0x42470e80
 8006a60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a64:	f7fb fdb2 	bl	80025cc <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e0fd      	b.n	8006c72 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a76:	4b81      	ldr	r3, [pc, #516]	; (8006c7c <HAL_RCC_OscConfig+0x4d4>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0f0      	beq.n	8006a64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d106      	bne.n	8006a98 <HAL_RCC_OscConfig+0x2f0>
 8006a8a:	4b7d      	ldr	r3, [pc, #500]	; (8006c80 <HAL_RCC_OscConfig+0x4d8>)
 8006a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8e:	4a7c      	ldr	r2, [pc, #496]	; (8006c80 <HAL_RCC_OscConfig+0x4d8>)
 8006a90:	f043 0301 	orr.w	r3, r3, #1
 8006a94:	6713      	str	r3, [r2, #112]	; 0x70
 8006a96:	e01c      	b.n	8006ad2 <HAL_RCC_OscConfig+0x32a>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	2b05      	cmp	r3, #5
 8006a9e:	d10c      	bne.n	8006aba <HAL_RCC_OscConfig+0x312>
 8006aa0:	4b77      	ldr	r3, [pc, #476]	; (8006c80 <HAL_RCC_OscConfig+0x4d8>)
 8006aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa4:	4a76      	ldr	r2, [pc, #472]	; (8006c80 <HAL_RCC_OscConfig+0x4d8>)
 8006aa6:	f043 0304 	orr.w	r3, r3, #4
 8006aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8006aac:	4b74      	ldr	r3, [pc, #464]	; (8006c80 <HAL_RCC_OscConfig+0x4d8>)
 8006aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab0:	4a73      	ldr	r2, [pc, #460]	; (8006c80 <HAL_RCC_OscConfig+0x4d8>)
 8006ab2:	f043 0301 	orr.w	r3, r3, #1
 8006ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ab8:	e00b      	b.n	8006ad2 <HAL_RCC_OscConfig+0x32a>
 8006aba:	4b71      	ldr	r3, [pc, #452]	; (8006c80 <HAL_RCC_OscConfig+0x4d8>)
 8006abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006abe:	4a70      	ldr	r2, [pc, #448]	; (8006c80 <HAL_RCC_OscConfig+0x4d8>)
 8006ac0:	f023 0301 	bic.w	r3, r3, #1
 8006ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ac6:	4b6e      	ldr	r3, [pc, #440]	; (8006c80 <HAL_RCC_OscConfig+0x4d8>)
 8006ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aca:	4a6d      	ldr	r2, [pc, #436]	; (8006c80 <HAL_RCC_OscConfig+0x4d8>)
 8006acc:	f023 0304 	bic.w	r3, r3, #4
 8006ad0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d015      	beq.n	8006b06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ada:	f7fb fd77 	bl	80025cc <HAL_GetTick>
 8006ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ae0:	e00a      	b.n	8006af8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ae2:	f7fb fd73 	bl	80025cc <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d901      	bls.n	8006af8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e0bc      	b.n	8006c72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006af8:	4b61      	ldr	r3, [pc, #388]	; (8006c80 <HAL_RCC_OscConfig+0x4d8>)
 8006afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d0ee      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x33a>
 8006b04:	e014      	b.n	8006b30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b06:	f7fb fd61 	bl	80025cc <HAL_GetTick>
 8006b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b0c:	e00a      	b.n	8006b24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b0e:	f7fb fd5d 	bl	80025cc <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d901      	bls.n	8006b24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e0a6      	b.n	8006c72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b24:	4b56      	ldr	r3, [pc, #344]	; (8006c80 <HAL_RCC_OscConfig+0x4d8>)
 8006b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1ee      	bne.n	8006b0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b30:	7dfb      	ldrb	r3, [r7, #23]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d105      	bne.n	8006b42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b36:	4b52      	ldr	r3, [pc, #328]	; (8006c80 <HAL_RCC_OscConfig+0x4d8>)
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	4a51      	ldr	r2, [pc, #324]	; (8006c80 <HAL_RCC_OscConfig+0x4d8>)
 8006b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 8092 	beq.w	8006c70 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b4c:	4b4c      	ldr	r3, [pc, #304]	; (8006c80 <HAL_RCC_OscConfig+0x4d8>)
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f003 030c 	and.w	r3, r3, #12
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	d05c      	beq.n	8006c12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d141      	bne.n	8006be4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b60:	4b48      	ldr	r3, [pc, #288]	; (8006c84 <HAL_RCC_OscConfig+0x4dc>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b66:	f7fb fd31 	bl	80025cc <HAL_GetTick>
 8006b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b6c:	e008      	b.n	8006b80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b6e:	f7fb fd2d 	bl	80025cc <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e078      	b.n	8006c72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b80:	4b3f      	ldr	r3, [pc, #252]	; (8006c80 <HAL_RCC_OscConfig+0x4d8>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1f0      	bne.n	8006b6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	69da      	ldr	r2, [r3, #28]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	431a      	orrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	019b      	lsls	r3, r3, #6
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba2:	085b      	lsrs	r3, r3, #1
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	041b      	lsls	r3, r3, #16
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bae:	061b      	lsls	r3, r3, #24
 8006bb0:	4933      	ldr	r1, [pc, #204]	; (8006c80 <HAL_RCC_OscConfig+0x4d8>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bb6:	4b33      	ldr	r3, [pc, #204]	; (8006c84 <HAL_RCC_OscConfig+0x4dc>)
 8006bb8:	2201      	movs	r2, #1
 8006bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bbc:	f7fb fd06 	bl	80025cc <HAL_GetTick>
 8006bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bc4:	f7fb fd02 	bl	80025cc <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e04d      	b.n	8006c72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bd6:	4b2a      	ldr	r3, [pc, #168]	; (8006c80 <HAL_RCC_OscConfig+0x4d8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0f0      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x41c>
 8006be2:	e045      	b.n	8006c70 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006be4:	4b27      	ldr	r3, [pc, #156]	; (8006c84 <HAL_RCC_OscConfig+0x4dc>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bea:	f7fb fcef 	bl	80025cc <HAL_GetTick>
 8006bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bf0:	e008      	b.n	8006c04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bf2:	f7fb fceb 	bl	80025cc <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d901      	bls.n	8006c04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e036      	b.n	8006c72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c04:	4b1e      	ldr	r3, [pc, #120]	; (8006c80 <HAL_RCC_OscConfig+0x4d8>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1f0      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x44a>
 8006c10:	e02e      	b.n	8006c70 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d101      	bne.n	8006c1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e029      	b.n	8006c72 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c1e:	4b18      	ldr	r3, [pc, #96]	; (8006c80 <HAL_RCC_OscConfig+0x4d8>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d11c      	bne.n	8006c6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d115      	bne.n	8006c6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c46:	4013      	ands	r3, r2
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d10d      	bne.n	8006c6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d106      	bne.n	8006c6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d001      	beq.n	8006c70 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e000      	b.n	8006c72 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3718      	adds	r7, #24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	40007000 	.word	0x40007000
 8006c80:	40023800 	.word	0x40023800
 8006c84:	42470060 	.word	0x42470060

08006c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e0cc      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c9c:	4b68      	ldr	r3, [pc, #416]	; (8006e40 <HAL_RCC_ClockConfig+0x1b8>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 030f 	and.w	r3, r3, #15
 8006ca4:	683a      	ldr	r2, [r7, #0]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d90c      	bls.n	8006cc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006caa:	4b65      	ldr	r3, [pc, #404]	; (8006e40 <HAL_RCC_ClockConfig+0x1b8>)
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	b2d2      	uxtb	r2, r2
 8006cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cb2:	4b63      	ldr	r3, [pc, #396]	; (8006e40 <HAL_RCC_ClockConfig+0x1b8>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 030f 	and.w	r3, r3, #15
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d001      	beq.n	8006cc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e0b8      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d020      	beq.n	8006d12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d005      	beq.n	8006ce8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cdc:	4b59      	ldr	r3, [pc, #356]	; (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	4a58      	ldr	r2, [pc, #352]	; (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ce6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0308 	and.w	r3, r3, #8
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cf4:	4b53      	ldr	r3, [pc, #332]	; (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	4a52      	ldr	r2, [pc, #328]	; (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006cfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d00:	4b50      	ldr	r3, [pc, #320]	; (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	494d      	ldr	r1, [pc, #308]	; (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d044      	beq.n	8006da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d107      	bne.n	8006d36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d26:	4b47      	ldr	r3, [pc, #284]	; (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d119      	bne.n	8006d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e07f      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d003      	beq.n	8006d46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d42:	2b03      	cmp	r3, #3
 8006d44:	d107      	bne.n	8006d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d46:	4b3f      	ldr	r3, [pc, #252]	; (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d109      	bne.n	8006d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e06f      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d56:	4b3b      	ldr	r3, [pc, #236]	; (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e067      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d66:	4b37      	ldr	r3, [pc, #220]	; (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f023 0203 	bic.w	r2, r3, #3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	4934      	ldr	r1, [pc, #208]	; (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d78:	f7fb fc28 	bl	80025cc <HAL_GetTick>
 8006d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d7e:	e00a      	b.n	8006d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d80:	f7fb fc24 	bl	80025cc <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d901      	bls.n	8006d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e04f      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d96:	4b2b      	ldr	r3, [pc, #172]	; (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 020c 	and.w	r2, r3, #12
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d1eb      	bne.n	8006d80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006da8:	4b25      	ldr	r3, [pc, #148]	; (8006e40 <HAL_RCC_ClockConfig+0x1b8>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 030f 	and.w	r3, r3, #15
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d20c      	bcs.n	8006dd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006db6:	4b22      	ldr	r3, [pc, #136]	; (8006e40 <HAL_RCC_ClockConfig+0x1b8>)
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	b2d2      	uxtb	r2, r2
 8006dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dbe:	4b20      	ldr	r3, [pc, #128]	; (8006e40 <HAL_RCC_ClockConfig+0x1b8>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d001      	beq.n	8006dd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e032      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d008      	beq.n	8006dee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ddc:	4b19      	ldr	r3, [pc, #100]	; (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	4916      	ldr	r1, [pc, #88]	; (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0308 	and.w	r3, r3, #8
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d009      	beq.n	8006e0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dfa:	4b12      	ldr	r3, [pc, #72]	; (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	490e      	ldr	r1, [pc, #56]	; (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e0e:	f000 f821 	bl	8006e54 <HAL_RCC_GetSysClockFreq>
 8006e12:	4601      	mov	r1, r0
 8006e14:	4b0b      	ldr	r3, [pc, #44]	; (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	091b      	lsrs	r3, r3, #4
 8006e1a:	f003 030f 	and.w	r3, r3, #15
 8006e1e:	4a0a      	ldr	r2, [pc, #40]	; (8006e48 <HAL_RCC_ClockConfig+0x1c0>)
 8006e20:	5cd3      	ldrb	r3, [r2, r3]
 8006e22:	fa21 f303 	lsr.w	r3, r1, r3
 8006e26:	4a09      	ldr	r2, [pc, #36]	; (8006e4c <HAL_RCC_ClockConfig+0x1c4>)
 8006e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e2a:	4b09      	ldr	r3, [pc, #36]	; (8006e50 <HAL_RCC_ClockConfig+0x1c8>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fb fb88 	bl	8002544 <HAL_InitTick>

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	40023c00 	.word	0x40023c00
 8006e44:	40023800 	.word	0x40023800
 8006e48:	08040634 	.word	0x08040634
 8006e4c:	2000007c 	.word	0x2000007c
 8006e50:	20000080 	.word	0x20000080

08006e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	607b      	str	r3, [r7, #4]
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]
 8006e62:	2300      	movs	r3, #0
 8006e64:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e6a:	4b63      	ldr	r3, [pc, #396]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f003 030c 	and.w	r3, r3, #12
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d007      	beq.n	8006e86 <HAL_RCC_GetSysClockFreq+0x32>
 8006e76:	2b08      	cmp	r3, #8
 8006e78:	d008      	beq.n	8006e8c <HAL_RCC_GetSysClockFreq+0x38>
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f040 80b4 	bne.w	8006fe8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e80:	4b5e      	ldr	r3, [pc, #376]	; (8006ffc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006e82:	60bb      	str	r3, [r7, #8]
       break;
 8006e84:	e0b3      	b.n	8006fee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e86:	4b5e      	ldr	r3, [pc, #376]	; (8007000 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006e88:	60bb      	str	r3, [r7, #8]
      break;
 8006e8a:	e0b0      	b.n	8006fee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e8c:	4b5a      	ldr	r3, [pc, #360]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e96:	4b58      	ldr	r3, [pc, #352]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d04a      	beq.n	8006f38 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ea2:	4b55      	ldr	r3, [pc, #340]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	099b      	lsrs	r3, r3, #6
 8006ea8:	f04f 0400 	mov.w	r4, #0
 8006eac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006eb0:	f04f 0200 	mov.w	r2, #0
 8006eb4:	ea03 0501 	and.w	r5, r3, r1
 8006eb8:	ea04 0602 	and.w	r6, r4, r2
 8006ebc:	4629      	mov	r1, r5
 8006ebe:	4632      	mov	r2, r6
 8006ec0:	f04f 0300 	mov.w	r3, #0
 8006ec4:	f04f 0400 	mov.w	r4, #0
 8006ec8:	0154      	lsls	r4, r2, #5
 8006eca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006ece:	014b      	lsls	r3, r1, #5
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4622      	mov	r2, r4
 8006ed4:	1b49      	subs	r1, r1, r5
 8006ed6:	eb62 0206 	sbc.w	r2, r2, r6
 8006eda:	f04f 0300 	mov.w	r3, #0
 8006ede:	f04f 0400 	mov.w	r4, #0
 8006ee2:	0194      	lsls	r4, r2, #6
 8006ee4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006ee8:	018b      	lsls	r3, r1, #6
 8006eea:	1a5b      	subs	r3, r3, r1
 8006eec:	eb64 0402 	sbc.w	r4, r4, r2
 8006ef0:	f04f 0100 	mov.w	r1, #0
 8006ef4:	f04f 0200 	mov.w	r2, #0
 8006ef8:	00e2      	lsls	r2, r4, #3
 8006efa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006efe:	00d9      	lsls	r1, r3, #3
 8006f00:	460b      	mov	r3, r1
 8006f02:	4614      	mov	r4, r2
 8006f04:	195b      	adds	r3, r3, r5
 8006f06:	eb44 0406 	adc.w	r4, r4, r6
 8006f0a:	f04f 0100 	mov.w	r1, #0
 8006f0e:	f04f 0200 	mov.w	r2, #0
 8006f12:	0262      	lsls	r2, r4, #9
 8006f14:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006f18:	0259      	lsls	r1, r3, #9
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4614      	mov	r4, r2
 8006f1e:	4618      	mov	r0, r3
 8006f20:	4621      	mov	r1, r4
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f04f 0400 	mov.w	r4, #0
 8006f28:	461a      	mov	r2, r3
 8006f2a:	4623      	mov	r3, r4
 8006f2c:	f7f9 f94c 	bl	80001c8 <__aeabi_uldivmod>
 8006f30:	4603      	mov	r3, r0
 8006f32:	460c      	mov	r4, r1
 8006f34:	60fb      	str	r3, [r7, #12]
 8006f36:	e049      	b.n	8006fcc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f38:	4b2f      	ldr	r3, [pc, #188]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	099b      	lsrs	r3, r3, #6
 8006f3e:	f04f 0400 	mov.w	r4, #0
 8006f42:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006f46:	f04f 0200 	mov.w	r2, #0
 8006f4a:	ea03 0501 	and.w	r5, r3, r1
 8006f4e:	ea04 0602 	and.w	r6, r4, r2
 8006f52:	4629      	mov	r1, r5
 8006f54:	4632      	mov	r2, r6
 8006f56:	f04f 0300 	mov.w	r3, #0
 8006f5a:	f04f 0400 	mov.w	r4, #0
 8006f5e:	0154      	lsls	r4, r2, #5
 8006f60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006f64:	014b      	lsls	r3, r1, #5
 8006f66:	4619      	mov	r1, r3
 8006f68:	4622      	mov	r2, r4
 8006f6a:	1b49      	subs	r1, r1, r5
 8006f6c:	eb62 0206 	sbc.w	r2, r2, r6
 8006f70:	f04f 0300 	mov.w	r3, #0
 8006f74:	f04f 0400 	mov.w	r4, #0
 8006f78:	0194      	lsls	r4, r2, #6
 8006f7a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006f7e:	018b      	lsls	r3, r1, #6
 8006f80:	1a5b      	subs	r3, r3, r1
 8006f82:	eb64 0402 	sbc.w	r4, r4, r2
 8006f86:	f04f 0100 	mov.w	r1, #0
 8006f8a:	f04f 0200 	mov.w	r2, #0
 8006f8e:	00e2      	lsls	r2, r4, #3
 8006f90:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006f94:	00d9      	lsls	r1, r3, #3
 8006f96:	460b      	mov	r3, r1
 8006f98:	4614      	mov	r4, r2
 8006f9a:	195b      	adds	r3, r3, r5
 8006f9c:	eb44 0406 	adc.w	r4, r4, r6
 8006fa0:	f04f 0100 	mov.w	r1, #0
 8006fa4:	f04f 0200 	mov.w	r2, #0
 8006fa8:	02a2      	lsls	r2, r4, #10
 8006faa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006fae:	0299      	lsls	r1, r3, #10
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	4614      	mov	r4, r2
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f04f 0400 	mov.w	r4, #0
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	4623      	mov	r3, r4
 8006fc2:	f7f9 f901 	bl	80001c8 <__aeabi_uldivmod>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	460c      	mov	r4, r1
 8006fca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006fcc:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	0c1b      	lsrs	r3, r3, #16
 8006fd2:	f003 0303 	and.w	r3, r3, #3
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe4:	60bb      	str	r3, [r7, #8]
      break;
 8006fe6:	e002      	b.n	8006fee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fe8:	4b04      	ldr	r3, [pc, #16]	; (8006ffc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006fea:	60bb      	str	r3, [r7, #8]
      break;
 8006fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fee:	68bb      	ldr	r3, [r7, #8]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ff8:	40023800 	.word	0x40023800
 8006ffc:	00f42400 	.word	0x00f42400
 8007000:	007a1200 	.word	0x007a1200

08007004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007004:	b480      	push	{r7}
 8007006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007008:	4b03      	ldr	r3, [pc, #12]	; (8007018 <HAL_RCC_GetHCLKFreq+0x14>)
 800700a:	681b      	ldr	r3, [r3, #0]
}
 800700c:	4618      	mov	r0, r3
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	2000007c 	.word	0x2000007c

0800701c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007020:	f7ff fff0 	bl	8007004 <HAL_RCC_GetHCLKFreq>
 8007024:	4601      	mov	r1, r0
 8007026:	4b05      	ldr	r3, [pc, #20]	; (800703c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	0a9b      	lsrs	r3, r3, #10
 800702c:	f003 0307 	and.w	r3, r3, #7
 8007030:	4a03      	ldr	r2, [pc, #12]	; (8007040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007032:	5cd3      	ldrb	r3, [r2, r3]
 8007034:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007038:	4618      	mov	r0, r3
 800703a:	bd80      	pop	{r7, pc}
 800703c:	40023800 	.word	0x40023800
 8007040:	08040644 	.word	0x08040644

08007044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007048:	f7ff ffdc 	bl	8007004 <HAL_RCC_GetHCLKFreq>
 800704c:	4601      	mov	r1, r0
 800704e:	4b05      	ldr	r3, [pc, #20]	; (8007064 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	0b5b      	lsrs	r3, r3, #13
 8007054:	f003 0307 	and.w	r3, r3, #7
 8007058:	4a03      	ldr	r2, [pc, #12]	; (8007068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800705a:	5cd3      	ldrb	r3, [r2, r3]
 800705c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007060:	4618      	mov	r0, r3
 8007062:	bd80      	pop	{r7, pc}
 8007064:	40023800 	.word	0x40023800
 8007068:	08040644 	.word	0x08040644

0800706c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e056      	b.n	800712c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d106      	bne.n	800709e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7fa ff2b 	bl	8001ef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2202      	movs	r2, #2
 80070a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070b4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	431a      	orrs	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	431a      	orrs	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	431a      	orrs	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	431a      	orrs	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070da:	431a      	orrs	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	431a      	orrs	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	ea42 0103 	orr.w	r1, r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	0c1b      	lsrs	r3, r3, #16
 80070fc:	f003 0104 	and.w	r1, r3, #4
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	69da      	ldr	r2, [r3, #28]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800711a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b088      	sub	sp, #32
 8007138:	af02      	add	r7, sp, #8
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	603b      	str	r3, [r7, #0]
 8007140:	4613      	mov	r3, r2
 8007142:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007144:	2300      	movs	r3, #0
 8007146:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007150:	d112      	bne.n	8007178 <HAL_SPI_Receive+0x44>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10e      	bne.n	8007178 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2204      	movs	r2, #4
 800715e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007162:	88fa      	ldrh	r2, [r7, #6]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	4613      	mov	r3, r2
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	68b9      	ldr	r1, [r7, #8]
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 f8e9 	bl	8007346 <HAL_SPI_TransmitReceive>
 8007174:	4603      	mov	r3, r0
 8007176:	e0e2      	b.n	800733e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800717e:	2b01      	cmp	r3, #1
 8007180:	d101      	bne.n	8007186 <HAL_SPI_Receive+0x52>
 8007182:	2302      	movs	r3, #2
 8007184:	e0db      	b.n	800733e <HAL_SPI_Receive+0x20a>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800718e:	f7fb fa1d 	bl	80025cc <HAL_GetTick>
 8007192:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b01      	cmp	r3, #1
 800719e:	d002      	beq.n	80071a6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80071a0:	2302      	movs	r3, #2
 80071a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071a4:	e0c2      	b.n	800732c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <HAL_SPI_Receive+0x7e>
 80071ac:	88fb      	ldrh	r3, [r7, #6]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d102      	bne.n	80071b8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071b6:	e0b9      	b.n	800732c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2204      	movs	r2, #4
 80071bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	88fa      	ldrh	r2, [r7, #6]
 80071d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	88fa      	ldrh	r2, [r7, #6]
 80071d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071fe:	d107      	bne.n	8007210 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800720e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721a:	2b40      	cmp	r3, #64	; 0x40
 800721c:	d007      	beq.n	800722e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800722c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d162      	bne.n	80072fc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007236:	e02e      	b.n	8007296 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b01      	cmp	r3, #1
 8007244:	d115      	bne.n	8007272 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f103 020c 	add.w	r2, r3, #12
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007252:	7812      	ldrb	r2, [r2, #0]
 8007254:	b2d2      	uxtb	r2, r2
 8007256:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29a      	uxth	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007270:	e011      	b.n	8007296 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007272:	f7fb f9ab 	bl	80025cc <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	429a      	cmp	r2, r3
 8007280:	d803      	bhi.n	800728a <HAL_SPI_Receive+0x156>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007288:	d102      	bne.n	8007290 <HAL_SPI_Receive+0x15c>
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d102      	bne.n	8007296 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007294:	e04a      	b.n	800732c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800729a:	b29b      	uxth	r3, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1cb      	bne.n	8007238 <HAL_SPI_Receive+0x104>
 80072a0:	e031      	b.n	8007306 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d113      	bne.n	80072d8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68da      	ldr	r2, [r3, #12]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ba:	b292      	uxth	r2, r2
 80072bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c2:	1c9a      	adds	r2, r3, #2
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072d6:	e011      	b.n	80072fc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072d8:	f7fb f978 	bl	80025cc <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d803      	bhi.n	80072f0 <HAL_SPI_Receive+0x1bc>
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072ee:	d102      	bne.n	80072f6 <HAL_SPI_Receive+0x1c2>
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d102      	bne.n	80072fc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80072fa:	e017      	b.n	800732c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007300:	b29b      	uxth	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1cd      	bne.n	80072a2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f000 fb46 	bl	800799c <SPI_EndRxTransaction>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2220      	movs	r2, #32
 800731a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	75fb      	strb	r3, [r7, #23]
 8007328:	e000      	b.n	800732c <HAL_SPI_Receive+0x1f8>
  }

error :
 800732a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800733c:	7dfb      	ldrb	r3, [r7, #23]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b08c      	sub	sp, #48	; 0x30
 800734a:	af00      	add	r7, sp, #0
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	60b9      	str	r1, [r7, #8]
 8007350:	607a      	str	r2, [r7, #4]
 8007352:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007354:	2301      	movs	r3, #1
 8007356:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007364:	2b01      	cmp	r3, #1
 8007366:	d101      	bne.n	800736c <HAL_SPI_TransmitReceive+0x26>
 8007368:	2302      	movs	r3, #2
 800736a:	e18a      	b.n	8007682 <HAL_SPI_TransmitReceive+0x33c>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007374:	f7fb f92a 	bl	80025cc <HAL_GetTick>
 8007378:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007380:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800738a:	887b      	ldrh	r3, [r7, #2]
 800738c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800738e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007392:	2b01      	cmp	r3, #1
 8007394:	d00f      	beq.n	80073b6 <HAL_SPI_TransmitReceive+0x70>
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800739c:	d107      	bne.n	80073ae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d103      	bne.n	80073ae <HAL_SPI_TransmitReceive+0x68>
 80073a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d003      	beq.n	80073b6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80073ae:	2302      	movs	r3, #2
 80073b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80073b4:	e15b      	b.n	800766e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d005      	beq.n	80073c8 <HAL_SPI_TransmitReceive+0x82>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d002      	beq.n	80073c8 <HAL_SPI_TransmitReceive+0x82>
 80073c2:	887b      	ldrh	r3, [r7, #2]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d103      	bne.n	80073d0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80073ce:	e14e      	b.n	800766e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b04      	cmp	r3, #4
 80073da:	d003      	beq.n	80073e4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2205      	movs	r2, #5
 80073e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	887a      	ldrh	r2, [r7, #2]
 80073f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	887a      	ldrh	r2, [r7, #2]
 80073fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	887a      	ldrh	r2, [r7, #2]
 8007406:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	887a      	ldrh	r2, [r7, #2]
 800740c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007424:	2b40      	cmp	r3, #64	; 0x40
 8007426:	d007      	beq.n	8007438 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007436:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007440:	d178      	bne.n	8007534 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d002      	beq.n	8007450 <HAL_SPI_TransmitReceive+0x10a>
 800744a:	8b7b      	ldrh	r3, [r7, #26]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d166      	bne.n	800751e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007454:	881a      	ldrh	r2, [r3, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007460:	1c9a      	adds	r2, r3, #2
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800746a:	b29b      	uxth	r3, r3
 800746c:	3b01      	subs	r3, #1
 800746e:	b29a      	uxth	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007474:	e053      	b.n	800751e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f003 0302 	and.w	r3, r3, #2
 8007480:	2b02      	cmp	r3, #2
 8007482:	d11b      	bne.n	80074bc <HAL_SPI_TransmitReceive+0x176>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d016      	beq.n	80074bc <HAL_SPI_TransmitReceive+0x176>
 800748e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007490:	2b01      	cmp	r3, #1
 8007492:	d113      	bne.n	80074bc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007498:	881a      	ldrh	r2, [r3, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a4:	1c9a      	adds	r2, r3, #2
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	3b01      	subs	r3, #1
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d119      	bne.n	80074fe <HAL_SPI_TransmitReceive+0x1b8>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d014      	beq.n	80074fe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074de:	b292      	uxth	r2, r2
 80074e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e6:	1c9a      	adds	r2, r3, #2
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	3b01      	subs	r3, #1
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074fa:	2301      	movs	r3, #1
 80074fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80074fe:	f7fb f865 	bl	80025cc <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800750a:	429a      	cmp	r2, r3
 800750c:	d807      	bhi.n	800751e <HAL_SPI_TransmitReceive+0x1d8>
 800750e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007514:	d003      	beq.n	800751e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800751c:	e0a7      	b.n	800766e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007522:	b29b      	uxth	r3, r3
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1a6      	bne.n	8007476 <HAL_SPI_TransmitReceive+0x130>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800752c:	b29b      	uxth	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1a1      	bne.n	8007476 <HAL_SPI_TransmitReceive+0x130>
 8007532:	e07c      	b.n	800762e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d002      	beq.n	8007542 <HAL_SPI_TransmitReceive+0x1fc>
 800753c:	8b7b      	ldrh	r3, [r7, #26]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d16b      	bne.n	800761a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	330c      	adds	r3, #12
 800754c:	7812      	ldrb	r2, [r2, #0]
 800754e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007554:	1c5a      	adds	r2, r3, #1
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800755e:	b29b      	uxth	r3, r3
 8007560:	3b01      	subs	r3, #1
 8007562:	b29a      	uxth	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007568:	e057      	b.n	800761a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b02      	cmp	r3, #2
 8007576:	d11c      	bne.n	80075b2 <HAL_SPI_TransmitReceive+0x26c>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800757c:	b29b      	uxth	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d017      	beq.n	80075b2 <HAL_SPI_TransmitReceive+0x26c>
 8007582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007584:	2b01      	cmp	r3, #1
 8007586:	d114      	bne.n	80075b2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	330c      	adds	r3, #12
 8007592:	7812      	ldrb	r2, [r2, #0]
 8007594:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759a:	1c5a      	adds	r2, r3, #1
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	3b01      	subs	r3, #1
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d119      	bne.n	80075f4 <HAL_SPI_TransmitReceive+0x2ae>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d014      	beq.n	80075f4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68da      	ldr	r2, [r3, #12]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d4:	b2d2      	uxtb	r2, r2
 80075d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	3b01      	subs	r3, #1
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075f0:	2301      	movs	r3, #1
 80075f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075f4:	f7fa ffea 	bl	80025cc <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007600:	429a      	cmp	r2, r3
 8007602:	d803      	bhi.n	800760c <HAL_SPI_TransmitReceive+0x2c6>
 8007604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800760a:	d102      	bne.n	8007612 <HAL_SPI_TransmitReceive+0x2cc>
 800760c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760e:	2b00      	cmp	r3, #0
 8007610:	d103      	bne.n	800761a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007618:	e029      	b.n	800766e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800761e:	b29b      	uxth	r3, r3
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1a2      	bne.n	800756a <HAL_SPI_TransmitReceive+0x224>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007628:	b29b      	uxth	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d19d      	bne.n	800756a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800762e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007630:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 fa18 	bl	8007a68 <SPI_EndRxTxTransaction>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d006      	beq.n	800764c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2220      	movs	r2, #32
 8007648:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800764a:	e010      	b.n	800766e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10b      	bne.n	800766c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007654:	2300      	movs	r3, #0
 8007656:	617b      	str	r3, [r7, #20]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	617b      	str	r3, [r7, #20]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	617b      	str	r3, [r7, #20]
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	e000      	b.n	800766e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800766c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800767e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007682:	4618      	mov	r0, r3
 8007684:	3730      	adds	r7, #48	; 0x30
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
	...

0800768c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b088      	sub	sp, #32
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	099b      	lsrs	r3, r3, #6
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10f      	bne.n	80076d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00a      	beq.n	80076d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	099b      	lsrs	r3, r3, #6
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d004      	beq.n	80076d0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	4798      	blx	r3
    return;
 80076ce:	e0d8      	b.n	8007882 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	085b      	lsrs	r3, r3, #1
 80076d4:	f003 0301 	and.w	r3, r3, #1
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00a      	beq.n	80076f2 <HAL_SPI_IRQHandler+0x66>
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	09db      	lsrs	r3, r3, #7
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d004      	beq.n	80076f2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	4798      	blx	r3
    return;
 80076f0:	e0c7      	b.n	8007882 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	095b      	lsrs	r3, r3, #5
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10c      	bne.n	8007718 <HAL_SPI_IRQHandler+0x8c>
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	099b      	lsrs	r3, r3, #6
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	0a1b      	lsrs	r3, r3, #8
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	f000 80b5 	beq.w	8007882 <HAL_SPI_IRQHandler+0x1f6>
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	095b      	lsrs	r3, r3, #5
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	2b00      	cmp	r3, #0
 8007722:	f000 80ae 	beq.w	8007882 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	099b      	lsrs	r3, r3, #6
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b00      	cmp	r3, #0
 8007730:	d023      	beq.n	800777a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b03      	cmp	r3, #3
 800773c:	d011      	beq.n	8007762 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007742:	f043 0204 	orr.w	r2, r3, #4
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800774a:	2300      	movs	r3, #0
 800774c:	617b      	str	r3, [r7, #20]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	617b      	str	r3, [r7, #20]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	617b      	str	r3, [r7, #20]
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	e00b      	b.n	800777a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007762:	2300      	movs	r3, #0
 8007764:	613b      	str	r3, [r7, #16]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	613b      	str	r3, [r7, #16]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	613b      	str	r3, [r7, #16]
 8007776:	693b      	ldr	r3, [r7, #16]
        return;
 8007778:	e083      	b.n	8007882 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	095b      	lsrs	r3, r3, #5
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	d014      	beq.n	80077b0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800778a:	f043 0201 	orr.w	r2, r3, #1
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007792:	2300      	movs	r3, #0
 8007794:	60fb      	str	r3, [r7, #12]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	60fb      	str	r3, [r7, #12]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	0a1b      	lsrs	r3, r3, #8
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00c      	beq.n	80077d6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c0:	f043 0208 	orr.w	r2, r3, #8
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80077c8:	2300      	movs	r3, #0
 80077ca:	60bb      	str	r3, [r7, #8]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	60bb      	str	r3, [r7, #8]
 80077d4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d050      	beq.n	8007880 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077ec:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	f003 0302 	and.w	r3, r3, #2
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d104      	bne.n	800780a <HAL_SPI_IRQHandler+0x17e>
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	d034      	beq.n	8007874 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f022 0203 	bic.w	r2, r2, #3
 8007818:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800781e:	2b00      	cmp	r3, #0
 8007820:	d011      	beq.n	8007846 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007826:	4a18      	ldr	r2, [pc, #96]	; (8007888 <HAL_SPI_IRQHandler+0x1fc>)
 8007828:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800782e:	4618      	mov	r0, r3
 8007830:	f7fb fb67 	bl	8002f02 <HAL_DMA_Abort_IT>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d005      	beq.n	8007846 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800784a:	2b00      	cmp	r3, #0
 800784c:	d016      	beq.n	800787c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007852:	4a0d      	ldr	r2, [pc, #52]	; (8007888 <HAL_SPI_IRQHandler+0x1fc>)
 8007854:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800785a:	4618      	mov	r0, r3
 800785c:	f7fb fb51 	bl	8002f02 <HAL_DMA_Abort_IT>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007872:	e003      	b.n	800787c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f809 	bl	800788c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800787a:	e000      	b.n	800787e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800787c:	bf00      	nop
    return;
 800787e:	bf00      	nop
 8007880:	bf00      	nop
  }
}
 8007882:	3720      	adds	r7, #32
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	080078a1 	.word	0x080078a1

0800788c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f7ff ffe6 	bl	800788c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80078c0:	bf00      	nop
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	603b      	str	r3, [r7, #0]
 80078d4:	4613      	mov	r3, r2
 80078d6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078d8:	e04c      	b.n	8007974 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078e0:	d048      	beq.n	8007974 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80078e2:	f7fa fe73 	bl	80025cc <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d902      	bls.n	80078f8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d13d      	bne.n	8007974 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007906:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007910:	d111      	bne.n	8007936 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800791a:	d004      	beq.n	8007926 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007924:	d107      	bne.n	8007936 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007934:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800793e:	d10f      	bne.n	8007960 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800795e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e00f      	b.n	8007994 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689a      	ldr	r2, [r3, #8]
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	4013      	ands	r3, r2
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	429a      	cmp	r2, r3
 8007982:	bf0c      	ite	eq
 8007984:	2301      	moveq	r3, #1
 8007986:	2300      	movne	r3, #0
 8007988:	b2db      	uxtb	r3, r3
 800798a:	461a      	mov	r2, r3
 800798c:	79fb      	ldrb	r3, [r7, #7]
 800798e:	429a      	cmp	r2, r3
 8007990:	d1a3      	bne.n	80078da <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af02      	add	r7, sp, #8
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079b0:	d111      	bne.n	80079d6 <SPI_EndRxTransaction+0x3a>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079ba:	d004      	beq.n	80079c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079c4:	d107      	bne.n	80079d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079d4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079de:	d12a      	bne.n	8007a36 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079e8:	d012      	beq.n	8007a10 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	2200      	movs	r2, #0
 80079f2:	2180      	movs	r1, #128	; 0x80
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f7ff ff67 	bl	80078c8 <SPI_WaitFlagStateUntilTimeout>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d02d      	beq.n	8007a5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a04:	f043 0220 	orr.w	r2, r3, #32
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e026      	b.n	8007a5e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2200      	movs	r2, #0
 8007a18:	2101      	movs	r1, #1
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f7ff ff54 	bl	80078c8 <SPI_WaitFlagStateUntilTimeout>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d01a      	beq.n	8007a5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2a:	f043 0220 	orr.w	r2, r3, #32
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e013      	b.n	8007a5e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	9300      	str	r3, [sp, #0]
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	2101      	movs	r1, #1
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f7ff ff41 	bl	80078c8 <SPI_WaitFlagStateUntilTimeout>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d007      	beq.n	8007a5c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a50:	f043 0220 	orr.w	r2, r3, #32
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e000      	b.n	8007a5e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b088      	sub	sp, #32
 8007a6c:	af02      	add	r7, sp, #8
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007a74:	4b1b      	ldr	r3, [pc, #108]	; (8007ae4 <SPI_EndRxTxTransaction+0x7c>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a1b      	ldr	r2, [pc, #108]	; (8007ae8 <SPI_EndRxTxTransaction+0x80>)
 8007a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7e:	0d5b      	lsrs	r3, r3, #21
 8007a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a84:	fb02 f303 	mul.w	r3, r2, r3
 8007a88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a92:	d112      	bne.n	8007aba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	2180      	movs	r1, #128	; 0x80
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f7ff ff12 	bl	80078c8 <SPI_WaitFlagStateUntilTimeout>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d016      	beq.n	8007ad8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aae:	f043 0220 	orr.w	r2, r3, #32
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e00f      	b.n	8007ada <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00a      	beq.n	8007ad6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad0:	2b80      	cmp	r3, #128	; 0x80
 8007ad2:	d0f2      	beq.n	8007aba <SPI_EndRxTxTransaction+0x52>
 8007ad4:	e000      	b.n	8007ad8 <SPI_EndRxTxTransaction+0x70>
        break;
 8007ad6:	bf00      	nop
  }

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3718      	adds	r7, #24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	2000007c 	.word	0x2000007c
 8007ae8:	165e9f81 	.word	0x165e9f81

08007aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e01d      	b.n	8007b3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d106      	bne.n	8007b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7fa fbb4 	bl	8002280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	3304      	adds	r3, #4
 8007b28:	4619      	mov	r1, r3
 8007b2a:	4610      	mov	r0, r2
 8007b2c:	f000 fa14 	bl	8007f58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b085      	sub	sp, #20
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68da      	ldr	r2, [r3, #12]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f042 0201 	orr.w	r2, r2, #1
 8007b58:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f003 0307 	and.w	r3, r3, #7
 8007b64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2b06      	cmp	r3, #6
 8007b6a:	d007      	beq.n	8007b7c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f042 0201 	orr.w	r2, r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr

08007b8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b082      	sub	sp, #8
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d122      	bne.n	8007be6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d11b      	bne.n	8007be6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f06f 0202 	mvn.w	r2, #2
 8007bb6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	f003 0303 	and.w	r3, r3, #3
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f9a5 	bl	8007f1c <HAL_TIM_IC_CaptureCallback>
 8007bd2:	e005      	b.n	8007be0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f997 	bl	8007f08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f9a8 	bl	8007f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	2b04      	cmp	r3, #4
 8007bf2:	d122      	bne.n	8007c3a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	f003 0304 	and.w	r3, r3, #4
 8007bfe:	2b04      	cmp	r3, #4
 8007c00:	d11b      	bne.n	8007c3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f06f 0204 	mvn.w	r2, #4
 8007c0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d003      	beq.n	8007c28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f97b 	bl	8007f1c <HAL_TIM_IC_CaptureCallback>
 8007c26:	e005      	b.n	8007c34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f96d 	bl	8007f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f97e 	bl	8007f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	f003 0308 	and.w	r3, r3, #8
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d122      	bne.n	8007c8e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	f003 0308 	and.w	r3, r3, #8
 8007c52:	2b08      	cmp	r3, #8
 8007c54:	d11b      	bne.n	8007c8e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f06f 0208 	mvn.w	r2, #8
 8007c5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2204      	movs	r2, #4
 8007c64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	69db      	ldr	r3, [r3, #28]
 8007c6c:	f003 0303 	and.w	r3, r3, #3
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d003      	beq.n	8007c7c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f951 	bl	8007f1c <HAL_TIM_IC_CaptureCallback>
 8007c7a:	e005      	b.n	8007c88 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f943 	bl	8007f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f954 	bl	8007f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	f003 0310 	and.w	r3, r3, #16
 8007c98:	2b10      	cmp	r3, #16
 8007c9a:	d122      	bne.n	8007ce2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	f003 0310 	and.w	r3, r3, #16
 8007ca6:	2b10      	cmp	r3, #16
 8007ca8:	d11b      	bne.n	8007ce2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f06f 0210 	mvn.w	r2, #16
 8007cb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2208      	movs	r2, #8
 8007cb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d003      	beq.n	8007cd0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f927 	bl	8007f1c <HAL_TIM_IC_CaptureCallback>
 8007cce:	e005      	b.n	8007cdc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f919 	bl	8007f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f92a 	bl	8007f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d10e      	bne.n	8007d0e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d107      	bne.n	8007d0e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f06f 0201 	mvn.w	r2, #1
 8007d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f7f9 ff8f 	bl	8001c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d18:	2b80      	cmp	r3, #128	; 0x80
 8007d1a:	d10e      	bne.n	8007d3a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d26:	2b80      	cmp	r3, #128	; 0x80
 8007d28:	d107      	bne.n	8007d3a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 facf 	bl	80082d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d44:	2b40      	cmp	r3, #64	; 0x40
 8007d46:	d10e      	bne.n	8007d66 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d52:	2b40      	cmp	r3, #64	; 0x40
 8007d54:	d107      	bne.n	8007d66 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f8ef 	bl	8007f44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	f003 0320 	and.w	r3, r3, #32
 8007d70:	2b20      	cmp	r3, #32
 8007d72:	d10e      	bne.n	8007d92 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	f003 0320 	and.w	r3, r3, #32
 8007d7e:	2b20      	cmp	r3, #32
 8007d80:	d107      	bne.n	8007d92 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f06f 0220 	mvn.w	r2, #32
 8007d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fa99 	bl	80082c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d92:	bf00      	nop
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d101      	bne.n	8007db2 <HAL_TIM_ConfigClockSource+0x18>
 8007dae:	2302      	movs	r3, #2
 8007db0:	e0a6      	b.n	8007f00 <HAL_TIM_ConfigClockSource+0x166>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007dd0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007dd8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b40      	cmp	r3, #64	; 0x40
 8007de8:	d067      	beq.n	8007eba <HAL_TIM_ConfigClockSource+0x120>
 8007dea:	2b40      	cmp	r3, #64	; 0x40
 8007dec:	d80b      	bhi.n	8007e06 <HAL_TIM_ConfigClockSource+0x6c>
 8007dee:	2b10      	cmp	r3, #16
 8007df0:	d073      	beq.n	8007eda <HAL_TIM_ConfigClockSource+0x140>
 8007df2:	2b10      	cmp	r3, #16
 8007df4:	d802      	bhi.n	8007dfc <HAL_TIM_ConfigClockSource+0x62>
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d06f      	beq.n	8007eda <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007dfa:	e078      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	d06c      	beq.n	8007eda <HAL_TIM_ConfigClockSource+0x140>
 8007e00:	2b30      	cmp	r3, #48	; 0x30
 8007e02:	d06a      	beq.n	8007eda <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007e04:	e073      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007e06:	2b70      	cmp	r3, #112	; 0x70
 8007e08:	d00d      	beq.n	8007e26 <HAL_TIM_ConfigClockSource+0x8c>
 8007e0a:	2b70      	cmp	r3, #112	; 0x70
 8007e0c:	d804      	bhi.n	8007e18 <HAL_TIM_ConfigClockSource+0x7e>
 8007e0e:	2b50      	cmp	r3, #80	; 0x50
 8007e10:	d033      	beq.n	8007e7a <HAL_TIM_ConfigClockSource+0xe0>
 8007e12:	2b60      	cmp	r3, #96	; 0x60
 8007e14:	d041      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007e16:	e06a      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e1c:	d066      	beq.n	8007eec <HAL_TIM_ConfigClockSource+0x152>
 8007e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e22:	d017      	beq.n	8007e54 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007e24:	e063      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6818      	ldr	r0, [r3, #0]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	6899      	ldr	r1, [r3, #8]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	685a      	ldr	r2, [r3, #4]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	f000 f9a9 	bl	800818c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e48:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	609a      	str	r2, [r3, #8]
      break;
 8007e52:	e04c      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6818      	ldr	r0, [r3, #0]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	6899      	ldr	r1, [r3, #8]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f000 f992 	bl	800818c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	689a      	ldr	r2, [r3, #8]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e76:	609a      	str	r2, [r3, #8]
      break;
 8007e78:	e039      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6818      	ldr	r0, [r3, #0]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	6859      	ldr	r1, [r3, #4]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	461a      	mov	r2, r3
 8007e88:	f000 f906 	bl	8008098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2150      	movs	r1, #80	; 0x50
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 f95f 	bl	8008156 <TIM_ITRx_SetConfig>
      break;
 8007e98:	e029      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6818      	ldr	r0, [r3, #0]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	6859      	ldr	r1, [r3, #4]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	f000 f925 	bl	80080f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2160      	movs	r1, #96	; 0x60
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 f94f 	bl	8008156 <TIM_ITRx_SetConfig>
      break;
 8007eb8:	e019      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6818      	ldr	r0, [r3, #0]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	6859      	ldr	r1, [r3, #4]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	f000 f8e6 	bl	8008098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2140      	movs	r1, #64	; 0x40
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 f93f 	bl	8008156 <TIM_ITRx_SetConfig>
      break;
 8007ed8:	e009      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	f000 f936 	bl	8008156 <TIM_ITRx_SetConfig>
      break;
 8007eea:	e000      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007eec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a40      	ldr	r2, [pc, #256]	; (800806c <TIM_Base_SetConfig+0x114>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d013      	beq.n	8007f98 <TIM_Base_SetConfig+0x40>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f76:	d00f      	beq.n	8007f98 <TIM_Base_SetConfig+0x40>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a3d      	ldr	r2, [pc, #244]	; (8008070 <TIM_Base_SetConfig+0x118>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d00b      	beq.n	8007f98 <TIM_Base_SetConfig+0x40>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a3c      	ldr	r2, [pc, #240]	; (8008074 <TIM_Base_SetConfig+0x11c>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d007      	beq.n	8007f98 <TIM_Base_SetConfig+0x40>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a3b      	ldr	r2, [pc, #236]	; (8008078 <TIM_Base_SetConfig+0x120>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d003      	beq.n	8007f98 <TIM_Base_SetConfig+0x40>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a3a      	ldr	r2, [pc, #232]	; (800807c <TIM_Base_SetConfig+0x124>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d108      	bne.n	8007faa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a2f      	ldr	r2, [pc, #188]	; (800806c <TIM_Base_SetConfig+0x114>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d02b      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb8:	d027      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a2c      	ldr	r2, [pc, #176]	; (8008070 <TIM_Base_SetConfig+0x118>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d023      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a2b      	ldr	r2, [pc, #172]	; (8008074 <TIM_Base_SetConfig+0x11c>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d01f      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a2a      	ldr	r2, [pc, #168]	; (8008078 <TIM_Base_SetConfig+0x120>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d01b      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a29      	ldr	r2, [pc, #164]	; (800807c <TIM_Base_SetConfig+0x124>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d017      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a28      	ldr	r2, [pc, #160]	; (8008080 <TIM_Base_SetConfig+0x128>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d013      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a27      	ldr	r2, [pc, #156]	; (8008084 <TIM_Base_SetConfig+0x12c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d00f      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a26      	ldr	r2, [pc, #152]	; (8008088 <TIM_Base_SetConfig+0x130>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d00b      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a25      	ldr	r2, [pc, #148]	; (800808c <TIM_Base_SetConfig+0x134>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d007      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a24      	ldr	r2, [pc, #144]	; (8008090 <TIM_Base_SetConfig+0x138>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d003      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a23      	ldr	r2, [pc, #140]	; (8008094 <TIM_Base_SetConfig+0x13c>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d108      	bne.n	800801c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	4313      	orrs	r3, r2
 800801a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a0a      	ldr	r2, [pc, #40]	; (800806c <TIM_Base_SetConfig+0x114>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d003      	beq.n	8008050 <TIM_Base_SetConfig+0xf8>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a0c      	ldr	r2, [pc, #48]	; (800807c <TIM_Base_SetConfig+0x124>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d103      	bne.n	8008058 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	691a      	ldr	r2, [r3, #16]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	615a      	str	r2, [r3, #20]
}
 800805e:	bf00      	nop
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	40010000 	.word	0x40010000
 8008070:	40000400 	.word	0x40000400
 8008074:	40000800 	.word	0x40000800
 8008078:	40000c00 	.word	0x40000c00
 800807c:	40010400 	.word	0x40010400
 8008080:	40014000 	.word	0x40014000
 8008084:	40014400 	.word	0x40014400
 8008088:	40014800 	.word	0x40014800
 800808c:	40001800 	.word	0x40001800
 8008090:	40001c00 	.word	0x40001c00
 8008094:	40002000 	.word	0x40002000

08008098 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6a1b      	ldr	r3, [r3, #32]
 80080a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	f023 0201 	bic.w	r2, r3, #1
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	011b      	lsls	r3, r3, #4
 80080c8:	693a      	ldr	r2, [r7, #16]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	f023 030a 	bic.w	r3, r3, #10
 80080d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	4313      	orrs	r3, r2
 80080dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	621a      	str	r2, [r3, #32]
}
 80080ea:	bf00      	nop
 80080ec:	371c      	adds	r7, #28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080f6:	b480      	push	{r7}
 80080f8:	b087      	sub	sp, #28
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	60f8      	str	r0, [r7, #12]
 80080fe:	60b9      	str	r1, [r7, #8]
 8008100:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	f023 0210 	bic.w	r2, r3, #16
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008120:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	031b      	lsls	r3, r3, #12
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	4313      	orrs	r3, r2
 800812a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008132:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	011b      	lsls	r3, r3, #4
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	4313      	orrs	r3, r2
 800813c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	621a      	str	r2, [r3, #32]
}
 800814a:	bf00      	nop
 800814c:	371c      	adds	r7, #28
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008156:	b480      	push	{r7}
 8008158:	b085      	sub	sp, #20
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4313      	orrs	r3, r2
 8008174:	f043 0307 	orr.w	r3, r3, #7
 8008178:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	609a      	str	r2, [r3, #8]
}
 8008180:	bf00      	nop
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800818c:	b480      	push	{r7}
 800818e:	b087      	sub	sp, #28
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
 8008198:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	021a      	lsls	r2, r3, #8
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	431a      	orrs	r2, r3
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	697a      	ldr	r2, [r7, #20]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	609a      	str	r2, [r3, #8]
}
 80081c0:	bf00      	nop
 80081c2:	371c      	adds	r7, #28
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d101      	bne.n	80081e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081e0:	2302      	movs	r3, #2
 80081e2:	e05a      	b.n	800829a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2202      	movs	r2, #2
 80081f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800820a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	4313      	orrs	r3, r2
 8008214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a21      	ldr	r2, [pc, #132]	; (80082a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d022      	beq.n	800826e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008230:	d01d      	beq.n	800826e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a1d      	ldr	r2, [pc, #116]	; (80082ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d018      	beq.n	800826e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a1b      	ldr	r2, [pc, #108]	; (80082b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d013      	beq.n	800826e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a1a      	ldr	r2, [pc, #104]	; (80082b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d00e      	beq.n	800826e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a18      	ldr	r2, [pc, #96]	; (80082b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d009      	beq.n	800826e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a17      	ldr	r2, [pc, #92]	; (80082bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d004      	beq.n	800826e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a15      	ldr	r2, [pc, #84]	; (80082c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d10c      	bne.n	8008288 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008274:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	4313      	orrs	r3, r2
 800827e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop
 80082a8:	40010000 	.word	0x40010000
 80082ac:	40000400 	.word	0x40000400
 80082b0:	40000800 	.word	0x40000800
 80082b4:	40000c00 	.word	0x40000c00
 80082b8:	40010400 	.word	0x40010400
 80082bc:	40014000 	.word	0x40014000
 80082c0:	40001800 	.word	0x40001800

080082c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e03f      	b.n	800837e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d106      	bne.n	8008318 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7fa f84c 	bl	80023b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2224      	movs	r2, #36	; 0x24
 800831c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68da      	ldr	r2, [r3, #12]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800832e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f829 	bl	8008388 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	691a      	ldr	r2, [r3, #16]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008344:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	695a      	ldr	r2, [r3, #20]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008354:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68da      	ldr	r2, [r3, #12]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008364:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2220      	movs	r2, #32
 8008370:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2220      	movs	r2, #32
 8008378:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
	...

08008388 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838c:	b085      	sub	sp, #20
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	68da      	ldr	r2, [r3, #12]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	430a      	orrs	r2, r1
 80083a6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	689a      	ldr	r2, [r3, #8]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	431a      	orrs	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	431a      	orrs	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	69db      	ldr	r3, [r3, #28]
 80083bc:	4313      	orrs	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80083ca:	f023 030c 	bic.w	r3, r3, #12
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	6812      	ldr	r2, [r2, #0]
 80083d2:	68f9      	ldr	r1, [r7, #12]
 80083d4:	430b      	orrs	r3, r1
 80083d6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	699a      	ldr	r2, [r3, #24]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	430a      	orrs	r2, r1
 80083ec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083f6:	f040 818b 	bne.w	8008710 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4ac1      	ldr	r2, [pc, #772]	; (8008704 <UART_SetConfig+0x37c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d005      	beq.n	8008410 <UART_SetConfig+0x88>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4abf      	ldr	r2, [pc, #764]	; (8008708 <UART_SetConfig+0x380>)
 800840a:	4293      	cmp	r3, r2
 800840c:	f040 80bd 	bne.w	800858a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008410:	f7fe fe18 	bl	8007044 <HAL_RCC_GetPCLK2Freq>
 8008414:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	461d      	mov	r5, r3
 800841a:	f04f 0600 	mov.w	r6, #0
 800841e:	46a8      	mov	r8, r5
 8008420:	46b1      	mov	r9, r6
 8008422:	eb18 0308 	adds.w	r3, r8, r8
 8008426:	eb49 0409 	adc.w	r4, r9, r9
 800842a:	4698      	mov	r8, r3
 800842c:	46a1      	mov	r9, r4
 800842e:	eb18 0805 	adds.w	r8, r8, r5
 8008432:	eb49 0906 	adc.w	r9, r9, r6
 8008436:	f04f 0100 	mov.w	r1, #0
 800843a:	f04f 0200 	mov.w	r2, #0
 800843e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008442:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008446:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800844a:	4688      	mov	r8, r1
 800844c:	4691      	mov	r9, r2
 800844e:	eb18 0005 	adds.w	r0, r8, r5
 8008452:	eb49 0106 	adc.w	r1, r9, r6
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	461d      	mov	r5, r3
 800845c:	f04f 0600 	mov.w	r6, #0
 8008460:	196b      	adds	r3, r5, r5
 8008462:	eb46 0406 	adc.w	r4, r6, r6
 8008466:	461a      	mov	r2, r3
 8008468:	4623      	mov	r3, r4
 800846a:	f7f7 fead 	bl	80001c8 <__aeabi_uldivmod>
 800846e:	4603      	mov	r3, r0
 8008470:	460c      	mov	r4, r1
 8008472:	461a      	mov	r2, r3
 8008474:	4ba5      	ldr	r3, [pc, #660]	; (800870c <UART_SetConfig+0x384>)
 8008476:	fba3 2302 	umull	r2, r3, r3, r2
 800847a:	095b      	lsrs	r3, r3, #5
 800847c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	461d      	mov	r5, r3
 8008484:	f04f 0600 	mov.w	r6, #0
 8008488:	46a9      	mov	r9, r5
 800848a:	46b2      	mov	sl, r6
 800848c:	eb19 0309 	adds.w	r3, r9, r9
 8008490:	eb4a 040a 	adc.w	r4, sl, sl
 8008494:	4699      	mov	r9, r3
 8008496:	46a2      	mov	sl, r4
 8008498:	eb19 0905 	adds.w	r9, r9, r5
 800849c:	eb4a 0a06 	adc.w	sl, sl, r6
 80084a0:	f04f 0100 	mov.w	r1, #0
 80084a4:	f04f 0200 	mov.w	r2, #0
 80084a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80084b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80084b4:	4689      	mov	r9, r1
 80084b6:	4692      	mov	sl, r2
 80084b8:	eb19 0005 	adds.w	r0, r9, r5
 80084bc:	eb4a 0106 	adc.w	r1, sl, r6
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	461d      	mov	r5, r3
 80084c6:	f04f 0600 	mov.w	r6, #0
 80084ca:	196b      	adds	r3, r5, r5
 80084cc:	eb46 0406 	adc.w	r4, r6, r6
 80084d0:	461a      	mov	r2, r3
 80084d2:	4623      	mov	r3, r4
 80084d4:	f7f7 fe78 	bl	80001c8 <__aeabi_uldivmod>
 80084d8:	4603      	mov	r3, r0
 80084da:	460c      	mov	r4, r1
 80084dc:	461a      	mov	r2, r3
 80084de:	4b8b      	ldr	r3, [pc, #556]	; (800870c <UART_SetConfig+0x384>)
 80084e0:	fba3 1302 	umull	r1, r3, r3, r2
 80084e4:	095b      	lsrs	r3, r3, #5
 80084e6:	2164      	movs	r1, #100	; 0x64
 80084e8:	fb01 f303 	mul.w	r3, r1, r3
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	00db      	lsls	r3, r3, #3
 80084f0:	3332      	adds	r3, #50	; 0x32
 80084f2:	4a86      	ldr	r2, [pc, #536]	; (800870c <UART_SetConfig+0x384>)
 80084f4:	fba2 2303 	umull	r2, r3, r2, r3
 80084f8:	095b      	lsrs	r3, r3, #5
 80084fa:	005b      	lsls	r3, r3, #1
 80084fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008500:	4498      	add	r8, r3
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	461d      	mov	r5, r3
 8008506:	f04f 0600 	mov.w	r6, #0
 800850a:	46a9      	mov	r9, r5
 800850c:	46b2      	mov	sl, r6
 800850e:	eb19 0309 	adds.w	r3, r9, r9
 8008512:	eb4a 040a 	adc.w	r4, sl, sl
 8008516:	4699      	mov	r9, r3
 8008518:	46a2      	mov	sl, r4
 800851a:	eb19 0905 	adds.w	r9, r9, r5
 800851e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008522:	f04f 0100 	mov.w	r1, #0
 8008526:	f04f 0200 	mov.w	r2, #0
 800852a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800852e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008532:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008536:	4689      	mov	r9, r1
 8008538:	4692      	mov	sl, r2
 800853a:	eb19 0005 	adds.w	r0, r9, r5
 800853e:	eb4a 0106 	adc.w	r1, sl, r6
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	461d      	mov	r5, r3
 8008548:	f04f 0600 	mov.w	r6, #0
 800854c:	196b      	adds	r3, r5, r5
 800854e:	eb46 0406 	adc.w	r4, r6, r6
 8008552:	461a      	mov	r2, r3
 8008554:	4623      	mov	r3, r4
 8008556:	f7f7 fe37 	bl	80001c8 <__aeabi_uldivmod>
 800855a:	4603      	mov	r3, r0
 800855c:	460c      	mov	r4, r1
 800855e:	461a      	mov	r2, r3
 8008560:	4b6a      	ldr	r3, [pc, #424]	; (800870c <UART_SetConfig+0x384>)
 8008562:	fba3 1302 	umull	r1, r3, r3, r2
 8008566:	095b      	lsrs	r3, r3, #5
 8008568:	2164      	movs	r1, #100	; 0x64
 800856a:	fb01 f303 	mul.w	r3, r1, r3
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	00db      	lsls	r3, r3, #3
 8008572:	3332      	adds	r3, #50	; 0x32
 8008574:	4a65      	ldr	r2, [pc, #404]	; (800870c <UART_SetConfig+0x384>)
 8008576:	fba2 2303 	umull	r2, r3, r2, r3
 800857a:	095b      	lsrs	r3, r3, #5
 800857c:	f003 0207 	and.w	r2, r3, #7
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4442      	add	r2, r8
 8008586:	609a      	str	r2, [r3, #8]
 8008588:	e26f      	b.n	8008a6a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800858a:	f7fe fd47 	bl	800701c <HAL_RCC_GetPCLK1Freq>
 800858e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	461d      	mov	r5, r3
 8008594:	f04f 0600 	mov.w	r6, #0
 8008598:	46a8      	mov	r8, r5
 800859a:	46b1      	mov	r9, r6
 800859c:	eb18 0308 	adds.w	r3, r8, r8
 80085a0:	eb49 0409 	adc.w	r4, r9, r9
 80085a4:	4698      	mov	r8, r3
 80085a6:	46a1      	mov	r9, r4
 80085a8:	eb18 0805 	adds.w	r8, r8, r5
 80085ac:	eb49 0906 	adc.w	r9, r9, r6
 80085b0:	f04f 0100 	mov.w	r1, #0
 80085b4:	f04f 0200 	mov.w	r2, #0
 80085b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80085bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80085c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80085c4:	4688      	mov	r8, r1
 80085c6:	4691      	mov	r9, r2
 80085c8:	eb18 0005 	adds.w	r0, r8, r5
 80085cc:	eb49 0106 	adc.w	r1, r9, r6
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	461d      	mov	r5, r3
 80085d6:	f04f 0600 	mov.w	r6, #0
 80085da:	196b      	adds	r3, r5, r5
 80085dc:	eb46 0406 	adc.w	r4, r6, r6
 80085e0:	461a      	mov	r2, r3
 80085e2:	4623      	mov	r3, r4
 80085e4:	f7f7 fdf0 	bl	80001c8 <__aeabi_uldivmod>
 80085e8:	4603      	mov	r3, r0
 80085ea:	460c      	mov	r4, r1
 80085ec:	461a      	mov	r2, r3
 80085ee:	4b47      	ldr	r3, [pc, #284]	; (800870c <UART_SetConfig+0x384>)
 80085f0:	fba3 2302 	umull	r2, r3, r3, r2
 80085f4:	095b      	lsrs	r3, r3, #5
 80085f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	461d      	mov	r5, r3
 80085fe:	f04f 0600 	mov.w	r6, #0
 8008602:	46a9      	mov	r9, r5
 8008604:	46b2      	mov	sl, r6
 8008606:	eb19 0309 	adds.w	r3, r9, r9
 800860a:	eb4a 040a 	adc.w	r4, sl, sl
 800860e:	4699      	mov	r9, r3
 8008610:	46a2      	mov	sl, r4
 8008612:	eb19 0905 	adds.w	r9, r9, r5
 8008616:	eb4a 0a06 	adc.w	sl, sl, r6
 800861a:	f04f 0100 	mov.w	r1, #0
 800861e:	f04f 0200 	mov.w	r2, #0
 8008622:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008626:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800862a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800862e:	4689      	mov	r9, r1
 8008630:	4692      	mov	sl, r2
 8008632:	eb19 0005 	adds.w	r0, r9, r5
 8008636:	eb4a 0106 	adc.w	r1, sl, r6
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	461d      	mov	r5, r3
 8008640:	f04f 0600 	mov.w	r6, #0
 8008644:	196b      	adds	r3, r5, r5
 8008646:	eb46 0406 	adc.w	r4, r6, r6
 800864a:	461a      	mov	r2, r3
 800864c:	4623      	mov	r3, r4
 800864e:	f7f7 fdbb 	bl	80001c8 <__aeabi_uldivmod>
 8008652:	4603      	mov	r3, r0
 8008654:	460c      	mov	r4, r1
 8008656:	461a      	mov	r2, r3
 8008658:	4b2c      	ldr	r3, [pc, #176]	; (800870c <UART_SetConfig+0x384>)
 800865a:	fba3 1302 	umull	r1, r3, r3, r2
 800865e:	095b      	lsrs	r3, r3, #5
 8008660:	2164      	movs	r1, #100	; 0x64
 8008662:	fb01 f303 	mul.w	r3, r1, r3
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	00db      	lsls	r3, r3, #3
 800866a:	3332      	adds	r3, #50	; 0x32
 800866c:	4a27      	ldr	r2, [pc, #156]	; (800870c <UART_SetConfig+0x384>)
 800866e:	fba2 2303 	umull	r2, r3, r2, r3
 8008672:	095b      	lsrs	r3, r3, #5
 8008674:	005b      	lsls	r3, r3, #1
 8008676:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800867a:	4498      	add	r8, r3
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	461d      	mov	r5, r3
 8008680:	f04f 0600 	mov.w	r6, #0
 8008684:	46a9      	mov	r9, r5
 8008686:	46b2      	mov	sl, r6
 8008688:	eb19 0309 	adds.w	r3, r9, r9
 800868c:	eb4a 040a 	adc.w	r4, sl, sl
 8008690:	4699      	mov	r9, r3
 8008692:	46a2      	mov	sl, r4
 8008694:	eb19 0905 	adds.w	r9, r9, r5
 8008698:	eb4a 0a06 	adc.w	sl, sl, r6
 800869c:	f04f 0100 	mov.w	r1, #0
 80086a0:	f04f 0200 	mov.w	r2, #0
 80086a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086b0:	4689      	mov	r9, r1
 80086b2:	4692      	mov	sl, r2
 80086b4:	eb19 0005 	adds.w	r0, r9, r5
 80086b8:	eb4a 0106 	adc.w	r1, sl, r6
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	461d      	mov	r5, r3
 80086c2:	f04f 0600 	mov.w	r6, #0
 80086c6:	196b      	adds	r3, r5, r5
 80086c8:	eb46 0406 	adc.w	r4, r6, r6
 80086cc:	461a      	mov	r2, r3
 80086ce:	4623      	mov	r3, r4
 80086d0:	f7f7 fd7a 	bl	80001c8 <__aeabi_uldivmod>
 80086d4:	4603      	mov	r3, r0
 80086d6:	460c      	mov	r4, r1
 80086d8:	461a      	mov	r2, r3
 80086da:	4b0c      	ldr	r3, [pc, #48]	; (800870c <UART_SetConfig+0x384>)
 80086dc:	fba3 1302 	umull	r1, r3, r3, r2
 80086e0:	095b      	lsrs	r3, r3, #5
 80086e2:	2164      	movs	r1, #100	; 0x64
 80086e4:	fb01 f303 	mul.w	r3, r1, r3
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	00db      	lsls	r3, r3, #3
 80086ec:	3332      	adds	r3, #50	; 0x32
 80086ee:	4a07      	ldr	r2, [pc, #28]	; (800870c <UART_SetConfig+0x384>)
 80086f0:	fba2 2303 	umull	r2, r3, r2, r3
 80086f4:	095b      	lsrs	r3, r3, #5
 80086f6:	f003 0207 	and.w	r2, r3, #7
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4442      	add	r2, r8
 8008700:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008702:	e1b2      	b.n	8008a6a <UART_SetConfig+0x6e2>
 8008704:	40011000 	.word	0x40011000
 8008708:	40011400 	.word	0x40011400
 800870c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4ad7      	ldr	r2, [pc, #860]	; (8008a74 <UART_SetConfig+0x6ec>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d005      	beq.n	8008726 <UART_SetConfig+0x39e>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4ad6      	ldr	r2, [pc, #856]	; (8008a78 <UART_SetConfig+0x6f0>)
 8008720:	4293      	cmp	r3, r2
 8008722:	f040 80d1 	bne.w	80088c8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008726:	f7fe fc8d 	bl	8007044 <HAL_RCC_GetPCLK2Freq>
 800872a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	469a      	mov	sl, r3
 8008730:	f04f 0b00 	mov.w	fp, #0
 8008734:	46d0      	mov	r8, sl
 8008736:	46d9      	mov	r9, fp
 8008738:	eb18 0308 	adds.w	r3, r8, r8
 800873c:	eb49 0409 	adc.w	r4, r9, r9
 8008740:	4698      	mov	r8, r3
 8008742:	46a1      	mov	r9, r4
 8008744:	eb18 080a 	adds.w	r8, r8, sl
 8008748:	eb49 090b 	adc.w	r9, r9, fp
 800874c:	f04f 0100 	mov.w	r1, #0
 8008750:	f04f 0200 	mov.w	r2, #0
 8008754:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008758:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800875c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008760:	4688      	mov	r8, r1
 8008762:	4691      	mov	r9, r2
 8008764:	eb1a 0508 	adds.w	r5, sl, r8
 8008768:	eb4b 0609 	adc.w	r6, fp, r9
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	4619      	mov	r1, r3
 8008772:	f04f 0200 	mov.w	r2, #0
 8008776:	f04f 0300 	mov.w	r3, #0
 800877a:	f04f 0400 	mov.w	r4, #0
 800877e:	0094      	lsls	r4, r2, #2
 8008780:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008784:	008b      	lsls	r3, r1, #2
 8008786:	461a      	mov	r2, r3
 8008788:	4623      	mov	r3, r4
 800878a:	4628      	mov	r0, r5
 800878c:	4631      	mov	r1, r6
 800878e:	f7f7 fd1b 	bl	80001c8 <__aeabi_uldivmod>
 8008792:	4603      	mov	r3, r0
 8008794:	460c      	mov	r4, r1
 8008796:	461a      	mov	r2, r3
 8008798:	4bb8      	ldr	r3, [pc, #736]	; (8008a7c <UART_SetConfig+0x6f4>)
 800879a:	fba3 2302 	umull	r2, r3, r3, r2
 800879e:	095b      	lsrs	r3, r3, #5
 80087a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	469b      	mov	fp, r3
 80087a8:	f04f 0c00 	mov.w	ip, #0
 80087ac:	46d9      	mov	r9, fp
 80087ae:	46e2      	mov	sl, ip
 80087b0:	eb19 0309 	adds.w	r3, r9, r9
 80087b4:	eb4a 040a 	adc.w	r4, sl, sl
 80087b8:	4699      	mov	r9, r3
 80087ba:	46a2      	mov	sl, r4
 80087bc:	eb19 090b 	adds.w	r9, r9, fp
 80087c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80087c4:	f04f 0100 	mov.w	r1, #0
 80087c8:	f04f 0200 	mov.w	r2, #0
 80087cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80087d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80087d8:	4689      	mov	r9, r1
 80087da:	4692      	mov	sl, r2
 80087dc:	eb1b 0509 	adds.w	r5, fp, r9
 80087e0:	eb4c 060a 	adc.w	r6, ip, sl
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	4619      	mov	r1, r3
 80087ea:	f04f 0200 	mov.w	r2, #0
 80087ee:	f04f 0300 	mov.w	r3, #0
 80087f2:	f04f 0400 	mov.w	r4, #0
 80087f6:	0094      	lsls	r4, r2, #2
 80087f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80087fc:	008b      	lsls	r3, r1, #2
 80087fe:	461a      	mov	r2, r3
 8008800:	4623      	mov	r3, r4
 8008802:	4628      	mov	r0, r5
 8008804:	4631      	mov	r1, r6
 8008806:	f7f7 fcdf 	bl	80001c8 <__aeabi_uldivmod>
 800880a:	4603      	mov	r3, r0
 800880c:	460c      	mov	r4, r1
 800880e:	461a      	mov	r2, r3
 8008810:	4b9a      	ldr	r3, [pc, #616]	; (8008a7c <UART_SetConfig+0x6f4>)
 8008812:	fba3 1302 	umull	r1, r3, r3, r2
 8008816:	095b      	lsrs	r3, r3, #5
 8008818:	2164      	movs	r1, #100	; 0x64
 800881a:	fb01 f303 	mul.w	r3, r1, r3
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	011b      	lsls	r3, r3, #4
 8008822:	3332      	adds	r3, #50	; 0x32
 8008824:	4a95      	ldr	r2, [pc, #596]	; (8008a7c <UART_SetConfig+0x6f4>)
 8008826:	fba2 2303 	umull	r2, r3, r2, r3
 800882a:	095b      	lsrs	r3, r3, #5
 800882c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008830:	4498      	add	r8, r3
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	469b      	mov	fp, r3
 8008836:	f04f 0c00 	mov.w	ip, #0
 800883a:	46d9      	mov	r9, fp
 800883c:	46e2      	mov	sl, ip
 800883e:	eb19 0309 	adds.w	r3, r9, r9
 8008842:	eb4a 040a 	adc.w	r4, sl, sl
 8008846:	4699      	mov	r9, r3
 8008848:	46a2      	mov	sl, r4
 800884a:	eb19 090b 	adds.w	r9, r9, fp
 800884e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008852:	f04f 0100 	mov.w	r1, #0
 8008856:	f04f 0200 	mov.w	r2, #0
 800885a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800885e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008862:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008866:	4689      	mov	r9, r1
 8008868:	4692      	mov	sl, r2
 800886a:	eb1b 0509 	adds.w	r5, fp, r9
 800886e:	eb4c 060a 	adc.w	r6, ip, sl
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	4619      	mov	r1, r3
 8008878:	f04f 0200 	mov.w	r2, #0
 800887c:	f04f 0300 	mov.w	r3, #0
 8008880:	f04f 0400 	mov.w	r4, #0
 8008884:	0094      	lsls	r4, r2, #2
 8008886:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800888a:	008b      	lsls	r3, r1, #2
 800888c:	461a      	mov	r2, r3
 800888e:	4623      	mov	r3, r4
 8008890:	4628      	mov	r0, r5
 8008892:	4631      	mov	r1, r6
 8008894:	f7f7 fc98 	bl	80001c8 <__aeabi_uldivmod>
 8008898:	4603      	mov	r3, r0
 800889a:	460c      	mov	r4, r1
 800889c:	461a      	mov	r2, r3
 800889e:	4b77      	ldr	r3, [pc, #476]	; (8008a7c <UART_SetConfig+0x6f4>)
 80088a0:	fba3 1302 	umull	r1, r3, r3, r2
 80088a4:	095b      	lsrs	r3, r3, #5
 80088a6:	2164      	movs	r1, #100	; 0x64
 80088a8:	fb01 f303 	mul.w	r3, r1, r3
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	011b      	lsls	r3, r3, #4
 80088b0:	3332      	adds	r3, #50	; 0x32
 80088b2:	4a72      	ldr	r2, [pc, #456]	; (8008a7c <UART_SetConfig+0x6f4>)
 80088b4:	fba2 2303 	umull	r2, r3, r2, r3
 80088b8:	095b      	lsrs	r3, r3, #5
 80088ba:	f003 020f 	and.w	r2, r3, #15
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4442      	add	r2, r8
 80088c4:	609a      	str	r2, [r3, #8]
 80088c6:	e0d0      	b.n	8008a6a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80088c8:	f7fe fba8 	bl	800701c <HAL_RCC_GetPCLK1Freq>
 80088cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	469a      	mov	sl, r3
 80088d2:	f04f 0b00 	mov.w	fp, #0
 80088d6:	46d0      	mov	r8, sl
 80088d8:	46d9      	mov	r9, fp
 80088da:	eb18 0308 	adds.w	r3, r8, r8
 80088de:	eb49 0409 	adc.w	r4, r9, r9
 80088e2:	4698      	mov	r8, r3
 80088e4:	46a1      	mov	r9, r4
 80088e6:	eb18 080a 	adds.w	r8, r8, sl
 80088ea:	eb49 090b 	adc.w	r9, r9, fp
 80088ee:	f04f 0100 	mov.w	r1, #0
 80088f2:	f04f 0200 	mov.w	r2, #0
 80088f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80088fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80088fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008902:	4688      	mov	r8, r1
 8008904:	4691      	mov	r9, r2
 8008906:	eb1a 0508 	adds.w	r5, sl, r8
 800890a:	eb4b 0609 	adc.w	r6, fp, r9
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	4619      	mov	r1, r3
 8008914:	f04f 0200 	mov.w	r2, #0
 8008918:	f04f 0300 	mov.w	r3, #0
 800891c:	f04f 0400 	mov.w	r4, #0
 8008920:	0094      	lsls	r4, r2, #2
 8008922:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008926:	008b      	lsls	r3, r1, #2
 8008928:	461a      	mov	r2, r3
 800892a:	4623      	mov	r3, r4
 800892c:	4628      	mov	r0, r5
 800892e:	4631      	mov	r1, r6
 8008930:	f7f7 fc4a 	bl	80001c8 <__aeabi_uldivmod>
 8008934:	4603      	mov	r3, r0
 8008936:	460c      	mov	r4, r1
 8008938:	461a      	mov	r2, r3
 800893a:	4b50      	ldr	r3, [pc, #320]	; (8008a7c <UART_SetConfig+0x6f4>)
 800893c:	fba3 2302 	umull	r2, r3, r3, r2
 8008940:	095b      	lsrs	r3, r3, #5
 8008942:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	469b      	mov	fp, r3
 800894a:	f04f 0c00 	mov.w	ip, #0
 800894e:	46d9      	mov	r9, fp
 8008950:	46e2      	mov	sl, ip
 8008952:	eb19 0309 	adds.w	r3, r9, r9
 8008956:	eb4a 040a 	adc.w	r4, sl, sl
 800895a:	4699      	mov	r9, r3
 800895c:	46a2      	mov	sl, r4
 800895e:	eb19 090b 	adds.w	r9, r9, fp
 8008962:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008966:	f04f 0100 	mov.w	r1, #0
 800896a:	f04f 0200 	mov.w	r2, #0
 800896e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008972:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008976:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800897a:	4689      	mov	r9, r1
 800897c:	4692      	mov	sl, r2
 800897e:	eb1b 0509 	adds.w	r5, fp, r9
 8008982:	eb4c 060a 	adc.w	r6, ip, sl
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	4619      	mov	r1, r3
 800898c:	f04f 0200 	mov.w	r2, #0
 8008990:	f04f 0300 	mov.w	r3, #0
 8008994:	f04f 0400 	mov.w	r4, #0
 8008998:	0094      	lsls	r4, r2, #2
 800899a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800899e:	008b      	lsls	r3, r1, #2
 80089a0:	461a      	mov	r2, r3
 80089a2:	4623      	mov	r3, r4
 80089a4:	4628      	mov	r0, r5
 80089a6:	4631      	mov	r1, r6
 80089a8:	f7f7 fc0e 	bl	80001c8 <__aeabi_uldivmod>
 80089ac:	4603      	mov	r3, r0
 80089ae:	460c      	mov	r4, r1
 80089b0:	461a      	mov	r2, r3
 80089b2:	4b32      	ldr	r3, [pc, #200]	; (8008a7c <UART_SetConfig+0x6f4>)
 80089b4:	fba3 1302 	umull	r1, r3, r3, r2
 80089b8:	095b      	lsrs	r3, r3, #5
 80089ba:	2164      	movs	r1, #100	; 0x64
 80089bc:	fb01 f303 	mul.w	r3, r1, r3
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	011b      	lsls	r3, r3, #4
 80089c4:	3332      	adds	r3, #50	; 0x32
 80089c6:	4a2d      	ldr	r2, [pc, #180]	; (8008a7c <UART_SetConfig+0x6f4>)
 80089c8:	fba2 2303 	umull	r2, r3, r2, r3
 80089cc:	095b      	lsrs	r3, r3, #5
 80089ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089d2:	4498      	add	r8, r3
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	469b      	mov	fp, r3
 80089d8:	f04f 0c00 	mov.w	ip, #0
 80089dc:	46d9      	mov	r9, fp
 80089de:	46e2      	mov	sl, ip
 80089e0:	eb19 0309 	adds.w	r3, r9, r9
 80089e4:	eb4a 040a 	adc.w	r4, sl, sl
 80089e8:	4699      	mov	r9, r3
 80089ea:	46a2      	mov	sl, r4
 80089ec:	eb19 090b 	adds.w	r9, r9, fp
 80089f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80089f4:	f04f 0100 	mov.w	r1, #0
 80089f8:	f04f 0200 	mov.w	r2, #0
 80089fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a08:	4689      	mov	r9, r1
 8008a0a:	4692      	mov	sl, r2
 8008a0c:	eb1b 0509 	adds.w	r5, fp, r9
 8008a10:	eb4c 060a 	adc.w	r6, ip, sl
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	f04f 0200 	mov.w	r2, #0
 8008a1e:	f04f 0300 	mov.w	r3, #0
 8008a22:	f04f 0400 	mov.w	r4, #0
 8008a26:	0094      	lsls	r4, r2, #2
 8008a28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008a2c:	008b      	lsls	r3, r1, #2
 8008a2e:	461a      	mov	r2, r3
 8008a30:	4623      	mov	r3, r4
 8008a32:	4628      	mov	r0, r5
 8008a34:	4631      	mov	r1, r6
 8008a36:	f7f7 fbc7 	bl	80001c8 <__aeabi_uldivmod>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	461a      	mov	r2, r3
 8008a40:	4b0e      	ldr	r3, [pc, #56]	; (8008a7c <UART_SetConfig+0x6f4>)
 8008a42:	fba3 1302 	umull	r1, r3, r3, r2
 8008a46:	095b      	lsrs	r3, r3, #5
 8008a48:	2164      	movs	r1, #100	; 0x64
 8008a4a:	fb01 f303 	mul.w	r3, r1, r3
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	011b      	lsls	r3, r3, #4
 8008a52:	3332      	adds	r3, #50	; 0x32
 8008a54:	4a09      	ldr	r2, [pc, #36]	; (8008a7c <UART_SetConfig+0x6f4>)
 8008a56:	fba2 2303 	umull	r2, r3, r2, r3
 8008a5a:	095b      	lsrs	r3, r3, #5
 8008a5c:	f003 020f 	and.w	r2, r3, #15
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4442      	add	r2, r8
 8008a66:	609a      	str	r2, [r3, #8]
}
 8008a68:	e7ff      	b.n	8008a6a <UART_SetConfig+0x6e2>
 8008a6a:	bf00      	nop
 8008a6c:	3714      	adds	r7, #20
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a74:	40011000 	.word	0x40011000
 8008a78:	40011400 	.word	0x40011400
 8008a7c:	51eb851f 	.word	0x51eb851f

08008a80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a80:	b084      	sub	sp, #16
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	f107 001c 	add.w	r0, r7, #28
 8008a8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d122      	bne.n	8008ade <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d105      	bne.n	8008ad2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f001 fab4 	bl	800a040 <USB_CoreReset>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]
 8008adc:	e01a      	b.n	8008b14 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f001 faa8 	bl	800a040 <USB_CoreReset>
 8008af0:	4603      	mov	r3, r0
 8008af2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d106      	bne.n	8008b08 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	639a      	str	r2, [r3, #56]	; 0x38
 8008b06:	e005      	b.n	8008b14 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d10b      	bne.n	8008b32 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f043 0206 	orr.w	r2, r3, #6
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	f043 0220 	orr.w	r2, r3, #32
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b3e:	b004      	add	sp, #16
 8008b40:	4770      	bx	lr
	...

08008b44 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008b52:	79fb      	ldrb	r3, [r7, #7]
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d165      	bne.n	8008c24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	4a41      	ldr	r2, [pc, #260]	; (8008c60 <USB_SetTurnaroundTime+0x11c>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d906      	bls.n	8008b6e <USB_SetTurnaroundTime+0x2a>
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	4a40      	ldr	r2, [pc, #256]	; (8008c64 <USB_SetTurnaroundTime+0x120>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d802      	bhi.n	8008b6e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008b68:	230f      	movs	r3, #15
 8008b6a:	617b      	str	r3, [r7, #20]
 8008b6c:	e062      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	4a3c      	ldr	r2, [pc, #240]	; (8008c64 <USB_SetTurnaroundTime+0x120>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d906      	bls.n	8008b84 <USB_SetTurnaroundTime+0x40>
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	4a3b      	ldr	r2, [pc, #236]	; (8008c68 <USB_SetTurnaroundTime+0x124>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d802      	bhi.n	8008b84 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008b7e:	230e      	movs	r3, #14
 8008b80:	617b      	str	r3, [r7, #20]
 8008b82:	e057      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	4a38      	ldr	r2, [pc, #224]	; (8008c68 <USB_SetTurnaroundTime+0x124>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d906      	bls.n	8008b9a <USB_SetTurnaroundTime+0x56>
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	4a37      	ldr	r2, [pc, #220]	; (8008c6c <USB_SetTurnaroundTime+0x128>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d802      	bhi.n	8008b9a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008b94:	230d      	movs	r3, #13
 8008b96:	617b      	str	r3, [r7, #20]
 8008b98:	e04c      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	4a33      	ldr	r2, [pc, #204]	; (8008c6c <USB_SetTurnaroundTime+0x128>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d906      	bls.n	8008bb0 <USB_SetTurnaroundTime+0x6c>
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	4a32      	ldr	r2, [pc, #200]	; (8008c70 <USB_SetTurnaroundTime+0x12c>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d802      	bhi.n	8008bb0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008baa:	230c      	movs	r3, #12
 8008bac:	617b      	str	r3, [r7, #20]
 8008bae:	e041      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	4a2f      	ldr	r2, [pc, #188]	; (8008c70 <USB_SetTurnaroundTime+0x12c>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d906      	bls.n	8008bc6 <USB_SetTurnaroundTime+0x82>
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	4a2e      	ldr	r2, [pc, #184]	; (8008c74 <USB_SetTurnaroundTime+0x130>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d802      	bhi.n	8008bc6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008bc0:	230b      	movs	r3, #11
 8008bc2:	617b      	str	r3, [r7, #20]
 8008bc4:	e036      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	4a2a      	ldr	r2, [pc, #168]	; (8008c74 <USB_SetTurnaroundTime+0x130>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d906      	bls.n	8008bdc <USB_SetTurnaroundTime+0x98>
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	4a29      	ldr	r2, [pc, #164]	; (8008c78 <USB_SetTurnaroundTime+0x134>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d802      	bhi.n	8008bdc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008bd6:	230a      	movs	r3, #10
 8008bd8:	617b      	str	r3, [r7, #20]
 8008bda:	e02b      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	4a26      	ldr	r2, [pc, #152]	; (8008c78 <USB_SetTurnaroundTime+0x134>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d906      	bls.n	8008bf2 <USB_SetTurnaroundTime+0xae>
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	4a25      	ldr	r2, [pc, #148]	; (8008c7c <USB_SetTurnaroundTime+0x138>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d802      	bhi.n	8008bf2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008bec:	2309      	movs	r3, #9
 8008bee:	617b      	str	r3, [r7, #20]
 8008bf0:	e020      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	4a21      	ldr	r2, [pc, #132]	; (8008c7c <USB_SetTurnaroundTime+0x138>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d906      	bls.n	8008c08 <USB_SetTurnaroundTime+0xc4>
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	4a20      	ldr	r2, [pc, #128]	; (8008c80 <USB_SetTurnaroundTime+0x13c>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d802      	bhi.n	8008c08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008c02:	2308      	movs	r3, #8
 8008c04:	617b      	str	r3, [r7, #20]
 8008c06:	e015      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	4a1d      	ldr	r2, [pc, #116]	; (8008c80 <USB_SetTurnaroundTime+0x13c>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d906      	bls.n	8008c1e <USB_SetTurnaroundTime+0xda>
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	4a1c      	ldr	r2, [pc, #112]	; (8008c84 <USB_SetTurnaroundTime+0x140>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d802      	bhi.n	8008c1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008c18:	2307      	movs	r3, #7
 8008c1a:	617b      	str	r3, [r7, #20]
 8008c1c:	e00a      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008c1e:	2306      	movs	r3, #6
 8008c20:	617b      	str	r3, [r7, #20]
 8008c22:	e007      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008c24:	79fb      	ldrb	r3, [r7, #7]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d102      	bne.n	8008c30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008c2a:	2309      	movs	r3, #9
 8008c2c:	617b      	str	r3, [r7, #20]
 8008c2e:	e001      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008c30:	2309      	movs	r3, #9
 8008c32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	68da      	ldr	r2, [r3, #12]
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	029b      	lsls	r3, r3, #10
 8008c48:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008c4c:	431a      	orrs	r2, r3
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	371c      	adds	r7, #28
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr
 8008c60:	00d8acbf 	.word	0x00d8acbf
 8008c64:	00e4e1bf 	.word	0x00e4e1bf
 8008c68:	00f423ff 	.word	0x00f423ff
 8008c6c:	0106737f 	.word	0x0106737f
 8008c70:	011a499f 	.word	0x011a499f
 8008c74:	01312cff 	.word	0x01312cff
 8008c78:	014ca43f 	.word	0x014ca43f
 8008c7c:	016e35ff 	.word	0x016e35ff
 8008c80:	01a6ab1f 	.word	0x01a6ab1f
 8008c84:	01e847ff 	.word	0x01e847ff

08008c88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f043 0201 	orr.w	r2, r3, #1
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b083      	sub	sp, #12
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	f023 0201 	bic.w	r2, r3, #1
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ce4:	78fb      	ldrb	r3, [r7, #3]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d106      	bne.n	8008cf8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	60da      	str	r2, [r3, #12]
 8008cf6:	e00b      	b.n	8008d10 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008cf8:	78fb      	ldrb	r3, [r7, #3]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d106      	bne.n	8008d0c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	60da      	str	r2, [r3, #12]
 8008d0a:	e001      	b.n	8008d10 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e003      	b.n	8008d18 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008d10:	2032      	movs	r0, #50	; 0x32
 8008d12:	f7f9 fc67 	bl	80025e4 <HAL_Delay>

  return HAL_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d20:	b084      	sub	sp, #16
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b086      	sub	sp, #24
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	613b      	str	r3, [r7, #16]
 8008d3e:	e009      	b.n	8008d54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	3340      	adds	r3, #64	; 0x40
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	3301      	adds	r3, #1
 8008d52:	613b      	str	r3, [r7, #16]
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	2b0e      	cmp	r3, #14
 8008d58:	d9f2      	bls.n	8008d40 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d11c      	bne.n	8008d9a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d6e:	f043 0302 	orr.w	r3, r3, #2
 8008d72:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d84:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d90:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	639a      	str	r2, [r3, #56]	; 0x38
 8008d98:	e00b      	b.n	8008db2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008daa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008db8:	461a      	mov	r2, r3
 8008dba:	2300      	movs	r3, #0
 8008dbc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dcc:	461a      	mov	r2, r3
 8008dce:	680b      	ldr	r3, [r1, #0]
 8008dd0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d10c      	bne.n	8008df2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d104      	bne.n	8008de8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008dde:	2100      	movs	r1, #0
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f949 	bl	8009078 <USB_SetDevSpeed>
 8008de6:	e008      	b.n	8008dfa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008de8:	2101      	movs	r1, #1
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f944 	bl	8009078 <USB_SetDevSpeed>
 8008df0:	e003      	b.n	8008dfa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008df2:	2103      	movs	r1, #3
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f93f 	bl	8009078 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008dfa:	2110      	movs	r1, #16
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f8f3 	bl	8008fe8 <USB_FlushTxFifo>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d001      	beq.n	8008e0c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f911 	bl	8009034 <USB_FlushRxFifo>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e22:	461a      	mov	r2, r3
 8008e24:	2300      	movs	r3, #0
 8008e26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2e:	461a      	mov	r2, r3
 8008e30:	2300      	movs	r3, #0
 8008e32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e40:	2300      	movs	r3, #0
 8008e42:	613b      	str	r3, [r7, #16]
 8008e44:	e043      	b.n	8008ece <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	015a      	lsls	r2, r3, #5
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e5c:	d118      	bne.n	8008e90 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10a      	bne.n	8008e7a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	015a      	lsls	r2, r3, #5
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e70:	461a      	mov	r2, r3
 8008e72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e76:	6013      	str	r3, [r2, #0]
 8008e78:	e013      	b.n	8008ea2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	015a      	lsls	r2, r3, #5
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e86:	461a      	mov	r2, r3
 8008e88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e8c:	6013      	str	r3, [r2, #0]
 8008e8e:	e008      	b.n	8008ea2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	015a      	lsls	r2, r3, #5
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	015a      	lsls	r2, r3, #5
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eae:	461a      	mov	r2, r3
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ec6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	613b      	str	r3, [r7, #16]
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d3b7      	bcc.n	8008e46 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	613b      	str	r3, [r7, #16]
 8008eda:	e043      	b.n	8008f64 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008eee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ef2:	d118      	bne.n	8008f26 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10a      	bne.n	8008f10 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	015a      	lsls	r2, r3, #5
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	4413      	add	r3, r2
 8008f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f06:	461a      	mov	r2, r3
 8008f08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f0c:	6013      	str	r3, [r2, #0]
 8008f0e:	e013      	b.n	8008f38 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	015a      	lsls	r2, r3, #5
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	4413      	add	r3, r2
 8008f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f22:	6013      	str	r3, [r2, #0]
 8008f24:	e008      	b.n	8008f38 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	015a      	lsls	r2, r3, #5
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f32:	461a      	mov	r2, r3
 8008f34:	2300      	movs	r3, #0
 8008f36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f44:	461a      	mov	r2, r3
 8008f46:	2300      	movs	r3, #0
 8008f48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f56:	461a      	mov	r2, r3
 8008f58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	3301      	adds	r3, #1
 8008f62:	613b      	str	r3, [r7, #16]
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d3b7      	bcc.n	8008edc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d105      	bne.n	8008fa0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	f043 0210 	orr.w	r2, r3, #16
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	699a      	ldr	r2, [r3, #24]
 8008fa4:	4b0f      	ldr	r3, [pc, #60]	; (8008fe4 <USB_DevInit+0x2c4>)
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d005      	beq.n	8008fbe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	f043 0208 	orr.w	r2, r3, #8
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d107      	bne.n	8008fd4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fcc:	f043 0304 	orr.w	r3, r3, #4
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3718      	adds	r7, #24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fe0:	b004      	add	sp, #16
 8008fe2:	4770      	bx	lr
 8008fe4:	803c3800 	.word	0x803c3800

08008fe8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	019b      	lsls	r3, r3, #6
 8008ffa:	f043 0220 	orr.w	r2, r3, #32
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	3301      	adds	r3, #1
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	4a09      	ldr	r2, [pc, #36]	; (8009030 <USB_FlushTxFifo+0x48>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d901      	bls.n	8009014 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	e006      	b.n	8009022 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	f003 0320 	and.w	r3, r3, #32
 800901c:	2b20      	cmp	r3, #32
 800901e:	d0f0      	beq.n	8009002 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3714      	adds	r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	00030d40 	.word	0x00030d40

08009034 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800903c:	2300      	movs	r3, #0
 800903e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2210      	movs	r2, #16
 8009044:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	3301      	adds	r3, #1
 800904a:	60fb      	str	r3, [r7, #12]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4a09      	ldr	r2, [pc, #36]	; (8009074 <USB_FlushRxFifo+0x40>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d901      	bls.n	8009058 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009054:	2303      	movs	r3, #3
 8009056:	e006      	b.n	8009066 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	f003 0310 	and.w	r3, r3, #16
 8009060:	2b10      	cmp	r3, #16
 8009062:	d0f0      	beq.n	8009046 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	00030d40 	.word	0x00030d40

08009078 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	460b      	mov	r3, r1
 8009082:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	78fb      	ldrb	r3, [r7, #3]
 8009092:	68f9      	ldr	r1, [r7, #12]
 8009094:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009098:	4313      	orrs	r3, r2
 800909a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3714      	adds	r7, #20
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr

080090aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80090aa:	b480      	push	{r7}
 80090ac:	b087      	sub	sp, #28
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f003 0306 	and.w	r3, r3, #6
 80090c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d102      	bne.n	80090d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80090ca:	2300      	movs	r3, #0
 80090cc:	75fb      	strb	r3, [r7, #23]
 80090ce:	e00a      	b.n	80090e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d002      	beq.n	80090dc <USB_GetDevSpeed+0x32>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2b06      	cmp	r3, #6
 80090da:	d102      	bne.n	80090e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80090dc:	2302      	movs	r3, #2
 80090de:	75fb      	strb	r3, [r7, #23]
 80090e0:	e001      	b.n	80090e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80090e2:	230f      	movs	r3, #15
 80090e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	371c      	adds	r7, #28
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	785b      	ldrb	r3, [r3, #1]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d13a      	bne.n	8009186 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009116:	69da      	ldr	r2, [r3, #28]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	f003 030f 	and.w	r3, r3, #15
 8009120:	2101      	movs	r1, #1
 8009122:	fa01 f303 	lsl.w	r3, r1, r3
 8009126:	b29b      	uxth	r3, r3
 8009128:	68f9      	ldr	r1, [r7, #12]
 800912a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800912e:	4313      	orrs	r3, r2
 8009130:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	4413      	add	r3, r2
 800913a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009144:	2b00      	cmp	r3, #0
 8009146:	d155      	bne.n	80091f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	015a      	lsls	r2, r3, #5
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4413      	add	r3, r2
 8009150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	78db      	ldrb	r3, [r3, #3]
 8009162:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009164:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	059b      	lsls	r3, r3, #22
 800916a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800916c:	4313      	orrs	r3, r2
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	0151      	lsls	r1, r2, #5
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	440a      	add	r2, r1
 8009176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800917a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800917e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009182:	6013      	str	r3, [r2, #0]
 8009184:	e036      	b.n	80091f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800918c:	69da      	ldr	r2, [r3, #28]
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	f003 030f 	and.w	r3, r3, #15
 8009196:	2101      	movs	r1, #1
 8009198:	fa01 f303 	lsl.w	r3, r1, r3
 800919c:	041b      	lsls	r3, r3, #16
 800919e:	68f9      	ldr	r1, [r7, #12]
 80091a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091a4:	4313      	orrs	r3, r2
 80091a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	015a      	lsls	r2, r3, #5
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d11a      	bne.n	80091f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	015a      	lsls	r2, r3, #5
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	4413      	add	r3, r2
 80091c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	78db      	ldrb	r3, [r3, #3]
 80091d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091da:	430b      	orrs	r3, r1
 80091dc:	4313      	orrs	r3, r2
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	0151      	lsls	r1, r2, #5
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	440a      	add	r2, r1
 80091e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
	...

08009204 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	785b      	ldrb	r3, [r3, #1]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d161      	bne.n	80092e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	015a      	lsls	r2, r3, #5
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	4413      	add	r3, r2
 8009228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009236:	d11f      	bne.n	8009278 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	4413      	add	r3, r2
 8009240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	0151      	lsls	r1, r2, #5
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	440a      	add	r2, r1
 800924e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009252:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009256:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	4413      	add	r3, r2
 8009260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	0151      	lsls	r1, r2, #5
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	440a      	add	r2, r1
 800926e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009272:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009276:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800927e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	f003 030f 	and.w	r3, r3, #15
 8009288:	2101      	movs	r1, #1
 800928a:	fa01 f303 	lsl.w	r3, r1, r3
 800928e:	b29b      	uxth	r3, r3
 8009290:	43db      	mvns	r3, r3
 8009292:	68f9      	ldr	r1, [r7, #12]
 8009294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009298:	4013      	ands	r3, r2
 800929a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092a2:	69da      	ldr	r2, [r3, #28]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	f003 030f 	and.w	r3, r3, #15
 80092ac:	2101      	movs	r1, #1
 80092ae:	fa01 f303 	lsl.w	r3, r1, r3
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	43db      	mvns	r3, r3
 80092b6:	68f9      	ldr	r1, [r7, #12]
 80092b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092bc:	4013      	ands	r3, r2
 80092be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	015a      	lsls	r2, r3, #5
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	4413      	add	r3, r2
 80092c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	0159      	lsls	r1, r3, #5
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	440b      	add	r3, r1
 80092d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092da:	4619      	mov	r1, r3
 80092dc:	4b35      	ldr	r3, [pc, #212]	; (80093b4 <USB_DeactivateEndpoint+0x1b0>)
 80092de:	4013      	ands	r3, r2
 80092e0:	600b      	str	r3, [r1, #0]
 80092e2:	e060      	b.n	80093a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	015a      	lsls	r2, r3, #5
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092fa:	d11f      	bne.n	800933c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	015a      	lsls	r2, r3, #5
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	4413      	add	r3, r2
 8009304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	0151      	lsls	r1, r2, #5
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	440a      	add	r2, r1
 8009312:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009316:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800931a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	015a      	lsls	r2, r3, #5
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	4413      	add	r3, r2
 8009324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	0151      	lsls	r1, r2, #5
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	440a      	add	r2, r1
 8009332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009336:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800933a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	f003 030f 	and.w	r3, r3, #15
 800934c:	2101      	movs	r1, #1
 800934e:	fa01 f303 	lsl.w	r3, r1, r3
 8009352:	041b      	lsls	r3, r3, #16
 8009354:	43db      	mvns	r3, r3
 8009356:	68f9      	ldr	r1, [r7, #12]
 8009358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800935c:	4013      	ands	r3, r2
 800935e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009366:	69da      	ldr	r2, [r3, #28]
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	f003 030f 	and.w	r3, r3, #15
 8009370:	2101      	movs	r1, #1
 8009372:	fa01 f303 	lsl.w	r3, r1, r3
 8009376:	041b      	lsls	r3, r3, #16
 8009378:	43db      	mvns	r3, r3
 800937a:	68f9      	ldr	r1, [r7, #12]
 800937c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009380:	4013      	ands	r3, r2
 8009382:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	015a      	lsls	r2, r3, #5
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	4413      	add	r3, r2
 800938c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	0159      	lsls	r1, r3, #5
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	440b      	add	r3, r1
 800939a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800939e:	4619      	mov	r1, r3
 80093a0:	4b05      	ldr	r3, [pc, #20]	; (80093b8 <USB_DeactivateEndpoint+0x1b4>)
 80093a2:	4013      	ands	r3, r2
 80093a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr
 80093b4:	ec337800 	.word	0xec337800
 80093b8:	eff37800 	.word	0xeff37800

080093bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b08a      	sub	sp, #40	; 0x28
 80093c0:	af02      	add	r7, sp, #8
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	4613      	mov	r3, r2
 80093c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	785b      	ldrb	r3, [r3, #1]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	f040 815c 	bne.w	8009696 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d132      	bne.n	800944c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	015a      	lsls	r2, r3, #5
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	4413      	add	r3, r2
 80093ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	69ba      	ldr	r2, [r7, #24]
 80093f6:	0151      	lsls	r1, r2, #5
 80093f8:	69fa      	ldr	r2, [r7, #28]
 80093fa:	440a      	add	r2, r1
 80093fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009400:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009404:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009408:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	015a      	lsls	r2, r3, #5
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	4413      	add	r3, r2
 8009412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	69ba      	ldr	r2, [r7, #24]
 800941a:	0151      	lsls	r1, r2, #5
 800941c:	69fa      	ldr	r2, [r7, #28]
 800941e:	440a      	add	r2, r1
 8009420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009424:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009428:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	015a      	lsls	r2, r3, #5
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	4413      	add	r3, r2
 8009432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	69ba      	ldr	r2, [r7, #24]
 800943a:	0151      	lsls	r1, r2, #5
 800943c:	69fa      	ldr	r2, [r7, #28]
 800943e:	440a      	add	r2, r1
 8009440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009444:	0cdb      	lsrs	r3, r3, #19
 8009446:	04db      	lsls	r3, r3, #19
 8009448:	6113      	str	r3, [r2, #16]
 800944a:	e074      	b.n	8009536 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	015a      	lsls	r2, r3, #5
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	4413      	add	r3, r2
 8009454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	69ba      	ldr	r2, [r7, #24]
 800945c:	0151      	lsls	r1, r2, #5
 800945e:	69fa      	ldr	r2, [r7, #28]
 8009460:	440a      	add	r2, r1
 8009462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009466:	0cdb      	lsrs	r3, r3, #19
 8009468:	04db      	lsls	r3, r3, #19
 800946a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	015a      	lsls	r2, r3, #5
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	4413      	add	r3, r2
 8009474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	69ba      	ldr	r2, [r7, #24]
 800947c:	0151      	lsls	r1, r2, #5
 800947e:	69fa      	ldr	r2, [r7, #28]
 8009480:	440a      	add	r2, r1
 8009482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009486:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800948a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800948e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	015a      	lsls	r2, r3, #5
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	4413      	add	r3, r2
 8009498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800949c:	691a      	ldr	r2, [r3, #16]
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	6959      	ldr	r1, [r3, #20]
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	440b      	add	r3, r1
 80094a8:	1e59      	subs	r1, r3, #1
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80094b2:	04d9      	lsls	r1, r3, #19
 80094b4:	4b9d      	ldr	r3, [pc, #628]	; (800972c <USB_EPStartXfer+0x370>)
 80094b6:	400b      	ands	r3, r1
 80094b8:	69b9      	ldr	r1, [r7, #24]
 80094ba:	0148      	lsls	r0, r1, #5
 80094bc:	69f9      	ldr	r1, [r7, #28]
 80094be:	4401      	add	r1, r0
 80094c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094c4:	4313      	orrs	r3, r2
 80094c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d4:	691a      	ldr	r2, [r3, #16]
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	695b      	ldr	r3, [r3, #20]
 80094da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094de:	69b9      	ldr	r1, [r7, #24]
 80094e0:	0148      	lsls	r0, r1, #5
 80094e2:	69f9      	ldr	r1, [r7, #28]
 80094e4:	4401      	add	r1, r0
 80094e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094ea:	4313      	orrs	r3, r2
 80094ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	78db      	ldrb	r3, [r3, #3]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d11f      	bne.n	8009536 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	015a      	lsls	r2, r3, #5
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	4413      	add	r3, r2
 80094fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	69ba      	ldr	r2, [r7, #24]
 8009506:	0151      	lsls	r1, r2, #5
 8009508:	69fa      	ldr	r2, [r7, #28]
 800950a:	440a      	add	r2, r1
 800950c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009510:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009514:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	015a      	lsls	r2, r3, #5
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	4413      	add	r3, r2
 800951e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	69ba      	ldr	r2, [r7, #24]
 8009526:	0151      	lsls	r1, r2, #5
 8009528:	69fa      	ldr	r2, [r7, #28]
 800952a:	440a      	add	r2, r1
 800952c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009530:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009534:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009536:	79fb      	ldrb	r3, [r7, #7]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d14b      	bne.n	80095d4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d009      	beq.n	8009558 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	4413      	add	r3, r2
 800954c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009550:	461a      	mov	r2, r3
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	78db      	ldrb	r3, [r3, #3]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d128      	bne.n	80095b2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800956c:	2b00      	cmp	r3, #0
 800956e:	d110      	bne.n	8009592 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	015a      	lsls	r2, r3, #5
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	4413      	add	r3, r2
 8009578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	69ba      	ldr	r2, [r7, #24]
 8009580:	0151      	lsls	r1, r2, #5
 8009582:	69fa      	ldr	r2, [r7, #28]
 8009584:	440a      	add	r2, r1
 8009586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800958a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800958e:	6013      	str	r3, [r2, #0]
 8009590:	e00f      	b.n	80095b2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	015a      	lsls	r2, r3, #5
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	4413      	add	r3, r2
 800959a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	69ba      	ldr	r2, [r7, #24]
 80095a2:	0151      	lsls	r1, r2, #5
 80095a4:	69fa      	ldr	r2, [r7, #28]
 80095a6:	440a      	add	r2, r1
 80095a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	015a      	lsls	r2, r3, #5
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	4413      	add	r3, r2
 80095ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	69ba      	ldr	r2, [r7, #24]
 80095c2:	0151      	lsls	r1, r2, #5
 80095c4:	69fa      	ldr	r2, [r7, #28]
 80095c6:	440a      	add	r2, r1
 80095c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095d0:	6013      	str	r3, [r2, #0]
 80095d2:	e12f      	b.n	8009834 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	015a      	lsls	r2, r3, #5
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	4413      	add	r3, r2
 80095dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	69ba      	ldr	r2, [r7, #24]
 80095e4:	0151      	lsls	r1, r2, #5
 80095e6:	69fa      	ldr	r2, [r7, #28]
 80095e8:	440a      	add	r2, r1
 80095ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	78db      	ldrb	r3, [r3, #3]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d015      	beq.n	8009628 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	695b      	ldr	r3, [r3, #20]
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 8117 	beq.w	8009834 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800960c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	f003 030f 	and.w	r3, r3, #15
 8009616:	2101      	movs	r1, #1
 8009618:	fa01 f303 	lsl.w	r3, r1, r3
 800961c:	69f9      	ldr	r1, [r7, #28]
 800961e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009622:	4313      	orrs	r3, r2
 8009624:	634b      	str	r3, [r1, #52]	; 0x34
 8009626:	e105      	b.n	8009834 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009634:	2b00      	cmp	r3, #0
 8009636:	d110      	bne.n	800965a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	015a      	lsls	r2, r3, #5
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	4413      	add	r3, r2
 8009640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	69ba      	ldr	r2, [r7, #24]
 8009648:	0151      	lsls	r1, r2, #5
 800964a:	69fa      	ldr	r2, [r7, #28]
 800964c:	440a      	add	r2, r1
 800964e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009652:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009656:	6013      	str	r3, [r2, #0]
 8009658:	e00f      	b.n	800967a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	015a      	lsls	r2, r3, #5
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	4413      	add	r3, r2
 8009662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	69ba      	ldr	r2, [r7, #24]
 800966a:	0151      	lsls	r1, r2, #5
 800966c:	69fa      	ldr	r2, [r7, #28]
 800966e:	440a      	add	r2, r1
 8009670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009678:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	68d9      	ldr	r1, [r3, #12]
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	781a      	ldrb	r2, [r3, #0]
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	b298      	uxth	r0, r3
 8009688:	79fb      	ldrb	r3, [r7, #7]
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	4603      	mov	r3, r0
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f000 fa2b 	bl	8009aea <USB_WritePacket>
 8009694:	e0ce      	b.n	8009834 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	4413      	add	r3, r2
 800969e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	69ba      	ldr	r2, [r7, #24]
 80096a6:	0151      	lsls	r1, r2, #5
 80096a8:	69fa      	ldr	r2, [r7, #28]
 80096aa:	440a      	add	r2, r1
 80096ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096b0:	0cdb      	lsrs	r3, r3, #19
 80096b2:	04db      	lsls	r3, r3, #19
 80096b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	015a      	lsls	r2, r3, #5
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	4413      	add	r3, r2
 80096be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	69ba      	ldr	r2, [r7, #24]
 80096c6:	0151      	lsls	r1, r2, #5
 80096c8:	69fa      	ldr	r2, [r7, #28]
 80096ca:	440a      	add	r2, r1
 80096cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80096d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d126      	bne.n	8009730 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	015a      	lsls	r2, r3, #5
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	4413      	add	r3, r2
 80096ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ee:	691a      	ldr	r2, [r3, #16]
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096f8:	69b9      	ldr	r1, [r7, #24]
 80096fa:	0148      	lsls	r0, r1, #5
 80096fc:	69f9      	ldr	r1, [r7, #28]
 80096fe:	4401      	add	r1, r0
 8009700:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009704:	4313      	orrs	r3, r2
 8009706:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	015a      	lsls	r2, r3, #5
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	4413      	add	r3, r2
 8009710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	69ba      	ldr	r2, [r7, #24]
 8009718:	0151      	lsls	r1, r2, #5
 800971a:	69fa      	ldr	r2, [r7, #28]
 800971c:	440a      	add	r2, r1
 800971e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009722:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009726:	6113      	str	r3, [r2, #16]
 8009728:	e036      	b.n	8009798 <USB_EPStartXfer+0x3dc>
 800972a:	bf00      	nop
 800972c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	695a      	ldr	r2, [r3, #20]
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	4413      	add	r3, r2
 800973a:	1e5a      	subs	r2, r3, #1
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	fbb2 f3f3 	udiv	r3, r2, r3
 8009744:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	015a      	lsls	r2, r3, #5
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	4413      	add	r3, r2
 800974e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009752:	691a      	ldr	r2, [r3, #16]
 8009754:	8afb      	ldrh	r3, [r7, #22]
 8009756:	04d9      	lsls	r1, r3, #19
 8009758:	4b39      	ldr	r3, [pc, #228]	; (8009840 <USB_EPStartXfer+0x484>)
 800975a:	400b      	ands	r3, r1
 800975c:	69b9      	ldr	r1, [r7, #24]
 800975e:	0148      	lsls	r0, r1, #5
 8009760:	69f9      	ldr	r1, [r7, #28]
 8009762:	4401      	add	r1, r0
 8009764:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009768:	4313      	orrs	r3, r2
 800976a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	015a      	lsls	r2, r3, #5
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	4413      	add	r3, r2
 8009774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009778:	691a      	ldr	r2, [r3, #16]
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	8af9      	ldrh	r1, [r7, #22]
 8009780:	fb01 f303 	mul.w	r3, r1, r3
 8009784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009788:	69b9      	ldr	r1, [r7, #24]
 800978a:	0148      	lsls	r0, r1, #5
 800978c:	69f9      	ldr	r1, [r7, #28]
 800978e:	4401      	add	r1, r0
 8009790:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009794:	4313      	orrs	r3, r2
 8009796:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009798:	79fb      	ldrb	r3, [r7, #7]
 800979a:	2b01      	cmp	r3, #1
 800979c:	d10d      	bne.n	80097ba <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d009      	beq.n	80097ba <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	68d9      	ldr	r1, [r3, #12]
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	015a      	lsls	r2, r3, #5
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	4413      	add	r3, r2
 80097b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b6:	460a      	mov	r2, r1
 80097b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	78db      	ldrb	r3, [r3, #3]
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d128      	bne.n	8009814 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d110      	bne.n	80097f4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	015a      	lsls	r2, r3, #5
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	4413      	add	r3, r2
 80097da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	69ba      	ldr	r2, [r7, #24]
 80097e2:	0151      	lsls	r1, r2, #5
 80097e4:	69fa      	ldr	r2, [r7, #28]
 80097e6:	440a      	add	r2, r1
 80097e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	e00f      	b.n	8009814 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	015a      	lsls	r2, r3, #5
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	4413      	add	r3, r2
 80097fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	69ba      	ldr	r2, [r7, #24]
 8009804:	0151      	lsls	r1, r2, #5
 8009806:	69fa      	ldr	r2, [r7, #28]
 8009808:	440a      	add	r2, r1
 800980a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800980e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009812:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	015a      	lsls	r2, r3, #5
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	4413      	add	r3, r2
 800981c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	69ba      	ldr	r2, [r7, #24]
 8009824:	0151      	lsls	r1, r2, #5
 8009826:	69fa      	ldr	r2, [r7, #28]
 8009828:	440a      	add	r2, r1
 800982a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800982e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009832:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3720      	adds	r7, #32
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	1ff80000 	.word	0x1ff80000

08009844 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009844:	b480      	push	{r7}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	4613      	mov	r3, r2
 8009850:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	785b      	ldrb	r3, [r3, #1]
 8009860:	2b01      	cmp	r3, #1
 8009862:	f040 80cd 	bne.w	8009a00 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	695b      	ldr	r3, [r3, #20]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d132      	bne.n	80098d4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	015a      	lsls	r2, r3, #5
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	4413      	add	r3, r2
 8009876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	0151      	lsls	r1, r2, #5
 8009880:	697a      	ldr	r2, [r7, #20]
 8009882:	440a      	add	r2, r1
 8009884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009888:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800988c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009890:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	4413      	add	r3, r2
 800989a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	0151      	lsls	r1, r2, #5
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	440a      	add	r2, r1
 80098a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	015a      	lsls	r2, r3, #5
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	4413      	add	r3, r2
 80098ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	0151      	lsls	r1, r2, #5
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	440a      	add	r2, r1
 80098c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098cc:	0cdb      	lsrs	r3, r3, #19
 80098ce:	04db      	lsls	r3, r3, #19
 80098d0:	6113      	str	r3, [r2, #16]
 80098d2:	e04e      	b.n	8009972 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	0151      	lsls	r1, r2, #5
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	440a      	add	r2, r1
 80098ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098ee:	0cdb      	lsrs	r3, r3, #19
 80098f0:	04db      	lsls	r3, r3, #19
 80098f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	015a      	lsls	r2, r3, #5
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	4413      	add	r3, r2
 80098fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	0151      	lsls	r1, r2, #5
 8009906:	697a      	ldr	r2, [r7, #20]
 8009908:	440a      	add	r2, r1
 800990a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800990e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009912:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009916:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	695a      	ldr	r2, [r3, #20]
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	429a      	cmp	r2, r3
 8009922:	d903      	bls.n	800992c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	689a      	ldr	r2, [r3, #8]
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	015a      	lsls	r2, r3, #5
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	4413      	add	r3, r2
 8009934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	693a      	ldr	r2, [r7, #16]
 800993c:	0151      	lsls	r1, r2, #5
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	440a      	add	r2, r1
 8009942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009946:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800994a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	015a      	lsls	r2, r3, #5
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	4413      	add	r3, r2
 8009954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009958:	691a      	ldr	r2, [r3, #16]
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009962:	6939      	ldr	r1, [r7, #16]
 8009964:	0148      	lsls	r0, r1, #5
 8009966:	6979      	ldr	r1, [r7, #20]
 8009968:	4401      	add	r1, r0
 800996a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800996e:	4313      	orrs	r3, r2
 8009970:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009972:	79fb      	ldrb	r3, [r7, #7]
 8009974:	2b01      	cmp	r3, #1
 8009976:	d11e      	bne.n	80099b6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d009      	beq.n	8009994 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	015a      	lsls	r2, r3, #5
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	4413      	add	r3, r2
 8009988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800998c:	461a      	mov	r2, r3
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	4413      	add	r3, r2
 800999c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	693a      	ldr	r2, [r7, #16]
 80099a4:	0151      	lsls	r1, r2, #5
 80099a6:	697a      	ldr	r2, [r7, #20]
 80099a8:	440a      	add	r2, r1
 80099aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099b2:	6013      	str	r3, [r2, #0]
 80099b4:	e092      	b.n	8009adc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	015a      	lsls	r2, r3, #5
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	4413      	add	r3, r2
 80099be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	693a      	ldr	r2, [r7, #16]
 80099c6:	0151      	lsls	r1, r2, #5
 80099c8:	697a      	ldr	r2, [r7, #20]
 80099ca:	440a      	add	r2, r1
 80099cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099d4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d07e      	beq.n	8009adc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	f003 030f 	and.w	r3, r3, #15
 80099ee:	2101      	movs	r1, #1
 80099f0:	fa01 f303 	lsl.w	r3, r1, r3
 80099f4:	6979      	ldr	r1, [r7, #20]
 80099f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099fa:	4313      	orrs	r3, r2
 80099fc:	634b      	str	r3, [r1, #52]	; 0x34
 80099fe:	e06d      	b.n	8009adc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	015a      	lsls	r2, r3, #5
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	0151      	lsls	r1, r2, #5
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	440a      	add	r2, r1
 8009a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a1a:	0cdb      	lsrs	r3, r3, #19
 8009a1c:	04db      	lsls	r3, r3, #19
 8009a1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	015a      	lsls	r2, r3, #5
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	4413      	add	r3, r2
 8009a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	693a      	ldr	r2, [r7, #16]
 8009a30:	0151      	lsls	r1, r2, #5
 8009a32:	697a      	ldr	r2, [r7, #20]
 8009a34:	440a      	add	r2, r1
 8009a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a42:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	695b      	ldr	r3, [r3, #20]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d003      	beq.n	8009a54 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	689a      	ldr	r2, [r3, #8]
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	015a      	lsls	r2, r3, #5
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	693a      	ldr	r2, [r7, #16]
 8009a64:	0151      	lsls	r1, r2, #5
 8009a66:	697a      	ldr	r2, [r7, #20]
 8009a68:	440a      	add	r2, r1
 8009a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	015a      	lsls	r2, r3, #5
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a80:	691a      	ldr	r2, [r3, #16]
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a8a:	6939      	ldr	r1, [r7, #16]
 8009a8c:	0148      	lsls	r0, r1, #5
 8009a8e:	6979      	ldr	r1, [r7, #20]
 8009a90:	4401      	add	r1, r0
 8009a92:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a96:	4313      	orrs	r3, r2
 8009a98:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009a9a:	79fb      	ldrb	r3, [r7, #7]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d10d      	bne.n	8009abc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d009      	beq.n	8009abc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	68d9      	ldr	r1, [r3, #12]
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	015a      	lsls	r2, r3, #5
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab8:	460a      	mov	r2, r1
 8009aba:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	015a      	lsls	r2, r3, #5
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	0151      	lsls	r1, r2, #5
 8009ace:	697a      	ldr	r2, [r7, #20]
 8009ad0:	440a      	add	r2, r1
 8009ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ad6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ada:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	371c      	adds	r7, #28
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr

08009aea <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009aea:	b480      	push	{r7}
 8009aec:	b089      	sub	sp, #36	; 0x24
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	60f8      	str	r0, [r7, #12]
 8009af2:	60b9      	str	r1, [r7, #8]
 8009af4:	4611      	mov	r1, r2
 8009af6:	461a      	mov	r2, r3
 8009af8:	460b      	mov	r3, r1
 8009afa:	71fb      	strb	r3, [r7, #7]
 8009afc:	4613      	mov	r3, r2
 8009afe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009b08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d11a      	bne.n	8009b46 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009b10:	88bb      	ldrh	r3, [r7, #4]
 8009b12:	3303      	adds	r3, #3
 8009b14:	089b      	lsrs	r3, r3, #2
 8009b16:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009b18:	2300      	movs	r3, #0
 8009b1a:	61bb      	str	r3, [r7, #24]
 8009b1c:	e00f      	b.n	8009b3e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009b1e:	79fb      	ldrb	r3, [r7, #7]
 8009b20:	031a      	lsls	r2, r3, #12
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	4413      	add	r3, r2
 8009b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	3304      	adds	r3, #4
 8009b36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	61bb      	str	r3, [r7, #24]
 8009b3e:	69ba      	ldr	r2, [r7, #24]
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d3eb      	bcc.n	8009b1e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3724      	adds	r7, #36	; 0x24
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b089      	sub	sp, #36	; 0x24
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009b6a:	88fb      	ldrh	r3, [r7, #6]
 8009b6c:	3303      	adds	r3, #3
 8009b6e:	089b      	lsrs	r3, r3, #2
 8009b70:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009b72:	2300      	movs	r3, #0
 8009b74:	61bb      	str	r3, [r7, #24]
 8009b76:	e00b      	b.n	8009b90 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	601a      	str	r2, [r3, #0]
    pDest++;
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	3304      	adds	r3, #4
 8009b88:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	61bb      	str	r3, [r7, #24]
 8009b90:	69ba      	ldr	r2, [r7, #24]
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d3ef      	bcc.n	8009b78 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009b98:	69fb      	ldr	r3, [r7, #28]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3724      	adds	r7, #36	; 0x24
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b085      	sub	sp, #20
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	785b      	ldrb	r3, [r3, #1]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d12c      	bne.n	8009c1c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	015a      	lsls	r2, r3, #5
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	4413      	add	r3, r2
 8009bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	db12      	blt.n	8009bfa <USB_EPSetStall+0x54>
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00f      	beq.n	8009bfa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	015a      	lsls	r2, r3, #5
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	4413      	add	r3, r2
 8009be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	0151      	lsls	r1, r2, #5
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	440a      	add	r2, r1
 8009bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bf4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009bf8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	015a      	lsls	r2, r3, #5
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	4413      	add	r3, r2
 8009c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68ba      	ldr	r2, [r7, #8]
 8009c0a:	0151      	lsls	r1, r2, #5
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	440a      	add	r2, r1
 8009c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c18:	6013      	str	r3, [r2, #0]
 8009c1a:	e02b      	b.n	8009c74 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	015a      	lsls	r2, r3, #5
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	4413      	add	r3, r2
 8009c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	db12      	blt.n	8009c54 <USB_EPSetStall+0xae>
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00f      	beq.n	8009c54 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	015a      	lsls	r2, r3, #5
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	68ba      	ldr	r2, [r7, #8]
 8009c44:	0151      	lsls	r1, r2, #5
 8009c46:	68fa      	ldr	r2, [r7, #12]
 8009c48:	440a      	add	r2, r1
 8009c4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c52:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	015a      	lsls	r2, r3, #5
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	0151      	lsls	r1, r2, #5
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	440a      	add	r2, r1
 8009c6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3714      	adds	r7, #20
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr

08009c82 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c82:	b480      	push	{r7}
 8009c84:	b085      	sub	sp, #20
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
 8009c8a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	785b      	ldrb	r3, [r3, #1]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d128      	bne.n	8009cf0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	015a      	lsls	r2, r3, #5
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	4413      	add	r3, r2
 8009ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68ba      	ldr	r2, [r7, #8]
 8009cae:	0151      	lsls	r1, r2, #5
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	440a      	add	r2, r1
 8009cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009cbc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	78db      	ldrb	r3, [r3, #3]
 8009cc2:	2b03      	cmp	r3, #3
 8009cc4:	d003      	beq.n	8009cce <USB_EPClearStall+0x4c>
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	78db      	ldrb	r3, [r3, #3]
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d138      	bne.n	8009d40 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	015a      	lsls	r2, r3, #5
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	0151      	lsls	r1, r2, #5
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	440a      	add	r2, r1
 8009ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cec:	6013      	str	r3, [r2, #0]
 8009cee:	e027      	b.n	8009d40 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	015a      	lsls	r2, r3, #5
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	0151      	lsls	r1, r2, #5
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	440a      	add	r2, r1
 8009d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d0e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	78db      	ldrb	r3, [r3, #3]
 8009d14:	2b03      	cmp	r3, #3
 8009d16:	d003      	beq.n	8009d20 <USB_EPClearStall+0x9e>
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	78db      	ldrb	r3, [r3, #3]
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d10f      	bne.n	8009d40 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	015a      	lsls	r2, r3, #5
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	4413      	add	r3, r2
 8009d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68ba      	ldr	r2, [r7, #8]
 8009d30:	0151      	lsls	r1, r2, #5
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	440a      	add	r2, r1
 8009d36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d3e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009d4e:	b480      	push	{r7}
 8009d50:	b085      	sub	sp, #20
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
 8009d56:	460b      	mov	r3, r1
 8009d58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d6c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009d70:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	78fb      	ldrb	r3, [r7, #3]
 8009d7c:	011b      	lsls	r3, r3, #4
 8009d7e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009d82:	68f9      	ldr	r1, [r7, #12]
 8009d84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr

08009d9a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b084      	sub	sp, #16
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009db4:	f023 0302 	bic.w	r3, r3, #2
 8009db8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009dba:	2003      	movs	r0, #3
 8009dbc:	f7f8 fc12 	bl	80025e4 <HAL_Delay>

  return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b084      	sub	sp, #16
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009de4:	f043 0302 	orr.w	r3, r3, #2
 8009de8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009dea:	2003      	movs	r0, #3
 8009dec:	f7f8 fbfa 	bl	80025e4 <HAL_Delay>

  return HAL_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009dfa:	b480      	push	{r7}
 8009dfc:	b085      	sub	sp, #20
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	695b      	ldr	r3, [r3, #20]
 8009e06:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	699b      	ldr	r3, [r3, #24]
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	4013      	ands	r3, r2
 8009e10:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009e12:	68fb      	ldr	r3, [r7, #12]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e32:	699b      	ldr	r3, [r3, #24]
 8009e34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e3c:	69db      	ldr	r3, [r3, #28]
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	4013      	ands	r3, r2
 8009e42:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	0c1b      	lsrs	r3, r3, #16
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3714      	adds	r7, #20
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e66:	699b      	ldr	r3, [r3, #24]
 8009e68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e70:	69db      	ldr	r3, [r3, #28]
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	4013      	ands	r3, r2
 8009e76:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	b29b      	uxth	r3, r3
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3714      	adds	r7, #20
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b085      	sub	sp, #20
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	460b      	mov	r3, r1
 8009e92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009e98:	78fb      	ldrb	r3, [r7, #3]
 8009e9a:	015a      	lsls	r2, r3, #5
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eae:	695b      	ldr	r3, [r3, #20]
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	4013      	ands	r3, r2
 8009eb4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009eb6:	68bb      	ldr	r3, [r7, #8]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b087      	sub	sp, #28
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009ee8:	78fb      	ldrb	r3, [r7, #3]
 8009eea:	f003 030f 	and.w	r3, r3, #15
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ef4:	01db      	lsls	r3, r3, #7
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	693a      	ldr	r2, [r7, #16]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009efe:	78fb      	ldrb	r3, [r7, #3]
 8009f00:	015a      	lsls	r2, r3, #5
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	4413      	add	r3, r2
 8009f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	4013      	ands	r3, r2
 8009f10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f12:	68bb      	ldr	r3, [r7, #8]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	371c      	adds	r7, #28
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	695b      	ldr	r3, [r3, #20]
 8009f2c:	f003 0301 	and.w	r3, r3, #1
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f56:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009f5a:	f023 0307 	bic.w	r3, r3, #7
 8009f5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3714      	adds	r7, #20
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
	...

08009f84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b087      	sub	sp, #28
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	607a      	str	r2, [r7, #4]
 8009f90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	333c      	adds	r3, #60	; 0x3c
 8009f9a:	3304      	adds	r3, #4
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	4a26      	ldr	r2, [pc, #152]	; (800a03c <USB_EP0_OutStart+0xb8>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d90a      	bls.n	8009fbe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fb8:	d101      	bne.n	8009fbe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	e037      	b.n	800a02e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	697a      	ldr	r2, [r7, #20]
 8009fd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	697a      	ldr	r2, [r7, #20]
 8009fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fec:	f043 0318 	orr.w	r3, r3, #24
 8009ff0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	697a      	ldr	r2, [r7, #20]
 8009ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a000:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a004:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a006:	7afb      	ldrb	r3, [r7, #11]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d10f      	bne.n	800a02c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a012:	461a      	mov	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a026:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a02a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	371c      	adds	r7, #28
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop
 800a03c:	4f54300a 	.word	0x4f54300a

0800a040 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a040:	b480      	push	{r7}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a048:	2300      	movs	r3, #0
 800a04a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	3301      	adds	r3, #1
 800a050:	60fb      	str	r3, [r7, #12]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	4a13      	ldr	r2, [pc, #76]	; (800a0a4 <USB_CoreReset+0x64>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d901      	bls.n	800a05e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	e01b      	b.n	800a096 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	2b00      	cmp	r3, #0
 800a064:	daf2      	bge.n	800a04c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a066:	2300      	movs	r3, #0
 800a068:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	f043 0201 	orr.w	r2, r3, #1
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	3301      	adds	r3, #1
 800a07a:	60fb      	str	r3, [r7, #12]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	4a09      	ldr	r2, [pc, #36]	; (800a0a4 <USB_CoreReset+0x64>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d901      	bls.n	800a088 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a084:	2303      	movs	r3, #3
 800a086:	e006      	b.n	800a096 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	f003 0301 	and.w	r3, r3, #1
 800a090:	2b01      	cmp	r3, #1
 800a092:	d0f0      	beq.n	800a076 <USB_CoreReset+0x36>

  return HAL_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3714      	adds	r7, #20
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	00030d40 	.word	0x00030d40

0800a0a8 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

    /* Allocate Audio structure */
  haudio = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 800a0b4:	f641 30d0 	movw	r0, #7120	; 0x1bd0
 800a0b8:	f002 fa68 	bl	800c58c <malloc>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d105      	bne.n	800a0d2 <USBD_AUDIO_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	e04b      	b.n	800a16a <USBD_AUDIO_Init+0xc2>
  }

  pdev->pClassData = (void *)haudio;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	7c1b      	ldrb	r3, [r3, #16]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d104      	bne.n	800a0ec <USBD_AUDIO_Init+0x44>
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 800a0ea:	e003      	b.n	800a0f4 <USBD_AUDIO_Init+0x4c>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800a0f4:	2358      	movs	r3, #88	; 0x58
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f002 f8cd 	bl	800c29a <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  haudio->alt_setting = 0U;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2200      	movs	r2, #0
 800a10c:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a114:	3304      	adds	r3, #4
 800a116:	2203      	movs	r2, #3
 800a118:	701a      	strb	r2, [r3, #0]
  haudio->wr_ptr = 0U;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a120:	3308      	adds	r3, #8
 800a122:	2200      	movs	r2, #0
 800a124:	801a      	strh	r2, [r3, #0]
  haudio->rd_ptr = 0U;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a12c:	3306      	adds	r3, #6
 800a12e:	2200      	movs	r2, #0
 800a130:	801a      	strh	r2, [r3, #0]
  haudio->rd_enable = 0U;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a138:	3305      	adds	r3, #5
 800a13a:	2200      	movs	r2, #0
 800a13c:	701a      	strb	r2, [r3, #0]

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2200      	movs	r2, #0
 800a148:	2146      	movs	r1, #70	; 0x46
 800a14a:	f245 6054 	movw	r0, #22100	; 0x5654
 800a14e:	4798      	blx	r3
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d001      	beq.n	800a15a <USBD_AUDIO_Init+0xb2>
                                                       AUDIO_DEFAULT_VOLUME,
                                                       0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 800a156:	2303      	movs	r3, #3
 800a158:	e007      	b.n	800a16a <USBD_AUDIO_Init+0xc2>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	1d1a      	adds	r2, r3, #4
 800a15e:	2358      	movs	r3, #88	; 0x58
 800a160:	2101      	movs	r1, #1
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f002 f988 	bl	800c478 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b082      	sub	sp, #8
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	460b      	mov	r3, r1
 800a17c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 800a17e:	2101      	movs	r1, #1
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f002 f8b0 	bl	800c2e6 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = 0U;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00f      	beq.n	800a1c0 <USBD_AUDIO_DeInit+0x4e>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f002 f9f2 	bl	800c59c <free>
    pdev->pClassData = NULL;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3708      	adds	r7, #8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
	...

0800a1cc <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b086      	sub	sp, #24
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1e4:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d01a      	beq.n	800a228 <USBD_AUDIO_Setup+0x5c>
 800a1f2:	2b20      	cmp	r3, #32
 800a1f4:	f040 809e 	bne.w	800a334 <USBD_AUDIO_Setup+0x168>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	785b      	ldrb	r3, [r3, #1]
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d006      	beq.n	800a20e <USBD_AUDIO_Setup+0x42>
 800a200:	2b81      	cmp	r3, #129	; 0x81
 800a202:	d109      	bne.n	800a218 <USBD_AUDIO_Setup+0x4c>
    {
    case AUDIO_REQ_GET_CUR:
      AUDIO_REQ_GetCurrent(pdev, req);
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f9a0 	bl	800a54c <AUDIO_REQ_GetCurrent>
      break;
 800a20c:	e00b      	b.n	800a226 <USBD_AUDIO_Setup+0x5a>

    case AUDIO_REQ_SET_CUR:
      AUDIO_REQ_SetCurrent(pdev, req);
 800a20e:	6839      	ldr	r1, [r7, #0]
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 f9bb 	bl	800a58c <AUDIO_REQ_SetCurrent>
      break;
 800a216:	e006      	b.n	800a226 <USBD_AUDIO_Setup+0x5a>

    default:
      USBD_CtlError(pdev, req);
 800a218:	6839      	ldr	r1, [r7, #0]
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f001 fb36 	bl	800b88c <USBD_CtlError>
      ret = USBD_FAIL;
 800a220:	2303      	movs	r3, #3
 800a222:	75fb      	strb	r3, [r7, #23]
      break;
 800a224:	bf00      	nop
    }
    break;
 800a226:	e08c      	b.n	800a342 <USBD_AUDIO_Setup+0x176>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	785b      	ldrb	r3, [r3, #1]
 800a22c:	2b0b      	cmp	r3, #11
 800a22e:	d876      	bhi.n	800a31e <USBD_AUDIO_Setup+0x152>
 800a230:	a201      	add	r2, pc, #4	; (adr r2, 800a238 <USBD_AUDIO_Setup+0x6c>)
 800a232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a236:	bf00      	nop
 800a238:	0800a269 	.word	0x0800a269
 800a23c:	0800a32d 	.word	0x0800a32d
 800a240:	0800a31f 	.word	0x0800a31f
 800a244:	0800a31f 	.word	0x0800a31f
 800a248:	0800a31f 	.word	0x0800a31f
 800a24c:	0800a31f 	.word	0x0800a31f
 800a250:	0800a291 	.word	0x0800a291
 800a254:	0800a31f 	.word	0x0800a31f
 800a258:	0800a31f 	.word	0x0800a31f
 800a25c:	0800a31f 	.word	0x0800a31f
 800a260:	0800a2bb 	.word	0x0800a2bb
 800a264:	0800a2e1 	.word	0x0800a2e1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a26e:	2b03      	cmp	r3, #3
 800a270:	d107      	bne.n	800a282 <USBD_AUDIO_Setup+0xb6>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a272:	f107 0308 	add.w	r3, r7, #8
 800a276:	2202      	movs	r2, #2
 800a278:	4619      	mov	r1, r3
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f001 fb77 	bl	800b96e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a280:	e057      	b.n	800a332 <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 800a282:	6839      	ldr	r1, [r7, #0]
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f001 fb01 	bl	800b88c <USBD_CtlError>
        ret = USBD_FAIL;
 800a28a:	2303      	movs	r3, #3
 800a28c:	75fb      	strb	r3, [r7, #23]
      break;
 800a28e:	e050      	b.n	800a332 <USBD_AUDIO_Setup+0x166>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	885b      	ldrh	r3, [r3, #2]
 800a294:	0a1b      	lsrs	r3, r3, #8
 800a296:	b29b      	uxth	r3, r3
 800a298:	2b21      	cmp	r3, #33	; 0x21
 800a29a:	d149      	bne.n	800a330 <USBD_AUDIO_Setup+0x164>
      {
        pbuf = USBD_AUDIO_CfgDesc + 18;
 800a29c:	4b2b      	ldr	r3, [pc, #172]	; (800a34c <USBD_AUDIO_Setup+0x180>)
 800a29e:	60fb      	str	r3, [r7, #12]
        len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	88db      	ldrh	r3, [r3, #6]
 800a2a4:	2b09      	cmp	r3, #9
 800a2a6:	bf28      	it	cs
 800a2a8:	2309      	movcs	r3, #9
 800a2aa:	817b      	strh	r3, [r7, #10]

        (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2ac:	897b      	ldrh	r3, [r7, #10]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	68f9      	ldr	r1, [r7, #12]
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f001 fb5b 	bl	800b96e <USBD_CtlSendData>
      }
      break;
 800a2b8:	e03a      	b.n	800a330 <USBD_AUDIO_Setup+0x164>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2c0:	2b03      	cmp	r3, #3
 800a2c2:	d106      	bne.n	800a2d2 <USBD_AUDIO_Setup+0x106>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f001 fb4f 	bl	800b96e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a2d0:	e02f      	b.n	800a332 <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 800a2d2:	6839      	ldr	r1, [r7, #0]
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f001 fad9 	bl	800b88c <USBD_CtlError>
        ret = USBD_FAIL;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	75fb      	strb	r3, [r7, #23]
      break;
 800a2de:	e028      	b.n	800a332 <USBD_AUDIO_Setup+0x166>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2e6:	2b03      	cmp	r3, #3
 800a2e8:	d112      	bne.n	800a310 <USBD_AUDIO_Setup+0x144>
      {
        if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	885b      	ldrh	r3, [r3, #2]
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	d806      	bhi.n	800a302 <USBD_AUDIO_Setup+0x136>
        {
          haudio->alt_setting = (uint8_t)(req->wValue);
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	885b      	ldrh	r3, [r3, #2]
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	601a      	str	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a300:	e017      	b.n	800a332 <USBD_AUDIO_Setup+0x166>
          USBD_CtlError(pdev, req);
 800a302:	6839      	ldr	r1, [r7, #0]
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f001 fac1 	bl	800b88c <USBD_CtlError>
          ret = USBD_FAIL;
 800a30a:	2303      	movs	r3, #3
 800a30c:	75fb      	strb	r3, [r7, #23]
      break;
 800a30e:	e010      	b.n	800a332 <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 800a310:	6839      	ldr	r1, [r7, #0]
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f001 faba 	bl	800b88c <USBD_CtlError>
        ret = USBD_FAIL;
 800a318:	2303      	movs	r3, #3
 800a31a:	75fb      	strb	r3, [r7, #23]
      break;
 800a31c:	e009      	b.n	800a332 <USBD_AUDIO_Setup+0x166>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800a31e:	6839      	ldr	r1, [r7, #0]
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f001 fab3 	bl	800b88c <USBD_CtlError>
      ret = USBD_FAIL;
 800a326:	2303      	movs	r3, #3
 800a328:	75fb      	strb	r3, [r7, #23]
      break;
 800a32a:	e002      	b.n	800a332 <USBD_AUDIO_Setup+0x166>
      break;
 800a32c:	bf00      	nop
 800a32e:	e008      	b.n	800a342 <USBD_AUDIO_Setup+0x176>
      break;
 800a330:	bf00      	nop
    }
    break;
 800a332:	e006      	b.n	800a342 <USBD_AUDIO_Setup+0x176>
  default:
    USBD_CtlError(pdev, req);
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f001 faa8 	bl	800b88c <USBD_CtlError>
    ret = USBD_FAIL;
 800a33c:	2303      	movs	r3, #3
 800a33e:	75fb      	strb	r3, [r7, #23]
    break;
 800a340:	bf00      	nop
  }

  return (uint8_t)ret;
 800a342:	7dfb      	ldrb	r3, [r7, #23]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3718      	adds	r7, #24
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	200000d2 	.word	0x200000d2

0800a350 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	226d      	movs	r2, #109	; 0x6d
 800a35c:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 800a35e:	4b03      	ldr	r3, [pc, #12]	; (800a36c <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 800a360:	4618      	mov	r0, r3
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr
 800a36c:	200000c0 	.word	0x200000c0

0800a370 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	460b      	mov	r3, r1
 800a37a:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr

0800a38a <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b084      	sub	sp, #16
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a398:	60fb      	str	r3, [r7, #12]

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a3a0:	330a      	adds	r3, #10
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d11d      	bne.n	800a3e4 <USBD_AUDIO_EP0_RxReady+0x5a>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800a3ae:	330c      	adds	r3, #12
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d116      	bne.n	800a3e4 <USBD_AUDIO_EP0_RxReady+0x5a>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3bc:	691a      	ldr	r2, [r3, #16]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a3c4:	330b      	adds	r3, #11
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	4790      	blx	r2
      haudio->control.cmd = 0U;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a3d2:	330a      	adds	r3, #10
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	701a      	strb	r2, [r3, #0]
      haudio->control.len = 0U;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800a3de:	330b      	adds	r3, #11
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	701a      	strb	r2, [r3, #0]
    }
  }

  return (uint8_t)USBD_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800a3ee:	b480      	push	{r7}
 800a3f0:	b083      	sub	sp, #12
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	370c      	adds	r7, #12
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr

0800a41a <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b083      	sub	sp, #12
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	460b      	mov	r3, r1
 800a424:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	460b      	mov	r3, r1
 800a43e:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	370c      	adds	r7, #12
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr

0800a44e <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a44e:	b590      	push	{r4, r7, lr}
 800a450:	b085      	sub	sp, #20
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	460b      	mov	r3, r1
 800a458:	70fb      	strb	r3, [r7, #3]
  uint16_t PacketSize;
  USBD_AUDIO_HandleTypeDef *haudio;

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a460:	60fb      	str	r3, [r7, #12]

  if (epnum == AUDIO_OUT_EP)
 800a462:	78fb      	ldrb	r3, [r7, #3]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d16c      	bne.n	800a542 <USBD_AUDIO_DataOut+0xf4>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 800a468:	78fb      	ldrb	r3, [r7, #3]
 800a46a:	4619      	mov	r1, r3
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f002 f824 	bl	800c4ba <USBD_LL_GetRxDataSize>
 800a472:	4603      	mov	r3, r0
 800a474:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a47c:	695c      	ldr	r4, [r3, #20]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a484:	3308      	adds	r3, #8
 800a486:	881b      	ldrh	r3, [r3, #0]
 800a488:	461a      	mov	r2, r3
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	4413      	add	r3, r2
 800a48e:	3304      	adds	r3, #4
 800a490:	8979      	ldrh	r1, [r7, #10]
 800a492:	2201      	movs	r2, #1
 800a494:	4618      	mov	r0, r3
 800a496:	47a0      	blx	r4
                                                           PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a49e:	3308      	adds	r3, #8
 800a4a0:	881a      	ldrh	r2, [r3, #0]
 800a4a2:	897b      	ldrh	r3, [r7, #10]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a4ae:	3308      	adds	r3, #8
 800a4b0:	801a      	strh	r2, [r3, #0]

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a4b8:	3308      	adds	r3, #8
 800a4ba:	881b      	ldrh	r3, [r3, #0]
 800a4bc:	f5b3 5fdc 	cmp.w	r3, #7040	; 0x1b80
 800a4c0:	d11c      	bne.n	800a4fc <USBD_AUDIO_DataOut+0xae>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a4c8:	3308      	adds	r3, #8
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	801a      	strh	r2, [r3, #0]

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a4d4:	3304      	adds	r3, #4
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	2b03      	cmp	r3, #3
 800a4da:	d10f      	bne.n	800a4fc <USBD_AUDIO_DataOut+0xae>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	1d10      	adds	r0, r2, #4
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 800a4ee:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a4f6:	3304      	adds	r3, #4
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	701a      	strb	r2, [r3, #0]
      }
    }

    if (haudio->rd_enable == 0U)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a502:	3305      	adds	r3, #5
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d10d      	bne.n	800a526 <USBD_AUDIO_DataOut+0xd8>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a510:	3308      	adds	r3, #8
 800a512:	881b      	ldrh	r3, [r3, #0]
 800a514:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 800a518:	d105      	bne.n	800a526 <USBD_AUDIO_DataOut+0xd8>
      {
        haudio->rd_enable = 1U;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a520:	3305      	adds	r3, #5
 800a522:	2201      	movs	r2, #1
 800a524:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
                                 &haudio->buffer[haudio->wr_ptr],
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a52c:	3308      	adds	r3, #8
 800a52e:	881b      	ldrh	r3, [r3, #0]
 800a530:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	4413      	add	r3, r2
 800a536:	1d1a      	adds	r2, r3, #4
 800a538:	2358      	movs	r3, #88	; 0x58
 800a53a:	2101      	movs	r1, #1
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f001 ff9b 	bl	800c478 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3714      	adds	r7, #20
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd90      	pop	{r4, r7, pc}

0800a54c <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a55c:	60fb      	str	r3, [r7, #12]

  (void)USBD_memset(haudio->control.data, 0, 64U);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a564:	330b      	adds	r3, #11
 800a566:	2240      	movs	r2, #64	; 0x40
 800a568:	2100      	movs	r1, #0
 800a56a:	4618      	mov	r0, r3
 800a56c:	f002 f81e 	bl	800c5ac <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a576:	330b      	adds	r3, #11
 800a578:	683a      	ldr	r2, [r7, #0]
 800a57a:	88d2      	ldrh	r2, [r2, #6]
 800a57c:	4619      	mov	r1, r3
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f001 f9f5 	bl	800b96e <USBD_CtlSendData>
}
 800a584:	bf00      	nop
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a59c:	60fb      	str	r3, [r7, #12]

  if (req->wLength != 0U)
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	88db      	ldrh	r3, [r3, #6]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d021      	beq.n	800a5ea <AUDIO_REQ_SetCurrent+0x5e>
  {
    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a5ac:	330b      	adds	r3, #11
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	88d2      	ldrh	r2, [r2, #6]
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f001 fa06 	bl	800b9c6 <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a5c0:	330a      	adds	r3, #10
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	701a      	strb	r2, [r3, #0]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	88db      	ldrh	r3, [r3, #6]
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800a5d2:	330b      	adds	r3, #11
 800a5d4:	701a      	strb	r2, [r3, #0]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	889b      	ldrh	r3, [r3, #4]
 800a5da:	0a1b      	lsrs	r3, r3, #8
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	b2da      	uxtb	r2, r3
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800a5e6:	330c      	adds	r3, #12
 800a5e8:	701a      	strb	r2, [r3, #0]
  }
}
 800a5ea:	bf00      	nop
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
	...

0800a5f4 <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	220a      	movs	r2, #10
 800a600:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 800a602:	4b03      	ldr	r3, [pc, #12]	; (800a610 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 800a604:	4618      	mov	r0, r3
 800a606:	370c      	adds	r7, #12
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr
 800a610:	20000130 	.word	0x20000130

0800a614 <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d101      	bne.n	800a628 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a624:	2303      	movs	r3, #3
 800a626:	e004      	b.n	800a632 <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	370c      	adds	r7, #12
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr
	...

0800a640 <USBD_MIDI_Init>:
  // IN endpoint descriptor
  0x09, 0x05, MIDI_IN_EP, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x25, 0x01, 0x01, 0x03,
};

static uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	460b      	mov	r3, r1
 800a64a:	70fb      	strb	r3, [r7, #3]
  pInstance = pdev;
 800a64c:	4a0c      	ldr	r2, [pc, #48]	; (800a680 <USBD_MIDI_Init+0x40>)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6013      	str	r3, [r2, #0]
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 800a652:	2340      	movs	r3, #64	; 0x40
 800a654:	2202      	movs	r2, #2
 800a656:	2181      	movs	r1, #129	; 0x81
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f001 fe1e 	bl	800c29a <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 800a65e:	2340      	movs	r3, #64	; 0x40
 800a660:	2202      	movs	r2, #2
 800a662:	2101      	movs	r1, #1
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f001 fe18 	bl	800c29a <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 800a66a:	2340      	movs	r3, #64	; 0x40
 800a66c:	4a05      	ldr	r2, [pc, #20]	; (800a684 <USBD_MIDI_Init+0x44>)
 800a66e:	2101      	movs	r1, #1
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f001 ff01 	bl	800c478 <USBD_LL_PrepareReceive>
  return 0;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	20000378 	.word	0x20000378
 800a684:	2000088c 	.word	0x2000088c

0800a688 <USBD_MIDI_DeInit>:

static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	460b      	mov	r3, r1
 800a692:	70fb      	strb	r3, [r7, #3]
  pInstance = NULL;
 800a694:	4b07      	ldr	r3, [pc, #28]	; (800a6b4 <USBD_MIDI_DeInit+0x2c>)
 800a696:	2200      	movs	r2, #0
 800a698:	601a      	str	r2, [r3, #0]
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 800a69a:	2181      	movs	r1, #129	; 0x81
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f001 fe22 	bl	800c2e6 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,MIDI_OUT_EP);
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f001 fe1e 	bl	800c2e6 <USBD_LL_CloseEP>
  return 0;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	20000378 	.word	0x20000378

0800a6b8 <USBD_MIDI_DataIn>:

//midi data incoming to host
static uint8_t USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum){
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	70fb      	strb	r3, [r7, #3]

  if (USB_Tx_State == 1){
 800a6c4:	4b06      	ldr	r3, [pc, #24]	; (800a6e0 <USBD_MIDI_DataIn+0x28>)
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d102      	bne.n	800a6d2 <USBD_MIDI_DataIn+0x1a>
    USB_Tx_State = 0;
 800a6cc:	4b04      	ldr	r3, [pc, #16]	; (800a6e0 <USBD_MIDI_DataIn+0x28>)
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	701a      	strb	r2, [r3, #0]
  }

  return USBD_OK;
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr
 800a6e0:	20000388 	.word	0x20000388

0800a6e4 <USBD_MIDI_DataOut>:

//midi data outcoming from host
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;

  USBD_MIDI_ItfTypeDef *pmidi;
  pmidi = (USBD_MIDI_ItfTypeDef *)(pdev->pUserData);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6f6:	60fb      	str	r3, [r7, #12]

  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
 800a6fe:	78fa      	ldrb	r2, [r7, #3]
 800a700:	4613      	mov	r3, r2
 800a702:	00db      	lsls	r3, r3, #3
 800a704:	1a9b      	subs	r3, r3, r2
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	440b      	add	r3, r1
 800a70a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	817b      	strh	r3, [r7, #10]

  pmidi->pIf_MidiRx((uint8_t *)&USB_Rx_Buffer, USB_Rx_Cnt);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	897a      	ldrh	r2, [r7, #10]
 800a718:	4611      	mov	r1, r2
 800a71a:	4806      	ldr	r0, [pc, #24]	; (800a734 <USBD_MIDI_DataOut+0x50>)
 800a71c:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 800a71e:	2340      	movs	r3, #64	; 0x40
 800a720:	4a04      	ldr	r2, [pc, #16]	; (800a734 <USBD_MIDI_DataOut+0x50>)
 800a722:	2101      	movs	r1, #1
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f001 fea7 	bl	800c478 <USBD_LL_PrepareReceive>
  return USBD_OK;
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	2000088c 	.word	0x2000088c

0800a738 <USBD_MIDI_SendPacket>:

void USBD_MIDI_SendPacket (){
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if(USB_Tx_State != 1){
 800a73e:	4b30      	ldr	r3, [pc, #192]	; (800a800 <USBD_MIDI_SendPacket+0xc8>)
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	2b01      	cmp	r3, #1
 800a744:	d059      	beq.n	800a7fa <USBD_MIDI_SendPacket+0xc2>
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE){
 800a746:	4b2f      	ldr	r3, [pc, #188]	; (800a804 <USBD_MIDI_SendPacket+0xcc>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a74e:	d102      	bne.n	800a756 <USBD_MIDI_SendPacket+0x1e>
      APP_Rx_ptr_out = 0;
 800a750:	4b2c      	ldr	r3, [pc, #176]	; (800a804 <USBD_MIDI_SendPacket+0xcc>)
 800a752:	2200      	movs	r2, #0
 800a754:	601a      	str	r2, [r3, #0]
    }

    if(APP_Rx_ptr_out == APP_Rx_ptr_in){
 800a756:	4b2b      	ldr	r3, [pc, #172]	; (800a804 <USBD_MIDI_SendPacket+0xcc>)
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	4b2b      	ldr	r3, [pc, #172]	; (800a808 <USBD_MIDI_SendPacket+0xd0>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d103      	bne.n	800a76a <USBD_MIDI_SendPacket+0x32>
      USB_Tx_State = 0;
 800a762:	4b27      	ldr	r3, [pc, #156]	; (800a800 <USBD_MIDI_SendPacket+0xc8>)
 800a764:	2200      	movs	r2, #0
 800a766:	701a      	strb	r2, [r3, #0]
      return;
 800a768:	e047      	b.n	800a7fa <USBD_MIDI_SendPacket+0xc2>
    }

    if(APP_Rx_ptr_out > APP_Rx_ptr_in){
 800a76a:	4b26      	ldr	r3, [pc, #152]	; (800a804 <USBD_MIDI_SendPacket+0xcc>)
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	4b26      	ldr	r3, [pc, #152]	; (800a808 <USBD_MIDI_SendPacket+0xd0>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	429a      	cmp	r2, r3
 800a774:	d906      	bls.n	800a784 <USBD_MIDI_SendPacket+0x4c>
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 800a776:	4b23      	ldr	r3, [pc, #140]	; (800a804 <USBD_MIDI_SendPacket+0xcc>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a77e:	4a23      	ldr	r2, [pc, #140]	; (800a80c <USBD_MIDI_SendPacket+0xd4>)
 800a780:	6013      	str	r3, [r2, #0]
 800a782:	e006      	b.n	800a792 <USBD_MIDI_SendPacket+0x5a>
    }else{
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 800a784:	4b20      	ldr	r3, [pc, #128]	; (800a808 <USBD_MIDI_SendPacket+0xd0>)
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	4b1e      	ldr	r3, [pc, #120]	; (800a804 <USBD_MIDI_SendPacket+0xcc>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	1ad3      	subs	r3, r2, r3
 800a78e:	4a1f      	ldr	r2, [pc, #124]	; (800a80c <USBD_MIDI_SendPacket+0xd4>)
 800a790:	6013      	str	r3, [r2, #0]
    }

    if (APP_Rx_length > MIDI_DATA_IN_PACKET_SIZE){
 800a792:	4b1e      	ldr	r3, [pc, #120]	; (800a80c <USBD_MIDI_SendPacket+0xd4>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2b40      	cmp	r3, #64	; 0x40
 800a798:	d90f      	bls.n	800a7ba <USBD_MIDI_SendPacket+0x82>
      USB_Tx_ptr = APP_Rx_ptr_out;
 800a79a:	4b1a      	ldr	r3, [pc, #104]	; (800a804 <USBD_MIDI_SendPacket+0xcc>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = MIDI_DATA_IN_PACKET_SIZE;
 800a7a0:	2340      	movs	r3, #64	; 0x40
 800a7a2:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += MIDI_DATA_IN_PACKET_SIZE;
 800a7a4:	4b17      	ldr	r3, [pc, #92]	; (800a804 <USBD_MIDI_SendPacket+0xcc>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	3340      	adds	r3, #64	; 0x40
 800a7aa:	4a16      	ldr	r2, [pc, #88]	; (800a804 <USBD_MIDI_SendPacket+0xcc>)
 800a7ac:	6013      	str	r3, [r2, #0]
      APP_Rx_length -= MIDI_DATA_IN_PACKET_SIZE;
 800a7ae:	4b17      	ldr	r3, [pc, #92]	; (800a80c <USBD_MIDI_SendPacket+0xd4>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	3b40      	subs	r3, #64	; 0x40
 800a7b4:	4a15      	ldr	r2, [pc, #84]	; (800a80c <USBD_MIDI_SendPacket+0xd4>)
 800a7b6:	6013      	str	r3, [r2, #0]
 800a7b8:	e00f      	b.n	800a7da <USBD_MIDI_SendPacket+0xa2>
    }else{
      USB_Tx_ptr = APP_Rx_ptr_out;
 800a7ba:	4b12      	ldr	r3, [pc, #72]	; (800a804 <USBD_MIDI_SendPacket+0xcc>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = APP_Rx_length;
 800a7c0:	4b12      	ldr	r3, [pc, #72]	; (800a80c <USBD_MIDI_SendPacket+0xd4>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += APP_Rx_length;
 800a7c6:	4b0f      	ldr	r3, [pc, #60]	; (800a804 <USBD_MIDI_SendPacket+0xcc>)
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	4b10      	ldr	r3, [pc, #64]	; (800a80c <USBD_MIDI_SendPacket+0xd4>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	4a0c      	ldr	r2, [pc, #48]	; (800a804 <USBD_MIDI_SendPacket+0xcc>)
 800a7d2:	6013      	str	r3, [r2, #0]
      APP_Rx_length = 0;
 800a7d4:	4b0d      	ldr	r3, [pc, #52]	; (800a80c <USBD_MIDI_SendPacket+0xd4>)
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1;
 800a7da:	4b09      	ldr	r3, [pc, #36]	; (800a800 <USBD_MIDI_SendPacket+0xc8>)
 800a7dc:	2201      	movs	r2, #1
 800a7de:	701a      	strb	r2, [r3, #0]
    while(USBD_LL_Transmit(pInstance,
 800a7e0:	bf00      	nop
 800a7e2:	4b0b      	ldr	r3, [pc, #44]	; (800a810 <USBD_MIDI_SendPacket+0xd8>)
 800a7e4:	6818      	ldr	r0, [r3, #0]
    		MIDI_IN_EP,(uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],USB_Tx_length) != USBD_OK);
 800a7e6:	88fb      	ldrh	r3, [r7, #6]
    while(USBD_LL_Transmit(pInstance,
 800a7e8:	4a0a      	ldr	r2, [pc, #40]	; (800a814 <USBD_MIDI_SendPacket+0xdc>)
 800a7ea:	441a      	add	r2, r3
 800a7ec:	88bb      	ldrh	r3, [r7, #4]
 800a7ee:	2181      	movs	r1, #129	; 0x81
 800a7f0:	f001 fe21 	bl	800c436 <USBD_LL_Transmit>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d1f3      	bne.n	800a7e2 <USBD_MIDI_SendPacket+0xaa>
  }
}
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	20000388 	.word	0x20000388
 800a804:	20000380 	.word	0x20000380
 800a808:	2000037c 	.word	0x2000037c
 800a80c:	20000384 	.word	0x20000384
 800a810:	20000378 	.word	0x20000378
 800a814:	200008cc 	.word	0x200008cc

0800a818 <USBD_MIDI_GetCfgDesc>:

static uint8_t *USBD_MIDI_GetCfgDesc (uint16_t *length){
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2265      	movs	r2, #101	; 0x65
 800a824:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 800a826:	4b03      	ldr	r3, [pc, #12]	; (800a834 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 800a828:	4618      	mov	r0, r3
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr
 800a834:	20000174 	.word	0x20000174

0800a838 <USBD_MIDI_RegisterInterface>:
//  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
//  return USBD_MIDI_DeviceQualifierDesc;
//}

uint8_t USBD_MIDI_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_MIDI_ItfTypeDef *fops)
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  uint8_t ret = USBD_FAIL;
 800a842:	2303      	movs	r3, #3
 800a844:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL){
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d005      	beq.n	800a858 <USBD_MIDI_RegisterInterface+0x20>
    pdev->pUserData= fops;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	683a      	ldr	r2, [r7, #0]
 800a850:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;    
 800a854:	2300      	movs	r3, #0
 800a856:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800a858:	7bfb      	ldrb	r3, [r7, #15]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3714      	adds	r7, #20
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr

0800a866 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b086      	sub	sp, #24
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	60f8      	str	r0, [r7, #12]
 800a86e:	60b9      	str	r1, [r7, #8]
 800a870:	4613      	mov	r3, r2
 800a872:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d101      	bne.n	800a87e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a87a:	2303      	movs	r3, #3
 800a87c:	e025      	b.n	800a8ca <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a884:	2b00      	cmp	r3, #0
 800a886:	d003      	beq.n	800a890 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800a896:	2b00      	cmp	r3, #0
 800a898:	d003      	beq.n	800a8a2 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2200      	movs	r2, #0
 800a89e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d003      	beq.n	800a8b0 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	79fa      	ldrb	r2, [r7, #7]
 800a8bc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f001 fc84 	bl	800c1cc <USBD_LL_Init>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a8c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3718      	adds	r7, #24
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b084      	sub	sp, #16
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d101      	bne.n	800a8ea <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a8e6:	2303      	movs	r3, #3
 800a8e8:	e010      	b.n	800a90c <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	683a      	ldr	r2, [r7, #0]
 800a8ee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8fa:	f107 020e 	add.w	r2, r7, #14
 800a8fe:	4610      	mov	r0, r2
 800a900:	4798      	blx	r3
 800a902:	4602      	mov	r2, r0
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
#endif /* USE_USB_FS */


  return USBD_OK;
 800a90a:	2300      	movs	r3, #0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3710      	adds	r7, #16
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f001 fca1 	bl	800c264 <USBD_LL_Start>
 800a922:	4603      	mov	r3, r0
}
 800a924:	4618      	mov	r0, r3
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	370c      	adds	r7, #12
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr

0800a942 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b084      	sub	sp, #16
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	460b      	mov	r3, r1
 800a94c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a94e:	2303      	movs	r3, #3
 800a950:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d009      	beq.n	800a970 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	78fa      	ldrb	r2, [r7, #3]
 800a966:	4611      	mov	r1, r2
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	4798      	blx	r3
 800a96c:	4603      	mov	r3, r0
 800a96e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a970:	7bfb      	ldrb	r3, [r7, #15]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b082      	sub	sp, #8
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	460b      	mov	r3, r1
 800a984:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d007      	beq.n	800a9a0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	78fa      	ldrb	r2, [r7, #3]
 800a99a:	4611      	mov	r1, r2
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	4798      	blx	r3
  }

  return USBD_OK;
 800a9a0:	2300      	movs	r3, #0
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3708      	adds	r7, #8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b084      	sub	sp, #16
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a9ba:	6839      	ldr	r1, [r7, #0]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 ff2b 	bl	800b818 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a9de:	f003 031f 	and.w	r3, r3, #31
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d00e      	beq.n	800aa04 <USBD_LL_SetupStage+0x5a>
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d302      	bcc.n	800a9f0 <USBD_LL_SetupStage+0x46>
 800a9ea:	2b02      	cmp	r3, #2
 800a9ec:	d014      	beq.n	800aa18 <USBD_LL_SetupStage+0x6e>
 800a9ee:	e01d      	b.n	800aa2c <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fa17 	bl	800ae2c <USBD_StdDevReq>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	73fb      	strb	r3, [r7, #15]
      break;
 800aa02:	e020      	b.n	800aa46 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 fa7b 	bl	800af08 <USBD_StdItfReq>
 800aa12:	4603      	mov	r3, r0
 800aa14:	73fb      	strb	r3, [r7, #15]
      break;
 800aa16:	e016      	b.n	800aa46 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa1e:	4619      	mov	r1, r3
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 fab7 	bl	800af94 <USBD_StdEPReq>
 800aa26:	4603      	mov	r3, r0
 800aa28:	73fb      	strb	r3, [r7, #15]
      break;
 800aa2a:	e00c      	b.n	800aa46 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aa32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	4619      	mov	r1, r3
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f001 fc72 	bl	800c324 <USBD_LL_StallEP>
 800aa40:	4603      	mov	r3, r0
 800aa42:	73fb      	strb	r3, [r7, #15]
      break;
 800aa44:	bf00      	nop
  }

  return ret;
 800aa46:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	607a      	str	r2, [r7, #4]
 800aa5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aa5e:	7afb      	ldrb	r3, [r7, #11]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d137      	bne.n	800aad4 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aa6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa72:	2b03      	cmp	r3, #3
 800aa74:	d14a      	bne.n	800ab0c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	689a      	ldr	r2, [r3, #8]
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d913      	bls.n	800aaaa <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	689a      	ldr	r2, [r3, #8]
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	1ad2      	subs	r2, r2, r3
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	68da      	ldr	r2, [r3, #12]
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	bf28      	it	cs
 800aa9c:	4613      	movcs	r3, r2
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	6879      	ldr	r1, [r7, #4]
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f000 ffac 	bl	800ba00 <USBD_CtlContinueRx>
 800aaa8:	e030      	b.n	800ab0c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00a      	beq.n	800aacc <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aabc:	2b03      	cmp	r3, #3
 800aabe:	d105      	bne.n	800aacc <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f000 ffa8 	bl	800ba22 <USBD_CtlSendStatus>
 800aad2:	e01b      	b.n	800ab0c <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aada:	699b      	ldr	r3, [r3, #24]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d013      	beq.n	800ab08 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800aae6:	2b03      	cmp	r3, #3
 800aae8:	d10e      	bne.n	800ab08 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	7afa      	ldrb	r2, [r7, #11]
 800aaf4:	4611      	mov	r1, r2
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	4798      	blx	r3
 800aafa:	4603      	mov	r3, r0
 800aafc:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800aafe:	7dfb      	ldrb	r3, [r7, #23]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d003      	beq.n	800ab0c <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800ab04:	7dfb      	ldrb	r3, [r7, #23]
 800ab06:	e002      	b.n	800ab0e <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ab08:	2303      	movs	r3, #3
 800ab0a:	e000      	b.n	800ab0e <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3718      	adds	r7, #24
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b086      	sub	sp, #24
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	60f8      	str	r0, [r7, #12]
 800ab1e:	460b      	mov	r3, r1
 800ab20:	607a      	str	r2, [r7, #4]
 800ab22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ab24:	7afb      	ldrb	r3, [r7, #11]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d16a      	bne.n	800ac00 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	3314      	adds	r3, #20
 800ab2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d155      	bne.n	800abe6 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	689a      	ldr	r2, [r3, #8]
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d914      	bls.n	800ab70 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	689a      	ldr	r2, [r3, #8]
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	1ad2      	subs	r2, r2, r3
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	461a      	mov	r2, r3
 800ab5a:	6879      	ldr	r1, [r7, #4]
 800ab5c:	68f8      	ldr	r0, [r7, #12]
 800ab5e:	f000 ff21 	bl	800b9a4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab62:	2300      	movs	r3, #0
 800ab64:	2200      	movs	r2, #0
 800ab66:	2100      	movs	r1, #0
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	f001 fc85 	bl	800c478 <USBD_LL_PrepareReceive>
 800ab6e:	e03a      	b.n	800abe6 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	68da      	ldr	r2, [r3, #12]
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d11c      	bne.n	800abb6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	685a      	ldr	r2, [r3, #4]
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d316      	bcc.n	800abb6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	685a      	ldr	r2, [r3, #4]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d20f      	bcs.n	800abb6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ab96:	2200      	movs	r2, #0
 800ab98:	2100      	movs	r1, #0
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f000 ff02 	bl	800b9a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aba8:	2300      	movs	r3, #0
 800abaa:	2200      	movs	r2, #0
 800abac:	2100      	movs	r1, #0
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	f001 fc62 	bl	800c478 <USBD_LL_PrepareReceive>
 800abb4:	e017      	b.n	800abe6 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d00a      	beq.n	800abd8 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800abc8:	2b03      	cmp	r3, #3
 800abca:	d105      	bne.n	800abd8 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800abd8:	2180      	movs	r1, #128	; 0x80
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f001 fba2 	bl	800c324 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f000 ff31 	bl	800ba48 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800abec:	2b01      	cmp	r3, #1
 800abee:	d123      	bne.n	800ac38 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f7ff fe9b 	bl	800a92c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800abfe:	e01b      	b.n	800ac38 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac06:	695b      	ldr	r3, [r3, #20]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d013      	beq.n	800ac34 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ac12:	2b03      	cmp	r3, #3
 800ac14:	d10e      	bne.n	800ac34 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac1c:	695b      	ldr	r3, [r3, #20]
 800ac1e:	7afa      	ldrb	r2, [r7, #11]
 800ac20:	4611      	mov	r1, r2
 800ac22:	68f8      	ldr	r0, [r7, #12]
 800ac24:	4798      	blx	r3
 800ac26:	4603      	mov	r3, r0
 800ac28:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ac2a:	7dfb      	ldrb	r3, [r7, #23]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d003      	beq.n	800ac38 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800ac30:	7dfb      	ldrb	r3, [r7, #23]
 800ac32:	e002      	b.n	800ac3a <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ac34:	2303      	movs	r3, #3
 800ac36:	e000      	b.n	800ac3a <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3718      	adds	r7, #24
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b082      	sub	sp, #8
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d009      	beq.n	800ac86 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	6852      	ldr	r2, [r2, #4]
 800ac7e:	b2d2      	uxtb	r2, r2
 800ac80:	4611      	mov	r1, r2
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac86:	2340      	movs	r3, #64	; 0x40
 800ac88:	2200      	movs	r2, #0
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f001 fb04 	bl	800c29a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2201      	movs	r2, #1
 800ac96:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2240      	movs	r2, #64	; 0x40
 800ac9e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aca2:	2340      	movs	r3, #64	; 0x40
 800aca4:	2200      	movs	r2, #0
 800aca6:	2180      	movs	r1, #128	; 0x80
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f001 faf6 	bl	800c29a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2201      	movs	r2, #1
 800acb2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2240      	movs	r2, #64	; 0x40
 800acb8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800acba:	2300      	movs	r3, #0
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3708      	adds	r7, #8
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	460b      	mov	r3, r1
 800acce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	78fa      	ldrb	r2, [r7, #3]
 800acd4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2204      	movs	r2, #4
 800acfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	370c      	adds	r7, #12
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr

0800ad0e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ad0e:	b480      	push	{r7}
 800ad10:	b083      	sub	sp, #12
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad1c:	2b04      	cmp	r3, #4
 800ad1e:	d105      	bne.n	800ad2c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ad2c:	2300      	movs	r3, #0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b082      	sub	sp, #8
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad48:	2b03      	cmp	r3, #3
 800ad4a:	d10b      	bne.n	800ad64 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad52:	69db      	ldr	r3, [r3, #28]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d005      	beq.n	800ad64 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad5e:	69db      	ldr	r3, [r3, #28]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ad6e:	b480      	push	{r7}
 800ad70:	b083      	sub	sp, #12
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
 800ad76:	460b      	mov	r3, r1
 800ad78:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ad7a:	2300      	movs	r3, #0
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	370c      	adds	r7, #12
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	460b      	mov	r3, r1
 800ad92:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	370c      	adds	r7, #12
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr

0800ada2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ada2:	b480      	push	{r7}
 800ada4:	b083      	sub	sp, #12
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2201      	movs	r2, #1
 800adc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adce:	2b00      	cmp	r3, #0
 800add0:	d009      	beq.n	800ade6 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	6852      	ldr	r2, [r2, #4]
 800adde:	b2d2      	uxtb	r2, r2
 800ade0:	4611      	mov	r1, r2
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	4798      	blx	r3
  }

  return USBD_OK;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3708      	adds	r7, #8
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b087      	sub	sp, #28
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	3301      	adds	r3, #1
 800ae06:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ae0e:	8a3b      	ldrh	r3, [r7, #16]
 800ae10:	021b      	lsls	r3, r3, #8
 800ae12:	b21a      	sxth	r2, r3
 800ae14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	b21b      	sxth	r3, r3
 800ae1c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ae1e:	89fb      	ldrh	r3, [r7, #14]
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	371c      	adds	r7, #28
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae36:	2300      	movs	r3, #0
 800ae38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae42:	2b20      	cmp	r3, #32
 800ae44:	d004      	beq.n	800ae50 <USBD_StdDevReq+0x24>
 800ae46:	2b40      	cmp	r3, #64	; 0x40
 800ae48:	d002      	beq.n	800ae50 <USBD_StdDevReq+0x24>
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00a      	beq.n	800ae64 <USBD_StdDevReq+0x38>
 800ae4e:	e050      	b.n	800aef2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	6839      	ldr	r1, [r7, #0]
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	4798      	blx	r3
 800ae5e:	4603      	mov	r3, r0
 800ae60:	73fb      	strb	r3, [r7, #15]
    break;
 800ae62:	e04b      	b.n	800aefc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	785b      	ldrb	r3, [r3, #1]
 800ae68:	2b09      	cmp	r3, #9
 800ae6a:	d83c      	bhi.n	800aee6 <USBD_StdDevReq+0xba>
 800ae6c:	a201      	add	r2, pc, #4	; (adr r2, 800ae74 <USBD_StdDevReq+0x48>)
 800ae6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae72:	bf00      	nop
 800ae74:	0800aec9 	.word	0x0800aec9
 800ae78:	0800aedd 	.word	0x0800aedd
 800ae7c:	0800aee7 	.word	0x0800aee7
 800ae80:	0800aed3 	.word	0x0800aed3
 800ae84:	0800aee7 	.word	0x0800aee7
 800ae88:	0800aea7 	.word	0x0800aea7
 800ae8c:	0800ae9d 	.word	0x0800ae9d
 800ae90:	0800aee7 	.word	0x0800aee7
 800ae94:	0800aebf 	.word	0x0800aebf
 800ae98:	0800aeb1 	.word	0x0800aeb1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ae9c:	6839      	ldr	r1, [r7, #0]
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 f9ce 	bl	800b240 <USBD_GetDescriptor>
      break;
 800aea4:	e024      	b.n	800aef0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800aea6:	6839      	ldr	r1, [r7, #0]
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 fb33 	bl	800b514 <USBD_SetAddress>
      break;
 800aeae:	e01f      	b.n	800aef0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800aeb0:	6839      	ldr	r1, [r7, #0]
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fb70 	bl	800b598 <USBD_SetConfig>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	73fb      	strb	r3, [r7, #15]
      break;
 800aebc:	e018      	b.n	800aef0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800aebe:	6839      	ldr	r1, [r7, #0]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fc0d 	bl	800b6e0 <USBD_GetConfig>
      break;
 800aec6:	e013      	b.n	800aef0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800aec8:	6839      	ldr	r1, [r7, #0]
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 fc3c 	bl	800b748 <USBD_GetStatus>
      break;
 800aed0:	e00e      	b.n	800aef0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800aed2:	6839      	ldr	r1, [r7, #0]
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 fc6a 	bl	800b7ae <USBD_SetFeature>
      break;
 800aeda:	e009      	b.n	800aef0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800aedc:	6839      	ldr	r1, [r7, #0]
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 fc79 	bl	800b7d6 <USBD_ClrFeature>
      break;
 800aee4:	e004      	b.n	800aef0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800aee6:	6839      	ldr	r1, [r7, #0]
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 fccf 	bl	800b88c <USBD_CtlError>
      break;
 800aeee:	bf00      	nop
    }
    break;
 800aef0:	e004      	b.n	800aefc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800aef2:	6839      	ldr	r1, [r7, #0]
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 fcc9 	bl	800b88c <USBD_CtlError>
    break;
 800aefa:	bf00      	nop
  }

  return ret;
 800aefc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop

0800af08 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af12:	2300      	movs	r3, #0
 800af14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af1e:	2b20      	cmp	r3, #32
 800af20:	d003      	beq.n	800af2a <USBD_StdItfReq+0x22>
 800af22:	2b40      	cmp	r3, #64	; 0x40
 800af24:	d001      	beq.n	800af2a <USBD_StdItfReq+0x22>
 800af26:	2b00      	cmp	r3, #0
 800af28:	d12a      	bne.n	800af80 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af30:	3b01      	subs	r3, #1
 800af32:	2b02      	cmp	r3, #2
 800af34:	d81d      	bhi.n	800af72 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	889b      	ldrh	r3, [r3, #4]
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	d813      	bhi.n	800af68 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	6839      	ldr	r1, [r7, #0]
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	4798      	blx	r3
 800af4e:	4603      	mov	r3, r0
 800af50:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	88db      	ldrh	r3, [r3, #6]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d110      	bne.n	800af7c <USBD_StdItfReq+0x74>
 800af5a:	7bfb      	ldrb	r3, [r7, #15]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d10d      	bne.n	800af7c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 fd5e 	bl	800ba22 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800af66:	e009      	b.n	800af7c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800af68:	6839      	ldr	r1, [r7, #0]
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 fc8e 	bl	800b88c <USBD_CtlError>
      break;
 800af70:	e004      	b.n	800af7c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800af72:	6839      	ldr	r1, [r7, #0]
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fc89 	bl	800b88c <USBD_CtlError>
      break;
 800af7a:	e000      	b.n	800af7e <USBD_StdItfReq+0x76>
      break;
 800af7c:	bf00      	nop
    }
    break;
 800af7e:	e004      	b.n	800af8a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800af80:	6839      	ldr	r1, [r7, #0]
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 fc82 	bl	800b88c <USBD_CtlError>
    break;
 800af88:	bf00      	nop
  }

  return ret;
 800af8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800af9e:	2300      	movs	r3, #0
 800afa0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	889b      	ldrh	r3, [r3, #4]
 800afa6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afb0:	2b20      	cmp	r3, #32
 800afb2:	d004      	beq.n	800afbe <USBD_StdEPReq+0x2a>
 800afb4:	2b40      	cmp	r3, #64	; 0x40
 800afb6:	d002      	beq.n	800afbe <USBD_StdEPReq+0x2a>
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00a      	beq.n	800afd2 <USBD_StdEPReq+0x3e>
 800afbc:	e135      	b.n	800b22a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	6839      	ldr	r1, [r7, #0]
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	4798      	blx	r3
 800afcc:	4603      	mov	r3, r0
 800afce:	73fb      	strb	r3, [r7, #15]
    break;
 800afd0:	e130      	b.n	800b234 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	785b      	ldrb	r3, [r3, #1]
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d03e      	beq.n	800b058 <USBD_StdEPReq+0xc4>
 800afda:	2b03      	cmp	r3, #3
 800afdc:	d002      	beq.n	800afe4 <USBD_StdEPReq+0x50>
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d077      	beq.n	800b0d2 <USBD_StdEPReq+0x13e>
 800afe2:	e11c      	b.n	800b21e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afea:	2b02      	cmp	r3, #2
 800afec:	d002      	beq.n	800aff4 <USBD_StdEPReq+0x60>
 800afee:	2b03      	cmp	r3, #3
 800aff0:	d015      	beq.n	800b01e <USBD_StdEPReq+0x8a>
 800aff2:	e02b      	b.n	800b04c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aff4:	7bbb      	ldrb	r3, [r7, #14]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00c      	beq.n	800b014 <USBD_StdEPReq+0x80>
 800affa:	7bbb      	ldrb	r3, [r7, #14]
 800affc:	2b80      	cmp	r3, #128	; 0x80
 800affe:	d009      	beq.n	800b014 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b000:	7bbb      	ldrb	r3, [r7, #14]
 800b002:	4619      	mov	r1, r3
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f001 f98d 	bl	800c324 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b00a:	2180      	movs	r1, #128	; 0x80
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f001 f989 	bl	800c324 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b012:	e020      	b.n	800b056 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800b014:	6839      	ldr	r1, [r7, #0]
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 fc38 	bl	800b88c <USBD_CtlError>
        break;
 800b01c:	e01b      	b.n	800b056 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	885b      	ldrh	r3, [r3, #2]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d10e      	bne.n	800b044 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b026:	7bbb      	ldrb	r3, [r7, #14]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d00b      	beq.n	800b044 <USBD_StdEPReq+0xb0>
 800b02c:	7bbb      	ldrb	r3, [r7, #14]
 800b02e:	2b80      	cmp	r3, #128	; 0x80
 800b030:	d008      	beq.n	800b044 <USBD_StdEPReq+0xb0>
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	88db      	ldrh	r3, [r3, #6]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d104      	bne.n	800b044 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800b03a:	7bbb      	ldrb	r3, [r7, #14]
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f001 f970 	bl	800c324 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 fcec 	bl	800ba22 <USBD_CtlSendStatus>

        break;
 800b04a:	e004      	b.n	800b056 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800b04c:	6839      	ldr	r1, [r7, #0]
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 fc1c 	bl	800b88c <USBD_CtlError>
        break;
 800b054:	bf00      	nop
      }
      break;
 800b056:	e0e7      	b.n	800b228 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b05e:	2b02      	cmp	r3, #2
 800b060:	d002      	beq.n	800b068 <USBD_StdEPReq+0xd4>
 800b062:	2b03      	cmp	r3, #3
 800b064:	d015      	beq.n	800b092 <USBD_StdEPReq+0xfe>
 800b066:	e02d      	b.n	800b0c4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b068:	7bbb      	ldrb	r3, [r7, #14]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00c      	beq.n	800b088 <USBD_StdEPReq+0xf4>
 800b06e:	7bbb      	ldrb	r3, [r7, #14]
 800b070:	2b80      	cmp	r3, #128	; 0x80
 800b072:	d009      	beq.n	800b088 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b074:	7bbb      	ldrb	r3, [r7, #14]
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f001 f953 	bl	800c324 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b07e:	2180      	movs	r1, #128	; 0x80
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f001 f94f 	bl	800c324 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b086:	e023      	b.n	800b0d0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800b088:	6839      	ldr	r1, [r7, #0]
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 fbfe 	bl	800b88c <USBD_CtlError>
        break;
 800b090:	e01e      	b.n	800b0d0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	885b      	ldrh	r3, [r3, #2]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d119      	bne.n	800b0ce <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800b09a:	7bbb      	ldrb	r3, [r7, #14]
 800b09c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d004      	beq.n	800b0ae <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b0a4:	7bbb      	ldrb	r3, [r7, #14]
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f001 f95a 	bl	800c362 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 fcb7 	bl	800ba22 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	6839      	ldr	r1, [r7, #0]
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	4798      	blx	r3
        }
        break;
 800b0c2:	e004      	b.n	800b0ce <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800b0c4:	6839      	ldr	r1, [r7, #0]
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 fbe0 	bl	800b88c <USBD_CtlError>
        break;
 800b0cc:	e000      	b.n	800b0d0 <USBD_StdEPReq+0x13c>
        break;
 800b0ce:	bf00      	nop
      }
      break;
 800b0d0:	e0aa      	b.n	800b228 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0d8:	2b02      	cmp	r3, #2
 800b0da:	d002      	beq.n	800b0e2 <USBD_StdEPReq+0x14e>
 800b0dc:	2b03      	cmp	r3, #3
 800b0de:	d032      	beq.n	800b146 <USBD_StdEPReq+0x1b2>
 800b0e0:	e097      	b.n	800b212 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0e2:	7bbb      	ldrb	r3, [r7, #14]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d007      	beq.n	800b0f8 <USBD_StdEPReq+0x164>
 800b0e8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ea:	2b80      	cmp	r3, #128	; 0x80
 800b0ec:	d004      	beq.n	800b0f8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800b0ee:	6839      	ldr	r1, [r7, #0]
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 fbcb 	bl	800b88c <USBD_CtlError>
          break;
 800b0f6:	e091      	b.n	800b21c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	da0b      	bge.n	800b118 <USBD_StdEPReq+0x184>
 800b100:	7bbb      	ldrb	r3, [r7, #14]
 800b102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b106:	4613      	mov	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	4413      	add	r3, r2
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	3310      	adds	r3, #16
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	4413      	add	r3, r2
 800b114:	3304      	adds	r3, #4
 800b116:	e00b      	b.n	800b130 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b118:	7bbb      	ldrb	r3, [r7, #14]
 800b11a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b11e:	4613      	mov	r3, r2
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	4413      	add	r3, r2
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	4413      	add	r3, r2
 800b12e:	3304      	adds	r3, #4
 800b130:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	2200      	movs	r2, #0
 800b136:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	2202      	movs	r2, #2
 800b13c:	4619      	mov	r1, r3
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 fc15 	bl	800b96e <USBD_CtlSendData>
        break;
 800b144:	e06a      	b.n	800b21c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800b146:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	da11      	bge.n	800b172 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b14e:	7bbb      	ldrb	r3, [r7, #14]
 800b150:	f003 020f 	and.w	r2, r3, #15
 800b154:	6879      	ldr	r1, [r7, #4]
 800b156:	4613      	mov	r3, r2
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	4413      	add	r3, r2
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	440b      	add	r3, r1
 800b160:	3324      	adds	r3, #36	; 0x24
 800b162:	881b      	ldrh	r3, [r3, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d117      	bne.n	800b198 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800b168:	6839      	ldr	r1, [r7, #0]
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 fb8e 	bl	800b88c <USBD_CtlError>
            break;
 800b170:	e054      	b.n	800b21c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b172:	7bbb      	ldrb	r3, [r7, #14]
 800b174:	f003 020f 	and.w	r2, r3, #15
 800b178:	6879      	ldr	r1, [r7, #4]
 800b17a:	4613      	mov	r3, r2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4413      	add	r3, r2
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	440b      	add	r3, r1
 800b184:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b188:	881b      	ldrh	r3, [r3, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d104      	bne.n	800b198 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800b18e:	6839      	ldr	r1, [r7, #0]
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 fb7b 	bl	800b88c <USBD_CtlError>
            break;
 800b196:	e041      	b.n	800b21c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	da0b      	bge.n	800b1b8 <USBD_StdEPReq+0x224>
 800b1a0:	7bbb      	ldrb	r3, [r7, #14]
 800b1a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	4413      	add	r3, r2
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	3310      	adds	r3, #16
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	3304      	adds	r3, #4
 800b1b6:	e00b      	b.n	800b1d0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b1b8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1be:	4613      	mov	r3, r2
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	4413      	add	r3, r2
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	3304      	adds	r3, #4
 800b1d0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b1d2:	7bbb      	ldrb	r3, [r7, #14]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d002      	beq.n	800b1de <USBD_StdEPReq+0x24a>
 800b1d8:	7bbb      	ldrb	r3, [r7, #14]
 800b1da:	2b80      	cmp	r3, #128	; 0x80
 800b1dc:	d103      	bne.n	800b1e6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	601a      	str	r2, [r3, #0]
 800b1e4:	e00e      	b.n	800b204 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b1e6:	7bbb      	ldrb	r3, [r7, #14]
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f001 f8d8 	bl	800c3a0 <USBD_LL_IsStallEP>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d003      	beq.n	800b1fe <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	601a      	str	r2, [r3, #0]
 800b1fc:	e002      	b.n	800b204 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	2200      	movs	r2, #0
 800b202:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	2202      	movs	r2, #2
 800b208:	4619      	mov	r1, r3
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 fbaf 	bl	800b96e <USBD_CtlSendData>
          break;
 800b210:	e004      	b.n	800b21c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800b212:	6839      	ldr	r1, [r7, #0]
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 fb39 	bl	800b88c <USBD_CtlError>
        break;
 800b21a:	bf00      	nop
      }
      break;
 800b21c:	e004      	b.n	800b228 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800b21e:	6839      	ldr	r1, [r7, #0]
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 fb33 	bl	800b88c <USBD_CtlError>
      break;
 800b226:	bf00      	nop
    }
    break;
 800b228:	e004      	b.n	800b234 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800b22a:	6839      	ldr	r1, [r7, #0]
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 fb2d 	bl	800b88c <USBD_CtlError>
    break;
 800b232:	bf00      	nop
  }

  return ret;
 800b234:	7bfb      	ldrb	r3, [r7, #15]
}
 800b236:	4618      	mov	r0, r3
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
	...

0800b240 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b24a:	2300      	movs	r3, #0
 800b24c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b24e:	2300      	movs	r3, #0
 800b250:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b252:	2300      	movs	r3, #0
 800b254:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	885b      	ldrh	r3, [r3, #2]
 800b25a:	0a1b      	lsrs	r3, r3, #8
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	3b01      	subs	r3, #1
 800b260:	2b06      	cmp	r3, #6
 800b262:	f200 8128 	bhi.w	800b4b6 <USBD_GetDescriptor+0x276>
 800b266:	a201      	add	r2, pc, #4	; (adr r2, 800b26c <USBD_GetDescriptor+0x2c>)
 800b268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b26c:	0800b289 	.word	0x0800b289
 800b270:	0800b2a1 	.word	0x0800b2a1
 800b274:	0800b2e1 	.word	0x0800b2e1
 800b278:	0800b4b7 	.word	0x0800b4b7
 800b27c:	0800b4b7 	.word	0x0800b4b7
 800b280:	0800b457 	.word	0x0800b457
 800b284:	0800b483 	.word	0x0800b483
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	7c12      	ldrb	r2, [r2, #16]
 800b294:	f107 0108 	add.w	r1, r7, #8
 800b298:	4610      	mov	r0, r2
 800b29a:	4798      	blx	r3
 800b29c:	60f8      	str	r0, [r7, #12]
    break;
 800b29e:	e112      	b.n	800b4c6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	7c1b      	ldrb	r3, [r3, #16]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d10d      	bne.n	800b2c4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2b0:	f107 0208 	add.w	r2, r7, #8
 800b2b4:	4610      	mov	r0, r2
 800b2b6:	4798      	blx	r3
 800b2b8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	2202      	movs	r2, #2
 800b2c0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800b2c2:	e100      	b.n	800b4c6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2cc:	f107 0208 	add.w	r2, r7, #8
 800b2d0:	4610      	mov	r0, r2
 800b2d2:	4798      	blx	r3
 800b2d4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	2202      	movs	r2, #2
 800b2dc:	701a      	strb	r2, [r3, #0]
    break;
 800b2de:	e0f2      	b.n	800b4c6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	885b      	ldrh	r3, [r3, #2]
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	2b05      	cmp	r3, #5
 800b2e8:	f200 80ac 	bhi.w	800b444 <USBD_GetDescriptor+0x204>
 800b2ec:	a201      	add	r2, pc, #4	; (adr r2, 800b2f4 <USBD_GetDescriptor+0xb4>)
 800b2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f2:	bf00      	nop
 800b2f4:	0800b30d 	.word	0x0800b30d
 800b2f8:	0800b341 	.word	0x0800b341
 800b2fc:	0800b375 	.word	0x0800b375
 800b300:	0800b3a9 	.word	0x0800b3a9
 800b304:	0800b3dd 	.word	0x0800b3dd
 800b308:	0800b411 	.word	0x0800b411
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d00b      	beq.n	800b330 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	7c12      	ldrb	r2, [r2, #16]
 800b324:	f107 0108 	add.w	r1, r7, #8
 800b328:	4610      	mov	r0, r2
 800b32a:	4798      	blx	r3
 800b32c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b32e:	e091      	b.n	800b454 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b330:	6839      	ldr	r1, [r7, #0]
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 faaa 	bl	800b88c <USBD_CtlError>
        err++;
 800b338:	7afb      	ldrb	r3, [r7, #11]
 800b33a:	3301      	adds	r3, #1
 800b33c:	72fb      	strb	r3, [r7, #11]
      break;
 800b33e:	e089      	b.n	800b454 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00b      	beq.n	800b364 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	7c12      	ldrb	r2, [r2, #16]
 800b358:	f107 0108 	add.w	r1, r7, #8
 800b35c:	4610      	mov	r0, r2
 800b35e:	4798      	blx	r3
 800b360:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b362:	e077      	b.n	800b454 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b364:	6839      	ldr	r1, [r7, #0]
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 fa90 	bl	800b88c <USBD_CtlError>
        err++;
 800b36c:	7afb      	ldrb	r3, [r7, #11]
 800b36e:	3301      	adds	r3, #1
 800b370:	72fb      	strb	r3, [r7, #11]
      break;
 800b372:	e06f      	b.n	800b454 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b37a:	68db      	ldr	r3, [r3, #12]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d00b      	beq.n	800b398 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	7c12      	ldrb	r2, [r2, #16]
 800b38c:	f107 0108 	add.w	r1, r7, #8
 800b390:	4610      	mov	r0, r2
 800b392:	4798      	blx	r3
 800b394:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b396:	e05d      	b.n	800b454 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b398:	6839      	ldr	r1, [r7, #0]
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 fa76 	bl	800b88c <USBD_CtlError>
        err++;
 800b3a0:	7afb      	ldrb	r3, [r7, #11]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	72fb      	strb	r3, [r7, #11]
      break;
 800b3a6:	e055      	b.n	800b454 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d00b      	beq.n	800b3cc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ba:	691b      	ldr	r3, [r3, #16]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	7c12      	ldrb	r2, [r2, #16]
 800b3c0:	f107 0108 	add.w	r1, r7, #8
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	4798      	blx	r3
 800b3c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3ca:	e043      	b.n	800b454 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b3cc:	6839      	ldr	r1, [r7, #0]
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fa5c 	bl	800b88c <USBD_CtlError>
        err++;
 800b3d4:	7afb      	ldrb	r3, [r7, #11]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	72fb      	strb	r3, [r7, #11]
      break;
 800b3da:	e03b      	b.n	800b454 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3e2:	695b      	ldr	r3, [r3, #20]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00b      	beq.n	800b400 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ee:	695b      	ldr	r3, [r3, #20]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	7c12      	ldrb	r2, [r2, #16]
 800b3f4:	f107 0108 	add.w	r1, r7, #8
 800b3f8:	4610      	mov	r0, r2
 800b3fa:	4798      	blx	r3
 800b3fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3fe:	e029      	b.n	800b454 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b400:	6839      	ldr	r1, [r7, #0]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 fa42 	bl	800b88c <USBD_CtlError>
        err++;
 800b408:	7afb      	ldrb	r3, [r7, #11]
 800b40a:	3301      	adds	r3, #1
 800b40c:	72fb      	strb	r3, [r7, #11]
      break;
 800b40e:	e021      	b.n	800b454 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b416:	699b      	ldr	r3, [r3, #24]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00b      	beq.n	800b434 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b422:	699b      	ldr	r3, [r3, #24]
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	7c12      	ldrb	r2, [r2, #16]
 800b428:	f107 0108 	add.w	r1, r7, #8
 800b42c:	4610      	mov	r0, r2
 800b42e:	4798      	blx	r3
 800b430:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b432:	e00f      	b.n	800b454 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b434:	6839      	ldr	r1, [r7, #0]
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 fa28 	bl	800b88c <USBD_CtlError>
        err++;
 800b43c:	7afb      	ldrb	r3, [r7, #11]
 800b43e:	3301      	adds	r3, #1
 800b440:	72fb      	strb	r3, [r7, #11]
      break;
 800b442:	e007      	b.n	800b454 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800b444:	6839      	ldr	r1, [r7, #0]
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 fa20 	bl	800b88c <USBD_CtlError>
      err++;
 800b44c:	7afb      	ldrb	r3, [r7, #11]
 800b44e:	3301      	adds	r3, #1
 800b450:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800b452:	bf00      	nop
    }
    break;
 800b454:	e037      	b.n	800b4c6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	7c1b      	ldrb	r3, [r3, #16]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d109      	bne.n	800b472 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b466:	f107 0208 	add.w	r2, r7, #8
 800b46a:	4610      	mov	r0, r2
 800b46c:	4798      	blx	r3
 800b46e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b470:	e029      	b.n	800b4c6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800b472:	6839      	ldr	r1, [r7, #0]
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 fa09 	bl	800b88c <USBD_CtlError>
      err++;
 800b47a:	7afb      	ldrb	r3, [r7, #11]
 800b47c:	3301      	adds	r3, #1
 800b47e:	72fb      	strb	r3, [r7, #11]
    break;
 800b480:	e021      	b.n	800b4c6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	7c1b      	ldrb	r3, [r3, #16]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10d      	bne.n	800b4a6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b492:	f107 0208 	add.w	r2, r7, #8
 800b496:	4610      	mov	r0, r2
 800b498:	4798      	blx	r3
 800b49a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	2207      	movs	r2, #7
 800b4a2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b4a4:	e00f      	b.n	800b4c6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800b4a6:	6839      	ldr	r1, [r7, #0]
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 f9ef 	bl	800b88c <USBD_CtlError>
      err++;
 800b4ae:	7afb      	ldrb	r3, [r7, #11]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	72fb      	strb	r3, [r7, #11]
    break;
 800b4b4:	e007      	b.n	800b4c6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800b4b6:	6839      	ldr	r1, [r7, #0]
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f9e7 	bl	800b88c <USBD_CtlError>
    err++;
 800b4be:	7afb      	ldrb	r3, [r7, #11]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	72fb      	strb	r3, [r7, #11]
    break;
 800b4c4:	bf00      	nop
  }

  if (err != 0U)
 800b4c6:	7afb      	ldrb	r3, [r7, #11]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d11e      	bne.n	800b50a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	88db      	ldrh	r3, [r3, #6]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d016      	beq.n	800b502 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800b4d4:	893b      	ldrh	r3, [r7, #8]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00e      	beq.n	800b4f8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	88da      	ldrh	r2, [r3, #6]
 800b4de:	893b      	ldrh	r3, [r7, #8]
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	bf28      	it	cs
 800b4e4:	4613      	movcs	r3, r2
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b4ea:	893b      	ldrh	r3, [r7, #8]
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	68f9      	ldr	r1, [r7, #12]
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 fa3c 	bl	800b96e <USBD_CtlSendData>
 800b4f6:	e009      	b.n	800b50c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800b4f8:	6839      	ldr	r1, [r7, #0]
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 f9c6 	bl	800b88c <USBD_CtlError>
 800b500:	e004      	b.n	800b50c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 fa8d 	bl	800ba22 <USBD_CtlSendStatus>
 800b508:	e000      	b.n	800b50c <USBD_GetDescriptor+0x2cc>
    return;
 800b50a:	bf00      	nop
    }
  }
}
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop

0800b514 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	889b      	ldrh	r3, [r3, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d130      	bne.n	800b588 <USBD_SetAddress+0x74>
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	88db      	ldrh	r3, [r3, #6]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d12c      	bne.n	800b588 <USBD_SetAddress+0x74>
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	885b      	ldrh	r3, [r3, #2]
 800b532:	2b7f      	cmp	r3, #127	; 0x7f
 800b534:	d828      	bhi.n	800b588 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	885b      	ldrh	r3, [r3, #2]
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b540:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b548:	2b03      	cmp	r3, #3
 800b54a:	d104      	bne.n	800b556 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f99c 	bl	800b88c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b554:	e01c      	b.n	800b590 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	7bfa      	ldrb	r2, [r7, #15]
 800b55a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b55e:	7bfb      	ldrb	r3, [r7, #15]
 800b560:	4619      	mov	r1, r3
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 ff48 	bl	800c3f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 fa5a 	bl	800ba22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b56e:	7bfb      	ldrb	r3, [r7, #15]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d004      	beq.n	800b57e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2202      	movs	r2, #2
 800b578:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b57c:	e008      	b.n	800b590 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2201      	movs	r2, #1
 800b582:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b586:	e003      	b.n	800b590 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b588:	6839      	ldr	r1, [r7, #0]
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 f97e 	bl	800b88c <USBD_CtlError>
  }
}
 800b590:	bf00      	nop
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	885b      	ldrh	r3, [r3, #2]
 800b5aa:	b2da      	uxtb	r2, r3
 800b5ac:	4b4b      	ldr	r3, [pc, #300]	; (800b6dc <USBD_SetConfig+0x144>)
 800b5ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b5b0:	4b4a      	ldr	r3, [pc, #296]	; (800b6dc <USBD_SetConfig+0x144>)
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d905      	bls.n	800b5c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b5b8:	6839      	ldr	r1, [r7, #0]
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 f966 	bl	800b88c <USBD_CtlError>
    return USBD_FAIL;
 800b5c0:	2303      	movs	r3, #3
 800b5c2:	e087      	b.n	800b6d4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5ca:	2b02      	cmp	r3, #2
 800b5cc:	d002      	beq.n	800b5d4 <USBD_SetConfig+0x3c>
 800b5ce:	2b03      	cmp	r3, #3
 800b5d0:	d025      	beq.n	800b61e <USBD_SetConfig+0x86>
 800b5d2:	e071      	b.n	800b6b8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800b5d4:	4b41      	ldr	r3, [pc, #260]	; (800b6dc <USBD_SetConfig+0x144>)
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d01c      	beq.n	800b616 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800b5dc:	4b3f      	ldr	r3, [pc, #252]	; (800b6dc <USBD_SetConfig+0x144>)
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5e6:	4b3d      	ldr	r3, [pc, #244]	; (800b6dc <USBD_SetConfig+0x144>)
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f7ff f9a8 	bl	800a942 <USBD_SetClassConfig>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800b5f6:	7bfb      	ldrb	r3, [r7, #15]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d004      	beq.n	800b606 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800b5fc:	6839      	ldr	r1, [r7, #0]
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 f944 	bl	800b88c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b604:	e065      	b.n	800b6d2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 fa0b 	bl	800ba22 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2203      	movs	r2, #3
 800b610:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b614:	e05d      	b.n	800b6d2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 fa03 	bl	800ba22 <USBD_CtlSendStatus>
    break;
 800b61c:	e059      	b.n	800b6d2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800b61e:	4b2f      	ldr	r3, [pc, #188]	; (800b6dc <USBD_SetConfig+0x144>)
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d112      	bne.n	800b64c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2202      	movs	r2, #2
 800b62a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800b62e:	4b2b      	ldr	r3, [pc, #172]	; (800b6dc <USBD_SetConfig+0x144>)
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	461a      	mov	r2, r3
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b638:	4b28      	ldr	r3, [pc, #160]	; (800b6dc <USBD_SetConfig+0x144>)
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	4619      	mov	r1, r3
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f7ff f99b 	bl	800a97a <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 f9ec 	bl	800ba22 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b64a:	e042      	b.n	800b6d2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800b64c:	4b23      	ldr	r3, [pc, #140]	; (800b6dc <USBD_SetConfig+0x144>)
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	461a      	mov	r2, r3
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	429a      	cmp	r2, r3
 800b658:	d02a      	beq.n	800b6b0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	4619      	mov	r1, r3
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f7ff f989 	bl	800a97a <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800b668:	4b1c      	ldr	r3, [pc, #112]	; (800b6dc <USBD_SetConfig+0x144>)
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	461a      	mov	r2, r3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b672:	4b1a      	ldr	r3, [pc, #104]	; (800b6dc <USBD_SetConfig+0x144>)
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	4619      	mov	r1, r3
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f7ff f962 	bl	800a942 <USBD_SetClassConfig>
 800b67e:	4603      	mov	r3, r0
 800b680:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800b682:	7bfb      	ldrb	r3, [r7, #15]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d00f      	beq.n	800b6a8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800b688:	6839      	ldr	r1, [r7, #0]
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 f8fe 	bl	800b88c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	b2db      	uxtb	r3, r3
 800b696:	4619      	mov	r1, r3
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f7ff f96e 	bl	800a97a <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2202      	movs	r2, #2
 800b6a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b6a6:	e014      	b.n	800b6d2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 f9ba 	bl	800ba22 <USBD_CtlSendStatus>
    break;
 800b6ae:	e010      	b.n	800b6d2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 f9b6 	bl	800ba22 <USBD_CtlSendStatus>
    break;
 800b6b6:	e00c      	b.n	800b6d2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800b6b8:	6839      	ldr	r1, [r7, #0]
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 f8e6 	bl	800b88c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b6c0:	4b06      	ldr	r3, [pc, #24]	; (800b6dc <USBD_SetConfig+0x144>)
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f7ff f957 	bl	800a97a <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800b6cc:	2303      	movs	r3, #3
 800b6ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b6d0:	bf00      	nop
  }

  return ret;
 800b6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3710      	adds	r7, #16
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	20000389 	.word	0x20000389

0800b6e0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	88db      	ldrh	r3, [r3, #6]
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d004      	beq.n	800b6fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b6f2:	6839      	ldr	r1, [r7, #0]
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 f8c9 	bl	800b88c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800b6fa:	e021      	b.n	800b740 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b702:	2b01      	cmp	r3, #1
 800b704:	db17      	blt.n	800b736 <USBD_GetConfig+0x56>
 800b706:	2b02      	cmp	r3, #2
 800b708:	dd02      	ble.n	800b710 <USBD_GetConfig+0x30>
 800b70a:	2b03      	cmp	r3, #3
 800b70c:	d00b      	beq.n	800b726 <USBD_GetConfig+0x46>
 800b70e:	e012      	b.n	800b736 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	3308      	adds	r3, #8
 800b71a:	2201      	movs	r2, #1
 800b71c:	4619      	mov	r1, r3
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 f925 	bl	800b96e <USBD_CtlSendData>
      break;
 800b724:	e00c      	b.n	800b740 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	3304      	adds	r3, #4
 800b72a:	2201      	movs	r2, #1
 800b72c:	4619      	mov	r1, r3
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 f91d 	bl	800b96e <USBD_CtlSendData>
      break;
 800b734:	e004      	b.n	800b740 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800b736:	6839      	ldr	r1, [r7, #0]
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 f8a7 	bl	800b88c <USBD_CtlError>
      break;
 800b73e:	bf00      	nop
}
 800b740:	bf00      	nop
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b758:	3b01      	subs	r3, #1
 800b75a:	2b02      	cmp	r3, #2
 800b75c:	d81e      	bhi.n	800b79c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	88db      	ldrh	r3, [r3, #6]
 800b762:	2b02      	cmp	r3, #2
 800b764:	d004      	beq.n	800b770 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b766:	6839      	ldr	r1, [r7, #0]
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 f88f 	bl	800b88c <USBD_CtlError>
      break;
 800b76e:	e01a      	b.n	800b7a6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2201      	movs	r2, #1
 800b774:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d005      	beq.n	800b78c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	f043 0202 	orr.w	r2, r3, #2
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	330c      	adds	r3, #12
 800b790:	2202      	movs	r2, #2
 800b792:	4619      	mov	r1, r3
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 f8ea 	bl	800b96e <USBD_CtlSendData>
    break;
 800b79a:	e004      	b.n	800b7a6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800b79c:	6839      	ldr	r1, [r7, #0]
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 f874 	bl	800b88c <USBD_CtlError>
    break;
 800b7a4:	bf00      	nop
  }
}
 800b7a6:	bf00      	nop
 800b7a8:	3708      	adds	r7, #8
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}

0800b7ae <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7ae:	b580      	push	{r7, lr}
 800b7b0:	b082      	sub	sp, #8
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
 800b7b6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	885b      	ldrh	r3, [r3, #2]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d106      	bne.n	800b7ce <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 f92a 	bl	800ba22 <USBD_CtlSendStatus>
  }
}
 800b7ce:	bf00      	nop
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}

0800b7d6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b082      	sub	sp, #8
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
 800b7de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7e6:	3b01      	subs	r3, #1
 800b7e8:	2b02      	cmp	r3, #2
 800b7ea:	d80b      	bhi.n	800b804 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	885b      	ldrh	r3, [r3, #2]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d10c      	bne.n	800b80e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 f910 	bl	800ba22 <USBD_CtlSendStatus>
      }
      break;
 800b802:	e004      	b.n	800b80e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b804:	6839      	ldr	r1, [r7, #0]
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 f840 	bl	800b88c <USBD_CtlError>
      break;
 800b80c:	e000      	b.n	800b810 <USBD_ClrFeature+0x3a>
      break;
 800b80e:	bf00      	nop
  }
}
 800b810:	bf00      	nop
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	781a      	ldrb	r2, [r3, #0]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	3301      	adds	r3, #1
 800b832:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	781a      	ldrb	r2, [r3, #0]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	3301      	adds	r3, #1
 800b840:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f7ff fad4 	bl	800adf0 <SWAPBYTE>
 800b848:	4603      	mov	r3, r0
 800b84a:	461a      	mov	r2, r3
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	3301      	adds	r3, #1
 800b854:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	3301      	adds	r3, #1
 800b85a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	f7ff fac7 	bl	800adf0 <SWAPBYTE>
 800b862:	4603      	mov	r3, r0
 800b864:	461a      	mov	r2, r3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	3301      	adds	r3, #1
 800b86e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	3301      	adds	r3, #1
 800b874:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	f7ff faba 	bl	800adf0 <SWAPBYTE>
 800b87c:	4603      	mov	r3, r0
 800b87e:	461a      	mov	r2, r3
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	80da      	strh	r2, [r3, #6]
}
 800b884:	bf00      	nop
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b896:	2180      	movs	r1, #128	; 0x80
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 fd43 	bl	800c324 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b89e:	2100      	movs	r1, #0
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 fd3f 	bl	800c324 <USBD_LL_StallEP>
}
 800b8a6:	bf00      	nop
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b086      	sub	sp, #24
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	60f8      	str	r0, [r7, #12]
 800b8b6:	60b9      	str	r1, [r7, #8]
 800b8b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d036      	beq.n	800b932 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b8c8:	6938      	ldr	r0, [r7, #16]
 800b8ca:	f000 f836 	bl	800b93a <USBD_GetLen>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	005b      	lsls	r3, r3, #1
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b8dc:	7dfb      	ldrb	r3, [r7, #23]
 800b8de:	68ba      	ldr	r2, [r7, #8]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	7812      	ldrb	r2, [r2, #0]
 800b8e6:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8e8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b8ee:	7dfb      	ldrb	r3, [r7, #23]
 800b8f0:	68ba      	ldr	r2, [r7, #8]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	2203      	movs	r2, #3
 800b8f6:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8f8:	7dfb      	ldrb	r3, [r7, #23]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b8fe:	e013      	b.n	800b928 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b900:	7dfb      	ldrb	r3, [r7, #23]
 800b902:	68ba      	ldr	r2, [r7, #8]
 800b904:	4413      	add	r3, r2
 800b906:	693a      	ldr	r2, [r7, #16]
 800b908:	7812      	ldrb	r2, [r2, #0]
 800b90a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	3301      	adds	r3, #1
 800b910:	613b      	str	r3, [r7, #16]
    idx++;
 800b912:	7dfb      	ldrb	r3, [r7, #23]
 800b914:	3301      	adds	r3, #1
 800b916:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b918:	7dfb      	ldrb	r3, [r7, #23]
 800b91a:	68ba      	ldr	r2, [r7, #8]
 800b91c:	4413      	add	r3, r2
 800b91e:	2200      	movs	r2, #0
 800b920:	701a      	strb	r2, [r3, #0]
    idx++;
 800b922:	7dfb      	ldrb	r3, [r7, #23]
 800b924:	3301      	adds	r3, #1
 800b926:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1e7      	bne.n	800b900 <USBD_GetString+0x52>
 800b930:	e000      	b.n	800b934 <USBD_GetString+0x86>
    return;
 800b932:	bf00      	nop
  }
}
 800b934:	3718      	adds	r7, #24
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b93a:	b480      	push	{r7}
 800b93c:	b085      	sub	sp, #20
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b942:	2300      	movs	r3, #0
 800b944:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b94a:	e005      	b.n	800b958 <USBD_GetLen+0x1e>
  {
    len++;
 800b94c:	7bfb      	ldrb	r3, [r7, #15]
 800b94e:	3301      	adds	r3, #1
 800b950:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	3301      	adds	r3, #1
 800b956:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d1f5      	bne.n	800b94c <USBD_GetLen+0x12>
  }

  return len;
 800b960:	7bfb      	ldrb	r3, [r7, #15]
}
 800b962:	4618      	mov	r0, r3
 800b964:	3714      	adds	r7, #20
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr

0800b96e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b084      	sub	sp, #16
 800b972:	af00      	add	r7, sp, #0
 800b974:	60f8      	str	r0, [r7, #12]
 800b976:	60b9      	str	r1, [r7, #8]
 800b978:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2202      	movs	r2, #2
 800b97e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	68ba      	ldr	r2, [r7, #8]
 800b992:	2100      	movs	r1, #0
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	f000 fd4e 	bl	800c436 <USBD_LL_Transmit>

  return USBD_OK;
 800b99a:	2300      	movs	r3, #0
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3710      	adds	r7, #16
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	68ba      	ldr	r2, [r7, #8]
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	68f8      	ldr	r0, [r7, #12]
 800b9b8:	f000 fd3d 	bl	800c436 <USBD_LL_Transmit>

  return USBD_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3710      	adds	r7, #16
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b084      	sub	sp, #16
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	60f8      	str	r0, [r7, #12]
 800b9ce:	60b9      	str	r1, [r7, #8]
 800b9d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2203      	movs	r2, #3
 800b9d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f000 fd41 	bl	800c478 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9f6:	2300      	movs	r3, #0
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3710      	adds	r7, #16
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	2100      	movs	r1, #0
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f000 fd30 	bl	800c478 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b082      	sub	sp, #8
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2204      	movs	r2, #4
 800ba2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba32:	2300      	movs	r3, #0
 800ba34:	2200      	movs	r2, #0
 800ba36:	2100      	movs	r1, #0
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 fcfc 	bl	800c436 <USBD_LL_Transmit>

  return USBD_OK;
 800ba3e:	2300      	movs	r3, #0
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3708      	adds	r7, #8
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2205      	movs	r2, #5
 800ba54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba58:	2300      	movs	r3, #0
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	2100      	movs	r1, #0
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 fd0a 	bl	800c478 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
	...

0800ba70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba74:	2200      	movs	r2, #0
 800ba76:	4918      	ldr	r1, [pc, #96]	; (800bad8 <MX_USB_DEVICE_Init+0x68>)
 800ba78:	4818      	ldr	r0, [pc, #96]	; (800badc <MX_USB_DEVICE_Init+0x6c>)
 800ba7a:	f7fe fef4 	bl	800a866 <USBD_Init>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d001      	beq.n	800ba88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ba84:	f7f6 f8fe 	bl	8001c84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800ba88:	4915      	ldr	r1, [pc, #84]	; (800bae0 <MX_USB_DEVICE_Init+0x70>)
 800ba8a:	4814      	ldr	r0, [pc, #80]	; (800badc <MX_USB_DEVICE_Init+0x6c>)
 800ba8c:	f7fe ff21 	bl	800a8d2 <USBD_RegisterClass>
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d001      	beq.n	800ba9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ba96:	f7f6 f8f5 	bl	8001c84 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800ba9a:	4912      	ldr	r1, [pc, #72]	; (800bae4 <MX_USB_DEVICE_Init+0x74>)
 800ba9c:	480f      	ldr	r0, [pc, #60]	; (800badc <MX_USB_DEVICE_Init+0x6c>)
 800ba9e:	f7fe fdb9 	bl	800a614 <USBD_AUDIO_RegisterInterface>
 800baa2:	4603      	mov	r3, r0
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d001      	beq.n	800baac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800baa8:	f7f6 f8ec 	bl	8001c84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800baac:	480b      	ldr	r0, [pc, #44]	; (800badc <MX_USB_DEVICE_Init+0x6c>)
 800baae:	f7fe ff31 	bl	800a914 <USBD_Start>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d001      	beq.n	800babc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bab8:	f7f6 f8e4 	bl	8001c84 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI);
 800babc:	490a      	ldr	r1, [pc, #40]	; (800bae8 <MX_USB_DEVICE_Init+0x78>)
 800babe:	4807      	ldr	r0, [pc, #28]	; (800badc <MX_USB_DEVICE_Init+0x6c>)
 800bac0:	f7fe ff07 	bl	800a8d2 <USBD_RegisterClass>

	USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800bac4:	4909      	ldr	r1, [pc, #36]	; (800baec <MX_USB_DEVICE_Init+0x7c>)
 800bac6:	4805      	ldr	r0, [pc, #20]	; (800badc <MX_USB_DEVICE_Init+0x6c>)
 800bac8:	f7fe feb6 	bl	800a838 <USBD_MIDI_RegisterInterface>

	USBD_Start(&hUsbDeviceFS);
 800bacc:	4803      	ldr	r0, [pc, #12]	; (800badc <MX_USB_DEVICE_Init+0x6c>)
 800bace:	f7fe ff21 	bl	800a914 <USBD_Start>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bad2:	bf00      	nop
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	200001f8 	.word	0x200001f8
 800badc:	200009cc 	.word	0x200009cc
 800bae0:	20000088 	.word	0x20000088
 800bae4:	200001dc 	.word	0x200001dc
 800bae8:	2000013c 	.word	0x2000013c
 800baec:	20000258 	.word	0x20000258

0800baf0 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b085      	sub	sp, #20
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 800bafc:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3714      	adds	r7, #20
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr

0800bb0a <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800bb0a:	b480      	push	{r7}
 800bb0c:	b083      	sub	sp, #12
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 800bb12:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b085      	sub	sp, #20
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800bb2e:	79fb      	ldrb	r3, [r7, #7]
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d001      	beq.n	800bb38 <AUDIO_AudioCmd_FS+0x18>
 800bb34:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800bb36:	e000      	b.n	800bb3a <AUDIO_AudioCmd_FS+0x1a>
    break;
 800bb38:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800bb3a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3714      	adds	r7, #20
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	4603      	mov	r3, r0
 800bb50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 800bb52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b083      	sub	sp, #12
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	4603      	mov	r3, r0
 800bb68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 800bb6a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	370c      	adds	r7, #12
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	4613      	mov	r3, r2
 800bb84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800bb86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3714      	adds	r7, #20
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800bb94:	b480      	push	{r7}
 800bb96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800bb98:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	4603      	mov	r3, r0
 800bbac:	6039      	str	r1, [r7, #0]
 800bbae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	2212      	movs	r2, #18
 800bbb4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bbb6:	4b03      	ldr	r3, [pc, #12]	; (800bbc4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	370c      	adds	r7, #12
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc2:	4770      	bx	lr
 800bbc4:	20000214 	.word	0x20000214

0800bbc8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	4603      	mov	r3, r0
 800bbd0:	6039      	str	r1, [r7, #0]
 800bbd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	2204      	movs	r2, #4
 800bbd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bbda:	4b03      	ldr	r3, [pc, #12]	; (800bbe8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr
 800bbe8:	20000228 	.word	0x20000228

0800bbec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	6039      	str	r1, [r7, #0]
 800bbf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bbf8:	79fb      	ldrb	r3, [r7, #7]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d105      	bne.n	800bc0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bbfe:	683a      	ldr	r2, [r7, #0]
 800bc00:	4907      	ldr	r1, [pc, #28]	; (800bc20 <USBD_FS_ProductStrDescriptor+0x34>)
 800bc02:	4808      	ldr	r0, [pc, #32]	; (800bc24 <USBD_FS_ProductStrDescriptor+0x38>)
 800bc04:	f7ff fe53 	bl	800b8ae <USBD_GetString>
 800bc08:	e004      	b.n	800bc14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc0a:	683a      	ldr	r2, [r7, #0]
 800bc0c:	4904      	ldr	r1, [pc, #16]	; (800bc20 <USBD_FS_ProductStrDescriptor+0x34>)
 800bc0e:	4805      	ldr	r0, [pc, #20]	; (800bc24 <USBD_FS_ProductStrDescriptor+0x38>)
 800bc10:	f7ff fe4d 	bl	800b8ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc14:	4b02      	ldr	r3, [pc, #8]	; (800bc20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	20000c9c 	.word	0x20000c9c
 800bc24:	0800c90c 	.word	0x0800c90c

0800bc28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	4603      	mov	r3, r0
 800bc30:	6039      	str	r1, [r7, #0]
 800bc32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bc34:	683a      	ldr	r2, [r7, #0]
 800bc36:	4904      	ldr	r1, [pc, #16]	; (800bc48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bc38:	4804      	ldr	r0, [pc, #16]	; (800bc4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bc3a:	f7ff fe38 	bl	800b8ae <USBD_GetString>
  return USBD_StrDesc;
 800bc3e:	4b02      	ldr	r3, [pc, #8]	; (800bc48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3708      	adds	r7, #8
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	20000c9c 	.word	0x20000c9c
 800bc4c:	0800c90c 	.word	0x0800c90c

0800bc50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	4603      	mov	r3, r0
 800bc58:	6039      	str	r1, [r7, #0]
 800bc5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	221a      	movs	r2, #26
 800bc60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bc62:	f000 f843 	bl	800bcec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bc66:	4b02      	ldr	r3, [pc, #8]	; (800bc70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3708      	adds	r7, #8
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	2000022c 	.word	0x2000022c

0800bc74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	6039      	str	r1, [r7, #0]
 800bc7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bc80:	79fb      	ldrb	r3, [r7, #7]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d105      	bne.n	800bc92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc86:	683a      	ldr	r2, [r7, #0]
 800bc88:	4907      	ldr	r1, [pc, #28]	; (800bca8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bc8a:	4808      	ldr	r0, [pc, #32]	; (800bcac <USBD_FS_ConfigStrDescriptor+0x38>)
 800bc8c:	f7ff fe0f 	bl	800b8ae <USBD_GetString>
 800bc90:	e004      	b.n	800bc9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc92:	683a      	ldr	r2, [r7, #0]
 800bc94:	4904      	ldr	r1, [pc, #16]	; (800bca8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bc96:	4805      	ldr	r0, [pc, #20]	; (800bcac <USBD_FS_ConfigStrDescriptor+0x38>)
 800bc98:	f7ff fe09 	bl	800b8ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc9c:	4b02      	ldr	r3, [pc, #8]	; (800bca8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3708      	adds	r7, #8
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	20000c9c 	.word	0x20000c9c
 800bcac:	0800c920 	.word	0x0800c920

0800bcb0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	6039      	str	r1, [r7, #0]
 800bcba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bcbc:	79fb      	ldrb	r3, [r7, #7]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d105      	bne.n	800bcce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bcc2:	683a      	ldr	r2, [r7, #0]
 800bcc4:	4907      	ldr	r1, [pc, #28]	; (800bce4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bcc6:	4808      	ldr	r0, [pc, #32]	; (800bce8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bcc8:	f7ff fdf1 	bl	800b8ae <USBD_GetString>
 800bccc:	e004      	b.n	800bcd8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bcce:	683a      	ldr	r2, [r7, #0]
 800bcd0:	4904      	ldr	r1, [pc, #16]	; (800bce4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bcd2:	4805      	ldr	r0, [pc, #20]	; (800bce8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bcd4:	f7ff fdeb 	bl	800b8ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcd8:	4b02      	ldr	r3, [pc, #8]	; (800bce4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3708      	adds	r7, #8
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	20000c9c 	.word	0x20000c9c
 800bce8:	0800c938 	.word	0x0800c938

0800bcec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bcf2:	4b0f      	ldr	r3, [pc, #60]	; (800bd30 <Get_SerialNum+0x44>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bcf8:	4b0e      	ldr	r3, [pc, #56]	; (800bd34 <Get_SerialNum+0x48>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bcfe:	4b0e      	ldr	r3, [pc, #56]	; (800bd38 <Get_SerialNum+0x4c>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	4413      	add	r3, r2
 800bd0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d009      	beq.n	800bd26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bd12:	2208      	movs	r2, #8
 800bd14:	4909      	ldr	r1, [pc, #36]	; (800bd3c <Get_SerialNum+0x50>)
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f000 f814 	bl	800bd44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bd1c:	2204      	movs	r2, #4
 800bd1e:	4908      	ldr	r1, [pc, #32]	; (800bd40 <Get_SerialNum+0x54>)
 800bd20:	68b8      	ldr	r0, [r7, #8]
 800bd22:	f000 f80f 	bl	800bd44 <IntToUnicode>
  }
}
 800bd26:	bf00      	nop
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	1fff7a10 	.word	0x1fff7a10
 800bd34:	1fff7a14 	.word	0x1fff7a14
 800bd38:	1fff7a18 	.word	0x1fff7a18
 800bd3c:	2000022e 	.word	0x2000022e
 800bd40:	2000023e 	.word	0x2000023e

0800bd44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b087      	sub	sp, #28
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	4613      	mov	r3, r2
 800bd50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bd52:	2300      	movs	r3, #0
 800bd54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bd56:	2300      	movs	r3, #0
 800bd58:	75fb      	strb	r3, [r7, #23]
 800bd5a:	e027      	b.n	800bdac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	0f1b      	lsrs	r3, r3, #28
 800bd60:	2b09      	cmp	r3, #9
 800bd62:	d80b      	bhi.n	800bd7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	0f1b      	lsrs	r3, r3, #28
 800bd68:	b2da      	uxtb	r2, r3
 800bd6a:	7dfb      	ldrb	r3, [r7, #23]
 800bd6c:	005b      	lsls	r3, r3, #1
 800bd6e:	4619      	mov	r1, r3
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	440b      	add	r3, r1
 800bd74:	3230      	adds	r2, #48	; 0x30
 800bd76:	b2d2      	uxtb	r2, r2
 800bd78:	701a      	strb	r2, [r3, #0]
 800bd7a:	e00a      	b.n	800bd92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	0f1b      	lsrs	r3, r3, #28
 800bd80:	b2da      	uxtb	r2, r3
 800bd82:	7dfb      	ldrb	r3, [r7, #23]
 800bd84:	005b      	lsls	r3, r3, #1
 800bd86:	4619      	mov	r1, r3
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	440b      	add	r3, r1
 800bd8c:	3237      	adds	r2, #55	; 0x37
 800bd8e:	b2d2      	uxtb	r2, r2
 800bd90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	011b      	lsls	r3, r3, #4
 800bd96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bd98:	7dfb      	ldrb	r3, [r7, #23]
 800bd9a:	005b      	lsls	r3, r3, #1
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	68ba      	ldr	r2, [r7, #8]
 800bda0:	4413      	add	r3, r2
 800bda2:	2200      	movs	r2, #0
 800bda4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bda6:	7dfb      	ldrb	r3, [r7, #23]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	75fb      	strb	r3, [r7, #23]
 800bdac:	7dfa      	ldrb	r2, [r7, #23]
 800bdae:	79fb      	ldrb	r3, [r7, #7]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d3d3      	bcc.n	800bd5c <IntToUnicode+0x18>
  }
}
 800bdb4:	bf00      	nop
 800bdb6:	371c      	adds	r7, #28
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <MIDI_DataRx>:
};

uint8_t flag_sendMidi = 0;

uint16_t MIDI_DataRx(uint8_t *msg, uint16_t length)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	460b      	mov	r3, r1
 800bdca:	807b      	strh	r3, [r7, #2]
  //uint8_t chan = msg[0] & 0x0F;
  uint8_t msgtype = msg[0] & 0xF0;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	f023 030f 	bic.w	r3, r3, #15
 800bdd4:	73fb      	strb	r3, [r7, #15]
  uint8_t b1 =  msg[2];
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	789b      	ldrb	r3, [r3, #2]
 800bdda:	73bb      	strb	r3, [r7, #14]
  uint8_t b2 =  msg[3];
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	78db      	ldrb	r3, [r3, #3]
 800bde0:	737b      	strb	r3, [r7, #13]
 // uint16_t b = ((b2 & 0x7F) << 7) | (b1 & 0x7F);
 
  switch (msgtype)
 800bde2:	7bfb      	ldrb	r3, [r7, #15]
 800bde4:	2bb0      	cmp	r3, #176	; 0xb0
 800bde6:	d01c      	beq.n	800be22 <MIDI_DataRx+0x62>
 800bde8:	2bb0      	cmp	r3, #176	; 0xb0
 800bdea:	dc05      	bgt.n	800bdf8 <MIDI_DataRx+0x38>
 800bdec:	2b90      	cmp	r3, #144	; 0x90
 800bdee:	d01a      	beq.n	800be26 <MIDI_DataRx+0x66>
 800bdf0:	2ba0      	cmp	r3, #160	; 0xa0
 800bdf2:	d01a      	beq.n	800be2a <MIDI_DataRx+0x6a>
 800bdf4:	2b80      	cmp	r3, #128	; 0x80
	  //key = b1;
	  //velocity = b2;
	  //notepos = key - 8 + transpose;
	  //stop_note(notepos);
	  //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7); //blink LED
	  break;
 800bdf6:	e01f      	b.n	800be38 <MIDI_DataRx+0x78>
  switch (msgtype)
 800bdf8:	2bd0      	cmp	r3, #208	; 0xd0
 800bdfa:	d018      	beq.n	800be2e <MIDI_DataRx+0x6e>
 800bdfc:	2bd0      	cmp	r3, #208	; 0xd0
 800bdfe:	dc01      	bgt.n	800be04 <MIDI_DataRx+0x44>
 800be00:	2bc0      	cmp	r3, #192	; 0xc0
							break;
					}*/
	  break;
  case 0xC0:
	  //data = b1;
	  break;
 800be02:	e019      	b.n	800be38 <MIDI_DataRx+0x78>
  switch (msgtype)
 800be04:	2be0      	cmp	r3, #224	; 0xe0
 800be06:	d014      	beq.n	800be32 <MIDI_DataRx+0x72>
 800be08:	2bf0      	cmp	r3, #240	; 0xf0
 800be0a:	d115      	bne.n	800be38 <MIDI_DataRx+0x78>
  case 0xE0:
	  //data = b2;
	  //		bend = data;
	  break;
  case 0xF0: {
	  if((b1 == 0x7E) && (b2 == 0x7F)) {
 800be0c:	7bbb      	ldrb	r3, [r7, #14]
 800be0e:	2b7e      	cmp	r3, #126	; 0x7e
 800be10:	d111      	bne.n	800be36 <MIDI_DataRx+0x76>
 800be12:	7b7b      	ldrb	r3, [r7, #13]
 800be14:	2b7f      	cmp	r3, #127	; 0x7f
 800be16:	d10e      	bne.n	800be36 <MIDI_DataRx+0x76>
		  MIDI_DataTx(SysexID, 15);
 800be18:	210f      	movs	r1, #15
 800be1a:	480a      	ldr	r0, [pc, #40]	; (800be44 <MIDI_DataRx+0x84>)
 800be1c:	f000 f814 	bl	800be48 <MIDI_DataTx>
	  }
	  break;
 800be20:	e009      	b.n	800be36 <MIDI_DataRx+0x76>
	  break;
 800be22:	bf00      	nop
 800be24:	e008      	b.n	800be38 <MIDI_DataRx+0x78>
	  break;
 800be26:	bf00      	nop
 800be28:	e006      	b.n	800be38 <MIDI_DataRx+0x78>
	  break;
 800be2a:	bf00      	nop
 800be2c:	e004      	b.n	800be38 <MIDI_DataRx+0x78>
	  break;
 800be2e:	bf00      	nop
 800be30:	e002      	b.n	800be38 <MIDI_DataRx+0x78>
	  break;
 800be32:	bf00      	nop
 800be34:	e000      	b.n	800be38 <MIDI_DataRx+0x78>
	  break;
 800be36:	bf00      	nop
  }
  }
  return 0;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	20000248 	.word	0x20000248

0800be48 <MIDI_DataTx>:

uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	460b      	mov	r3, r1
 800be52:	807b      	strh	r3, [r7, #2]
  uint32_t i = 0;
 800be54:	2300      	movs	r3, #0
 800be56:	60fb      	str	r3, [r7, #12]
  while (i < length) {
 800be58:	e017      	b.n	800be8a <MIDI_DataTx+0x42>
    APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	441a      	add	r2, r3
 800be60:	4b0f      	ldr	r3, [pc, #60]	; (800bea0 <MIDI_DataTx+0x58>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	7811      	ldrb	r1, [r2, #0]
 800be66:	4a0f      	ldr	r2, [pc, #60]	; (800bea4 <MIDI_DataTx+0x5c>)
 800be68:	54d1      	strb	r1, [r2, r3]
    APP_Rx_ptr_in++;
 800be6a:	4b0d      	ldr	r3, [pc, #52]	; (800bea0 <MIDI_DataTx+0x58>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	3301      	adds	r3, #1
 800be70:	4a0b      	ldr	r2, [pc, #44]	; (800bea0 <MIDI_DataTx+0x58>)
 800be72:	6013      	str	r3, [r2, #0]
    i++;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	3301      	adds	r3, #1
 800be78:	60fb      	str	r3, [r7, #12]
    if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 800be7a:	4b09      	ldr	r3, [pc, #36]	; (800bea0 <MIDI_DataTx+0x58>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be82:	d102      	bne.n	800be8a <MIDI_DataTx+0x42>
      APP_Rx_ptr_in = 0;
 800be84:	4b06      	ldr	r3, [pc, #24]	; (800bea0 <MIDI_DataTx+0x58>)
 800be86:	2200      	movs	r2, #0
 800be88:	601a      	str	r2, [r3, #0]
  while (i < length) {
 800be8a:	887b      	ldrh	r3, [r7, #2]
 800be8c:	68fa      	ldr	r2, [r7, #12]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d3e3      	bcc.n	800be5a <MIDI_DataTx+0x12>
    }
  }
  USBD_MIDI_SendPacket();
 800be92:	f7fe fc51 	bl	800a738 <USBD_MIDI_SendPacket>
  return USBD_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	2000037c 	.word	0x2000037c
 800bea4:	200008cc 	.word	0x200008cc

0800bea8 <MIDI_SendBuffer>:

uint16_t MIDI_SendBuffer(uint8_t *msg, uint16_t length){
 800bea8:	b480      	push	{r7}
 800beaa:	b085      	sub	sp, #20
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	460b      	mov	r3, r1
 800beb2:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800beb4:	2300      	movs	r3, #0
 800beb6:	60fb      	str	r3, [r7, #12]
	while (i < length) {
 800beb8:	e017      	b.n	800beea <MIDI_SendBuffer+0x42>
		APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	441a      	add	r2, r3
 800bec0:	4b11      	ldr	r3, [pc, #68]	; (800bf08 <MIDI_SendBuffer+0x60>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	7811      	ldrb	r1, [r2, #0]
 800bec6:	4a11      	ldr	r2, [pc, #68]	; (800bf0c <MIDI_SendBuffer+0x64>)
 800bec8:	54d1      	strb	r1, [r2, r3]
		APP_Rx_ptr_in++;
 800beca:	4b0f      	ldr	r3, [pc, #60]	; (800bf08 <MIDI_SendBuffer+0x60>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	3301      	adds	r3, #1
 800bed0:	4a0d      	ldr	r2, [pc, #52]	; (800bf08 <MIDI_SendBuffer+0x60>)
 800bed2:	6013      	str	r3, [r2, #0]
		i++;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	3301      	adds	r3, #1
 800bed8:	60fb      	str	r3, [r7, #12]
		if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 800beda:	4b0b      	ldr	r3, [pc, #44]	; (800bf08 <MIDI_SendBuffer+0x60>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bee2:	d102      	bne.n	800beea <MIDI_SendBuffer+0x42>
			APP_Rx_ptr_in = 0;
 800bee4:	4b08      	ldr	r3, [pc, #32]	; (800bf08 <MIDI_SendBuffer+0x60>)
 800bee6:	2200      	movs	r2, #0
 800bee8:	601a      	str	r2, [r3, #0]
	while (i < length) {
 800beea:	887b      	ldrh	r3, [r7, #2]
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d3e3      	bcc.n	800beba <MIDI_SendBuffer+0x12>
		}
	}
	flag_sendMidi = 1;
 800bef2:	4b07      	ldr	r3, [pc, #28]	; (800bf10 <MIDI_SendBuffer+0x68>)
 800bef4:	2201      	movs	r2, #1
 800bef6:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	3714      	adds	r7, #20
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	2000037c 	.word	0x2000037c
 800bf0c:	200008cc 	.word	0x200008cc
 800bf10:	2000038a 	.word	0x2000038a

0800bf14 <MIDI_SendCheck>:

void MIDI_SendCheck(void){
 800bf14:	b580      	push	{r7, lr}
 800bf16:	af00      	add	r7, sp, #0
	if (flag_sendMidi != 0){
 800bf18:	4b07      	ldr	r3, [pc, #28]	; (800bf38 <MIDI_SendCheck+0x24>)
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d008      	beq.n	800bf32 <MIDI_SendCheck+0x1e>
		if (USB_Tx_State == 0){
 800bf20:	4b06      	ldr	r3, [pc, #24]	; (800bf3c <MIDI_SendCheck+0x28>)
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d104      	bne.n	800bf32 <MIDI_SendCheck+0x1e>
			USBD_MIDI_SendPacket();
 800bf28:	f7fe fc06 	bl	800a738 <USBD_MIDI_SendPacket>
			flag_sendMidi = 0;
 800bf2c:	4b02      	ldr	r3, [pc, #8]	; (800bf38 <MIDI_SendCheck+0x24>)
 800bf2e:	2200      	movs	r2, #0
 800bf30:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800bf32:	bf00      	nop
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	2000038a 	.word	0x2000038a
 800bf3c:	20000388 	.word	0x20000388

0800bf40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b08a      	sub	sp, #40	; 0x28
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf48:	f107 0314 	add.w	r3, r7, #20
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	601a      	str	r2, [r3, #0]
 800bf50:	605a      	str	r2, [r3, #4]
 800bf52:	609a      	str	r2, [r3, #8]
 800bf54:	60da      	str	r2, [r3, #12]
 800bf56:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf60:	d13a      	bne.n	800bfd8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf62:	2300      	movs	r3, #0
 800bf64:	613b      	str	r3, [r7, #16]
 800bf66:	4b1e      	ldr	r3, [pc, #120]	; (800bfe0 <HAL_PCD_MspInit+0xa0>)
 800bf68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf6a:	4a1d      	ldr	r2, [pc, #116]	; (800bfe0 <HAL_PCD_MspInit+0xa0>)
 800bf6c:	f043 0301 	orr.w	r3, r3, #1
 800bf70:	6313      	str	r3, [r2, #48]	; 0x30
 800bf72:	4b1b      	ldr	r3, [pc, #108]	; (800bfe0 <HAL_PCD_MspInit+0xa0>)
 800bf74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf76:	f003 0301 	and.w	r3, r3, #1
 800bf7a:	613b      	str	r3, [r7, #16]
 800bf7c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bf7e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bf82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf84:	2302      	movs	r3, #2
 800bf86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf8c:	2303      	movs	r3, #3
 800bf8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bf90:	230a      	movs	r3, #10
 800bf92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf94:	f107 0314 	add.w	r3, r7, #20
 800bf98:	4619      	mov	r1, r3
 800bf9a:	4812      	ldr	r0, [pc, #72]	; (800bfe4 <HAL_PCD_MspInit+0xa4>)
 800bf9c:	f7f6 ffe2 	bl	8002f64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bfa0:	4b0f      	ldr	r3, [pc, #60]	; (800bfe0 <HAL_PCD_MspInit+0xa0>)
 800bfa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfa4:	4a0e      	ldr	r2, [pc, #56]	; (800bfe0 <HAL_PCD_MspInit+0xa0>)
 800bfa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfaa:	6353      	str	r3, [r2, #52]	; 0x34
 800bfac:	2300      	movs	r3, #0
 800bfae:	60fb      	str	r3, [r7, #12]
 800bfb0:	4b0b      	ldr	r3, [pc, #44]	; (800bfe0 <HAL_PCD_MspInit+0xa0>)
 800bfb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfb4:	4a0a      	ldr	r2, [pc, #40]	; (800bfe0 <HAL_PCD_MspInit+0xa0>)
 800bfb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bfba:	6453      	str	r3, [r2, #68]	; 0x44
 800bfbc:	4b08      	ldr	r3, [pc, #32]	; (800bfe0 <HAL_PCD_MspInit+0xa0>)
 800bfbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bfc4:	60fb      	str	r3, [r7, #12]
 800bfc6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bfc8:	2200      	movs	r2, #0
 800bfca:	2100      	movs	r1, #0
 800bfcc:	2043      	movs	r0, #67	; 0x43
 800bfce:	f7f6 fe68 	bl	8002ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bfd2:	2043      	movs	r0, #67	; 0x43
 800bfd4:	f7f6 fe81 	bl	8002cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bfd8:	bf00      	nop
 800bfda:	3728      	adds	r7, #40	; 0x28
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	40023800 	.word	0x40023800
 800bfe4:	40020000 	.word	0x40020000

0800bfe8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bffc:	4619      	mov	r1, r3
 800bffe:	4610      	mov	r0, r2
 800c000:	f7fe fcd3 	bl	800a9aa <USBD_LL_SetupStage>
}
 800c004:	bf00      	nop
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	460b      	mov	r3, r1
 800c016:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c01e:	78fa      	ldrb	r2, [r7, #3]
 800c020:	6879      	ldr	r1, [r7, #4]
 800c022:	4613      	mov	r3, r2
 800c024:	00db      	lsls	r3, r3, #3
 800c026:	1a9b      	subs	r3, r3, r2
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	440b      	add	r3, r1
 800c02c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c030:	681a      	ldr	r2, [r3, #0]
 800c032:	78fb      	ldrb	r3, [r7, #3]
 800c034:	4619      	mov	r1, r3
 800c036:	f7fe fd0b 	bl	800aa50 <USBD_LL_DataOutStage>
}
 800c03a:	bf00      	nop
 800c03c:	3708      	adds	r7, #8
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b082      	sub	sp, #8
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
 800c04a:	460b      	mov	r3, r1
 800c04c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c054:	78fa      	ldrb	r2, [r7, #3]
 800c056:	6879      	ldr	r1, [r7, #4]
 800c058:	4613      	mov	r3, r2
 800c05a:	00db      	lsls	r3, r3, #3
 800c05c:	1a9b      	subs	r3, r3, r2
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	440b      	add	r3, r1
 800c062:	3348      	adds	r3, #72	; 0x48
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	78fb      	ldrb	r3, [r7, #3]
 800c068:	4619      	mov	r1, r3
 800c06a:	f7fe fd54 	bl	800ab16 <USBD_LL_DataInStage>
}
 800c06e:	bf00      	nop
 800c070:	3708      	adds	r7, #8
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b082      	sub	sp, #8
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c084:	4618      	mov	r0, r3
 800c086:	f7fe fe58 	bl	800ad3a <USBD_LL_SOF>
}
 800c08a:	bf00      	nop
 800c08c:	3708      	adds	r7, #8
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c092:	b580      	push	{r7, lr}
 800c094:	b084      	sub	sp, #16
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c09a:	2301      	movs	r3, #1
 800c09c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	68db      	ldr	r3, [r3, #12]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d102      	bne.n	800c0ac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	73fb      	strb	r3, [r7, #15]
 800c0aa:	e008      	b.n	800c0be <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	68db      	ldr	r3, [r3, #12]
 800c0b0:	2b02      	cmp	r3, #2
 800c0b2:	d102      	bne.n	800c0ba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	73fb      	strb	r3, [r7, #15]
 800c0b8:	e001      	b.n	800c0be <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c0ba:	f7f5 fde3 	bl	8001c84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c0c4:	7bfa      	ldrb	r2, [r7, #15]
 800c0c6:	4611      	mov	r1, r2
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7fe fdfb 	bl	800acc4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f7fe fdb4 	bl	800ac42 <USBD_LL_Reset>
}
 800c0da:	bf00      	nop
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
	...

0800c0e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7fe fdf6 	bl	800ace4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	6812      	ldr	r2, [r2, #0]
 800c106:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c10a:	f043 0301 	orr.w	r3, r3, #1
 800c10e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6a1b      	ldr	r3, [r3, #32]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d005      	beq.n	800c124 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c118:	4b04      	ldr	r3, [pc, #16]	; (800c12c <HAL_PCD_SuspendCallback+0x48>)
 800c11a:	691b      	ldr	r3, [r3, #16]
 800c11c:	4a03      	ldr	r2, [pc, #12]	; (800c12c <HAL_PCD_SuspendCallback+0x48>)
 800c11e:	f043 0306 	orr.w	r3, r3, #6
 800c122:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c124:	bf00      	nop
 800c126:	3708      	adds	r7, #8
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	e000ed00 	.word	0xe000ed00

0800c130 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c13e:	4618      	mov	r0, r3
 800c140:	f7fe fde5 	bl	800ad0e <USBD_LL_Resume>
}
 800c144:	bf00      	nop
 800c146:	3708      	adds	r7, #8
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	460b      	mov	r3, r1
 800c156:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c15e:	78fa      	ldrb	r2, [r7, #3]
 800c160:	4611      	mov	r1, r2
 800c162:	4618      	mov	r0, r3
 800c164:	f7fe fe10 	bl	800ad88 <USBD_LL_IsoOUTIncomplete>
}
 800c168:	bf00      	nop
 800c16a:	3708      	adds	r7, #8
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	460b      	mov	r3, r1
 800c17a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c182:	78fa      	ldrb	r2, [r7, #3]
 800c184:	4611      	mov	r1, r2
 800c186:	4618      	mov	r0, r3
 800c188:	f7fe fdf1 	bl	800ad6e <USBD_LL_IsoINIncomplete>
}
 800c18c:	bf00      	nop
 800c18e:	3708      	adds	r7, #8
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7fe fdfd 	bl	800ada2 <USBD_LL_DevConnected>
}
 800c1a8:	bf00      	nop
 800c1aa:	3708      	adds	r7, #8
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7fe fdfa 	bl	800adb8 <USBD_LL_DevDisconnected>
}
 800c1c4:	bf00      	nop
 800c1c6:	3708      	adds	r7, #8
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d13c      	bne.n	800c256 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c1dc:	4a20      	ldr	r2, [pc, #128]	; (800c260 <USBD_LL_Init+0x94>)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	4a1e      	ldr	r2, [pc, #120]	; (800c260 <USBD_LL_Init+0x94>)
 800c1e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c1ec:	4b1c      	ldr	r3, [pc, #112]	; (800c260 <USBD_LL_Init+0x94>)
 800c1ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c1f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c1f4:	4b1a      	ldr	r3, [pc, #104]	; (800c260 <USBD_LL_Init+0x94>)
 800c1f6:	2204      	movs	r2, #4
 800c1f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c1fa:	4b19      	ldr	r3, [pc, #100]	; (800c260 <USBD_LL_Init+0x94>)
 800c1fc:	2202      	movs	r2, #2
 800c1fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c200:	4b17      	ldr	r3, [pc, #92]	; (800c260 <USBD_LL_Init+0x94>)
 800c202:	2200      	movs	r2, #0
 800c204:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c206:	4b16      	ldr	r3, [pc, #88]	; (800c260 <USBD_LL_Init+0x94>)
 800c208:	2202      	movs	r2, #2
 800c20a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c20c:	4b14      	ldr	r3, [pc, #80]	; (800c260 <USBD_LL_Init+0x94>)
 800c20e:	2200      	movs	r2, #0
 800c210:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c212:	4b13      	ldr	r3, [pc, #76]	; (800c260 <USBD_LL_Init+0x94>)
 800c214:	2200      	movs	r2, #0
 800c216:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c218:	4b11      	ldr	r3, [pc, #68]	; (800c260 <USBD_LL_Init+0x94>)
 800c21a:	2200      	movs	r2, #0
 800c21c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c21e:	4b10      	ldr	r3, [pc, #64]	; (800c260 <USBD_LL_Init+0x94>)
 800c220:	2200      	movs	r2, #0
 800c222:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c224:	4b0e      	ldr	r3, [pc, #56]	; (800c260 <USBD_LL_Init+0x94>)
 800c226:	2200      	movs	r2, #0
 800c228:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c22a:	480d      	ldr	r0, [pc, #52]	; (800c260 <USBD_LL_Init+0x94>)
 800c22c:	f7f9 f939 	bl	80054a2 <HAL_PCD_Init>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d001      	beq.n	800c23a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c236:	f7f5 fd25 	bl	8001c84 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c23a:	2180      	movs	r1, #128	; 0x80
 800c23c:	4808      	ldr	r0, [pc, #32]	; (800c260 <USBD_LL_Init+0x94>)
 800c23e:	f7fa fa96 	bl	800676e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c242:	2240      	movs	r2, #64	; 0x40
 800c244:	2100      	movs	r1, #0
 800c246:	4806      	ldr	r0, [pc, #24]	; (800c260 <USBD_LL_Init+0x94>)
 800c248:	f7fa fa4a 	bl	80066e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c24c:	2280      	movs	r2, #128	; 0x80
 800c24e:	2101      	movs	r1, #1
 800c250:	4803      	ldr	r0, [pc, #12]	; (800c260 <USBD_LL_Init+0x94>)
 800c252:	f7fa fa45 	bl	80066e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c256:	2300      	movs	r3, #0
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3708      	adds	r7, #8
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	20000e9c 	.word	0x20000e9c

0800c264 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c26c:	2300      	movs	r3, #0
 800c26e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c270:	2300      	movs	r3, #0
 800c272:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7f9 fa2e 	bl	80056dc <HAL_PCD_Start>
 800c280:	4603      	mov	r3, r0
 800c282:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c284:	7bfb      	ldrb	r3, [r7, #15]
 800c286:	4618      	mov	r0, r3
 800c288:	f000 f92a 	bl	800c4e0 <USBD_Get_USB_Status>
 800c28c:	4603      	mov	r3, r0
 800c28e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c290:	7bbb      	ldrb	r3, [r7, #14]
}
 800c292:	4618      	mov	r0, r3
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}

0800c29a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c29a:	b580      	push	{r7, lr}
 800c29c:	b084      	sub	sp, #16
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
 800c2a2:	4608      	mov	r0, r1
 800c2a4:	4611      	mov	r1, r2
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	70fb      	strb	r3, [r7, #3]
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	70bb      	strb	r3, [r7, #2]
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c2c2:	78bb      	ldrb	r3, [r7, #2]
 800c2c4:	883a      	ldrh	r2, [r7, #0]
 800c2c6:	78f9      	ldrb	r1, [r7, #3]
 800c2c8:	f7f9 fe12 	bl	8005ef0 <HAL_PCD_EP_Open>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2d0:	7bfb      	ldrb	r3, [r7, #15]
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f000 f904 	bl	800c4e0 <USBD_Get_USB_Status>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3710      	adds	r7, #16
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b084      	sub	sp, #16
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c300:	78fa      	ldrb	r2, [r7, #3]
 800c302:	4611      	mov	r1, r2
 800c304:	4618      	mov	r0, r3
 800c306:	f7f9 fe5b 	bl	8005fc0 <HAL_PCD_EP_Close>
 800c30a:	4603      	mov	r3, r0
 800c30c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c30e:	7bfb      	ldrb	r3, [r7, #15]
 800c310:	4618      	mov	r0, r3
 800c312:	f000 f8e5 	bl	800c4e0 <USBD_Get_USB_Status>
 800c316:	4603      	mov	r3, r0
 800c318:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c31a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3710      	adds	r7, #16
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	460b      	mov	r3, r1
 800c32e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c330:	2300      	movs	r3, #0
 800c332:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c334:	2300      	movs	r3, #0
 800c336:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c33e:	78fa      	ldrb	r2, [r7, #3]
 800c340:	4611      	mov	r1, r2
 800c342:	4618      	mov	r0, r3
 800c344:	f7f9 ff33 	bl	80061ae <HAL_PCD_EP_SetStall>
 800c348:	4603      	mov	r3, r0
 800c34a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c34c:	7bfb      	ldrb	r3, [r7, #15]
 800c34e:	4618      	mov	r0, r3
 800c350:	f000 f8c6 	bl	800c4e0 <USBD_Get_USB_Status>
 800c354:	4603      	mov	r3, r0
 800c356:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c358:	7bbb      	ldrb	r3, [r7, #14]
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3710      	adds	r7, #16
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}

0800c362 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c362:	b580      	push	{r7, lr}
 800c364:	b084      	sub	sp, #16
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
 800c36a:	460b      	mov	r3, r1
 800c36c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c36e:	2300      	movs	r3, #0
 800c370:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c372:	2300      	movs	r3, #0
 800c374:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c37c:	78fa      	ldrb	r2, [r7, #3]
 800c37e:	4611      	mov	r1, r2
 800c380:	4618      	mov	r0, r3
 800c382:	f7f9 ff78 	bl	8006276 <HAL_PCD_EP_ClrStall>
 800c386:	4603      	mov	r3, r0
 800c388:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c38a:	7bfb      	ldrb	r3, [r7, #15]
 800c38c:	4618      	mov	r0, r3
 800c38e:	f000 f8a7 	bl	800c4e0 <USBD_Get_USB_Status>
 800c392:	4603      	mov	r3, r0
 800c394:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c396:	7bbb      	ldrb	r3, [r7, #14]
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3710      	adds	r7, #16
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c3b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c3b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	da0b      	bge.n	800c3d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c3bc:	78fb      	ldrb	r3, [r7, #3]
 800c3be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3c2:	68f9      	ldr	r1, [r7, #12]
 800c3c4:	4613      	mov	r3, r2
 800c3c6:	00db      	lsls	r3, r3, #3
 800c3c8:	1a9b      	subs	r3, r3, r2
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	440b      	add	r3, r1
 800c3ce:	333e      	adds	r3, #62	; 0x3e
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	e00b      	b.n	800c3ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c3d4:	78fb      	ldrb	r3, [r7, #3]
 800c3d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3da:	68f9      	ldr	r1, [r7, #12]
 800c3dc:	4613      	mov	r3, r2
 800c3de:	00db      	lsls	r3, r3, #3
 800c3e0:	1a9b      	subs	r3, r3, r2
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	440b      	add	r3, r1
 800c3e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c3ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3714      	adds	r7, #20
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr

0800c3f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	460b      	mov	r3, r1
 800c402:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c404:	2300      	movs	r3, #0
 800c406:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c408:	2300      	movs	r3, #0
 800c40a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c412:	78fa      	ldrb	r2, [r7, #3]
 800c414:	4611      	mov	r1, r2
 800c416:	4618      	mov	r0, r3
 800c418:	f7f9 fd45 	bl	8005ea6 <HAL_PCD_SetAddress>
 800c41c:	4603      	mov	r3, r0
 800c41e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c420:	7bfb      	ldrb	r3, [r7, #15]
 800c422:	4618      	mov	r0, r3
 800c424:	f000 f85c 	bl	800c4e0 <USBD_Get_USB_Status>
 800c428:	4603      	mov	r3, r0
 800c42a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c42c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3710      	adds	r7, #16
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c436:	b580      	push	{r7, lr}
 800c438:	b086      	sub	sp, #24
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	60f8      	str	r0, [r7, #12]
 800c43e:	607a      	str	r2, [r7, #4]
 800c440:	603b      	str	r3, [r7, #0]
 800c442:	460b      	mov	r3, r1
 800c444:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c446:	2300      	movs	r3, #0
 800c448:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c44a:	2300      	movs	r3, #0
 800c44c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c454:	7af9      	ldrb	r1, [r7, #11]
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	f7f9 fe5e 	bl	800611a <HAL_PCD_EP_Transmit>
 800c45e:	4603      	mov	r3, r0
 800c460:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c462:	7dfb      	ldrb	r3, [r7, #23]
 800c464:	4618      	mov	r0, r3
 800c466:	f000 f83b 	bl	800c4e0 <USBD_Get_USB_Status>
 800c46a:	4603      	mov	r3, r0
 800c46c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c46e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c470:	4618      	mov	r0, r3
 800c472:	3718      	adds	r7, #24
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	607a      	str	r2, [r7, #4]
 800c482:	603b      	str	r3, [r7, #0]
 800c484:	460b      	mov	r3, r1
 800c486:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c488:	2300      	movs	r3, #0
 800c48a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c48c:	2300      	movs	r3, #0
 800c48e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c496:	7af9      	ldrb	r1, [r7, #11]
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	f7f9 fdda 	bl	8006054 <HAL_PCD_EP_Receive>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4a4:	7dfb      	ldrb	r3, [r7, #23]
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f000 f81a 	bl	800c4e0 <USBD_Get_USB_Status>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3718      	adds	r7, #24
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b082      	sub	sp, #8
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c4cc:	78fa      	ldrb	r2, [r7, #3]
 800c4ce:	4611      	mov	r1, r2
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7f9 fe0a 	bl	80060ea <HAL_PCD_EP_GetRxCount>
 800c4d6:	4603      	mov	r3, r0
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3708      	adds	r7, #8
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c4ee:	79fb      	ldrb	r3, [r7, #7]
 800c4f0:	2b03      	cmp	r3, #3
 800c4f2:	d817      	bhi.n	800c524 <USBD_Get_USB_Status+0x44>
 800c4f4:	a201      	add	r2, pc, #4	; (adr r2, 800c4fc <USBD_Get_USB_Status+0x1c>)
 800c4f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4fa:	bf00      	nop
 800c4fc:	0800c50d 	.word	0x0800c50d
 800c500:	0800c513 	.word	0x0800c513
 800c504:	0800c519 	.word	0x0800c519
 800c508:	0800c51f 	.word	0x0800c51f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c50c:	2300      	movs	r3, #0
 800c50e:	73fb      	strb	r3, [r7, #15]
    break;
 800c510:	e00b      	b.n	800c52a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c512:	2303      	movs	r3, #3
 800c514:	73fb      	strb	r3, [r7, #15]
    break;
 800c516:	e008      	b.n	800c52a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c518:	2301      	movs	r3, #1
 800c51a:	73fb      	strb	r3, [r7, #15]
    break;
 800c51c:	e005      	b.n	800c52a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c51e:	2303      	movs	r3, #3
 800c520:	73fb      	strb	r3, [r7, #15]
    break;
 800c522:	e002      	b.n	800c52a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c524:	2303      	movs	r3, #3
 800c526:	73fb      	strb	r3, [r7, #15]
    break;
 800c528:	bf00      	nop
  }
  return usb_status;
 800c52a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3714      	adds	r7, #20
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <__errno>:
 800c538:	4b01      	ldr	r3, [pc, #4]	; (800c540 <__errno+0x8>)
 800c53a:	6818      	ldr	r0, [r3, #0]
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop
 800c540:	20000260 	.word	0x20000260

0800c544 <__libc_init_array>:
 800c544:	b570      	push	{r4, r5, r6, lr}
 800c546:	4e0d      	ldr	r6, [pc, #52]	; (800c57c <__libc_init_array+0x38>)
 800c548:	4c0d      	ldr	r4, [pc, #52]	; (800c580 <__libc_init_array+0x3c>)
 800c54a:	1ba4      	subs	r4, r4, r6
 800c54c:	10a4      	asrs	r4, r4, #2
 800c54e:	2500      	movs	r5, #0
 800c550:	42a5      	cmp	r5, r4
 800c552:	d109      	bne.n	800c568 <__libc_init_array+0x24>
 800c554:	4e0b      	ldr	r6, [pc, #44]	; (800c584 <__libc_init_array+0x40>)
 800c556:	4c0c      	ldr	r4, [pc, #48]	; (800c588 <__libc_init_array+0x44>)
 800c558:	f000 f8ea 	bl	800c730 <_init>
 800c55c:	1ba4      	subs	r4, r4, r6
 800c55e:	10a4      	asrs	r4, r4, #2
 800c560:	2500      	movs	r5, #0
 800c562:	42a5      	cmp	r5, r4
 800c564:	d105      	bne.n	800c572 <__libc_init_array+0x2e>
 800c566:	bd70      	pop	{r4, r5, r6, pc}
 800c568:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c56c:	4798      	blx	r3
 800c56e:	3501      	adds	r5, #1
 800c570:	e7ee      	b.n	800c550 <__libc_init_array+0xc>
 800c572:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c576:	4798      	blx	r3
 800c578:	3501      	adds	r5, #1
 800c57a:	e7f2      	b.n	800c562 <__libc_init_array+0x1e>
 800c57c:	08040654 	.word	0x08040654
 800c580:	08040654 	.word	0x08040654
 800c584:	08040654 	.word	0x08040654
 800c588:	08040658 	.word	0x08040658

0800c58c <malloc>:
 800c58c:	4b02      	ldr	r3, [pc, #8]	; (800c598 <malloc+0xc>)
 800c58e:	4601      	mov	r1, r0
 800c590:	6818      	ldr	r0, [r3, #0]
 800c592:	f000 b861 	b.w	800c658 <_malloc_r>
 800c596:	bf00      	nop
 800c598:	20000260 	.word	0x20000260

0800c59c <free>:
 800c59c:	4b02      	ldr	r3, [pc, #8]	; (800c5a8 <free+0xc>)
 800c59e:	4601      	mov	r1, r0
 800c5a0:	6818      	ldr	r0, [r3, #0]
 800c5a2:	f000 b80b 	b.w	800c5bc <_free_r>
 800c5a6:	bf00      	nop
 800c5a8:	20000260 	.word	0x20000260

0800c5ac <memset>:
 800c5ac:	4402      	add	r2, r0
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d100      	bne.n	800c5b6 <memset+0xa>
 800c5b4:	4770      	bx	lr
 800c5b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c5ba:	e7f9      	b.n	800c5b0 <memset+0x4>

0800c5bc <_free_r>:
 800c5bc:	b538      	push	{r3, r4, r5, lr}
 800c5be:	4605      	mov	r5, r0
 800c5c0:	2900      	cmp	r1, #0
 800c5c2:	d045      	beq.n	800c650 <_free_r+0x94>
 800c5c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5c8:	1f0c      	subs	r4, r1, #4
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	bfb8      	it	lt
 800c5ce:	18e4      	addlt	r4, r4, r3
 800c5d0:	f000 f8ac 	bl	800c72c <__malloc_lock>
 800c5d4:	4a1f      	ldr	r2, [pc, #124]	; (800c654 <_free_r+0x98>)
 800c5d6:	6813      	ldr	r3, [r2, #0]
 800c5d8:	4610      	mov	r0, r2
 800c5da:	b933      	cbnz	r3, 800c5ea <_free_r+0x2e>
 800c5dc:	6063      	str	r3, [r4, #4]
 800c5de:	6014      	str	r4, [r2, #0]
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5e6:	f000 b8a2 	b.w	800c72e <__malloc_unlock>
 800c5ea:	42a3      	cmp	r3, r4
 800c5ec:	d90c      	bls.n	800c608 <_free_r+0x4c>
 800c5ee:	6821      	ldr	r1, [r4, #0]
 800c5f0:	1862      	adds	r2, r4, r1
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	bf04      	itt	eq
 800c5f6:	681a      	ldreq	r2, [r3, #0]
 800c5f8:	685b      	ldreq	r3, [r3, #4]
 800c5fa:	6063      	str	r3, [r4, #4]
 800c5fc:	bf04      	itt	eq
 800c5fe:	1852      	addeq	r2, r2, r1
 800c600:	6022      	streq	r2, [r4, #0]
 800c602:	6004      	str	r4, [r0, #0]
 800c604:	e7ec      	b.n	800c5e0 <_free_r+0x24>
 800c606:	4613      	mov	r3, r2
 800c608:	685a      	ldr	r2, [r3, #4]
 800c60a:	b10a      	cbz	r2, 800c610 <_free_r+0x54>
 800c60c:	42a2      	cmp	r2, r4
 800c60e:	d9fa      	bls.n	800c606 <_free_r+0x4a>
 800c610:	6819      	ldr	r1, [r3, #0]
 800c612:	1858      	adds	r0, r3, r1
 800c614:	42a0      	cmp	r0, r4
 800c616:	d10b      	bne.n	800c630 <_free_r+0x74>
 800c618:	6820      	ldr	r0, [r4, #0]
 800c61a:	4401      	add	r1, r0
 800c61c:	1858      	adds	r0, r3, r1
 800c61e:	4282      	cmp	r2, r0
 800c620:	6019      	str	r1, [r3, #0]
 800c622:	d1dd      	bne.n	800c5e0 <_free_r+0x24>
 800c624:	6810      	ldr	r0, [r2, #0]
 800c626:	6852      	ldr	r2, [r2, #4]
 800c628:	605a      	str	r2, [r3, #4]
 800c62a:	4401      	add	r1, r0
 800c62c:	6019      	str	r1, [r3, #0]
 800c62e:	e7d7      	b.n	800c5e0 <_free_r+0x24>
 800c630:	d902      	bls.n	800c638 <_free_r+0x7c>
 800c632:	230c      	movs	r3, #12
 800c634:	602b      	str	r3, [r5, #0]
 800c636:	e7d3      	b.n	800c5e0 <_free_r+0x24>
 800c638:	6820      	ldr	r0, [r4, #0]
 800c63a:	1821      	adds	r1, r4, r0
 800c63c:	428a      	cmp	r2, r1
 800c63e:	bf04      	itt	eq
 800c640:	6811      	ldreq	r1, [r2, #0]
 800c642:	6852      	ldreq	r2, [r2, #4]
 800c644:	6062      	str	r2, [r4, #4]
 800c646:	bf04      	itt	eq
 800c648:	1809      	addeq	r1, r1, r0
 800c64a:	6021      	streq	r1, [r4, #0]
 800c64c:	605c      	str	r4, [r3, #4]
 800c64e:	e7c7      	b.n	800c5e0 <_free_r+0x24>
 800c650:	bd38      	pop	{r3, r4, r5, pc}
 800c652:	bf00      	nop
 800c654:	2000038c 	.word	0x2000038c

0800c658 <_malloc_r>:
 800c658:	b570      	push	{r4, r5, r6, lr}
 800c65a:	1ccd      	adds	r5, r1, #3
 800c65c:	f025 0503 	bic.w	r5, r5, #3
 800c660:	3508      	adds	r5, #8
 800c662:	2d0c      	cmp	r5, #12
 800c664:	bf38      	it	cc
 800c666:	250c      	movcc	r5, #12
 800c668:	2d00      	cmp	r5, #0
 800c66a:	4606      	mov	r6, r0
 800c66c:	db01      	blt.n	800c672 <_malloc_r+0x1a>
 800c66e:	42a9      	cmp	r1, r5
 800c670:	d903      	bls.n	800c67a <_malloc_r+0x22>
 800c672:	230c      	movs	r3, #12
 800c674:	6033      	str	r3, [r6, #0]
 800c676:	2000      	movs	r0, #0
 800c678:	bd70      	pop	{r4, r5, r6, pc}
 800c67a:	f000 f857 	bl	800c72c <__malloc_lock>
 800c67e:	4a21      	ldr	r2, [pc, #132]	; (800c704 <_malloc_r+0xac>)
 800c680:	6814      	ldr	r4, [r2, #0]
 800c682:	4621      	mov	r1, r4
 800c684:	b991      	cbnz	r1, 800c6ac <_malloc_r+0x54>
 800c686:	4c20      	ldr	r4, [pc, #128]	; (800c708 <_malloc_r+0xb0>)
 800c688:	6823      	ldr	r3, [r4, #0]
 800c68a:	b91b      	cbnz	r3, 800c694 <_malloc_r+0x3c>
 800c68c:	4630      	mov	r0, r6
 800c68e:	f000 f83d 	bl	800c70c <_sbrk_r>
 800c692:	6020      	str	r0, [r4, #0]
 800c694:	4629      	mov	r1, r5
 800c696:	4630      	mov	r0, r6
 800c698:	f000 f838 	bl	800c70c <_sbrk_r>
 800c69c:	1c43      	adds	r3, r0, #1
 800c69e:	d124      	bne.n	800c6ea <_malloc_r+0x92>
 800c6a0:	230c      	movs	r3, #12
 800c6a2:	6033      	str	r3, [r6, #0]
 800c6a4:	4630      	mov	r0, r6
 800c6a6:	f000 f842 	bl	800c72e <__malloc_unlock>
 800c6aa:	e7e4      	b.n	800c676 <_malloc_r+0x1e>
 800c6ac:	680b      	ldr	r3, [r1, #0]
 800c6ae:	1b5b      	subs	r3, r3, r5
 800c6b0:	d418      	bmi.n	800c6e4 <_malloc_r+0x8c>
 800c6b2:	2b0b      	cmp	r3, #11
 800c6b4:	d90f      	bls.n	800c6d6 <_malloc_r+0x7e>
 800c6b6:	600b      	str	r3, [r1, #0]
 800c6b8:	50cd      	str	r5, [r1, r3]
 800c6ba:	18cc      	adds	r4, r1, r3
 800c6bc:	4630      	mov	r0, r6
 800c6be:	f000 f836 	bl	800c72e <__malloc_unlock>
 800c6c2:	f104 000b 	add.w	r0, r4, #11
 800c6c6:	1d23      	adds	r3, r4, #4
 800c6c8:	f020 0007 	bic.w	r0, r0, #7
 800c6cc:	1ac3      	subs	r3, r0, r3
 800c6ce:	d0d3      	beq.n	800c678 <_malloc_r+0x20>
 800c6d0:	425a      	negs	r2, r3
 800c6d2:	50e2      	str	r2, [r4, r3]
 800c6d4:	e7d0      	b.n	800c678 <_malloc_r+0x20>
 800c6d6:	428c      	cmp	r4, r1
 800c6d8:	684b      	ldr	r3, [r1, #4]
 800c6da:	bf16      	itet	ne
 800c6dc:	6063      	strne	r3, [r4, #4]
 800c6de:	6013      	streq	r3, [r2, #0]
 800c6e0:	460c      	movne	r4, r1
 800c6e2:	e7eb      	b.n	800c6bc <_malloc_r+0x64>
 800c6e4:	460c      	mov	r4, r1
 800c6e6:	6849      	ldr	r1, [r1, #4]
 800c6e8:	e7cc      	b.n	800c684 <_malloc_r+0x2c>
 800c6ea:	1cc4      	adds	r4, r0, #3
 800c6ec:	f024 0403 	bic.w	r4, r4, #3
 800c6f0:	42a0      	cmp	r0, r4
 800c6f2:	d005      	beq.n	800c700 <_malloc_r+0xa8>
 800c6f4:	1a21      	subs	r1, r4, r0
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	f000 f808 	bl	800c70c <_sbrk_r>
 800c6fc:	3001      	adds	r0, #1
 800c6fe:	d0cf      	beq.n	800c6a0 <_malloc_r+0x48>
 800c700:	6025      	str	r5, [r4, #0]
 800c702:	e7db      	b.n	800c6bc <_malloc_r+0x64>
 800c704:	2000038c 	.word	0x2000038c
 800c708:	20000390 	.word	0x20000390

0800c70c <_sbrk_r>:
 800c70c:	b538      	push	{r3, r4, r5, lr}
 800c70e:	4c06      	ldr	r4, [pc, #24]	; (800c728 <_sbrk_r+0x1c>)
 800c710:	2300      	movs	r3, #0
 800c712:	4605      	mov	r5, r0
 800c714:	4608      	mov	r0, r1
 800c716:	6023      	str	r3, [r4, #0]
 800c718:	f7f5 fcce 	bl	80020b8 <_sbrk>
 800c71c:	1c43      	adds	r3, r0, #1
 800c71e:	d102      	bne.n	800c726 <_sbrk_r+0x1a>
 800c720:	6823      	ldr	r3, [r4, #0]
 800c722:	b103      	cbz	r3, 800c726 <_sbrk_r+0x1a>
 800c724:	602b      	str	r3, [r5, #0]
 800c726:	bd38      	pop	{r3, r4, r5, pc}
 800c728:	200012a4 	.word	0x200012a4

0800c72c <__malloc_lock>:
 800c72c:	4770      	bx	lr

0800c72e <__malloc_unlock>:
 800c72e:	4770      	bx	lr

0800c730 <_init>:
 800c730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c732:	bf00      	nop
 800c734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c736:	bc08      	pop	{r3}
 800c738:	469e      	mov	lr, r3
 800c73a:	4770      	bx	lr

0800c73c <_fini>:
 800c73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c73e:	bf00      	nop
 800c740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c742:	bc08      	pop	{r3}
 800c744:	469e      	mov	lr, r3
 800c746:	4770      	bx	lr
