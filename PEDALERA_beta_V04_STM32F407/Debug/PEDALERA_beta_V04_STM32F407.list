
PEDALERA_beta_V04_STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00033f40  0800cf14  0800cf14  0001cf14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08040e54  08040e54  000602d4  2**0
                  CONTENTS
  4 .ARM          00000008  08040e54  08040e54  00050e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08040e5c  08040e5c  000602d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08040e5c  08040e5c  00050e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08040e60  08040e60  00050e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  08040e64  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001014  200002d4  08041138  000602d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200012e8  08041138  000612e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000602d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000263f1  00000000  00000000  00060304  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000052a3  00000000  00000000  000866f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c38  00000000  00000000  0008b998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019c0  00000000  00000000  0008d5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028562  00000000  00000000  0008ef90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ca92  00000000  00000000  000b74f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d900d  00000000  00000000  000d3f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001acf91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007754  00000000  00000000  001ad00c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cefc 	.word	0x0800cefc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	0800cefc 	.word	0x0800cefc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <spi_74HC165_init>:
GPIO_TypeDef* portPL;
GPIO_TypeDef* portCE;
uint16_t pinPL, pinCE;


void spi_74HC165_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* PLport, uint16_t PLpin, GPIO_TypeDef* CEport, uint16_t CEpin){
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4613      	mov	r3, r2
 800057e:	80fb      	strh	r3, [r7, #6]

	spi_handler=hspi;
 8000580:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <spi_74HC165_init+0x3c>)
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	6013      	str	r3, [r2, #0]

	portPL = PLport;
 8000586:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <spi_74HC165_init+0x40>)
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	6013      	str	r3, [r2, #0]
	pinPL = PLpin;
 800058c:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <spi_74HC165_init+0x44>)
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	8013      	strh	r3, [r2, #0]

	portCE = CEport;
 8000592:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <spi_74HC165_init+0x48>)
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	6013      	str	r3, [r2, #0]
	pinCE = CEpin;
 8000598:	4a08      	ldr	r2, [pc, #32]	; (80005bc <spi_74HC165_init+0x4c>)
 800059a:	8b3b      	ldrh	r3, [r7, #24]
 800059c:	8013      	strh	r3, [r2, #0]

}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	200003a4 	.word	0x200003a4
 80005b0:	200003ac 	.word	0x200003ac
 80005b4:	200003a8 	.word	0x200003a8
 80005b8:	200003b4 	.word	0x200003b4
 80005bc:	200003b0 	.word	0x200003b0

080005c0 <spi_74HC165_receive>:


void spi_74HC165_receive (uint8_t* pdata, uint16_t sizeData){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	460b      	mov	r3, r1
 80005ca:	807b      	strh	r3, [r7, #2]

	//carga paralela
	HAL_GPIO_WritePin(portPL, pinPL, 0);
 80005cc:	4b15      	ldr	r3, [pc, #84]	; (8000624 <spi_74HC165_receive+0x64>)
 80005ce:	6818      	ldr	r0, [r3, #0]
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <spi_74HC165_receive+0x68>)
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	2200      	movs	r2, #0
 80005d6:	4619      	mov	r1, r3
 80005d8:	f002 fef8 	bl	80033cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portPL, pinPL, 1);
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <spi_74HC165_receive+0x64>)
 80005de:	6818      	ldr	r0, [r3, #0]
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <spi_74HC165_receive+0x68>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	2201      	movs	r2, #1
 80005e6:	4619      	mov	r1, r3
 80005e8:	f002 fef0 	bl	80033cc <HAL_GPIO_WritePin>

	//clock enable
	HAL_GPIO_WritePin(portCE, pinCE, 0);
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <spi_74HC165_receive+0x6c>)
 80005ee:	6818      	ldr	r0, [r3, #0]
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <spi_74HC165_receive+0x70>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	2200      	movs	r2, #0
 80005f6:	4619      	mov	r1, r3
 80005f8:	f002 fee8 	bl	80033cc <HAL_GPIO_WritePin>

	//SPI
	HAL_SPI_Receive(spi_handler, pdata, sizeData, 100);
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <spi_74HC165_receive+0x74>)
 80005fe:	6818      	ldr	r0, [r3, #0]
 8000600:	887a      	ldrh	r2, [r7, #2]
 8000602:	2364      	movs	r3, #100	; 0x64
 8000604:	6879      	ldr	r1, [r7, #4]
 8000606:	f006 fe2f 	bl	8007268 <HAL_SPI_Receive>

	//clock disable
	HAL_GPIO_WritePin(portCE, pinCE, 1);
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <spi_74HC165_receive+0x6c>)
 800060c:	6818      	ldr	r0, [r3, #0]
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <spi_74HC165_receive+0x70>)
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	2201      	movs	r2, #1
 8000614:	4619      	mov	r1, r3
 8000616:	f002 fed9 	bl	80033cc <HAL_GPIO_WritePin>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200003ac 	.word	0x200003ac
 8000628:	200003a8 	.word	0x200003a8
 800062c:	200003b4 	.word	0x200003b4
 8000630:	200003b0 	.word	0x200003b0
 8000634:	200003a4 	.word	0x200003a4

08000638 <makeChord>:

	Parameter: fchord		Number of the chord sent. It was made by setChord() and store in "chordSet[]" vector.

	Returns:	unsigned long	(0xXXXXXX) A 3-byte number that contains the fundamental note in the least significant byte, followed by the 2nd and 3rd notes of the chord.
*/
unsigned long makeChord(unsigned long bnote, uint8_t fchord){
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	70fb      	strb	r3, [r7, #3]

	unsigned long notes;

	notes = bnote;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	60fb      	str	r3, [r7, #12]
	notes += (bnote << 8);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	021b      	lsls	r3, r3, #8
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	4413      	add	r3, r2
 8000650:	60fb      	str	r3, [r7, #12]
	notes += (bnote << 16);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	041b      	lsls	r3, r3, #16
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	4413      	add	r3, r2
 800065a:	60fb      	str	r3, [r7, #12]


	notes += chordSet[fchord];
 800065c:	78fb      	ldrb	r3, [r7, #3]
 800065e:	4a06      	ldr	r2, [pc, #24]	; (8000678 <makeChord+0x40>)
 8000660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	4413      	add	r3, r2
 8000668:	60fb      	str	r3, [r7, #12]


	return notes;
 800066a:	68fb      	ldr	r3, [r7, #12]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	200002f4 	.word	0x200002f4

0800067c <setChord>:

	Parameter: fnote		id of the pressed note.

	Returns:	void
*/
void setChord(uint8_t fnote){
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]

chordSet[fnote] = hex_chord[chord] - hex_chordInv[chordInv];
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <setChord+0x34>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <setChord+0x38>)
 800068c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <setChord+0x3c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a09      	ldr	r2, [pc, #36]	; (80006bc <setChord+0x40>)
 8000696:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	1a8a      	subs	r2, r1, r2
 800069e:	4908      	ldr	r1, [pc, #32]	; (80006c0 <setChord+0x44>)
 80006a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	200003f4 	.word	0x200003f4
 80006b4:	0800d128 	.word	0x0800d128
 80006b8:	200003f8 	.word	0x200003f8
 80006bc:	0800d148 	.word	0x0800d148
 80006c0:	200002f4 	.word	0x200002f4

080006c4 <turnOnScreen>:
	Parameters: void

	Returns:	void
*/

void turnOnScreen(void){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

	/////////////CARACTERES ESPECIALES

	lcd_cursor_buff(5, 2);
 80006c8:	2102      	movs	r1, #2
 80006ca:	2005      	movs	r0, #5
 80006cc:	f000 fc5a 	bl	8000f84 <lcd_cursor_buff>
	lcd_string_buff("BASS  PEDAL");
 80006d0:	4808      	ldr	r0, [pc, #32]	; (80006f4 <turnOnScreen+0x30>)
 80006d2:	f000 fcdb 	bl	800108c <lcd_string_buff>
	lcd_cursor_buff(5, 3);
 80006d6:	2103      	movs	r1, #3
 80006d8:	2005      	movs	r0, #5
 80006da:	f000 fc53 	bl	8000f84 <lcd_cursor_buff>
	lcd_string_buff("SYNTHESIZER");
 80006de:	4806      	ldr	r0, [pc, #24]	; (80006f8 <turnOnScreen+0x34>)
 80006e0:	f000 fcd4 	bl	800108c <lcd_string_buff>
	lcd_upDate_IT();
 80006e4:	f000 fd7e 	bl	80011e4 <lcd_upDate_IT>


	HAL_Delay(3000);
 80006e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006ec:	f002 f814 	bl	8002718 <HAL_Delay>
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	0800cfc0 	.word	0x0800cfc0
 80006f8:	0800cfcc 	.word	0x0800cfcc

080006fc <chordScreen>:
	Parameters: void

	Returns:	void
*/

void chordScreen(void){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	lcd_clearScreen_buff();
 8000700:	f000 fc2a 	bl	8000f58 <lcd_clearScreen_buff>
	lcd_cursor_buff(1,0);
 8000704:	2100      	movs	r1, #0
 8000706:	2001      	movs	r0, #1
 8000708:	f000 fc3c 	bl	8000f84 <lcd_cursor_buff>
	lcd_string_buff("Acorde: ");
 800070c:	4815      	ldr	r0, [pc, #84]	; (8000764 <chordScreen+0x68>)
 800070e:	f000 fcbd 	bl	800108c <lcd_string_buff>
	lcd_string_buff( str_chord[chord]);
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <chordScreen+0x6c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <chordScreen+0x70>)
 8000718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fcb5 	bl	800108c <lcd_string_buff>
	lcd_cursor_buff(1,1);
 8000722:	2101      	movs	r1, #1
 8000724:	2001      	movs	r0, #1
 8000726:	f000 fc2d 	bl	8000f84 <lcd_cursor_buff>
	lcd_string_buff("Pos:");
 800072a:	4811      	ldr	r0, [pc, #68]	; (8000770 <chordScreen+0x74>)
 800072c:	f000 fcae 	bl	800108c <lcd_string_buff>
	lcd_string_buff( str_chordInv[chordInv]);
 8000730:	4b10      	ldr	r3, [pc, #64]	; (8000774 <chordScreen+0x78>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a10      	ldr	r2, [pc, #64]	; (8000778 <chordScreen+0x7c>)
 8000736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fca6 	bl	800108c <lcd_string_buff>
	lcd_cursor_buff(1,2);
 8000740:	2102      	movs	r1, #2
 8000742:	2001      	movs	r0, #1
 8000744:	f000 fc1e 	bl	8000f84 <lcd_cursor_buff>
	lcd_string_buff("Grabar acorde");
 8000748:	480c      	ldr	r0, [pc, #48]	; (800077c <chordScreen+0x80>)
 800074a:	f000 fc9f 	bl	800108c <lcd_string_buff>

	lcd_cursor_buff(0, chordSelect_cursor);
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <chordScreen+0x84>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4619      	mov	r1, r3
 8000754:	2000      	movs	r0, #0
 8000756:	f000 fc15 	bl	8000f84 <lcd_cursor_buff>
	lcd_string_buff(">");
 800075a:	480a      	ldr	r0, [pc, #40]	; (8000784 <chordScreen+0x88>)
 800075c:	f000 fc96 	bl	800108c <lcd_string_buff>

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	0800cfd8 	.word	0x0800cfd8
 8000768:	200003f4 	.word	0x200003f4
 800076c:	20000030 	.word	0x20000030
 8000770:	0800cfe4 	.word	0x0800cfe4
 8000774:	200003f8 	.word	0x200003f8
 8000778:	20000050 	.word	0x20000050
 800077c:	0800cfec 	.word	0x0800cfec
 8000780:	200003ec 	.word	0x200003ec
 8000784:	0800cffc 	.word	0x0800cffc

08000788 <mainScreen>:
	Parameters: void

	Returns:	void
*/

void mainScreen(void){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

	extern uint8_t sustainMode;
	extern uint8_t acorde;

  	lcd_clearScreen_buff();
 800078c:	f000 fbe4 	bl	8000f58 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 8000790:	2100      	movs	r1, #0
 8000792:	2000      	movs	r0, #0
 8000794:	f000 fbf6 	bl	8000f84 <lcd_cursor_buff>
	lcd_string_buff("Afinacion: ");
 8000798:	4827      	ldr	r0, [pc, #156]	; (8000838 <mainScreen+0xb0>)
 800079a:	f000 fc77 	bl	800108c <lcd_string_buff>
	lcd_string_buff(str_tunne[firstDoTunning - 36]);
 800079e:	4b27      	ldr	r3, [pc, #156]	; (800083c <mainScreen+0xb4>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	3b24      	subs	r3, #36	; 0x24
 80007a4:	4a26      	ldr	r2, [pc, #152]	; (8000840 <mainScreen+0xb8>)
 80007a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fc6e 	bl	800108c <lcd_string_buff>
	lcd_cursor_buff(0,1);
 80007b0:	2101      	movs	r1, #1
 80007b2:	2000      	movs	r0, #0
 80007b4:	f000 fbe6 	bl	8000f84 <lcd_cursor_buff>
	lcd_string_buff("Octava: ");
 80007b8:	4822      	ldr	r0, [pc, #136]	; (8000844 <mainScreen+0xbc>)
 80007ba:	f000 fc67 	bl	800108c <lcd_string_buff>
	lcd_string_buff(str_octava[octava + 1]);
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <mainScreen+0xc0>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4a21      	ldr	r2, [pc, #132]	; (800084c <mainScreen+0xc4>)
 80007c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fc5e 	bl	800108c <lcd_string_buff>
	lcd_cursor_buff(0,2);
 80007d0:	2102      	movs	r1, #2
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 fbd6 	bl	8000f84 <lcd_cursor_buff>
	lcd_string_buff("Sustain: ");
 80007d8:	481d      	ldr	r0, [pc, #116]	; (8000850 <mainScreen+0xc8>)
 80007da:	f000 fc57 	bl	800108c <lcd_string_buff>
	switch (sustainMode){
 80007de:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <mainScreen+0xcc>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d007      	beq.n	80007f6 <mainScreen+0x6e>
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d009      	beq.n	80007fe <mainScreen+0x76>
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d10b      	bne.n	8000806 <mainScreen+0x7e>
		case 0:
			lcd_string_buff("OFF");
 80007ee:	481a      	ldr	r0, [pc, #104]	; (8000858 <mainScreen+0xd0>)
 80007f0:	f000 fc4c 	bl	800108c <lcd_string_buff>
		break;
 80007f4:	e007      	b.n	8000806 <mainScreen+0x7e>
		case 1:
			lcd_string_buff("smart");
 80007f6:	4819      	ldr	r0, [pc, #100]	; (800085c <mainScreen+0xd4>)
 80007f8:	f000 fc48 	bl	800108c <lcd_string_buff>
		break;
 80007fc:	e003      	b.n	8000806 <mainScreen+0x7e>
		case 2:
			lcd_string_buff("clasico");
 80007fe:	4818      	ldr	r0, [pc, #96]	; (8000860 <mainScreen+0xd8>)
 8000800:	f000 fc44 	bl	800108c <lcd_string_buff>
		break;
 8000804:	bf00      	nop
	}//end switch.
	lcd_cursor_buff(0,3);
 8000806:	2103      	movs	r1, #3
 8000808:	2000      	movs	r0, #0
 800080a:	f000 fbbb 	bl	8000f84 <lcd_cursor_buff>
	lcd_string_buff("Acordes: ");
 800080e:	4815      	ldr	r0, [pc, #84]	; (8000864 <mainScreen+0xdc>)
 8000810:	f000 fc3c 	bl	800108c <lcd_string_buff>
	switch (acorde){
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <mainScreen+0xe0>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <mainScreen+0x9a>
 800081c:	2b01      	cmp	r3, #1
 800081e:	d004      	beq.n	800082a <mainScreen+0xa2>
			lcd_string_buff("ON");
		break;
	}//end switch.


}
 8000820:	e007      	b.n	8000832 <mainScreen+0xaa>
			lcd_string_buff("OFF");
 8000822:	480d      	ldr	r0, [pc, #52]	; (8000858 <mainScreen+0xd0>)
 8000824:	f000 fc32 	bl	800108c <lcd_string_buff>
		break;
 8000828:	e003      	b.n	8000832 <mainScreen+0xaa>
			lcd_string_buff("ON");
 800082a:	4810      	ldr	r0, [pc, #64]	; (800086c <mainScreen+0xe4>)
 800082c:	f000 fc2e 	bl	800108c <lcd_string_buff>
		break;
 8000830:	bf00      	nop
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	0800d000 	.word	0x0800d000
 800083c:	200003f0 	.word	0x200003f0
 8000840:	20000000 	.word	0x20000000
 8000844:	0800d00c 	.word	0x0800d00c
 8000848:	200002f0 	.word	0x200002f0
 800084c:	2000005c 	.word	0x2000005c
 8000850:	0800d018 	.word	0x0800d018
 8000854:	20000368 	.word	0x20000368
 8000858:	0800d024 	.word	0x0800d024
 800085c:	0800d028 	.word	0x0800d028
 8000860:	0800d030 	.word	0x0800d030
 8000864:	0800d038 	.word	0x0800d038
 8000868:	20000374 	.word	0x20000374
 800086c:	0800d044 	.word	0x0800d044

08000870 <tunneScreen>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void tunneScreen(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 8000874:	f000 fb70 	bl	8000f58 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 8000878:	2100      	movs	r1, #0
 800087a:	2000      	movs	r0, #0
 800087c:	f000 fb82 	bl	8000f84 <lcd_cursor_buff>
	lcd_string_buff("AFINACION: ");
 8000880:	480b      	ldr	r0, [pc, #44]	; (80008b0 <tunneScreen+0x40>)
 8000882:	f000 fc03 	bl	800108c <lcd_string_buff>
	lcd_cursor_buff(8, 2);
 8000886:	2102      	movs	r1, #2
 8000888:	2008      	movs	r0, #8
 800088a:	f000 fb7b 	bl	8000f84 <lcd_cursor_buff>
	sprintf(texto, "< %s >", str_tunne[firstDoTunning - 36]);
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <tunneScreen+0x44>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	3b24      	subs	r3, #36	; 0x24
 8000894:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <tunneScreen+0x48>)
 8000896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800089a:	461a      	mov	r2, r3
 800089c:	4907      	ldr	r1, [pc, #28]	; (80008bc <tunneScreen+0x4c>)
 800089e:	4808      	ldr	r0, [pc, #32]	; (80008c0 <tunneScreen+0x50>)
 80008a0:	f00b ffde 	bl	800c860 <siprintf>
	lcd_string_buff(texto);
 80008a4:	4806      	ldr	r0, [pc, #24]	; (80008c0 <tunneScreen+0x50>)
 80008a6:	f000 fbf1 	bl	800108c <lcd_string_buff>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	0800d048 	.word	0x0800d048
 80008b4:	200003f0 	.word	0x200003f0
 80008b8:	20000000 	.word	0x20000000
 80008bc:	0800d054 	.word	0x0800d054
 80008c0:	200003b8 	.word	0x200003b8

080008c4 <on_off_octave>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void on_off_octave (void){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 80008c8:	f000 fb46 	bl	8000f58 <lcd_clearScreen_buff>
	lcd_cursor_buff(3,2);
 80008cc:	2102      	movs	r1, #2
 80008ce:	2003      	movs	r0, #3
 80008d0:	f000 fb58 	bl	8000f84 <lcd_cursor_buff>
	lcd_string_buff("Octava:  ");
 80008d4:	4806      	ldr	r0, [pc, #24]	; (80008f0 <on_off_octave+0x2c>)
 80008d6:	f000 fbd9 	bl	800108c <lcd_string_buff>
	lcd_string_buff(str_octava[octava + 1]);
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <on_off_octave+0x30>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	3301      	adds	r3, #1
 80008e0:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <on_off_octave+0x34>)
 80008e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fbd0 	bl	800108c <lcd_string_buff>

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	0800d074 	.word	0x0800d074
 80008f4:	200002f0 	.word	0x200002f0
 80008f8:	2000005c 	.word	0x2000005c

080008fc <recuest_footkey>:
	Parameter: void

	Returns:	void
*/

void recuest_footkey (void){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 8000900:	f000 fb2a 	bl	8000f58 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 8000904:	2100      	movs	r1, #0
 8000906:	2000      	movs	r0, #0
 8000908:	f000 fb3c 	bl	8000f84 <lcd_cursor_buff>
	lcd_string_buff("Pulse una tecla para");
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <recuest_footkey+0x28>)
 800090e:	f000 fbbd 	bl	800108c <lcd_string_buff>
	lcd_cursor_buff(0,1);
 8000912:	2101      	movs	r1, #1
 8000914:	2000      	movs	r0, #0
 8000916:	f000 fb35 	bl	8000f84 <lcd_cursor_buff>
	lcd_string_buff("grabar el acorde...");
 800091a:	4803      	ldr	r0, [pc, #12]	; (8000928 <recuest_footkey+0x2c>)
 800091c:	f000 fbb6 	bl	800108c <lcd_string_buff>

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	0800d080 	.word	0x0800d080
 8000928:	0800d098 	.word	0x0800d098

0800092c <pop_up_savedChord>:
	Parameter: void

	Returns:	void
*/

void pop_up_savedChord (uint8_t fk){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]

	lcd_clearScreen_buff();
 8000936:	f000 fb0f 	bl	8000f58 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,1);
 800093a:	2101      	movs	r1, #1
 800093c:	2000      	movs	r0, #0
 800093e:	f000 fb21 	bl	8000f84 <lcd_cursor_buff>
	lcd_string_buff("ACORDE GRABADO EN LA");
 8000942:	480a      	ldr	r0, [pc, #40]	; (800096c <pop_up_savedChord+0x40>)
 8000944:	f000 fba2 	bl	800108c <lcd_string_buff>
	lcd_cursor_buff(0,2);
 8000948:	2102      	movs	r1, #2
 800094a:	2000      	movs	r0, #0
 800094c:	f000 fb1a 	bl	8000f84 <lcd_cursor_buff>
	lcd_string_buff("TECLA ");
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <pop_up_savedChord+0x44>)
 8000952:	f000 fb9b 	bl	800108c <lcd_string_buff>
	lcd_string_buff(str_tunne[fk]);
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	4a06      	ldr	r2, [pc, #24]	; (8000974 <pop_up_savedChord+0x48>)
 800095a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095e:	4618      	mov	r0, r3
 8000960:	f000 fb94 	bl	800108c <lcd_string_buff>

}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	0800d0ac 	.word	0x0800d0ac
 8000970:	0800d0c4 	.word	0x0800d0c4
 8000974:	20000000 	.word	0x20000000

08000978 <pop_up_sustain>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void pop_up_sustain (void){
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

	extern uint8_t sustainMode;

	lcd_clearScreen_buff();
 800097c:	f000 faec 	bl	8000f58 <lcd_clearScreen_buff>
	lcd_cursor_buff(2,1);
 8000980:	2101      	movs	r1, #1
 8000982:	2002      	movs	r0, #2
 8000984:	f000 fafe 	bl	8000f84 <lcd_cursor_buff>
	lcd_string_buff("Sustain: ");
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <pop_up_sustain+0x44>)
 800098a:	f000 fb7f 	bl	800108c <lcd_string_buff>
	switch (sustainMode){
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <pop_up_sustain+0x48>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d008      	beq.n	80009a8 <pop_up_sustain+0x30>
 8000996:	2b02      	cmp	r3, #2
 8000998:	d00a      	beq.n	80009b0 <pop_up_sustain+0x38>
 800099a:	2b00      	cmp	r3, #0
 800099c:	d000      	beq.n	80009a0 <pop_up_sustain+0x28>
		case 2:
			lcd_string_buff("clasico");
		break;
	}//end switch.

}
 800099e:	e00b      	b.n	80009b8 <pop_up_sustain+0x40>
			lcd_string_buff("OFF");
 80009a0:	4808      	ldr	r0, [pc, #32]	; (80009c4 <pop_up_sustain+0x4c>)
 80009a2:	f000 fb73 	bl	800108c <lcd_string_buff>
		break;
 80009a6:	e007      	b.n	80009b8 <pop_up_sustain+0x40>
			lcd_string_buff("smart");
 80009a8:	4807      	ldr	r0, [pc, #28]	; (80009c8 <pop_up_sustain+0x50>)
 80009aa:	f000 fb6f 	bl	800108c <lcd_string_buff>
		break;
 80009ae:	e003      	b.n	80009b8 <pop_up_sustain+0x40>
			lcd_string_buff("clasico");
 80009b0:	4806      	ldr	r0, [pc, #24]	; (80009cc <pop_up_sustain+0x54>)
 80009b2:	f000 fb6b 	bl	800108c <lcd_string_buff>
		break;
 80009b6:	bf00      	nop
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	0800d018 	.word	0x0800d018
 80009c0:	20000368 	.word	0x20000368
 80009c4:	0800d024 	.word	0x0800d024
 80009c8:	0800d028 	.word	0x0800d028
 80009cc:	0800d030 	.word	0x0800d030

080009d0 <pop_up_cancel>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void pop_up_cancel (void){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 80009d4:	f000 fac0 	bl	8000f58 <lcd_clearScreen_buff>
	lcd_cursor_buff(2,1);
 80009d8:	2101      	movs	r1, #1
 80009da:	2002      	movs	r0, #2
 80009dc:	f000 fad2 	bl	8000f84 <lcd_cursor_buff>
	lcd_string_buff("ACCION CANCELADA");
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <pop_up_cancel+0x1c>)
 80009e2:	f000 fb53 	bl	800108c <lcd_string_buff>

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	0800d0cc 	.word	0x0800d0cc

080009f0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80009f6:	463b      	mov	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a02:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a04:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <MX_ADC1_Init+0x9c>)
 8000a06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a0e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a32:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <MX_ADC1_Init+0xa0>)
 8000a34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a50:	480d      	ldr	r0, [pc, #52]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a52:	f001 fe83 	bl	800275c <HAL_ADC_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a5c:	f001 f9ac 	bl	8001db8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a60:	2308      	movs	r3, #8
 8000a62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a64:	2301      	movs	r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_ADC1_Init+0x98>)
 8000a72:	f001 feb7 	bl	80027e4 <HAL_ADC_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a7c:	f001 f99c 	bl	8001db8 <Error_Handler>
  }

}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000400 	.word	0x20000400
 8000a8c:	40012000 	.word	0x40012000
 8000a90:	0f000001 	.word	0x0f000001

08000a94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a24      	ldr	r2, [pc, #144]	; (8000b44 <HAL_ADC_MspInit+0xb0>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d141      	bne.n	8000b3a <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <HAL_ADC_MspInit+0xb4>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a22      	ldr	r2, [pc, #136]	; (8000b48 <HAL_ADC_MspInit+0xb4>)
 8000ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <HAL_ADC_MspInit+0xb4>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <HAL_ADC_MspInit+0xb4>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <HAL_ADC_MspInit+0xb4>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <HAL_ADC_MspInit+0xb4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_ADC_MspInit+0xb4>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <HAL_ADC_MspInit+0xb4>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_ADC_MspInit+0xb4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480b      	ldr	r0, [pc, #44]	; (8000b4c <HAL_ADC_MspInit+0xb8>)
 8000b1e:	f002 fabb 	bl	8003098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b22:	2303      	movs	r3, #3
 8000b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b26:	2303      	movs	r3, #3
 8000b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4806      	ldr	r0, [pc, #24]	; (8000b50 <HAL_ADC_MspInit+0xbc>)
 8000b36:	f002 faaf 	bl	8003098 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	; 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40012000 	.word	0x40012000
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020800 	.word	0x40020800
 8000b50:	40020400 	.word	0x40020400

08000b54 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_DAC_Init+0x60>)
 8000b64:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <MX_DAC_Init+0x64>)
 8000b66:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000b68:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <MX_DAC_Init+0x60>)
 8000b6a:	f002 f96a 	bl	8002e42 <HAL_DAC_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000b74:	f001 f920 	bl	8001db8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b80:	463b      	mov	r3, r7
 8000b82:	2200      	movs	r2, #0
 8000b84:	4619      	mov	r1, r3
 8000b86:	480b      	ldr	r0, [pc, #44]	; (8000bb4 <MX_DAC_Init+0x60>)
 8000b88:	f002 f9e3 	bl	8002f52 <HAL_DAC_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000b92:	f001 f911 	bl	8001db8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b96:	463b      	mov	r3, r7
 8000b98:	2210      	movs	r2, #16
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_DAC_Init+0x60>)
 8000b9e:	f002 f9d8 	bl	8002f52 <HAL_DAC_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000ba8:	f001 f906 	bl	8001db8 <Error_Handler>
  }

}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000448 	.word	0x20000448
 8000bb8:	40007400 	.word	0x40007400

08000bbc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <HAL_DAC_MspInit+0x7c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d127      	bne.n	8000c2e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <HAL_DAC_MspInit+0x80>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a15      	ldr	r2, [pc, #84]	; (8000c3c <HAL_DAC_MspInit+0x80>)
 8000be8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <HAL_DAC_MspInit+0x80>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <HAL_DAC_MspInit+0x80>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <HAL_DAC_MspInit+0x80>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <HAL_DAC_MspInit+0x80>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c16:	2330      	movs	r3, #48	; 0x30
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <HAL_DAC_MspInit+0x84>)
 8000c2a:	f002 fa35 	bl	8003098 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40007400 	.word	0x40007400
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000

08000c44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	4b34      	ldr	r3, [pc, #208]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a33      	ldr	r2, [pc, #204]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b31      	ldr	r3, [pc, #196]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a2c      	ldr	r2, [pc, #176]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c80:	f043 0304 	orr.w	r3, r3, #4
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a25      	ldr	r2, [pc, #148]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a1e      	ldr	r2, [pc, #120]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000cd4:	f043 0308 	orr.w	r3, r3, #8
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0308 	and.w	r3, r3, #8
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_VERDE_Pin|LED_NARANJA_Pin|LED_ROJO_Pin|LED_AZUL_Pin
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f24f 01e0 	movw	r1, #61664	; 0xf0e0
 8000cec:	4811      	ldr	r0, [pc, #68]	; (8000d34 <MX_GPIO_Init+0xf0>)
 8000cee:	f002 fb6d 	bl	80033cc <HAL_GPIO_WritePin>
                          |PL_bot_Pin|CE_bot_Pin|ST_leds_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOTON_AZUL_Pin;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOTON_AZUL_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	480c      	ldr	r0, [pc, #48]	; (8000d38 <MX_GPIO_Init+0xf4>)
 8000d06:	f002 f9c7 	bl	8003098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_VERDE_Pin|LED_NARANJA_Pin|LED_ROJO_Pin|LED_AZUL_Pin
 8000d0a:	f24f 03e0 	movw	r3, #61664	; 0xf0e0
 8000d0e:	617b      	str	r3, [r7, #20]
                          |PL_bot_Pin|CE_bot_Pin|ST_leds_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4804      	ldr	r0, [pc, #16]	; (8000d34 <MX_GPIO_Init+0xf0>)
 8000d24:	f002 f9b8 	bl	8003098 <HAL_GPIO_Init>

}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	; 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020c00 	.word	0x40020c00
 8000d38:	40020000 	.word	0x40020000

08000d3c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <MX_I2C1_Init+0x50>)
 8000d42:	4a13      	ldr	r2, [pc, #76]	; (8000d90 <MX_I2C1_Init+0x54>)
 8000d44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_I2C1_Init+0x50>)
 8000d48:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <MX_I2C1_Init+0x58>)
 8000d4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_I2C1_Init+0x50>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_I2C1_Init+0x50>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <MX_I2C1_Init+0x50>)
 8000d5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <MX_I2C1_Init+0x50>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <MX_I2C1_Init+0x50>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <MX_I2C1_Init+0x50>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <MX_I2C1_Init+0x50>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <MX_I2C1_Init+0x50>)
 8000d7a:	f002 fb41 	bl	8003400 <HAL_I2C_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d84:	f001 f818 	bl	8001db8 <Error_Handler>
  }

}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2000045c 	.word	0x2000045c
 8000d90:	40005400 	.word	0x40005400
 8000d94:	00061a80 	.word	0x00061a80

08000d98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a21      	ldr	r2, [pc, #132]	; (8000e3c <HAL_I2C_MspInit+0xa4>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d13b      	bne.n	8000e32 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <HAL_I2C_MspInit+0xa8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a1f      	ldr	r2, [pc, #124]	; (8000e40 <HAL_I2C_MspInit+0xa8>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <HAL_I2C_MspInit+0xa8>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dd6:	23c0      	movs	r3, #192	; 0xc0
 8000dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dda:	2312      	movs	r3, #18
 8000ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000de6:	2304      	movs	r3, #4
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	4814      	ldr	r0, [pc, #80]	; (8000e44 <HAL_I2C_MspInit+0xac>)
 8000df2:	f002 f951 	bl	8003098 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <HAL_I2C_MspInit+0xa8>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a10      	ldr	r2, [pc, #64]	; (8000e40 <HAL_I2C_MspInit+0xa8>)
 8000e00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_I2C_MspInit+0xa8>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	201f      	movs	r0, #31
 8000e18:	f001 ffdd 	bl	8002dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e1c:	201f      	movs	r0, #31
 8000e1e:	f001 fff6 	bl	8002e0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	2020      	movs	r0, #32
 8000e28:	f001 ffd5 	bl	8002dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000e2c:	2020      	movs	r0, #32
 8000e2e:	f001 ffee 	bl	8002e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	; 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40005400 	.word	0x40005400
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020400 	.word	0x40020400

08000e48 <__lcd_send_cmd>:
uint8_t flag_sendLcd = 1;
uint8_t I2CtxComplete = 1;

/*Used by lcd_init() only*/
void __lcd_send_cmd (char cmd)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af02      	add	r7, sp, #8
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	f023 030f 	bic.w	r3, r3, #15
 8000e58:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	011b      	lsls	r3, r3, #4
 8000e5e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	f043 030c 	orr.w	r3, r3, #12
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	f043 0308 	orr.w	r3, r3, #8
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000e74:	7bbb      	ldrb	r3, [r7, #14]
 8000e76:	f043 030c 	orr.w	r3, r3, #12
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e7e:	7bbb      	ldrb	r3, [r7, #14]
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <__lcd_send_cmd+0x60>)
 8000e8a:	6818      	ldr	r0, [r3, #0]
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <__lcd_send_cmd+0x64>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b299      	uxth	r1, r3
 8000e92:	f107 0208 	add.w	r2, r7, #8
 8000e96:	2364      	movs	r3, #100	; 0x64
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	f002 fbe8 	bl	8003670 <HAL_I2C_Master_Transmit>
}
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	2000075c 	.word	0x2000075c
 8000eac:	20000758 	.word	0x20000758

08000eb0 <__lcd_send_cmd_buff>:

void __lcd_send_cmd_buff (char cmd)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f023 030f 	bic.w	r3, r3, #15
 8000ec0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	011b      	lsls	r3, r3, #4
 8000ec6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	f043 030c 	orr.w	r3, r3, #12
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	f043 0308 	orr.w	r3, r3, #8
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000edc:	7bbb      	ldrb	r3, [r7, #14]
 8000ede:	f043 030c 	orr.w	r3, r3, #12
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000ee6:	7bbb      	ldrb	r3, [r7, #14]
 8000ee8:	f043 0308 	orr.w	r3, r3, #8
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
	__add_to_lcdBuff((uint8_t*)data_t,4);
 8000ef0:	f107 0308 	add.w	r3, r7, #8
 8000ef4:	2104      	movs	r1, #4
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f8dc 	bl	80010b4 <__add_to_lcdBuff>
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <__lcd_send_data_buff>:


void __lcd_send_data_buff (char data)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f023 030f 	bic.w	r3, r3, #15
 8000f14:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	011b      	lsls	r3, r3, #4
 8000f1a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	f043 030d 	orr.w	r3, r3, #13
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	f043 0309 	orr.w	r3, r3, #9
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000f30:	7bbb      	ldrb	r3, [r7, #14]
 8000f32:	f043 030d 	orr.w	r3, r3, #13
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000f3a:	7bbb      	ldrb	r3, [r7, #14]
 8000f3c:	f043 0309 	orr.w	r3, r3, #9
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
	__add_to_lcdBuff((uint8_t*)data_t,4);
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	2104      	movs	r1, #4
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f8b2 	bl	80010b4 <__add_to_lcdBuff>
}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <lcd_clearScreen_buff>:


void lcd_clearScreen_buff (void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
	__lcd_send_cmd_buff (0x80);
 8000f5e:	2080      	movs	r0, #128	; 0x80
 8000f60:	f7ff ffa6 	bl	8000eb0 <__lcd_send_cmd_buff>
	for (int i=0; i<80; i++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	e005      	b.n	8000f76 <lcd_clearScreen_buff+0x1e>
	{
		__lcd_send_data_buff (' ');
 8000f6a:	2020      	movs	r0, #32
 8000f6c:	f7ff ffca 	bl	8000f04 <__lcd_send_data_buff>
	for (int i=0; i<80; i++)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3301      	adds	r3, #1
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b4f      	cmp	r3, #79	; 0x4f
 8000f7a:	ddf6      	ble.n	8000f6a <lcd_clearScreen_buff+0x12>
	}
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <lcd_cursor_buff>:


void lcd_cursor_buff(int x, int y)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
    switch (y){
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d82b      	bhi.n	8000fec <lcd_cursor_buff+0x68>
 8000f94:	a201      	add	r2, pc, #4	; (adr r2, 8000f9c <lcd_cursor_buff+0x18>)
 8000f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9a:	bf00      	nop
 8000f9c:	08000fad 	.word	0x08000fad
 8000fa0:	08000fbd 	.word	0x08000fbd
 8000fa4:	08000fcd 	.word	0x08000fcd
 8000fa8:	08000fdd 	.word	0x08000fdd
    	case 0:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE1 + x);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	3b80      	subs	r3, #128	; 0x80
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff7b 	bl	8000eb0 <__lcd_send_cmd_buff>
    	break;
 8000fba:	e017      	b.n	8000fec <lcd_cursor_buff+0x68>
    	case 1:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE2 + x);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	3b40      	subs	r3, #64	; 0x40
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff73 	bl	8000eb0 <__lcd_send_cmd_buff>
    	break;
 8000fca:	e00f      	b.n	8000fec <lcd_cursor_buff+0x68>
    	case 2:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE3 + x);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	3b6c      	subs	r3, #108	; 0x6c
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff6b 	bl	8000eb0 <__lcd_send_cmd_buff>
    	break;
 8000fda:	e007      	b.n	8000fec <lcd_cursor_buff+0x68>
    	case 3:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE4 + x);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	3b2c      	subs	r3, #44	; 0x2c
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff63 	bl	8000eb0 <__lcd_send_cmd_buff>
    	break;
 8000fea:	bf00      	nop
    }
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <lcd_init>:


void lcd_init (I2C_HandleTypeDef* hi2c, uint8_t i2c_address)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	70fb      	strb	r3, [r7, #3]
	i2c_handler = hi2c; //set the i2c handler struct.
 8001000:	4a20      	ldr	r2, [pc, #128]	; (8001084 <lcd_init+0x90>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
	SLAVE_ADDRESS_LCD = (i2c_address << 1); //set the lcd i2c address (left alignment).
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <lcd_init+0x94>)
 800100e:	701a      	strb	r2, [r3, #0]

	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001010:	2032      	movs	r0, #50	; 0x32
 8001012:	f001 fb81 	bl	8002718 <HAL_Delay>
	__lcd_send_cmd (0x30);
 8001016:	2030      	movs	r0, #48	; 0x30
 8001018:	f7ff ff16 	bl	8000e48 <__lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800101c:	2005      	movs	r0, #5
 800101e:	f001 fb7b 	bl	8002718 <HAL_Delay>
	__lcd_send_cmd (0x30);
 8001022:	2030      	movs	r0, #48	; 0x30
 8001024:	f7ff ff10 	bl	8000e48 <__lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001028:	2001      	movs	r0, #1
 800102a:	f001 fb75 	bl	8002718 <HAL_Delay>
	__lcd_send_cmd (0x30);
 800102e:	2030      	movs	r0, #48	; 0x30
 8001030:	f7ff ff0a 	bl	8000e48 <__lcd_send_cmd>
	HAL_Delay(10);
 8001034:	200a      	movs	r0, #10
 8001036:	f001 fb6f 	bl	8002718 <HAL_Delay>
	__lcd_send_cmd (0x20);  // 4bit mode
 800103a:	2020      	movs	r0, #32
 800103c:	f7ff ff04 	bl	8000e48 <__lcd_send_cmd>
	HAL_Delay(10);
 8001040:	200a      	movs	r0, #10
 8001042:	f001 fb69 	bl	8002718 <HAL_Delay>

  // dislay initialisation
	__lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001046:	2028      	movs	r0, #40	; 0x28
 8001048:	f7ff fefe 	bl	8000e48 <__lcd_send_cmd>
	HAL_Delay(1);
 800104c:	2001      	movs	r0, #1
 800104e:	f001 fb63 	bl	8002718 <HAL_Delay>
	__lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001052:	2008      	movs	r0, #8
 8001054:	f7ff fef8 	bl	8000e48 <__lcd_send_cmd>
	HAL_Delay(1);
 8001058:	2001      	movs	r0, #1
 800105a:	f001 fb5d 	bl	8002718 <HAL_Delay>
	__lcd_send_cmd (0x01);  // clear display
 800105e:	2001      	movs	r0, #1
 8001060:	f7ff fef2 	bl	8000e48 <__lcd_send_cmd>
	HAL_Delay(2);
 8001064:	2002      	movs	r0, #2
 8001066:	f001 fb57 	bl	8002718 <HAL_Delay>
	__lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800106a:	2006      	movs	r0, #6
 800106c:	f7ff feec 	bl	8000e48 <__lcd_send_cmd>
	HAL_Delay(1);
 8001070:	2001      	movs	r0, #1
 8001072:	f001 fb51 	bl	8002718 <HAL_Delay>
	__lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001076:	200c      	movs	r0, #12
 8001078:	f7ff fee6 	bl	8000e48 <__lcd_send_cmd>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2000075c 	.word	0x2000075c
 8001088:	20000758 	.word	0x20000758

0800108c <lcd_string_buff>:


void lcd_string_buff (char *str)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	while (*str) __lcd_send_data_buff(*str++);
 8001094:	e006      	b.n	80010a4 <lcd_string_buff+0x18>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff30 	bl	8000f04 <__lcd_send_data_buff>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1f4      	bne.n	8001096 <lcd_string_buff+0xa>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <__add_to_lcdBuff>:


void __add_to_lcdBuff(uint8_t* data, uint8_t sizeData){
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]
	while (i < sizeData){
 80010c4:	e018      	b.n	80010f8 <__add_to_lcdBuff+0x44>
		lcd_circ_buffer[lcd_circ_buff_in] = *(data + i);
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a11      	ldr	r2, [pc, #68]	; (8001114 <__add_to_lcdBuff+0x60>)
 80010ce:	8812      	ldrh	r2, [r2, #0]
 80010d0:	7819      	ldrb	r1, [r3, #0]
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <__add_to_lcdBuff+0x64>)
 80010d4:	5499      	strb	r1, [r3, r2]
		lcd_circ_buff_in++;
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <__add_to_lcdBuff+0x60>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	3301      	adds	r3, #1
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <__add_to_lcdBuff+0x60>)
 80010e0:	801a      	strh	r2, [r3, #0]
		i++;
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	3301      	adds	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
		if (lcd_circ_buff_in == LCD_CIRCBUFF_MAX){
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <__add_to_lcdBuff+0x60>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 80010f0:	d102      	bne.n	80010f8 <__add_to_lcdBuff+0x44>
			lcd_circ_buff_in = 0;
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <__add_to_lcdBuff+0x60>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	801a      	strh	r2, [r3, #0]
	while (i < sizeData){
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	78fb      	ldrb	r3, [r7, #3]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d3e2      	bcc.n	80010c6 <__add_to_lcdBuff+0x12>
		}
	}
	flag_sendLcd = 1;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <__add_to_lcdBuff+0x68>)
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000328 	.word	0x20000328
 8001118:	200004b0 	.word	0x200004b0
 800111c:	20000068 	.word	0x20000068

08001120 <__lcd_sendBuff_IT>:


void __lcd_sendBuff_IT (void){
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
	uint16_t I2C_Tx_ptr;
	uint16_t I2C_Tx_length;

	//if (I2CtxComplete != 0){ //si no termino la transmision anterior...

		if (lcd_circ_buff_out == LCD_CIRCBUFF_MAX){
 8001126:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <__lcd_sendBuff_IT+0xa4>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800112e:	d102      	bne.n	8001136 <__lcd_sendBuff_IT+0x16>
			lcd_circ_buff_out = 0;
 8001130:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <__lcd_sendBuff_IT+0xa4>)
 8001132:	2200      	movs	r2, #0
 8001134:	801a      	strh	r2, [r3, #0]
		}

		if (lcd_circ_buff_out == lcd_circ_buff_in){
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <__lcd_sendBuff_IT+0xa4>)
 8001138:	881a      	ldrh	r2, [r3, #0]
 800113a:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <__lcd_sendBuff_IT+0xa8>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	429a      	cmp	r2, r3
 8001140:	d103      	bne.n	800114a <__lcd_sendBuff_IT+0x2a>
			//no hay transmisión acá
			flag_sendLcd = 0;
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <__lcd_sendBuff_IT+0xac>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
			return;
 8001148:	e038      	b.n	80011bc <__lcd_sendBuff_IT+0x9c>
		}

		if (lcd_circ_buff_out > lcd_circ_buff_in){
 800114a:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <__lcd_sendBuff_IT+0xa4>)
 800114c:	881a      	ldrh	r2, [r3, #0]
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <__lcd_sendBuff_IT+0xa8>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	d907      	bls.n	8001166 <__lcd_sendBuff_IT+0x46>
			lcd_tx_length = LCD_CIRCBUFF_MAX - lcd_circ_buff_out;//transmite solo hasta el final del buffer, para luego reacomodar los punteros.
 8001156:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <__lcd_sendBuff_IT+0xa4>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	f5c3 732a 	rsb	r3, r3, #680	; 0x2a8
 800115e:	b29a      	uxth	r2, r3
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <__lcd_sendBuff_IT+0xb0>)
 8001162:	801a      	strh	r2, [r3, #0]
 8001164:	e007      	b.n	8001176 <__lcd_sendBuff_IT+0x56>
		}else{
			lcd_tx_length = lcd_circ_buff_in - lcd_circ_buff_out;
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <__lcd_sendBuff_IT+0xa8>)
 8001168:	881a      	ldrh	r2, [r3, #0]
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <__lcd_sendBuff_IT+0xa4>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	b29a      	uxth	r2, r3
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <__lcd_sendBuff_IT+0xb0>)
 8001174:	801a      	strh	r2, [r3, #0]
//		I2C_Tx_ptr = lcd_circ_buff_out;
//		I2C_Tx_length = lcd_tx_length;
//		lcd_circ_buff_out += lcd_tx_length;
//		lcd_tx_length = 0;

		if (I2CtxComplete != 0){
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <__lcd_sendBuff_IT+0xb4>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d01e      	beq.n	80011bc <__lcd_sendBuff_IT+0x9c>
			I2CtxComplete = 0;
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <__lcd_sendBuff_IT+0xb4>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]

			I2C_Tx_ptr = lcd_circ_buff_out;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <__lcd_sendBuff_IT+0xa4>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	80fb      	strh	r3, [r7, #6]
			I2C_Tx_length = lcd_tx_length;
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <__lcd_sendBuff_IT+0xb0>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	80bb      	strh	r3, [r7, #4]
			lcd_circ_buff_out += lcd_tx_length;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <__lcd_sendBuff_IT+0xa4>)
 8001192:	881a      	ldrh	r2, [r3, #0]
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <__lcd_sendBuff_IT+0xb0>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	4413      	add	r3, r2
 800119a:	b29a      	uxth	r2, r3
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <__lcd_sendBuff_IT+0xa4>)
 800119e:	801a      	strh	r2, [r3, #0]
			lcd_tx_length = 0;
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <__lcd_sendBuff_IT+0xb0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	801a      	strh	r2, [r3, #0]
			HAL_I2C_Master_Transmit_IT(i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) &lcd_circ_buffer[I2C_Tx_ptr],I2C_Tx_length);
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <__lcd_sendBuff_IT+0xb8>)
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <__lcd_sendBuff_IT+0xbc>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b299      	uxth	r1, r3
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <__lcd_sendBuff_IT+0xc0>)
 80011b4:	441a      	add	r2, r3
 80011b6:	88bb      	ldrh	r3, [r7, #4]
 80011b8:	f002 fb58 	bl	800386c <HAL_I2C_Master_Transmit_IT>
		}
	//}
}
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000032a 	.word	0x2000032a
 80011c8:	20000328 	.word	0x20000328
 80011cc:	20000068 	.word	0x20000068
 80011d0:	2000032c 	.word	0x2000032c
 80011d4:	20000069 	.word	0x20000069
 80011d8:	2000075c 	.word	0x2000075c
 80011dc:	20000758 	.word	0x20000758
 80011e0:	200004b0 	.word	0x200004b0

080011e4 <lcd_upDate_IT>:


void lcd_upDate_IT(void){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	if (flag_sendLcd) __lcd_sendBuff_IT();
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <lcd_upDate_IT+0x14>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <lcd_upDate_IT+0x10>
 80011f0:	f7ff ff96 	bl	8001120 <__lcd_sendBuff_IT>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000068 	.word	0x20000068

080011fc <_lcd_ISR>:


/* Insert the next function in your ISR*/
void _lcd_ISR (void){
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
	I2CtxComplete=1;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <_lcd_ISR+0x14>)
 8001202:	2201      	movs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	20000069 	.word	0x20000069

08001214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121a:	f001 fa0b 	bl	8002634 <HAL_Init>

  /* USER CODE BEGIN Init */
  firstDoTunning = 36;
 800121e:	4baa      	ldr	r3, [pc, #680]	; (80014c8 <main+0x2b4>)
 8001220:	2224      	movs	r2, #36	; 0x24
 8001222:	701a      	strb	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001224:	f000 f97a 	bl	800151c <SystemClock_Config>
   */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001228:	f7ff fd0c 	bl	8000c44 <MX_GPIO_Init>
  MX_DAC_Init();
 800122c:	f7ff fc92 	bl	8000b54 <MX_DAC_Init>
  MX_I2C1_Init();
 8001230:	f7ff fd84 	bl	8000d3c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001234:	f00a fcb6 	bl	800bba4 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001238:	f001 f824 	bl	8002284 <MX_TIM2_Init>
  MX_TIM3_Init();
 800123c:	f001 f86e 	bl	800231c <MX_TIM3_Init>
  MX_ADC1_Init();
 8001240:	f7ff fbd6 	bl	80009f0 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001244:	f001 f8fa 	bl	800243c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001248:	f001 f922 	bl	8002490 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 800124c:	f000 feb6 	bl	8001fbc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  spi_74HC165_init(&hspi1, PL_bot_GPIO_Port, PL_bot_Pin, CE_bot_GPIO_Port, CE_bot_Pin);
 8001250:	2340      	movs	r3, #64	; 0x40
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	4b9d      	ldr	r3, [pc, #628]	; (80014cc <main+0x2b8>)
 8001256:	2220      	movs	r2, #32
 8001258:	499c      	ldr	r1, [pc, #624]	; (80014cc <main+0x2b8>)
 800125a:	489d      	ldr	r0, [pc, #628]	; (80014d0 <main+0x2bc>)
 800125c:	f7ff f988 	bl	8000570 <spi_74HC165_init>

  HAL_TIM_Base_Start_IT(&htim2); // 1 ms tick timer.
 8001260:	489c      	ldr	r0, [pc, #624]	; (80014d4 <main+0x2c0>)
 8001262:	f006 fd08 	bl	8007c76 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); // 44100Hz timer.
 8001266:	489c      	ldr	r0, [pc, #624]	; (80014d8 <main+0x2c4>)
 8001268:	f006 fd05 	bl	8007c76 <HAL_TIM_Base_Start_IT>

  osc_dac_init(&hdac, DAC_CHANNEL_1);
 800126c:	2100      	movs	r1, #0
 800126e:	489b      	ldr	r0, [pc, #620]	; (80014dc <main+0x2c8>)
 8001270:	f000 fdaa 	bl	8001dc8 <osc_dac_init>
  osc_setRatios(100, 100, 100);
 8001274:	2264      	movs	r2, #100	; 0x64
 8001276:	2164      	movs	r1, #100	; 0x64
 8001278:	2064      	movs	r0, #100	; 0x64
 800127a:	f000 fe73 	bl	8001f64 <osc_setRatios>

  lcd_init(&hi2c1, 0x3f);
 800127e:	213f      	movs	r1, #63	; 0x3f
 8001280:	4897      	ldr	r0, [pc, #604]	; (80014e0 <main+0x2cc>)
 8001282:	f7ff feb7 	bl	8000ff4 <lcd_init>
  turnOnScreen();
 8001286:	f7ff fa1d 	bl	80006c4 <turnOnScreen>
  mainScreen();
 800128a:	f7ff fa7d 	bl	8000788 <mainScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	switch (screenNum){
 800128e:	4b95      	ldr	r3, [pc, #596]	; (80014e4 <main+0x2d0>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	3b03      	subs	r3, #3
 8001294:	2b08      	cmp	r3, #8
 8001296:	d856      	bhi.n	8001346 <main+0x132>
 8001298:	a201      	add	r2, pc, #4	; (adr r2, 80012a0 <main+0x8c>)
 800129a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129e:	bf00      	nop
 80012a0:	080012c5 	.word	0x080012c5
 80012a4:	080012d3 	.word	0x080012d3
 80012a8:	080012e1 	.word	0x080012e1
 80012ac:	08001347 	.word	0x08001347
 80012b0:	080012ef 	.word	0x080012ef
 80012b4:	0800130b 	.word	0x0800130b
 80012b8:	080012fd 	.word	0x080012fd
 80012bc:	08001325 	.word	0x08001325
 80012c0:	08001333 	.word	0x08001333
	  		case MAIN_SCREEN:
	  			mainScreen();
 80012c4:	f7ff fa60 	bl	8000788 <mainScreen>
	  			last_screenNum = screenNum;
 80012c8:	4b86      	ldr	r3, [pc, #536]	; (80014e4 <main+0x2d0>)
 80012ca:	781a      	ldrb	r2, [r3, #0]
 80012cc:	4b86      	ldr	r3, [pc, #536]	; (80014e8 <main+0x2d4>)
 80012ce:	701a      	strb	r2, [r3, #0]
	  		break;
 80012d0:	e03a      	b.n	8001348 <main+0x134>
	  		case CHORD_SCREEN:
	  			chordScreen();
 80012d2:	f7ff fa13 	bl	80006fc <chordScreen>
	  			last_screenNum = screenNum;
 80012d6:	4b83      	ldr	r3, [pc, #524]	; (80014e4 <main+0x2d0>)
 80012d8:	781a      	ldrb	r2, [r3, #0]
 80012da:	4b83      	ldr	r3, [pc, #524]	; (80014e8 <main+0x2d4>)
 80012dc:	701a      	strb	r2, [r3, #0]
	  		break;
 80012de:	e033      	b.n	8001348 <main+0x134>
	  		case TUNNE_SCREEN:
	  			tunneScreen();
 80012e0:	f7ff fac6 	bl	8000870 <tunneScreen>
	  			last_screenNum = screenNum;
 80012e4:	4b7f      	ldr	r3, [pc, #508]	; (80014e4 <main+0x2d0>)
 80012e6:	781a      	ldrb	r2, [r3, #0]
 80012e8:	4b7f      	ldr	r3, [pc, #508]	; (80014e8 <main+0x2d4>)
 80012ea:	701a      	strb	r2, [r3, #0]
	  		break;
 80012ec:	e02c      	b.n	8001348 <main+0x134>
	  		case RECUEST_FOOTKEY_SCREEN:
	  			recuest_footkey();
 80012ee:	f7ff fb05 	bl	80008fc <recuest_footkey>
	  			last_screenNum = screenNum; //this variable must store the CHORD_SCREEN value, to use it as return point.
 80012f2:	4b7c      	ldr	r3, [pc, #496]	; (80014e4 <main+0x2d0>)
 80012f4:	781a      	ldrb	r2, [r3, #0]
 80012f6:	4b7c      	ldr	r3, [pc, #496]	; (80014e8 <main+0x2d4>)
 80012f8:	701a      	strb	r2, [r3, #0]
	  		break;
 80012fa:	e025      	b.n	8001348 <main+0x134>
	  		case POPUP_OCTAVE:
	  			on_off_octave();
 80012fc:	f7ff fae2 	bl	80008c4 <on_off_octave>
	  			popup_time = 2000;
 8001300:	4b7a      	ldr	r3, [pc, #488]	; (80014ec <main+0x2d8>)
 8001302:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001306:	601a      	str	r2, [r3, #0]
	  		break;
 8001308:	e01e      	b.n	8001348 <main+0x134>
	  		case POPUP_SAVED_CHORD:
	  			pop_up_savedChord(lastKey_pos);
 800130a:	4b79      	ldr	r3, [pc, #484]	; (80014f0 <main+0x2dc>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fb0c 	bl	800092c <pop_up_savedChord>
	  			last_screenNum = CHORD_SCREEN;
 8001314:	4b74      	ldr	r3, [pc, #464]	; (80014e8 <main+0x2d4>)
 8001316:	2204      	movs	r2, #4
 8001318:	701a      	strb	r2, [r3, #0]
	  			popup_time = 2000;
 800131a:	4b74      	ldr	r3, [pc, #464]	; (80014ec <main+0x2d8>)
 800131c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001320:	601a      	str	r2, [r3, #0]
	  		break;
 8001322:	e011      	b.n	8001348 <main+0x134>
	  		case POPUP_SUSTAIN:
	  			pop_up_sustain();
 8001324:	f7ff fb28 	bl	8000978 <pop_up_sustain>
	  			popup_time = 2000;
 8001328:	4b70      	ldr	r3, [pc, #448]	; (80014ec <main+0x2d8>)
 800132a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800132e:	601a      	str	r2, [r3, #0]
	  		break;
 8001330:	e00a      	b.n	8001348 <main+0x134>
	  		case POPUP_CANCEL:
	  			pop_up_cancel();
 8001332:	f7ff fb4d 	bl	80009d0 <pop_up_cancel>
	  			popup_time = 2000;
 8001336:	4b6d      	ldr	r3, [pc, #436]	; (80014ec <main+0x2d8>)
 8001338:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800133c:	601a      	str	r2, [r3, #0]
	  			last_screenNum = CHORD_SCREEN;
 800133e:	4b6a      	ldr	r3, [pc, #424]	; (80014e8 <main+0x2d4>)
 8001340:	2204      	movs	r2, #4
 8001342:	701a      	strb	r2, [r3, #0]
	  		break;
 8001344:	e000      	b.n	8001348 <main+0x134>
	  		default:
	  		break;
 8001346:	bf00      	nop
	  	}
	  	screenNum = NO_SCREEN;
 8001348:	4b66      	ldr	r3, [pc, #408]	; (80014e4 <main+0x2d0>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]

	  	if (popup_timeUp){
 800134e:	4b69      	ldr	r3, [pc, #420]	; (80014f4 <main+0x2e0>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00a      	beq.n	800136e <main+0x15a>
	  		if (screenNum == NO_SCREEN) screenNum = last_screenNum;
 8001358:	4b62      	ldr	r3, [pc, #392]	; (80014e4 <main+0x2d0>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d103      	bne.n	8001368 <main+0x154>
 8001360:	4b61      	ldr	r3, [pc, #388]	; (80014e8 <main+0x2d4>)
 8001362:	781a      	ldrb	r2, [r3, #0]
 8001364:	4b5f      	ldr	r3, [pc, #380]	; (80014e4 <main+0x2d0>)
 8001366:	701a      	strb	r2, [r3, #0]
	  		popup_timeUp = 0;
 8001368:	4b62      	ldr	r3, [pc, #392]	; (80014f4 <main+0x2e0>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
	  	}

	  	//botones y teclas
	  	buttonFall = last_button & ~read_button;
 800136e:	4b62      	ldr	r3, [pc, #392]	; (80014f8 <main+0x2e4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	43da      	mvns	r2, r3
 8001374:	4b61      	ldr	r3, [pc, #388]	; (80014fc <main+0x2e8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4013      	ands	r3, r2
 800137a:	4a61      	ldr	r2, [pc, #388]	; (8001500 <main+0x2ec>)
 800137c:	6013      	str	r3, [r2, #0]
	  	buttonRise = ~last_button & read_button;
 800137e:	4b5f      	ldr	r3, [pc, #380]	; (80014fc <main+0x2e8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	43da      	mvns	r2, r3
 8001384:	4b5c      	ldr	r3, [pc, #368]	; (80014f8 <main+0x2e4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4013      	ands	r3, r2
 800138a:	4a5e      	ldr	r2, [pc, #376]	; (8001504 <main+0x2f0>)
 800138c:	6013      	str	r3, [r2, #0]
	  	if (GETBUTTONSTATUS(IN_BACK, buttonFall)){
 800138e:	4b5c      	ldr	r3, [pc, #368]	; (8001500 <main+0x2ec>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001396:	2b00      	cmp	r3, #0
 8001398:	d005      	beq.n	80013a6 <main+0x192>
	  		screenNum = MAIN_SCREEN;
 800139a:	4b52      	ldr	r3, [pc, #328]	; (80014e4 <main+0x2d0>)
 800139c:	2203      	movs	r2, #3
 800139e:	701a      	strb	r2, [r3, #0]
	  		menu = MAIN_SCREEN;
 80013a0:	4b59      	ldr	r3, [pc, #356]	; (8001508 <main+0x2f4>)
 80013a2:	2203      	movs	r2, #3
 80013a4:	701a      	strb	r2, [r3, #0]
	  	}
	  	if (GETBUTTONSTATUS(IN_SUST_PROP, buttonFall)){
 80013a6:	4b56      	ldr	r3, [pc, #344]	; (8001500 <main+0x2ec>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <main+0x1a2>
	  		sustainProp();
 80013b2:	f000 f91d 	bl	80015f0 <sustainProp>
	  	}
	  	if (GETBUTTONSTATUS(IN_SUST_MIDI, buttonFall)){
 80013b6:	4b52      	ldr	r3, [pc, #328]	; (8001500 <main+0x2ec>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <main+0x1b2>
	  		sustainMIDI();
 80013c2:	f000 f965 	bl	8001690 <sustainMIDI>
	  	}
	  	if (GETBUTTONSTATUS(IN_CHORD, buttonFall)){
 80013c6:	4b4e      	ldr	r3, [pc, #312]	; (8001500 <main+0x2ec>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <main+0x1c2>
	  		inputChord();
 80013d2:	f000 f9a1 	bl	8001718 <inputChord>
	  	}
	  	inputOctave();
 80013d6:	f000 f9dd 	bl	8001794 <inputOctave>
	  	if (GETBUTTONSTATUS(IN_TUNNE, buttonFall)){
 80013da:	4b49      	ldr	r3, [pc, #292]	; (8001500 <main+0x2ec>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <main+0x1d6>
	  		inputTunne();
 80013e6:	f000 fa09 	bl	80017fc <inputTunne>
	  	}
	  	inputPresets();
 80013ea:	f000 fa23 	bl	8001834 <inputPresets>

	  	last_button = read_button;
 80013ee:	4b42      	ldr	r3, [pc, #264]	; (80014f8 <main+0x2e4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a42      	ldr	r2, [pc, #264]	; (80014fc <main+0x2e8>)
 80013f4:	6013      	str	r3, [r2, #0]
	  		default:
	  		break;
	  	}
	  	*/

	    switch (menu){ //manage the recuested menu function.
 80013f6:	4b44      	ldr	r3, [pc, #272]	; (8001508 <main+0x2f4>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	3b03      	subs	r3, #3
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d81c      	bhi.n	800143a <main+0x226>
 8001400:	a201      	add	r2, pc, #4	; (adr r2, 8001408 <main+0x1f4>)
 8001402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001406:	bf00      	nop
 8001408:	0800141d 	.word	0x0800141d
 800140c:	08001423 	.word	0x08001423
 8001410:	0800142d 	.word	0x0800142d
 8001414:	0800143b 	.word	0x0800143b
 8001418:	08001437 	.word	0x08001437
	    	case MAIN_SCREEN:
	    		inputNotes();
 800141c:	f000 fa3a 	bl	8001894 <inputNotes>
	    	break;
 8001420:	e00c      	b.n	800143c <main+0x228>
	  		case CHORD_SCREEN:
	  			chordSelect();
 8001422:	f000 fb41 	bl	8001aa8 <chordSelect>
	  			inputNotes();
 8001426:	f000 fa35 	bl	8001894 <inputNotes>
	  		break;
 800142a:	e007      	b.n	800143c <main+0x228>
	  		case TUNNE_SCREEN:
	  			tunneSelect();
 800142c:	f000 fc00 	bl	8001c30 <tunneSelect>
	  			inputNotes();
 8001430:	f000 fa30 	bl	8001894 <inputNotes>
	  		break;
 8001434:	e002      	b.n	800143c <main+0x228>
	  		case RECUEST_FOOTKEY_SCREEN:
	  			inputSaveChord(); // @suppress("No break at end of case")
 8001436:	f000 fae5 	bl	8001a04 <inputSaveChord>
	  		default:
	  		break;
 800143a:	bf00      	nop

	    }

	    MIDI_SendCheck();
 800143c:	f00a fe04 	bl	800c048 <MIDI_SendCheck>

		if (flag_dac != 0){
 8001440:	4b32      	ldr	r3, [pc, #200]	; (800150c <main+0x2f8>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d004      	beq.n	8001452 <main+0x23e>
		  osc_dac_update();
 8001448:	f000 fcda 	bl	8001e00 <osc_dac_update>
		  flag_dac = 0;
 800144c:	4b2f      	ldr	r3, [pc, #188]	; (800150c <main+0x2f8>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
		}


	    if (flag_tick != 0){
 8001452:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <main+0x2fc>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f43f af19 	beq.w	800128e <main+0x7a>

	    	if (lcd_refresh_time != 0){
 800145c:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <main+0x300>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d006      	beq.n	8001472 <main+0x25e>
	    		lcd_refresh_time--;
 8001464:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <main+0x300>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	3b01      	subs	r3, #1
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4b29      	ldr	r3, [pc, #164]	; (8001514 <main+0x300>)
 800146e:	701a      	strb	r2, [r3, #0]
 8001470:	e004      	b.n	800147c <main+0x268>
	    	}else{
	    		lcd_upDate_IT();
 8001472:	f7ff feb7 	bl	80011e4 <lcd_upDate_IT>
	    		lcd_refresh_time = 25;
 8001476:	4b27      	ldr	r3, [pc, #156]	; (8001514 <main+0x300>)
 8001478:	2219      	movs	r2, #25
 800147a:	701a      	strb	r2, [r3, #0]
	    	}//end if lcd_refresh_time

	    	if (popup_time != 0){
 800147c:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <main+0x2d8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00b      	beq.n	800149c <main+0x288>
				popup_time--;
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <main+0x2d8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3b01      	subs	r3, #1
 800148a:	4a18      	ldr	r2, [pc, #96]	; (80014ec <main+0x2d8>)
 800148c:	6013      	str	r3, [r2, #0]
				if (popup_time == 1) popup_timeUp = 1;
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <main+0x2d8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d102      	bne.n	800149c <main+0x288>
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <main+0x2e0>)
 8001498:	2201      	movs	r2, #1
 800149a:	701a      	strb	r2, [r3, #0]
			}//end if popup_time

	    	if (refresh_buttons != 0){
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <main+0x304>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d006      	beq.n	80014b2 <main+0x29e>
	    		refresh_buttons--;
 80014a4:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <main+0x304>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <main+0x304>)
 80014ae:	701a      	strb	r2, [r3, #0]
 80014b0:	e006      	b.n	80014c0 <main+0x2ac>
	    	}else{
//	    		last_button = read_button;
	    		spi_74HC165_receive((uint8_t *)&read_button, sizeof(read_button));
 80014b2:	2104      	movs	r1, #4
 80014b4:	4810      	ldr	r0, [pc, #64]	; (80014f8 <main+0x2e4>)
 80014b6:	f7ff f883 	bl	80005c0 <spi_74HC165_receive>

//	    		buttonFall = last_button & ~read_button;
//	    		buttonRise = ~last_button & read_button;

	    		refresh_buttons = 20;
 80014ba:	4b17      	ldr	r3, [pc, #92]	; (8001518 <main+0x304>)
 80014bc:	2214      	movs	r2, #20
 80014be:	701a      	strb	r2, [r3, #0]
	    	}

	    	flag_tick = 0;
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <main+0x2fc>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
	  	switch (screenNum){
 80014c6:	e6e2      	b.n	800128e <main+0x7a>
 80014c8:	200003f0 	.word	0x200003f0
 80014cc:	40020c00 	.word	0x40020c00
 80014d0:	20000770 	.word	0x20000770
 80014d4:	20000808 	.word	0x20000808
 80014d8:	200007c8 	.word	0x200007c8
 80014dc:	20000448 	.word	0x20000448
 80014e0:	2000045c 	.word	0x2000045c
 80014e4:	20000375 	.word	0x20000375
 80014e8:	20000086 	.word	0x20000086
 80014ec:	20000378 	.word	0x20000378
 80014f0:	20000760 	.word	0x20000760
 80014f4:	2000037c 	.word	0x2000037c
 80014f8:	2000006c 	.word	0x2000006c
 80014fc:	20000070 	.word	0x20000070
 8001500:	2000036c 	.word	0x2000036c
 8001504:	20000370 	.word	0x20000370
 8001508:	20000085 	.word	0x20000085
 800150c:	2000037f 	.word	0x2000037f
 8001510:	2000037e 	.word	0x2000037e
 8001514:	20000087 	.word	0x20000087
 8001518:	20000074 	.word	0x20000074

0800151c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b094      	sub	sp, #80	; 0x50
 8001520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001522:	f107 0320 	add.w	r3, r7, #32
 8001526:	2230      	movs	r2, #48	; 0x30
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f00b f8d8 	bl	800c6e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <SystemClock_Config+0xcc>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	4a27      	ldr	r2, [pc, #156]	; (80015e8 <SystemClock_Config+0xcc>)
 800154a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154e:	6413      	str	r3, [r2, #64]	; 0x40
 8001550:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <SystemClock_Config+0xcc>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800155c:	2300      	movs	r3, #0
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	4b22      	ldr	r3, [pc, #136]	; (80015ec <SystemClock_Config+0xd0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a21      	ldr	r2, [pc, #132]	; (80015ec <SystemClock_Config+0xd0>)
 8001566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <SystemClock_Config+0xd0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001578:	2301      	movs	r3, #1
 800157a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800157c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001582:	2302      	movs	r3, #2
 8001584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800158a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800158c:	2304      	movs	r3, #4
 800158e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001590:	23a8      	movs	r3, #168	; 0xa8
 8001592:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001594:	2302      	movs	r3, #2
 8001596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001598:	2307      	movs	r3, #7
 800159a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800159c:	f107 0320 	add.w	r3, r7, #32
 80015a0:	4618      	mov	r0, r3
 80015a2:	f005 f99b 	bl	80068dc <HAL_RCC_OscConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015ac:	f000 fc04 	bl	8001db8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b0:	230f      	movs	r3, #15
 80015b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b4:	2302      	movs	r3, #2
 80015b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	2105      	movs	r1, #5
 80015ce:	4618      	mov	r0, r3
 80015d0:	f005 fbf4 	bl	8006dbc <HAL_RCC_ClockConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015da:	f000 fbed 	bl	8001db8 <Error_Handler>
  }
}
 80015de:	bf00      	nop
 80015e0:	3750      	adds	r7, #80	; 0x50
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40007000 	.word	0x40007000

080015f0 <sustainProp>:

/* USER CODE BEGIN 4 */

void sustainProp (void){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0

		for (int j = 0; j <= 12; j++){
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	e00b      	b.n	8001614 <sustainProp+0x24>
			sendChord(lastSendNote[j], 0, 1); // silents all notes
 80015fc:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <sustainProp+0x88>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001604:	2201      	movs	r2, #1
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f000 fb53 	bl	8001cb4 <sendChord>
		for (int j = 0; j <= 12; j++){
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3301      	adds	r3, #1
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b0c      	cmp	r3, #12
 8001618:	ddf0      	ble.n	80015fc <sustainProp+0xc>
		}

		switch (sustainMode){
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <sustainProp+0x8c>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d01b      	beq.n	800165a <sustainProp+0x6a>
 8001622:	2b02      	cmp	r3, #2
 8001624:	d002      	beq.n	800162c <sustainProp+0x3c>
 8001626:	2b00      	cmp	r3, #0
 8001628:	d010      	beq.n	800164c <sustainProp+0x5c>
 800162a:	e01d      	b.n	8001668 <sustainProp+0x78>
			case 2:
				//event = {0x0B, 0xB0 | MIDI_CHANNEL, 64, 0};
				//MidiUSB.sendMIDI(event);
				midi_msg[0] = 0x0B; //0x0B == type event (control change)
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <sustainProp+0x90>)
 800162e:	220b      	movs	r2, #11
 8001630:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 8001632:	4b13      	ldr	r3, [pc, #76]	; (8001680 <sustainProp+0x90>)
 8001634:	22b1      	movs	r2, #177	; 0xb1
 8001636:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	// 64 == sustain.
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <sustainProp+0x90>)
 800163a:	2240      	movs	r2, #64	; 0x40
 800163c:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 0;
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <sustainProp+0x90>)
 8001640:	2200      	movs	r2, #0
 8001642:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4); // @suppress("No break at end of case")
 8001644:	2104      	movs	r1, #4
 8001646:	480e      	ldr	r0, [pc, #56]	; (8001680 <sustainProp+0x90>)
 8001648:	f00a fcc8 	bl	800bfdc <MIDI_SendBuffer>
			case 0:
				lastSustainNote = 0;
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <sustainProp+0x94>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
				sustainMode = 1; //prop
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <sustainProp+0x8c>)
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
			break;
 8001658:	e006      	b.n	8001668 <sustainProp+0x78>

			case 1:
				sustainFlag = 1;
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <sustainProp+0x98>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
				sustainMode = 0;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <sustainProp+0x8c>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
			break;
 8001666:	bf00      	nop
		} //end switch

		screenNum = POPUP_SUSTAIN;
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <sustainProp+0x9c>)
 800166a:	220a      	movs	r2, #10
 800166c:	701a      	strb	r2, [r3, #0]

} //end sustainProp()
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000330 	.word	0x20000330
 800167c:	20000368 	.word	0x20000368
 8001680:	20000764 	.word	0x20000764
 8001684:	20000364 	.word	0x20000364
 8001688:	2000006a 	.word	0x2000006a
 800168c:	20000375 	.word	0x20000375

08001690 <sustainMIDI>:

void sustainMIDI (void){
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0

		switch (sustainMode){
 8001694:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <sustainMIDI+0x78>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	db2f      	blt.n	80016fc <sustainMIDI+0x6c>
 800169c:	2b01      	cmp	r3, #1
 800169e:	dd02      	ble.n	80016a6 <sustainMIDI+0x16>
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d017      	beq.n	80016d4 <sustainMIDI+0x44>
 80016a4:	e02a      	b.n	80016fc <sustainMIDI+0x6c>
			case 0:
			case 1:
				sustainFlag = 1;	// needed to normal notes functioning.
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <sustainMIDI+0x7c>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]

				midi_msg[0] = 0x0B;		//0x0B == type event (control change),
 80016ac:	4b18      	ldr	r3, [pc, #96]	; (8001710 <sustainMIDI+0x80>)
 80016ae:	220b      	movs	r2, #11
 80016b0:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <sustainMIDI+0x80>)
 80016b4:	22b1      	movs	r2, #177	; 0xb1
 80016b6:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	//64 == sustain.
 80016b8:	4b15      	ldr	r3, [pc, #84]	; (8001710 <sustainMIDI+0x80>)
 80016ba:	2240      	movs	r2, #64	; 0x40
 80016bc:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 127;
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <sustainMIDI+0x80>)
 80016c0:	227f      	movs	r2, #127	; 0x7f
 80016c2:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4);
 80016c4:	2104      	movs	r1, #4
 80016c6:	4812      	ldr	r0, [pc, #72]	; (8001710 <sustainMIDI+0x80>)
 80016c8:	f00a fc88 	bl	800bfdc <MIDI_SendBuffer>

				sustainMode = 2;
 80016cc:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <sustainMIDI+0x78>)
 80016ce:	2202      	movs	r2, #2
 80016d0:	701a      	strb	r2, [r3, #0]
			break;
 80016d2:	e013      	b.n	80016fc <sustainMIDI+0x6c>
			case 2:
				midi_msg[0] = 0x0B;	//0x0B == type event (control change)
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <sustainMIDI+0x80>)
 80016d6:	220b      	movs	r2, #11
 80016d8:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <sustainMIDI+0x80>)
 80016dc:	22b1      	movs	r2, #177	; 0xb1
 80016de:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	//64 == sustain.
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <sustainMIDI+0x80>)
 80016e2:	2240      	movs	r2, #64	; 0x40
 80016e4:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 0;
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <sustainMIDI+0x80>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4);
 80016ec:	2104      	movs	r1, #4
 80016ee:	4808      	ldr	r0, [pc, #32]	; (8001710 <sustainMIDI+0x80>)
 80016f0:	f00a fc74 	bl	800bfdc <MIDI_SendBuffer>

				sustainMode = 0;
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <sustainMIDI+0x78>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
			break;
 80016fa:	bf00      	nop
		} //end switch

		screenNum = POPUP_SUSTAIN;
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <sustainMIDI+0x84>)
 80016fe:	220a      	movs	r2, #10
 8001700:	701a      	strb	r2, [r3, #0]
} //end sustainMIDI()
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000368 	.word	0x20000368
 800170c:	2000006a 	.word	0x2000006a
 8001710:	20000764 	.word	0x20000764
 8001714:	20000375 	.word	0x20000375

08001718 <inputChord>:

void inputChord (void){
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

	switch (menu){
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <inputChord+0x70>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d002      	beq.n	800172a <inputChord+0x12>
 8001724:	2b04      	cmp	r3, #4
 8001726:	d015      	beq.n	8001754 <inputChord+0x3c>
 8001728:	e01e      	b.n	8001768 <inputChord+0x50>
		case MAIN_SCREEN:
			if (acorde != 0){
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <inputChord+0x74>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d006      	beq.n	8001740 <inputChord+0x28>
				acorde = 0;
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <inputChord+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
				screenNum = MAIN_SCREEN;
 8001738:	4b15      	ldr	r3, [pc, #84]	; (8001790 <inputChord+0x78>)
 800173a:	2203      	movs	r2, #3
 800173c:	701a      	strb	r2, [r3, #0]
			}else{
				screenNum = CHORD_SCREEN;
				menu = CHORD_SCREEN;
				acorde = 1;
			} //fin if acorde
		break;
 800173e:	e01d      	b.n	800177c <inputChord+0x64>
				screenNum = CHORD_SCREEN;
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <inputChord+0x78>)
 8001742:	2204      	movs	r2, #4
 8001744:	701a      	strb	r2, [r3, #0]
				menu = CHORD_SCREEN;
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <inputChord+0x70>)
 8001748:	2204      	movs	r2, #4
 800174a:	701a      	strb	r2, [r3, #0]
				acorde = 1;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <inputChord+0x74>)
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
		break;
 8001752:	e013      	b.n	800177c <inputChord+0x64>
		case CHORD_SCREEN:
			screenNum = MAIN_SCREEN;
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <inputChord+0x78>)
 8001756:	2203      	movs	r2, #3
 8001758:	701a      	strb	r2, [r3, #0]
			menu = MAIN_SCREEN;
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <inputChord+0x70>)
 800175c:	2203      	movs	r2, #3
 800175e:	701a      	strb	r2, [r3, #0]
			acorde = 0;
 8001760:	4b0a      	ldr	r3, [pc, #40]	; (800178c <inputChord+0x74>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
		break;
 8001766:	e009      	b.n	800177c <inputChord+0x64>
		default:
			screenNum = CHORD_SCREEN;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <inputChord+0x78>)
 800176a:	2204      	movs	r2, #4
 800176c:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN;
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <inputChord+0x70>)
 8001770:	2204      	movs	r2, #4
 8001772:	701a      	strb	r2, [r3, #0]
			acorde = 1;
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <inputChord+0x74>)
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
		break;
 800177a:	bf00      	nop
	} //fin switch menu

} //end inputChord()
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000085 	.word	0x20000085
 800178c:	20000374 	.word	0x20000374
 8001790:	20000375 	.word	0x20000375

08001794 <inputOctave>:


void inputOctave (void){
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0

	if(GETBUTTONSTATUS(IN_OCT_G, buttonFall)){
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <inputOctave+0x5c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d007      	beq.n	80017b4 <inputOctave+0x20>
		octava = -1;
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <inputOctave+0x60>)
 80017a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017aa:	601a      	str	r2, [r3, #0]
		screenNum=POPUP_OCTAVE;
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <inputOctave+0x64>)
 80017ae:	2209      	movs	r2, #9
 80017b0:	701a      	strb	r2, [r3, #0]
		return;
 80017b2:	e019      	b.n	80017e8 <inputOctave+0x54>
	}

	if (GETBUTTONSTATUS(IN_OCT_M, buttonFall)){
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <inputOctave+0x5c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <inputOctave+0x3a>
		octava = 0;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <inputOctave+0x60>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
		screenNum=POPUP_OCTAVE;
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <inputOctave+0x64>)
 80017c8:	2209      	movs	r2, #9
 80017ca:	701a      	strb	r2, [r3, #0]
		return;
 80017cc:	e00c      	b.n	80017e8 <inputOctave+0x54>
	}

	if (GETBUTTONSTATUS(IN_OCT_A, buttonFall)){
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <inputOctave+0x5c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d006      	beq.n	80017e8 <inputOctave+0x54>
		octava = 1;
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <inputOctave+0x60>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]
		screenNum=POPUP_OCTAVE;
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <inputOctave+0x64>)
 80017e2:	2209      	movs	r2, #9
 80017e4:	701a      	strb	r2, [r3, #0]
		return;
 80017e6:	bf00      	nop
	}
} //end inputOctave()
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	2000036c 	.word	0x2000036c
 80017f4:	200002f0 	.word	0x200002f0
 80017f8:	20000375 	.word	0x20000375

080017fc <inputTunne>:


void inputTunne(void){
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

      if (menu != TUNNE_SCREEN){
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <inputTunne+0x30>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b05      	cmp	r3, #5
 8001806:	d006      	beq.n	8001816 <inputTunne+0x1a>
		screenNum = TUNNE_SCREEN;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <inputTunne+0x34>)
 800180a:	2205      	movs	r2, #5
 800180c:	701a      	strb	r2, [r3, #0]
		menu = TUNNE_SCREEN;
 800180e:	4b07      	ldr	r3, [pc, #28]	; (800182c <inputTunne+0x30>)
 8001810:	2205      	movs	r2, #5
 8001812:	701a      	strb	r2, [r3, #0]
	  }else{
		screenNum = MAIN_SCREEN;
		menu = MAIN_SCREEN;
	  } //end  if menu

} //end inputTunne()
 8001814:	e005      	b.n	8001822 <inputTunne+0x26>
		screenNum = MAIN_SCREEN;
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <inputTunne+0x34>)
 8001818:	2203      	movs	r2, #3
 800181a:	701a      	strb	r2, [r3, #0]
		menu = MAIN_SCREEN;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <inputTunne+0x30>)
 800181e:	2203      	movs	r2, #3
 8001820:	701a      	strb	r2, [r3, #0]
} //end inputTunne()
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	20000085 	.word	0x20000085
 8001830:	20000375 	.word	0x20000375

08001834 <inputPresets>:


void inputPresets (void){
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++){                                         // 6 presets en total.
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	e01e      	b.n	800187e <inputPresets+0x4a>

		if (GETBUTTONSTATUS(i + IN_PRESET0, buttonFall)){
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3308      	adds	r3, #8
 8001844:	2201      	movs	r2, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	461a      	mov	r2, r3
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <inputPresets+0x58>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4013      	ands	r3, r2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d010      	beq.n	8001878 <inputPresets+0x44>
			midi_msg[0] = 0x0C;	//0x0C == type event (program change)
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <inputPresets+0x5c>)
 8001858:	220c      	movs	r2, #12
 800185a:	701a      	strb	r2, [r3, #0]
			midi_msg[1] = 0xC0 | 1;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <inputPresets+0x5c>)
 800185e:	22c1      	movs	r2, #193	; 0xc1
 8001860:	705a      	strb	r2, [r3, #1]
			midi_msg[2] = i;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <inputPresets+0x5c>)
 8001868:	709a      	strb	r2, [r3, #2]
			midi_msg[3] = 0;	//last param == 0 (unused in program change).
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <inputPresets+0x5c>)
 800186c:	2200      	movs	r2, #0
 800186e:	70da      	strb	r2, [r3, #3]
			MIDI_SendBuffer(midi_msg, 4);
 8001870:	2104      	movs	r1, #4
 8001872:	4807      	ldr	r0, [pc, #28]	; (8001890 <inputPresets+0x5c>)
 8001874:	f00a fbb2 	bl	800bfdc <MIDI_SendBuffer>
	for (int i = 0; i < 6; i++){                                         // 6 presets en total.
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3301      	adds	r3, #1
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b05      	cmp	r3, #5
 8001882:	dddd      	ble.n	8001840 <inputPresets+0xc>
		} //end if

	} //end for

} //end inputPresets()
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	2000036c 	.word	0x2000036c
 8001890:	20000764 	.word	0x20000764

08001894 <inputNotes>:


void inputNotes(void){
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0

  uint8_t pressedNote;

  for (int i = 0; i <= 12; i++){
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	e094      	b.n	80019ca <inputNotes+0x136>

//    buttonState[i + IN_DO] = HAL_GPIO_ReadPin(notePort_list[i], notePin_list[i]); //read current button pin.

//    if(!buttonState[i + IN_DO] && lastState[i + IN_DO]){  // If we read 1, and the last time we read 0, means button was just pressed.
    if (GETBUTTONSTATUS(teclas[i], buttonFall)){
 80018a0:	4a4e      	ldr	r2, [pc, #312]	; (80019dc <inputNotes+0x148>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	2301      	movs	r3, #1
 80018ac:	4093      	lsls	r3, r2
 80018ae:	461a      	mov	r2, r3
 80018b0:	4b4b      	ldr	r3, [pc, #300]	; (80019e0 <inputNotes+0x14c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d067      	beq.n	800198a <inputNotes+0xf6>
        pressedNote = firstDoTunning + i + 12 * octava; //detects the pressed note.
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4b49      	ldr	r3, [pc, #292]	; (80019e4 <inputNotes+0x150>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4b48      	ldr	r3, [pc, #288]	; (80019e8 <inputNotes+0x154>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	4619      	mov	r1, r3
 80018ce:	0049      	lsls	r1, r1, #1
 80018d0:	440b      	add	r3, r1
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	4413      	add	r3, r2
 80018d8:	70fb      	strb	r3, [r7, #3]

    	if (acorde){ //If chord mode is on...
 80018da:	4b44      	ldr	r3, [pc, #272]	; (80019ec <inputNotes+0x158>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00c      	beq.n	80018fc <inputNotes+0x68>
            lastSendNote[i] = makeChord(pressedNote, i); // saves the current chord config. on pressed note.
 80018e2:	78fb      	ldrb	r3, [r7, #3]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fea4 	bl	8000638 <makeChord>
 80018f0:	4601      	mov	r1, r0
 80018f2:	4a3f      	ldr	r2, [pc, #252]	; (80019f0 <inputNotes+0x15c>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80018fa:	e004      	b.n	8001906 <inputNotes+0x72>

        }else{ //If chord mode is off...

            lastSendNote[i] = pressedNote; // saves nothing but pressed note.
 80018fc:	78fa      	ldrb	r2, [r7, #3]
 80018fe:	493c      	ldr	r1, [pc, #240]	; (80019f0 <inputNotes+0x15c>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        } //end if acorde


        if (sustainMode == 1){ // If proprietary sustain mode on...
 8001906:	4b3b      	ldr	r3, [pc, #236]	; (80019f4 <inputNotes+0x160>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d122      	bne.n	8001954 <inputNotes+0xc0>

			if (lastSustainNote != lastSendNote[i]){ // If last sustained note differs from the current pressed one...
 800190e:	4a38      	ldr	r2, [pc, #224]	; (80019f0 <inputNotes+0x15c>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001916:	4b38      	ldr	r3, [pc, #224]	; (80019f8 <inputNotes+0x164>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d010      	beq.n	8001940 <inputNotes+0xac>

				sendChord(lastSustainNote, 0, 1); // mute current chord. 0 in second param means "noteOff".
 800191e:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <inputNotes+0x164>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2201      	movs	r2, #1
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f9c4 	bl	8001cb4 <sendChord>
				lastSustainNote = lastSendNote[i]; // and saves the current sustained note.
 800192c:	4a30      	ldr	r2, [pc, #192]	; (80019f0 <inputNotes+0x15c>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001934:	4a30      	ldr	r2, [pc, #192]	; (80019f8 <inputNotes+0x164>)
 8001936:	6013      	str	r3, [r2, #0]
				sustainFlag = 1; // turn sustained note on
 8001938:	4b30      	ldr	r3, [pc, #192]	; (80019fc <inputNotes+0x168>)
 800193a:	2201      	movs	r2, #1
 800193c:	701a      	strb	r2, [r3, #0]
 800193e:	e009      	b.n	8001954 <inputNotes+0xc0>

			}else{ // If last sustained note and the current pressed one are the same...

				sustainFlag = !sustainFlag; // turn sustained note off.
 8001940:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <inputNotes+0x168>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	bf0c      	ite	eq
 8001948:	2301      	moveq	r3, #1
 800194a:	2300      	movne	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	461a      	mov	r2, r3
 8001950:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <inputNotes+0x168>)
 8001952:	701a      	strb	r2, [r3, #0]

			}//end if lastSustainNote...
        }//end if sustainMode


        sendChord(lastSendNote[i], 127 * sustainFlag, 1); //send the appropriate midi message.
 8001954:	4a26      	ldr	r2, [pc, #152]	; (80019f0 <inputNotes+0x15c>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800195c:	4b27      	ldr	r3, [pc, #156]	; (80019fc <inputNotes+0x168>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4613      	mov	r3, r2
 8001964:	01db      	lsls	r3, r3, #7
 8001966:	1a9b      	subs	r3, r3, r2
 8001968:	2201      	movs	r2, #1
 800196a:	4619      	mov	r1, r3
 800196c:	f000 f9a2 	bl	8001cb4 <sendChord>

        if (sustainFlag != 0){
 8001970:	4b22      	ldr	r3, [pc, #136]	; (80019fc <inputNotes+0x168>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d004      	beq.n	8001982 <inputNotes+0xee>
        	osc_setNote(pressedNote);
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	4618      	mov	r0, r3
 800197c:	f000 facc 	bl	8001f18 <osc_setNote>
 8001980:	e020      	b.n	80019c4 <inputNotes+0x130>
        }else{
        	osc_setNote(0);
 8001982:	2000      	movs	r0, #0
 8001984:	f000 fac8 	bl	8001f18 <osc_setNote>
 8001988:	e01c      	b.n	80019c4 <inputNotes+0x130>
        }

    }else if(GETBUTTONSTATUS(teclas[i], buttonRise)){
 800198a:	4a14      	ldr	r2, [pc, #80]	; (80019dc <inputNotes+0x148>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	2301      	movs	r3, #1
 8001996:	4093      	lsls	r3, r2
 8001998:	461a      	mov	r2, r3
 800199a:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <inputNotes+0x16c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4013      	ands	r3, r2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00f      	beq.n	80019c4 <inputNotes+0x130>

    	if (sustainMode != 1){ // If proprietary sustain mode off...
 80019a4:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <inputNotes+0x160>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d00b      	beq.n	80019c4 <inputNotes+0x130>
			sendChord(lastSendNote[i], 0, 1); // 0 in second param means "noteOff".
 80019ac:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <inputNotes+0x15c>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b4:	2201      	movs	r2, #1
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 f97b 	bl	8001cb4 <sendChord>
			osc_setNote(0); // turn DAC off.
 80019be:	2000      	movs	r0, #0
 80019c0:	f000 faaa 	bl	8001f18 <osc_setNote>
  for (int i = 0; i <= 12; i++){
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3301      	adds	r3, #1
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b0c      	cmp	r3, #12
 80019ce:	f77f af67 	ble.w	80018a0 <inputNotes+0xc>
        }
    }

  }
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000078 	.word	0x20000078
 80019e0:	2000036c 	.word	0x2000036c
 80019e4:	200003f0 	.word	0x200003f0
 80019e8:	200002f0 	.word	0x200002f0
 80019ec:	20000374 	.word	0x20000374
 80019f0:	20000330 	.word	0x20000330
 80019f4:	20000368 	.word	0x20000368
 80019f8:	20000364 	.word	0x20000364
 80019fc:	2000006a 	.word	0x2000006a
 8001a00:	20000370 	.word	0x20000370

08001a04 <inputSaveChord>:


void inputSaveChord(void){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0

uint8_t flag = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	71fb      	strb	r3, [r7, #7]

	for (int i = 0; i <= 12; i++){
 8001a0e:	2300      	movs	r3, #0
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	e024      	b.n	8001a5e <inputSaveChord+0x5a>

//		buttonState[i + IN_DO] = HAL_GPIO_ReadPin(notePort_list[i], notePin_list[i]);

//		if(!buttonState[i + IN_DO] && lastState[i + IN_DO]){       // If we read 1, and the last time we read 0, means button was just pressed
		if (GETBUTTONSTATUS(teclas[i], buttonFall)){
 8001a14:	4a1e      	ldr	r2, [pc, #120]	; (8001a90 <inputSaveChord+0x8c>)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	4413      	add	r3, r2
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	2301      	movs	r3, #1
 8001a20:	4093      	lsls	r3, r2
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <inputSaveChord+0x90>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d014      	beq.n	8001a58 <inputSaveChord+0x54>

			//storing the selected chord:
			setChord(i);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fe22 	bl	800067c <setChord>
			footKey = NORMAL;
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <inputSaveChord+0x94>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
			screenNum = POPUP_SAVED_CHORD;
 8001a3e:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <inputSaveChord+0x98>)
 8001a40:	2208      	movs	r2, #8
 8001a42:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN; 				//return point to chordSelect().
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <inputSaveChord+0x9c>)
 8001a46:	2204      	movs	r2, #4
 8001a48:	701a      	strb	r2, [r3, #0]
			lastKey_pos = i; 					// to show in screen the foot key pressed.
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <inputSaveChord+0xa0>)
 8001a50:	701a      	strb	r2, [r3, #0]
			flag = 1;
 8001a52:	2301      	movs	r3, #1
 8001a54:	71fb      	strb	r3, [r7, #7]
			break; 								 //it must exit from function.
 8001a56:	e005      	b.n	8001a64 <inputSaveChord+0x60>
	for (int i = 0; i <= 12; i++){
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	603b      	str	r3, [r7, #0]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b0c      	cmp	r3, #12
 8001a62:	ddd7      	ble.n	8001a14 <inputSaveChord+0x10>
		} //end if getStatusButton
	} //end for

	if (!flag){
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10e      	bne.n	8001a88 <inputSaveChord+0x84>


		if (GETBUTTONSTATUS(IN_LEFT, buttonFall)){
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <inputSaveChord+0x90>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d008      	beq.n	8001a88 <inputSaveChord+0x84>
			footKey = NORMAL;
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <inputSaveChord+0x94>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
			screenNum = POPUP_CANCEL;
 8001a7c:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <inputSaveChord+0x98>)
 8001a7e:	220b      	movs	r2, #11
 8001a80:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN;
 8001a82:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <inputSaveChord+0x9c>)
 8001a84:	2204      	movs	r2, #4
 8001a86:	701a      	strb	r2, [r3, #0]
		}
	} //end if !flag

} //end inputSaveChord()
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000078 	.word	0x20000078
 8001a94:	2000036c 	.word	0x2000036c
 8001a98:	2000037d 	.word	0x2000037d
 8001a9c:	20000375 	.word	0x20000375
 8001aa0:	20000085 	.word	0x20000085
 8001aa4:	20000760 	.word	0x20000760

08001aa8 <chordSelect>:

void chordSelect(void){
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0

  uint8_t flag = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	71fb      	strb	r3, [r7, #7]

  switch (chordSelect_cursor){
 8001ab2:	4b58      	ldr	r3, [pc, #352]	; (8001c14 <chordSelect+0x16c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d03a      	beq.n	8001b30 <chordSelect+0x88>
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d302      	bcc.n	8001ac4 <chordSelect+0x1c>
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d079      	beq.n	8001bb6 <chordSelect+0x10e>
 8001ac2:	e09a      	b.n	8001bfa <chordSelect+0x152>

		case 0:

			if (GETBUTTONSTATUS(IN_DOWN, buttonFall)){
 8001ac4:	4b54      	ldr	r3, [pc, #336]	; (8001c18 <chordSelect+0x170>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d006      	beq.n	8001ade <chordSelect+0x36>
				chordSelect_cursor++;
 8001ad0:	4b50      	ldr	r3, [pc, #320]	; (8001c14 <chordSelect+0x16c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	4a4f      	ldr	r2, [pc, #316]	; (8001c14 <chordSelect+0x16c>)
 8001ad8:	6013      	str	r3, [r2, #0]
				flag = 1;
 8001ada:	2301      	movs	r3, #1
 8001adc:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_LEFT, buttonFall)){
 8001ade:	4b4e      	ldr	r3, [pc, #312]	; (8001c18 <chordSelect+0x170>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00d      	beq.n	8001b06 <chordSelect+0x5e>
				chord--;
 8001aea:	4b4c      	ldr	r3, [pc, #304]	; (8001c1c <chordSelect+0x174>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	4a4a      	ldr	r2, [pc, #296]	; (8001c1c <chordSelect+0x174>)
 8001af2:	6013      	str	r3, [r2, #0]
				if (chord < 0)
 8001af4:	4b49      	ldr	r3, [pc, #292]	; (8001c1c <chordSelect+0x174>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	da02      	bge.n	8001b02 <chordSelect+0x5a>
					chord = 7;
 8001afc:	4b47      	ldr	r3, [pc, #284]	; (8001c1c <chordSelect+0x174>)
 8001afe:	2207      	movs	r2, #7
 8001b00:	601a      	str	r2, [r3, #0]
				flag = 1;
 8001b02:	2301      	movs	r3, #1
 8001b04:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_RIGHT, buttonFall)){
 8001b06:	4b44      	ldr	r3, [pc, #272]	; (8001c18 <chordSelect+0x170>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0320 	and.w	r3, r3, #32
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d06e      	beq.n	8001bf0 <chordSelect+0x148>
				chord++;
 8001b12:	4b42      	ldr	r3, [pc, #264]	; (8001c1c <chordSelect+0x174>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3301      	adds	r3, #1
 8001b18:	4a40      	ldr	r2, [pc, #256]	; (8001c1c <chordSelect+0x174>)
 8001b1a:	6013      	str	r3, [r2, #0]
				if (chord > 7)
 8001b1c:	4b3f      	ldr	r3, [pc, #252]	; (8001c1c <chordSelect+0x174>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b07      	cmp	r3, #7
 8001b22:	dd02      	ble.n	8001b2a <chordSelect+0x82>
					chord = 0;
 8001b24:	4b3d      	ldr	r3, [pc, #244]	; (8001c1c <chordSelect+0x174>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
				flag = 1;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	71fb      	strb	r3, [r7, #7]
			}

		break;
 8001b2e:	e05f      	b.n	8001bf0 <chordSelect+0x148>
		case 1:

			if (GETBUTTONSTATUS(IN_UP, buttonFall)){
 8001b30:	4b39      	ldr	r3, [pc, #228]	; (8001c18 <chordSelect+0x170>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <chordSelect+0xa2>
				chordSelect_cursor--;
 8001b3c:	4b35      	ldr	r3, [pc, #212]	; (8001c14 <chordSelect+0x16c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	4a34      	ldr	r2, [pc, #208]	; (8001c14 <chordSelect+0x16c>)
 8001b44:	6013      	str	r3, [r2, #0]
				flag = 1;
 8001b46:	2301      	movs	r3, #1
 8001b48:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_DOWN, buttonFall)){
 8001b4a:	4b33      	ldr	r3, [pc, #204]	; (8001c18 <chordSelect+0x170>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d006      	beq.n	8001b64 <chordSelect+0xbc>
				chordSelect_cursor++;
 8001b56:	4b2f      	ldr	r3, [pc, #188]	; (8001c14 <chordSelect+0x16c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	4a2d      	ldr	r2, [pc, #180]	; (8001c14 <chordSelect+0x16c>)
 8001b5e:	6013      	str	r3, [r2, #0]
				flag = 1;
 8001b60:	2301      	movs	r3, #1
 8001b62:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_LEFT, buttonFall)){
 8001b64:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <chordSelect+0x170>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0310 	and.w	r3, r3, #16
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00d      	beq.n	8001b8c <chordSelect+0xe4>
				chordInv--;
 8001b70:	4b2b      	ldr	r3, [pc, #172]	; (8001c20 <chordSelect+0x178>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	4a2a      	ldr	r2, [pc, #168]	; (8001c20 <chordSelect+0x178>)
 8001b78:	6013      	str	r3, [r2, #0]
				if (chordInv < 0)
 8001b7a:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <chordSelect+0x178>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	da02      	bge.n	8001b88 <chordSelect+0xe0>
					chordInv = 2;
 8001b82:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <chordSelect+0x178>)
 8001b84:	2202      	movs	r2, #2
 8001b86:	601a      	str	r2, [r3, #0]
				flag = 1;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_RIGHT, buttonFall)){
 8001b8c:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <chordSelect+0x170>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0320 	and.w	r3, r3, #32
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d02d      	beq.n	8001bf4 <chordSelect+0x14c>
				chordInv++;
 8001b98:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <chordSelect+0x178>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	4a20      	ldr	r2, [pc, #128]	; (8001c20 <chordSelect+0x178>)
 8001ba0:	6013      	str	r3, [r2, #0]
				if (chordInv > 2)
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <chordSelect+0x178>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	dd02      	ble.n	8001bb0 <chordSelect+0x108>
					chordInv = 0;
 8001baa:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <chordSelect+0x178>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
				flag = 1;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	71fb      	strb	r3, [r7, #7]
			}

		break;
 8001bb4:	e01e      	b.n	8001bf4 <chordSelect+0x14c>
		case 2:

			if (GETBUTTONSTATUS(IN_UP, buttonFall)){
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <chordSelect+0x170>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <chordSelect+0x128>
				chordSelect_cursor--;
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <chordSelect+0x16c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <chordSelect+0x16c>)
 8001bca:	6013      	str	r3, [r2, #0]
				flag = 1;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_RIGHT, buttonFall)){
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <chordSelect+0x170>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0320 	and.w	r3, r3, #32
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00d      	beq.n	8001bf8 <chordSelect+0x150>
				footKey = SAVE_CHORD; //
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <chordSelect+0x17c>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
				menu = RECUEST_FOOTKEY_SCREEN;
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <chordSelect+0x180>)
 8001be4:	2207      	movs	r2, #7
 8001be6:	701a      	strb	r2, [r3, #0]
				screenNum = RECUEST_FOOTKEY_SCREEN;
 8001be8:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <chordSelect+0x184>)
 8001bea:	2207      	movs	r2, #7
 8001bec:	701a      	strb	r2, [r3, #0]
			}

		break;
 8001bee:	e003      	b.n	8001bf8 <chordSelect+0x150>
		break;
 8001bf0:	bf00      	nop
 8001bf2:	e002      	b.n	8001bfa <chordSelect+0x152>
		break;
 8001bf4:	bf00      	nop
 8001bf6:	e000      	b.n	8001bfa <chordSelect+0x152>
		break;
 8001bf8:	bf00      	nop
	} //fin switch chordSelect_cursor

  if (flag){        ///flag de impresion
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <chordSelect+0x15e>

      screenNum = CHORD_SCREEN;
 8001c00:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <chordSelect+0x184>)
 8001c02:	2204      	movs	r2, #4
 8001c04:	701a      	strb	r2, [r3, #0]
  }
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	200003ec 	.word	0x200003ec
 8001c18:	2000036c 	.word	0x2000036c
 8001c1c:	200003f4 	.word	0x200003f4
 8001c20:	200003f8 	.word	0x200003f8
 8001c24:	2000037d 	.word	0x2000037d
 8001c28:	20000085 	.word	0x20000085
 8001c2c:	20000375 	.word	0x20000375

08001c30 <tunneSelect>:


void tunneSelect(void){
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
	uint8_t flag = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	71fb      	strb	r3, [r7, #7]

	if (GETBUTTONSTATUS(IN_LEFT, buttonFall)){
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <tunneSelect+0x78>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0310 	and.w	r3, r3, #16
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00e      	beq.n	8001c64 <tunneSelect+0x34>
		firstDoTunning--;
 8001c46:	4b19      	ldr	r3, [pc, #100]	; (8001cac <tunneSelect+0x7c>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <tunneSelect+0x7c>)
 8001c50:	701a      	strb	r2, [r3, #0]
		if (firstDoTunning < MIDI_C2)
 8001c52:	4b16      	ldr	r3, [pc, #88]	; (8001cac <tunneSelect+0x7c>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b23      	cmp	r3, #35	; 0x23
 8001c58:	d802      	bhi.n	8001c60 <tunneSelect+0x30>
			firstDoTunning = MIDI_B2;
 8001c5a:	4b14      	ldr	r3, [pc, #80]	; (8001cac <tunneSelect+0x7c>)
 8001c5c:	222f      	movs	r2, #47	; 0x2f
 8001c5e:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8001c60:	2301      	movs	r3, #1
 8001c62:	71fb      	strb	r3, [r7, #7]
	}
	if (GETBUTTONSTATUS(IN_RIGHT, buttonFall)){
 8001c64:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <tunneSelect+0x78>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0320 	and.w	r3, r3, #32
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00e      	beq.n	8001c8e <tunneSelect+0x5e>
		firstDoTunning++;
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <tunneSelect+0x7c>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	3301      	adds	r3, #1
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <tunneSelect+0x7c>)
 8001c7a:	701a      	strb	r2, [r3, #0]
		if (firstDoTunning >MIDI_B2)
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <tunneSelect+0x7c>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b2f      	cmp	r3, #47	; 0x2f
 8001c82:	d902      	bls.n	8001c8a <tunneSelect+0x5a>
			firstDoTunning = MIDI_C2;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <tunneSelect+0x7c>)
 8001c86:	2224      	movs	r2, #36	; 0x24
 8001c88:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	71fb      	strb	r3, [r7, #7]
	}

	if (flag){
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <tunneSelect+0x6a>
		screenNum = TUNNE_SCREEN;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <tunneSelect+0x80>)
 8001c96:	2205      	movs	r2, #5
 8001c98:	701a      	strb	r2, [r3, #0]
	}
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	2000036c 	.word	0x2000036c
 8001cac:	200003f0 	.word	0x200003f0
 8001cb0:	20000375 	.word	0x20000375

08001cb4 <sendChord>:


void sendChord(unsigned long bnotes, int velocity, int channel){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]

  uint8_t note1;
  uint8_t note2;
  uint8_t note3;

  note1 = (bnotes & 0x7f);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cc8:	75fb      	strb	r3, [r7, #23]
  note2 = (bnotes >> 8) & 0x7f;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cd4:	75bb      	strb	r3, [r7, #22]
  note3 = (bnotes >> 16) & 0x7f;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ce0:	757b      	strb	r3, [r7, #21]

  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <sendChord+0xa8>)
 8001ce4:	2209      	movs	r2, #9
 8001ce6:	701a      	strb	r2, [r3, #0]
  midi_msg[1] = 0x90 | 1;
 8001ce8:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <sendChord+0xa8>)
 8001cea:	2291      	movs	r2, #145	; 0x91
 8001cec:	705a      	strb	r2, [r3, #1]
  midi_msg[2] = note1;
 8001cee:	4a1b      	ldr	r2, [pc, #108]	; (8001d5c <sendChord+0xa8>)
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
 8001cf2:	7093      	strb	r3, [r2, #2]
  midi_msg[3] = velocity;
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <sendChord+0xa8>)
 8001cfa:	70da      	strb	r2, [r3, #3]
  MIDI_SendBuffer(midi_msg, 4);
 8001cfc:	2104      	movs	r1, #4
 8001cfe:	4817      	ldr	r0, [pc, #92]	; (8001d5c <sendChord+0xa8>)
 8001d00:	f00a f96c 	bl	800bfdc <MIDI_SendBuffer>

  if (note2 && note3){
 8001d04:	7dbb      	ldrb	r3, [r7, #22]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d024      	beq.n	8001d54 <sendChord+0xa0>
 8001d0a:	7d7b      	ldrb	r3, [r7, #21]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d021      	beq.n	8001d54 <sendChord+0xa0>

	  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <sendChord+0xa8>)
 8001d12:	2209      	movs	r2, #9
 8001d14:	701a      	strb	r2, [r3, #0]
	  midi_msg[1] = 0x90 | 1;
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <sendChord+0xa8>)
 8001d18:	2291      	movs	r2, #145	; 0x91
 8001d1a:	705a      	strb	r2, [r3, #1]
	  midi_msg[2] = note2;
 8001d1c:	4a0f      	ldr	r2, [pc, #60]	; (8001d5c <sendChord+0xa8>)
 8001d1e:	7dbb      	ldrb	r3, [r7, #22]
 8001d20:	7093      	strb	r3, [r2, #2]
	  midi_msg[3] = velocity;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <sendChord+0xa8>)
 8001d28:	70da      	strb	r2, [r3, #3]
	  MIDI_SendBuffer(midi_msg, 4);
 8001d2a:	2104      	movs	r1, #4
 8001d2c:	480b      	ldr	r0, [pc, #44]	; (8001d5c <sendChord+0xa8>)
 8001d2e:	f00a f955 	bl	800bfdc <MIDI_SendBuffer>

	  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <sendChord+0xa8>)
 8001d34:	2209      	movs	r2, #9
 8001d36:	701a      	strb	r2, [r3, #0]
	  midi_msg[1] = 0x90 | 1;
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <sendChord+0xa8>)
 8001d3a:	2291      	movs	r2, #145	; 0x91
 8001d3c:	705a      	strb	r2, [r3, #1]
	  midi_msg[2] = note3;
 8001d3e:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <sendChord+0xa8>)
 8001d40:	7d7b      	ldrb	r3, [r7, #21]
 8001d42:	7093      	strb	r3, [r2, #2]
	  midi_msg[3] = velocity;
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <sendChord+0xa8>)
 8001d4a:	70da      	strb	r2, [r3, #3]
	  MIDI_SendBuffer(midi_msg, 4);
 8001d4c:	2104      	movs	r1, #4
 8001d4e:	4803      	ldr	r0, [pc, #12]	; (8001d5c <sendChord+0xa8>)
 8001d50:	f00a f944 	bl	800bfdc <MIDI_SendBuffer>
  }
}
 8001d54:	bf00      	nop
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000764 	.word	0x20000764

08001d60 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){ // dac
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d103      	bne.n	8001d7a <HAL_TIM_PeriodElapsedCallback+0x1a>
		flag_dac = 1;
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	701a      	strb	r2, [r3, #0]
	}else if (htim->Instance == TIM2){ //tick
		flag_tick = 1;
	}

}
 8001d78:	e007      	b.n	8001d8a <HAL_TIM_PeriodElapsedCallback+0x2a>
	}else if (htim->Instance == TIM2){ //tick
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d82:	d102      	bne.n	8001d8a <HAL_TIM_PeriodElapsedCallback+0x2a>
		flag_tick = 1;
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40000400 	.word	0x40000400
 8001d9c:	2000037f 	.word	0x2000037f
 8001da0:	2000037e 	.word	0x2000037e

08001da4 <HAL_I2C_MasterTxCpltCallback>:


void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	_lcd_ISR();
 8001dac:	f7ff fa26 	bl	80011fc <_lcd_ISR>
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <osc_dac_init>:
uint8_t ratio_sen = 100;
uint8_t ratio_cuad = 100;
uint8_t ratio_ramp = 100;


void osc_dac_init(DAC_HandleTypeDef *p_hdac, uint32_t ch){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
	handler_dac = p_hdac;
 8001dd2:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <osc_dac_init+0x30>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6013      	str	r3, [r2, #0]
	dac_ch = ch;
 8001dd8:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <osc_dac_init+0x34>)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6013      	str	r3, [r2, #0]

	HAL_DAC_Start(handler_dac, dac_ch);
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <osc_dac_init+0x30>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <osc_dac_init+0x34>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4619      	mov	r1, r3
 8001de8:	4610      	mov	r0, r2
 8001dea:	f001 f84c 	bl	8002e86 <HAL_DAC_Start>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2000076c 	.word	0x2000076c
 8001dfc:	20000768 	.word	0x20000768

08001e00 <osc_dac_update>:

//must be handled with a 44100 Hz timer.
void osc_dac_update(void){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0

	if (nota_activa!=-1){
 8001e04:	4b37      	ldr	r3, [pc, #220]	; (8001ee4 <osc_dac_update+0xe4>)
 8001e06:	f993 3000 	ldrsb.w	r3, [r3]
 8001e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e0e:	d057      	beq.n	8001ec0 <osc_dac_update+0xc0>
		phase+= nota_incrFase[nota_activa];
 8001e10:	4b34      	ldr	r3, [pc, #208]	; (8001ee4 <osc_dac_update+0xe4>)
 8001e12:	f993 3000 	ldrsb.w	r3, [r3]
 8001e16:	461a      	mov	r2, r3
 8001e18:	4b33      	ldr	r3, [pc, #204]	; (8001ee8 <osc_dac_update+0xe8>)
 8001e1a:	5c9b      	ldrb	r3, [r3, r2]
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	4b33      	ldr	r3, [pc, #204]	; (8001eec <osc_dac_update+0xec>)
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	4413      	add	r3, r2
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	4b31      	ldr	r3, [pc, #196]	; (8001eec <osc_dac_update+0xec>)
 8001e28:	801a      	strh	r2, [r3, #0]
		if (phase>OSC_LAST) phase -= OSC_LAST;
 8001e2a:	4b30      	ldr	r3, [pc, #192]	; (8001eec <osc_dac_update+0xec>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	f244 520a 	movw	r2, #17674	; 0x450a
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d907      	bls.n	8001e46 <osc_dac_update+0x46>
 8001e36:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <osc_dac_update+0xec>)
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	f5a3 438a 	sub.w	r3, r3, #17664	; 0x4500
 8001e3e:	3b0a      	subs	r3, #10
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <osc_dac_update+0xec>)
 8001e44:	801a      	strh	r2, [r3, #0]
		dac_out = ratio_sen/100*tabla_seno[phase] + ratio_cuad/100*tabla_cuadrada[phase] + ratio_ramp/100*tabla_sierra[phase];
 8001e46:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <osc_dac_update+0xf0>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	4a2a      	ldr	r2, [pc, #168]	; (8001ef4 <osc_dac_update+0xf4>)
 8001e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e50:	095b      	lsrs	r3, r3, #5
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	4b25      	ldr	r3, [pc, #148]	; (8001eec <osc_dac_update+0xec>)
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <osc_dac_update+0xf8>)
 8001e5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	fb12 f303 	smulbb	r3, r2, r3
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	4b24      	ldr	r3, [pc, #144]	; (8001efc <osc_dac_update+0xfc>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	4921      	ldr	r1, [pc, #132]	; (8001ef4 <osc_dac_update+0xf4>)
 8001e70:	fba1 1303 	umull	r1, r3, r1, r3
 8001e74:	095b      	lsrs	r3, r3, #5
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	b299      	uxth	r1, r3
 8001e7a:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <osc_dac_update+0xec>)
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <osc_dac_update+0x100>)
 8001e82:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	fb11 f303 	smulbb	r3, r1, r3
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <osc_dac_update+0x104>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	4917      	ldr	r1, [pc, #92]	; (8001ef4 <osc_dac_update+0xf4>)
 8001e98:	fba1 1303 	umull	r1, r3, r1, r3
 8001e9c:	095b      	lsrs	r3, r3, #5
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	b299      	uxth	r1, r3
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <osc_dac_update+0xec>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <osc_dac_update+0x108>)
 8001eaa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	fb11 f303 	smulbb	r3, r1, r3
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <osc_dac_update+0x10c>)
 8001ebc:	801a      	strh	r2, [r3, #0]
 8001ebe:	e005      	b.n	8001ecc <osc_dac_update+0xcc>
		//HAL_DAC_SetValue(handler_dac, dac_ch, DAC_ALIGN_12B_R, dac_out);
	}else{
		phase = 0;
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <osc_dac_update+0xec>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	801a      	strh	r2, [r3, #0]
		dac_out = 0;
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <osc_dac_update+0x10c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	801a      	strh	r2, [r3, #0]
	}

	HAL_DAC_SetValue(handler_dac, dac_ch, DAC_ALIGN_12B_R, dac_out);
 8001ecc:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <osc_dac_update+0x110>)
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <osc_dac_update+0x114>)
 8001ed2:	6819      	ldr	r1, [r3, #0]
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <osc_dac_update+0x10c>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f001 f887 	bl	8002fec <HAL_DAC_SetValue>

//	flag_dac = 0;
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000088 	.word	0x20000088
 8001ee8:	08040dd8 	.word	0x08040dd8
 8001eec:	20000380 	.word	0x20000380
 8001ef0:	20000089 	.word	0x20000089
 8001ef4:	51eb851f 	.word	0x51eb851f
 8001ef8:	0800d154 	.word	0x0800d154
 8001efc:	2000008a 	.word	0x2000008a
 8001f00:	0801e580 	.word	0x0801e580
 8001f04:	2000008b 	.word	0x2000008b
 8001f08:	0802f9ac 	.word	0x0802f9ac
 8001f0c:	20000382 	.word	0x20000382
 8001f10:	2000076c 	.word	0x2000076c
 8001f14:	20000768 	.word	0x20000768

08001f18 <osc_setNote>:


int8_t osc_setNote (uint8_t nn){
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]

	if (!nn){
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d104      	bne.n	8001f32 <osc_setNote+0x1a>
		nota_activa = -1;
 8001f28:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <osc_setNote+0x48>)
 8001f2a:	22ff      	movs	r2, #255	; 0xff
 8001f2c:	701a      	strb	r2, [r3, #0]
		return 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e00f      	b.n	8001f52 <osc_setNote+0x3a>
	}

	if(nn<24 || nn>60){
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	2b17      	cmp	r3, #23
 8001f36:	d902      	bls.n	8001f3e <osc_setNote+0x26>
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	2b3c      	cmp	r3, #60	; 0x3c
 8001f3c:	d902      	bls.n	8001f44 <osc_setNote+0x2c>
		return -1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f42:	e006      	b.n	8001f52 <osc_setNote+0x3a>
	}

	nota_activa = nn - NOTA_C1;
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	3b18      	subs	r3, #24
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	b25a      	sxtb	r2, r3
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <osc_setNote+0x48>)
 8001f4e:	701a      	strb	r2, [r3, #0]
	return 0;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000088 	.word	0x20000088

08001f64 <osc_setRatios>:

int8_t osc_setRatios(uint8_t rsen, uint8_t rcuad, uint8_t rsier){
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	71bb      	strb	r3, [r7, #6]
 8001f72:	4613      	mov	r3, r2
 8001f74:	717b      	strb	r3, [r7, #5]

	if (rsen > 100 || rcuad > 100 || rsier > 100){
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	2b64      	cmp	r3, #100	; 0x64
 8001f7a:	d805      	bhi.n	8001f88 <osc_setRatios+0x24>
 8001f7c:	79bb      	ldrb	r3, [r7, #6]
 8001f7e:	2b64      	cmp	r3, #100	; 0x64
 8001f80:	d802      	bhi.n	8001f88 <osc_setRatios+0x24>
 8001f82:	797b      	ldrb	r3, [r7, #5]
 8001f84:	2b64      	cmp	r3, #100	; 0x64
 8001f86:	d902      	bls.n	8001f8e <osc_setRatios+0x2a>
		return -1;
 8001f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f8c:	e009      	b.n	8001fa2 <osc_setRatios+0x3e>
	}

	ratio_sen = rsen; ratio_cuad = rcuad; ratio_ramp = rsier;
 8001f8e:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <osc_setRatios+0x4c>)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	7013      	strb	r3, [r2, #0]
 8001f94:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <osc_setRatios+0x50>)
 8001f96:	79bb      	ldrb	r3, [r7, #6]
 8001f98:	7013      	strb	r3, [r2, #0]
 8001f9a:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <osc_setRatios+0x54>)
 8001f9c:	797b      	ldrb	r3, [r7, #5]
 8001f9e:	7013      	strb	r3, [r2, #0]
	return 0;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000089 	.word	0x20000089
 8001fb4:	2000008a 	.word	0x2000008a
 8001fb8:	2000008b 	.word	0x2000008b

08001fbc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001fc0:	4b17      	ldr	r3, [pc, #92]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fc2:	4a18      	ldr	r2, [pc, #96]	; (8002024 <MX_SPI1_Init+0x68>)
 8001fc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fc6:	4b16      	ldr	r3, [pc, #88]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fce:	4b14      	ldr	r3, [pc, #80]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <MX_SPI1_Init+0x64>)
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ff4:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <MX_SPI1_Init+0x64>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <MX_SPI1_Init+0x64>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <MX_SPI1_Init+0x64>)
 8002002:	2200      	movs	r2, #0
 8002004:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <MX_SPI1_Init+0x64>)
 8002008:	220a      	movs	r2, #10
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800200c:	4804      	ldr	r0, [pc, #16]	; (8002020 <MX_SPI1_Init+0x64>)
 800200e:	f005 f8c7 	bl	80071a0 <HAL_SPI_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002018:	f7ff fece 	bl	8001db8 <Error_Handler>
  }

}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000770 	.word	0x20000770
 8002024:	40013000 	.word	0x40013000

08002028 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a1d      	ldr	r2, [pc, #116]	; (80020bc <HAL_SPI_MspInit+0x94>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d133      	bne.n	80020b2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <HAL_SPI_MspInit+0x98>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	4a1b      	ldr	r2, [pc, #108]	; (80020c0 <HAL_SPI_MspInit+0x98>)
 8002054:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002058:	6453      	str	r3, [r2, #68]	; 0x44
 800205a:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_SPI_MspInit+0x98>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <HAL_SPI_MspInit+0x98>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <HAL_SPI_MspInit+0x98>)
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_SPI_MspInit+0x98>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002082:	2338      	movs	r3, #56	; 0x38
 8002084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208e:	2303      	movs	r3, #3
 8002090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002092:	2305      	movs	r3, #5
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	4809      	ldr	r0, [pc, #36]	; (80020c4 <HAL_SPI_MspInit+0x9c>)
 800209e:	f000 fffb 	bl	8003098 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	2023      	movs	r0, #35	; 0x23
 80020a8:	f000 fe95 	bl	8002dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80020ac:	2023      	movs	r0, #35	; 0x23
 80020ae:	f000 feae 	bl	8002e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80020b2:	bf00      	nop
 80020b4:	3728      	adds	r7, #40	; 0x28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40013000 	.word	0x40013000
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40020400 	.word	0x40020400

080020c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	4b10      	ldr	r3, [pc, #64]	; (8002114 <HAL_MspInit+0x4c>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	4a0f      	ldr	r2, [pc, #60]	; (8002114 <HAL_MspInit+0x4c>)
 80020d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020dc:	6453      	str	r3, [r2, #68]	; 0x44
 80020de:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <HAL_MspInit+0x4c>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_MspInit+0x4c>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	4a08      	ldr	r2, [pc, #32]	; (8002114 <HAL_MspInit+0x4c>)
 80020f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_MspInit+0x4c>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002106:	2007      	movs	r0, #7
 8002108:	f000 fe5a 	bl	8002dc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40023800 	.word	0x40023800

08002118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212a:	e7fe      	b.n	800212a <HardFault_Handler+0x4>

0800212c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002130:	e7fe      	b.n	8002130 <MemManage_Handler+0x4>

08002132 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002136:	e7fe      	b.n	8002136 <BusFault_Handler+0x4>

08002138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800213c:	e7fe      	b.n	800213c <UsageFault_Handler+0x4>

0800213e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800216c:	f000 fab4 	bl	80026d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}

08002174 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002178:	4802      	ldr	r0, [pc, #8]	; (8002184 <TIM2_IRQHandler+0x10>)
 800217a:	f005 fda0 	bl	8007cbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000808 	.word	0x20000808

08002188 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <TIM3_IRQHandler+0x10>)
 800218e:	f005 fd96 	bl	8007cbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200007c8 	.word	0x200007c8

0800219c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80021a0:	4802      	ldr	r0, [pc, #8]	; (80021ac <I2C1_EV_IRQHandler+0x10>)
 80021a2:	f001 fc09 	bl	80039b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	2000045c 	.word	0x2000045c

080021b0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80021b4:	4802      	ldr	r0, [pc, #8]	; (80021c0 <I2C1_ER_IRQHandler+0x10>)
 80021b6:	f001 fd65 	bl	8003c84 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	2000045c 	.word	0x2000045c

080021c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <SPI1_IRQHandler+0x10>)
 80021ca:	f005 faf9 	bl	80077c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000770 	.word	0x20000770

080021d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <OTG_FS_IRQHandler+0x10>)
 80021de:	f003 fb4a 	bl	8005876 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000edc 	.word	0x20000edc

080021ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f4:	4a14      	ldr	r2, [pc, #80]	; (8002248 <_sbrk+0x5c>)
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <_sbrk+0x60>)
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <_sbrk+0x64>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <_sbrk+0x64>)
 800220a:	4a12      	ldr	r2, [pc, #72]	; (8002254 <_sbrk+0x68>)
 800220c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <_sbrk+0x64>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	429a      	cmp	r2, r3
 800221a:	d207      	bcs.n	800222c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800221c:	f00a fa26 	bl	800c66c <__errno>
 8002220:	4602      	mov	r2, r0
 8002222:	230c      	movs	r3, #12
 8002224:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800222a:	e009      	b.n	8002240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002232:	4b07      	ldr	r3, [pc, #28]	; (8002250 <_sbrk+0x64>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	4a05      	ldr	r2, [pc, #20]	; (8002250 <_sbrk+0x64>)
 800223c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223e:	68fb      	ldr	r3, [r7, #12]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20020000 	.word	0x20020000
 800224c:	00000400 	.word	0x00000400
 8002250:	20000384 	.word	0x20000384
 8002254:	200012e8 	.word	0x200012e8

08002258 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <SystemInit+0x28>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	4a07      	ldr	r2, [pc, #28]	; (8002280 <SystemInit+0x28>)
 8002264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <SystemInit+0x28>)
 800226e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002272:	609a      	str	r2, [r3, #8]
#endif
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800228a:	f107 0308 	add.w	r3, r7, #8
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002298:	463b      	mov	r3, r7
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80022a0:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <MX_TIM2_Init+0x94>)
 80022a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <MX_TIM2_Init+0x94>)
 80022aa:	2263      	movs	r2, #99	; 0x63
 80022ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <MX_TIM2_Init+0x94>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 840-1;
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <MX_TIM2_Init+0x94>)
 80022b6:	f240 3247 	movw	r2, #839	; 0x347
 80022ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022bc:	4b16      	ldr	r3, [pc, #88]	; (8002318 <MX_TIM2_Init+0x94>)
 80022be:	2200      	movs	r2, #0
 80022c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <MX_TIM2_Init+0x94>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022c8:	4813      	ldr	r0, [pc, #76]	; (8002318 <MX_TIM2_Init+0x94>)
 80022ca:	f005 fca9 	bl	8007c20 <HAL_TIM_Base_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80022d4:	f7ff fd70 	bl	8001db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022de:	f107 0308 	add.w	r3, r7, #8
 80022e2:	4619      	mov	r1, r3
 80022e4:	480c      	ldr	r0, [pc, #48]	; (8002318 <MX_TIM2_Init+0x94>)
 80022e6:	f005 fdf2 	bl	8007ece <HAL_TIM_ConfigClockSource>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80022f0:	f7ff fd62 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f4:	2300      	movs	r3, #0
 80022f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022fc:	463b      	mov	r3, r7
 80022fe:	4619      	mov	r1, r3
 8002300:	4805      	ldr	r0, [pc, #20]	; (8002318 <MX_TIM2_Init+0x94>)
 8002302:	f005 fffd 	bl	8008300 <HAL_TIMEx_MasterConfigSynchronization>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800230c:	f7ff fd54 	bl	8001db8 <Error_Handler>
  }

}
 8002310:	bf00      	nop
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000808 	.word	0x20000808

0800231c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002322:	f107 0308 	add.w	r3, r7, #8
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002330:	463b      	mov	r3, r7
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002338:	4b1c      	ldr	r3, [pc, #112]	; (80023ac <MX_TIM3_Init+0x90>)
 800233a:	4a1d      	ldr	r2, [pc, #116]	; (80023b0 <MX_TIM3_Init+0x94>)
 800233c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 119-1;
 800233e:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <MX_TIM3_Init+0x90>)
 8002340:	2276      	movs	r2, #118	; 0x76
 8002342:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <MX_TIM3_Init+0x90>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16-1;
 800234a:	4b18      	ldr	r3, [pc, #96]	; (80023ac <MX_TIM3_Init+0x90>)
 800234c:	220f      	movs	r2, #15
 800234e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002350:	4b16      	ldr	r3, [pc, #88]	; (80023ac <MX_TIM3_Init+0x90>)
 8002352:	2200      	movs	r2, #0
 8002354:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002356:	4b15      	ldr	r3, [pc, #84]	; (80023ac <MX_TIM3_Init+0x90>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800235c:	4813      	ldr	r0, [pc, #76]	; (80023ac <MX_TIM3_Init+0x90>)
 800235e:	f005 fc5f 	bl	8007c20 <HAL_TIM_Base_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002368:	f7ff fd26 	bl	8001db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800236c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002370:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002372:	f107 0308 	add.w	r3, r7, #8
 8002376:	4619      	mov	r1, r3
 8002378:	480c      	ldr	r0, [pc, #48]	; (80023ac <MX_TIM3_Init+0x90>)
 800237a:	f005 fda8 	bl	8007ece <HAL_TIM_ConfigClockSource>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002384:	f7ff fd18 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002388:	2300      	movs	r3, #0
 800238a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800238c:	2300      	movs	r3, #0
 800238e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002390:	463b      	mov	r3, r7
 8002392:	4619      	mov	r1, r3
 8002394:	4805      	ldr	r0, [pc, #20]	; (80023ac <MX_TIM3_Init+0x90>)
 8002396:	f005 ffb3 	bl	8008300 <HAL_TIMEx_MasterConfigSynchronization>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80023a0:	f7ff fd0a 	bl	8001db8 <Error_Handler>
  }

}
 80023a4:	bf00      	nop
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	200007c8 	.word	0x200007c8
 80023b0:	40000400 	.word	0x40000400

080023b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c4:	d116      	bne.n	80023f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <HAL_TIM_Base_MspInit+0x80>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	4a19      	ldr	r2, [pc, #100]	; (8002434 <HAL_TIM_Base_MspInit+0x80>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6413      	str	r3, [r2, #64]	; 0x40
 80023d6:	4b17      	ldr	r3, [pc, #92]	; (8002434 <HAL_TIM_Base_MspInit+0x80>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	201c      	movs	r0, #28
 80023e8:	f000 fcf5 	bl	8002dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023ec:	201c      	movs	r0, #28
 80023ee:	f000 fd0e 	bl	8002e0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80023f2:	e01a      	b.n	800242a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM3)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a0f      	ldr	r2, [pc, #60]	; (8002438 <HAL_TIM_Base_MspInit+0x84>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d115      	bne.n	800242a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <HAL_TIM_Base_MspInit+0x80>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <HAL_TIM_Base_MspInit+0x80>)
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	6413      	str	r3, [r2, #64]	; 0x40
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <HAL_TIM_Base_MspInit+0x80>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800241a:	2200      	movs	r2, #0
 800241c:	2100      	movs	r1, #0
 800241e:	201d      	movs	r0, #29
 8002420:	f000 fcd9 	bl	8002dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002424:	201d      	movs	r0, #29
 8002426:	f000 fcf2 	bl	8002e0e <HAL_NVIC_EnableIRQ>
}
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800
 8002438:	40000400 	.word	0x40000400

0800243c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002440:	4b11      	ldr	r3, [pc, #68]	; (8002488 <MX_USART3_UART_Init+0x4c>)
 8002442:	4a12      	ldr	r2, [pc, #72]	; (800248c <MX_USART3_UART_Init+0x50>)
 8002444:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <MX_USART3_UART_Init+0x4c>)
 8002448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800244c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <MX_USART3_UART_Init+0x4c>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002454:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <MX_USART3_UART_Init+0x4c>)
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <MX_USART3_UART_Init+0x4c>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002460:	4b09      	ldr	r3, [pc, #36]	; (8002488 <MX_USART3_UART_Init+0x4c>)
 8002462:	220c      	movs	r2, #12
 8002464:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <MX_USART3_UART_Init+0x4c>)
 8002468:	2200      	movs	r2, #0
 800246a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <MX_USART3_UART_Init+0x4c>)
 800246e:	2200      	movs	r2, #0
 8002470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002472:	4805      	ldr	r0, [pc, #20]	; (8002488 <MX_USART3_UART_Init+0x4c>)
 8002474:	f005 ffd4 	bl	8008420 <HAL_UART_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800247e:	f7ff fc9b 	bl	8001db8 <Error_Handler>
  }

}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000848 	.word	0x20000848
 800248c:	40004800 	.word	0x40004800

08002490 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <MX_USART6_UART_Init+0x4c>)
 8002496:	4a12      	ldr	r2, [pc, #72]	; (80024e0 <MX_USART6_UART_Init+0x50>)
 8002498:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <MX_USART6_UART_Init+0x4c>)
 800249c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <MX_USART6_UART_Init+0x4c>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <MX_USART6_UART_Init+0x4c>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <MX_USART6_UART_Init+0x4c>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <MX_USART6_UART_Init+0x4c>)
 80024b6:	220c      	movs	r2, #12
 80024b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <MX_USART6_UART_Init+0x4c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <MX_USART6_UART_Init+0x4c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024c6:	4805      	ldr	r0, [pc, #20]	; (80024dc <MX_USART6_UART_Init+0x4c>)
 80024c8:	f005 ffaa 	bl	8008420 <HAL_UART_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80024d2:	f7ff fc71 	bl	8001db8 <Error_Handler>
  }

}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000888 	.word	0x20000888
 80024e0:	40011400 	.word	0x40011400

080024e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08c      	sub	sp, #48	; 0x30
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 031c 	add.w	r3, r7, #28
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a32      	ldr	r2, [pc, #200]	; (80025cc <HAL_UART_MspInit+0xe8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d12d      	bne.n	8002562 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	61bb      	str	r3, [r7, #24]
 800250a:	4b31      	ldr	r3, [pc, #196]	; (80025d0 <HAL_UART_MspInit+0xec>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a30      	ldr	r2, [pc, #192]	; (80025d0 <HAL_UART_MspInit+0xec>)
 8002510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
 8002516:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <HAL_UART_MspInit+0xec>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800251e:	61bb      	str	r3, [r7, #24]
 8002520:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <HAL_UART_MspInit+0xec>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4a29      	ldr	r2, [pc, #164]	; (80025d0 <HAL_UART_MspInit+0xec>)
 800252c:	f043 0302 	orr.w	r3, r3, #2
 8002530:	6313      	str	r3, [r2, #48]	; 0x30
 8002532:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <HAL_UART_MspInit+0xec>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800253e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002544:	2302      	movs	r3, #2
 8002546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002550:	2307      	movs	r3, #7
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002554:	f107 031c 	add.w	r3, r7, #28
 8002558:	4619      	mov	r1, r3
 800255a:	481e      	ldr	r0, [pc, #120]	; (80025d4 <HAL_UART_MspInit+0xf0>)
 800255c:	f000 fd9c 	bl	8003098 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002560:	e030      	b.n	80025c4 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a1c      	ldr	r2, [pc, #112]	; (80025d8 <HAL_UART_MspInit+0xf4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d12b      	bne.n	80025c4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 800256c:	2300      	movs	r3, #0
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <HAL_UART_MspInit+0xec>)
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	4a16      	ldr	r2, [pc, #88]	; (80025d0 <HAL_UART_MspInit+0xec>)
 8002576:	f043 0320 	orr.w	r3, r3, #32
 800257a:	6453      	str	r3, [r2, #68]	; 0x44
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_UART_MspInit+0xec>)
 800257e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002580:	f003 0320 	and.w	r3, r3, #32
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_UART_MspInit+0xec>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	4a0f      	ldr	r2, [pc, #60]	; (80025d0 <HAL_UART_MspInit+0xec>)
 8002592:	f043 0304 	orr.w	r3, r3, #4
 8002596:	6313      	str	r3, [r2, #48]	; 0x30
 8002598:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <HAL_UART_MspInit+0xec>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MIDI_TX_Pin|MIDI_RX_Pin;
 80025a4:	23c0      	movs	r3, #192	; 0xc0
 80025a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a8:	2302      	movs	r3, #2
 80025aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b0:	2303      	movs	r3, #3
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80025b4:	2308      	movs	r3, #8
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b8:	f107 031c 	add.w	r3, r7, #28
 80025bc:	4619      	mov	r1, r3
 80025be:	4807      	ldr	r0, [pc, #28]	; (80025dc <HAL_UART_MspInit+0xf8>)
 80025c0:	f000 fd6a 	bl	8003098 <HAL_GPIO_Init>
}
 80025c4:	bf00      	nop
 80025c6:	3730      	adds	r7, #48	; 0x30
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40004800 	.word	0x40004800
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40020400 	.word	0x40020400
 80025d8:	40011400 	.word	0x40011400
 80025dc:	40020800 	.word	0x40020800

080025e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80025e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002618 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025e6:	e003      	b.n	80025f0 <LoopCopyDataInit>

080025e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025ee:	3104      	adds	r1, #4

080025f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025f0:	480b      	ldr	r0, [pc, #44]	; (8002620 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025f2:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025f8:	d3f6      	bcc.n	80025e8 <CopyDataInit>
  ldr  r2, =_sbss
 80025fa:	4a0b      	ldr	r2, [pc, #44]	; (8002628 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025fc:	e002      	b.n	8002604 <LoopFillZerobss>

080025fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002600:	f842 3b04 	str.w	r3, [r2], #4

08002604 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002606:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002608:	d3f9      	bcc.n	80025fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800260a:	f7ff fe25 	bl	8002258 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800260e:	f00a f833 	bl	800c678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002612:	f7fe fdff 	bl	8001214 <main>
  bx  lr    
 8002616:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002618:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800261c:	08040e64 	.word	0x08040e64
  ldr  r0, =_sdata
 8002620:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002624:	200002d4 	.word	0x200002d4
  ldr  r2, =_sbss
 8002628:	200002d4 	.word	0x200002d4
  ldr  r3, = _ebss
 800262c:	200012e8 	.word	0x200012e8

08002630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002630:	e7fe      	b.n	8002630 <ADC_IRQHandler>
	...

08002634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002638:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <HAL_Init+0x40>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0d      	ldr	r2, [pc, #52]	; (8002674 <HAL_Init+0x40>)
 800263e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002642:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_Init+0x40>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <HAL_Init+0x40>)
 800264a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800264e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <HAL_Init+0x40>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a07      	ldr	r2, [pc, #28]	; (8002674 <HAL_Init+0x40>)
 8002656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800265c:	2003      	movs	r0, #3
 800265e:	f000 fbaf 	bl	8002dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002662:	2000      	movs	r0, #0
 8002664:	f000 f808 	bl	8002678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002668:	f7ff fd2e 	bl	80020c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023c00 	.word	0x40023c00

08002678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_InitTick+0x54>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_InitTick+0x58>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	4619      	mov	r1, r3
 800268a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800268e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002692:	fbb2 f3f3 	udiv	r3, r2, r3
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fbc7 	bl	8002e2a <HAL_SYSTICK_Config>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00e      	b.n	80026c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b0f      	cmp	r3, #15
 80026aa:	d80a      	bhi.n	80026c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026ac:	2200      	movs	r2, #0
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026b4:	f000 fb8f 	bl	8002dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026b8:	4a06      	ldr	r2, [pc, #24]	; (80026d4 <HAL_InitTick+0x5c>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	e000      	b.n	80026c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	2000008c 	.word	0x2000008c
 80026d0:	20000094 	.word	0x20000094
 80026d4:	20000090 	.word	0x20000090

080026d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_IncTick+0x20>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_IncTick+0x24>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4413      	add	r3, r2
 80026e8:	4a04      	ldr	r2, [pc, #16]	; (80026fc <HAL_IncTick+0x24>)
 80026ea:	6013      	str	r3, [r2, #0]
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000094 	.word	0x20000094
 80026fc:	200008c8 	.word	0x200008c8

08002700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return uwTick;
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <HAL_GetTick+0x14>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	200008c8 	.word	0x200008c8

08002718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002720:	f7ff ffee 	bl	8002700 <HAL_GetTick>
 8002724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002730:	d005      	beq.n	800273e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_Delay+0x40>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4413      	add	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800273e:	bf00      	nop
 8002740:	f7ff ffde 	bl	8002700 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	429a      	cmp	r2, r3
 800274e:	d8f7      	bhi.n	8002740 <HAL_Delay+0x28>
  {
  }
}
 8002750:	bf00      	nop
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000094 	.word	0x20000094

0800275c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e033      	b.n	80027da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d109      	bne.n	800278e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fe f98a 	bl	8000a94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b00      	cmp	r3, #0
 8002798:	d118      	bne.n	80027cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027a2:	f023 0302 	bic.w	r3, r3, #2
 80027a6:	f043 0202 	orr.w	r2, r3, #2
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f93a 	bl	8002a28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f023 0303 	bic.w	r3, r3, #3
 80027c2:	f043 0201 	orr.w	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40
 80027ca:	e001      	b.n	80027d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x1c>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e105      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x228>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b09      	cmp	r3, #9
 800280e:	d925      	bls.n	800285c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68d9      	ldr	r1, [r3, #12]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	b29b      	uxth	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	4613      	mov	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4413      	add	r3, r2
 8002824:	3b1e      	subs	r3, #30
 8002826:	2207      	movs	r2, #7
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43da      	mvns	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	400a      	ands	r2, r1
 8002834:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68d9      	ldr	r1, [r3, #12]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	b29b      	uxth	r3, r3
 8002846:	4618      	mov	r0, r3
 8002848:	4603      	mov	r3, r0
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4403      	add	r3, r0
 800284e:	3b1e      	subs	r3, #30
 8002850:	409a      	lsls	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	e022      	b.n	80028a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6919      	ldr	r1, [r3, #16]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	b29b      	uxth	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	4613      	mov	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4413      	add	r3, r2
 8002870:	2207      	movs	r2, #7
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	400a      	ands	r2, r1
 800287e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6919      	ldr	r1, [r3, #16]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	b29b      	uxth	r3, r3
 8002890:	4618      	mov	r0, r3
 8002892:	4603      	mov	r3, r0
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4403      	add	r3, r0
 8002898:	409a      	lsls	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d824      	bhi.n	80028f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	3b05      	subs	r3, #5
 80028bc:	221f      	movs	r2, #31
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43da      	mvns	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	400a      	ands	r2, r1
 80028ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	4618      	mov	r0, r3
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	3b05      	subs	r3, #5
 80028e6:	fa00 f203 	lsl.w	r2, r0, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	635a      	str	r2, [r3, #52]	; 0x34
 80028f2:	e04c      	b.n	800298e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b0c      	cmp	r3, #12
 80028fa:	d824      	bhi.n	8002946 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	3b23      	subs	r3, #35	; 0x23
 800290e:	221f      	movs	r2, #31
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43da      	mvns	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	400a      	ands	r2, r1
 800291c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	4618      	mov	r0, r3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	3b23      	subs	r3, #35	; 0x23
 8002938:	fa00 f203 	lsl.w	r2, r0, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	631a      	str	r2, [r3, #48]	; 0x30
 8002944:	e023      	b.n	800298e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	3b41      	subs	r3, #65	; 0x41
 8002958:	221f      	movs	r2, #31
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43da      	mvns	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	400a      	ands	r2, r1
 8002966:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	b29b      	uxth	r3, r3
 8002974:	4618      	mov	r0, r3
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	3b41      	subs	r3, #65	; 0x41
 8002982:	fa00 f203 	lsl.w	r2, r0, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800298e:	4b22      	ldr	r3, [pc, #136]	; (8002a18 <HAL_ADC_ConfigChannel+0x234>)
 8002990:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a21      	ldr	r2, [pc, #132]	; (8002a1c <HAL_ADC_ConfigChannel+0x238>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d109      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x1cc>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b12      	cmp	r3, #18
 80029a2:	d105      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a19      	ldr	r2, [pc, #100]	; (8002a1c <HAL_ADC_ConfigChannel+0x238>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d123      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x21e>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b10      	cmp	r3, #16
 80029c0:	d003      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x1e6>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b11      	cmp	r3, #17
 80029c8:	d11b      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b10      	cmp	r3, #16
 80029dc:	d111      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029de:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <HAL_ADC_ConfigChannel+0x23c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a10      	ldr	r2, [pc, #64]	; (8002a24 <HAL_ADC_ConfigChannel+0x240>)
 80029e4:	fba2 2303 	umull	r2, r3, r2, r3
 80029e8:	0c9a      	lsrs	r2, r3, #18
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029f4:	e002      	b.n	80029fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f9      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40012300 	.word	0x40012300
 8002a1c:	40012000 	.word	0x40012000
 8002a20:	2000008c 	.word	0x2000008c
 8002a24:	431bde83 	.word	0x431bde83

08002a28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a30:	4b79      	ldr	r3, [pc, #484]	; (8002c18 <ADC_Init+0x1f0>)
 8002a32:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	021a      	lsls	r2, r3, #8
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6899      	ldr	r1, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	4a58      	ldr	r2, [pc, #352]	; (8002c1c <ADC_Init+0x1f4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d022      	beq.n	8002b06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ace:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6899      	ldr	r1, [r3, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002af0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6899      	ldr	r1, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	e00f      	b.n	8002b26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0202 	bic.w	r2, r2, #2
 8002b34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6899      	ldr	r1, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7e1b      	ldrb	r3, [r3, #24]
 8002b40:	005a      	lsls	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01b      	beq.n	8002b8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6859      	ldr	r1, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	035a      	lsls	r2, r3, #13
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	e007      	b.n	8002b9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002baa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	051a      	lsls	r2, r3, #20
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6899      	ldr	r1, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bde:	025a      	lsls	r2, r3, #9
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6899      	ldr	r1, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	029a      	lsls	r2, r3, #10
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	609a      	str	r2, [r3, #8]
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40012300 	.word	0x40012300
 8002c1c:	0f000001 	.word	0x0f000001

08002c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <__NVIC_SetPriorityGrouping+0x44>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c52:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <__NVIC_SetPriorityGrouping+0x44>)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	60d3      	str	r3, [r2, #12]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c6c:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <__NVIC_GetPriorityGrouping+0x18>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	0a1b      	lsrs	r3, r3, #8
 8002c72:	f003 0307 	and.w	r3, r3, #7
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	db0b      	blt.n	8002cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	f003 021f 	and.w	r2, r3, #31
 8002c9c:	4907      	ldr	r1, [pc, #28]	; (8002cbc <__NVIC_EnableIRQ+0x38>)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8002caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	e000e100 	.word	0xe000e100

08002cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	6039      	str	r1, [r7, #0]
 8002cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	db0a      	blt.n	8002cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	490c      	ldr	r1, [pc, #48]	; (8002d0c <__NVIC_SetPriority+0x4c>)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	0112      	lsls	r2, r2, #4
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce8:	e00a      	b.n	8002d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	4908      	ldr	r1, [pc, #32]	; (8002d10 <__NVIC_SetPriority+0x50>)
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	3b04      	subs	r3, #4
 8002cf8:	0112      	lsls	r2, r2, #4
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	761a      	strb	r2, [r3, #24]
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000e100 	.word	0xe000e100
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b089      	sub	sp, #36	; 0x24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f1c3 0307 	rsb	r3, r3, #7
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	bf28      	it	cs
 8002d32:	2304      	movcs	r3, #4
 8002d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	2b06      	cmp	r3, #6
 8002d3c:	d902      	bls.n	8002d44 <NVIC_EncodePriority+0x30>
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3b03      	subs	r3, #3
 8002d42:	e000      	b.n	8002d46 <NVIC_EncodePriority+0x32>
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43da      	mvns	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	401a      	ands	r2, r3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	43d9      	mvns	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d6c:	4313      	orrs	r3, r2
         );
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3724      	adds	r7, #36	; 0x24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d8c:	d301      	bcc.n	8002d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e00f      	b.n	8002db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d92:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <SysTick_Config+0x40>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d9a:	210f      	movs	r1, #15
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002da0:	f7ff ff8e 	bl	8002cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <SysTick_Config+0x40>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002daa:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <SysTick_Config+0x40>)
 8002dac:	2207      	movs	r2, #7
 8002dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	e000e010 	.word	0xe000e010

08002dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff ff29 	bl	8002c20 <__NVIC_SetPriorityGrouping>
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b086      	sub	sp, #24
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	4603      	mov	r3, r0
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de8:	f7ff ff3e 	bl	8002c68 <__NVIC_GetPriorityGrouping>
 8002dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	6978      	ldr	r0, [r7, #20]
 8002df4:	f7ff ff8e 	bl	8002d14 <NVIC_EncodePriority>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff5d 	bl	8002cc0 <__NVIC_SetPriority>
}
 8002e06:	bf00      	nop
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff31 	bl	8002c84 <__NVIC_EnableIRQ>
}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ffa2 	bl	8002d7c <SysTick_Config>
 8002e38:	4603      	mov	r3, r0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e014      	b.n	8002e7e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	791b      	ldrb	r3, [r3, #4]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d105      	bne.n	8002e6a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7fd fea9 	bl	8000bbc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	2300      	movs	r3, #0
 8002e96:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	795b      	ldrb	r3, [r3, #5]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_DAC_Start+0x1e>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e050      	b.n	8002f46 <HAL_DAC_Start+0xc0>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2202      	movs	r2, #2
 8002eae:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6819      	ldr	r1, [r3, #0]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d11a      	bne.n	8002f00 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ee0:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d127      	bne.n	8002f38 <HAL_DAC_Start+0xb2>
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b38      	cmp	r3, #56	; 0x38
 8002eec:	d124      	bne.n	8002f38 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0201 	orr.w	r2, r2, #1
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	e01b      	b.n	8002f38 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f0a:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8002f16:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f1e:	d10b      	bne.n	8002f38 <HAL_DAC_Start+0xb2>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8002f26:	d107      	bne.n	8002f38 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0202 	orr.w	r2, r2, #2
 8002f36:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b087      	sub	sp, #28
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	795b      	ldrb	r3, [r3, #5]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_DAC_ConfigChannel+0x20>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e036      	b.n	8002fe0 <HAL_DAC_ConfigChannel+0x8e>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002f86:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4013      	ands	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6819      	ldr	r1, [r3, #0]
 8002fc0:	22c0      	movs	r2, #192	; 0xc0
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43da      	mvns	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	400a      	ands	r2, r1
 8002fd0:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d105      	bne.n	8003016 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4413      	add	r3, r2
 8003010:	3308      	adds	r3, #8
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	e004      	b.n	8003020 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4413      	add	r3, r2
 800301c:	3314      	adds	r3, #20
 800301e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	461a      	mov	r2, r3
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d004      	beq.n	8003054 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2280      	movs	r2, #128	; 0x80
 800304e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e00c      	b.n	800306e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2205      	movs	r2, #5
 8003058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003088:	b2db      	uxtb	r3, r3
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003098:	b480      	push	{r7}
 800309a:	b089      	sub	sp, #36	; 0x24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	e16b      	b.n	800338c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030b4:	2201      	movs	r2, #1
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4013      	ands	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	f040 815a 	bne.w	8003386 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d00b      	beq.n	80030f2 <HAL_GPIO_Init+0x5a>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d007      	beq.n	80030f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030e6:	2b11      	cmp	r3, #17
 80030e8:	d003      	beq.n	80030f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b12      	cmp	r3, #18
 80030f0:	d130      	bne.n	8003154 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	2203      	movs	r2, #3
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4313      	orrs	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003128:	2201      	movs	r2, #1
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	f003 0201 	and.w	r2, r3, #1
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	2203      	movs	r2, #3
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b02      	cmp	r3, #2
 800318a:	d003      	beq.n	8003194 <HAL_GPIO_Init+0xfc>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b12      	cmp	r3, #18
 8003192:	d123      	bne.n	80031dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	08da      	lsrs	r2, r3, #3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3208      	adds	r2, #8
 800319c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	220f      	movs	r2, #15
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	08da      	lsrs	r2, r3, #3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3208      	adds	r2, #8
 80031d6:	69b9      	ldr	r1, [r7, #24]
 80031d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	2203      	movs	r2, #3
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 0203 	and.w	r2, r3, #3
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 80b4 	beq.w	8003386 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	4b5f      	ldr	r3, [pc, #380]	; (80033a0 <HAL_GPIO_Init+0x308>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	4a5e      	ldr	r2, [pc, #376]	; (80033a0 <HAL_GPIO_Init+0x308>)
 8003228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800322c:	6453      	str	r3, [r2, #68]	; 0x44
 800322e:	4b5c      	ldr	r3, [pc, #368]	; (80033a0 <HAL_GPIO_Init+0x308>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800323a:	4a5a      	ldr	r2, [pc, #360]	; (80033a4 <HAL_GPIO_Init+0x30c>)
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	089b      	lsrs	r3, r3, #2
 8003240:	3302      	adds	r3, #2
 8003242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	220f      	movs	r2, #15
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a51      	ldr	r2, [pc, #324]	; (80033a8 <HAL_GPIO_Init+0x310>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d02b      	beq.n	80032be <HAL_GPIO_Init+0x226>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a50      	ldr	r2, [pc, #320]	; (80033ac <HAL_GPIO_Init+0x314>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d025      	beq.n	80032ba <HAL_GPIO_Init+0x222>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a4f      	ldr	r2, [pc, #316]	; (80033b0 <HAL_GPIO_Init+0x318>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d01f      	beq.n	80032b6 <HAL_GPIO_Init+0x21e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a4e      	ldr	r2, [pc, #312]	; (80033b4 <HAL_GPIO_Init+0x31c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d019      	beq.n	80032b2 <HAL_GPIO_Init+0x21a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a4d      	ldr	r2, [pc, #308]	; (80033b8 <HAL_GPIO_Init+0x320>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d013      	beq.n	80032ae <HAL_GPIO_Init+0x216>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a4c      	ldr	r2, [pc, #304]	; (80033bc <HAL_GPIO_Init+0x324>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00d      	beq.n	80032aa <HAL_GPIO_Init+0x212>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a4b      	ldr	r2, [pc, #300]	; (80033c0 <HAL_GPIO_Init+0x328>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d007      	beq.n	80032a6 <HAL_GPIO_Init+0x20e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a4a      	ldr	r2, [pc, #296]	; (80033c4 <HAL_GPIO_Init+0x32c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <HAL_GPIO_Init+0x20a>
 800329e:	2307      	movs	r3, #7
 80032a0:	e00e      	b.n	80032c0 <HAL_GPIO_Init+0x228>
 80032a2:	2308      	movs	r3, #8
 80032a4:	e00c      	b.n	80032c0 <HAL_GPIO_Init+0x228>
 80032a6:	2306      	movs	r3, #6
 80032a8:	e00a      	b.n	80032c0 <HAL_GPIO_Init+0x228>
 80032aa:	2305      	movs	r3, #5
 80032ac:	e008      	b.n	80032c0 <HAL_GPIO_Init+0x228>
 80032ae:	2304      	movs	r3, #4
 80032b0:	e006      	b.n	80032c0 <HAL_GPIO_Init+0x228>
 80032b2:	2303      	movs	r3, #3
 80032b4:	e004      	b.n	80032c0 <HAL_GPIO_Init+0x228>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e002      	b.n	80032c0 <HAL_GPIO_Init+0x228>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <HAL_GPIO_Init+0x228>
 80032be:	2300      	movs	r3, #0
 80032c0:	69fa      	ldr	r2, [r7, #28]
 80032c2:	f002 0203 	and.w	r2, r2, #3
 80032c6:	0092      	lsls	r2, r2, #2
 80032c8:	4093      	lsls	r3, r2
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032d0:	4934      	ldr	r1, [pc, #208]	; (80033a4 <HAL_GPIO_Init+0x30c>)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	089b      	lsrs	r3, r3, #2
 80032d6:	3302      	adds	r3, #2
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032de:	4b3a      	ldr	r3, [pc, #232]	; (80033c8 <HAL_GPIO_Init+0x330>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	43db      	mvns	r3, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4013      	ands	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003302:	4a31      	ldr	r2, [pc, #196]	; (80033c8 <HAL_GPIO_Init+0x330>)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003308:	4b2f      	ldr	r3, [pc, #188]	; (80033c8 <HAL_GPIO_Init+0x330>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800332c:	4a26      	ldr	r2, [pc, #152]	; (80033c8 <HAL_GPIO_Init+0x330>)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003332:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <HAL_GPIO_Init+0x330>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	43db      	mvns	r3, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4013      	ands	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003356:	4a1c      	ldr	r2, [pc, #112]	; (80033c8 <HAL_GPIO_Init+0x330>)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800335c:	4b1a      	ldr	r3, [pc, #104]	; (80033c8 <HAL_GPIO_Init+0x330>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003380:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <HAL_GPIO_Init+0x330>)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	3301      	adds	r3, #1
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	2b0f      	cmp	r3, #15
 8003390:	f67f ae90 	bls.w	80030b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003394:	bf00      	nop
 8003396:	3724      	adds	r7, #36	; 0x24
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40013800 	.word	0x40013800
 80033a8:	40020000 	.word	0x40020000
 80033ac:	40020400 	.word	0x40020400
 80033b0:	40020800 	.word	0x40020800
 80033b4:	40020c00 	.word	0x40020c00
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40021400 	.word	0x40021400
 80033c0:	40021800 	.word	0x40021800
 80033c4:	40021c00 	.word	0x40021c00
 80033c8:	40013c00 	.word	0x40013c00

080033cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	807b      	strh	r3, [r7, #2]
 80033d8:	4613      	mov	r3, r2
 80033da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033dc:	787b      	ldrb	r3, [r7, #1]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033e2:	887a      	ldrh	r2, [r7, #2]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033e8:	e003      	b.n	80033f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033ea:	887b      	ldrh	r3, [r7, #2]
 80033ec:	041a      	lsls	r2, r3, #16
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	619a      	str	r2, [r3, #24]
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
	...

08003400 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e11f      	b.n	8003652 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fd fcb6 	bl	8000d98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2224      	movs	r2, #36	; 0x24
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0201 	bic.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003452:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003462:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003464:	f003 fe74 	bl	8007150 <HAL_RCC_GetPCLK1Freq>
 8003468:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	4a7b      	ldr	r2, [pc, #492]	; (800365c <HAL_I2C_Init+0x25c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d807      	bhi.n	8003484 <HAL_I2C_Init+0x84>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4a7a      	ldr	r2, [pc, #488]	; (8003660 <HAL_I2C_Init+0x260>)
 8003478:	4293      	cmp	r3, r2
 800347a:	bf94      	ite	ls
 800347c:	2301      	movls	r3, #1
 800347e:	2300      	movhi	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	e006      	b.n	8003492 <HAL_I2C_Init+0x92>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4a77      	ldr	r2, [pc, #476]	; (8003664 <HAL_I2C_Init+0x264>)
 8003488:	4293      	cmp	r3, r2
 800348a:	bf94      	ite	ls
 800348c:	2301      	movls	r3, #1
 800348e:	2300      	movhi	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e0db      	b.n	8003652 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4a72      	ldr	r2, [pc, #456]	; (8003668 <HAL_I2C_Init+0x268>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	0c9b      	lsrs	r3, r3, #18
 80034a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	4a64      	ldr	r2, [pc, #400]	; (800365c <HAL_I2C_Init+0x25c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d802      	bhi.n	80034d4 <HAL_I2C_Init+0xd4>
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	3301      	adds	r3, #1
 80034d2:	e009      	b.n	80034e8 <HAL_I2C_Init+0xe8>
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034da:	fb02 f303 	mul.w	r3, r2, r3
 80034de:	4a63      	ldr	r2, [pc, #396]	; (800366c <HAL_I2C_Init+0x26c>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	099b      	lsrs	r3, r3, #6
 80034e6:	3301      	adds	r3, #1
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	430b      	orrs	r3, r1
 80034ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	4956      	ldr	r1, [pc, #344]	; (800365c <HAL_I2C_Init+0x25c>)
 8003504:	428b      	cmp	r3, r1
 8003506:	d80d      	bhi.n	8003524 <HAL_I2C_Init+0x124>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	1e59      	subs	r1, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	fbb1 f3f3 	udiv	r3, r1, r3
 8003516:	3301      	adds	r3, #1
 8003518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351c:	2b04      	cmp	r3, #4
 800351e:	bf38      	it	cc
 8003520:	2304      	movcc	r3, #4
 8003522:	e04f      	b.n	80035c4 <HAL_I2C_Init+0x1c4>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d111      	bne.n	8003550 <HAL_I2C_Init+0x150>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	1e58      	subs	r0, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	440b      	add	r3, r1
 800353a:	fbb0 f3f3 	udiv	r3, r0, r3
 800353e:	3301      	adds	r3, #1
 8003540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	e012      	b.n	8003576 <HAL_I2C_Init+0x176>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1e58      	subs	r0, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	0099      	lsls	r1, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	fbb0 f3f3 	udiv	r3, r0, r3
 8003566:	3301      	adds	r3, #1
 8003568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_I2C_Init+0x17e>
 800357a:	2301      	movs	r3, #1
 800357c:	e022      	b.n	80035c4 <HAL_I2C_Init+0x1c4>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10e      	bne.n	80035a4 <HAL_I2C_Init+0x1a4>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1e58      	subs	r0, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6859      	ldr	r1, [r3, #4]
 800358e:	460b      	mov	r3, r1
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	440b      	add	r3, r1
 8003594:	fbb0 f3f3 	udiv	r3, r0, r3
 8003598:	3301      	adds	r3, #1
 800359a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a2:	e00f      	b.n	80035c4 <HAL_I2C_Init+0x1c4>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	1e58      	subs	r0, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6859      	ldr	r1, [r3, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	0099      	lsls	r1, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ba:	3301      	adds	r3, #1
 80035bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	6809      	ldr	r1, [r1, #0]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69da      	ldr	r2, [r3, #28]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6911      	ldr	r1, [r2, #16]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68d2      	ldr	r2, [r2, #12]
 80035fe:	4311      	orrs	r1, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	430b      	orrs	r3, r1
 8003606:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	000186a0 	.word	0x000186a0
 8003660:	001e847f 	.word	0x001e847f
 8003664:	003d08ff 	.word	0x003d08ff
 8003668:	431bde83 	.word	0x431bde83
 800366c:	10624dd3 	.word	0x10624dd3

08003670 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af02      	add	r7, sp, #8
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	607a      	str	r2, [r7, #4]
 800367a:	461a      	mov	r2, r3
 800367c:	460b      	mov	r3, r1
 800367e:	817b      	strh	r3, [r7, #10]
 8003680:	4613      	mov	r3, r2
 8003682:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003684:	f7ff f83c 	bl	8002700 <HAL_GetTick>
 8003688:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b20      	cmp	r3, #32
 8003694:	f040 80e0 	bne.w	8003858 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	2319      	movs	r3, #25
 800369e:	2201      	movs	r2, #1
 80036a0:	4970      	ldr	r1, [pc, #448]	; (8003864 <HAL_I2C_Master_Transmit+0x1f4>)
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f001 fdf5 	bl	8005292 <I2C_WaitOnFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
 80036b0:	e0d3      	b.n	800385a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_I2C_Master_Transmit+0x50>
 80036bc:	2302      	movs	r3, #2
 80036be:	e0cc      	b.n	800385a <HAL_I2C_Master_Transmit+0x1ea>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d007      	beq.n	80036e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0201 	orr.w	r2, r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2221      	movs	r2, #33	; 0x21
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2210      	movs	r2, #16
 8003702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	893a      	ldrh	r2, [r7, #8]
 8003716:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4a50      	ldr	r2, [pc, #320]	; (8003868 <HAL_I2C_Master_Transmit+0x1f8>)
 8003726:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003728:	8979      	ldrh	r1, [r7, #10]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	6a3a      	ldr	r2, [r7, #32]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f001 fcae 	bl	8005090 <I2C_MasterRequestWrite>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e08d      	b.n	800385a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800373e:	2300      	movs	r3, #0
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003754:	e066      	b.n	8003824 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	6a39      	ldr	r1, [r7, #32]
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f001 fe6f 	bl	800543e <I2C_WaitOnTXEFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00d      	beq.n	8003782 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	2b04      	cmp	r3, #4
 800376c:	d107      	bne.n	800377e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e06b      	b.n	800385a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	781a      	ldrb	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d11b      	bne.n	80037f8 <HAL_I2C_Master_Transmit+0x188>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d017      	beq.n	80037f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	781a      	ldrb	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	6a39      	ldr	r1, [r7, #32]
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f001 fe5f 	bl	80054c0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00d      	beq.n	8003824 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	2b04      	cmp	r3, #4
 800380e:	d107      	bne.n	8003820 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e01a      	b.n	800385a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003828:	2b00      	cmp	r3, #0
 800382a:	d194      	bne.n	8003756 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	e000      	b.n	800385a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003858:	2302      	movs	r3, #2
  }
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	00100002 	.word	0x00100002
 8003868:	ffff0000 	.word	0xffff0000

0800386c <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	461a      	mov	r2, r3
 8003878:	460b      	mov	r3, r1
 800387a:	817b      	strh	r3, [r7, #10]
 800387c:	4613      	mov	r3, r2
 800387e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b20      	cmp	r3, #32
 800388e:	f040 8085 	bne.w	800399c <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003892:	4b46      	ldr	r3, [pc, #280]	; (80039ac <HAL_I2C_Master_Transmit_IT+0x140>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	08db      	lsrs	r3, r3, #3
 8003898:	4a45      	ldr	r2, [pc, #276]	; (80039b0 <HAL_I2C_Master_Transmit_IT+0x144>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	0a1a      	lsrs	r2, r3, #8
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	009a      	lsls	r2, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d116      	bne.n	80038e6 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f043 0220 	orr.w	r2, r3, #32
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e05b      	b.n	800399e <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d0db      	beq.n	80038ac <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_I2C_Master_Transmit_IT+0x96>
 80038fe:	2302      	movs	r3, #2
 8003900:	e04d      	b.n	800399e <HAL_I2C_Master_Transmit_IT+0x132>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b01      	cmp	r3, #1
 8003916:	d007      	beq.n	8003928 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003936:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2221      	movs	r2, #33	; 0x21
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2210      	movs	r2, #16
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	893a      	ldrh	r2, [r7, #8]
 8003958:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4a13      	ldr	r2, [pc, #76]	; (80039b4 <HAL_I2C_Master_Transmit_IT+0x148>)
 8003968:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800396a:	897a      	ldrh	r2, [r7, #10]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800397e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003996:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	e000      	b.n	800399e <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800399c:	2302      	movs	r3, #2
  }
}
 800399e:	4618      	mov	r0, r3
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	2000008c 	.word	0x2000008c
 80039b0:	14f8b589 	.word	0x14f8b589
 80039b4:	ffff0000 	.word	0xffff0000

080039b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039d8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
 80039e4:	2b10      	cmp	r3, #16
 80039e6:	d003      	beq.n	80039f0 <HAL_I2C_EV_IRQHandler+0x38>
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	2b40      	cmp	r3, #64	; 0x40
 80039ec:	f040 80b6 	bne.w	8003b5c <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10d      	bne.n	8003a26 <HAL_I2C_EV_IRQHandler+0x6e>
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003a10:	d003      	beq.n	8003a1a <HAL_I2C_EV_IRQHandler+0x62>
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003a18:	d101      	bne.n	8003a1e <HAL_I2C_EV_IRQHandler+0x66>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <HAL_I2C_EV_IRQHandler+0x68>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	f000 8127 	beq.w	8003c74 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00c      	beq.n	8003a4a <HAL_I2C_EV_IRQHandler+0x92>
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	0a5b      	lsrs	r3, r3, #9
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d006      	beq.n	8003a4a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f001 fdaf 	bl	80055a0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fd12 	bl	800446c <I2C_Master_SB>
 8003a48:	e087      	b.n	8003b5a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	08db      	lsrs	r3, r3, #3
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <HAL_I2C_EV_IRQHandler+0xb2>
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	0a5b      	lsrs	r3, r3, #9
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fd88 	bl	8004578 <I2C_Master_ADD10>
 8003a68:	e077      	b.n	8003b5a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	085b      	lsrs	r3, r3, #1
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d009      	beq.n	8003a8a <HAL_I2C_EV_IRQHandler+0xd2>
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	0a5b      	lsrs	r3, r3, #9
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fda2 	bl	80045cc <I2C_Master_ADDR>
 8003a88:	e067      	b.n	8003b5a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	089b      	lsrs	r3, r3, #2
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d030      	beq.n	8003af8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa4:	f000 80e8 	beq.w	8003c78 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	09db      	lsrs	r3, r3, #7
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00f      	beq.n	8003ad4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	0a9b      	lsrs	r3, r3, #10
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d009      	beq.n	8003ad4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	089b      	lsrs	r3, r3, #2
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d103      	bne.n	8003ad4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f9de 	bl	8003e8e <I2C_MasterTransmit_TXE>
 8003ad2:	e042      	b.n	8003b5a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	089b      	lsrs	r3, r3, #2
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80cb 	beq.w	8003c78 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	0a5b      	lsrs	r3, r3, #9
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 80c4 	beq.w	8003c78 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fa68 	bl	8003fc6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003af6:	e0bf      	b.n	8003c78 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b06:	f000 80b7 	beq.w	8003c78 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	099b      	lsrs	r3, r3, #6
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00f      	beq.n	8003b36 <HAL_I2C_EV_IRQHandler+0x17e>
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	0a9b      	lsrs	r3, r3, #10
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d009      	beq.n	8003b36 <HAL_I2C_EV_IRQHandler+0x17e>
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	089b      	lsrs	r3, r3, #2
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d103      	bne.n	8003b36 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fb30 	bl	8004194 <I2C_MasterReceive_RXNE>
 8003b34:	e011      	b.n	8003b5a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	089b      	lsrs	r3, r3, #2
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 809a 	beq.w	8003c78 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	0a5b      	lsrs	r3, r3, #9
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8093 	beq.w	8003c78 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fba0 	bl	8004298 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b58:	e08e      	b.n	8003c78 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003b5a:	e08d      	b.n	8003c78 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d004      	beq.n	8003b6e <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	61fb      	str	r3, [r7, #28]
 8003b6c:	e007      	b.n	8003b7e <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	085b      	lsrs	r3, r3, #1
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d012      	beq.n	8003bb0 <HAL_I2C_EV_IRQHandler+0x1f8>
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	0a5b      	lsrs	r3, r3, #9
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00c      	beq.n	8003bb0 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003ba6:	69b9      	ldr	r1, [r7, #24]
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 ff5e 	bl	8004a6a <I2C_Slave_ADDR>
 8003bae:	e066      	b.n	8003c7e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d009      	beq.n	8003bd0 <HAL_I2C_EV_IRQHandler+0x218>
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	0a5b      	lsrs	r3, r3, #9
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 ff93 	bl	8004af4 <I2C_Slave_STOPF>
 8003bce:	e056      	b.n	8003c7e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003bd0:	7bbb      	ldrb	r3, [r7, #14]
 8003bd2:	2b21      	cmp	r3, #33	; 0x21
 8003bd4:	d002      	beq.n	8003bdc <HAL_I2C_EV_IRQHandler+0x224>
 8003bd6:	7bbb      	ldrb	r3, [r7, #14]
 8003bd8:	2b29      	cmp	r3, #41	; 0x29
 8003bda:	d125      	bne.n	8003c28 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	09db      	lsrs	r3, r3, #7
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00f      	beq.n	8003c08 <HAL_I2C_EV_IRQHandler+0x250>
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	0a9b      	lsrs	r3, r3, #10
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d009      	beq.n	8003c08 <HAL_I2C_EV_IRQHandler+0x250>
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	089b      	lsrs	r3, r3, #2
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d103      	bne.n	8003c08 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 fe74 	bl	80048ee <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c06:	e039      	b.n	8003c7c <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	089b      	lsrs	r3, r3, #2
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d033      	beq.n	8003c7c <HAL_I2C_EV_IRQHandler+0x2c4>
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	0a5b      	lsrs	r3, r3, #9
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d02d      	beq.n	8003c7c <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fea1 	bl	8004968 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c26:	e029      	b.n	8003c7c <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	099b      	lsrs	r3, r3, #6
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00f      	beq.n	8003c54 <HAL_I2C_EV_IRQHandler+0x29c>
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	0a9b      	lsrs	r3, r3, #10
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d009      	beq.n	8003c54 <HAL_I2C_EV_IRQHandler+0x29c>
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	089b      	lsrs	r3, r3, #2
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d103      	bne.n	8003c54 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 feac 	bl	80049aa <I2C_SlaveReceive_RXNE>
 8003c52:	e014      	b.n	8003c7e <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	089b      	lsrs	r3, r3, #2
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00e      	beq.n	8003c7e <HAL_I2C_EV_IRQHandler+0x2c6>
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	0a5b      	lsrs	r3, r3, #9
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 feda 	bl	8004a26 <I2C_SlaveReceive_BTF>
 8003c72:	e004      	b.n	8003c7e <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003c74:	bf00      	nop
 8003c76:	e002      	b.n	8003c7e <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c78:	bf00      	nop
 8003c7a:	e000      	b.n	8003c7e <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c7c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003c7e:	3720      	adds	r7, #32
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08a      	sub	sp, #40	; 0x28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ca6:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	0a1b      	lsrs	r3, r3, #8
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00e      	beq.n	8003cd2 <HAL_I2C_ER_IRQHandler+0x4e>
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003cd0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	0a5b      	lsrs	r3, r3, #9
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00e      	beq.n	8003cfc <HAL_I2C_ER_IRQHandler+0x78>
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	0a1b      	lsrs	r3, r3, #8
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d008      	beq.n	8003cfc <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	f043 0302 	orr.w	r3, r3, #2
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003cfa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	0a9b      	lsrs	r3, r3, #10
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d03f      	beq.n	8003d88 <HAL_I2C_ER_IRQHandler+0x104>
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	0a1b      	lsrs	r3, r3, #8
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d039      	beq.n	8003d88 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003d14:	7efb      	ldrb	r3, [r7, #27]
 8003d16:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d26:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003d2e:	7ebb      	ldrb	r3, [r7, #26]
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d112      	bne.n	8003d5a <HAL_I2C_ER_IRQHandler+0xd6>
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10f      	bne.n	8003d5a <HAL_I2C_ER_IRQHandler+0xd6>
 8003d3a:	7cfb      	ldrb	r3, [r7, #19]
 8003d3c:	2b21      	cmp	r3, #33	; 0x21
 8003d3e:	d008      	beq.n	8003d52 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003d40:	7cfb      	ldrb	r3, [r7, #19]
 8003d42:	2b29      	cmp	r3, #41	; 0x29
 8003d44:	d005      	beq.n	8003d52 <HAL_I2C_ER_IRQHandler+0xce>
 8003d46:	7cfb      	ldrb	r3, [r7, #19]
 8003d48:	2b28      	cmp	r3, #40	; 0x28
 8003d4a:	d106      	bne.n	8003d5a <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b21      	cmp	r3, #33	; 0x21
 8003d50:	d103      	bne.n	8003d5a <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fffe 	bl	8004d54 <I2C_Slave_AF>
 8003d58:	e016      	b.n	8003d88 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d62:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	f043 0304 	orr.w	r3, r3, #4
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d6c:	7efb      	ldrb	r3, [r7, #27]
 8003d6e:	2b10      	cmp	r3, #16
 8003d70:	d002      	beq.n	8003d78 <HAL_I2C_ER_IRQHandler+0xf4>
 8003d72:	7efb      	ldrb	r3, [r7, #27]
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	d107      	bne.n	8003d88 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d86:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	0adb      	lsrs	r3, r3, #11
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00e      	beq.n	8003db2 <HAL_I2C_ER_IRQHandler+0x12e>
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	0a1b      	lsrs	r3, r3, #8
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	f043 0308 	orr.w	r3, r3, #8
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003db0:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f001 f835 	bl	8004e34 <I2C_ITError>
  }
}
 8003dca:	bf00      	nop
 8003dcc:	3728      	adds	r7, #40	; 0x28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	460b      	mov	r3, r1
 8003e18:	70fb      	strb	r3, [r7, #3]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ea4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d150      	bne.n	8003f56 <I2C_MasterTransmit_TXE+0xc8>
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	2b21      	cmp	r3, #33	; 0x21
 8003eb8:	d14d      	bne.n	8003f56 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d01d      	beq.n	8003efc <I2C_MasterTransmit_TXE+0x6e>
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	d01a      	beq.n	8003efc <I2C_MasterTransmit_TXE+0x6e>
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ecc:	d016      	beq.n	8003efc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003edc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2211      	movs	r2, #17
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7fd ff55 	bl	8001da4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003efa:	e060      	b.n	8003fbe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f0a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b40      	cmp	r3, #64	; 0x40
 8003f34:	d107      	bne.n	8003f46 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff ff7d 	bl	8003e3e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f44:	e03b      	b.n	8003fbe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fd ff28 	bl	8001da4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f54:	e033      	b.n	8003fbe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	2b21      	cmp	r3, #33	; 0x21
 8003f5a:	d005      	beq.n	8003f68 <I2C_MasterTransmit_TXE+0xda>
 8003f5c:	7bbb      	ldrb	r3, [r7, #14]
 8003f5e:	2b40      	cmp	r3, #64	; 0x40
 8003f60:	d12d      	bne.n	8003fbe <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	2b22      	cmp	r3, #34	; 0x22
 8003f66:	d12a      	bne.n	8003fbe <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d108      	bne.n	8003f84 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f80:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003f82:	e01c      	b.n	8003fbe <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	d103      	bne.n	8003f98 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f898 	bl	80040c6 <I2C_MemoryTransmit_TXE_BTF>
}
 8003f96:	e012      	b.n	8003fbe <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	781a      	ldrb	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003fbc:	e7ff      	b.n	8003fbe <I2C_MasterTransmit_TXE+0x130>
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b21      	cmp	r3, #33	; 0x21
 8003fde:	d165      	bne.n	80040ac <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d012      	beq.n	8004010 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	781a      	ldrb	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800400e:	e056      	b.n	80040be <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b08      	cmp	r3, #8
 8004014:	d01d      	beq.n	8004052 <I2C_MasterTransmit_BTF+0x8c>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b20      	cmp	r3, #32
 800401a:	d01a      	beq.n	8004052 <I2C_MasterTransmit_BTF+0x8c>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004022:	d016      	beq.n	8004052 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004032:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2211      	movs	r2, #17
 8004038:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fd feaa 	bl	8001da4 <HAL_I2C_MasterTxCpltCallback>
}
 8004050:	e035      	b.n	80040be <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004060:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004070:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b40      	cmp	r3, #64	; 0x40
 800408a:	d107      	bne.n	800409c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff fed2 	bl	8003e3e <HAL_I2C_MemTxCpltCallback>
}
 800409a:	e010      	b.n	80040be <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7fd fe7d 	bl	8001da4 <HAL_I2C_MasterTxCpltCallback>
}
 80040aa:	e008      	b.n	80040be <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b40      	cmp	r3, #64	; 0x40
 80040b6:	d102      	bne.n	80040be <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f804 	bl	80040c6 <I2C_MemoryTransmit_TXE_BTF>
}
 80040be:	bf00      	nop
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d11d      	bne.n	8004112 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d10b      	bne.n	80040f6 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ee:	1c9a      	adds	r2, r3, #2
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80040f4:	e048      	b.n	8004188 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	121b      	asrs	r3, r3, #8
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004110:	e03a      	b.n	8004188 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004116:	2b01      	cmp	r3, #1
 8004118:	d10b      	bne.n	8004132 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800411e:	b2da      	uxtb	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004130:	e02a      	b.n	8004188 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004136:	2b02      	cmp	r3, #2
 8004138:	d126      	bne.n	8004188 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b22      	cmp	r3, #34	; 0x22
 8004144:	d108      	bne.n	8004158 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004154:	601a      	str	r2, [r3, #0]
}
 8004156:	e017      	b.n	8004188 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b21      	cmp	r3, #33	; 0x21
 8004162:	d111      	bne.n	8004188 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	781a      	ldrb	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b22      	cmp	r3, #34	; 0x22
 80041a6:	d173      	bne.n	8004290 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d920      	bls.n	80041f8 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d154      	bne.n	8004290 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80041f6:	e04b      	b.n	8004290 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d047      	beq.n	8004290 <I2C_MasterReceive_RXNE+0xfc>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d002      	beq.n	800420c <I2C_MasterReceive_RXNE+0x78>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d141      	bne.n	8004290 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800421a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800422a:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b40      	cmp	r3, #64	; 0x40
 8004264:	d10a      	bne.n	800427c <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7ff fdec 	bl	8003e52 <HAL_I2C_MemRxCpltCallback>
}
 800427a:	e009      	b.n	8004290 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2212      	movs	r2, #18
 8004288:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7ff fda1 	bl	8003dd2 <HAL_I2C_MasterRxCpltCallback>
}
 8004290:	bf00      	nop
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d11b      	bne.n	80042e8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042be:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80042e6:	e0bd      	b.n	8004464 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d129      	bne.n	8004346 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004300:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b04      	cmp	r3, #4
 8004306:	d00a      	beq.n	800431e <I2C_MasterReceive_BTF+0x86>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d007      	beq.n	800431e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004344:	e08e      	b.n	8004464 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d176      	bne.n	800443e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d002      	beq.n	800435c <I2C_MasterReceive_BTF+0xc4>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b10      	cmp	r3, #16
 800435a:	d108      	bne.n	800436e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	e019      	b.n	80043a2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2b04      	cmp	r3, #4
 8004372:	d002      	beq.n	800437a <I2C_MasterReceive_BTF+0xe2>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b02      	cmp	r3, #2
 8004378:	d108      	bne.n	800438c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	e00a      	b.n	80043a2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b10      	cmp	r3, #16
 8004390:	d007      	beq.n	80043a2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691a      	ldr	r2, [r3, #16]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80043fc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b40      	cmp	r3, #64	; 0x40
 8004410:	d10a      	bne.n	8004428 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7ff fd16 	bl	8003e52 <HAL_I2C_MemRxCpltCallback>
}
 8004426:	e01d      	b.n	8004464 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2212      	movs	r2, #18
 8004434:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff fccb 	bl	8003dd2 <HAL_I2C_MasterRxCpltCallback>
}
 800443c:	e012      	b.n	8004464 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b40      	cmp	r3, #64	; 0x40
 800447e:	d117      	bne.n	80044b0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004484:	2b00      	cmp	r3, #0
 8004486:	d109      	bne.n	800449c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448c:	b2db      	uxtb	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004498:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800449a:	e067      	b.n	800456c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	611a      	str	r2, [r3, #16]
}
 80044ae:	e05d      	b.n	800456c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044b8:	d133      	bne.n	8004522 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b21      	cmp	r3, #33	; 0x21
 80044c4:	d109      	bne.n	80044da <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	461a      	mov	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044d6:	611a      	str	r2, [r3, #16]
 80044d8:	e008      	b.n	80044ec <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	f043 0301 	orr.w	r3, r3, #1
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d004      	beq.n	80044fe <I2C_Master_SB+0x92>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d108      	bne.n	8004510 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	2b00      	cmp	r3, #0
 8004504:	d032      	beq.n	800456c <I2C_Master_SB+0x100>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450c:	2b00      	cmp	r3, #0
 800450e:	d02d      	beq.n	800456c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800451e:	605a      	str	r2, [r3, #4]
}
 8004520:	e024      	b.n	800456c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10e      	bne.n	8004548 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	b29b      	uxth	r3, r3
 8004530:	11db      	asrs	r3, r3, #7
 8004532:	b2db      	uxtb	r3, r3
 8004534:	f003 0306 	and.w	r3, r3, #6
 8004538:	b2db      	uxtb	r3, r3
 800453a:	f063 030f 	orn	r3, r3, #15
 800453e:	b2da      	uxtb	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	611a      	str	r2, [r3, #16]
}
 8004546:	e011      	b.n	800456c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454c:	2b01      	cmp	r3, #1
 800454e:	d10d      	bne.n	800456c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004554:	b29b      	uxth	r3, r3
 8004556:	11db      	asrs	r3, r3, #7
 8004558:	b2db      	uxtb	r3, r3
 800455a:	f003 0306 	and.w	r3, r3, #6
 800455e:	b2db      	uxtb	r3, r3
 8004560:	f063 030e 	orn	r3, r3, #14
 8004564:	b2da      	uxtb	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	611a      	str	r2, [r3, #16]
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004584:	b2da      	uxtb	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004590:	2b00      	cmp	r3, #0
 8004592:	d103      	bne.n	800459c <I2C_Master_ADD10+0x24>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	2b00      	cmp	r3, #0
 800459a:	d011      	beq.n	80045c0 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d104      	bne.n	80045b0 <I2C_Master_ADD10+0x38>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d007      	beq.n	80045c0 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045be:	605a      	str	r2, [r3, #4]
    }
  }
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b091      	sub	sp, #68	; 0x44
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b22      	cmp	r3, #34	; 0x22
 80045f4:	f040 8169 	bne.w	80048ca <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10f      	bne.n	8004620 <I2C_Master_ADDR+0x54>
 8004600:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004604:	2b40      	cmp	r3, #64	; 0x40
 8004606:	d10b      	bne.n	8004620 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004608:	2300      	movs	r3, #0
 800460a:	633b      	str	r3, [r7, #48]	; 0x30
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	633b      	str	r3, [r7, #48]	; 0x30
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	633b      	str	r3, [r7, #48]	; 0x30
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	e160      	b.n	80048e2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004624:	2b00      	cmp	r3, #0
 8004626:	d11d      	bne.n	8004664 <I2C_Master_ADDR+0x98>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004630:	d118      	bne.n	8004664 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004632:	2300      	movs	r3, #0
 8004634:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004646:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004656:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	651a      	str	r2, [r3, #80]	; 0x50
 8004662:	e13e      	b.n	80048e2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d113      	bne.n	8004696 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800466e:	2300      	movs	r3, #0
 8004670:	62bb      	str	r3, [r7, #40]	; 0x28
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	62bb      	str	r3, [r7, #40]	; 0x28
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28
 8004682:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	e115      	b.n	80048c2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469a:	b29b      	uxth	r3, r3
 800469c:	2b01      	cmp	r3, #1
 800469e:	f040 808a 	bne.w	80047b6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80046a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046a8:	d137      	bne.n	800471a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c8:	d113      	bne.n	80046f2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046da:	2300      	movs	r3, #0
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	e0e7      	b.n	80048c2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f2:	2300      	movs	r3, #0
 80046f4:	623b      	str	r3, [r7, #32]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	623b      	str	r3, [r7, #32]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	623b      	str	r3, [r7, #32]
 8004706:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	e0d3      	b.n	80048c2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471c:	2b08      	cmp	r3, #8
 800471e:	d02e      	beq.n	800477e <I2C_Master_ADDR+0x1b2>
 8004720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004722:	2b20      	cmp	r3, #32
 8004724:	d02b      	beq.n	800477e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004728:	2b12      	cmp	r3, #18
 800472a:	d102      	bne.n	8004732 <I2C_Master_ADDR+0x166>
 800472c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472e:	2b01      	cmp	r3, #1
 8004730:	d125      	bne.n	800477e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	2b04      	cmp	r3, #4
 8004736:	d00e      	beq.n	8004756 <I2C_Master_ADDR+0x18a>
 8004738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473a:	2b02      	cmp	r3, #2
 800473c:	d00b      	beq.n	8004756 <I2C_Master_ADDR+0x18a>
 800473e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004740:	2b10      	cmp	r3, #16
 8004742:	d008      	beq.n	8004756 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	e007      	b.n	8004766 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004764:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004766:	2300      	movs	r3, #0
 8004768:	61fb      	str	r3, [r7, #28]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	61fb      	str	r3, [r7, #28]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	61fb      	str	r3, [r7, #28]
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	e0a1      	b.n	80048c2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800478c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478e:	2300      	movs	r3, #0
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	e085      	b.n	80048c2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d14d      	bne.n	800485c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80047c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d016      	beq.n	80047f4 <I2C_Master_ADDR+0x228>
 80047c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d013      	beq.n	80047f4 <I2C_Master_ADDR+0x228>
 80047cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ce:	2b10      	cmp	r3, #16
 80047d0:	d010      	beq.n	80047f4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	e007      	b.n	8004804 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004802:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800480e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004812:	d117      	bne.n	8004844 <I2C_Master_ADDR+0x278>
 8004814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004816:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800481a:	d00b      	beq.n	8004834 <I2C_Master_ADDR+0x268>
 800481c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481e:	2b01      	cmp	r3, #1
 8004820:	d008      	beq.n	8004834 <I2C_Master_ADDR+0x268>
 8004822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004824:	2b08      	cmp	r3, #8
 8004826:	d005      	beq.n	8004834 <I2C_Master_ADDR+0x268>
 8004828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482a:	2b10      	cmp	r3, #16
 800482c:	d002      	beq.n	8004834 <I2C_Master_ADDR+0x268>
 800482e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004830:	2b20      	cmp	r3, #32
 8004832:	d107      	bne.n	8004844 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004842:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	e032      	b.n	80048c2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800486a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800487a:	d117      	bne.n	80048ac <I2C_Master_ADDR+0x2e0>
 800487c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004882:	d00b      	beq.n	800489c <I2C_Master_ADDR+0x2d0>
 8004884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004886:	2b01      	cmp	r3, #1
 8004888:	d008      	beq.n	800489c <I2C_Master_ADDR+0x2d0>
 800488a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488c:	2b08      	cmp	r3, #8
 800488e:	d005      	beq.n	800489c <I2C_Master_ADDR+0x2d0>
 8004890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004892:	2b10      	cmp	r3, #16
 8004894:	d002      	beq.n	800489c <I2C_Master_ADDR+0x2d0>
 8004896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004898:	2b20      	cmp	r3, #32
 800489a:	d107      	bne.n	80048ac <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048aa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ac:	2300      	movs	r3, #0
 80048ae:	613b      	str	r3, [r7, #16]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	613b      	str	r3, [r7, #16]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80048c8:	e00b      	b.n	80048e2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	68fb      	ldr	r3, [r7, #12]
}
 80048e0:	e7ff      	b.n	80048e2 <I2C_Master_ADDR+0x316>
 80048e2:	bf00      	nop
 80048e4:	3744      	adds	r7, #68	; 0x44
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004902:	b29b      	uxth	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d02b      	beq.n	8004960 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	781a      	ldrb	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d114      	bne.n	8004960 <I2C_SlaveTransmit_TXE+0x72>
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	2b29      	cmp	r3, #41	; 0x29
 800493a:	d111      	bne.n	8004960 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800494a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2221      	movs	r2, #33	; 0x21
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2228      	movs	r2, #40	; 0x28
 8004956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff fa43 	bl	8003de6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d011      	beq.n	800499e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	781a      	ldrb	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b084      	sub	sp, #16
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d02c      	beq.n	8004a1e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d114      	bne.n	8004a1e <I2C_SlaveReceive_RXNE+0x74>
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	2b2a      	cmp	r3, #42	; 0x2a
 80049f8:	d111      	bne.n	8004a1e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a08:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2222      	movs	r2, #34	; 0x22
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2228      	movs	r2, #40	; 0x28
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff f9ee 	bl	8003dfa <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004a1e:	bf00      	nop
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d012      	beq.n	8004a5e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a84:	2b28      	cmp	r3, #40	; 0x28
 8004a86:	d127      	bne.n	8004ad8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a96:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	089b      	lsrs	r3, r3, #2
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	09db      	lsrs	r3, r3, #7
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d103      	bne.n	8004abc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	81bb      	strh	r3, [r7, #12]
 8004aba:	e002      	b.n	8004ac2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004aca:	89ba      	ldrh	r2, [r7, #12]
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff f99c 	bl	8003e0e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004ad6:	e008      	b.n	8004aea <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0202 	mvn.w	r2, #2
 8004ae0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004aea:	bf00      	nop
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b02:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b12:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004b14:	2300      	movs	r3, #0
 8004b16:	60bb      	str	r3, [r7, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	60bb      	str	r3, [r7, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b40:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b50:	d172      	bne.n	8004c38 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	2b22      	cmp	r3, #34	; 0x22
 8004b56:	d002      	beq.n	8004b5e <I2C_Slave_STOPF+0x6a>
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b5c:	d135      	bne.n	8004bca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	f043 0204 	orr.w	r2, r3, #4
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b90:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fe fa6f 	bl	800307a <HAL_DMA_GetState>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d049      	beq.n	8004c36 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	4a69      	ldr	r2, [pc, #420]	; (8004d4c <I2C_Slave_STOPF+0x258>)
 8004ba8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fe fa41 	bl	8003036 <HAL_DMA_Abort_IT>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d03d      	beq.n	8004c36 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bc8:	e035      	b.n	8004c36 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	f043 0204 	orr.w	r2, r3, #4
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bfc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fe fa39 	bl	800307a <HAL_DMA_GetState>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d014      	beq.n	8004c38 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c12:	4a4e      	ldr	r2, [pc, #312]	; (8004d4c <I2C_Slave_STOPF+0x258>)
 8004c14:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fe fa0b 	bl	8003036 <HAL_DMA_Abort_IT>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d008      	beq.n	8004c38 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c30:	4610      	mov	r0, r2
 8004c32:	4798      	blx	r3
 8004c34:	e000      	b.n	8004c38 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c36:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d03e      	beq.n	8004cc0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d112      	bne.n	8004c76 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	d112      	bne.n	8004caa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	f043 0204 	orr.w	r2, r3, #4
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f8b3 	bl	8004e34 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004cce:	e039      	b.n	8004d44 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
 8004cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8004cd4:	d109      	bne.n	8004cea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2228      	movs	r2, #40	; 0x28
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff f888 	bl	8003dfa <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b28      	cmp	r3, #40	; 0x28
 8004cf4:	d111      	bne.n	8004d1a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a15      	ldr	r2, [pc, #84]	; (8004d50 <I2C_Slave_STOPF+0x25c>)
 8004cfa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7ff f889 	bl	8003e2a <HAL_I2C_ListenCpltCallback>
}
 8004d18:	e014      	b.n	8004d44 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	2b22      	cmp	r3, #34	; 0x22
 8004d20:	d002      	beq.n	8004d28 <I2C_Slave_STOPF+0x234>
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
 8004d24:	2b22      	cmp	r3, #34	; 0x22
 8004d26:	d10d      	bne.n	8004d44 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff f85b 	bl	8003dfa <HAL_I2C_SlaveRxCpltCallback>
}
 8004d44:	bf00      	nop
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	08005195 	.word	0x08005195
 8004d50:	ffff0000 	.word	0xffff0000

08004d54 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d62:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d002      	beq.n	8004d76 <I2C_Slave_AF+0x22>
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	d129      	bne.n	8004dca <I2C_Slave_AF+0x76>
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	2b28      	cmp	r3, #40	; 0x28
 8004d7a:	d126      	bne.n	8004dca <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a2c      	ldr	r2, [pc, #176]	; (8004e30 <I2C_Slave_AF+0xdc>)
 8004d80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d90:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d9a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004daa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff f831 	bl	8003e2a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004dc8:	e02e      	b.n	8004e28 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	2b21      	cmp	r3, #33	; 0x21
 8004dce:	d126      	bne.n	8004e1e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a17      	ldr	r2, [pc, #92]	; (8004e30 <I2C_Slave_AF+0xdc>)
 8004dd4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2221      	movs	r2, #33	; 0x21
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dfa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e04:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e14:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fe ffe5 	bl	8003de6 <HAL_I2C_SlaveTxCpltCallback>
}
 8004e1c:	e004      	b.n	8004e28 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e26:	615a      	str	r2, [r3, #20]
}
 8004e28:	bf00      	nop
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	ffff0000 	.word	0xffff0000

08004e34 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e42:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	d10a      	bne.n	8004e66 <I2C_ITError+0x32>
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
 8004e52:	2b22      	cmp	r3, #34	; 0x22
 8004e54:	d107      	bne.n	8004e66 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e64:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
 8004e68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e6c:	2b28      	cmp	r3, #40	; 0x28
 8004e6e:	d107      	bne.n	8004e80 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2228      	movs	r2, #40	; 0x28
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e7e:	e015      	b.n	8004eac <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e8e:	d006      	beq.n	8004e9e <I2C_ITError+0x6a>
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b60      	cmp	r3, #96	; 0x60
 8004e94:	d003      	beq.n	8004e9e <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eba:	d162      	bne.n	8004f82 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d020      	beq.n	8004f1c <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ede:	4a6a      	ldr	r2, [pc, #424]	; (8005088 <I2C_ITError+0x254>)
 8004ee0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fe f8a5 	bl	8003036 <HAL_DMA_Abort_IT>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 8089 	beq.w	8005006 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0201 	bic.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f16:	4610      	mov	r0, r2
 8004f18:	4798      	blx	r3
 8004f1a:	e074      	b.n	8005006 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	4a59      	ldr	r2, [pc, #356]	; (8005088 <I2C_ITError+0x254>)
 8004f22:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fe f884 	bl	8003036 <HAL_DMA_Abort_IT>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d068      	beq.n	8005006 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3e:	2b40      	cmp	r3, #64	; 0x40
 8004f40:	d10b      	bne.n	8004f5a <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 0201 	bic.w	r2, r2, #1
 8004f68:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	4798      	blx	r3
 8004f80:	e041      	b.n	8005006 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b60      	cmp	r3, #96	; 0x60
 8004f8c:	d125      	bne.n	8004fda <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa6:	2b40      	cmp	r3, #64	; 0x40
 8004fa8:	d10b      	bne.n	8004fc2 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0201 	bic.w	r2, r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7fe ff51 	bl	8003e7a <HAL_I2C_AbortCpltCallback>
 8004fd8:	e015      	b.n	8005006 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe4:	2b40      	cmp	r3, #64	; 0x40
 8004fe6:	d10b      	bne.n	8005000 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691a      	ldr	r2, [r3, #16]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7fe ff30 	bl	8003e66 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10e      	bne.n	8005034 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800501c:	2b00      	cmp	r3, #0
 800501e:	d109      	bne.n	8005034 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005026:	2b00      	cmp	r3, #0
 8005028:	d104      	bne.n	8005034 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005042:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b04      	cmp	r3, #4
 8005056:	d113      	bne.n	8005080 <I2C_ITError+0x24c>
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	2b28      	cmp	r3, #40	; 0x28
 800505c:	d110      	bne.n	8005080 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a0a      	ldr	r2, [pc, #40]	; (800508c <I2C_ITError+0x258>)
 8005062:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7fe fed5 	bl	8003e2a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005080:	bf00      	nop
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	08005195 	.word	0x08005195
 800508c:	ffff0000 	.word	0xffff0000

08005090 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af02      	add	r7, sp, #8
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	607a      	str	r2, [r7, #4]
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	460b      	mov	r3, r1
 800509e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d006      	beq.n	80050ba <I2C_MasterRequestWrite+0x2a>
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d003      	beq.n	80050ba <I2C_MasterRequestWrite+0x2a>
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050b8:	d108      	bne.n	80050cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	e00b      	b.n	80050e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d0:	2b12      	cmp	r3, #18
 80050d2:	d107      	bne.n	80050e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 f8ce 	bl	8005292 <I2C_WaitOnFlagUntilTimeout>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00c      	beq.n	8005116 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005110:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e035      	b.n	8005182 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800511e:	d108      	bne.n	8005132 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005120:	897b      	ldrh	r3, [r7, #10]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	461a      	mov	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800512e:	611a      	str	r2, [r3, #16]
 8005130:	e01b      	b.n	800516a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005132:	897b      	ldrh	r3, [r7, #10]
 8005134:	11db      	asrs	r3, r3, #7
 8005136:	b2db      	uxtb	r3, r3
 8005138:	f003 0306 	and.w	r3, r3, #6
 800513c:	b2db      	uxtb	r3, r3
 800513e:	f063 030f 	orn	r3, r3, #15
 8005142:	b2da      	uxtb	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	490f      	ldr	r1, [pc, #60]	; (800518c <I2C_MasterRequestWrite+0xfc>)
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 f8f5 	bl	8005340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e010      	b.n	8005182 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005160:	897b      	ldrh	r3, [r7, #10]
 8005162:	b2da      	uxtb	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	4908      	ldr	r1, [pc, #32]	; (8005190 <I2C_MasterRequestWrite+0x100>)
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 f8e5 	bl	8005340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e000      	b.n	8005182 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	00010008 	.word	0x00010008
 8005190:	00010002 	.word	0x00010002

08005194 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a8:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b6:	2200      	movs	r2, #0
 80051b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	2200      	movs	r2, #0
 80051c8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ec:	2200      	movs	r2, #0
 80051ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	2200      	movs	r2, #0
 80051fe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0201 	bic.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b60      	cmp	r3, #96	; 0x60
 800521a:	d10e      	bne.n	800523a <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f7fe fe21 	bl	8003e7a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005238:	e027      	b.n	800528a <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800523a:	7afb      	ldrb	r3, [r7, #11]
 800523c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005240:	2b28      	cmp	r3, #40	; 0x28
 8005242:	d117      	bne.n	8005274 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005262:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2228      	movs	r2, #40	; 0x28
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005272:	e007      	b.n	8005284 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f7fe fdee 	bl	8003e66 <HAL_I2C_ErrorCallback>
}
 800528a:	bf00      	nop
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	603b      	str	r3, [r7, #0]
 800529e:	4613      	mov	r3, r2
 80052a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052a2:	e025      	b.n	80052f0 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052aa:	d021      	beq.n	80052f0 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ac:	f7fd fa28 	bl	8002700 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d302      	bcc.n	80052c2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d116      	bne.n	80052f0 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052dc:	f043 0220 	orr.w	r2, r3, #32
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e023      	b.n	8005338 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	0c1b      	lsrs	r3, r3, #16
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d10d      	bne.n	8005316 <I2C_WaitOnFlagUntilTimeout+0x84>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	43da      	mvns	r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4013      	ands	r3, r2
 8005306:	b29b      	uxth	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	bf0c      	ite	eq
 800530c:	2301      	moveq	r3, #1
 800530e:	2300      	movne	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	461a      	mov	r2, r3
 8005314:	e00c      	b.n	8005330 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	43da      	mvns	r2, r3
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	4013      	ands	r3, r2
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	bf0c      	ite	eq
 8005328:	2301      	moveq	r3, #1
 800532a:	2300      	movne	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	461a      	mov	r2, r3
 8005330:	79fb      	ldrb	r3, [r7, #7]
 8005332:	429a      	cmp	r2, r3
 8005334:	d0b6      	beq.n	80052a4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800534e:	e051      	b.n	80053f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800535a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800535e:	d123      	bne.n	80053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005378:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	f043 0204 	orr.w	r2, r3, #4
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e046      	b.n	8005436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ae:	d021      	beq.n	80053f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b0:	f7fd f9a6 	bl	8002700 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d302      	bcc.n	80053c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d116      	bne.n	80053f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	f043 0220 	orr.w	r2, r3, #32
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e020      	b.n	8005436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	0c1b      	lsrs	r3, r3, #16
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d10c      	bne.n	8005418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	43da      	mvns	r2, r3
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4013      	ands	r3, r2
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	bf14      	ite	ne
 8005410:	2301      	movne	r3, #1
 8005412:	2300      	moveq	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	e00b      	b.n	8005430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	43da      	mvns	r2, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	4013      	ands	r3, r2
 8005424:	b29b      	uxth	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	bf14      	ite	ne
 800542a:	2301      	movne	r3, #1
 800542c:	2300      	moveq	r3, #0
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d18d      	bne.n	8005350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b084      	sub	sp, #16
 8005442:	af00      	add	r7, sp, #0
 8005444:	60f8      	str	r0, [r7, #12]
 8005446:	60b9      	str	r1, [r7, #8]
 8005448:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800544a:	e02d      	b.n	80054a8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f878 	bl	8005542 <I2C_IsAcknowledgeFailed>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e02d      	b.n	80054b8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005462:	d021      	beq.n	80054a8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005464:	f7fd f94c 	bl	8002700 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	429a      	cmp	r2, r3
 8005472:	d302      	bcc.n	800547a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d116      	bne.n	80054a8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005494:	f043 0220 	orr.w	r2, r3, #32
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e007      	b.n	80054b8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b2:	2b80      	cmp	r3, #128	; 0x80
 80054b4:	d1ca      	bne.n	800544c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054cc:	e02d      	b.n	800552a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 f837 	bl	8005542 <I2C_IsAcknowledgeFailed>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e02d      	b.n	800553a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054e4:	d021      	beq.n	800552a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e6:	f7fd f90b 	bl	8002700 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d302      	bcc.n	80054fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d116      	bne.n	800552a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f043 0220 	orr.w	r2, r3, #32
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e007      	b.n	800553a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b04      	cmp	r3, #4
 8005536:	d1ca      	bne.n	80054ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005558:	d11b      	bne.n	8005592 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005562:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2220      	movs	r2, #32
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	f043 0204 	orr.w	r2, r3, #4
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80055b0:	d103      	bne.n	80055ba <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80055b8:	e007      	b.n	80055ca <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055be:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80055c2:	d102      	bne.n	80055ca <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2208      	movs	r2, #8
 80055c8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80055d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055d8:	b08f      	sub	sp, #60	; 0x3c
 80055da:	af0a      	add	r7, sp, #40	; 0x28
 80055dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e10f      	b.n	8005808 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f006 fd36 	bl	800c074 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2203      	movs	r2, #3
 800560c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005618:	2b00      	cmp	r3, #0
 800561a:	d102      	bne.n	8005622 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4618      	mov	r0, r3
 8005628:	f003 fbd9 	bl	8008dde <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	603b      	str	r3, [r7, #0]
 8005632:	687e      	ldr	r6, [r7, #4]
 8005634:	466d      	mov	r5, sp
 8005636:	f106 0410 	add.w	r4, r6, #16
 800563a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800563c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800563e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005640:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005642:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005646:	e885 0003 	stmia.w	r5, {r0, r1}
 800564a:	1d33      	adds	r3, r6, #4
 800564c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800564e:	6838      	ldr	r0, [r7, #0]
 8005650:	f003 fab0 	bl	8008bb4 <USB_CoreInit>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d005      	beq.n	8005666 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2202      	movs	r2, #2
 800565e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e0d0      	b.n	8005808 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2100      	movs	r1, #0
 800566c:	4618      	mov	r0, r3
 800566e:	f003 fbc7 	bl	8008e00 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005672:	2300      	movs	r3, #0
 8005674:	73fb      	strb	r3, [r7, #15]
 8005676:	e04a      	b.n	800570e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005678:	7bfa      	ldrb	r2, [r7, #15]
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	4613      	mov	r3, r2
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	1a9b      	subs	r3, r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	333d      	adds	r3, #61	; 0x3d
 8005688:	2201      	movs	r2, #1
 800568a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800568c:	7bfa      	ldrb	r2, [r7, #15]
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	4613      	mov	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	1a9b      	subs	r3, r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	333c      	adds	r3, #60	; 0x3c
 800569c:	7bfa      	ldrb	r2, [r7, #15]
 800569e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80056a0:	7bfa      	ldrb	r2, [r7, #15]
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	b298      	uxth	r0, r3
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	1a9b      	subs	r3, r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	3342      	adds	r3, #66	; 0x42
 80056b4:	4602      	mov	r2, r0
 80056b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056b8:	7bfa      	ldrb	r2, [r7, #15]
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	4613      	mov	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	333f      	adds	r3, #63	; 0x3f
 80056c8:	2200      	movs	r2, #0
 80056ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80056cc:	7bfa      	ldrb	r2, [r7, #15]
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	4613      	mov	r3, r2
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	1a9b      	subs	r3, r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	440b      	add	r3, r1
 80056da:	3344      	adds	r3, #68	; 0x44
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056e0:	7bfa      	ldrb	r2, [r7, #15]
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	4613      	mov	r3, r2
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	3348      	adds	r3, #72	; 0x48
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056f4:	7bfa      	ldrb	r2, [r7, #15]
 80056f6:	6879      	ldr	r1, [r7, #4]
 80056f8:	4613      	mov	r3, r2
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	1a9b      	subs	r3, r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	440b      	add	r3, r1
 8005702:	3350      	adds	r3, #80	; 0x50
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	3301      	adds	r3, #1
 800570c:	73fb      	strb	r3, [r7, #15]
 800570e:	7bfa      	ldrb	r2, [r7, #15]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	429a      	cmp	r2, r3
 8005716:	d3af      	bcc.n	8005678 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005718:	2300      	movs	r3, #0
 800571a:	73fb      	strb	r3, [r7, #15]
 800571c:	e044      	b.n	80057a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800571e:	7bfa      	ldrb	r2, [r7, #15]
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	440b      	add	r3, r1
 800572c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005730:	2200      	movs	r2, #0
 8005732:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005734:	7bfa      	ldrb	r2, [r7, #15]
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	4613      	mov	r3, r2
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	1a9b      	subs	r3, r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005746:	7bfa      	ldrb	r2, [r7, #15]
 8005748:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800574a:	7bfa      	ldrb	r2, [r7, #15]
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	4613      	mov	r3, r2
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	1a9b      	subs	r3, r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	440b      	add	r3, r1
 8005758:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800575c:	2200      	movs	r2, #0
 800575e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005760:	7bfa      	ldrb	r2, [r7, #15]
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	4613      	mov	r3, r2
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	1a9b      	subs	r3, r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	440b      	add	r3, r1
 800576e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005776:	7bfa      	ldrb	r2, [r7, #15]
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	4613      	mov	r3, r2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	1a9b      	subs	r3, r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800578c:	7bfa      	ldrb	r2, [r7, #15]
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	4613      	mov	r3, r2
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	3301      	adds	r3, #1
 80057a6:	73fb      	strb	r3, [r7, #15]
 80057a8:	7bfa      	ldrb	r2, [r7, #15]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d3b5      	bcc.n	800571e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	603b      	str	r3, [r7, #0]
 80057b8:	687e      	ldr	r6, [r7, #4]
 80057ba:	466d      	mov	r5, sp
 80057bc:	f106 0410 	add.w	r4, r6, #16
 80057c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80057cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80057d0:	1d33      	adds	r3, r6, #4
 80057d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057d4:	6838      	ldr	r0, [r7, #0]
 80057d6:	f003 fb3d 	bl	8008e54 <USB_DevInit>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d005      	beq.n	80057ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e00d      	b.n	8005808 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4618      	mov	r0, r3
 8005802:	f004 fb7c 	bl	8009efe <USB_DevDisconnect>

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005810 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_PCD_Start+0x1c>
 8005828:	2302      	movs	r3, #2
 800582a:	e020      	b.n	800586e <HAL_PCD_Start+0x5e>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005838:	2b01      	cmp	r3, #1
 800583a:	d109      	bne.n	8005850 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005840:	2b01      	cmp	r3, #1
 8005842:	d005      	beq.n	8005850 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	f004 fb3a 	bl	8009ece <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4618      	mov	r0, r3
 8005860:	f003 faac 	bl	8008dbc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005876:	b590      	push	{r4, r7, lr}
 8005878:	b08d      	sub	sp, #52	; 0x34
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4618      	mov	r0, r3
 800588e:	f004 fbe1 	bl	800a054 <USB_GetMode>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	f040 839d 	bne.w	8005fd4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4618      	mov	r0, r3
 80058a0:	f004 fb45 	bl	8009f2e <USB_ReadInterrupts>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 8393 	beq.w	8005fd2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f004 fb3c 	bl	8009f2e <USB_ReadInterrupts>
 80058b6:	4603      	mov	r3, r0
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d107      	bne.n	80058d0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695a      	ldr	r2, [r3, #20]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f002 0202 	and.w	r2, r2, #2
 80058ce:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f004 fb2a 	bl	8009f2e <USB_ReadInterrupts>
 80058da:	4603      	mov	r3, r0
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2b10      	cmp	r3, #16
 80058e2:	d161      	bne.n	80059a8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699a      	ldr	r2, [r3, #24]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0210 	bic.w	r2, r2, #16
 80058f2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	f003 020f 	and.w	r2, r3, #15
 8005900:	4613      	mov	r3, r2
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	1a9b      	subs	r3, r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	4413      	add	r3, r2
 8005910:	3304      	adds	r3, #4
 8005912:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	0c5b      	lsrs	r3, r3, #17
 8005918:	f003 030f 	and.w	r3, r3, #15
 800591c:	2b02      	cmp	r3, #2
 800591e:	d124      	bne.n	800596a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005926:	4013      	ands	r3, r2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d035      	beq.n	8005998 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	091b      	lsrs	r3, r3, #4
 8005934:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005936:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800593a:	b29b      	uxth	r3, r3
 800593c:	461a      	mov	r2, r3
 800593e:	6a38      	ldr	r0, [r7, #32]
 8005940:	f004 f9a2 	bl	8009c88 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	68da      	ldr	r2, [r3, #12]
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	091b      	lsrs	r3, r3, #4
 800594c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005950:	441a      	add	r2, r3
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	091b      	lsrs	r3, r3, #4
 800595e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005962:	441a      	add	r2, r3
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	619a      	str	r2, [r3, #24]
 8005968:	e016      	b.n	8005998 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	0c5b      	lsrs	r3, r3, #17
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	2b06      	cmp	r3, #6
 8005974:	d110      	bne.n	8005998 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800597c:	2208      	movs	r2, #8
 800597e:	4619      	mov	r1, r3
 8005980:	6a38      	ldr	r0, [r7, #32]
 8005982:	f004 f981 	bl	8009c88 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	699a      	ldr	r2, [r3, #24]
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	091b      	lsrs	r3, r3, #4
 800598e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005992:	441a      	add	r2, r3
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0210 	orr.w	r2, r2, #16
 80059a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f004 fabe 	bl	8009f2e <USB_ReadInterrupts>
 80059b2:	4603      	mov	r3, r0
 80059b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80059bc:	d16e      	bne.n	8005a9c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f004 fac4 	bl	8009f54 <USB_ReadDevAllOutEpInterrupt>
 80059cc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80059ce:	e062      	b.n	8005a96 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d057      	beq.n	8005a8a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	4611      	mov	r1, r2
 80059e4:	4618      	mov	r0, r3
 80059e6:	f004 fae9 	bl	8009fbc <USB_ReadDevOutEPInterrupt>
 80059ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00c      	beq.n	8005a10 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a02:	461a      	mov	r2, r3
 8005a04:	2301      	movs	r3, #1
 8005a06:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005a08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fdb0 	bl	8006570 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00c      	beq.n	8005a34 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a26:	461a      	mov	r2, r3
 8005a28:	2308      	movs	r3, #8
 8005a2a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005a2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 feaa 	bl	8006788 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f003 0310 	and.w	r3, r3, #16
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d008      	beq.n	8005a50 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	2310      	movs	r3, #16
 8005a4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d008      	beq.n	8005a6c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a66:	461a      	mov	r2, r3
 8005a68:	2320      	movs	r3, #32
 8005a6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d009      	beq.n	8005a8a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a82:	461a      	mov	r2, r3
 8005a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a88:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a92:	085b      	lsrs	r3, r3, #1
 8005a94:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d199      	bne.n	80059d0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f004 fa44 	bl	8009f2e <USB_ReadInterrupts>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005aac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ab0:	f040 80c0 	bne.w	8005c34 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f004 fa65 	bl	8009f88 <USB_ReadDevAllInEpInterrupt>
 8005abe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005ac4:	e0b2      	b.n	8005c2c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 80a7 	beq.w	8005c20 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	4611      	mov	r1, r2
 8005adc:	4618      	mov	r0, r3
 8005ade:	f004 fa8b 	bl	8009ff8 <USB_ReadDevInEPInterrupt>
 8005ae2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d057      	beq.n	8005b9e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	2201      	movs	r2, #1
 8005af6:	fa02 f303 	lsl.w	r3, r2, r3
 8005afa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	43db      	mvns	r3, r3
 8005b08:	69f9      	ldr	r1, [r7, #28]
 8005b0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b0e:	4013      	ands	r3, r2
 8005b10:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1e:	461a      	mov	r2, r3
 8005b20:	2301      	movs	r3, #1
 8005b22:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d132      	bne.n	8005b92 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005b2c:	6879      	ldr	r1, [r7, #4]
 8005b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b30:	4613      	mov	r3, r2
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	1a9b      	subs	r3, r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	440b      	add	r3, r1
 8005b3a:	3348      	adds	r3, #72	; 0x48
 8005b3c:	6819      	ldr	r1, [r3, #0]
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b42:	4613      	mov	r3, r2
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	1a9b      	subs	r3, r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4403      	add	r3, r0
 8005b4c:	3344      	adds	r3, #68	; 0x44
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4419      	add	r1, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b56:	4613      	mov	r3, r2
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	1a9b      	subs	r3, r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4403      	add	r3, r0
 8005b60:	3348      	adds	r3, #72	; 0x48
 8005b62:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d113      	bne.n	8005b92 <HAL_PCD_IRQHandler+0x31c>
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6e:	4613      	mov	r3, r2
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	1a9b      	subs	r3, r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	440b      	add	r3, r1
 8005b78:	3350      	adds	r3, #80	; 0x50
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d108      	bne.n	8005b92 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6818      	ldr	r0, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	f004 fa93 	bl	800a0b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	4619      	mov	r1, r3
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f006 faec 	bl	800c176 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d008      	beq.n	8005bba <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	2308      	movs	r3, #8
 8005bb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d008      	beq.n	8005bd6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	2310      	movs	r3, #16
 8005bd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d008      	beq.n	8005bf2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bec:	461a      	mov	r2, r3
 8005bee:	2340      	movs	r3, #64	; 0x40
 8005bf0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c08:	461a      	mov	r2, r3
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005c18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fc1b 	bl	8006456 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	3301      	adds	r3, #1
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	085b      	lsrs	r3, r3, #1
 8005c2a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f47f af49 	bne.w	8005ac6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f004 f978 	bl	8009f2e <USB_ReadInterrupts>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c48:	d122      	bne.n	8005c90 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	69fa      	ldr	r2, [r7, #28]
 8005c54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c58:	f023 0301 	bic.w	r3, r3, #1
 8005c5c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d108      	bne.n	8005c7a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005c70:	2100      	movs	r1, #0
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fe26 	bl	80068c4 <HAL_PCDEx_LPM_Callback>
 8005c78:	e002      	b.n	8005c80 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f006 faf2 	bl	800c264 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695a      	ldr	r2, [r3, #20]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005c8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f004 f94a 	bl	8009f2e <USB_ReadInterrupts>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ca4:	d112      	bne.n	8005ccc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d102      	bne.n	8005cbc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f006 faae 	bl	800c218 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695a      	ldr	r2, [r3, #20]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005cca:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f004 f92c 	bl	8009f2e <USB_ReadInterrupts>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce0:	f040 80c7 	bne.w	8005e72 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cf2:	f023 0301 	bic.w	r3, r3, #1
 8005cf6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2110      	movs	r1, #16
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f003 fa0c 	bl	800911c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d04:	2300      	movs	r3, #0
 8005d06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d08:	e056      	b.n	8005db8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d16:	461a      	mov	r2, r3
 8005d18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d1c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d2e:	0151      	lsls	r1, r2, #5
 8005d30:	69fa      	ldr	r2, [r7, #28]
 8005d32:	440a      	add	r2, r1
 8005d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d3c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d4e:	0151      	lsls	r1, r2, #5
 8005d50:	69fa      	ldr	r2, [r7, #28]
 8005d52:	440a      	add	r2, r1
 8005d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d70:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d82:	0151      	lsls	r1, r2, #5
 8005d84:	69fa      	ldr	r2, [r7, #28]
 8005d86:	440a      	add	r2, r1
 8005d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005da2:	0151      	lsls	r1, r2, #5
 8005da4:	69fa      	ldr	r2, [r7, #28]
 8005da6:	440a      	add	r2, r1
 8005da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005db0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db4:	3301      	adds	r3, #1
 8005db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d3a3      	bcc.n	8005d0a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dd0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005dd4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d016      	beq.n	8005e0c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005de8:	69fa      	ldr	r2, [r7, #28]
 8005dea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dee:	f043 030b 	orr.w	r3, r3, #11
 8005df2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e04:	f043 030b 	orr.w	r3, r3, #11
 8005e08:	6453      	str	r3, [r2, #68]	; 0x44
 8005e0a:	e015      	b.n	8005e38 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005e1e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005e22:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e32:	f043 030b 	orr.w	r3, r3, #11
 8005e36:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	69fa      	ldr	r2, [r7, #28]
 8005e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e46:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005e4a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6818      	ldr	r0, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	f004 f92b 	bl	800a0b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	695a      	ldr	r2, [r3, #20]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005e70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f004 f859 	bl	8009f2e <USB_ReadInterrupts>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e86:	d124      	bne.n	8005ed2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f004 f8ef 	bl	800a070 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f003 f9a1 	bl	80091de <USB_GetDevSpeed>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681c      	ldr	r4, [r3, #0]
 8005ea8:	f001 f946 	bl	8007138 <HAL_RCC_GetHCLKFreq>
 8005eac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f002 fede 	bl	8008c78 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f006 f982 	bl	800c1c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	695a      	ldr	r2, [r3, #20]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005ed0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f004 f829 	bl	8009f2e <USB_ReadInterrupts>
 8005edc:	4603      	mov	r3, r0
 8005ede:	f003 0308 	and.w	r3, r3, #8
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	d10a      	bne.n	8005efc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f006 f95f 	bl	800c1aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695a      	ldr	r2, [r3, #20]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f002 0208 	and.w	r2, r2, #8
 8005efa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f004 f814 	bl	8009f2e <USB_ReadInterrupts>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f10:	d10f      	bne.n	8005f32 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f006 f9c1 	bl	800c2a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	695a      	ldr	r2, [r3, #20]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005f30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f003 fff9 	bl	8009f2e <USB_ReadInterrupts>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f46:	d10f      	bne.n	8005f68 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	4619      	mov	r1, r3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f006 f994 	bl	800c280 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695a      	ldr	r2, [r3, #20]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005f66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f003 ffde 	bl	8009f2e <USB_ReadInterrupts>
 8005f72:	4603      	mov	r3, r0
 8005f74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f7c:	d10a      	bne.n	8005f94 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f006 f9a2 	bl	800c2c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695a      	ldr	r2, [r3, #20]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005f92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f003 ffc8 	bl	8009f2e <USB_ReadInterrupts>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	f003 0304 	and.w	r3, r3, #4
 8005fa4:	2b04      	cmp	r3, #4
 8005fa6:	d115      	bne.n	8005fd4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	f003 0304 	and.w	r3, r3, #4
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d002      	beq.n	8005fc0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f006 f992 	bl	800c2e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6859      	ldr	r1, [r3, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	605a      	str	r2, [r3, #4]
 8005fd0:	e000      	b.n	8005fd4 <HAL_PCD_IRQHandler+0x75e>
      return;
 8005fd2:	bf00      	nop
    }
  }
}
 8005fd4:	3734      	adds	r7, #52	; 0x34
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd90      	pop	{r4, r7, pc}

08005fda <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b082      	sub	sp, #8
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d101      	bne.n	8005ff4 <HAL_PCD_SetAddress+0x1a>
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	e013      	b.n	800601c <HAL_PCD_SetAddress+0x42>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	78fa      	ldrb	r2, [r7, #3]
 8006000:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	78fa      	ldrb	r2, [r7, #3]
 800600a:	4611      	mov	r1, r2
 800600c:	4618      	mov	r0, r3
 800600e:	f003 ff38 	bl	8009e82 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	4608      	mov	r0, r1
 800602e:	4611      	mov	r1, r2
 8006030:	461a      	mov	r2, r3
 8006032:	4603      	mov	r3, r0
 8006034:	70fb      	strb	r3, [r7, #3]
 8006036:	460b      	mov	r3, r1
 8006038:	803b      	strh	r3, [r7, #0]
 800603a:	4613      	mov	r3, r2
 800603c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006042:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006046:	2b00      	cmp	r3, #0
 8006048:	da0f      	bge.n	800606a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800604a:	78fb      	ldrb	r3, [r7, #3]
 800604c:	f003 020f 	and.w	r2, r3, #15
 8006050:	4613      	mov	r3, r2
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	1a9b      	subs	r3, r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	3338      	adds	r3, #56	; 0x38
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	4413      	add	r3, r2
 800605e:	3304      	adds	r3, #4
 8006060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	705a      	strb	r2, [r3, #1]
 8006068:	e00f      	b.n	800608a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800606a:	78fb      	ldrb	r3, [r7, #3]
 800606c:	f003 020f 	and.w	r2, r3, #15
 8006070:	4613      	mov	r3, r2
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	1a9b      	subs	r3, r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	4413      	add	r3, r2
 8006080:	3304      	adds	r3, #4
 8006082:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800608a:	78fb      	ldrb	r3, [r7, #3]
 800608c:	f003 030f 	and.w	r3, r3, #15
 8006090:	b2da      	uxtb	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006096:	883a      	ldrh	r2, [r7, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	78ba      	ldrb	r2, [r7, #2]
 80060a0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	785b      	ldrb	r3, [r3, #1]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d004      	beq.n	80060b4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80060b4:	78bb      	ldrb	r3, [r7, #2]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d102      	bne.n	80060c0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d101      	bne.n	80060ce <HAL_PCD_EP_Open+0xaa>
 80060ca:	2302      	movs	r3, #2
 80060cc:	e00e      	b.n	80060ec <HAL_PCD_EP_Open+0xc8>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68f9      	ldr	r1, [r7, #12]
 80060dc:	4618      	mov	r0, r3
 80060de:	f003 f8a3 	bl	8009228 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80060ea:	7afb      	ldrb	r3, [r7, #11]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	460b      	mov	r3, r1
 80060fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006104:	2b00      	cmp	r3, #0
 8006106:	da0f      	bge.n	8006128 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006108:	78fb      	ldrb	r3, [r7, #3]
 800610a:	f003 020f 	and.w	r2, r3, #15
 800610e:	4613      	mov	r3, r2
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	1a9b      	subs	r3, r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	3338      	adds	r3, #56	; 0x38
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	4413      	add	r3, r2
 800611c:	3304      	adds	r3, #4
 800611e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	705a      	strb	r2, [r3, #1]
 8006126:	e00f      	b.n	8006148 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	f003 020f 	and.w	r2, r3, #15
 800612e:	4613      	mov	r3, r2
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	1a9b      	subs	r3, r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	4413      	add	r3, r2
 800613e:	3304      	adds	r3, #4
 8006140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006148:	78fb      	ldrb	r3, [r7, #3]
 800614a:	f003 030f 	and.w	r3, r3, #15
 800614e:	b2da      	uxtb	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800615a:	2b01      	cmp	r3, #1
 800615c:	d101      	bne.n	8006162 <HAL_PCD_EP_Close+0x6e>
 800615e:	2302      	movs	r3, #2
 8006160:	e00e      	b.n	8006180 <HAL_PCD_EP_Close+0x8c>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68f9      	ldr	r1, [r7, #12]
 8006170:	4618      	mov	r0, r3
 8006172:	f003 f8e1 	bl	8009338 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	607a      	str	r2, [r7, #4]
 8006192:	603b      	str	r3, [r7, #0]
 8006194:	460b      	mov	r3, r1
 8006196:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006198:	7afb      	ldrb	r3, [r7, #11]
 800619a:	f003 020f 	and.w	r2, r3, #15
 800619e:	4613      	mov	r3, r2
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	1a9b      	subs	r3, r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	4413      	add	r3, r2
 80061ae:	3304      	adds	r3, #4
 80061b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2200      	movs	r2, #0
 80061c2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2200      	movs	r2, #0
 80061c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061ca:	7afb      	ldrb	r3, [r7, #11]
 80061cc:	f003 030f 	and.w	r3, r3, #15
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d102      	bne.n	80061e4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80061e4:	7afb      	ldrb	r3, [r7, #11]
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d109      	bne.n	8006202 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6818      	ldr	r0, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	461a      	mov	r2, r3
 80061fa:	6979      	ldr	r1, [r7, #20]
 80061fc:	f003 fbbc 	bl	8009978 <USB_EP0StartXfer>
 8006200:	e008      	b.n	8006214 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6818      	ldr	r0, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	b2db      	uxtb	r3, r3
 800620c:	461a      	mov	r2, r3
 800620e:	6979      	ldr	r1, [r7, #20]
 8006210:	f003 f96e 	bl	80094f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3718      	adds	r7, #24
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	460b      	mov	r3, r1
 8006228:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800622a:	78fb      	ldrb	r3, [r7, #3]
 800622c:	f003 020f 	and.w	r2, r3, #15
 8006230:	6879      	ldr	r1, [r7, #4]
 8006232:	4613      	mov	r3, r2
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	1a9b      	subs	r3, r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	440b      	add	r3, r1
 800623c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006240:	681b      	ldr	r3, [r3, #0]
}
 8006242:	4618      	mov	r0, r3
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b086      	sub	sp, #24
 8006252:	af00      	add	r7, sp, #0
 8006254:	60f8      	str	r0, [r7, #12]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
 800625a:	460b      	mov	r3, r1
 800625c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800625e:	7afb      	ldrb	r3, [r7, #11]
 8006260:	f003 020f 	and.w	r2, r3, #15
 8006264:	4613      	mov	r3, r2
 8006266:	00db      	lsls	r3, r3, #3
 8006268:	1a9b      	subs	r3, r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	3338      	adds	r3, #56	; 0x38
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4413      	add	r3, r2
 8006272:	3304      	adds	r3, #4
 8006274:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2200      	movs	r2, #0
 8006286:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2201      	movs	r2, #1
 800628c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800628e:	7afb      	ldrb	r3, [r7, #11]
 8006290:	f003 030f 	and.w	r3, r3, #15
 8006294:	b2da      	uxtb	r2, r3
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d102      	bne.n	80062a8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80062a8:	7afb      	ldrb	r3, [r7, #11]
 80062aa:	f003 030f 	and.w	r3, r3, #15
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d109      	bne.n	80062c6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6818      	ldr	r0, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	461a      	mov	r2, r3
 80062be:	6979      	ldr	r1, [r7, #20]
 80062c0:	f003 fb5a 	bl	8009978 <USB_EP0StartXfer>
 80062c4:	e008      	b.n	80062d8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	461a      	mov	r2, r3
 80062d2:	6979      	ldr	r1, [r7, #20]
 80062d4:	f003 f90c 	bl	80094f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3718      	adds	r7, #24
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	460b      	mov	r3, r1
 80062ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80062ee:	78fb      	ldrb	r3, [r7, #3]
 80062f0:	f003 020f 	and.w	r2, r3, #15
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d901      	bls.n	8006300 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e050      	b.n	80063a2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006304:	2b00      	cmp	r3, #0
 8006306:	da0f      	bge.n	8006328 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006308:	78fb      	ldrb	r3, [r7, #3]
 800630a:	f003 020f 	and.w	r2, r3, #15
 800630e:	4613      	mov	r3, r2
 8006310:	00db      	lsls	r3, r3, #3
 8006312:	1a9b      	subs	r3, r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	3338      	adds	r3, #56	; 0x38
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	4413      	add	r3, r2
 800631c:	3304      	adds	r3, #4
 800631e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	705a      	strb	r2, [r3, #1]
 8006326:	e00d      	b.n	8006344 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006328:	78fa      	ldrb	r2, [r7, #3]
 800632a:	4613      	mov	r3, r2
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	1a9b      	subs	r3, r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	4413      	add	r3, r2
 800633a:	3304      	adds	r3, #4
 800633c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800634a:	78fb      	ldrb	r3, [r7, #3]
 800634c:	f003 030f 	and.w	r3, r3, #15
 8006350:	b2da      	uxtb	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800635c:	2b01      	cmp	r3, #1
 800635e:	d101      	bne.n	8006364 <HAL_PCD_EP_SetStall+0x82>
 8006360:	2302      	movs	r3, #2
 8006362:	e01e      	b.n	80063a2 <HAL_PCD_EP_SetStall+0xc0>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68f9      	ldr	r1, [r7, #12]
 8006372:	4618      	mov	r0, r3
 8006374:	f003 fcb1 	bl	8009cda <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	f003 030f 	and.w	r3, r3, #15
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10a      	bne.n	8006398 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6818      	ldr	r0, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	b2d9      	uxtb	r1, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006392:	461a      	mov	r2, r3
 8006394:	f003 fe90 	bl	800a0b8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b084      	sub	sp, #16
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	460b      	mov	r3, r1
 80063b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80063b6:	78fb      	ldrb	r3, [r7, #3]
 80063b8:	f003 020f 	and.w	r2, r3, #15
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d901      	bls.n	80063c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e042      	b.n	800644e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80063c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	da0f      	bge.n	80063f0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	f003 020f 	and.w	r2, r3, #15
 80063d6:	4613      	mov	r3, r2
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	1a9b      	subs	r3, r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	3338      	adds	r3, #56	; 0x38
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	4413      	add	r3, r2
 80063e4:	3304      	adds	r3, #4
 80063e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2201      	movs	r2, #1
 80063ec:	705a      	strb	r2, [r3, #1]
 80063ee:	e00f      	b.n	8006410 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063f0:	78fb      	ldrb	r3, [r7, #3]
 80063f2:	f003 020f 	and.w	r2, r3, #15
 80063f6:	4613      	mov	r3, r2
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	1a9b      	subs	r3, r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	4413      	add	r3, r2
 8006406:	3304      	adds	r3, #4
 8006408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006416:	78fb      	ldrb	r3, [r7, #3]
 8006418:	f003 030f 	and.w	r3, r3, #15
 800641c:	b2da      	uxtb	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006428:	2b01      	cmp	r3, #1
 800642a:	d101      	bne.n	8006430 <HAL_PCD_EP_ClrStall+0x86>
 800642c:	2302      	movs	r3, #2
 800642e:	e00e      	b.n	800644e <HAL_PCD_EP_ClrStall+0xa4>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68f9      	ldr	r1, [r7, #12]
 800643e:	4618      	mov	r0, r3
 8006440:	f003 fcb9 	bl	8009db6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b08a      	sub	sp, #40	; 0x28
 800645a:	af02      	add	r7, sp, #8
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	4613      	mov	r3, r2
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	1a9b      	subs	r3, r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	3338      	adds	r3, #56	; 0x38
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	4413      	add	r3, r2
 800647a:	3304      	adds	r3, #4
 800647c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	699a      	ldr	r2, [r3, #24]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	429a      	cmp	r2, r3
 8006488:	d901      	bls.n	800648e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e06c      	b.n	8006568 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	695a      	ldr	r2, [r3, #20]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	69fa      	ldr	r2, [r7, #28]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d902      	bls.n	80064aa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	3303      	adds	r3, #3
 80064ae:	089b      	lsrs	r3, r3, #2
 80064b0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064b2:	e02b      	b.n	800650c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	695a      	ldr	r2, [r3, #20]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	69fa      	ldr	r2, [r7, #28]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d902      	bls.n	80064d0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	3303      	adds	r3, #3
 80064d4:	089b      	lsrs	r3, r3, #2
 80064d6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	68d9      	ldr	r1, [r3, #12]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	4603      	mov	r3, r0
 80064ee:	6978      	ldr	r0, [r7, #20]
 80064f0:	f003 fb95 	bl	8009c1e <USB_WritePacket>

    ep->xfer_buff  += len;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	68da      	ldr	r2, [r3, #12]
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	441a      	add	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	699a      	ldr	r2, [r3, #24]
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	441a      	add	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	b29b      	uxth	r3, r3
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	429a      	cmp	r2, r3
 8006520:	d809      	bhi.n	8006536 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	699a      	ldr	r2, [r3, #24]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800652a:	429a      	cmp	r2, r3
 800652c:	d203      	bcs.n	8006536 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1be      	bne.n	80064b4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	695a      	ldr	r2, [r3, #20]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	429a      	cmp	r2, r3
 8006540:	d811      	bhi.n	8006566 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	f003 030f 	and.w	r3, r3, #15
 8006548:	2201      	movs	r2, #1
 800654a:	fa02 f303 	lsl.w	r3, r2, r3
 800654e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	43db      	mvns	r3, r3
 800655c:	6939      	ldr	r1, [r7, #16]
 800655e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006562:	4013      	ands	r3, r2
 8006564:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3720      	adds	r7, #32
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	333c      	adds	r3, #60	; 0x3c
 8006588:	3304      	adds	r3, #4
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	f040 80a0 	bne.w	80066e8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f003 0308 	and.w	r3, r3, #8
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d015      	beq.n	80065de <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4a72      	ldr	r2, [pc, #456]	; (8006780 <PCD_EP_OutXfrComplete_int+0x210>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	f240 80dd 	bls.w	8006776 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 80d7 	beq.w	8006776 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d4:	461a      	mov	r2, r3
 80065d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065da:	6093      	str	r3, [r2, #8]
 80065dc:	e0cb      	b.n	8006776 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f003 0320 	and.w	r3, r3, #32
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d009      	beq.n	80065fc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f4:	461a      	mov	r2, r3
 80065f6:	2320      	movs	r3, #32
 80065f8:	6093      	str	r3, [r2, #8]
 80065fa:	e0bc      	b.n	8006776 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006602:	2b00      	cmp	r3, #0
 8006604:	f040 80b7 	bne.w	8006776 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4a5d      	ldr	r2, [pc, #372]	; (8006780 <PCD_EP_OutXfrComplete_int+0x210>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d90f      	bls.n	8006630 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006626:	461a      	mov	r2, r3
 8006628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800662c:	6093      	str	r3, [r2, #8]
 800662e:	e0a2      	b.n	8006776 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006630:	6879      	ldr	r1, [r7, #4]
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	4613      	mov	r3, r2
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	1a9b      	subs	r3, r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	440b      	add	r3, r1
 800663e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006642:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	0159      	lsls	r1, r3, #5
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	440b      	add	r3, r1
 800664c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006656:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	4613      	mov	r3, r2
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	1a9b      	subs	r3, r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4403      	add	r3, r0
 8006666:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800666a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800666c:	6879      	ldr	r1, [r7, #4]
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	4613      	mov	r3, r2
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	1a9b      	subs	r3, r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	440b      	add	r3, r1
 800667a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800667e:	6819      	ldr	r1, [r3, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	4613      	mov	r3, r2
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	1a9b      	subs	r3, r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4403      	add	r3, r0
 800668e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4419      	add	r1, r3
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	4613      	mov	r3, r2
 800669c:	00db      	lsls	r3, r3, #3
 800669e:	1a9b      	subs	r3, r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4403      	add	r3, r0
 80066a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80066a8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d114      	bne.n	80066da <PCD_EP_OutXfrComplete_int+0x16a>
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	4613      	mov	r3, r2
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	1a9b      	subs	r3, r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	440b      	add	r3, r1
 80066be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d108      	bne.n	80066da <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6818      	ldr	r0, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80066d2:	461a      	mov	r2, r3
 80066d4:	2101      	movs	r1, #1
 80066d6:	f003 fcef 	bl	800a0b8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f005 fd2d 	bl	800c140 <HAL_PCD_DataOutStageCallback>
 80066e6:	e046      	b.n	8006776 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4a26      	ldr	r2, [pc, #152]	; (8006784 <PCD_EP_OutXfrComplete_int+0x214>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d124      	bne.n	800673a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006706:	461a      	mov	r2, r3
 8006708:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800670c:	6093      	str	r3, [r2, #8]
 800670e:	e032      	b.n	8006776 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	f003 0320 	and.w	r3, r3, #32
 8006716:	2b00      	cmp	r3, #0
 8006718:	d008      	beq.n	800672c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	4413      	add	r3, r2
 8006722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006726:	461a      	mov	r2, r3
 8006728:	2320      	movs	r3, #32
 800672a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	b2db      	uxtb	r3, r3
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f005 fd04 	bl	800c140 <HAL_PCD_DataOutStageCallback>
 8006738:	e01d      	b.n	8006776 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d114      	bne.n	800676a <PCD_EP_OutXfrComplete_int+0x1fa>
 8006740:	6879      	ldr	r1, [r7, #4]
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	4613      	mov	r3, r2
 8006746:	00db      	lsls	r3, r3, #3
 8006748:	1a9b      	subs	r3, r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	440b      	add	r3, r1
 800674e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d108      	bne.n	800676a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006762:	461a      	mov	r2, r3
 8006764:	2100      	movs	r1, #0
 8006766:	f003 fca7 	bl	800a0b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	b2db      	uxtb	r3, r3
 800676e:	4619      	mov	r1, r3
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f005 fce5 	bl	800c140 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	4f54300a 	.word	0x4f54300a
 8006784:	4f54310a 	.word	0x4f54310a

08006788 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	333c      	adds	r3, #60	; 0x3c
 80067a0:	3304      	adds	r3, #4
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4a15      	ldr	r2, [pc, #84]	; (8006810 <PCD_EP_OutSetupPacket_int+0x88>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d90e      	bls.n	80067dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d009      	beq.n	80067dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d4:	461a      	mov	r2, r3
 80067d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f005 fc9d 	bl	800c11c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4a0a      	ldr	r2, [pc, #40]	; (8006810 <PCD_EP_OutSetupPacket_int+0x88>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d90c      	bls.n	8006804 <PCD_EP_OutSetupPacket_int+0x7c>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d108      	bne.n	8006804 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6818      	ldr	r0, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80067fc:	461a      	mov	r2, r3
 80067fe:	2101      	movs	r1, #1
 8006800:	f003 fc5a 	bl	800a0b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	4f54300a 	.word	0x4f54300a

08006814 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
 8006820:	4613      	mov	r3, r2
 8006822:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d107      	bne.n	8006842 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006832:	883b      	ldrh	r3, [r7, #0]
 8006834:	0419      	lsls	r1, r3, #16
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	430a      	orrs	r2, r1
 800683e:	629a      	str	r2, [r3, #40]	; 0x28
 8006840:	e028      	b.n	8006894 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006848:	0c1b      	lsrs	r3, r3, #16
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	4413      	add	r3, r2
 800684e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006850:	2300      	movs	r3, #0
 8006852:	73fb      	strb	r3, [r7, #15]
 8006854:	e00d      	b.n	8006872 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	7bfb      	ldrb	r3, [r7, #15]
 800685c:	3340      	adds	r3, #64	; 0x40
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	0c1b      	lsrs	r3, r3, #16
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	4413      	add	r3, r2
 800686a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	3301      	adds	r3, #1
 8006870:	73fb      	strb	r3, [r7, #15]
 8006872:	7bfa      	ldrb	r2, [r7, #15]
 8006874:	78fb      	ldrb	r3, [r7, #3]
 8006876:	3b01      	subs	r3, #1
 8006878:	429a      	cmp	r2, r3
 800687a:	d3ec      	bcc.n	8006856 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800687c:	883b      	ldrh	r3, [r7, #0]
 800687e:	0418      	lsls	r0, r3, #16
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6819      	ldr	r1, [r3, #0]
 8006884:	78fb      	ldrb	r3, [r7, #3]
 8006886:	3b01      	subs	r3, #1
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	4302      	orrs	r2, r0
 800688c:	3340      	adds	r3, #64	; 0x40
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	440b      	add	r3, r1
 8006892:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b083      	sub	sp, #12
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	460b      	mov	r3, r1
 80068ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	887a      	ldrh	r2, [r7, #2]
 80068b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	460b      	mov	r3, r1
 80068ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e25b      	b.n	8006da6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d075      	beq.n	80069e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068fa:	4ba3      	ldr	r3, [pc, #652]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 030c 	and.w	r3, r3, #12
 8006902:	2b04      	cmp	r3, #4
 8006904:	d00c      	beq.n	8006920 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006906:	4ba0      	ldr	r3, [pc, #640]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800690e:	2b08      	cmp	r3, #8
 8006910:	d112      	bne.n	8006938 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006912:	4b9d      	ldr	r3, [pc, #628]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800691a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800691e:	d10b      	bne.n	8006938 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006920:	4b99      	ldr	r3, [pc, #612]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d05b      	beq.n	80069e4 <HAL_RCC_OscConfig+0x108>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d157      	bne.n	80069e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e236      	b.n	8006da6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006940:	d106      	bne.n	8006950 <HAL_RCC_OscConfig+0x74>
 8006942:	4b91      	ldr	r3, [pc, #580]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a90      	ldr	r2, [pc, #576]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	e01d      	b.n	800698c <HAL_RCC_OscConfig+0xb0>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006958:	d10c      	bne.n	8006974 <HAL_RCC_OscConfig+0x98>
 800695a:	4b8b      	ldr	r3, [pc, #556]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a8a      	ldr	r2, [pc, #552]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006964:	6013      	str	r3, [r2, #0]
 8006966:	4b88      	ldr	r3, [pc, #544]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a87      	ldr	r2, [pc, #540]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 800696c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	e00b      	b.n	800698c <HAL_RCC_OscConfig+0xb0>
 8006974:	4b84      	ldr	r3, [pc, #528]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a83      	ldr	r2, [pc, #524]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 800697a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	4b81      	ldr	r3, [pc, #516]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a80      	ldr	r2, [pc, #512]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800698a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d013      	beq.n	80069bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006994:	f7fb feb4 	bl	8002700 <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800699a:	e008      	b.n	80069ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800699c:	f7fb feb0 	bl	8002700 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b64      	cmp	r3, #100	; 0x64
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e1fb      	b.n	8006da6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ae:	4b76      	ldr	r3, [pc, #472]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0f0      	beq.n	800699c <HAL_RCC_OscConfig+0xc0>
 80069ba:	e014      	b.n	80069e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069bc:	f7fb fea0 	bl	8002700 <HAL_GetTick>
 80069c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069c2:	e008      	b.n	80069d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069c4:	f7fb fe9c 	bl	8002700 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b64      	cmp	r3, #100	; 0x64
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e1e7      	b.n	8006da6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069d6:	4b6c      	ldr	r3, [pc, #432]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1f0      	bne.n	80069c4 <HAL_RCC_OscConfig+0xe8>
 80069e2:	e000      	b.n	80069e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d063      	beq.n	8006aba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069f2:	4b65      	ldr	r3, [pc, #404]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 030c 	and.w	r3, r3, #12
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00b      	beq.n	8006a16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069fe:	4b62      	ldr	r3, [pc, #392]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a06:	2b08      	cmp	r3, #8
 8006a08:	d11c      	bne.n	8006a44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a0a:	4b5f      	ldr	r3, [pc, #380]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d116      	bne.n	8006a44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a16:	4b5c      	ldr	r3, [pc, #368]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d005      	beq.n	8006a2e <HAL_RCC_OscConfig+0x152>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d001      	beq.n	8006a2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e1bb      	b.n	8006da6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a2e:	4b56      	ldr	r3, [pc, #344]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	4952      	ldr	r1, [pc, #328]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a42:	e03a      	b.n	8006aba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d020      	beq.n	8006a8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a4c:	4b4f      	ldr	r3, [pc, #316]	; (8006b8c <HAL_RCC_OscConfig+0x2b0>)
 8006a4e:	2201      	movs	r2, #1
 8006a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a52:	f7fb fe55 	bl	8002700 <HAL_GetTick>
 8006a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a58:	e008      	b.n	8006a6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a5a:	f7fb fe51 	bl	8002700 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d901      	bls.n	8006a6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e19c      	b.n	8006da6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a6c:	4b46      	ldr	r3, [pc, #280]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d0f0      	beq.n	8006a5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a78:	4b43      	ldr	r3, [pc, #268]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	4940      	ldr	r1, [pc, #256]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	600b      	str	r3, [r1, #0]
 8006a8c:	e015      	b.n	8006aba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a8e:	4b3f      	ldr	r3, [pc, #252]	; (8006b8c <HAL_RCC_OscConfig+0x2b0>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a94:	f7fb fe34 	bl	8002700 <HAL_GetTick>
 8006a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a9a:	e008      	b.n	8006aae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a9c:	f7fb fe30 	bl	8002700 <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e17b      	b.n	8006da6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aae:	4b36      	ldr	r3, [pc, #216]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1f0      	bne.n	8006a9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0308 	and.w	r3, r3, #8
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d030      	beq.n	8006b28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d016      	beq.n	8006afc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ace:	4b30      	ldr	r3, [pc, #192]	; (8006b90 <HAL_RCC_OscConfig+0x2b4>)
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad4:	f7fb fe14 	bl	8002700 <HAL_GetTick>
 8006ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ada:	e008      	b.n	8006aee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006adc:	f7fb fe10 	bl	8002700 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e15b      	b.n	8006da6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aee:	4b26      	ldr	r3, [pc, #152]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d0f0      	beq.n	8006adc <HAL_RCC_OscConfig+0x200>
 8006afa:	e015      	b.n	8006b28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006afc:	4b24      	ldr	r3, [pc, #144]	; (8006b90 <HAL_RCC_OscConfig+0x2b4>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b02:	f7fb fdfd 	bl	8002700 <HAL_GetTick>
 8006b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b08:	e008      	b.n	8006b1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b0a:	f7fb fdf9 	bl	8002700 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d901      	bls.n	8006b1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e144      	b.n	8006da6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b1c:	4b1a      	ldr	r3, [pc, #104]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1f0      	bne.n	8006b0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 80a0 	beq.w	8006c76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b36:	2300      	movs	r3, #0
 8006b38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b3a:	4b13      	ldr	r3, [pc, #76]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10f      	bne.n	8006b66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b46:	2300      	movs	r3, #0
 8006b48:	60bb      	str	r3, [r7, #8]
 8006b4a:	4b0f      	ldr	r3, [pc, #60]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	4a0e      	ldr	r2, [pc, #56]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b54:	6413      	str	r3, [r2, #64]	; 0x40
 8006b56:	4b0c      	ldr	r3, [pc, #48]	; (8006b88 <HAL_RCC_OscConfig+0x2ac>)
 8006b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b5e:	60bb      	str	r3, [r7, #8]
 8006b60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b62:	2301      	movs	r3, #1
 8006b64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b66:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <HAL_RCC_OscConfig+0x2b8>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d121      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b72:	4b08      	ldr	r3, [pc, #32]	; (8006b94 <HAL_RCC_OscConfig+0x2b8>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a07      	ldr	r2, [pc, #28]	; (8006b94 <HAL_RCC_OscConfig+0x2b8>)
 8006b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b7e:	f7fb fdbf 	bl	8002700 <HAL_GetTick>
 8006b82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b84:	e011      	b.n	8006baa <HAL_RCC_OscConfig+0x2ce>
 8006b86:	bf00      	nop
 8006b88:	40023800 	.word	0x40023800
 8006b8c:	42470000 	.word	0x42470000
 8006b90:	42470e80 	.word	0x42470e80
 8006b94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b98:	f7fb fdb2 	bl	8002700 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e0fd      	b.n	8006da6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006baa:	4b81      	ldr	r3, [pc, #516]	; (8006db0 <HAL_RCC_OscConfig+0x4d4>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0f0      	beq.n	8006b98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d106      	bne.n	8006bcc <HAL_RCC_OscConfig+0x2f0>
 8006bbe:	4b7d      	ldr	r3, [pc, #500]	; (8006db4 <HAL_RCC_OscConfig+0x4d8>)
 8006bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc2:	4a7c      	ldr	r2, [pc, #496]	; (8006db4 <HAL_RCC_OscConfig+0x4d8>)
 8006bc4:	f043 0301 	orr.w	r3, r3, #1
 8006bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8006bca:	e01c      	b.n	8006c06 <HAL_RCC_OscConfig+0x32a>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	2b05      	cmp	r3, #5
 8006bd2:	d10c      	bne.n	8006bee <HAL_RCC_OscConfig+0x312>
 8006bd4:	4b77      	ldr	r3, [pc, #476]	; (8006db4 <HAL_RCC_OscConfig+0x4d8>)
 8006bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd8:	4a76      	ldr	r2, [pc, #472]	; (8006db4 <HAL_RCC_OscConfig+0x4d8>)
 8006bda:	f043 0304 	orr.w	r3, r3, #4
 8006bde:	6713      	str	r3, [r2, #112]	; 0x70
 8006be0:	4b74      	ldr	r3, [pc, #464]	; (8006db4 <HAL_RCC_OscConfig+0x4d8>)
 8006be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be4:	4a73      	ldr	r2, [pc, #460]	; (8006db4 <HAL_RCC_OscConfig+0x4d8>)
 8006be6:	f043 0301 	orr.w	r3, r3, #1
 8006bea:	6713      	str	r3, [r2, #112]	; 0x70
 8006bec:	e00b      	b.n	8006c06 <HAL_RCC_OscConfig+0x32a>
 8006bee:	4b71      	ldr	r3, [pc, #452]	; (8006db4 <HAL_RCC_OscConfig+0x4d8>)
 8006bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf2:	4a70      	ldr	r2, [pc, #448]	; (8006db4 <HAL_RCC_OscConfig+0x4d8>)
 8006bf4:	f023 0301 	bic.w	r3, r3, #1
 8006bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8006bfa:	4b6e      	ldr	r3, [pc, #440]	; (8006db4 <HAL_RCC_OscConfig+0x4d8>)
 8006bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfe:	4a6d      	ldr	r2, [pc, #436]	; (8006db4 <HAL_RCC_OscConfig+0x4d8>)
 8006c00:	f023 0304 	bic.w	r3, r3, #4
 8006c04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d015      	beq.n	8006c3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c0e:	f7fb fd77 	bl	8002700 <HAL_GetTick>
 8006c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c14:	e00a      	b.n	8006c2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c16:	f7fb fd73 	bl	8002700 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e0bc      	b.n	8006da6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c2c:	4b61      	ldr	r3, [pc, #388]	; (8006db4 <HAL_RCC_OscConfig+0x4d8>)
 8006c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0ee      	beq.n	8006c16 <HAL_RCC_OscConfig+0x33a>
 8006c38:	e014      	b.n	8006c64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c3a:	f7fb fd61 	bl	8002700 <HAL_GetTick>
 8006c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c40:	e00a      	b.n	8006c58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c42:	f7fb fd5d 	bl	8002700 <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d901      	bls.n	8006c58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e0a6      	b.n	8006da6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c58:	4b56      	ldr	r3, [pc, #344]	; (8006db4 <HAL_RCC_OscConfig+0x4d8>)
 8006c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1ee      	bne.n	8006c42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d105      	bne.n	8006c76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c6a:	4b52      	ldr	r3, [pc, #328]	; (8006db4 <HAL_RCC_OscConfig+0x4d8>)
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	4a51      	ldr	r2, [pc, #324]	; (8006db4 <HAL_RCC_OscConfig+0x4d8>)
 8006c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f000 8092 	beq.w	8006da4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c80:	4b4c      	ldr	r3, [pc, #304]	; (8006db4 <HAL_RCC_OscConfig+0x4d8>)
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f003 030c 	and.w	r3, r3, #12
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d05c      	beq.n	8006d46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d141      	bne.n	8006d18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c94:	4b48      	ldr	r3, [pc, #288]	; (8006db8 <HAL_RCC_OscConfig+0x4dc>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c9a:	f7fb fd31 	bl	8002700 <HAL_GetTick>
 8006c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ca0:	e008      	b.n	8006cb4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ca2:	f7fb fd2d 	bl	8002700 <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d901      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e078      	b.n	8006da6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cb4:	4b3f      	ldr	r3, [pc, #252]	; (8006db4 <HAL_RCC_OscConfig+0x4d8>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1f0      	bne.n	8006ca2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	69da      	ldr	r2, [r3, #28]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	019b      	lsls	r3, r3, #6
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd6:	085b      	lsrs	r3, r3, #1
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	041b      	lsls	r3, r3, #16
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce2:	061b      	lsls	r3, r3, #24
 8006ce4:	4933      	ldr	r1, [pc, #204]	; (8006db4 <HAL_RCC_OscConfig+0x4d8>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cea:	4b33      	ldr	r3, [pc, #204]	; (8006db8 <HAL_RCC_OscConfig+0x4dc>)
 8006cec:	2201      	movs	r2, #1
 8006cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf0:	f7fb fd06 	bl	8002700 <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cf8:	f7fb fd02 	bl	8002700 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e04d      	b.n	8006da6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d0a:	4b2a      	ldr	r3, [pc, #168]	; (8006db4 <HAL_RCC_OscConfig+0x4d8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0f0      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x41c>
 8006d16:	e045      	b.n	8006da4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d18:	4b27      	ldr	r3, [pc, #156]	; (8006db8 <HAL_RCC_OscConfig+0x4dc>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d1e:	f7fb fcef 	bl	8002700 <HAL_GetTick>
 8006d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d24:	e008      	b.n	8006d38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d26:	f7fb fceb 	bl	8002700 <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d901      	bls.n	8006d38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e036      	b.n	8006da6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d38:	4b1e      	ldr	r3, [pc, #120]	; (8006db4 <HAL_RCC_OscConfig+0x4d8>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1f0      	bne.n	8006d26 <HAL_RCC_OscConfig+0x44a>
 8006d44:	e02e      	b.n	8006da4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d101      	bne.n	8006d52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e029      	b.n	8006da6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d52:	4b18      	ldr	r3, [pc, #96]	; (8006db4 <HAL_RCC_OscConfig+0x4d8>)
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d11c      	bne.n	8006da0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d115      	bne.n	8006da0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d10d      	bne.n	8006da0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d106      	bne.n	8006da0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d001      	beq.n	8006da4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e000      	b.n	8006da6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	40007000 	.word	0x40007000
 8006db4:	40023800 	.word	0x40023800
 8006db8:	42470060 	.word	0x42470060

08006dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e0cc      	b.n	8006f6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006dd0:	4b68      	ldr	r3, [pc, #416]	; (8006f74 <HAL_RCC_ClockConfig+0x1b8>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 030f 	and.w	r3, r3, #15
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d90c      	bls.n	8006df8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dde:	4b65      	ldr	r3, [pc, #404]	; (8006f74 <HAL_RCC_ClockConfig+0x1b8>)
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	b2d2      	uxtb	r2, r2
 8006de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006de6:	4b63      	ldr	r3, [pc, #396]	; (8006f74 <HAL_RCC_ClockConfig+0x1b8>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 030f 	and.w	r3, r3, #15
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d001      	beq.n	8006df8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e0b8      	b.n	8006f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d020      	beq.n	8006e46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d005      	beq.n	8006e1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e10:	4b59      	ldr	r3, [pc, #356]	; (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	4a58      	ldr	r2, [pc, #352]	; (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006e16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0308 	and.w	r3, r3, #8
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e28:	4b53      	ldr	r3, [pc, #332]	; (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	4a52      	ldr	r2, [pc, #328]	; (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006e2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e34:	4b50      	ldr	r3, [pc, #320]	; (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	494d      	ldr	r1, [pc, #308]	; (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d044      	beq.n	8006edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d107      	bne.n	8006e6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e5a:	4b47      	ldr	r3, [pc, #284]	; (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d119      	bne.n	8006e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e07f      	b.n	8006f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d003      	beq.n	8006e7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d107      	bne.n	8006e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e7a:	4b3f      	ldr	r3, [pc, #252]	; (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d109      	bne.n	8006e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e06f      	b.n	8006f6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e8a:	4b3b      	ldr	r3, [pc, #236]	; (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e067      	b.n	8006f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e9a:	4b37      	ldr	r3, [pc, #220]	; (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f023 0203 	bic.w	r2, r3, #3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	4934      	ldr	r1, [pc, #208]	; (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006eac:	f7fb fc28 	bl	8002700 <HAL_GetTick>
 8006eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eb2:	e00a      	b.n	8006eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eb4:	f7fb fc24 	bl	8002700 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e04f      	b.n	8006f6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eca:	4b2b      	ldr	r3, [pc, #172]	; (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f003 020c 	and.w	r2, r3, #12
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d1eb      	bne.n	8006eb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006edc:	4b25      	ldr	r3, [pc, #148]	; (8006f74 <HAL_RCC_ClockConfig+0x1b8>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 030f 	and.w	r3, r3, #15
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d20c      	bcs.n	8006f04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eea:	4b22      	ldr	r3, [pc, #136]	; (8006f74 <HAL_RCC_ClockConfig+0x1b8>)
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ef2:	4b20      	ldr	r3, [pc, #128]	; (8006f74 <HAL_RCC_ClockConfig+0x1b8>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 030f 	and.w	r3, r3, #15
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d001      	beq.n	8006f04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e032      	b.n	8006f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d008      	beq.n	8006f22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f10:	4b19      	ldr	r3, [pc, #100]	; (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	4916      	ldr	r1, [pc, #88]	; (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d009      	beq.n	8006f42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f2e:	4b12      	ldr	r3, [pc, #72]	; (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	00db      	lsls	r3, r3, #3
 8006f3c:	490e      	ldr	r1, [pc, #56]	; (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f42:	f000 f821 	bl	8006f88 <HAL_RCC_GetSysClockFreq>
 8006f46:	4601      	mov	r1, r0
 8006f48:	4b0b      	ldr	r3, [pc, #44]	; (8006f78 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	091b      	lsrs	r3, r3, #4
 8006f4e:	f003 030f 	and.w	r3, r3, #15
 8006f52:	4a0a      	ldr	r2, [pc, #40]	; (8006f7c <HAL_RCC_ClockConfig+0x1c0>)
 8006f54:	5cd3      	ldrb	r3, [r2, r3]
 8006f56:	fa21 f303 	lsr.w	r3, r1, r3
 8006f5a:	4a09      	ldr	r2, [pc, #36]	; (8006f80 <HAL_RCC_ClockConfig+0x1c4>)
 8006f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f5e:	4b09      	ldr	r3, [pc, #36]	; (8006f84 <HAL_RCC_ClockConfig+0x1c8>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fb fb88 	bl	8002678 <HAL_InitTick>

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	40023c00 	.word	0x40023c00
 8006f78:	40023800 	.word	0x40023800
 8006f7c:	08040e08 	.word	0x08040e08
 8006f80:	2000008c 	.word	0x2000008c
 8006f84:	20000090 	.word	0x20000090

08006f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	607b      	str	r3, [r7, #4]
 8006f92:	2300      	movs	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]
 8006f96:	2300      	movs	r3, #0
 8006f98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f9e:	4b63      	ldr	r3, [pc, #396]	; (800712c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f003 030c 	and.w	r3, r3, #12
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d007      	beq.n	8006fba <HAL_RCC_GetSysClockFreq+0x32>
 8006faa:	2b08      	cmp	r3, #8
 8006fac:	d008      	beq.n	8006fc0 <HAL_RCC_GetSysClockFreq+0x38>
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f040 80b4 	bne.w	800711c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fb4:	4b5e      	ldr	r3, [pc, #376]	; (8007130 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006fb6:	60bb      	str	r3, [r7, #8]
       break;
 8006fb8:	e0b3      	b.n	8007122 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fba:	4b5e      	ldr	r3, [pc, #376]	; (8007134 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006fbc:	60bb      	str	r3, [r7, #8]
      break;
 8006fbe:	e0b0      	b.n	8007122 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fc0:	4b5a      	ldr	r3, [pc, #360]	; (800712c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fca:	4b58      	ldr	r3, [pc, #352]	; (800712c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d04a      	beq.n	800706c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fd6:	4b55      	ldr	r3, [pc, #340]	; (800712c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	099b      	lsrs	r3, r3, #6
 8006fdc:	f04f 0400 	mov.w	r4, #0
 8006fe0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006fe4:	f04f 0200 	mov.w	r2, #0
 8006fe8:	ea03 0501 	and.w	r5, r3, r1
 8006fec:	ea04 0602 	and.w	r6, r4, r2
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	4632      	mov	r2, r6
 8006ff4:	f04f 0300 	mov.w	r3, #0
 8006ff8:	f04f 0400 	mov.w	r4, #0
 8006ffc:	0154      	lsls	r4, r2, #5
 8006ffe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007002:	014b      	lsls	r3, r1, #5
 8007004:	4619      	mov	r1, r3
 8007006:	4622      	mov	r2, r4
 8007008:	1b49      	subs	r1, r1, r5
 800700a:	eb62 0206 	sbc.w	r2, r2, r6
 800700e:	f04f 0300 	mov.w	r3, #0
 8007012:	f04f 0400 	mov.w	r4, #0
 8007016:	0194      	lsls	r4, r2, #6
 8007018:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800701c:	018b      	lsls	r3, r1, #6
 800701e:	1a5b      	subs	r3, r3, r1
 8007020:	eb64 0402 	sbc.w	r4, r4, r2
 8007024:	f04f 0100 	mov.w	r1, #0
 8007028:	f04f 0200 	mov.w	r2, #0
 800702c:	00e2      	lsls	r2, r4, #3
 800702e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007032:	00d9      	lsls	r1, r3, #3
 8007034:	460b      	mov	r3, r1
 8007036:	4614      	mov	r4, r2
 8007038:	195b      	adds	r3, r3, r5
 800703a:	eb44 0406 	adc.w	r4, r4, r6
 800703e:	f04f 0100 	mov.w	r1, #0
 8007042:	f04f 0200 	mov.w	r2, #0
 8007046:	0262      	lsls	r2, r4, #9
 8007048:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800704c:	0259      	lsls	r1, r3, #9
 800704e:	460b      	mov	r3, r1
 8007050:	4614      	mov	r4, r2
 8007052:	4618      	mov	r0, r3
 8007054:	4621      	mov	r1, r4
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f04f 0400 	mov.w	r4, #0
 800705c:	461a      	mov	r2, r3
 800705e:	4623      	mov	r3, r4
 8007060:	f7f9 f906 	bl	8000270 <__aeabi_uldivmod>
 8007064:	4603      	mov	r3, r0
 8007066:	460c      	mov	r4, r1
 8007068:	60fb      	str	r3, [r7, #12]
 800706a:	e049      	b.n	8007100 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800706c:	4b2f      	ldr	r3, [pc, #188]	; (800712c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	099b      	lsrs	r3, r3, #6
 8007072:	f04f 0400 	mov.w	r4, #0
 8007076:	f240 11ff 	movw	r1, #511	; 0x1ff
 800707a:	f04f 0200 	mov.w	r2, #0
 800707e:	ea03 0501 	and.w	r5, r3, r1
 8007082:	ea04 0602 	and.w	r6, r4, r2
 8007086:	4629      	mov	r1, r5
 8007088:	4632      	mov	r2, r6
 800708a:	f04f 0300 	mov.w	r3, #0
 800708e:	f04f 0400 	mov.w	r4, #0
 8007092:	0154      	lsls	r4, r2, #5
 8007094:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007098:	014b      	lsls	r3, r1, #5
 800709a:	4619      	mov	r1, r3
 800709c:	4622      	mov	r2, r4
 800709e:	1b49      	subs	r1, r1, r5
 80070a0:	eb62 0206 	sbc.w	r2, r2, r6
 80070a4:	f04f 0300 	mov.w	r3, #0
 80070a8:	f04f 0400 	mov.w	r4, #0
 80070ac:	0194      	lsls	r4, r2, #6
 80070ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80070b2:	018b      	lsls	r3, r1, #6
 80070b4:	1a5b      	subs	r3, r3, r1
 80070b6:	eb64 0402 	sbc.w	r4, r4, r2
 80070ba:	f04f 0100 	mov.w	r1, #0
 80070be:	f04f 0200 	mov.w	r2, #0
 80070c2:	00e2      	lsls	r2, r4, #3
 80070c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80070c8:	00d9      	lsls	r1, r3, #3
 80070ca:	460b      	mov	r3, r1
 80070cc:	4614      	mov	r4, r2
 80070ce:	195b      	adds	r3, r3, r5
 80070d0:	eb44 0406 	adc.w	r4, r4, r6
 80070d4:	f04f 0100 	mov.w	r1, #0
 80070d8:	f04f 0200 	mov.w	r2, #0
 80070dc:	02a2      	lsls	r2, r4, #10
 80070de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80070e2:	0299      	lsls	r1, r3, #10
 80070e4:	460b      	mov	r3, r1
 80070e6:	4614      	mov	r4, r2
 80070e8:	4618      	mov	r0, r3
 80070ea:	4621      	mov	r1, r4
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f04f 0400 	mov.w	r4, #0
 80070f2:	461a      	mov	r2, r3
 80070f4:	4623      	mov	r3, r4
 80070f6:	f7f9 f8bb 	bl	8000270 <__aeabi_uldivmod>
 80070fa:	4603      	mov	r3, r0
 80070fc:	460c      	mov	r4, r1
 80070fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007100:	4b0a      	ldr	r3, [pc, #40]	; (800712c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	0c1b      	lsrs	r3, r3, #16
 8007106:	f003 0303 	and.w	r3, r3, #3
 800710a:	3301      	adds	r3, #1
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	fbb2 f3f3 	udiv	r3, r2, r3
 8007118:	60bb      	str	r3, [r7, #8]
      break;
 800711a:	e002      	b.n	8007122 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800711c:	4b04      	ldr	r3, [pc, #16]	; (8007130 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800711e:	60bb      	str	r3, [r7, #8]
      break;
 8007120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007122:	68bb      	ldr	r3, [r7, #8]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800712c:	40023800 	.word	0x40023800
 8007130:	00f42400 	.word	0x00f42400
 8007134:	007a1200 	.word	0x007a1200

08007138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007138:	b480      	push	{r7}
 800713a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800713c:	4b03      	ldr	r3, [pc, #12]	; (800714c <HAL_RCC_GetHCLKFreq+0x14>)
 800713e:	681b      	ldr	r3, [r3, #0]
}
 8007140:	4618      	mov	r0, r3
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	2000008c 	.word	0x2000008c

08007150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007154:	f7ff fff0 	bl	8007138 <HAL_RCC_GetHCLKFreq>
 8007158:	4601      	mov	r1, r0
 800715a:	4b05      	ldr	r3, [pc, #20]	; (8007170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	0a9b      	lsrs	r3, r3, #10
 8007160:	f003 0307 	and.w	r3, r3, #7
 8007164:	4a03      	ldr	r2, [pc, #12]	; (8007174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007166:	5cd3      	ldrb	r3, [r2, r3]
 8007168:	fa21 f303 	lsr.w	r3, r1, r3
}
 800716c:	4618      	mov	r0, r3
 800716e:	bd80      	pop	{r7, pc}
 8007170:	40023800 	.word	0x40023800
 8007174:	08040e18 	.word	0x08040e18

08007178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800717c:	f7ff ffdc 	bl	8007138 <HAL_RCC_GetHCLKFreq>
 8007180:	4601      	mov	r1, r0
 8007182:	4b05      	ldr	r3, [pc, #20]	; (8007198 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	0b5b      	lsrs	r3, r3, #13
 8007188:	f003 0307 	and.w	r3, r3, #7
 800718c:	4a03      	ldr	r2, [pc, #12]	; (800719c <HAL_RCC_GetPCLK2Freq+0x24>)
 800718e:	5cd3      	ldrb	r3, [r2, r3]
 8007190:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007194:	4618      	mov	r0, r3
 8007196:	bd80      	pop	{r7, pc}
 8007198:	40023800 	.word	0x40023800
 800719c:	08040e18 	.word	0x08040e18

080071a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e056      	b.n	8007260 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d106      	bne.n	80071d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7fa ff2b 	bl	8002028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2202      	movs	r2, #2
 80071d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071e8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	431a      	orrs	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	431a      	orrs	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	431a      	orrs	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	431a      	orrs	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800720e:	431a      	orrs	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	431a      	orrs	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	ea42 0103 	orr.w	r1, r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	0c1b      	lsrs	r3, r3, #16
 8007230:	f003 0104 	and.w	r1, r3, #4
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	430a      	orrs	r2, r1
 800723e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	69da      	ldr	r2, [r3, #28]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800724e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b088      	sub	sp, #32
 800726c:	af02      	add	r7, sp, #8
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	4613      	mov	r3, r2
 8007276:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007278:	2300      	movs	r3, #0
 800727a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007284:	d112      	bne.n	80072ac <HAL_SPI_Receive+0x44>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10e      	bne.n	80072ac <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2204      	movs	r2, #4
 8007292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007296:	88fa      	ldrh	r2, [r7, #6]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	4613      	mov	r3, r2
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	68b9      	ldr	r1, [r7, #8]
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 f8e9 	bl	800747a <HAL_SPI_TransmitReceive>
 80072a8:	4603      	mov	r3, r0
 80072aa:	e0e2      	b.n	8007472 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d101      	bne.n	80072ba <HAL_SPI_Receive+0x52>
 80072b6:	2302      	movs	r3, #2
 80072b8:	e0db      	b.n	8007472 <HAL_SPI_Receive+0x20a>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072c2:	f7fb fa1d 	bl	8002700 <HAL_GetTick>
 80072c6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d002      	beq.n	80072da <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80072d4:	2302      	movs	r3, #2
 80072d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072d8:	e0c2      	b.n	8007460 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <HAL_SPI_Receive+0x7e>
 80072e0:	88fb      	ldrh	r3, [r7, #6]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d102      	bne.n	80072ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072ea:	e0b9      	b.n	8007460 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2204      	movs	r2, #4
 80072f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	88fa      	ldrh	r2, [r7, #6]
 8007304:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	88fa      	ldrh	r2, [r7, #6]
 800730a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007332:	d107      	bne.n	8007344 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007342:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734e:	2b40      	cmp	r3, #64	; 0x40
 8007350:	d007      	beq.n	8007362 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007360:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d162      	bne.n	8007430 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800736a:	e02e      	b.n	80073ca <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b01      	cmp	r3, #1
 8007378:	d115      	bne.n	80073a6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f103 020c 	add.w	r2, r3, #12
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007386:	7812      	ldrb	r2, [r2, #0]
 8007388:	b2d2      	uxtb	r2, r2
 800738a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800739a:	b29b      	uxth	r3, r3
 800739c:	3b01      	subs	r3, #1
 800739e:	b29a      	uxth	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073a4:	e011      	b.n	80073ca <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073a6:	f7fb f9ab 	bl	8002700 <HAL_GetTick>
 80073aa:	4602      	mov	r2, r0
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d803      	bhi.n	80073be <HAL_SPI_Receive+0x156>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073bc:	d102      	bne.n	80073c4 <HAL_SPI_Receive+0x15c>
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d102      	bne.n	80073ca <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80073c8:	e04a      	b.n	8007460 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1cb      	bne.n	800736c <HAL_SPI_Receive+0x104>
 80073d4:	e031      	b.n	800743a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d113      	bne.n	800740c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68da      	ldr	r2, [r3, #12]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ee:	b292      	uxth	r2, r2
 80073f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f6:	1c9a      	adds	r2, r3, #2
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007400:	b29b      	uxth	r3, r3
 8007402:	3b01      	subs	r3, #1
 8007404:	b29a      	uxth	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	87da      	strh	r2, [r3, #62]	; 0x3e
 800740a:	e011      	b.n	8007430 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800740c:	f7fb f978 	bl	8002700 <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	429a      	cmp	r2, r3
 800741a:	d803      	bhi.n	8007424 <HAL_SPI_Receive+0x1bc>
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007422:	d102      	bne.n	800742a <HAL_SPI_Receive+0x1c2>
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d102      	bne.n	8007430 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800742e:	e017      	b.n	8007460 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007434:	b29b      	uxth	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1cd      	bne.n	80073d6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	6839      	ldr	r1, [r7, #0]
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 fb46 	bl	8007ad0 <SPI_EndRxTransaction>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d002      	beq.n	8007450 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2220      	movs	r2, #32
 800744e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	75fb      	strb	r3, [r7, #23]
 800745c:	e000      	b.n	8007460 <HAL_SPI_Receive+0x1f8>
  }

error :
 800745e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007470:	7dfb      	ldrb	r3, [r7, #23]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b08c      	sub	sp, #48	; 0x30
 800747e:	af00      	add	r7, sp, #0
 8007480:	60f8      	str	r0, [r7, #12]
 8007482:	60b9      	str	r1, [r7, #8]
 8007484:	607a      	str	r2, [r7, #4]
 8007486:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007488:	2301      	movs	r3, #1
 800748a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007498:	2b01      	cmp	r3, #1
 800749a:	d101      	bne.n	80074a0 <HAL_SPI_TransmitReceive+0x26>
 800749c:	2302      	movs	r3, #2
 800749e:	e18a      	b.n	80077b6 <HAL_SPI_TransmitReceive+0x33c>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074a8:	f7fb f92a 	bl	8002700 <HAL_GetTick>
 80074ac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80074be:	887b      	ldrh	r3, [r7, #2]
 80074c0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d00f      	beq.n	80074ea <HAL_SPI_TransmitReceive+0x70>
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074d0:	d107      	bne.n	80074e2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d103      	bne.n	80074e2 <HAL_SPI_TransmitReceive+0x68>
 80074da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d003      	beq.n	80074ea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80074e2:	2302      	movs	r3, #2
 80074e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80074e8:	e15b      	b.n	80077a2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d005      	beq.n	80074fc <HAL_SPI_TransmitReceive+0x82>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d002      	beq.n	80074fc <HAL_SPI_TransmitReceive+0x82>
 80074f6:	887b      	ldrh	r3, [r7, #2]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d103      	bne.n	8007504 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007502:	e14e      	b.n	80077a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b04      	cmp	r3, #4
 800750e:	d003      	beq.n	8007518 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2205      	movs	r2, #5
 8007514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	887a      	ldrh	r2, [r7, #2]
 8007528:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	887a      	ldrh	r2, [r7, #2]
 800752e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	887a      	ldrh	r2, [r7, #2]
 800753a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	887a      	ldrh	r2, [r7, #2]
 8007540:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007558:	2b40      	cmp	r3, #64	; 0x40
 800755a:	d007      	beq.n	800756c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800756a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007574:	d178      	bne.n	8007668 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <HAL_SPI_TransmitReceive+0x10a>
 800757e:	8b7b      	ldrh	r3, [r7, #26]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d166      	bne.n	8007652 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007588:	881a      	ldrh	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007594:	1c9a      	adds	r2, r3, #2
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800759e:	b29b      	uxth	r3, r3
 80075a0:	3b01      	subs	r3, #1
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075a8:	e053      	b.n	8007652 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d11b      	bne.n	80075f0 <HAL_SPI_TransmitReceive+0x176>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075bc:	b29b      	uxth	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d016      	beq.n	80075f0 <HAL_SPI_TransmitReceive+0x176>
 80075c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d113      	bne.n	80075f0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075cc:	881a      	ldrh	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d8:	1c9a      	adds	r2, r3, #2
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	3b01      	subs	r3, #1
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075ec:	2300      	movs	r3, #0
 80075ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d119      	bne.n	8007632 <HAL_SPI_TransmitReceive+0x1b8>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d014      	beq.n	8007632 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68da      	ldr	r2, [r3, #12]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007612:	b292      	uxth	r2, r2
 8007614:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761a:	1c9a      	adds	r2, r3, #2
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007624:	b29b      	uxth	r3, r3
 8007626:	3b01      	subs	r3, #1
 8007628:	b29a      	uxth	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800762e:	2301      	movs	r3, #1
 8007630:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007632:	f7fb f865 	bl	8002700 <HAL_GetTick>
 8007636:	4602      	mov	r2, r0
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800763e:	429a      	cmp	r2, r3
 8007640:	d807      	bhi.n	8007652 <HAL_SPI_TransmitReceive+0x1d8>
 8007642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007648:	d003      	beq.n	8007652 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007650:	e0a7      	b.n	80077a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007656:	b29b      	uxth	r3, r3
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1a6      	bne.n	80075aa <HAL_SPI_TransmitReceive+0x130>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007660:	b29b      	uxth	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1a1      	bne.n	80075aa <HAL_SPI_TransmitReceive+0x130>
 8007666:	e07c      	b.n	8007762 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d002      	beq.n	8007676 <HAL_SPI_TransmitReceive+0x1fc>
 8007670:	8b7b      	ldrh	r3, [r7, #26]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d16b      	bne.n	800774e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	330c      	adds	r3, #12
 8007680:	7812      	ldrb	r2, [r2, #0]
 8007682:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007692:	b29b      	uxth	r3, r3
 8007694:	3b01      	subs	r3, #1
 8007696:	b29a      	uxth	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800769c:	e057      	b.n	800774e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f003 0302 	and.w	r3, r3, #2
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d11c      	bne.n	80076e6 <HAL_SPI_TransmitReceive+0x26c>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d017      	beq.n	80076e6 <HAL_SPI_TransmitReceive+0x26c>
 80076b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d114      	bne.n	80076e6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	330c      	adds	r3, #12
 80076c6:	7812      	ldrb	r2, [r2, #0]
 80076c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ce:	1c5a      	adds	r2, r3, #1
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076d8:	b29b      	uxth	r3, r3
 80076da:	3b01      	subs	r3, #1
 80076dc:	b29a      	uxth	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d119      	bne.n	8007728 <HAL_SPI_TransmitReceive+0x2ae>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d014      	beq.n	8007728 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68da      	ldr	r2, [r3, #12]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007708:	b2d2      	uxtb	r2, r2
 800770a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800771a:	b29b      	uxth	r3, r3
 800771c:	3b01      	subs	r3, #1
 800771e:	b29a      	uxth	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007724:	2301      	movs	r3, #1
 8007726:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007728:	f7fa ffea 	bl	8002700 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007734:	429a      	cmp	r2, r3
 8007736:	d803      	bhi.n	8007740 <HAL_SPI_TransmitReceive+0x2c6>
 8007738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800773e:	d102      	bne.n	8007746 <HAL_SPI_TransmitReceive+0x2cc>
 8007740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007742:	2b00      	cmp	r3, #0
 8007744:	d103      	bne.n	800774e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800774c:	e029      	b.n	80077a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007752:	b29b      	uxth	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1a2      	bne.n	800769e <HAL_SPI_TransmitReceive+0x224>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800775c:	b29b      	uxth	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d19d      	bne.n	800769e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007764:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 fa18 	bl	8007b9c <SPI_EndRxTxTransaction>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d006      	beq.n	8007780 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2220      	movs	r2, #32
 800777c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800777e:	e010      	b.n	80077a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10b      	bne.n	80077a0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007788:	2300      	movs	r3, #0
 800778a:	617b      	str	r3, [r7, #20]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	617b      	str	r3, [r7, #20]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	617b      	str	r3, [r7, #20]
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	e000      	b.n	80077a2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80077a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3730      	adds	r7, #48	; 0x30
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
	...

080077c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b088      	sub	sp, #32
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	099b      	lsrs	r3, r3, #6
 80077dc:	f003 0301 	and.w	r3, r3, #1
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10f      	bne.n	8007804 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00a      	beq.n	8007804 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	099b      	lsrs	r3, r3, #6
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d004      	beq.n	8007804 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	4798      	blx	r3
    return;
 8007802:	e0d8      	b.n	80079b6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	085b      	lsrs	r3, r3, #1
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00a      	beq.n	8007826 <HAL_SPI_IRQHandler+0x66>
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	09db      	lsrs	r3, r3, #7
 8007814:	f003 0301 	and.w	r3, r3, #1
 8007818:	2b00      	cmp	r3, #0
 800781a:	d004      	beq.n	8007826 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	4798      	blx	r3
    return;
 8007824:	e0c7      	b.n	80079b6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	095b      	lsrs	r3, r3, #5
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10c      	bne.n	800784c <HAL_SPI_IRQHandler+0x8c>
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	099b      	lsrs	r3, r3, #6
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b00      	cmp	r3, #0
 800783c:	d106      	bne.n	800784c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	0a1b      	lsrs	r3, r3, #8
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 80b5 	beq.w	80079b6 <HAL_SPI_IRQHandler+0x1f6>
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	095b      	lsrs	r3, r3, #5
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 80ae 	beq.w	80079b6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	099b      	lsrs	r3, r3, #6
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d023      	beq.n	80078ae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b03      	cmp	r3, #3
 8007870:	d011      	beq.n	8007896 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007876:	f043 0204 	orr.w	r2, r3, #4
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800787e:	2300      	movs	r3, #0
 8007880:	617b      	str	r3, [r7, #20]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	617b      	str	r3, [r7, #20]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	617b      	str	r3, [r7, #20]
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	e00b      	b.n	80078ae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007896:	2300      	movs	r3, #0
 8007898:	613b      	str	r3, [r7, #16]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	613b      	str	r3, [r7, #16]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	613b      	str	r3, [r7, #16]
 80078aa:	693b      	ldr	r3, [r7, #16]
        return;
 80078ac:	e083      	b.n	80079b6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	095b      	lsrs	r3, r3, #5
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d014      	beq.n	80078e4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078be:	f043 0201 	orr.w	r2, r3, #1
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80078c6:	2300      	movs	r3, #0
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	60fb      	str	r3, [r7, #12]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	0a1b      	lsrs	r3, r3, #8
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00c      	beq.n	800790a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f4:	f043 0208 	orr.w	r2, r3, #8
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80078fc:	2300      	movs	r3, #0
 80078fe:	60bb      	str	r3, [r7, #8]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	60bb      	str	r3, [r7, #8]
 8007908:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800790e:	2b00      	cmp	r3, #0
 8007910:	d050      	beq.n	80079b4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007920:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	f003 0302 	and.w	r3, r3, #2
 8007930:	2b00      	cmp	r3, #0
 8007932:	d104      	bne.n	800793e <HAL_SPI_IRQHandler+0x17e>
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b00      	cmp	r3, #0
 800793c:	d034      	beq.n	80079a8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 0203 	bic.w	r2, r2, #3
 800794c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007952:	2b00      	cmp	r3, #0
 8007954:	d011      	beq.n	800797a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800795a:	4a18      	ldr	r2, [pc, #96]	; (80079bc <HAL_SPI_IRQHandler+0x1fc>)
 800795c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007962:	4618      	mov	r0, r3
 8007964:	f7fb fb67 	bl	8003036 <HAL_DMA_Abort_IT>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d005      	beq.n	800797a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007972:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800797e:	2b00      	cmp	r3, #0
 8007980:	d016      	beq.n	80079b0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007986:	4a0d      	ldr	r2, [pc, #52]	; (80079bc <HAL_SPI_IRQHandler+0x1fc>)
 8007988:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800798e:	4618      	mov	r0, r3
 8007990:	f7fb fb51 	bl	8003036 <HAL_DMA_Abort_IT>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800799e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80079a6:	e003      	b.n	80079b0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f809 	bl	80079c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80079ae:	e000      	b.n	80079b2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80079b0:	bf00      	nop
    return;
 80079b2:	bf00      	nop
 80079b4:	bf00      	nop
  }
}
 80079b6:	3720      	adds	r7, #32
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	080079d5 	.word	0x080079d5

080079c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f7ff ffe6 	bl	80079c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80079f4:	bf00      	nop
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	603b      	str	r3, [r7, #0]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a0c:	e04c      	b.n	8007aa8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a14:	d048      	beq.n	8007aa8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007a16:	f7fa fe73 	bl	8002700 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	683a      	ldr	r2, [r7, #0]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d902      	bls.n	8007a2c <SPI_WaitFlagStateUntilTimeout+0x30>
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d13d      	bne.n	8007aa8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a44:	d111      	bne.n	8007a6a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a4e:	d004      	beq.n	8007a5a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a58:	d107      	bne.n	8007a6a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a72:	d10f      	bne.n	8007a94 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e00f      	b.n	8007ac8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	689a      	ldr	r2, [r3, #8]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	bf0c      	ite	eq
 8007ab8:	2301      	moveq	r3, #1
 8007aba:	2300      	movne	r3, #0
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	461a      	mov	r2, r3
 8007ac0:	79fb      	ldrb	r3, [r7, #7]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d1a3      	bne.n	8007a0e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ae4:	d111      	bne.n	8007b0a <SPI_EndRxTransaction+0x3a>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aee:	d004      	beq.n	8007afa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007af8:	d107      	bne.n	8007b0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b12:	d12a      	bne.n	8007b6a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b1c:	d012      	beq.n	8007b44 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2200      	movs	r2, #0
 8007b26:	2180      	movs	r1, #128	; 0x80
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f7ff ff67 	bl	80079fc <SPI_WaitFlagStateUntilTimeout>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d02d      	beq.n	8007b90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b38:	f043 0220 	orr.w	r2, r3, #32
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e026      	b.n	8007b92 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f7ff ff54 	bl	80079fc <SPI_WaitFlagStateUntilTimeout>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d01a      	beq.n	8007b90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5e:	f043 0220 	orr.w	r2, r3, #32
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e013      	b.n	8007b92 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2200      	movs	r2, #0
 8007b72:	2101      	movs	r1, #1
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f7ff ff41 	bl	80079fc <SPI_WaitFlagStateUntilTimeout>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d007      	beq.n	8007b90 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b84:	f043 0220 	orr.w	r2, r3, #32
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e000      	b.n	8007b92 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b088      	sub	sp, #32
 8007ba0:	af02      	add	r7, sp, #8
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ba8:	4b1b      	ldr	r3, [pc, #108]	; (8007c18 <SPI_EndRxTxTransaction+0x7c>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a1b      	ldr	r2, [pc, #108]	; (8007c1c <SPI_EndRxTxTransaction+0x80>)
 8007bae:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb2:	0d5b      	lsrs	r3, r3, #21
 8007bb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007bb8:	fb02 f303 	mul.w	r3, r2, r3
 8007bbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bc6:	d112      	bne.n	8007bee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	2180      	movs	r1, #128	; 0x80
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f7ff ff12 	bl	80079fc <SPI_WaitFlagStateUntilTimeout>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d016      	beq.n	8007c0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be2:	f043 0220 	orr.w	r2, r3, #32
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e00f      	b.n	8007c0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00a      	beq.n	8007c0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c04:	2b80      	cmp	r3, #128	; 0x80
 8007c06:	d0f2      	beq.n	8007bee <SPI_EndRxTxTransaction+0x52>
 8007c08:	e000      	b.n	8007c0c <SPI_EndRxTxTransaction+0x70>
        break;
 8007c0a:	bf00      	nop
  }

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	2000008c 	.word	0x2000008c
 8007c1c:	165e9f81 	.word	0x165e9f81

08007c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e01d      	b.n	8007c6e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d106      	bne.n	8007c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7fa fbb4 	bl	80023b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	f000 fa14 	bl	800808c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b085      	sub	sp, #20
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68da      	ldr	r2, [r3, #12]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f042 0201 	orr.w	r2, r2, #1
 8007c8c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f003 0307 	and.w	r3, r3, #7
 8007c98:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2b06      	cmp	r3, #6
 8007c9e:	d007      	beq.n	8007cb0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f042 0201 	orr.w	r2, r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b082      	sub	sp, #8
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	f003 0302 	and.w	r3, r3, #2
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d122      	bne.n	8007d1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d11b      	bne.n	8007d1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f06f 0202 	mvn.w	r2, #2
 8007cea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	f003 0303 	and.w	r3, r3, #3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d003      	beq.n	8007d08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f9a5 	bl	8008050 <HAL_TIM_IC_CaptureCallback>
 8007d06:	e005      	b.n	8007d14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f997 	bl	800803c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f9a8 	bl	8008064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	f003 0304 	and.w	r3, r3, #4
 8007d24:	2b04      	cmp	r3, #4
 8007d26:	d122      	bne.n	8007d6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	f003 0304 	and.w	r3, r3, #4
 8007d32:	2b04      	cmp	r3, #4
 8007d34:	d11b      	bne.n	8007d6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f06f 0204 	mvn.w	r2, #4
 8007d3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2202      	movs	r2, #2
 8007d44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d003      	beq.n	8007d5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f97b 	bl	8008050 <HAL_TIM_IC_CaptureCallback>
 8007d5a:	e005      	b.n	8007d68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f96d 	bl	800803c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f97e 	bl	8008064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	f003 0308 	and.w	r3, r3, #8
 8007d78:	2b08      	cmp	r3, #8
 8007d7a:	d122      	bne.n	8007dc2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f003 0308 	and.w	r3, r3, #8
 8007d86:	2b08      	cmp	r3, #8
 8007d88:	d11b      	bne.n	8007dc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f06f 0208 	mvn.w	r2, #8
 8007d92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2204      	movs	r2, #4
 8007d98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	69db      	ldr	r3, [r3, #28]
 8007da0:	f003 0303 	and.w	r3, r3, #3
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d003      	beq.n	8007db0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f951 	bl	8008050 <HAL_TIM_IC_CaptureCallback>
 8007dae:	e005      	b.n	8007dbc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f943 	bl	800803c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f954 	bl	8008064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	f003 0310 	and.w	r3, r3, #16
 8007dcc:	2b10      	cmp	r3, #16
 8007dce:	d122      	bne.n	8007e16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	f003 0310 	and.w	r3, r3, #16
 8007dda:	2b10      	cmp	r3, #16
 8007ddc:	d11b      	bne.n	8007e16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f06f 0210 	mvn.w	r2, #16
 8007de6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2208      	movs	r2, #8
 8007dec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d003      	beq.n	8007e04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f927 	bl	8008050 <HAL_TIM_IC_CaptureCallback>
 8007e02:	e005      	b.n	8007e10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f919 	bl	800803c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f92a 	bl	8008064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d10e      	bne.n	8007e42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d107      	bne.n	8007e42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f06f 0201 	mvn.w	r2, #1
 8007e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7f9 ff8f 	bl	8001d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e4c:	2b80      	cmp	r3, #128	; 0x80
 8007e4e:	d10e      	bne.n	8007e6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e5a:	2b80      	cmp	r3, #128	; 0x80
 8007e5c:	d107      	bne.n	8007e6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 facf 	bl	800840c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e78:	2b40      	cmp	r3, #64	; 0x40
 8007e7a:	d10e      	bne.n	8007e9a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e86:	2b40      	cmp	r3, #64	; 0x40
 8007e88:	d107      	bne.n	8007e9a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f8ef 	bl	8008078 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	f003 0320 	and.w	r3, r3, #32
 8007ea4:	2b20      	cmp	r3, #32
 8007ea6:	d10e      	bne.n	8007ec6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	f003 0320 	and.w	r3, r3, #32
 8007eb2:	2b20      	cmp	r3, #32
 8007eb4:	d107      	bne.n	8007ec6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f06f 0220 	mvn.w	r2, #32
 8007ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fa99 	bl	80083f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ec6:	bf00      	nop
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b084      	sub	sp, #16
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d101      	bne.n	8007ee6 <HAL_TIM_ConfigClockSource+0x18>
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	e0a6      	b.n	8008034 <HAL_TIM_ConfigClockSource+0x166>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f04:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f0c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2b40      	cmp	r3, #64	; 0x40
 8007f1c:	d067      	beq.n	8007fee <HAL_TIM_ConfigClockSource+0x120>
 8007f1e:	2b40      	cmp	r3, #64	; 0x40
 8007f20:	d80b      	bhi.n	8007f3a <HAL_TIM_ConfigClockSource+0x6c>
 8007f22:	2b10      	cmp	r3, #16
 8007f24:	d073      	beq.n	800800e <HAL_TIM_ConfigClockSource+0x140>
 8007f26:	2b10      	cmp	r3, #16
 8007f28:	d802      	bhi.n	8007f30 <HAL_TIM_ConfigClockSource+0x62>
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d06f      	beq.n	800800e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007f2e:	e078      	b.n	8008022 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007f30:	2b20      	cmp	r3, #32
 8007f32:	d06c      	beq.n	800800e <HAL_TIM_ConfigClockSource+0x140>
 8007f34:	2b30      	cmp	r3, #48	; 0x30
 8007f36:	d06a      	beq.n	800800e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007f38:	e073      	b.n	8008022 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007f3a:	2b70      	cmp	r3, #112	; 0x70
 8007f3c:	d00d      	beq.n	8007f5a <HAL_TIM_ConfigClockSource+0x8c>
 8007f3e:	2b70      	cmp	r3, #112	; 0x70
 8007f40:	d804      	bhi.n	8007f4c <HAL_TIM_ConfigClockSource+0x7e>
 8007f42:	2b50      	cmp	r3, #80	; 0x50
 8007f44:	d033      	beq.n	8007fae <HAL_TIM_ConfigClockSource+0xe0>
 8007f46:	2b60      	cmp	r3, #96	; 0x60
 8007f48:	d041      	beq.n	8007fce <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007f4a:	e06a      	b.n	8008022 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f50:	d066      	beq.n	8008020 <HAL_TIM_ConfigClockSource+0x152>
 8007f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f56:	d017      	beq.n	8007f88 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007f58:	e063      	b.n	8008022 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6818      	ldr	r0, [r3, #0]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	6899      	ldr	r1, [r3, #8]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	685a      	ldr	r2, [r3, #4]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	f000 f9a9 	bl	80082c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	609a      	str	r2, [r3, #8]
      break;
 8007f86:	e04c      	b.n	8008022 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6818      	ldr	r0, [r3, #0]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	6899      	ldr	r1, [r3, #8]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	685a      	ldr	r2, [r3, #4]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	f000 f992 	bl	80082c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689a      	ldr	r2, [r3, #8]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007faa:	609a      	str	r2, [r3, #8]
      break;
 8007fac:	e039      	b.n	8008022 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6818      	ldr	r0, [r3, #0]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	6859      	ldr	r1, [r3, #4]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	f000 f906 	bl	80081cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2150      	movs	r1, #80	; 0x50
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 f95f 	bl	800828a <TIM_ITRx_SetConfig>
      break;
 8007fcc:	e029      	b.n	8008022 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6818      	ldr	r0, [r3, #0]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	6859      	ldr	r1, [r3, #4]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f000 f925 	bl	800822a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2160      	movs	r1, #96	; 0x60
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 f94f 	bl	800828a <TIM_ITRx_SetConfig>
      break;
 8007fec:	e019      	b.n	8008022 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6818      	ldr	r0, [r3, #0]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	6859      	ldr	r1, [r3, #4]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	f000 f8e6 	bl	80081cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2140      	movs	r1, #64	; 0x40
 8008006:	4618      	mov	r0, r3
 8008008:	f000 f93f 	bl	800828a <TIM_ITRx_SetConfig>
      break;
 800800c:	e009      	b.n	8008022 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4619      	mov	r1, r3
 8008018:	4610      	mov	r0, r2
 800801a:	f000 f936 	bl	800828a <TIM_ITRx_SetConfig>
      break;
 800801e:	e000      	b.n	8008022 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008020:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a40      	ldr	r2, [pc, #256]	; (80081a0 <TIM_Base_SetConfig+0x114>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d013      	beq.n	80080cc <TIM_Base_SetConfig+0x40>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080aa:	d00f      	beq.n	80080cc <TIM_Base_SetConfig+0x40>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a3d      	ldr	r2, [pc, #244]	; (80081a4 <TIM_Base_SetConfig+0x118>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d00b      	beq.n	80080cc <TIM_Base_SetConfig+0x40>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a3c      	ldr	r2, [pc, #240]	; (80081a8 <TIM_Base_SetConfig+0x11c>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d007      	beq.n	80080cc <TIM_Base_SetConfig+0x40>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a3b      	ldr	r2, [pc, #236]	; (80081ac <TIM_Base_SetConfig+0x120>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d003      	beq.n	80080cc <TIM_Base_SetConfig+0x40>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a3a      	ldr	r2, [pc, #232]	; (80081b0 <TIM_Base_SetConfig+0x124>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d108      	bne.n	80080de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	4313      	orrs	r3, r2
 80080dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a2f      	ldr	r2, [pc, #188]	; (80081a0 <TIM_Base_SetConfig+0x114>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d02b      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ec:	d027      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a2c      	ldr	r2, [pc, #176]	; (80081a4 <TIM_Base_SetConfig+0x118>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d023      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a2b      	ldr	r2, [pc, #172]	; (80081a8 <TIM_Base_SetConfig+0x11c>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d01f      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a2a      	ldr	r2, [pc, #168]	; (80081ac <TIM_Base_SetConfig+0x120>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d01b      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a29      	ldr	r2, [pc, #164]	; (80081b0 <TIM_Base_SetConfig+0x124>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d017      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a28      	ldr	r2, [pc, #160]	; (80081b4 <TIM_Base_SetConfig+0x128>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d013      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a27      	ldr	r2, [pc, #156]	; (80081b8 <TIM_Base_SetConfig+0x12c>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d00f      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a26      	ldr	r2, [pc, #152]	; (80081bc <TIM_Base_SetConfig+0x130>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d00b      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a25      	ldr	r2, [pc, #148]	; (80081c0 <TIM_Base_SetConfig+0x134>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d007      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a24      	ldr	r2, [pc, #144]	; (80081c4 <TIM_Base_SetConfig+0x138>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d003      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a23      	ldr	r2, [pc, #140]	; (80081c8 <TIM_Base_SetConfig+0x13c>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d108      	bne.n	8008150 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	4313      	orrs	r3, r2
 800814e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	4313      	orrs	r3, r2
 800815c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	689a      	ldr	r2, [r3, #8]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a0a      	ldr	r2, [pc, #40]	; (80081a0 <TIM_Base_SetConfig+0x114>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d003      	beq.n	8008184 <TIM_Base_SetConfig+0xf8>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a0c      	ldr	r2, [pc, #48]	; (80081b0 <TIM_Base_SetConfig+0x124>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d103      	bne.n	800818c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	691a      	ldr	r2, [r3, #16]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	615a      	str	r2, [r3, #20]
}
 8008192:	bf00      	nop
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	40010000 	.word	0x40010000
 80081a4:	40000400 	.word	0x40000400
 80081a8:	40000800 	.word	0x40000800
 80081ac:	40000c00 	.word	0x40000c00
 80081b0:	40010400 	.word	0x40010400
 80081b4:	40014000 	.word	0x40014000
 80081b8:	40014400 	.word	0x40014400
 80081bc:	40014800 	.word	0x40014800
 80081c0:	40001800 	.word	0x40001800
 80081c4:	40001c00 	.word	0x40001c00
 80081c8:	40002000 	.word	0x40002000

080081cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b087      	sub	sp, #28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6a1b      	ldr	r3, [r3, #32]
 80081dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	f023 0201 	bic.w	r2, r3, #1
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	011b      	lsls	r3, r3, #4
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	4313      	orrs	r3, r2
 8008200:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	f023 030a 	bic.w	r3, r3, #10
 8008208:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	4313      	orrs	r3, r2
 8008210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	621a      	str	r2, [r3, #32]
}
 800821e:	bf00      	nop
 8008220:	371c      	adds	r7, #28
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800822a:	b480      	push	{r7}
 800822c:	b087      	sub	sp, #28
 800822e:	af00      	add	r7, sp, #0
 8008230:	60f8      	str	r0, [r7, #12]
 8008232:	60b9      	str	r1, [r7, #8]
 8008234:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	f023 0210 	bic.w	r2, r3, #16
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6a1b      	ldr	r3, [r3, #32]
 800824c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008254:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	031b      	lsls	r3, r3, #12
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	4313      	orrs	r3, r2
 800825e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008266:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	011b      	lsls	r3, r3, #4
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	4313      	orrs	r3, r2
 8008270:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	621a      	str	r2, [r3, #32]
}
 800827e:	bf00      	nop
 8008280:	371c      	adds	r7, #28
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800828a:	b480      	push	{r7}
 800828c:	b085      	sub	sp, #20
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	f043 0307 	orr.w	r3, r3, #7
 80082ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	609a      	str	r2, [r3, #8]
}
 80082b4:	bf00      	nop
 80082b6:	3714      	adds	r7, #20
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b087      	sub	sp, #28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
 80082cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	021a      	lsls	r2, r3, #8
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	431a      	orrs	r2, r3
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	609a      	str	r2, [r3, #8]
}
 80082f4:	bf00      	nop
 80082f6:	371c      	adds	r7, #28
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008310:	2b01      	cmp	r3, #1
 8008312:	d101      	bne.n	8008318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008314:	2302      	movs	r3, #2
 8008316:	e05a      	b.n	80083ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2202      	movs	r2, #2
 8008324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800833e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	4313      	orrs	r3, r2
 8008348:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a21      	ldr	r2, [pc, #132]	; (80083dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d022      	beq.n	80083a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008364:	d01d      	beq.n	80083a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a1d      	ldr	r2, [pc, #116]	; (80083e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d018      	beq.n	80083a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a1b      	ldr	r2, [pc, #108]	; (80083e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d013      	beq.n	80083a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a1a      	ldr	r2, [pc, #104]	; (80083e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d00e      	beq.n	80083a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a18      	ldr	r2, [pc, #96]	; (80083ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d009      	beq.n	80083a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a17      	ldr	r2, [pc, #92]	; (80083f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d004      	beq.n	80083a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a15      	ldr	r2, [pc, #84]	; (80083f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d10c      	bne.n	80083bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	40010000 	.word	0x40010000
 80083e0:	40000400 	.word	0x40000400
 80083e4:	40000800 	.word	0x40000800
 80083e8:	40000c00 	.word	0x40000c00
 80083ec:	40010400 	.word	0x40010400
 80083f0:	40014000 	.word	0x40014000
 80083f4:	40001800 	.word	0x40001800

080083f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e03f      	b.n	80084b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008438:	b2db      	uxtb	r3, r3
 800843a:	2b00      	cmp	r3, #0
 800843c:	d106      	bne.n	800844c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7fa f84c 	bl	80024e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2224      	movs	r2, #36	; 0x24
 8008450:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68da      	ldr	r2, [r3, #12]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008462:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f829 	bl	80084bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	691a      	ldr	r2, [r3, #16]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008478:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	695a      	ldr	r2, [r3, #20]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008488:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68da      	ldr	r2, [r3, #12]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008498:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2220      	movs	r2, #32
 80084a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2220      	movs	r2, #32
 80084ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
	...

080084bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c0:	b085      	sub	sp, #20
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68da      	ldr	r2, [r3, #12]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	430a      	orrs	r2, r1
 80084da:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	689a      	ldr	r2, [r3, #8]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	431a      	orrs	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	431a      	orrs	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	69db      	ldr	r3, [r3, #28]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80084fe:	f023 030c 	bic.w	r3, r3, #12
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	6812      	ldr	r2, [r2, #0]
 8008506:	68f9      	ldr	r1, [r7, #12]
 8008508:	430b      	orrs	r3, r1
 800850a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	699a      	ldr	r2, [r3, #24]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	430a      	orrs	r2, r1
 8008520:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	69db      	ldr	r3, [r3, #28]
 8008526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800852a:	f040 818b 	bne.w	8008844 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4ac1      	ldr	r2, [pc, #772]	; (8008838 <UART_SetConfig+0x37c>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d005      	beq.n	8008544 <UART_SetConfig+0x88>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4abf      	ldr	r2, [pc, #764]	; (800883c <UART_SetConfig+0x380>)
 800853e:	4293      	cmp	r3, r2
 8008540:	f040 80bd 	bne.w	80086be <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008544:	f7fe fe18 	bl	8007178 <HAL_RCC_GetPCLK2Freq>
 8008548:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	461d      	mov	r5, r3
 800854e:	f04f 0600 	mov.w	r6, #0
 8008552:	46a8      	mov	r8, r5
 8008554:	46b1      	mov	r9, r6
 8008556:	eb18 0308 	adds.w	r3, r8, r8
 800855a:	eb49 0409 	adc.w	r4, r9, r9
 800855e:	4698      	mov	r8, r3
 8008560:	46a1      	mov	r9, r4
 8008562:	eb18 0805 	adds.w	r8, r8, r5
 8008566:	eb49 0906 	adc.w	r9, r9, r6
 800856a:	f04f 0100 	mov.w	r1, #0
 800856e:	f04f 0200 	mov.w	r2, #0
 8008572:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008576:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800857a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800857e:	4688      	mov	r8, r1
 8008580:	4691      	mov	r9, r2
 8008582:	eb18 0005 	adds.w	r0, r8, r5
 8008586:	eb49 0106 	adc.w	r1, r9, r6
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	461d      	mov	r5, r3
 8008590:	f04f 0600 	mov.w	r6, #0
 8008594:	196b      	adds	r3, r5, r5
 8008596:	eb46 0406 	adc.w	r4, r6, r6
 800859a:	461a      	mov	r2, r3
 800859c:	4623      	mov	r3, r4
 800859e:	f7f7 fe67 	bl	8000270 <__aeabi_uldivmod>
 80085a2:	4603      	mov	r3, r0
 80085a4:	460c      	mov	r4, r1
 80085a6:	461a      	mov	r2, r3
 80085a8:	4ba5      	ldr	r3, [pc, #660]	; (8008840 <UART_SetConfig+0x384>)
 80085aa:	fba3 2302 	umull	r2, r3, r3, r2
 80085ae:	095b      	lsrs	r3, r3, #5
 80085b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	461d      	mov	r5, r3
 80085b8:	f04f 0600 	mov.w	r6, #0
 80085bc:	46a9      	mov	r9, r5
 80085be:	46b2      	mov	sl, r6
 80085c0:	eb19 0309 	adds.w	r3, r9, r9
 80085c4:	eb4a 040a 	adc.w	r4, sl, sl
 80085c8:	4699      	mov	r9, r3
 80085ca:	46a2      	mov	sl, r4
 80085cc:	eb19 0905 	adds.w	r9, r9, r5
 80085d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80085d4:	f04f 0100 	mov.w	r1, #0
 80085d8:	f04f 0200 	mov.w	r2, #0
 80085dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80085e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80085e8:	4689      	mov	r9, r1
 80085ea:	4692      	mov	sl, r2
 80085ec:	eb19 0005 	adds.w	r0, r9, r5
 80085f0:	eb4a 0106 	adc.w	r1, sl, r6
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	461d      	mov	r5, r3
 80085fa:	f04f 0600 	mov.w	r6, #0
 80085fe:	196b      	adds	r3, r5, r5
 8008600:	eb46 0406 	adc.w	r4, r6, r6
 8008604:	461a      	mov	r2, r3
 8008606:	4623      	mov	r3, r4
 8008608:	f7f7 fe32 	bl	8000270 <__aeabi_uldivmod>
 800860c:	4603      	mov	r3, r0
 800860e:	460c      	mov	r4, r1
 8008610:	461a      	mov	r2, r3
 8008612:	4b8b      	ldr	r3, [pc, #556]	; (8008840 <UART_SetConfig+0x384>)
 8008614:	fba3 1302 	umull	r1, r3, r3, r2
 8008618:	095b      	lsrs	r3, r3, #5
 800861a:	2164      	movs	r1, #100	; 0x64
 800861c:	fb01 f303 	mul.w	r3, r1, r3
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	00db      	lsls	r3, r3, #3
 8008624:	3332      	adds	r3, #50	; 0x32
 8008626:	4a86      	ldr	r2, [pc, #536]	; (8008840 <UART_SetConfig+0x384>)
 8008628:	fba2 2303 	umull	r2, r3, r2, r3
 800862c:	095b      	lsrs	r3, r3, #5
 800862e:	005b      	lsls	r3, r3, #1
 8008630:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008634:	4498      	add	r8, r3
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	461d      	mov	r5, r3
 800863a:	f04f 0600 	mov.w	r6, #0
 800863e:	46a9      	mov	r9, r5
 8008640:	46b2      	mov	sl, r6
 8008642:	eb19 0309 	adds.w	r3, r9, r9
 8008646:	eb4a 040a 	adc.w	r4, sl, sl
 800864a:	4699      	mov	r9, r3
 800864c:	46a2      	mov	sl, r4
 800864e:	eb19 0905 	adds.w	r9, r9, r5
 8008652:	eb4a 0a06 	adc.w	sl, sl, r6
 8008656:	f04f 0100 	mov.w	r1, #0
 800865a:	f04f 0200 	mov.w	r2, #0
 800865e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008662:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008666:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800866a:	4689      	mov	r9, r1
 800866c:	4692      	mov	sl, r2
 800866e:	eb19 0005 	adds.w	r0, r9, r5
 8008672:	eb4a 0106 	adc.w	r1, sl, r6
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	461d      	mov	r5, r3
 800867c:	f04f 0600 	mov.w	r6, #0
 8008680:	196b      	adds	r3, r5, r5
 8008682:	eb46 0406 	adc.w	r4, r6, r6
 8008686:	461a      	mov	r2, r3
 8008688:	4623      	mov	r3, r4
 800868a:	f7f7 fdf1 	bl	8000270 <__aeabi_uldivmod>
 800868e:	4603      	mov	r3, r0
 8008690:	460c      	mov	r4, r1
 8008692:	461a      	mov	r2, r3
 8008694:	4b6a      	ldr	r3, [pc, #424]	; (8008840 <UART_SetConfig+0x384>)
 8008696:	fba3 1302 	umull	r1, r3, r3, r2
 800869a:	095b      	lsrs	r3, r3, #5
 800869c:	2164      	movs	r1, #100	; 0x64
 800869e:	fb01 f303 	mul.w	r3, r1, r3
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	00db      	lsls	r3, r3, #3
 80086a6:	3332      	adds	r3, #50	; 0x32
 80086a8:	4a65      	ldr	r2, [pc, #404]	; (8008840 <UART_SetConfig+0x384>)
 80086aa:	fba2 2303 	umull	r2, r3, r2, r3
 80086ae:	095b      	lsrs	r3, r3, #5
 80086b0:	f003 0207 	and.w	r2, r3, #7
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4442      	add	r2, r8
 80086ba:	609a      	str	r2, [r3, #8]
 80086bc:	e26f      	b.n	8008b9e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80086be:	f7fe fd47 	bl	8007150 <HAL_RCC_GetPCLK1Freq>
 80086c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	461d      	mov	r5, r3
 80086c8:	f04f 0600 	mov.w	r6, #0
 80086cc:	46a8      	mov	r8, r5
 80086ce:	46b1      	mov	r9, r6
 80086d0:	eb18 0308 	adds.w	r3, r8, r8
 80086d4:	eb49 0409 	adc.w	r4, r9, r9
 80086d8:	4698      	mov	r8, r3
 80086da:	46a1      	mov	r9, r4
 80086dc:	eb18 0805 	adds.w	r8, r8, r5
 80086e0:	eb49 0906 	adc.w	r9, r9, r6
 80086e4:	f04f 0100 	mov.w	r1, #0
 80086e8:	f04f 0200 	mov.w	r2, #0
 80086ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80086f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80086f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80086f8:	4688      	mov	r8, r1
 80086fa:	4691      	mov	r9, r2
 80086fc:	eb18 0005 	adds.w	r0, r8, r5
 8008700:	eb49 0106 	adc.w	r1, r9, r6
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	461d      	mov	r5, r3
 800870a:	f04f 0600 	mov.w	r6, #0
 800870e:	196b      	adds	r3, r5, r5
 8008710:	eb46 0406 	adc.w	r4, r6, r6
 8008714:	461a      	mov	r2, r3
 8008716:	4623      	mov	r3, r4
 8008718:	f7f7 fdaa 	bl	8000270 <__aeabi_uldivmod>
 800871c:	4603      	mov	r3, r0
 800871e:	460c      	mov	r4, r1
 8008720:	461a      	mov	r2, r3
 8008722:	4b47      	ldr	r3, [pc, #284]	; (8008840 <UART_SetConfig+0x384>)
 8008724:	fba3 2302 	umull	r2, r3, r3, r2
 8008728:	095b      	lsrs	r3, r3, #5
 800872a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	461d      	mov	r5, r3
 8008732:	f04f 0600 	mov.w	r6, #0
 8008736:	46a9      	mov	r9, r5
 8008738:	46b2      	mov	sl, r6
 800873a:	eb19 0309 	adds.w	r3, r9, r9
 800873e:	eb4a 040a 	adc.w	r4, sl, sl
 8008742:	4699      	mov	r9, r3
 8008744:	46a2      	mov	sl, r4
 8008746:	eb19 0905 	adds.w	r9, r9, r5
 800874a:	eb4a 0a06 	adc.w	sl, sl, r6
 800874e:	f04f 0100 	mov.w	r1, #0
 8008752:	f04f 0200 	mov.w	r2, #0
 8008756:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800875a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800875e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008762:	4689      	mov	r9, r1
 8008764:	4692      	mov	sl, r2
 8008766:	eb19 0005 	adds.w	r0, r9, r5
 800876a:	eb4a 0106 	adc.w	r1, sl, r6
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	461d      	mov	r5, r3
 8008774:	f04f 0600 	mov.w	r6, #0
 8008778:	196b      	adds	r3, r5, r5
 800877a:	eb46 0406 	adc.w	r4, r6, r6
 800877e:	461a      	mov	r2, r3
 8008780:	4623      	mov	r3, r4
 8008782:	f7f7 fd75 	bl	8000270 <__aeabi_uldivmod>
 8008786:	4603      	mov	r3, r0
 8008788:	460c      	mov	r4, r1
 800878a:	461a      	mov	r2, r3
 800878c:	4b2c      	ldr	r3, [pc, #176]	; (8008840 <UART_SetConfig+0x384>)
 800878e:	fba3 1302 	umull	r1, r3, r3, r2
 8008792:	095b      	lsrs	r3, r3, #5
 8008794:	2164      	movs	r1, #100	; 0x64
 8008796:	fb01 f303 	mul.w	r3, r1, r3
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	00db      	lsls	r3, r3, #3
 800879e:	3332      	adds	r3, #50	; 0x32
 80087a0:	4a27      	ldr	r2, [pc, #156]	; (8008840 <UART_SetConfig+0x384>)
 80087a2:	fba2 2303 	umull	r2, r3, r2, r3
 80087a6:	095b      	lsrs	r3, r3, #5
 80087a8:	005b      	lsls	r3, r3, #1
 80087aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80087ae:	4498      	add	r8, r3
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	461d      	mov	r5, r3
 80087b4:	f04f 0600 	mov.w	r6, #0
 80087b8:	46a9      	mov	r9, r5
 80087ba:	46b2      	mov	sl, r6
 80087bc:	eb19 0309 	adds.w	r3, r9, r9
 80087c0:	eb4a 040a 	adc.w	r4, sl, sl
 80087c4:	4699      	mov	r9, r3
 80087c6:	46a2      	mov	sl, r4
 80087c8:	eb19 0905 	adds.w	r9, r9, r5
 80087cc:	eb4a 0a06 	adc.w	sl, sl, r6
 80087d0:	f04f 0100 	mov.w	r1, #0
 80087d4:	f04f 0200 	mov.w	r2, #0
 80087d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80087e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80087e4:	4689      	mov	r9, r1
 80087e6:	4692      	mov	sl, r2
 80087e8:	eb19 0005 	adds.w	r0, r9, r5
 80087ec:	eb4a 0106 	adc.w	r1, sl, r6
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	461d      	mov	r5, r3
 80087f6:	f04f 0600 	mov.w	r6, #0
 80087fa:	196b      	adds	r3, r5, r5
 80087fc:	eb46 0406 	adc.w	r4, r6, r6
 8008800:	461a      	mov	r2, r3
 8008802:	4623      	mov	r3, r4
 8008804:	f7f7 fd34 	bl	8000270 <__aeabi_uldivmod>
 8008808:	4603      	mov	r3, r0
 800880a:	460c      	mov	r4, r1
 800880c:	461a      	mov	r2, r3
 800880e:	4b0c      	ldr	r3, [pc, #48]	; (8008840 <UART_SetConfig+0x384>)
 8008810:	fba3 1302 	umull	r1, r3, r3, r2
 8008814:	095b      	lsrs	r3, r3, #5
 8008816:	2164      	movs	r1, #100	; 0x64
 8008818:	fb01 f303 	mul.w	r3, r1, r3
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	00db      	lsls	r3, r3, #3
 8008820:	3332      	adds	r3, #50	; 0x32
 8008822:	4a07      	ldr	r2, [pc, #28]	; (8008840 <UART_SetConfig+0x384>)
 8008824:	fba2 2303 	umull	r2, r3, r2, r3
 8008828:	095b      	lsrs	r3, r3, #5
 800882a:	f003 0207 	and.w	r2, r3, #7
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4442      	add	r2, r8
 8008834:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008836:	e1b2      	b.n	8008b9e <UART_SetConfig+0x6e2>
 8008838:	40011000 	.word	0x40011000
 800883c:	40011400 	.word	0x40011400
 8008840:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4ad7      	ldr	r2, [pc, #860]	; (8008ba8 <UART_SetConfig+0x6ec>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d005      	beq.n	800885a <UART_SetConfig+0x39e>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4ad6      	ldr	r2, [pc, #856]	; (8008bac <UART_SetConfig+0x6f0>)
 8008854:	4293      	cmp	r3, r2
 8008856:	f040 80d1 	bne.w	80089fc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800885a:	f7fe fc8d 	bl	8007178 <HAL_RCC_GetPCLK2Freq>
 800885e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	469a      	mov	sl, r3
 8008864:	f04f 0b00 	mov.w	fp, #0
 8008868:	46d0      	mov	r8, sl
 800886a:	46d9      	mov	r9, fp
 800886c:	eb18 0308 	adds.w	r3, r8, r8
 8008870:	eb49 0409 	adc.w	r4, r9, r9
 8008874:	4698      	mov	r8, r3
 8008876:	46a1      	mov	r9, r4
 8008878:	eb18 080a 	adds.w	r8, r8, sl
 800887c:	eb49 090b 	adc.w	r9, r9, fp
 8008880:	f04f 0100 	mov.w	r1, #0
 8008884:	f04f 0200 	mov.w	r2, #0
 8008888:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800888c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008890:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008894:	4688      	mov	r8, r1
 8008896:	4691      	mov	r9, r2
 8008898:	eb1a 0508 	adds.w	r5, sl, r8
 800889c:	eb4b 0609 	adc.w	r6, fp, r9
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	4619      	mov	r1, r3
 80088a6:	f04f 0200 	mov.w	r2, #0
 80088aa:	f04f 0300 	mov.w	r3, #0
 80088ae:	f04f 0400 	mov.w	r4, #0
 80088b2:	0094      	lsls	r4, r2, #2
 80088b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80088b8:	008b      	lsls	r3, r1, #2
 80088ba:	461a      	mov	r2, r3
 80088bc:	4623      	mov	r3, r4
 80088be:	4628      	mov	r0, r5
 80088c0:	4631      	mov	r1, r6
 80088c2:	f7f7 fcd5 	bl	8000270 <__aeabi_uldivmod>
 80088c6:	4603      	mov	r3, r0
 80088c8:	460c      	mov	r4, r1
 80088ca:	461a      	mov	r2, r3
 80088cc:	4bb8      	ldr	r3, [pc, #736]	; (8008bb0 <UART_SetConfig+0x6f4>)
 80088ce:	fba3 2302 	umull	r2, r3, r3, r2
 80088d2:	095b      	lsrs	r3, r3, #5
 80088d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	469b      	mov	fp, r3
 80088dc:	f04f 0c00 	mov.w	ip, #0
 80088e0:	46d9      	mov	r9, fp
 80088e2:	46e2      	mov	sl, ip
 80088e4:	eb19 0309 	adds.w	r3, r9, r9
 80088e8:	eb4a 040a 	adc.w	r4, sl, sl
 80088ec:	4699      	mov	r9, r3
 80088ee:	46a2      	mov	sl, r4
 80088f0:	eb19 090b 	adds.w	r9, r9, fp
 80088f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80088f8:	f04f 0100 	mov.w	r1, #0
 80088fc:	f04f 0200 	mov.w	r2, #0
 8008900:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008904:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008908:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800890c:	4689      	mov	r9, r1
 800890e:	4692      	mov	sl, r2
 8008910:	eb1b 0509 	adds.w	r5, fp, r9
 8008914:	eb4c 060a 	adc.w	r6, ip, sl
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	4619      	mov	r1, r3
 800891e:	f04f 0200 	mov.w	r2, #0
 8008922:	f04f 0300 	mov.w	r3, #0
 8008926:	f04f 0400 	mov.w	r4, #0
 800892a:	0094      	lsls	r4, r2, #2
 800892c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008930:	008b      	lsls	r3, r1, #2
 8008932:	461a      	mov	r2, r3
 8008934:	4623      	mov	r3, r4
 8008936:	4628      	mov	r0, r5
 8008938:	4631      	mov	r1, r6
 800893a:	f7f7 fc99 	bl	8000270 <__aeabi_uldivmod>
 800893e:	4603      	mov	r3, r0
 8008940:	460c      	mov	r4, r1
 8008942:	461a      	mov	r2, r3
 8008944:	4b9a      	ldr	r3, [pc, #616]	; (8008bb0 <UART_SetConfig+0x6f4>)
 8008946:	fba3 1302 	umull	r1, r3, r3, r2
 800894a:	095b      	lsrs	r3, r3, #5
 800894c:	2164      	movs	r1, #100	; 0x64
 800894e:	fb01 f303 	mul.w	r3, r1, r3
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	011b      	lsls	r3, r3, #4
 8008956:	3332      	adds	r3, #50	; 0x32
 8008958:	4a95      	ldr	r2, [pc, #596]	; (8008bb0 <UART_SetConfig+0x6f4>)
 800895a:	fba2 2303 	umull	r2, r3, r2, r3
 800895e:	095b      	lsrs	r3, r3, #5
 8008960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008964:	4498      	add	r8, r3
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	469b      	mov	fp, r3
 800896a:	f04f 0c00 	mov.w	ip, #0
 800896e:	46d9      	mov	r9, fp
 8008970:	46e2      	mov	sl, ip
 8008972:	eb19 0309 	adds.w	r3, r9, r9
 8008976:	eb4a 040a 	adc.w	r4, sl, sl
 800897a:	4699      	mov	r9, r3
 800897c:	46a2      	mov	sl, r4
 800897e:	eb19 090b 	adds.w	r9, r9, fp
 8008982:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008986:	f04f 0100 	mov.w	r1, #0
 800898a:	f04f 0200 	mov.w	r2, #0
 800898e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008992:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008996:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800899a:	4689      	mov	r9, r1
 800899c:	4692      	mov	sl, r2
 800899e:	eb1b 0509 	adds.w	r5, fp, r9
 80089a2:	eb4c 060a 	adc.w	r6, ip, sl
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	4619      	mov	r1, r3
 80089ac:	f04f 0200 	mov.w	r2, #0
 80089b0:	f04f 0300 	mov.w	r3, #0
 80089b4:	f04f 0400 	mov.w	r4, #0
 80089b8:	0094      	lsls	r4, r2, #2
 80089ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80089be:	008b      	lsls	r3, r1, #2
 80089c0:	461a      	mov	r2, r3
 80089c2:	4623      	mov	r3, r4
 80089c4:	4628      	mov	r0, r5
 80089c6:	4631      	mov	r1, r6
 80089c8:	f7f7 fc52 	bl	8000270 <__aeabi_uldivmod>
 80089cc:	4603      	mov	r3, r0
 80089ce:	460c      	mov	r4, r1
 80089d0:	461a      	mov	r2, r3
 80089d2:	4b77      	ldr	r3, [pc, #476]	; (8008bb0 <UART_SetConfig+0x6f4>)
 80089d4:	fba3 1302 	umull	r1, r3, r3, r2
 80089d8:	095b      	lsrs	r3, r3, #5
 80089da:	2164      	movs	r1, #100	; 0x64
 80089dc:	fb01 f303 	mul.w	r3, r1, r3
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	011b      	lsls	r3, r3, #4
 80089e4:	3332      	adds	r3, #50	; 0x32
 80089e6:	4a72      	ldr	r2, [pc, #456]	; (8008bb0 <UART_SetConfig+0x6f4>)
 80089e8:	fba2 2303 	umull	r2, r3, r2, r3
 80089ec:	095b      	lsrs	r3, r3, #5
 80089ee:	f003 020f 	and.w	r2, r3, #15
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4442      	add	r2, r8
 80089f8:	609a      	str	r2, [r3, #8]
 80089fa:	e0d0      	b.n	8008b9e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80089fc:	f7fe fba8 	bl	8007150 <HAL_RCC_GetPCLK1Freq>
 8008a00:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	469a      	mov	sl, r3
 8008a06:	f04f 0b00 	mov.w	fp, #0
 8008a0a:	46d0      	mov	r8, sl
 8008a0c:	46d9      	mov	r9, fp
 8008a0e:	eb18 0308 	adds.w	r3, r8, r8
 8008a12:	eb49 0409 	adc.w	r4, r9, r9
 8008a16:	4698      	mov	r8, r3
 8008a18:	46a1      	mov	r9, r4
 8008a1a:	eb18 080a 	adds.w	r8, r8, sl
 8008a1e:	eb49 090b 	adc.w	r9, r9, fp
 8008a22:	f04f 0100 	mov.w	r1, #0
 8008a26:	f04f 0200 	mov.w	r2, #0
 8008a2a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008a2e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008a32:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008a36:	4688      	mov	r8, r1
 8008a38:	4691      	mov	r9, r2
 8008a3a:	eb1a 0508 	adds.w	r5, sl, r8
 8008a3e:	eb4b 0609 	adc.w	r6, fp, r9
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	4619      	mov	r1, r3
 8008a48:	f04f 0200 	mov.w	r2, #0
 8008a4c:	f04f 0300 	mov.w	r3, #0
 8008a50:	f04f 0400 	mov.w	r4, #0
 8008a54:	0094      	lsls	r4, r2, #2
 8008a56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008a5a:	008b      	lsls	r3, r1, #2
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	4623      	mov	r3, r4
 8008a60:	4628      	mov	r0, r5
 8008a62:	4631      	mov	r1, r6
 8008a64:	f7f7 fc04 	bl	8000270 <__aeabi_uldivmod>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	4b50      	ldr	r3, [pc, #320]	; (8008bb0 <UART_SetConfig+0x6f4>)
 8008a70:	fba3 2302 	umull	r2, r3, r3, r2
 8008a74:	095b      	lsrs	r3, r3, #5
 8008a76:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	469b      	mov	fp, r3
 8008a7e:	f04f 0c00 	mov.w	ip, #0
 8008a82:	46d9      	mov	r9, fp
 8008a84:	46e2      	mov	sl, ip
 8008a86:	eb19 0309 	adds.w	r3, r9, r9
 8008a8a:	eb4a 040a 	adc.w	r4, sl, sl
 8008a8e:	4699      	mov	r9, r3
 8008a90:	46a2      	mov	sl, r4
 8008a92:	eb19 090b 	adds.w	r9, r9, fp
 8008a96:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008a9a:	f04f 0100 	mov.w	r1, #0
 8008a9e:	f04f 0200 	mov.w	r2, #0
 8008aa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008aa6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008aaa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008aae:	4689      	mov	r9, r1
 8008ab0:	4692      	mov	sl, r2
 8008ab2:	eb1b 0509 	adds.w	r5, fp, r9
 8008ab6:	eb4c 060a 	adc.w	r6, ip, sl
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	4619      	mov	r1, r3
 8008ac0:	f04f 0200 	mov.w	r2, #0
 8008ac4:	f04f 0300 	mov.w	r3, #0
 8008ac8:	f04f 0400 	mov.w	r4, #0
 8008acc:	0094      	lsls	r4, r2, #2
 8008ace:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008ad2:	008b      	lsls	r3, r1, #2
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	4623      	mov	r3, r4
 8008ad8:	4628      	mov	r0, r5
 8008ada:	4631      	mov	r1, r6
 8008adc:	f7f7 fbc8 	bl	8000270 <__aeabi_uldivmod>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	460c      	mov	r4, r1
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	4b32      	ldr	r3, [pc, #200]	; (8008bb0 <UART_SetConfig+0x6f4>)
 8008ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8008aec:	095b      	lsrs	r3, r3, #5
 8008aee:	2164      	movs	r1, #100	; 0x64
 8008af0:	fb01 f303 	mul.w	r3, r1, r3
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	011b      	lsls	r3, r3, #4
 8008af8:	3332      	adds	r3, #50	; 0x32
 8008afa:	4a2d      	ldr	r2, [pc, #180]	; (8008bb0 <UART_SetConfig+0x6f4>)
 8008afc:	fba2 2303 	umull	r2, r3, r2, r3
 8008b00:	095b      	lsrs	r3, r3, #5
 8008b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b06:	4498      	add	r8, r3
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	469b      	mov	fp, r3
 8008b0c:	f04f 0c00 	mov.w	ip, #0
 8008b10:	46d9      	mov	r9, fp
 8008b12:	46e2      	mov	sl, ip
 8008b14:	eb19 0309 	adds.w	r3, r9, r9
 8008b18:	eb4a 040a 	adc.w	r4, sl, sl
 8008b1c:	4699      	mov	r9, r3
 8008b1e:	46a2      	mov	sl, r4
 8008b20:	eb19 090b 	adds.w	r9, r9, fp
 8008b24:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008b28:	f04f 0100 	mov.w	r1, #0
 8008b2c:	f04f 0200 	mov.w	r2, #0
 8008b30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b3c:	4689      	mov	r9, r1
 8008b3e:	4692      	mov	sl, r2
 8008b40:	eb1b 0509 	adds.w	r5, fp, r9
 8008b44:	eb4c 060a 	adc.w	r6, ip, sl
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	f04f 0200 	mov.w	r2, #0
 8008b52:	f04f 0300 	mov.w	r3, #0
 8008b56:	f04f 0400 	mov.w	r4, #0
 8008b5a:	0094      	lsls	r4, r2, #2
 8008b5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b60:	008b      	lsls	r3, r1, #2
 8008b62:	461a      	mov	r2, r3
 8008b64:	4623      	mov	r3, r4
 8008b66:	4628      	mov	r0, r5
 8008b68:	4631      	mov	r1, r6
 8008b6a:	f7f7 fb81 	bl	8000270 <__aeabi_uldivmod>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	460c      	mov	r4, r1
 8008b72:	461a      	mov	r2, r3
 8008b74:	4b0e      	ldr	r3, [pc, #56]	; (8008bb0 <UART_SetConfig+0x6f4>)
 8008b76:	fba3 1302 	umull	r1, r3, r3, r2
 8008b7a:	095b      	lsrs	r3, r3, #5
 8008b7c:	2164      	movs	r1, #100	; 0x64
 8008b7e:	fb01 f303 	mul.w	r3, r1, r3
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	011b      	lsls	r3, r3, #4
 8008b86:	3332      	adds	r3, #50	; 0x32
 8008b88:	4a09      	ldr	r2, [pc, #36]	; (8008bb0 <UART_SetConfig+0x6f4>)
 8008b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b8e:	095b      	lsrs	r3, r3, #5
 8008b90:	f003 020f 	and.w	r2, r3, #15
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4442      	add	r2, r8
 8008b9a:	609a      	str	r2, [r3, #8]
}
 8008b9c:	e7ff      	b.n	8008b9e <UART_SetConfig+0x6e2>
 8008b9e:	bf00      	nop
 8008ba0:	3714      	adds	r7, #20
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba8:	40011000 	.word	0x40011000
 8008bac:	40011400 	.word	0x40011400
 8008bb0:	51eb851f 	.word	0x51eb851f

08008bb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b084      	sub	sp, #16
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	f107 001c 	add.w	r0, r7, #28
 8008bc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d122      	bne.n	8008c12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d105      	bne.n	8008c06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f001 fab4 	bl	800a174 <USB_CoreReset>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	73fb      	strb	r3, [r7, #15]
 8008c10:	e01a      	b.n	8008c48 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f001 faa8 	bl	800a174 <USB_CoreReset>
 8008c24:	4603      	mov	r3, r0
 8008c26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d106      	bne.n	8008c3c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	639a      	str	r2, [r3, #56]	; 0x38
 8008c3a:	e005      	b.n	8008c48 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d10b      	bne.n	8008c66 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f043 0206 	orr.w	r2, r3, #6
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f043 0220 	orr.w	r2, r3, #32
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c72:	b004      	add	sp, #16
 8008c74:	4770      	bx	lr
	...

08008c78 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b087      	sub	sp, #28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	4613      	mov	r3, r2
 8008c84:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008c86:	79fb      	ldrb	r3, [r7, #7]
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d165      	bne.n	8008d58 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	4a41      	ldr	r2, [pc, #260]	; (8008d94 <USB_SetTurnaroundTime+0x11c>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d906      	bls.n	8008ca2 <USB_SetTurnaroundTime+0x2a>
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	4a40      	ldr	r2, [pc, #256]	; (8008d98 <USB_SetTurnaroundTime+0x120>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d802      	bhi.n	8008ca2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008c9c:	230f      	movs	r3, #15
 8008c9e:	617b      	str	r3, [r7, #20]
 8008ca0:	e062      	b.n	8008d68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	4a3c      	ldr	r2, [pc, #240]	; (8008d98 <USB_SetTurnaroundTime+0x120>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d906      	bls.n	8008cb8 <USB_SetTurnaroundTime+0x40>
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	4a3b      	ldr	r2, [pc, #236]	; (8008d9c <USB_SetTurnaroundTime+0x124>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d802      	bhi.n	8008cb8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008cb2:	230e      	movs	r3, #14
 8008cb4:	617b      	str	r3, [r7, #20]
 8008cb6:	e057      	b.n	8008d68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	4a38      	ldr	r2, [pc, #224]	; (8008d9c <USB_SetTurnaroundTime+0x124>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d906      	bls.n	8008cce <USB_SetTurnaroundTime+0x56>
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	4a37      	ldr	r2, [pc, #220]	; (8008da0 <USB_SetTurnaroundTime+0x128>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d802      	bhi.n	8008cce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008cc8:	230d      	movs	r3, #13
 8008cca:	617b      	str	r3, [r7, #20]
 8008ccc:	e04c      	b.n	8008d68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	4a33      	ldr	r2, [pc, #204]	; (8008da0 <USB_SetTurnaroundTime+0x128>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d906      	bls.n	8008ce4 <USB_SetTurnaroundTime+0x6c>
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	4a32      	ldr	r2, [pc, #200]	; (8008da4 <USB_SetTurnaroundTime+0x12c>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d802      	bhi.n	8008ce4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008cde:	230c      	movs	r3, #12
 8008ce0:	617b      	str	r3, [r7, #20]
 8008ce2:	e041      	b.n	8008d68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	4a2f      	ldr	r2, [pc, #188]	; (8008da4 <USB_SetTurnaroundTime+0x12c>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d906      	bls.n	8008cfa <USB_SetTurnaroundTime+0x82>
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	4a2e      	ldr	r2, [pc, #184]	; (8008da8 <USB_SetTurnaroundTime+0x130>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d802      	bhi.n	8008cfa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008cf4:	230b      	movs	r3, #11
 8008cf6:	617b      	str	r3, [r7, #20]
 8008cf8:	e036      	b.n	8008d68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	4a2a      	ldr	r2, [pc, #168]	; (8008da8 <USB_SetTurnaroundTime+0x130>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d906      	bls.n	8008d10 <USB_SetTurnaroundTime+0x98>
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	4a29      	ldr	r2, [pc, #164]	; (8008dac <USB_SetTurnaroundTime+0x134>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d802      	bhi.n	8008d10 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008d0a:	230a      	movs	r3, #10
 8008d0c:	617b      	str	r3, [r7, #20]
 8008d0e:	e02b      	b.n	8008d68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	4a26      	ldr	r2, [pc, #152]	; (8008dac <USB_SetTurnaroundTime+0x134>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d906      	bls.n	8008d26 <USB_SetTurnaroundTime+0xae>
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	4a25      	ldr	r2, [pc, #148]	; (8008db0 <USB_SetTurnaroundTime+0x138>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d802      	bhi.n	8008d26 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008d20:	2309      	movs	r3, #9
 8008d22:	617b      	str	r3, [r7, #20]
 8008d24:	e020      	b.n	8008d68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	4a21      	ldr	r2, [pc, #132]	; (8008db0 <USB_SetTurnaroundTime+0x138>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d906      	bls.n	8008d3c <USB_SetTurnaroundTime+0xc4>
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	4a20      	ldr	r2, [pc, #128]	; (8008db4 <USB_SetTurnaroundTime+0x13c>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d802      	bhi.n	8008d3c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008d36:	2308      	movs	r3, #8
 8008d38:	617b      	str	r3, [r7, #20]
 8008d3a:	e015      	b.n	8008d68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	4a1d      	ldr	r2, [pc, #116]	; (8008db4 <USB_SetTurnaroundTime+0x13c>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d906      	bls.n	8008d52 <USB_SetTurnaroundTime+0xda>
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	4a1c      	ldr	r2, [pc, #112]	; (8008db8 <USB_SetTurnaroundTime+0x140>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d802      	bhi.n	8008d52 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008d4c:	2307      	movs	r3, #7
 8008d4e:	617b      	str	r3, [r7, #20]
 8008d50:	e00a      	b.n	8008d68 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008d52:	2306      	movs	r3, #6
 8008d54:	617b      	str	r3, [r7, #20]
 8008d56:	e007      	b.n	8008d68 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008d58:	79fb      	ldrb	r3, [r7, #7]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d102      	bne.n	8008d64 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008d5e:	2309      	movs	r3, #9
 8008d60:	617b      	str	r3, [r7, #20]
 8008d62:	e001      	b.n	8008d68 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008d64:	2309      	movs	r3, #9
 8008d66:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	68da      	ldr	r2, [r3, #12]
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	029b      	lsls	r3, r3, #10
 8008d7c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008d80:	431a      	orrs	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	371c      	adds	r7, #28
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	00d8acbf 	.word	0x00d8acbf
 8008d98:	00e4e1bf 	.word	0x00e4e1bf
 8008d9c:	00f423ff 	.word	0x00f423ff
 8008da0:	0106737f 	.word	0x0106737f
 8008da4:	011a499f 	.word	0x011a499f
 8008da8:	01312cff 	.word	0x01312cff
 8008dac:	014ca43f 	.word	0x014ca43f
 8008db0:	016e35ff 	.word	0x016e35ff
 8008db4:	01a6ab1f 	.word	0x01a6ab1f
 8008db8:	01e847ff 	.word	0x01e847ff

08008dbc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f043 0201 	orr.w	r2, r3, #1
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008dde:	b480      	push	{r7}
 8008de0:	b083      	sub	sp, #12
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	f023 0201 	bic.w	r2, r3, #1
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	460b      	mov	r3, r1
 8008e0a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008e18:	78fb      	ldrb	r3, [r7, #3]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d106      	bne.n	8008e2c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	60da      	str	r2, [r3, #12]
 8008e2a:	e00b      	b.n	8008e44 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008e2c:	78fb      	ldrb	r3, [r7, #3]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d106      	bne.n	8008e40 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	60da      	str	r2, [r3, #12]
 8008e3e:	e001      	b.n	8008e44 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	e003      	b.n	8008e4c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008e44:	2032      	movs	r0, #50	; 0x32
 8008e46:	f7f9 fc67 	bl	8002718 <HAL_Delay>

  return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e54:	b084      	sub	sp, #16
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b086      	sub	sp, #24
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008e62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008e6e:	2300      	movs	r3, #0
 8008e70:	613b      	str	r3, [r7, #16]
 8008e72:	e009      	b.n	8008e88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	3340      	adds	r3, #64	; 0x40
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	4413      	add	r3, r2
 8008e7e:	2200      	movs	r2, #0
 8008e80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	3301      	adds	r3, #1
 8008e86:	613b      	str	r3, [r7, #16]
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	2b0e      	cmp	r3, #14
 8008e8c:	d9f2      	bls.n	8008e74 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d11c      	bne.n	8008ece <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ea2:	f043 0302 	orr.w	r3, r3, #2
 8008ea6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	639a      	str	r2, [r3, #56]	; 0x38
 8008ecc:	e00b      	b.n	8008ee6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ede:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008eec:	461a      	mov	r2, r3
 8008eee:	2300      	movs	r3, #0
 8008ef0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef8:	4619      	mov	r1, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f00:	461a      	mov	r2, r3
 8008f02:	680b      	ldr	r3, [r1, #0]
 8008f04:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d10c      	bne.n	8008f26 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d104      	bne.n	8008f1c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008f12:	2100      	movs	r1, #0
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f949 	bl	80091ac <USB_SetDevSpeed>
 8008f1a:	e008      	b.n	8008f2e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008f1c:	2101      	movs	r1, #1
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f944 	bl	80091ac <USB_SetDevSpeed>
 8008f24:	e003      	b.n	8008f2e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008f26:	2103      	movs	r1, #3
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f93f 	bl	80091ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f2e:	2110      	movs	r1, #16
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 f8f3 	bl	800911c <USB_FlushTxFifo>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 f911 	bl	8009168 <USB_FlushRxFifo>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d001      	beq.n	8008f50 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f56:	461a      	mov	r2, r3
 8008f58:	2300      	movs	r3, #0
 8008f5a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f62:	461a      	mov	r2, r3
 8008f64:	2300      	movs	r3, #0
 8008f66:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f6e:	461a      	mov	r2, r3
 8008f70:	2300      	movs	r3, #0
 8008f72:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f74:	2300      	movs	r3, #0
 8008f76:	613b      	str	r3, [r7, #16]
 8008f78:	e043      	b.n	8009002 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	015a      	lsls	r2, r3, #5
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	4413      	add	r3, r2
 8008f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f90:	d118      	bne.n	8008fc4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10a      	bne.n	8008fae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	015a      	lsls	r2, r3, #5
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008faa:	6013      	str	r3, [r2, #0]
 8008fac:	e013      	b.n	8008fd6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	015a      	lsls	r2, r3, #5
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fba:	461a      	mov	r2, r3
 8008fbc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008fc0:	6013      	str	r3, [r2, #0]
 8008fc2:	e008      	b.n	8008fd6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	015a      	lsls	r2, r3, #5
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	4413      	add	r3, r2
 8008fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	015a      	lsls	r2, r3, #5
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	4413      	add	r3, r2
 8008fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	015a      	lsls	r2, r3, #5
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	4413      	add	r3, r2
 8008ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ffa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	3301      	adds	r3, #1
 8009000:	613b      	str	r3, [r7, #16]
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	693a      	ldr	r2, [r7, #16]
 8009006:	429a      	cmp	r2, r3
 8009008:	d3b7      	bcc.n	8008f7a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800900a:	2300      	movs	r3, #0
 800900c:	613b      	str	r3, [r7, #16]
 800900e:	e043      	b.n	8009098 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	015a      	lsls	r2, r3, #5
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	4413      	add	r3, r2
 8009018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009022:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009026:	d118      	bne.n	800905a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10a      	bne.n	8009044 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	015a      	lsls	r2, r3, #5
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	4413      	add	r3, r2
 8009036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800903a:	461a      	mov	r2, r3
 800903c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009040:	6013      	str	r3, [r2, #0]
 8009042:	e013      	b.n	800906c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	015a      	lsls	r2, r3, #5
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	4413      	add	r3, r2
 800904c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009050:	461a      	mov	r2, r3
 8009052:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	e008      	b.n	800906c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	015a      	lsls	r2, r3, #5
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	4413      	add	r3, r2
 8009062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009066:	461a      	mov	r2, r3
 8009068:	2300      	movs	r3, #0
 800906a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	015a      	lsls	r2, r3, #5
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	4413      	add	r3, r2
 8009074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009078:	461a      	mov	r2, r3
 800907a:	2300      	movs	r3, #0
 800907c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	015a      	lsls	r2, r3, #5
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	4413      	add	r3, r2
 8009086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800908a:	461a      	mov	r2, r3
 800908c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009090:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	3301      	adds	r3, #1
 8009096:	613b      	str	r3, [r7, #16]
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	693a      	ldr	r2, [r7, #16]
 800909c:	429a      	cmp	r2, r3
 800909e:	d3b7      	bcc.n	8009010 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80090c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80090c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d105      	bne.n	80090d4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	f043 0210 	orr.w	r2, r3, #16
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	699a      	ldr	r2, [r3, #24]
 80090d8:	4b0f      	ldr	r3, [pc, #60]	; (8009118 <USB_DevInit+0x2c4>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80090e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d005      	beq.n	80090f2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	f043 0208 	orr.w	r2, r3, #8
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80090f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d107      	bne.n	8009108 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	699b      	ldr	r3, [r3, #24]
 80090fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009100:	f043 0304 	orr.w	r3, r3, #4
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009108:	7dfb      	ldrb	r3, [r7, #23]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3718      	adds	r7, #24
 800910e:	46bd      	mov	sp, r7
 8009110:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009114:	b004      	add	sp, #16
 8009116:	4770      	bx	lr
 8009118:	803c3800 	.word	0x803c3800

0800911c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009126:	2300      	movs	r3, #0
 8009128:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	019b      	lsls	r3, r3, #6
 800912e:	f043 0220 	orr.w	r2, r3, #32
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	3301      	adds	r3, #1
 800913a:	60fb      	str	r3, [r7, #12]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	4a09      	ldr	r2, [pc, #36]	; (8009164 <USB_FlushTxFifo+0x48>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d901      	bls.n	8009148 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009144:	2303      	movs	r3, #3
 8009146:	e006      	b.n	8009156 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	f003 0320 	and.w	r3, r3, #32
 8009150:	2b20      	cmp	r3, #32
 8009152:	d0f0      	beq.n	8009136 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3714      	adds	r7, #20
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	00030d40 	.word	0x00030d40

08009168 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009170:	2300      	movs	r3, #0
 8009172:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2210      	movs	r2, #16
 8009178:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3301      	adds	r3, #1
 800917e:	60fb      	str	r3, [r7, #12]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	4a09      	ldr	r2, [pc, #36]	; (80091a8 <USB_FlushRxFifo+0x40>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d901      	bls.n	800918c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009188:	2303      	movs	r3, #3
 800918a:	e006      	b.n	800919a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	f003 0310 	and.w	r3, r3, #16
 8009194:	2b10      	cmp	r3, #16
 8009196:	d0f0      	beq.n	800917a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3714      	adds	r7, #20
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	00030d40 	.word	0x00030d40

080091ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	78fb      	ldrb	r3, [r7, #3]
 80091c6:	68f9      	ldr	r1, [r7, #12]
 80091c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091cc:	4313      	orrs	r3, r2
 80091ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3714      	adds	r7, #20
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80091de:	b480      	push	{r7}
 80091e0:	b087      	sub	sp, #28
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f003 0306 	and.w	r3, r3, #6
 80091f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d102      	bne.n	8009204 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80091fe:	2300      	movs	r3, #0
 8009200:	75fb      	strb	r3, [r7, #23]
 8009202:	e00a      	b.n	800921a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2b02      	cmp	r3, #2
 8009208:	d002      	beq.n	8009210 <USB_GetDevSpeed+0x32>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2b06      	cmp	r3, #6
 800920e:	d102      	bne.n	8009216 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009210:	2302      	movs	r3, #2
 8009212:	75fb      	strb	r3, [r7, #23]
 8009214:	e001      	b.n	800921a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009216:	230f      	movs	r3, #15
 8009218:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800921a:	7dfb      	ldrb	r3, [r7, #23]
}
 800921c:	4618      	mov	r0, r3
 800921e:	371c      	adds	r7, #28
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	785b      	ldrb	r3, [r3, #1]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d13a      	bne.n	80092ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800924a:	69da      	ldr	r2, [r3, #28]
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	f003 030f 	and.w	r3, r3, #15
 8009254:	2101      	movs	r1, #1
 8009256:	fa01 f303 	lsl.w	r3, r1, r3
 800925a:	b29b      	uxth	r3, r3
 800925c:	68f9      	ldr	r1, [r7, #12]
 800925e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009262:	4313      	orrs	r3, r2
 8009264:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	4413      	add	r3, r2
 800926e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d155      	bne.n	8009328 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	015a      	lsls	r2, r3, #5
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	4413      	add	r3, r2
 8009284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	78db      	ldrb	r3, [r3, #3]
 8009296:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009298:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	059b      	lsls	r3, r3, #22
 800929e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80092a0:	4313      	orrs	r3, r2
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	0151      	lsls	r1, r2, #5
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	440a      	add	r2, r1
 80092aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092b6:	6013      	str	r3, [r2, #0]
 80092b8:	e036      	b.n	8009328 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092c0:	69da      	ldr	r2, [r3, #28]
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	f003 030f 	and.w	r3, r3, #15
 80092ca:	2101      	movs	r1, #1
 80092cc:	fa01 f303 	lsl.w	r3, r1, r3
 80092d0:	041b      	lsls	r3, r3, #16
 80092d2:	68f9      	ldr	r1, [r7, #12]
 80092d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092d8:	4313      	orrs	r3, r2
 80092da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	015a      	lsls	r2, r3, #5
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d11a      	bne.n	8009328 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	015a      	lsls	r2, r3, #5
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	4413      	add	r3, r2
 80092fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	78db      	ldrb	r3, [r3, #3]
 800930c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800930e:	430b      	orrs	r3, r1
 8009310:	4313      	orrs	r3, r2
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	0151      	lsls	r1, r2, #5
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	440a      	add	r2, r1
 800931a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800931e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009326:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3714      	adds	r7, #20
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
	...

08009338 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	785b      	ldrb	r3, [r3, #1]
 8009350:	2b01      	cmp	r3, #1
 8009352:	d161      	bne.n	8009418 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	015a      	lsls	r2, r3, #5
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	4413      	add	r3, r2
 800935c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800936a:	d11f      	bne.n	80093ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	015a      	lsls	r2, r3, #5
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	4413      	add	r3, r2
 8009374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	0151      	lsls	r1, r2, #5
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	440a      	add	r2, r1
 8009382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009386:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800938a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	4413      	add	r3, r2
 8009394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	0151      	lsls	r1, r2, #5
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	440a      	add	r2, r1
 80093a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	f003 030f 	and.w	r3, r3, #15
 80093bc:	2101      	movs	r1, #1
 80093be:	fa01 f303 	lsl.w	r3, r1, r3
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	43db      	mvns	r3, r3
 80093c6:	68f9      	ldr	r1, [r7, #12]
 80093c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093cc:	4013      	ands	r3, r2
 80093ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093d6:	69da      	ldr	r2, [r3, #28]
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	f003 030f 	and.w	r3, r3, #15
 80093e0:	2101      	movs	r1, #1
 80093e2:	fa01 f303 	lsl.w	r3, r1, r3
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	43db      	mvns	r3, r3
 80093ea:	68f9      	ldr	r1, [r7, #12]
 80093ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093f0:	4013      	ands	r3, r2
 80093f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	015a      	lsls	r2, r3, #5
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	4413      	add	r3, r2
 80093fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	0159      	lsls	r1, r3, #5
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	440b      	add	r3, r1
 800940a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800940e:	4619      	mov	r1, r3
 8009410:	4b35      	ldr	r3, [pc, #212]	; (80094e8 <USB_DeactivateEndpoint+0x1b0>)
 8009412:	4013      	ands	r3, r2
 8009414:	600b      	str	r3, [r1, #0]
 8009416:	e060      	b.n	80094da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	015a      	lsls	r2, r3, #5
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4413      	add	r3, r2
 8009420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800942a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800942e:	d11f      	bne.n	8009470 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	015a      	lsls	r2, r3, #5
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	4413      	add	r3, r2
 8009438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	0151      	lsls	r1, r2, #5
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	440a      	add	r2, r1
 8009446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800944a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800944e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	4413      	add	r3, r2
 8009458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68ba      	ldr	r2, [r7, #8]
 8009460:	0151      	lsls	r1, r2, #5
 8009462:	68fa      	ldr	r2, [r7, #12]
 8009464:	440a      	add	r2, r1
 8009466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800946a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800946e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	f003 030f 	and.w	r3, r3, #15
 8009480:	2101      	movs	r1, #1
 8009482:	fa01 f303 	lsl.w	r3, r1, r3
 8009486:	041b      	lsls	r3, r3, #16
 8009488:	43db      	mvns	r3, r3
 800948a:	68f9      	ldr	r1, [r7, #12]
 800948c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009490:	4013      	ands	r3, r2
 8009492:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800949a:	69da      	ldr	r2, [r3, #28]
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	f003 030f 	and.w	r3, r3, #15
 80094a4:	2101      	movs	r1, #1
 80094a6:	fa01 f303 	lsl.w	r3, r1, r3
 80094aa:	041b      	lsls	r3, r3, #16
 80094ac:	43db      	mvns	r3, r3
 80094ae:	68f9      	ldr	r1, [r7, #12]
 80094b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094b4:	4013      	ands	r3, r2
 80094b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	015a      	lsls	r2, r3, #5
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	4413      	add	r3, r2
 80094c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	0159      	lsls	r1, r3, #5
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	440b      	add	r3, r1
 80094ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d2:	4619      	mov	r1, r3
 80094d4:	4b05      	ldr	r3, [pc, #20]	; (80094ec <USB_DeactivateEndpoint+0x1b4>)
 80094d6:	4013      	ands	r3, r2
 80094d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80094da:	2300      	movs	r3, #0
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	ec337800 	.word	0xec337800
 80094ec:	eff37800 	.word	0xeff37800

080094f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b08a      	sub	sp, #40	; 0x28
 80094f4:	af02      	add	r7, sp, #8
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	4613      	mov	r3, r2
 80094fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	785b      	ldrb	r3, [r3, #1]
 800950c:	2b01      	cmp	r3, #1
 800950e:	f040 815c 	bne.w	80097ca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d132      	bne.n	8009580 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	015a      	lsls	r2, r3, #5
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	4413      	add	r3, r2
 8009522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009526:	691b      	ldr	r3, [r3, #16]
 8009528:	69ba      	ldr	r2, [r7, #24]
 800952a:	0151      	lsls	r1, r2, #5
 800952c:	69fa      	ldr	r2, [r7, #28]
 800952e:	440a      	add	r2, r1
 8009530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009534:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009538:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800953c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	015a      	lsls	r2, r3, #5
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	4413      	add	r3, r2
 8009546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	69ba      	ldr	r2, [r7, #24]
 800954e:	0151      	lsls	r1, r2, #5
 8009550:	69fa      	ldr	r2, [r7, #28]
 8009552:	440a      	add	r2, r1
 8009554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009558:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800955c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	015a      	lsls	r2, r3, #5
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	4413      	add	r3, r2
 8009566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	69ba      	ldr	r2, [r7, #24]
 800956e:	0151      	lsls	r1, r2, #5
 8009570:	69fa      	ldr	r2, [r7, #28]
 8009572:	440a      	add	r2, r1
 8009574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009578:	0cdb      	lsrs	r3, r3, #19
 800957a:	04db      	lsls	r3, r3, #19
 800957c:	6113      	str	r3, [r2, #16]
 800957e:	e074      	b.n	800966a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	015a      	lsls	r2, r3, #5
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	4413      	add	r3, r2
 8009588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	69ba      	ldr	r2, [r7, #24]
 8009590:	0151      	lsls	r1, r2, #5
 8009592:	69fa      	ldr	r2, [r7, #28]
 8009594:	440a      	add	r2, r1
 8009596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800959a:	0cdb      	lsrs	r3, r3, #19
 800959c:	04db      	lsls	r3, r3, #19
 800959e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	015a      	lsls	r2, r3, #5
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	4413      	add	r3, r2
 80095a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	69ba      	ldr	r2, [r7, #24]
 80095b0:	0151      	lsls	r1, r2, #5
 80095b2:	69fa      	ldr	r2, [r7, #28]
 80095b4:	440a      	add	r2, r1
 80095b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	015a      	lsls	r2, r3, #5
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	4413      	add	r3, r2
 80095cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095d0:	691a      	ldr	r2, [r3, #16]
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	6959      	ldr	r1, [r3, #20]
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	440b      	add	r3, r1
 80095dc:	1e59      	subs	r1, r3, #1
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80095e6:	04d9      	lsls	r1, r3, #19
 80095e8:	4b9d      	ldr	r3, [pc, #628]	; (8009860 <USB_EPStartXfer+0x370>)
 80095ea:	400b      	ands	r3, r1
 80095ec:	69b9      	ldr	r1, [r7, #24]
 80095ee:	0148      	lsls	r0, r1, #5
 80095f0:	69f9      	ldr	r1, [r7, #28]
 80095f2:	4401      	add	r1, r0
 80095f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80095f8:	4313      	orrs	r3, r2
 80095fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80095fc:	69bb      	ldr	r3, [r7, #24]
 80095fe:	015a      	lsls	r2, r3, #5
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	4413      	add	r3, r2
 8009604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009608:	691a      	ldr	r2, [r3, #16]
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009612:	69b9      	ldr	r1, [r7, #24]
 8009614:	0148      	lsls	r0, r1, #5
 8009616:	69f9      	ldr	r1, [r7, #28]
 8009618:	4401      	add	r1, r0
 800961a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800961e:	4313      	orrs	r3, r2
 8009620:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	78db      	ldrb	r3, [r3, #3]
 8009626:	2b01      	cmp	r3, #1
 8009628:	d11f      	bne.n	800966a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	015a      	lsls	r2, r3, #5
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	4413      	add	r3, r2
 8009632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	69ba      	ldr	r2, [r7, #24]
 800963a:	0151      	lsls	r1, r2, #5
 800963c:	69fa      	ldr	r2, [r7, #28]
 800963e:	440a      	add	r2, r1
 8009640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009644:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009648:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	015a      	lsls	r2, r3, #5
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	4413      	add	r3, r2
 8009652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	69ba      	ldr	r2, [r7, #24]
 800965a:	0151      	lsls	r1, r2, #5
 800965c:	69fa      	ldr	r2, [r7, #28]
 800965e:	440a      	add	r2, r1
 8009660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009664:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009668:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800966a:	79fb      	ldrb	r3, [r7, #7]
 800966c:	2b01      	cmp	r3, #1
 800966e:	d14b      	bne.n	8009708 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d009      	beq.n	800968c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	015a      	lsls	r2, r3, #5
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	4413      	add	r3, r2
 8009680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009684:	461a      	mov	r2, r3
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	78db      	ldrb	r3, [r3, #3]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d128      	bne.n	80096e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d110      	bne.n	80096c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	015a      	lsls	r2, r3, #5
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	4413      	add	r3, r2
 80096ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	69ba      	ldr	r2, [r7, #24]
 80096b4:	0151      	lsls	r1, r2, #5
 80096b6:	69fa      	ldr	r2, [r7, #28]
 80096b8:	440a      	add	r2, r1
 80096ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80096c2:	6013      	str	r3, [r2, #0]
 80096c4:	e00f      	b.n	80096e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	015a      	lsls	r2, r3, #5
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	4413      	add	r3, r2
 80096ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	69ba      	ldr	r2, [r7, #24]
 80096d6:	0151      	lsls	r1, r2, #5
 80096d8:	69fa      	ldr	r2, [r7, #28]
 80096da:	440a      	add	r2, r1
 80096dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	015a      	lsls	r2, r3, #5
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	4413      	add	r3, r2
 80096ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	69ba      	ldr	r2, [r7, #24]
 80096f6:	0151      	lsls	r1, r2, #5
 80096f8:	69fa      	ldr	r2, [r7, #28]
 80096fa:	440a      	add	r2, r1
 80096fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009700:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009704:	6013      	str	r3, [r2, #0]
 8009706:	e12f      	b.n	8009968 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	015a      	lsls	r2, r3, #5
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	4413      	add	r3, r2
 8009710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	69ba      	ldr	r2, [r7, #24]
 8009718:	0151      	lsls	r1, r2, #5
 800971a:	69fa      	ldr	r2, [r7, #28]
 800971c:	440a      	add	r2, r1
 800971e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009722:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009726:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	78db      	ldrb	r3, [r3, #3]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d015      	beq.n	800975c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	695b      	ldr	r3, [r3, #20]
 8009734:	2b00      	cmp	r3, #0
 8009736:	f000 8117 	beq.w	8009968 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	f003 030f 	and.w	r3, r3, #15
 800974a:	2101      	movs	r1, #1
 800974c:	fa01 f303 	lsl.w	r3, r1, r3
 8009750:	69f9      	ldr	r1, [r7, #28]
 8009752:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009756:	4313      	orrs	r3, r2
 8009758:	634b      	str	r3, [r1, #52]	; 0x34
 800975a:	e105      	b.n	8009968 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009768:	2b00      	cmp	r3, #0
 800976a:	d110      	bne.n	800978e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	015a      	lsls	r2, r3, #5
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	4413      	add	r3, r2
 8009774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	69ba      	ldr	r2, [r7, #24]
 800977c:	0151      	lsls	r1, r2, #5
 800977e:	69fa      	ldr	r2, [r7, #28]
 8009780:	440a      	add	r2, r1
 8009782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009786:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800978a:	6013      	str	r3, [r2, #0]
 800978c:	e00f      	b.n	80097ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	015a      	lsls	r2, r3, #5
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	4413      	add	r3, r2
 8009796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	69ba      	ldr	r2, [r7, #24]
 800979e:	0151      	lsls	r1, r2, #5
 80097a0:	69fa      	ldr	r2, [r7, #28]
 80097a2:	440a      	add	r2, r1
 80097a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	68d9      	ldr	r1, [r3, #12]
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	781a      	ldrb	r2, [r3, #0]
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	695b      	ldr	r3, [r3, #20]
 80097ba:	b298      	uxth	r0, r3
 80097bc:	79fb      	ldrb	r3, [r7, #7]
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	4603      	mov	r3, r0
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f000 fa2b 	bl	8009c1e <USB_WritePacket>
 80097c8:	e0ce      	b.n	8009968 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	015a      	lsls	r2, r3, #5
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	4413      	add	r3, r2
 80097d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	69ba      	ldr	r2, [r7, #24]
 80097da:	0151      	lsls	r1, r2, #5
 80097dc:	69fa      	ldr	r2, [r7, #28]
 80097de:	440a      	add	r2, r1
 80097e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097e4:	0cdb      	lsrs	r3, r3, #19
 80097e6:	04db      	lsls	r3, r3, #19
 80097e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	015a      	lsls	r2, r3, #5
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	4413      	add	r3, r2
 80097f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	69ba      	ldr	r2, [r7, #24]
 80097fa:	0151      	lsls	r1, r2, #5
 80097fc:	69fa      	ldr	r2, [r7, #28]
 80097fe:	440a      	add	r2, r1
 8009800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009804:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009808:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800980c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d126      	bne.n	8009864 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	015a      	lsls	r2, r3, #5
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	4413      	add	r3, r2
 800981e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009822:	691a      	ldr	r2, [r3, #16]
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800982c:	69b9      	ldr	r1, [r7, #24]
 800982e:	0148      	lsls	r0, r1, #5
 8009830:	69f9      	ldr	r1, [r7, #28]
 8009832:	4401      	add	r1, r0
 8009834:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009838:	4313      	orrs	r3, r2
 800983a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	015a      	lsls	r2, r3, #5
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	4413      	add	r3, r2
 8009844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	69ba      	ldr	r2, [r7, #24]
 800984c:	0151      	lsls	r1, r2, #5
 800984e:	69fa      	ldr	r2, [r7, #28]
 8009850:	440a      	add	r2, r1
 8009852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009856:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800985a:	6113      	str	r3, [r2, #16]
 800985c:	e036      	b.n	80098cc <USB_EPStartXfer+0x3dc>
 800985e:	bf00      	nop
 8009860:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	695a      	ldr	r2, [r3, #20]
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	4413      	add	r3, r2
 800986e:	1e5a      	subs	r2, r3, #1
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	fbb2 f3f3 	udiv	r3, r2, r3
 8009878:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	015a      	lsls	r2, r3, #5
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	4413      	add	r3, r2
 8009882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009886:	691a      	ldr	r2, [r3, #16]
 8009888:	8afb      	ldrh	r3, [r7, #22]
 800988a:	04d9      	lsls	r1, r3, #19
 800988c:	4b39      	ldr	r3, [pc, #228]	; (8009974 <USB_EPStartXfer+0x484>)
 800988e:	400b      	ands	r3, r1
 8009890:	69b9      	ldr	r1, [r7, #24]
 8009892:	0148      	lsls	r0, r1, #5
 8009894:	69f9      	ldr	r1, [r7, #28]
 8009896:	4401      	add	r1, r0
 8009898:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800989c:	4313      	orrs	r3, r2
 800989e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	015a      	lsls	r2, r3, #5
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	4413      	add	r3, r2
 80098a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ac:	691a      	ldr	r2, [r3, #16]
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	8af9      	ldrh	r1, [r7, #22]
 80098b4:	fb01 f303 	mul.w	r3, r1, r3
 80098b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098bc:	69b9      	ldr	r1, [r7, #24]
 80098be:	0148      	lsls	r0, r1, #5
 80098c0:	69f9      	ldr	r1, [r7, #28]
 80098c2:	4401      	add	r1, r0
 80098c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80098c8:	4313      	orrs	r3, r2
 80098ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80098cc:	79fb      	ldrb	r3, [r7, #7]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d10d      	bne.n	80098ee <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d009      	beq.n	80098ee <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	68d9      	ldr	r1, [r3, #12]
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ea:	460a      	mov	r2, r1
 80098ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	78db      	ldrb	r3, [r3, #3]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d128      	bne.n	8009948 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009902:	2b00      	cmp	r3, #0
 8009904:	d110      	bne.n	8009928 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	015a      	lsls	r2, r3, #5
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	4413      	add	r3, r2
 800990e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	69ba      	ldr	r2, [r7, #24]
 8009916:	0151      	lsls	r1, r2, #5
 8009918:	69fa      	ldr	r2, [r7, #28]
 800991a:	440a      	add	r2, r1
 800991c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009920:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009924:	6013      	str	r3, [r2, #0]
 8009926:	e00f      	b.n	8009948 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	015a      	lsls	r2, r3, #5
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	4413      	add	r3, r2
 8009930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	69ba      	ldr	r2, [r7, #24]
 8009938:	0151      	lsls	r1, r2, #5
 800993a:	69fa      	ldr	r2, [r7, #28]
 800993c:	440a      	add	r2, r1
 800993e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009946:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	015a      	lsls	r2, r3, #5
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	4413      	add	r3, r2
 8009950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	69ba      	ldr	r2, [r7, #24]
 8009958:	0151      	lsls	r1, r2, #5
 800995a:	69fa      	ldr	r2, [r7, #28]
 800995c:	440a      	add	r2, r1
 800995e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009962:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009966:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3720      	adds	r7, #32
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	1ff80000 	.word	0x1ff80000

08009978 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009978:	b480      	push	{r7}
 800997a:	b087      	sub	sp, #28
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	4613      	mov	r3, r2
 8009984:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	785b      	ldrb	r3, [r3, #1]
 8009994:	2b01      	cmp	r3, #1
 8009996:	f040 80cd 	bne.w	8009b34 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	695b      	ldr	r3, [r3, #20]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d132      	bne.n	8009a08 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	015a      	lsls	r2, r3, #5
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	4413      	add	r3, r2
 80099aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	693a      	ldr	r2, [r7, #16]
 80099b2:	0151      	lsls	r1, r2, #5
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	440a      	add	r2, r1
 80099b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80099c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80099c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	015a      	lsls	r2, r3, #5
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	4413      	add	r3, r2
 80099ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	0151      	lsls	r1, r2, #5
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	440a      	add	r2, r1
 80099dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	015a      	lsls	r2, r3, #5
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	4413      	add	r3, r2
 80099ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	693a      	ldr	r2, [r7, #16]
 80099f6:	0151      	lsls	r1, r2, #5
 80099f8:	697a      	ldr	r2, [r7, #20]
 80099fa:	440a      	add	r2, r1
 80099fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a00:	0cdb      	lsrs	r3, r3, #19
 8009a02:	04db      	lsls	r3, r3, #19
 8009a04:	6113      	str	r3, [r2, #16]
 8009a06:	e04e      	b.n	8009aa6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	015a      	lsls	r2, r3, #5
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	4413      	add	r3, r2
 8009a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	693a      	ldr	r2, [r7, #16]
 8009a18:	0151      	lsls	r1, r2, #5
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	440a      	add	r2, r1
 8009a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a22:	0cdb      	lsrs	r3, r3, #19
 8009a24:	04db      	lsls	r3, r3, #19
 8009a26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	015a      	lsls	r2, r3, #5
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	4413      	add	r3, r2
 8009a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	693a      	ldr	r2, [r7, #16]
 8009a38:	0151      	lsls	r1, r2, #5
 8009a3a:	697a      	ldr	r2, [r7, #20]
 8009a3c:	440a      	add	r2, r1
 8009a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a4a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	695a      	ldr	r2, [r3, #20]
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d903      	bls.n	8009a60 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	689a      	ldr	r2, [r3, #8]
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	693a      	ldr	r2, [r7, #16]
 8009a70:	0151      	lsls	r1, r2, #5
 8009a72:	697a      	ldr	r2, [r7, #20]
 8009a74:	440a      	add	r2, r1
 8009a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	015a      	lsls	r2, r3, #5
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	4413      	add	r3, r2
 8009a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a8c:	691a      	ldr	r2, [r3, #16]
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	695b      	ldr	r3, [r3, #20]
 8009a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a96:	6939      	ldr	r1, [r7, #16]
 8009a98:	0148      	lsls	r0, r1, #5
 8009a9a:	6979      	ldr	r1, [r7, #20]
 8009a9c:	4401      	add	r1, r0
 8009a9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009aa6:	79fb      	ldrb	r3, [r7, #7]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d11e      	bne.n	8009aea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d009      	beq.n	8009ac8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	015a      	lsls	r2, r3, #5
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	4413      	add	r3, r2
 8009abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	0151      	lsls	r1, r2, #5
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	440a      	add	r2, r1
 8009ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ae2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ae6:	6013      	str	r3, [r2, #0]
 8009ae8:	e092      	b.n	8009c10 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	015a      	lsls	r2, r3, #5
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	4413      	add	r3, r2
 8009af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	693a      	ldr	r2, [r7, #16]
 8009afa:	0151      	lsls	r1, r2, #5
 8009afc:	697a      	ldr	r2, [r7, #20]
 8009afe:	440a      	add	r2, r1
 8009b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b08:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d07e      	beq.n	8009c10 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	f003 030f 	and.w	r3, r3, #15
 8009b22:	2101      	movs	r1, #1
 8009b24:	fa01 f303 	lsl.w	r3, r1, r3
 8009b28:	6979      	ldr	r1, [r7, #20]
 8009b2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	634b      	str	r3, [r1, #52]	; 0x34
 8009b32:	e06d      	b.n	8009c10 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	015a      	lsls	r2, r3, #5
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	693a      	ldr	r2, [r7, #16]
 8009b44:	0151      	lsls	r1, r2, #5
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	440a      	add	r2, r1
 8009b4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b4e:	0cdb      	lsrs	r3, r3, #19
 8009b50:	04db      	lsls	r3, r3, #19
 8009b52:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	015a      	lsls	r2, r3, #5
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	0151      	lsls	r1, r2, #5
 8009b66:	697a      	ldr	r2, [r7, #20]
 8009b68:	440a      	add	r2, r1
 8009b6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009b72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009b76:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	695b      	ldr	r3, [r3, #20]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d003      	beq.n	8009b88 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	689a      	ldr	r2, [r3, #8]
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	015a      	lsls	r2, r3, #5
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	4413      	add	r3, r2
 8009b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	693a      	ldr	r2, [r7, #16]
 8009b98:	0151      	lsls	r1, r2, #5
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	440a      	add	r2, r1
 8009b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ba2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ba6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	015a      	lsls	r2, r3, #5
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	4413      	add	r3, r2
 8009bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bb4:	691a      	ldr	r2, [r3, #16]
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bbe:	6939      	ldr	r1, [r7, #16]
 8009bc0:	0148      	lsls	r0, r1, #5
 8009bc2:	6979      	ldr	r1, [r7, #20]
 8009bc4:	4401      	add	r1, r0
 8009bc6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009bce:	79fb      	ldrb	r3, [r7, #7]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d10d      	bne.n	8009bf0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d009      	beq.n	8009bf0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	68d9      	ldr	r1, [r3, #12]
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	015a      	lsls	r2, r3, #5
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	4413      	add	r3, r2
 8009be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bec:	460a      	mov	r2, r1
 8009bee:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	015a      	lsls	r2, r3, #5
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	693a      	ldr	r2, [r7, #16]
 8009c00:	0151      	lsls	r1, r2, #5
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	440a      	add	r2, r1
 8009c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	371c      	adds	r7, #28
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr

08009c1e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009c1e:	b480      	push	{r7}
 8009c20:	b089      	sub	sp, #36	; 0x24
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	60f8      	str	r0, [r7, #12]
 8009c26:	60b9      	str	r1, [r7, #8]
 8009c28:	4611      	mov	r1, r2
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	71fb      	strb	r3, [r7, #7]
 8009c30:	4613      	mov	r3, r2
 8009c32:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009c3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d11a      	bne.n	8009c7a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009c44:	88bb      	ldrh	r3, [r7, #4]
 8009c46:	3303      	adds	r3, #3
 8009c48:	089b      	lsrs	r3, r3, #2
 8009c4a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	61bb      	str	r3, [r7, #24]
 8009c50:	e00f      	b.n	8009c72 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009c52:	79fb      	ldrb	r3, [r7, #7]
 8009c54:	031a      	lsls	r2, r3, #12
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c5e:	461a      	mov	r2, r3
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	3304      	adds	r3, #4
 8009c6a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	61bb      	str	r3, [r7, #24]
 8009c72:	69ba      	ldr	r2, [r7, #24]
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d3eb      	bcc.n	8009c52 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3724      	adds	r7, #36	; 0x24
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b089      	sub	sp, #36	; 0x24
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	4613      	mov	r3, r2
 8009c94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009c9e:	88fb      	ldrh	r3, [r7, #6]
 8009ca0:	3303      	adds	r3, #3
 8009ca2:	089b      	lsrs	r3, r3, #2
 8009ca4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	61bb      	str	r3, [r7, #24]
 8009caa:	e00b      	b.n	8009cc4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	601a      	str	r2, [r3, #0]
    pDest++;
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	3304      	adds	r3, #4
 8009cbc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	61bb      	str	r3, [r7, #24]
 8009cc4:	69ba      	ldr	r2, [r7, #24]
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d3ef      	bcc.n	8009cac <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009ccc:	69fb      	ldr	r3, [r7, #28]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3724      	adds	r7, #36	; 0x24
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009cda:	b480      	push	{r7}
 8009cdc:	b085      	sub	sp, #20
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	785b      	ldrb	r3, [r3, #1]
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d12c      	bne.n	8009d50 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	015a      	lsls	r2, r3, #5
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	db12      	blt.n	8009d2e <USB_EPSetStall+0x54>
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00f      	beq.n	8009d2e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	015a      	lsls	r2, r3, #5
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	4413      	add	r3, r2
 8009d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	0151      	lsls	r1, r2, #5
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	440a      	add	r2, r1
 8009d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009d2c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	015a      	lsls	r2, r3, #5
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	4413      	add	r3, r2
 8009d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	0151      	lsls	r1, r2, #5
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	440a      	add	r2, r1
 8009d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009d4c:	6013      	str	r3, [r2, #0]
 8009d4e:	e02b      	b.n	8009da8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	015a      	lsls	r2, r3, #5
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	4413      	add	r3, r2
 8009d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	db12      	blt.n	8009d88 <USB_EPSetStall+0xae>
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00f      	beq.n	8009d88 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	0151      	lsls	r1, r2, #5
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	440a      	add	r2, r1
 8009d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009d86:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	0151      	lsls	r1, r2, #5
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	440a      	add	r2, r1
 8009d9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009da2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009da6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3714      	adds	r7, #20
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr

08009db6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009db6:	b480      	push	{r7}
 8009db8:	b085      	sub	sp, #20
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	785b      	ldrb	r3, [r3, #1]
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d128      	bne.n	8009e24 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	015a      	lsls	r2, r3, #5
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	4413      	add	r3, r2
 8009dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68ba      	ldr	r2, [r7, #8]
 8009de2:	0151      	lsls	r1, r2, #5
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	440a      	add	r2, r1
 8009de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009df0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	78db      	ldrb	r3, [r3, #3]
 8009df6:	2b03      	cmp	r3, #3
 8009df8:	d003      	beq.n	8009e02 <USB_EPClearStall+0x4c>
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	78db      	ldrb	r3, [r3, #3]
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d138      	bne.n	8009e74 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	015a      	lsls	r2, r3, #5
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	4413      	add	r3, r2
 8009e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	68ba      	ldr	r2, [r7, #8]
 8009e12:	0151      	lsls	r1, r2, #5
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	440a      	add	r2, r1
 8009e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e20:	6013      	str	r3, [r2, #0]
 8009e22:	e027      	b.n	8009e74 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	015a      	lsls	r2, r3, #5
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	0151      	lsls	r1, r2, #5
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	440a      	add	r2, r1
 8009e3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	78db      	ldrb	r3, [r3, #3]
 8009e48:	2b03      	cmp	r3, #3
 8009e4a:	d003      	beq.n	8009e54 <USB_EPClearStall+0x9e>
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	78db      	ldrb	r3, [r3, #3]
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	d10f      	bne.n	8009e74 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	0151      	lsls	r1, r2, #5
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	440a      	add	r2, r1
 8009e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e72:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009e82:	b480      	push	{r7}
 8009e84:	b085      	sub	sp, #20
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ea0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009ea4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	78fb      	ldrb	r3, [r7, #3]
 8009eb0:	011b      	lsls	r3, r3, #4
 8009eb2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009eb6:	68f9      	ldr	r1, [r7, #12]
 8009eb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3714      	adds	r7, #20
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr

08009ece <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b084      	sub	sp, #16
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ee8:	f023 0302 	bic.w	r3, r3, #2
 8009eec:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009eee:	2003      	movs	r0, #3
 8009ef0:	f7f8 fc12 	bl	8002718 <HAL_Delay>

  return HAL_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b084      	sub	sp, #16
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f18:	f043 0302 	orr.w	r3, r3, #2
 8009f1c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009f1e:	2003      	movs	r0, #3
 8009f20:	f7f8 fbfa 	bl	8002718 <HAL_Delay>

  return HAL_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009f2e:	b480      	push	{r7}
 8009f30:	b085      	sub	sp, #20
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	695b      	ldr	r3, [r3, #20]
 8009f3a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	4013      	ands	r3, r2
 8009f44:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009f46:	68fb      	ldr	r3, [r7, #12]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3714      	adds	r7, #20
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f70:	69db      	ldr	r3, [r3, #28]
 8009f72:	68ba      	ldr	r2, [r7, #8]
 8009f74:	4013      	ands	r3, r2
 8009f76:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	0c1b      	lsrs	r3, r3, #16
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3714      	adds	r7, #20
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f9a:	699b      	ldr	r3, [r3, #24]
 8009f9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fa4:	69db      	ldr	r3, [r3, #28]
 8009fa6:	68ba      	ldr	r2, [r7, #8]
 8009fa8:	4013      	ands	r3, r2
 8009faa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	b29b      	uxth	r3, r3
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3714      	adds	r7, #20
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009fcc:	78fb      	ldrb	r3, [r7, #3]
 8009fce:	015a      	lsls	r2, r3, #5
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fe2:	695b      	ldr	r3, [r3, #20]
 8009fe4:	68ba      	ldr	r2, [r7, #8]
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009fea:	68bb      	ldr	r3, [r7, #8]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3714      	adds	r7, #20
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b087      	sub	sp, #28
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	460b      	mov	r3, r1
 800a002:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a00e:	691b      	ldr	r3, [r3, #16]
 800a010:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a01a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a01c:	78fb      	ldrb	r3, [r7, #3]
 800a01e:	f003 030f 	and.w	r3, r3, #15
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	fa22 f303 	lsr.w	r3, r2, r3
 800a028:	01db      	lsls	r3, r3, #7
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	693a      	ldr	r2, [r7, #16]
 800a02e:	4313      	orrs	r3, r2
 800a030:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a032:	78fb      	ldrb	r3, [r7, #3]
 800a034:	015a      	lsls	r2, r3, #5
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	4413      	add	r3, r2
 800a03a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	693a      	ldr	r2, [r7, #16]
 800a042:	4013      	ands	r3, r2
 800a044:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a046:	68bb      	ldr	r3, [r7, #8]
}
 800a048:	4618      	mov	r0, r3
 800a04a:	371c      	adds	r7, #28
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	695b      	ldr	r3, [r3, #20]
 800a060:	f003 0301 	and.w	r3, r3, #1
}
 800a064:	4618      	mov	r0, r3
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a08a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a08e:	f023 0307 	bic.w	r3, r3, #7
 800a092:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3714      	adds	r7, #20
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
	...

0800a0b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b087      	sub	sp, #28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	607a      	str	r2, [r7, #4]
 800a0c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	333c      	adds	r3, #60	; 0x3c
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	4a26      	ldr	r2, [pc, #152]	; (800a170 <USB_EP0_OutStart+0xb8>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d90a      	bls.n	800a0f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0ec:	d101      	bne.n	800a0f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	e037      	b.n	800a162 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	697a      	ldr	r2, [r7, #20]
 800a108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a10c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a110:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a120:	f043 0318 	orr.w	r3, r3, #24
 800a124:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	697a      	ldr	r2, [r7, #20]
 800a130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a134:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a138:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a13a:	7afb      	ldrb	r3, [r7, #11]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d10f      	bne.n	800a160 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a146:	461a      	mov	r2, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	697a      	ldr	r2, [r7, #20]
 800a156:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a15a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a15e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	371c      	adds	r7, #28
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	4f54300a 	.word	0x4f54300a

0800a174 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a17c:	2300      	movs	r3, #0
 800a17e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	3301      	adds	r3, #1
 800a184:	60fb      	str	r3, [r7, #12]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	4a13      	ldr	r2, [pc, #76]	; (800a1d8 <USB_CoreReset+0x64>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d901      	bls.n	800a192 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a18e:	2303      	movs	r3, #3
 800a190:	e01b      	b.n	800a1ca <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	691b      	ldr	r3, [r3, #16]
 800a196:	2b00      	cmp	r3, #0
 800a198:	daf2      	bge.n	800a180 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a19a:	2300      	movs	r3, #0
 800a19c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	f043 0201 	orr.w	r2, r3, #1
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	60fb      	str	r3, [r7, #12]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	4a09      	ldr	r2, [pc, #36]	; (800a1d8 <USB_CoreReset+0x64>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d901      	bls.n	800a1bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	e006      	b.n	800a1ca <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	f003 0301 	and.w	r3, r3, #1
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d0f0      	beq.n	800a1aa <USB_CoreReset+0x36>

  return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	00030d40 	.word	0x00030d40

0800a1dc <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

    /* Allocate Audio structure */
  haudio = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 800a1e8:	f641 30d0 	movw	r0, #7120	; 0x1bd0
 800a1ec:	f002 fa68 	bl	800c6c0 <malloc>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d105      	bne.n	800a206 <USBD_AUDIO_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a202:	2302      	movs	r3, #2
 800a204:	e04b      	b.n	800a29e <USBD_AUDIO_Init+0xc2>
  }

  pdev->pClassData = (void *)haudio;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	7c1b      	ldrb	r3, [r3, #16]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d104      	bne.n	800a220 <USBD_AUDIO_Init+0x44>
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 800a21e:	e003      	b.n	800a228 <USBD_AUDIO_Init+0x4c>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800a228:	2358      	movs	r3, #88	; 0x58
 800a22a:	2201      	movs	r2, #1
 800a22c:	2101      	movs	r1, #1
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f002 f8cd 	bl	800c3ce <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2201      	movs	r2, #1
 800a238:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  haudio->alt_setting = 0U;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a248:	3304      	adds	r3, #4
 800a24a:	2203      	movs	r2, #3
 800a24c:	701a      	strb	r2, [r3, #0]
  haudio->wr_ptr = 0U;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a254:	3308      	adds	r3, #8
 800a256:	2200      	movs	r2, #0
 800a258:	801a      	strh	r2, [r3, #0]
  haudio->rd_ptr = 0U;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a260:	3306      	adds	r3, #6
 800a262:	2200      	movs	r2, #0
 800a264:	801a      	strh	r2, [r3, #0]
  haudio->rd_enable = 0U;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a26c:	3305      	adds	r3, #5
 800a26e:	2200      	movs	r2, #0
 800a270:	701a      	strb	r2, [r3, #0]

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2200      	movs	r2, #0
 800a27c:	2146      	movs	r1, #70	; 0x46
 800a27e:	f245 6054 	movw	r0, #22100	; 0x5654
 800a282:	4798      	blx	r3
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d001      	beq.n	800a28e <USBD_AUDIO_Init+0xb2>
                                                       AUDIO_DEFAULT_VOLUME,
                                                       0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 800a28a:	2303      	movs	r3, #3
 800a28c:	e007      	b.n	800a29e <USBD_AUDIO_Init+0xc2>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	1d1a      	adds	r2, r3, #4
 800a292:	2358      	movs	r3, #88	; 0x58
 800a294:	2101      	movs	r1, #1
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f002 f988 	bl	800c5ac <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b082      	sub	sp, #8
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 800a2b2:	2101      	movs	r1, #1
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f002 f8b0 	bl	800c41a <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = 0U;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d00f      	beq.n	800a2f4 <USBD_AUDIO_DeInit+0x4e>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	2000      	movs	r0, #0
 800a2de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f002 f9f2 	bl	800c6d0 <free>
    pdev->pClassData = NULL;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
	...

0800a300 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800a30a:	2300      	movs	r3, #0
 800a30c:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800a30e:	2300      	movs	r3, #0
 800a310:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a318:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a322:	2b00      	cmp	r3, #0
 800a324:	d01a      	beq.n	800a35c <USBD_AUDIO_Setup+0x5c>
 800a326:	2b20      	cmp	r3, #32
 800a328:	f040 809e 	bne.w	800a468 <USBD_AUDIO_Setup+0x168>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	785b      	ldrb	r3, [r3, #1]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d006      	beq.n	800a342 <USBD_AUDIO_Setup+0x42>
 800a334:	2b81      	cmp	r3, #129	; 0x81
 800a336:	d109      	bne.n	800a34c <USBD_AUDIO_Setup+0x4c>
    {
    case AUDIO_REQ_GET_CUR:
      AUDIO_REQ_GetCurrent(pdev, req);
 800a338:	6839      	ldr	r1, [r7, #0]
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f9a0 	bl	800a680 <AUDIO_REQ_GetCurrent>
      break;
 800a340:	e00b      	b.n	800a35a <USBD_AUDIO_Setup+0x5a>

    case AUDIO_REQ_SET_CUR:
      AUDIO_REQ_SetCurrent(pdev, req);
 800a342:	6839      	ldr	r1, [r7, #0]
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f9bb 	bl	800a6c0 <AUDIO_REQ_SetCurrent>
      break;
 800a34a:	e006      	b.n	800a35a <USBD_AUDIO_Setup+0x5a>

    default:
      USBD_CtlError(pdev, req);
 800a34c:	6839      	ldr	r1, [r7, #0]
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f001 fb36 	bl	800b9c0 <USBD_CtlError>
      ret = USBD_FAIL;
 800a354:	2303      	movs	r3, #3
 800a356:	75fb      	strb	r3, [r7, #23]
      break;
 800a358:	bf00      	nop
    }
    break;
 800a35a:	e08c      	b.n	800a476 <USBD_AUDIO_Setup+0x176>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	785b      	ldrb	r3, [r3, #1]
 800a360:	2b0b      	cmp	r3, #11
 800a362:	d876      	bhi.n	800a452 <USBD_AUDIO_Setup+0x152>
 800a364:	a201      	add	r2, pc, #4	; (adr r2, 800a36c <USBD_AUDIO_Setup+0x6c>)
 800a366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a36a:	bf00      	nop
 800a36c:	0800a39d 	.word	0x0800a39d
 800a370:	0800a461 	.word	0x0800a461
 800a374:	0800a453 	.word	0x0800a453
 800a378:	0800a453 	.word	0x0800a453
 800a37c:	0800a453 	.word	0x0800a453
 800a380:	0800a453 	.word	0x0800a453
 800a384:	0800a3c5 	.word	0x0800a3c5
 800a388:	0800a453 	.word	0x0800a453
 800a38c:	0800a453 	.word	0x0800a453
 800a390:	0800a453 	.word	0x0800a453
 800a394:	0800a3ef 	.word	0x0800a3ef
 800a398:	0800a415 	.word	0x0800a415
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3a2:	2b03      	cmp	r3, #3
 800a3a4:	d107      	bne.n	800a3b6 <USBD_AUDIO_Setup+0xb6>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a3a6:	f107 0308 	add.w	r3, r7, #8
 800a3aa:	2202      	movs	r2, #2
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f001 fb77 	bl	800baa2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a3b4:	e057      	b.n	800a466 <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f001 fb01 	bl	800b9c0 <USBD_CtlError>
        ret = USBD_FAIL;
 800a3be:	2303      	movs	r3, #3
 800a3c0:	75fb      	strb	r3, [r7, #23]
      break;
 800a3c2:	e050      	b.n	800a466 <USBD_AUDIO_Setup+0x166>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	885b      	ldrh	r3, [r3, #2]
 800a3c8:	0a1b      	lsrs	r3, r3, #8
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	2b21      	cmp	r3, #33	; 0x21
 800a3ce:	d149      	bne.n	800a464 <USBD_AUDIO_Setup+0x164>
      {
        pbuf = USBD_AUDIO_CfgDesc + 18;
 800a3d0:	4b2b      	ldr	r3, [pc, #172]	; (800a480 <USBD_AUDIO_Setup+0x180>)
 800a3d2:	60fb      	str	r3, [r7, #12]
        len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	88db      	ldrh	r3, [r3, #6]
 800a3d8:	2b09      	cmp	r3, #9
 800a3da:	bf28      	it	cs
 800a3dc:	2309      	movcs	r3, #9
 800a3de:	817b      	strh	r3, [r7, #10]

        (void)USBD_CtlSendData(pdev, pbuf, len);
 800a3e0:	897b      	ldrh	r3, [r7, #10]
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	68f9      	ldr	r1, [r7, #12]
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f001 fb5b 	bl	800baa2 <USBD_CtlSendData>
      }
      break;
 800a3ec:	e03a      	b.n	800a464 <USBD_AUDIO_Setup+0x164>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3f4:	2b03      	cmp	r3, #3
 800a3f6:	d106      	bne.n	800a406 <USBD_AUDIO_Setup+0x106>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f001 fb4f 	bl	800baa2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a404:	e02f      	b.n	800a466 <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 800a406:	6839      	ldr	r1, [r7, #0]
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f001 fad9 	bl	800b9c0 <USBD_CtlError>
        ret = USBD_FAIL;
 800a40e:	2303      	movs	r3, #3
 800a410:	75fb      	strb	r3, [r7, #23]
      break;
 800a412:	e028      	b.n	800a466 <USBD_AUDIO_Setup+0x166>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a41a:	2b03      	cmp	r3, #3
 800a41c:	d112      	bne.n	800a444 <USBD_AUDIO_Setup+0x144>
      {
        if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	885b      	ldrh	r3, [r3, #2]
 800a422:	b2db      	uxtb	r3, r3
 800a424:	2b02      	cmp	r3, #2
 800a426:	d806      	bhi.n	800a436 <USBD_AUDIO_Setup+0x136>
        {
          haudio->alt_setting = (uint8_t)(req->wValue);
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	885b      	ldrh	r3, [r3, #2]
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	461a      	mov	r2, r3
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	601a      	str	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a434:	e017      	b.n	800a466 <USBD_AUDIO_Setup+0x166>
          USBD_CtlError(pdev, req);
 800a436:	6839      	ldr	r1, [r7, #0]
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f001 fac1 	bl	800b9c0 <USBD_CtlError>
          ret = USBD_FAIL;
 800a43e:	2303      	movs	r3, #3
 800a440:	75fb      	strb	r3, [r7, #23]
      break;
 800a442:	e010      	b.n	800a466 <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 800a444:	6839      	ldr	r1, [r7, #0]
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f001 faba 	bl	800b9c0 <USBD_CtlError>
        ret = USBD_FAIL;
 800a44c:	2303      	movs	r3, #3
 800a44e:	75fb      	strb	r3, [r7, #23]
      break;
 800a450:	e009      	b.n	800a466 <USBD_AUDIO_Setup+0x166>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800a452:	6839      	ldr	r1, [r7, #0]
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f001 fab3 	bl	800b9c0 <USBD_CtlError>
      ret = USBD_FAIL;
 800a45a:	2303      	movs	r3, #3
 800a45c:	75fb      	strb	r3, [r7, #23]
      break;
 800a45e:	e002      	b.n	800a466 <USBD_AUDIO_Setup+0x166>
      break;
 800a460:	bf00      	nop
 800a462:	e008      	b.n	800a476 <USBD_AUDIO_Setup+0x176>
      break;
 800a464:	bf00      	nop
    }
    break;
 800a466:	e006      	b.n	800a476 <USBD_AUDIO_Setup+0x176>
  default:
    USBD_CtlError(pdev, req);
 800a468:	6839      	ldr	r1, [r7, #0]
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f001 faa8 	bl	800b9c0 <USBD_CtlError>
    ret = USBD_FAIL;
 800a470:	2303      	movs	r3, #3
 800a472:	75fb      	strb	r3, [r7, #23]
    break;
 800a474:	bf00      	nop
  }

  return (uint8_t)ret;
 800a476:	7dfb      	ldrb	r3, [r7, #23]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3718      	adds	r7, #24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	200000e2 	.word	0x200000e2

0800a484 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	226d      	movs	r2, #109	; 0x6d
 800a490:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 800a492:	4b03      	ldr	r3, [pc, #12]	; (800a4a0 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 800a494:	4618      	mov	r0, r3
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr
 800a4a0:	200000d0 	.word	0x200000d0

0800a4a4 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	370c      	adds	r7, #12
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr

0800a4be <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b084      	sub	sp, #16
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4cc:	60fb      	str	r3, [r7, #12]

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a4d4:	330a      	adds	r3, #10
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d11d      	bne.n	800a518 <USBD_AUDIO_EP0_RxReady+0x5a>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800a4e2:	330c      	adds	r3, #12
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	d116      	bne.n	800a518 <USBD_AUDIO_EP0_RxReady+0x5a>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4f0:	691a      	ldr	r2, [r3, #16]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a4f8:	330b      	adds	r3, #11
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	4790      	blx	r2
      haudio->control.cmd = 0U;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a506:	330a      	adds	r3, #10
 800a508:	2200      	movs	r2, #0
 800a50a:	701a      	strb	r2, [r3, #0]
      haudio->control.len = 0U;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800a512:	330b      	adds	r3, #11
 800a514:	2200      	movs	r2, #0
 800a516:	701a      	strb	r2, [r3, #0]
    }
  }

  return (uint8_t)USBD_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800a522:	b480      	push	{r7}
 800a524:	b083      	sub	sp, #12
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 800a52a:	2300      	movs	r3, #0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	370c      	adds	r7, #12
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a54e:	b480      	push	{r7}
 800a550:	b083      	sub	sp, #12
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	460b      	mov	r3, r1
 800a558:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	460b      	mov	r3, r1
 800a572:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	370c      	adds	r7, #12
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr

0800a582 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a582:	b590      	push	{r4, r7, lr}
 800a584:	b085      	sub	sp, #20
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
 800a58a:	460b      	mov	r3, r1
 800a58c:	70fb      	strb	r3, [r7, #3]
  uint16_t PacketSize;
  USBD_AUDIO_HandleTypeDef *haudio;

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a594:	60fb      	str	r3, [r7, #12]

  if (epnum == AUDIO_OUT_EP)
 800a596:	78fb      	ldrb	r3, [r7, #3]
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d16c      	bne.n	800a676 <USBD_AUDIO_DataOut+0xf4>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 800a59c:	78fb      	ldrb	r3, [r7, #3]
 800a59e:	4619      	mov	r1, r3
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f002 f824 	bl	800c5ee <USBD_LL_GetRxDataSize>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5b0:	695c      	ldr	r4, [r3, #20]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a5b8:	3308      	adds	r3, #8
 800a5ba:	881b      	ldrh	r3, [r3, #0]
 800a5bc:	461a      	mov	r2, r3
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	3304      	adds	r3, #4
 800a5c4:	8979      	ldrh	r1, [r7, #10]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	47a0      	blx	r4
                                                           PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a5d2:	3308      	adds	r3, #8
 800a5d4:	881a      	ldrh	r2, [r3, #0]
 800a5d6:	897b      	ldrh	r3, [r7, #10]
 800a5d8:	4413      	add	r3, r2
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a5e2:	3308      	adds	r3, #8
 800a5e4:	801a      	strh	r2, [r3, #0]

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a5ec:	3308      	adds	r3, #8
 800a5ee:	881b      	ldrh	r3, [r3, #0]
 800a5f0:	f5b3 5fdc 	cmp.w	r3, #7040	; 0x1b80
 800a5f4:	d11c      	bne.n	800a630 <USBD_AUDIO_DataOut+0xae>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a5fc:	3308      	adds	r3, #8
 800a5fe:	2200      	movs	r2, #0
 800a600:	801a      	strh	r2, [r3, #0]

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a608:	3304      	adds	r3, #4
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	2b03      	cmp	r3, #3
 800a60e:	d10f      	bne.n	800a630 <USBD_AUDIO_DataOut+0xae>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	1d10      	adds	r0, r2, #4
 800a61c:	2201      	movs	r2, #1
 800a61e:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 800a622:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a62a:	3304      	adds	r3, #4
 800a62c:	2200      	movs	r2, #0
 800a62e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (haudio->rd_enable == 0U)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a636:	3305      	adds	r3, #5
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d10d      	bne.n	800a65a <USBD_AUDIO_DataOut+0xd8>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a644:	3308      	adds	r3, #8
 800a646:	881b      	ldrh	r3, [r3, #0]
 800a648:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 800a64c:	d105      	bne.n	800a65a <USBD_AUDIO_DataOut+0xd8>
      {
        haudio->rd_enable = 1U;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a654:	3305      	adds	r3, #5
 800a656:	2201      	movs	r2, #1
 800a658:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
                                 &haudio->buffer[haudio->wr_ptr],
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a660:	3308      	adds	r3, #8
 800a662:	881b      	ldrh	r3, [r3, #0]
 800a664:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	4413      	add	r3, r2
 800a66a:	1d1a      	adds	r2, r3, #4
 800a66c:	2358      	movs	r3, #88	; 0x58
 800a66e:	2101      	movs	r1, #1
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f001 ff9b 	bl	800c5ac <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3714      	adds	r7, #20
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd90      	pop	{r4, r7, pc}

0800a680 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a690:	60fb      	str	r3, [r7, #12]

  (void)USBD_memset(haudio->control.data, 0, 64U);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a698:	330b      	adds	r3, #11
 800a69a:	2240      	movs	r2, #64	; 0x40
 800a69c:	2100      	movs	r1, #0
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f002 f81e 	bl	800c6e0 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a6aa:	330b      	adds	r3, #11
 800a6ac:	683a      	ldr	r2, [r7, #0]
 800a6ae:	88d2      	ldrh	r2, [r2, #6]
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f001 f9f5 	bl	800baa2 <USBD_CtlSendData>
}
 800a6b8:	bf00      	nop
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6d0:	60fb      	str	r3, [r7, #12]

  if (req->wLength != 0U)
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	88db      	ldrh	r3, [r3, #6]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d021      	beq.n	800a71e <AUDIO_REQ_SetCurrent+0x5e>
  {
    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a6e0:	330b      	adds	r3, #11
 800a6e2:	683a      	ldr	r2, [r7, #0]
 800a6e4:	88d2      	ldrh	r2, [r2, #6]
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f001 fa06 	bl	800bafa <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800a6f4:	330a      	adds	r3, #10
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	701a      	strb	r2, [r3, #0]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	88db      	ldrh	r3, [r3, #6]
 800a6fe:	b2da      	uxtb	r2, r3
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800a706:	330b      	adds	r3, #11
 800a708:	701a      	strb	r2, [r3, #0]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	889b      	ldrh	r3, [r3, #4]
 800a70e:	0a1b      	lsrs	r3, r3, #8
 800a710:	b29b      	uxth	r3, r3
 800a712:	b2da      	uxtb	r2, r3
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800a71a:	330c      	adds	r3, #12
 800a71c:	701a      	strb	r2, [r3, #0]
  }
}
 800a71e:	bf00      	nop
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
	...

0800a728 <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	220a      	movs	r2, #10
 800a734:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 800a736:	4b03      	ldr	r3, [pc, #12]	; (800a744 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 800a738:	4618      	mov	r0, r3
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr
 800a744:	20000140 	.word	0x20000140

0800a748 <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d101      	bne.n	800a75c <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a758:	2303      	movs	r3, #3
 800a75a:	e004      	b.n	800a766 <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	370c      	adds	r7, #12
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
	...

0800a774 <USBD_MIDI_Init>:
  // IN endpoint descriptor
  0x09, 0x05, MIDI_IN_EP, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x25, 0x01, 0x01, 0x03,
};

static uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	460b      	mov	r3, r1
 800a77e:	70fb      	strb	r3, [r7, #3]
  pInstance = pdev;
 800a780:	4a0c      	ldr	r2, [pc, #48]	; (800a7b4 <USBD_MIDI_Init+0x40>)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6013      	str	r3, [r2, #0]
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 800a786:	2340      	movs	r3, #64	; 0x40
 800a788:	2202      	movs	r2, #2
 800a78a:	2181      	movs	r1, #129	; 0x81
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f001 fe1e 	bl	800c3ce <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 800a792:	2340      	movs	r3, #64	; 0x40
 800a794:	2202      	movs	r2, #2
 800a796:	2101      	movs	r1, #1
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f001 fe18 	bl	800c3ce <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 800a79e:	2340      	movs	r3, #64	; 0x40
 800a7a0:	4a05      	ldr	r2, [pc, #20]	; (800a7b8 <USBD_MIDI_Init+0x44>)
 800a7a2:	2101      	movs	r1, #1
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f001 ff01 	bl	800c5ac <USBD_LL_PrepareReceive>
  return 0;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	20000388 	.word	0x20000388
 800a7b8:	200008cc 	.word	0x200008cc

0800a7bc <USBD_MIDI_DeInit>:

static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	70fb      	strb	r3, [r7, #3]
  pInstance = NULL;
 800a7c8:	4b07      	ldr	r3, [pc, #28]	; (800a7e8 <USBD_MIDI_DeInit+0x2c>)
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	601a      	str	r2, [r3, #0]
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 800a7ce:	2181      	movs	r1, #129	; 0x81
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f001 fe22 	bl	800c41a <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,MIDI_OUT_EP);
 800a7d6:	2101      	movs	r1, #1
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f001 fe1e 	bl	800c41a <USBD_LL_CloseEP>
  return 0;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	20000388 	.word	0x20000388

0800a7ec <USBD_MIDI_DataIn>:

//midi data incoming to host
static uint8_t USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum){
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	70fb      	strb	r3, [r7, #3]

  if (USB_Tx_State == 1){
 800a7f8:	4b06      	ldr	r3, [pc, #24]	; (800a814 <USBD_MIDI_DataIn+0x28>)
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d102      	bne.n	800a806 <USBD_MIDI_DataIn+0x1a>
    USB_Tx_State = 0;
 800a800:	4b04      	ldr	r3, [pc, #16]	; (800a814 <USBD_MIDI_DataIn+0x28>)
 800a802:	2200      	movs	r2, #0
 800a804:	701a      	strb	r2, [r3, #0]
  }

  return USBD_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr
 800a814:	20000398 	.word	0x20000398

0800a818 <USBD_MIDI_DataOut>:

//midi data outcoming from host
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	460b      	mov	r3, r1
 800a822:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;

  USBD_MIDI_ItfTypeDef *pmidi;
  pmidi = (USBD_MIDI_ItfTypeDef *)(pdev->pUserData);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a82a:	60fb      	str	r3, [r7, #12]

  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
 800a832:	78fa      	ldrb	r2, [r7, #3]
 800a834:	4613      	mov	r3, r2
 800a836:	00db      	lsls	r3, r3, #3
 800a838:	1a9b      	subs	r3, r3, r2
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	440b      	add	r3, r1
 800a83e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	817b      	strh	r3, [r7, #10]

  pmidi->pIf_MidiRx((uint8_t *)&USB_Rx_Buffer, USB_Rx_Cnt);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	897a      	ldrh	r2, [r7, #10]
 800a84c:	4611      	mov	r1, r2
 800a84e:	4806      	ldr	r0, [pc, #24]	; (800a868 <USBD_MIDI_DataOut+0x50>)
 800a850:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 800a852:	2340      	movs	r3, #64	; 0x40
 800a854:	4a04      	ldr	r2, [pc, #16]	; (800a868 <USBD_MIDI_DataOut+0x50>)
 800a856:	2101      	movs	r1, #1
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f001 fea7 	bl	800c5ac <USBD_LL_PrepareReceive>
  return USBD_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	200008cc 	.word	0x200008cc

0800a86c <USBD_MIDI_SendPacket>:

void USBD_MIDI_SendPacket (){
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if(USB_Tx_State != 1){
 800a872:	4b30      	ldr	r3, [pc, #192]	; (800a934 <USBD_MIDI_SendPacket+0xc8>)
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	2b01      	cmp	r3, #1
 800a878:	d059      	beq.n	800a92e <USBD_MIDI_SendPacket+0xc2>
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE){
 800a87a:	4b2f      	ldr	r3, [pc, #188]	; (800a938 <USBD_MIDI_SendPacket+0xcc>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a882:	d102      	bne.n	800a88a <USBD_MIDI_SendPacket+0x1e>
      APP_Rx_ptr_out = 0;
 800a884:	4b2c      	ldr	r3, [pc, #176]	; (800a938 <USBD_MIDI_SendPacket+0xcc>)
 800a886:	2200      	movs	r2, #0
 800a888:	601a      	str	r2, [r3, #0]
    }

    if(APP_Rx_ptr_out == APP_Rx_ptr_in){
 800a88a:	4b2b      	ldr	r3, [pc, #172]	; (800a938 <USBD_MIDI_SendPacket+0xcc>)
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	4b2b      	ldr	r3, [pc, #172]	; (800a93c <USBD_MIDI_SendPacket+0xd0>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	429a      	cmp	r2, r3
 800a894:	d103      	bne.n	800a89e <USBD_MIDI_SendPacket+0x32>
      USB_Tx_State = 0;
 800a896:	4b27      	ldr	r3, [pc, #156]	; (800a934 <USBD_MIDI_SendPacket+0xc8>)
 800a898:	2200      	movs	r2, #0
 800a89a:	701a      	strb	r2, [r3, #0]
      return;
 800a89c:	e047      	b.n	800a92e <USBD_MIDI_SendPacket+0xc2>
    }

    if(APP_Rx_ptr_out > APP_Rx_ptr_in){
 800a89e:	4b26      	ldr	r3, [pc, #152]	; (800a938 <USBD_MIDI_SendPacket+0xcc>)
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	4b26      	ldr	r3, [pc, #152]	; (800a93c <USBD_MIDI_SendPacket+0xd0>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d906      	bls.n	800a8b8 <USBD_MIDI_SendPacket+0x4c>
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 800a8aa:	4b23      	ldr	r3, [pc, #140]	; (800a938 <USBD_MIDI_SendPacket+0xcc>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a8b2:	4a23      	ldr	r2, [pc, #140]	; (800a940 <USBD_MIDI_SendPacket+0xd4>)
 800a8b4:	6013      	str	r3, [r2, #0]
 800a8b6:	e006      	b.n	800a8c6 <USBD_MIDI_SendPacket+0x5a>
    }else{
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 800a8b8:	4b20      	ldr	r3, [pc, #128]	; (800a93c <USBD_MIDI_SendPacket+0xd0>)
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	4b1e      	ldr	r3, [pc, #120]	; (800a938 <USBD_MIDI_SendPacket+0xcc>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	1ad3      	subs	r3, r2, r3
 800a8c2:	4a1f      	ldr	r2, [pc, #124]	; (800a940 <USBD_MIDI_SendPacket+0xd4>)
 800a8c4:	6013      	str	r3, [r2, #0]
    }

    if (APP_Rx_length > MIDI_DATA_IN_PACKET_SIZE){
 800a8c6:	4b1e      	ldr	r3, [pc, #120]	; (800a940 <USBD_MIDI_SendPacket+0xd4>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2b40      	cmp	r3, #64	; 0x40
 800a8cc:	d90f      	bls.n	800a8ee <USBD_MIDI_SendPacket+0x82>
      USB_Tx_ptr = APP_Rx_ptr_out;
 800a8ce:	4b1a      	ldr	r3, [pc, #104]	; (800a938 <USBD_MIDI_SendPacket+0xcc>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = MIDI_DATA_IN_PACKET_SIZE;
 800a8d4:	2340      	movs	r3, #64	; 0x40
 800a8d6:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += MIDI_DATA_IN_PACKET_SIZE;
 800a8d8:	4b17      	ldr	r3, [pc, #92]	; (800a938 <USBD_MIDI_SendPacket+0xcc>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	3340      	adds	r3, #64	; 0x40
 800a8de:	4a16      	ldr	r2, [pc, #88]	; (800a938 <USBD_MIDI_SendPacket+0xcc>)
 800a8e0:	6013      	str	r3, [r2, #0]
      APP_Rx_length -= MIDI_DATA_IN_PACKET_SIZE;
 800a8e2:	4b17      	ldr	r3, [pc, #92]	; (800a940 <USBD_MIDI_SendPacket+0xd4>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	3b40      	subs	r3, #64	; 0x40
 800a8e8:	4a15      	ldr	r2, [pc, #84]	; (800a940 <USBD_MIDI_SendPacket+0xd4>)
 800a8ea:	6013      	str	r3, [r2, #0]
 800a8ec:	e00f      	b.n	800a90e <USBD_MIDI_SendPacket+0xa2>
    }else{
      USB_Tx_ptr = APP_Rx_ptr_out;
 800a8ee:	4b12      	ldr	r3, [pc, #72]	; (800a938 <USBD_MIDI_SendPacket+0xcc>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = APP_Rx_length;
 800a8f4:	4b12      	ldr	r3, [pc, #72]	; (800a940 <USBD_MIDI_SendPacket+0xd4>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += APP_Rx_length;
 800a8fa:	4b0f      	ldr	r3, [pc, #60]	; (800a938 <USBD_MIDI_SendPacket+0xcc>)
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	4b10      	ldr	r3, [pc, #64]	; (800a940 <USBD_MIDI_SendPacket+0xd4>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4413      	add	r3, r2
 800a904:	4a0c      	ldr	r2, [pc, #48]	; (800a938 <USBD_MIDI_SendPacket+0xcc>)
 800a906:	6013      	str	r3, [r2, #0]
      APP_Rx_length = 0;
 800a908:	4b0d      	ldr	r3, [pc, #52]	; (800a940 <USBD_MIDI_SendPacket+0xd4>)
 800a90a:	2200      	movs	r2, #0
 800a90c:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1;
 800a90e:	4b09      	ldr	r3, [pc, #36]	; (800a934 <USBD_MIDI_SendPacket+0xc8>)
 800a910:	2201      	movs	r2, #1
 800a912:	701a      	strb	r2, [r3, #0]
    while(USBD_LL_Transmit(pInstance,
 800a914:	bf00      	nop
 800a916:	4b0b      	ldr	r3, [pc, #44]	; (800a944 <USBD_MIDI_SendPacket+0xd8>)
 800a918:	6818      	ldr	r0, [r3, #0]
    		MIDI_IN_EP,(uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],USB_Tx_length) != USBD_OK);
 800a91a:	88fb      	ldrh	r3, [r7, #6]
    while(USBD_LL_Transmit(pInstance,
 800a91c:	4a0a      	ldr	r2, [pc, #40]	; (800a948 <USBD_MIDI_SendPacket+0xdc>)
 800a91e:	441a      	add	r2, r3
 800a920:	88bb      	ldrh	r3, [r7, #4]
 800a922:	2181      	movs	r1, #129	; 0x81
 800a924:	f001 fe21 	bl	800c56a <USBD_LL_Transmit>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d1f3      	bne.n	800a916 <USBD_MIDI_SendPacket+0xaa>
  }
}
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	20000398 	.word	0x20000398
 800a938:	20000390 	.word	0x20000390
 800a93c:	2000038c 	.word	0x2000038c
 800a940:	20000394 	.word	0x20000394
 800a944:	20000388 	.word	0x20000388
 800a948:	2000090c 	.word	0x2000090c

0800a94c <USBD_MIDI_GetCfgDesc>:

static uint8_t *USBD_MIDI_GetCfgDesc (uint16_t *length){
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2265      	movs	r2, #101	; 0x65
 800a958:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 800a95a:	4b03      	ldr	r3, [pc, #12]	; (800a968 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr
 800a968:	20000184 	.word	0x20000184

0800a96c <USBD_MIDI_RegisterInterface>:
//  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
//  return USBD_MIDI_DeviceQualifierDesc;
//}

uint8_t USBD_MIDI_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_MIDI_ItfTypeDef *fops)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b085      	sub	sp, #20
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
  uint8_t ret = USBD_FAIL;
 800a976:	2303      	movs	r3, #3
 800a978:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL){
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d005      	beq.n	800a98c <USBD_MIDI_RegisterInterface+0x20>
    pdev->pUserData= fops;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	683a      	ldr	r2, [r7, #0]
 800a984:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;    
 800a988:	2300      	movs	r3, #0
 800a98a:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800a98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3714      	adds	r7, #20
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr

0800a99a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b086      	sub	sp, #24
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	60f8      	str	r0, [r7, #12]
 800a9a2:	60b9      	str	r1, [r7, #8]
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d101      	bne.n	800a9b2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a9ae:	2303      	movs	r3, #3
 800a9b0:	e025      	b.n	800a9fe <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d003      	beq.n	800a9c4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d003      	beq.n	800a9d6 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d003      	beq.n	800a9e4 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	68ba      	ldr	r2, [r7, #8]
 800a9e0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	79fa      	ldrb	r2, [r7, #7]
 800a9f0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f001 fc84 	bl	800c300 <USBD_LL_Init>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a9fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3718      	adds	r7, #24
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b084      	sub	sp, #16
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
 800aa0e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa10:	2300      	movs	r3, #0
 800aa12:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d101      	bne.n	800aa1e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	e010      	b.n	800aa40 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	683a      	ldr	r2, [r7, #0]
 800aa22:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2e:	f107 020e 	add.w	r2, r7, #14
 800aa32:	4610      	mov	r0, r2
 800aa34:	4798      	blx	r3
 800aa36:	4602      	mov	r2, r0
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
#endif /* USE_USB_FS */


  return USBD_OK;
 800aa3e:	2300      	movs	r3, #0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3710      	adds	r7, #16
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f001 fca1 	bl	800c398 <USBD_LL_Start>
 800aa56:	4603      	mov	r3, r0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3708      	adds	r7, #8
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa68:	2300      	movs	r3, #0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr

0800aa76 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b084      	sub	sp, #16
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	460b      	mov	r3, r1
 800aa80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800aa82:	2303      	movs	r3, #3
 800aa84:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d009      	beq.n	800aaa4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	78fa      	ldrb	r2, [r7, #3]
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	4798      	blx	r3
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800aaa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b082      	sub	sp, #8
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
 800aab6:	460b      	mov	r3, r1
 800aab8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d007      	beq.n	800aad4 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	78fa      	ldrb	r2, [r7, #3]
 800aace:	4611      	mov	r1, r2
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	4798      	blx	r3
  }

  return USBD_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3708      	adds	r7, #8
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b084      	sub	sp, #16
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
 800aae6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aaee:	6839      	ldr	r1, [r7, #0]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f000 ff2b 	bl	800b94c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ab04:	461a      	mov	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab12:	f003 031f 	and.w	r3, r3, #31
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d00e      	beq.n	800ab38 <USBD_LL_SetupStage+0x5a>
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d302      	bcc.n	800ab24 <USBD_LL_SetupStage+0x46>
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	d014      	beq.n	800ab4c <USBD_LL_SetupStage+0x6e>
 800ab22:	e01d      	b.n	800ab60 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fa17 	bl	800af60 <USBD_StdDevReq>
 800ab32:	4603      	mov	r3, r0
 800ab34:	73fb      	strb	r3, [r7, #15]
      break;
 800ab36:	e020      	b.n	800ab7a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab3e:	4619      	mov	r1, r3
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fa7b 	bl	800b03c <USBD_StdItfReq>
 800ab46:	4603      	mov	r3, r0
 800ab48:	73fb      	strb	r3, [r7, #15]
      break;
 800ab4a:	e016      	b.n	800ab7a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab52:	4619      	mov	r1, r3
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 fab7 	bl	800b0c8 <USBD_StdEPReq>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	73fb      	strb	r3, [r7, #15]
      break;
 800ab5e:	e00c      	b.n	800ab7a <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f001 fc72 	bl	800c458 <USBD_LL_StallEP>
 800ab74:	4603      	mov	r3, r0
 800ab76:	73fb      	strb	r3, [r7, #15]
      break;
 800ab78:	bf00      	nop
  }

  return ret;
 800ab7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	607a      	str	r2, [r7, #4]
 800ab90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ab92:	7afb      	ldrb	r3, [r7, #11]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d137      	bne.n	800ac08 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ab9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aba6:	2b03      	cmp	r3, #3
 800aba8:	d14a      	bne.n	800ac40 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	689a      	ldr	r2, [r3, #8]
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d913      	bls.n	800abde <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	689a      	ldr	r2, [r3, #8]
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	1ad2      	subs	r2, r2, r3
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	68da      	ldr	r2, [r3, #12]
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	4293      	cmp	r3, r2
 800abce:	bf28      	it	cs
 800abd0:	4613      	movcs	r3, r2
 800abd2:	461a      	mov	r2, r3
 800abd4:	6879      	ldr	r1, [r7, #4]
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f000 ffac 	bl	800bb34 <USBD_CtlContinueRx>
 800abdc:	e030      	b.n	800ac40 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00a      	beq.n	800ac00 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800abf0:	2b03      	cmp	r3, #3
 800abf2:	d105      	bne.n	800ac00 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abfa:	691b      	ldr	r3, [r3, #16]
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f000 ffa8 	bl	800bb56 <USBD_CtlSendStatus>
 800ac06:	e01b      	b.n	800ac40 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac0e:	699b      	ldr	r3, [r3, #24]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d013      	beq.n	800ac3c <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ac1a:	2b03      	cmp	r3, #3
 800ac1c:	d10e      	bne.n	800ac3c <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac24:	699b      	ldr	r3, [r3, #24]
 800ac26:	7afa      	ldrb	r2, [r7, #11]
 800ac28:	4611      	mov	r1, r2
 800ac2a:	68f8      	ldr	r0, [r7, #12]
 800ac2c:	4798      	blx	r3
 800ac2e:	4603      	mov	r3, r0
 800ac30:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ac32:	7dfb      	ldrb	r3, [r7, #23]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d003      	beq.n	800ac40 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800ac38:	7dfb      	ldrb	r3, [r7, #23]
 800ac3a:	e002      	b.n	800ac42 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ac3c:	2303      	movs	r3, #3
 800ac3e:	e000      	b.n	800ac42 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3718      	adds	r7, #24
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b086      	sub	sp, #24
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	60f8      	str	r0, [r7, #12]
 800ac52:	460b      	mov	r3, r1
 800ac54:	607a      	str	r2, [r7, #4]
 800ac56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ac58:	7afb      	ldrb	r3, [r7, #11]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d16a      	bne.n	800ad34 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	3314      	adds	r3, #20
 800ac62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d155      	bne.n	800ad1a <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	689a      	ldr	r2, [r3, #8]
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d914      	bls.n	800aca4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	689a      	ldr	r2, [r3, #8]
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	1ad2      	subs	r2, r2, r3
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	6879      	ldr	r1, [r7, #4]
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f000 ff21 	bl	800bad8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac96:	2300      	movs	r3, #0
 800ac98:	2200      	movs	r2, #0
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	f001 fc85 	bl	800c5ac <USBD_LL_PrepareReceive>
 800aca2:	e03a      	b.n	800ad1a <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	68da      	ldr	r2, [r3, #12]
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	429a      	cmp	r2, r3
 800acae:	d11c      	bne.n	800acea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	685a      	ldr	r2, [r3, #4]
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800acb8:	429a      	cmp	r2, r3
 800acba:	d316      	bcc.n	800acea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	685a      	ldr	r2, [r3, #4]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d20f      	bcs.n	800acea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800acca:	2200      	movs	r2, #0
 800accc:	2100      	movs	r1, #0
 800acce:	68f8      	ldr	r0, [r7, #12]
 800acd0:	f000 ff02 	bl	800bad8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acdc:	2300      	movs	r3, #0
 800acde:	2200      	movs	r2, #0
 800ace0:	2100      	movs	r1, #0
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	f001 fc62 	bl	800c5ac <USBD_LL_PrepareReceive>
 800ace8:	e017      	b.n	800ad1a <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d00a      	beq.n	800ad0c <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800acfc:	2b03      	cmp	r3, #3
 800acfe:	d105      	bne.n	800ad0c <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad0c:	2180      	movs	r1, #128	; 0x80
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	f001 fba2 	bl	800c458 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f000 ff31 	bl	800bb7c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d123      	bne.n	800ad6c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ad24:	68f8      	ldr	r0, [r7, #12]
 800ad26:	f7ff fe9b 	bl	800aa60 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ad32:	e01b      	b.n	800ad6c <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad3a:	695b      	ldr	r3, [r3, #20]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d013      	beq.n	800ad68 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ad46:	2b03      	cmp	r3, #3
 800ad48:	d10e      	bne.n	800ad68 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad50:	695b      	ldr	r3, [r3, #20]
 800ad52:	7afa      	ldrb	r2, [r7, #11]
 800ad54:	4611      	mov	r1, r2
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	4798      	blx	r3
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ad5e:	7dfb      	ldrb	r3, [r7, #23]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d003      	beq.n	800ad6c <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800ad64:	7dfb      	ldrb	r3, [r7, #23]
 800ad66:	e002      	b.n	800ad6e <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ad68:	2303      	movs	r3, #3
 800ad6a:	e000      	b.n	800ad6e <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800ad6c:	2300      	movs	r3, #0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3718      	adds	r7, #24
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b082      	sub	sp, #8
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2201      	movs	r2, #1
 800ad82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d009      	beq.n	800adba <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	6852      	ldr	r2, [r2, #4]
 800adb2:	b2d2      	uxtb	r2, r2
 800adb4:	4611      	mov	r1, r2
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800adba:	2340      	movs	r3, #64	; 0x40
 800adbc:	2200      	movs	r2, #0
 800adbe:	2100      	movs	r1, #0
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f001 fb04 	bl	800c3ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2201      	movs	r2, #1
 800adca:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2240      	movs	r2, #64	; 0x40
 800add2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800add6:	2340      	movs	r3, #64	; 0x40
 800add8:	2200      	movs	r2, #0
 800adda:	2180      	movs	r1, #128	; 0x80
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f001 faf6 	bl	800c3ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2201      	movs	r2, #1
 800ade6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2240      	movs	r2, #64	; 0x40
 800adec:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b083      	sub	sp, #12
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	460b      	mov	r3, r1
 800ae02:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	78fa      	ldrb	r2, [r7, #3]
 800ae08:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2204      	movs	r2, #4
 800ae30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	370c      	adds	r7, #12
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr

0800ae42 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ae42:	b480      	push	{r7}
 800ae44:	b083      	sub	sp, #12
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae50:	2b04      	cmp	r3, #4
 800ae52:	d105      	bne.n	800ae60 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	370c      	adds	r7, #12
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b082      	sub	sp, #8
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae7c:	2b03      	cmp	r3, #3
 800ae7e:	d10b      	bne.n	800ae98 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae86:	69db      	ldr	r3, [r3, #28]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d005      	beq.n	800ae98 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae92:	69db      	ldr	r3, [r3, #28]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aea2:	b480      	push	{r7}
 800aea4:	b083      	sub	sp, #12
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	460b      	mov	r3, r1
 800aeac:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800aeae:	2300      	movs	r3, #0
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	370c      	adds	r7, #12
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	460b      	mov	r3, r1
 800aec6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	370c      	adds	r7, #12
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr

0800aed6 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800aed6:	b480      	push	{r7}
 800aed8:	b083      	sub	sp, #12
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af02:	2b00      	cmp	r3, #0
 800af04:	d009      	beq.n	800af1a <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	6852      	ldr	r2, [r2, #4]
 800af12:	b2d2      	uxtb	r2, r2
 800af14:	4611      	mov	r1, r2
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	4798      	blx	r3
  }

  return USBD_OK;
 800af1a:	2300      	movs	r3, #0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3708      	adds	r7, #8
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800af24:	b480      	push	{r7}
 800af26:	b087      	sub	sp, #28
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	3301      	adds	r3, #1
 800af3a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800af42:	8a3b      	ldrh	r3, [r7, #16]
 800af44:	021b      	lsls	r3, r3, #8
 800af46:	b21a      	sxth	r2, r3
 800af48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800af4c:	4313      	orrs	r3, r2
 800af4e:	b21b      	sxth	r3, r3
 800af50:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800af52:	89fb      	ldrh	r3, [r7, #14]
}
 800af54:	4618      	mov	r0, r3
 800af56:	371c      	adds	r7, #28
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af6a:	2300      	movs	r3, #0
 800af6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af76:	2b20      	cmp	r3, #32
 800af78:	d004      	beq.n	800af84 <USBD_StdDevReq+0x24>
 800af7a:	2b40      	cmp	r3, #64	; 0x40
 800af7c:	d002      	beq.n	800af84 <USBD_StdDevReq+0x24>
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d00a      	beq.n	800af98 <USBD_StdDevReq+0x38>
 800af82:	e050      	b.n	800b026 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	6839      	ldr	r1, [r7, #0]
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	4798      	blx	r3
 800af92:	4603      	mov	r3, r0
 800af94:	73fb      	strb	r3, [r7, #15]
    break;
 800af96:	e04b      	b.n	800b030 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	785b      	ldrb	r3, [r3, #1]
 800af9c:	2b09      	cmp	r3, #9
 800af9e:	d83c      	bhi.n	800b01a <USBD_StdDevReq+0xba>
 800afa0:	a201      	add	r2, pc, #4	; (adr r2, 800afa8 <USBD_StdDevReq+0x48>)
 800afa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa6:	bf00      	nop
 800afa8:	0800affd 	.word	0x0800affd
 800afac:	0800b011 	.word	0x0800b011
 800afb0:	0800b01b 	.word	0x0800b01b
 800afb4:	0800b007 	.word	0x0800b007
 800afb8:	0800b01b 	.word	0x0800b01b
 800afbc:	0800afdb 	.word	0x0800afdb
 800afc0:	0800afd1 	.word	0x0800afd1
 800afc4:	0800b01b 	.word	0x0800b01b
 800afc8:	0800aff3 	.word	0x0800aff3
 800afcc:	0800afe5 	.word	0x0800afe5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800afd0:	6839      	ldr	r1, [r7, #0]
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 f9ce 	bl	800b374 <USBD_GetDescriptor>
      break;
 800afd8:	e024      	b.n	800b024 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800afda:	6839      	ldr	r1, [r7, #0]
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 fb33 	bl	800b648 <USBD_SetAddress>
      break;
 800afe2:	e01f      	b.n	800b024 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 fb70 	bl	800b6cc <USBD_SetConfig>
 800afec:	4603      	mov	r3, r0
 800afee:	73fb      	strb	r3, [r7, #15]
      break;
 800aff0:	e018      	b.n	800b024 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800aff2:	6839      	ldr	r1, [r7, #0]
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 fc0d 	bl	800b814 <USBD_GetConfig>
      break;
 800affa:	e013      	b.n	800b024 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800affc:	6839      	ldr	r1, [r7, #0]
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 fc3c 	bl	800b87c <USBD_GetStatus>
      break;
 800b004:	e00e      	b.n	800b024 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fc6a 	bl	800b8e2 <USBD_SetFeature>
      break;
 800b00e:	e009      	b.n	800b024 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800b010:	6839      	ldr	r1, [r7, #0]
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 fc79 	bl	800b90a <USBD_ClrFeature>
      break;
 800b018:	e004      	b.n	800b024 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800b01a:	6839      	ldr	r1, [r7, #0]
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 fccf 	bl	800b9c0 <USBD_CtlError>
      break;
 800b022:	bf00      	nop
    }
    break;
 800b024:	e004      	b.n	800b030 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800b026:	6839      	ldr	r1, [r7, #0]
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 fcc9 	bl	800b9c0 <USBD_CtlError>
    break;
 800b02e:	bf00      	nop
  }

  return ret;
 800b030:	7bfb      	ldrb	r3, [r7, #15]
}
 800b032:	4618      	mov	r0, r3
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop

0800b03c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b046:	2300      	movs	r3, #0
 800b048:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b052:	2b20      	cmp	r3, #32
 800b054:	d003      	beq.n	800b05e <USBD_StdItfReq+0x22>
 800b056:	2b40      	cmp	r3, #64	; 0x40
 800b058:	d001      	beq.n	800b05e <USBD_StdItfReq+0x22>
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d12a      	bne.n	800b0b4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b064:	3b01      	subs	r3, #1
 800b066:	2b02      	cmp	r3, #2
 800b068:	d81d      	bhi.n	800b0a6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	889b      	ldrh	r3, [r3, #4]
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	2b02      	cmp	r3, #2
 800b072:	d813      	bhi.n	800b09c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b07a:	689b      	ldr	r3, [r3, #8]
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	4798      	blx	r3
 800b082:	4603      	mov	r3, r0
 800b084:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	88db      	ldrh	r3, [r3, #6]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d110      	bne.n	800b0b0 <USBD_StdItfReq+0x74>
 800b08e:	7bfb      	ldrb	r3, [r7, #15]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10d      	bne.n	800b0b0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 fd5e 	bl	800bb56 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800b09a:	e009      	b.n	800b0b0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800b09c:	6839      	ldr	r1, [r7, #0]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 fc8e 	bl	800b9c0 <USBD_CtlError>
      break;
 800b0a4:	e004      	b.n	800b0b0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 fc89 	bl	800b9c0 <USBD_CtlError>
      break;
 800b0ae:	e000      	b.n	800b0b2 <USBD_StdItfReq+0x76>
      break;
 800b0b0:	bf00      	nop
    }
    break;
 800b0b2:	e004      	b.n	800b0be <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800b0b4:	6839      	ldr	r1, [r7, #0]
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 fc82 	bl	800b9c0 <USBD_CtlError>
    break;
 800b0bc:	bf00      	nop
  }

  return ret;
 800b0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	889b      	ldrh	r3, [r3, #4]
 800b0da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0e4:	2b20      	cmp	r3, #32
 800b0e6:	d004      	beq.n	800b0f2 <USBD_StdEPReq+0x2a>
 800b0e8:	2b40      	cmp	r3, #64	; 0x40
 800b0ea:	d002      	beq.n	800b0f2 <USBD_StdEPReq+0x2a>
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00a      	beq.n	800b106 <USBD_StdEPReq+0x3e>
 800b0f0:	e135      	b.n	800b35e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	6839      	ldr	r1, [r7, #0]
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	4798      	blx	r3
 800b100:	4603      	mov	r3, r0
 800b102:	73fb      	strb	r3, [r7, #15]
    break;
 800b104:	e130      	b.n	800b368 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	785b      	ldrb	r3, [r3, #1]
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	d03e      	beq.n	800b18c <USBD_StdEPReq+0xc4>
 800b10e:	2b03      	cmp	r3, #3
 800b110:	d002      	beq.n	800b118 <USBD_StdEPReq+0x50>
 800b112:	2b00      	cmp	r3, #0
 800b114:	d077      	beq.n	800b206 <USBD_StdEPReq+0x13e>
 800b116:	e11c      	b.n	800b352 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d002      	beq.n	800b128 <USBD_StdEPReq+0x60>
 800b122:	2b03      	cmp	r3, #3
 800b124:	d015      	beq.n	800b152 <USBD_StdEPReq+0x8a>
 800b126:	e02b      	b.n	800b180 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b128:	7bbb      	ldrb	r3, [r7, #14]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00c      	beq.n	800b148 <USBD_StdEPReq+0x80>
 800b12e:	7bbb      	ldrb	r3, [r7, #14]
 800b130:	2b80      	cmp	r3, #128	; 0x80
 800b132:	d009      	beq.n	800b148 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b134:	7bbb      	ldrb	r3, [r7, #14]
 800b136:	4619      	mov	r1, r3
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f001 f98d 	bl	800c458 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b13e:	2180      	movs	r1, #128	; 0x80
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f001 f989 	bl	800c458 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b146:	e020      	b.n	800b18a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800b148:	6839      	ldr	r1, [r7, #0]
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 fc38 	bl	800b9c0 <USBD_CtlError>
        break;
 800b150:	e01b      	b.n	800b18a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	885b      	ldrh	r3, [r3, #2]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d10e      	bne.n	800b178 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b15a:	7bbb      	ldrb	r3, [r7, #14]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00b      	beq.n	800b178 <USBD_StdEPReq+0xb0>
 800b160:	7bbb      	ldrb	r3, [r7, #14]
 800b162:	2b80      	cmp	r3, #128	; 0x80
 800b164:	d008      	beq.n	800b178 <USBD_StdEPReq+0xb0>
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	88db      	ldrh	r3, [r3, #6]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d104      	bne.n	800b178 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800b16e:	7bbb      	ldrb	r3, [r7, #14]
 800b170:	4619      	mov	r1, r3
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f001 f970 	bl	800c458 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 fcec 	bl	800bb56 <USBD_CtlSendStatus>

        break;
 800b17e:	e004      	b.n	800b18a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800b180:	6839      	ldr	r1, [r7, #0]
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 fc1c 	bl	800b9c0 <USBD_CtlError>
        break;
 800b188:	bf00      	nop
      }
      break;
 800b18a:	e0e7      	b.n	800b35c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b192:	2b02      	cmp	r3, #2
 800b194:	d002      	beq.n	800b19c <USBD_StdEPReq+0xd4>
 800b196:	2b03      	cmp	r3, #3
 800b198:	d015      	beq.n	800b1c6 <USBD_StdEPReq+0xfe>
 800b19a:	e02d      	b.n	800b1f8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b19c:	7bbb      	ldrb	r3, [r7, #14]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d00c      	beq.n	800b1bc <USBD_StdEPReq+0xf4>
 800b1a2:	7bbb      	ldrb	r3, [r7, #14]
 800b1a4:	2b80      	cmp	r3, #128	; 0x80
 800b1a6:	d009      	beq.n	800b1bc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1a8:	7bbb      	ldrb	r3, [r7, #14]
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f001 f953 	bl	800c458 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1b2:	2180      	movs	r1, #128	; 0x80
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f001 f94f 	bl	800c458 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b1ba:	e023      	b.n	800b204 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800b1bc:	6839      	ldr	r1, [r7, #0]
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fbfe 	bl	800b9c0 <USBD_CtlError>
        break;
 800b1c4:	e01e      	b.n	800b204 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	885b      	ldrh	r3, [r3, #2]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d119      	bne.n	800b202 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800b1ce:	7bbb      	ldrb	r3, [r7, #14]
 800b1d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d004      	beq.n	800b1e2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b1d8:	7bbb      	ldrb	r3, [r7, #14]
 800b1da:	4619      	mov	r1, r3
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f001 f95a 	bl	800c496 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 fcb7 	bl	800bb56 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	6839      	ldr	r1, [r7, #0]
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	4798      	blx	r3
        }
        break;
 800b1f6:	e004      	b.n	800b202 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800b1f8:	6839      	ldr	r1, [r7, #0]
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 fbe0 	bl	800b9c0 <USBD_CtlError>
        break;
 800b200:	e000      	b.n	800b204 <USBD_StdEPReq+0x13c>
        break;
 800b202:	bf00      	nop
      }
      break;
 800b204:	e0aa      	b.n	800b35c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	d002      	beq.n	800b216 <USBD_StdEPReq+0x14e>
 800b210:	2b03      	cmp	r3, #3
 800b212:	d032      	beq.n	800b27a <USBD_StdEPReq+0x1b2>
 800b214:	e097      	b.n	800b346 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b216:	7bbb      	ldrb	r3, [r7, #14]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d007      	beq.n	800b22c <USBD_StdEPReq+0x164>
 800b21c:	7bbb      	ldrb	r3, [r7, #14]
 800b21e:	2b80      	cmp	r3, #128	; 0x80
 800b220:	d004      	beq.n	800b22c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800b222:	6839      	ldr	r1, [r7, #0]
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 fbcb 	bl	800b9c0 <USBD_CtlError>
          break;
 800b22a:	e091      	b.n	800b350 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b22c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b230:	2b00      	cmp	r3, #0
 800b232:	da0b      	bge.n	800b24c <USBD_StdEPReq+0x184>
 800b234:	7bbb      	ldrb	r3, [r7, #14]
 800b236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b23a:	4613      	mov	r3, r2
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	4413      	add	r3, r2
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	3310      	adds	r3, #16
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	4413      	add	r3, r2
 800b248:	3304      	adds	r3, #4
 800b24a:	e00b      	b.n	800b264 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b24c:	7bbb      	ldrb	r3, [r7, #14]
 800b24e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b252:	4613      	mov	r3, r2
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	4413      	add	r3, r2
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	4413      	add	r3, r2
 800b262:	3304      	adds	r3, #4
 800b264:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	2200      	movs	r2, #0
 800b26a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	2202      	movs	r2, #2
 800b270:	4619      	mov	r1, r3
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 fc15 	bl	800baa2 <USBD_CtlSendData>
        break;
 800b278:	e06a      	b.n	800b350 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800b27a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	da11      	bge.n	800b2a6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b282:	7bbb      	ldrb	r3, [r7, #14]
 800b284:	f003 020f 	and.w	r2, r3, #15
 800b288:	6879      	ldr	r1, [r7, #4]
 800b28a:	4613      	mov	r3, r2
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	4413      	add	r3, r2
 800b290:	009b      	lsls	r3, r3, #2
 800b292:	440b      	add	r3, r1
 800b294:	3324      	adds	r3, #36	; 0x24
 800b296:	881b      	ldrh	r3, [r3, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d117      	bne.n	800b2cc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800b29c:	6839      	ldr	r1, [r7, #0]
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 fb8e 	bl	800b9c0 <USBD_CtlError>
            break;
 800b2a4:	e054      	b.n	800b350 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b2a6:	7bbb      	ldrb	r3, [r7, #14]
 800b2a8:	f003 020f 	and.w	r2, r3, #15
 800b2ac:	6879      	ldr	r1, [r7, #4]
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	4413      	add	r3, r2
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	440b      	add	r3, r1
 800b2b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b2bc:	881b      	ldrh	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d104      	bne.n	800b2cc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800b2c2:	6839      	ldr	r1, [r7, #0]
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 fb7b 	bl	800b9c0 <USBD_CtlError>
            break;
 800b2ca:	e041      	b.n	800b350 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	da0b      	bge.n	800b2ec <USBD_StdEPReq+0x224>
 800b2d4:	7bbb      	ldrb	r3, [r7, #14]
 800b2d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2da:	4613      	mov	r3, r2
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	4413      	add	r3, r2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	3310      	adds	r3, #16
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	e00b      	b.n	800b304 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b2ec:	7bbb      	ldrb	r3, [r7, #14]
 800b2ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	4413      	add	r3, r2
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	4413      	add	r3, r2
 800b302:	3304      	adds	r3, #4
 800b304:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b306:	7bbb      	ldrb	r3, [r7, #14]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d002      	beq.n	800b312 <USBD_StdEPReq+0x24a>
 800b30c:	7bbb      	ldrb	r3, [r7, #14]
 800b30e:	2b80      	cmp	r3, #128	; 0x80
 800b310:	d103      	bne.n	800b31a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	2200      	movs	r2, #0
 800b316:	601a      	str	r2, [r3, #0]
 800b318:	e00e      	b.n	800b338 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b31a:	7bbb      	ldrb	r3, [r7, #14]
 800b31c:	4619      	mov	r1, r3
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f001 f8d8 	bl	800c4d4 <USBD_LL_IsStallEP>
 800b324:	4603      	mov	r3, r0
 800b326:	2b00      	cmp	r3, #0
 800b328:	d003      	beq.n	800b332 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	2201      	movs	r2, #1
 800b32e:	601a      	str	r2, [r3, #0]
 800b330:	e002      	b.n	800b338 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	2200      	movs	r2, #0
 800b336:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	2202      	movs	r2, #2
 800b33c:	4619      	mov	r1, r3
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 fbaf 	bl	800baa2 <USBD_CtlSendData>
          break;
 800b344:	e004      	b.n	800b350 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800b346:	6839      	ldr	r1, [r7, #0]
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 fb39 	bl	800b9c0 <USBD_CtlError>
        break;
 800b34e:	bf00      	nop
      }
      break;
 800b350:	e004      	b.n	800b35c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800b352:	6839      	ldr	r1, [r7, #0]
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 fb33 	bl	800b9c0 <USBD_CtlError>
      break;
 800b35a:	bf00      	nop
    }
    break;
 800b35c:	e004      	b.n	800b368 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 fb2d 	bl	800b9c0 <USBD_CtlError>
    break;
 800b366:	bf00      	nop
  }

  return ret;
 800b368:	7bfb      	ldrb	r3, [r7, #15]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
	...

0800b374 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b37e:	2300      	movs	r3, #0
 800b380:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b382:	2300      	movs	r3, #0
 800b384:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b386:	2300      	movs	r3, #0
 800b388:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	885b      	ldrh	r3, [r3, #2]
 800b38e:	0a1b      	lsrs	r3, r3, #8
 800b390:	b29b      	uxth	r3, r3
 800b392:	3b01      	subs	r3, #1
 800b394:	2b06      	cmp	r3, #6
 800b396:	f200 8128 	bhi.w	800b5ea <USBD_GetDescriptor+0x276>
 800b39a:	a201      	add	r2, pc, #4	; (adr r2, 800b3a0 <USBD_GetDescriptor+0x2c>)
 800b39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a0:	0800b3bd 	.word	0x0800b3bd
 800b3a4:	0800b3d5 	.word	0x0800b3d5
 800b3a8:	0800b415 	.word	0x0800b415
 800b3ac:	0800b5eb 	.word	0x0800b5eb
 800b3b0:	0800b5eb 	.word	0x0800b5eb
 800b3b4:	0800b58b 	.word	0x0800b58b
 800b3b8:	0800b5b7 	.word	0x0800b5b7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	7c12      	ldrb	r2, [r2, #16]
 800b3c8:	f107 0108 	add.w	r1, r7, #8
 800b3cc:	4610      	mov	r0, r2
 800b3ce:	4798      	blx	r3
 800b3d0:	60f8      	str	r0, [r7, #12]
    break;
 800b3d2:	e112      	b.n	800b5fa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	7c1b      	ldrb	r3, [r3, #16]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d10d      	bne.n	800b3f8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3e4:	f107 0208 	add.w	r2, r7, #8
 800b3e8:	4610      	mov	r0, r2
 800b3ea:	4798      	blx	r3
 800b3ec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	2202      	movs	r2, #2
 800b3f4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800b3f6:	e100      	b.n	800b5fa <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b400:	f107 0208 	add.w	r2, r7, #8
 800b404:	4610      	mov	r0, r2
 800b406:	4798      	blx	r3
 800b408:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	3301      	adds	r3, #1
 800b40e:	2202      	movs	r2, #2
 800b410:	701a      	strb	r2, [r3, #0]
    break;
 800b412:	e0f2      	b.n	800b5fa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	885b      	ldrh	r3, [r3, #2]
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	2b05      	cmp	r3, #5
 800b41c:	f200 80ac 	bhi.w	800b578 <USBD_GetDescriptor+0x204>
 800b420:	a201      	add	r2, pc, #4	; (adr r2, 800b428 <USBD_GetDescriptor+0xb4>)
 800b422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b426:	bf00      	nop
 800b428:	0800b441 	.word	0x0800b441
 800b42c:	0800b475 	.word	0x0800b475
 800b430:	0800b4a9 	.word	0x0800b4a9
 800b434:	0800b4dd 	.word	0x0800b4dd
 800b438:	0800b511 	.word	0x0800b511
 800b43c:	0800b545 	.word	0x0800b545
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d00b      	beq.n	800b464 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	7c12      	ldrb	r2, [r2, #16]
 800b458:	f107 0108 	add.w	r1, r7, #8
 800b45c:	4610      	mov	r0, r2
 800b45e:	4798      	blx	r3
 800b460:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b462:	e091      	b.n	800b588 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b464:	6839      	ldr	r1, [r7, #0]
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 faaa 	bl	800b9c0 <USBD_CtlError>
        err++;
 800b46c:	7afb      	ldrb	r3, [r7, #11]
 800b46e:	3301      	adds	r3, #1
 800b470:	72fb      	strb	r3, [r7, #11]
      break;
 800b472:	e089      	b.n	800b588 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d00b      	beq.n	800b498 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	7c12      	ldrb	r2, [r2, #16]
 800b48c:	f107 0108 	add.w	r1, r7, #8
 800b490:	4610      	mov	r0, r2
 800b492:	4798      	blx	r3
 800b494:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b496:	e077      	b.n	800b588 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b498:	6839      	ldr	r1, [r7, #0]
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fa90 	bl	800b9c0 <USBD_CtlError>
        err++;
 800b4a0:	7afb      	ldrb	r3, [r7, #11]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	72fb      	strb	r3, [r7, #11]
      break;
 800b4a6:	e06f      	b.n	800b588 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d00b      	beq.n	800b4cc <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	7c12      	ldrb	r2, [r2, #16]
 800b4c0:	f107 0108 	add.w	r1, r7, #8
 800b4c4:	4610      	mov	r0, r2
 800b4c6:	4798      	blx	r3
 800b4c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4ca:	e05d      	b.n	800b588 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b4cc:	6839      	ldr	r1, [r7, #0]
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fa76 	bl	800b9c0 <USBD_CtlError>
        err++;
 800b4d4:	7afb      	ldrb	r3, [r7, #11]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	72fb      	strb	r3, [r7, #11]
      break;
 800b4da:	e055      	b.n	800b588 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d00b      	beq.n	800b500 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	7c12      	ldrb	r2, [r2, #16]
 800b4f4:	f107 0108 	add.w	r1, r7, #8
 800b4f8:	4610      	mov	r0, r2
 800b4fa:	4798      	blx	r3
 800b4fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4fe:	e043      	b.n	800b588 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b500:	6839      	ldr	r1, [r7, #0]
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 fa5c 	bl	800b9c0 <USBD_CtlError>
        err++;
 800b508:	7afb      	ldrb	r3, [r7, #11]
 800b50a:	3301      	adds	r3, #1
 800b50c:	72fb      	strb	r3, [r7, #11]
      break;
 800b50e:	e03b      	b.n	800b588 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b516:	695b      	ldr	r3, [r3, #20]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00b      	beq.n	800b534 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b522:	695b      	ldr	r3, [r3, #20]
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	7c12      	ldrb	r2, [r2, #16]
 800b528:	f107 0108 	add.w	r1, r7, #8
 800b52c:	4610      	mov	r0, r2
 800b52e:	4798      	blx	r3
 800b530:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b532:	e029      	b.n	800b588 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b534:	6839      	ldr	r1, [r7, #0]
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 fa42 	bl	800b9c0 <USBD_CtlError>
        err++;
 800b53c:	7afb      	ldrb	r3, [r7, #11]
 800b53e:	3301      	adds	r3, #1
 800b540:	72fb      	strb	r3, [r7, #11]
      break;
 800b542:	e021      	b.n	800b588 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b54a:	699b      	ldr	r3, [r3, #24]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00b      	beq.n	800b568 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b556:	699b      	ldr	r3, [r3, #24]
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	7c12      	ldrb	r2, [r2, #16]
 800b55c:	f107 0108 	add.w	r1, r7, #8
 800b560:	4610      	mov	r0, r2
 800b562:	4798      	blx	r3
 800b564:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b566:	e00f      	b.n	800b588 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 fa28 	bl	800b9c0 <USBD_CtlError>
        err++;
 800b570:	7afb      	ldrb	r3, [r7, #11]
 800b572:	3301      	adds	r3, #1
 800b574:	72fb      	strb	r3, [r7, #11]
      break;
 800b576:	e007      	b.n	800b588 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 fa20 	bl	800b9c0 <USBD_CtlError>
      err++;
 800b580:	7afb      	ldrb	r3, [r7, #11]
 800b582:	3301      	adds	r3, #1
 800b584:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800b586:	bf00      	nop
    }
    break;
 800b588:	e037      	b.n	800b5fa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	7c1b      	ldrb	r3, [r3, #16]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d109      	bne.n	800b5a6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b59a:	f107 0208 	add.w	r2, r7, #8
 800b59e:	4610      	mov	r0, r2
 800b5a0:	4798      	blx	r3
 800b5a2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b5a4:	e029      	b.n	800b5fa <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800b5a6:	6839      	ldr	r1, [r7, #0]
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 fa09 	bl	800b9c0 <USBD_CtlError>
      err++;
 800b5ae:	7afb      	ldrb	r3, [r7, #11]
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	72fb      	strb	r3, [r7, #11]
    break;
 800b5b4:	e021      	b.n	800b5fa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	7c1b      	ldrb	r3, [r3, #16]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d10d      	bne.n	800b5da <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5c6:	f107 0208 	add.w	r2, r7, #8
 800b5ca:	4610      	mov	r0, r2
 800b5cc:	4798      	blx	r3
 800b5ce:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	2207      	movs	r2, #7
 800b5d6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b5d8:	e00f      	b.n	800b5fa <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800b5da:	6839      	ldr	r1, [r7, #0]
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 f9ef 	bl	800b9c0 <USBD_CtlError>
      err++;
 800b5e2:	7afb      	ldrb	r3, [r7, #11]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	72fb      	strb	r3, [r7, #11]
    break;
 800b5e8:	e007      	b.n	800b5fa <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 f9e7 	bl	800b9c0 <USBD_CtlError>
    err++;
 800b5f2:	7afb      	ldrb	r3, [r7, #11]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	72fb      	strb	r3, [r7, #11]
    break;
 800b5f8:	bf00      	nop
  }

  if (err != 0U)
 800b5fa:	7afb      	ldrb	r3, [r7, #11]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d11e      	bne.n	800b63e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	88db      	ldrh	r3, [r3, #6]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d016      	beq.n	800b636 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800b608:	893b      	ldrh	r3, [r7, #8]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d00e      	beq.n	800b62c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	88da      	ldrh	r2, [r3, #6]
 800b612:	893b      	ldrh	r3, [r7, #8]
 800b614:	4293      	cmp	r3, r2
 800b616:	bf28      	it	cs
 800b618:	4613      	movcs	r3, r2
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b61e:	893b      	ldrh	r3, [r7, #8]
 800b620:	461a      	mov	r2, r3
 800b622:	68f9      	ldr	r1, [r7, #12]
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 fa3c 	bl	800baa2 <USBD_CtlSendData>
 800b62a:	e009      	b.n	800b640 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800b62c:	6839      	ldr	r1, [r7, #0]
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 f9c6 	bl	800b9c0 <USBD_CtlError>
 800b634:	e004      	b.n	800b640 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fa8d 	bl	800bb56 <USBD_CtlSendStatus>
 800b63c:	e000      	b.n	800b640 <USBD_GetDescriptor+0x2cc>
    return;
 800b63e:	bf00      	nop
    }
  }
}
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop

0800b648 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	889b      	ldrh	r3, [r3, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d130      	bne.n	800b6bc <USBD_SetAddress+0x74>
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	88db      	ldrh	r3, [r3, #6]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d12c      	bne.n	800b6bc <USBD_SetAddress+0x74>
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	885b      	ldrh	r3, [r3, #2]
 800b666:	2b7f      	cmp	r3, #127	; 0x7f
 800b668:	d828      	bhi.n	800b6bc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	885b      	ldrh	r3, [r3, #2]
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b674:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b67c:	2b03      	cmp	r3, #3
 800b67e:	d104      	bne.n	800b68a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b680:	6839      	ldr	r1, [r7, #0]
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 f99c 	bl	800b9c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b688:	e01c      	b.n	800b6c4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	7bfa      	ldrb	r2, [r7, #15]
 800b68e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b692:	7bfb      	ldrb	r3, [r7, #15]
 800b694:	4619      	mov	r1, r3
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 ff48 	bl	800c52c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 fa5a 	bl	800bb56 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b6a2:	7bfb      	ldrb	r3, [r7, #15]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d004      	beq.n	800b6b2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2202      	movs	r2, #2
 800b6ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6b0:	e008      	b.n	800b6c4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ba:	e003      	b.n	800b6c4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b6bc:	6839      	ldr	r1, [r7, #0]
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 f97e 	bl	800b9c0 <USBD_CtlError>
  }
}
 800b6c4:	bf00      	nop
 800b6c6:	3710      	adds	r7, #16
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	885b      	ldrh	r3, [r3, #2]
 800b6de:	b2da      	uxtb	r2, r3
 800b6e0:	4b4b      	ldr	r3, [pc, #300]	; (800b810 <USBD_SetConfig+0x144>)
 800b6e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b6e4:	4b4a      	ldr	r3, [pc, #296]	; (800b810 <USBD_SetConfig+0x144>)
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d905      	bls.n	800b6f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b6ec:	6839      	ldr	r1, [r7, #0]
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 f966 	bl	800b9c0 <USBD_CtlError>
    return USBD_FAIL;
 800b6f4:	2303      	movs	r3, #3
 800b6f6:	e087      	b.n	800b808 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	d002      	beq.n	800b708 <USBD_SetConfig+0x3c>
 800b702:	2b03      	cmp	r3, #3
 800b704:	d025      	beq.n	800b752 <USBD_SetConfig+0x86>
 800b706:	e071      	b.n	800b7ec <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800b708:	4b41      	ldr	r3, [pc, #260]	; (800b810 <USBD_SetConfig+0x144>)
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d01c      	beq.n	800b74a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800b710:	4b3f      	ldr	r3, [pc, #252]	; (800b810 <USBD_SetConfig+0x144>)
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	461a      	mov	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b71a:	4b3d      	ldr	r3, [pc, #244]	; (800b810 <USBD_SetConfig+0x144>)
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	4619      	mov	r1, r3
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f7ff f9a8 	bl	800aa76 <USBD_SetClassConfig>
 800b726:	4603      	mov	r3, r0
 800b728:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800b72a:	7bfb      	ldrb	r3, [r7, #15]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d004      	beq.n	800b73a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800b730:	6839      	ldr	r1, [r7, #0]
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f944 	bl	800b9c0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b738:	e065      	b.n	800b806 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 fa0b 	bl	800bb56 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2203      	movs	r2, #3
 800b744:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b748:	e05d      	b.n	800b806 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 fa03 	bl	800bb56 <USBD_CtlSendStatus>
    break;
 800b750:	e059      	b.n	800b806 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800b752:	4b2f      	ldr	r3, [pc, #188]	; (800b810 <USBD_SetConfig+0x144>)
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d112      	bne.n	800b780 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2202      	movs	r2, #2
 800b75e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800b762:	4b2b      	ldr	r3, [pc, #172]	; (800b810 <USBD_SetConfig+0x144>)
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	461a      	mov	r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b76c:	4b28      	ldr	r3, [pc, #160]	; (800b810 <USBD_SetConfig+0x144>)
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	4619      	mov	r1, r3
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f7ff f99b 	bl	800aaae <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 f9ec 	bl	800bb56 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b77e:	e042      	b.n	800b806 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800b780:	4b23      	ldr	r3, [pc, #140]	; (800b810 <USBD_SetConfig+0x144>)
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	461a      	mov	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d02a      	beq.n	800b7e4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	b2db      	uxtb	r3, r3
 800b794:	4619      	mov	r1, r3
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f7ff f989 	bl	800aaae <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800b79c:	4b1c      	ldr	r3, [pc, #112]	; (800b810 <USBD_SetConfig+0x144>)
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b7a6:	4b1a      	ldr	r3, [pc, #104]	; (800b810 <USBD_SetConfig+0x144>)
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f7ff f962 	bl	800aa76 <USBD_SetClassConfig>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800b7b6:	7bfb      	ldrb	r3, [r7, #15]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d00f      	beq.n	800b7dc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800b7bc:	6839      	ldr	r1, [r7, #0]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 f8fe 	bl	800b9c0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f7ff f96e 	bl	800aaae <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2202      	movs	r2, #2
 800b7d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b7da:	e014      	b.n	800b806 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 f9ba 	bl	800bb56 <USBD_CtlSendStatus>
    break;
 800b7e2:	e010      	b.n	800b806 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 f9b6 	bl	800bb56 <USBD_CtlSendStatus>
    break;
 800b7ea:	e00c      	b.n	800b806 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800b7ec:	6839      	ldr	r1, [r7, #0]
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 f8e6 	bl	800b9c0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b7f4:	4b06      	ldr	r3, [pc, #24]	; (800b810 <USBD_SetConfig+0x144>)
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f7ff f957 	bl	800aaae <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800b800:	2303      	movs	r3, #3
 800b802:	73fb      	strb	r3, [r7, #15]
    break;
 800b804:	bf00      	nop
  }

  return ret;
 800b806:	7bfb      	ldrb	r3, [r7, #15]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	20000399 	.word	0x20000399

0800b814 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	88db      	ldrh	r3, [r3, #6]
 800b822:	2b01      	cmp	r3, #1
 800b824:	d004      	beq.n	800b830 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b826:	6839      	ldr	r1, [r7, #0]
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 f8c9 	bl	800b9c0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800b82e:	e021      	b.n	800b874 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b836:	2b01      	cmp	r3, #1
 800b838:	db17      	blt.n	800b86a <USBD_GetConfig+0x56>
 800b83a:	2b02      	cmp	r3, #2
 800b83c:	dd02      	ble.n	800b844 <USBD_GetConfig+0x30>
 800b83e:	2b03      	cmp	r3, #3
 800b840:	d00b      	beq.n	800b85a <USBD_GetConfig+0x46>
 800b842:	e012      	b.n	800b86a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	3308      	adds	r3, #8
 800b84e:	2201      	movs	r2, #1
 800b850:	4619      	mov	r1, r3
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f000 f925 	bl	800baa2 <USBD_CtlSendData>
      break;
 800b858:	e00c      	b.n	800b874 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	3304      	adds	r3, #4
 800b85e:	2201      	movs	r2, #1
 800b860:	4619      	mov	r1, r3
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 f91d 	bl	800baa2 <USBD_CtlSendData>
      break;
 800b868:	e004      	b.n	800b874 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800b86a:	6839      	ldr	r1, [r7, #0]
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 f8a7 	bl	800b9c0 <USBD_CtlError>
      break;
 800b872:	bf00      	nop
}
 800b874:	bf00      	nop
 800b876:	3708      	adds	r7, #8
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b88c:	3b01      	subs	r3, #1
 800b88e:	2b02      	cmp	r3, #2
 800b890:	d81e      	bhi.n	800b8d0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	88db      	ldrh	r3, [r3, #6]
 800b896:	2b02      	cmp	r3, #2
 800b898:	d004      	beq.n	800b8a4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b89a:	6839      	ldr	r1, [r7, #0]
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 f88f 	bl	800b9c0 <USBD_CtlError>
      break;
 800b8a2:	e01a      	b.n	800b8da <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d005      	beq.n	800b8c0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	f043 0202 	orr.w	r2, r3, #2
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	330c      	adds	r3, #12
 800b8c4:	2202      	movs	r2, #2
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 f8ea 	bl	800baa2 <USBD_CtlSendData>
    break;
 800b8ce:	e004      	b.n	800b8da <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800b8d0:	6839      	ldr	r1, [r7, #0]
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 f874 	bl	800b9c0 <USBD_CtlError>
    break;
 800b8d8:	bf00      	nop
  }
}
 800b8da:	bf00      	nop
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b082      	sub	sp, #8
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
 800b8ea:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	885b      	ldrh	r3, [r3, #2]
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d106      	bne.n	800b902 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 f92a 	bl	800bb56 <USBD_CtlSendStatus>
  }
}
 800b902:	bf00      	nop
 800b904:	3708      	adds	r7, #8
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b082      	sub	sp, #8
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
 800b912:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b91a:	3b01      	subs	r3, #1
 800b91c:	2b02      	cmp	r3, #2
 800b91e:	d80b      	bhi.n	800b938 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	885b      	ldrh	r3, [r3, #2]
 800b924:	2b01      	cmp	r3, #1
 800b926:	d10c      	bne.n	800b942 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 f910 	bl	800bb56 <USBD_CtlSendStatus>
      }
      break;
 800b936:	e004      	b.n	800b942 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b938:	6839      	ldr	r1, [r7, #0]
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 f840 	bl	800b9c0 <USBD_CtlError>
      break;
 800b940:	e000      	b.n	800b944 <USBD_ClrFeature+0x3a>
      break;
 800b942:	bf00      	nop
  }
}
 800b944:	bf00      	nop
 800b946:	3708      	adds	r7, #8
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	781a      	ldrb	r2, [r3, #0]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	3301      	adds	r3, #1
 800b966:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	781a      	ldrb	r2, [r3, #0]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	3301      	adds	r3, #1
 800b974:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	f7ff fad4 	bl	800af24 <SWAPBYTE>
 800b97c:	4603      	mov	r3, r0
 800b97e:	461a      	mov	r2, r3
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	3301      	adds	r3, #1
 800b988:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	3301      	adds	r3, #1
 800b98e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f7ff fac7 	bl	800af24 <SWAPBYTE>
 800b996:	4603      	mov	r3, r0
 800b998:	461a      	mov	r2, r3
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	f7ff faba 	bl	800af24 <SWAPBYTE>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	80da      	strh	r2, [r3, #6]
}
 800b9b8:	bf00      	nop
 800b9ba:	3710      	adds	r7, #16
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9ca:	2180      	movs	r1, #128	; 0x80
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 fd43 	bl	800c458 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 fd3f 	bl	800c458 <USBD_LL_StallEP>
}
 800b9da:	bf00      	nop
 800b9dc:	3708      	adds	r7, #8
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b086      	sub	sp, #24
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	60f8      	str	r0, [r7, #12]
 800b9ea:	60b9      	str	r1, [r7, #8]
 800b9ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d036      	beq.n	800ba66 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b9fc:	6938      	ldr	r0, [r7, #16]
 800b9fe:	f000 f836 	bl	800ba6e <USBD_GetLen>
 800ba02:	4603      	mov	r3, r0
 800ba04:	3301      	adds	r3, #1
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	005b      	lsls	r3, r3, #1
 800ba0a:	b29a      	uxth	r2, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ba10:	7dfb      	ldrb	r3, [r7, #23]
 800ba12:	68ba      	ldr	r2, [r7, #8]
 800ba14:	4413      	add	r3, r2
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	7812      	ldrb	r2, [r2, #0]
 800ba1a:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba1c:	7dfb      	ldrb	r3, [r7, #23]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ba22:	7dfb      	ldrb	r3, [r7, #23]
 800ba24:	68ba      	ldr	r2, [r7, #8]
 800ba26:	4413      	add	r3, r2
 800ba28:	2203      	movs	r2, #3
 800ba2a:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba2c:	7dfb      	ldrb	r3, [r7, #23]
 800ba2e:	3301      	adds	r3, #1
 800ba30:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ba32:	e013      	b.n	800ba5c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ba34:	7dfb      	ldrb	r3, [r7, #23]
 800ba36:	68ba      	ldr	r2, [r7, #8]
 800ba38:	4413      	add	r3, r2
 800ba3a:	693a      	ldr	r2, [r7, #16]
 800ba3c:	7812      	ldrb	r2, [r2, #0]
 800ba3e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	3301      	adds	r3, #1
 800ba44:	613b      	str	r3, [r7, #16]
    idx++;
 800ba46:	7dfb      	ldrb	r3, [r7, #23]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ba4c:	7dfb      	ldrb	r3, [r7, #23]
 800ba4e:	68ba      	ldr	r2, [r7, #8]
 800ba50:	4413      	add	r3, r2
 800ba52:	2200      	movs	r2, #0
 800ba54:	701a      	strb	r2, [r3, #0]
    idx++;
 800ba56:	7dfb      	ldrb	r3, [r7, #23]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d1e7      	bne.n	800ba34 <USBD_GetString+0x52>
 800ba64:	e000      	b.n	800ba68 <USBD_GetString+0x86>
    return;
 800ba66:	bf00      	nop
  }
}
 800ba68:	3718      	adds	r7, #24
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b085      	sub	sp, #20
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ba76:	2300      	movs	r3, #0
 800ba78:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ba7e:	e005      	b.n	800ba8c <USBD_GetLen+0x1e>
  {
    len++;
 800ba80:	7bfb      	ldrb	r3, [r7, #15]
 800ba82:	3301      	adds	r3, #1
 800ba84:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d1f5      	bne.n	800ba80 <USBD_GetLen+0x12>
  }

  return len;
 800ba94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3714      	adds	r7, #20
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr

0800baa2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b084      	sub	sp, #16
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	60f8      	str	r0, [r7, #12]
 800baaa:	60b9      	str	r1, [r7, #8]
 800baac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2202      	movs	r2, #2
 800bab2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	687a      	ldr	r2, [r7, #4]
 800baba:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	68ba      	ldr	r2, [r7, #8]
 800bac6:	2100      	movs	r1, #0
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f000 fd4e 	bl	800c56a <USBD_LL_Transmit>

  return USBD_OK;
 800bace:	2300      	movs	r3, #0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3710      	adds	r7, #16
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	68ba      	ldr	r2, [r7, #8]
 800bae8:	2100      	movs	r1, #0
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f000 fd3d 	bl	800c56a <USBD_LL_Transmit>

  return USBD_OK;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b084      	sub	sp, #16
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	60f8      	str	r0, [r7, #12]
 800bb02:	60b9      	str	r1, [r7, #8]
 800bb04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2203      	movs	r2, #3
 800bb0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	68ba      	ldr	r2, [r7, #8]
 800bb22:	2100      	movs	r1, #0
 800bb24:	68f8      	ldr	r0, [r7, #12]
 800bb26:	f000 fd41 	bl	800c5ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb2a:	2300      	movs	r3, #0
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3710      	adds	r7, #16
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	68ba      	ldr	r2, [r7, #8]
 800bb44:	2100      	movs	r1, #0
 800bb46:	68f8      	ldr	r0, [r7, #12]
 800bb48:	f000 fd30 	bl	800c5ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b082      	sub	sp, #8
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2204      	movs	r2, #4
 800bb62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bb66:	2300      	movs	r3, #0
 800bb68:	2200      	movs	r2, #0
 800bb6a:	2100      	movs	r1, #0
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 fcfc 	bl	800c56a <USBD_LL_Transmit>

  return USBD_OK;
 800bb72:	2300      	movs	r3, #0
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3708      	adds	r7, #8
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2205      	movs	r2, #5
 800bb88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	2200      	movs	r2, #0
 800bb90:	2100      	movs	r1, #0
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 fd0a 	bl	800c5ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3708      	adds	r7, #8
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
	...

0800bba4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bba8:	2200      	movs	r2, #0
 800bbaa:	4918      	ldr	r1, [pc, #96]	; (800bc0c <MX_USB_DEVICE_Init+0x68>)
 800bbac:	4818      	ldr	r0, [pc, #96]	; (800bc10 <MX_USB_DEVICE_Init+0x6c>)
 800bbae:	f7fe fef4 	bl	800a99a <USBD_Init>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d001      	beq.n	800bbbc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bbb8:	f7f6 f8fe 	bl	8001db8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800bbbc:	4915      	ldr	r1, [pc, #84]	; (800bc14 <MX_USB_DEVICE_Init+0x70>)
 800bbbe:	4814      	ldr	r0, [pc, #80]	; (800bc10 <MX_USB_DEVICE_Init+0x6c>)
 800bbc0:	f7fe ff21 	bl	800aa06 <USBD_RegisterClass>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d001      	beq.n	800bbce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bbca:	f7f6 f8f5 	bl	8001db8 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800bbce:	4912      	ldr	r1, [pc, #72]	; (800bc18 <MX_USB_DEVICE_Init+0x74>)
 800bbd0:	480f      	ldr	r0, [pc, #60]	; (800bc10 <MX_USB_DEVICE_Init+0x6c>)
 800bbd2:	f7fe fdb9 	bl	800a748 <USBD_AUDIO_RegisterInterface>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d001      	beq.n	800bbe0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bbdc:	f7f6 f8ec 	bl	8001db8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bbe0:	480b      	ldr	r0, [pc, #44]	; (800bc10 <MX_USB_DEVICE_Init+0x6c>)
 800bbe2:	f7fe ff31 	bl	800aa48 <USBD_Start>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d001      	beq.n	800bbf0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bbec:	f7f6 f8e4 	bl	8001db8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI);
 800bbf0:	490a      	ldr	r1, [pc, #40]	; (800bc1c <MX_USB_DEVICE_Init+0x78>)
 800bbf2:	4807      	ldr	r0, [pc, #28]	; (800bc10 <MX_USB_DEVICE_Init+0x6c>)
 800bbf4:	f7fe ff07 	bl	800aa06 <USBD_RegisterClass>

	USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800bbf8:	4909      	ldr	r1, [pc, #36]	; (800bc20 <MX_USB_DEVICE_Init+0x7c>)
 800bbfa:	4805      	ldr	r0, [pc, #20]	; (800bc10 <MX_USB_DEVICE_Init+0x6c>)
 800bbfc:	f7fe feb6 	bl	800a96c <USBD_MIDI_RegisterInterface>

	USBD_Start(&hUsbDeviceFS);
 800bc00:	4803      	ldr	r0, [pc, #12]	; (800bc10 <MX_USB_DEVICE_Init+0x6c>)
 800bc02:	f7fe ff21 	bl	800aa48 <USBD_Start>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bc06:	bf00      	nop
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	20000208 	.word	0x20000208
 800bc10:	20000a0c 	.word	0x20000a0c
 800bc14:	20000098 	.word	0x20000098
 800bc18:	200001ec 	.word	0x200001ec
 800bc1c:	2000014c 	.word	0x2000014c
 800bc20:	20000268 	.word	0x20000268

0800bc24 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b085      	sub	sp, #20
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 800bc30:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3714      	adds	r7, #20
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800bc3e:	b480      	push	{r7}
 800bc40:	b083      	sub	sp, #12
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 800bc46:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	370c      	adds	r7, #12
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b085      	sub	sp, #20
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	4613      	mov	r3, r2
 800bc60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800bc62:	79fb      	ldrb	r3, [r7, #7]
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d001      	beq.n	800bc6c <AUDIO_AudioCmd_FS+0x18>
 800bc68:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800bc6a:	e000      	b.n	800bc6e <AUDIO_AudioCmd_FS+0x1a>
    break;
 800bc6c:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800bc6e:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3714      	adds	r7, #20
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	4603      	mov	r3, r0
 800bc84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 800bc86:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 800bc9e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800bcba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3714      	adds	r7, #20
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800bccc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr

0800bcd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	4603      	mov	r3, r0
 800bce0:	6039      	str	r1, [r7, #0]
 800bce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	2212      	movs	r2, #18
 800bce8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bcea:	4b03      	ldr	r3, [pc, #12]	; (800bcf8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr
 800bcf8:	20000224 	.word	0x20000224

0800bcfc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	4603      	mov	r3, r0
 800bd04:	6039      	str	r1, [r7, #0]
 800bd06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	2204      	movs	r2, #4
 800bd0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd0e:	4b03      	ldr	r3, [pc, #12]	; (800bd1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr
 800bd1c:	20000238 	.word	0x20000238

0800bd20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	4603      	mov	r3, r0
 800bd28:	6039      	str	r1, [r7, #0]
 800bd2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd2c:	79fb      	ldrb	r3, [r7, #7]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d105      	bne.n	800bd3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd32:	683a      	ldr	r2, [r7, #0]
 800bd34:	4907      	ldr	r1, [pc, #28]	; (800bd54 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd36:	4808      	ldr	r0, [pc, #32]	; (800bd58 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd38:	f7ff fe53 	bl	800b9e2 <USBD_GetString>
 800bd3c:	e004      	b.n	800bd48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd3e:	683a      	ldr	r2, [r7, #0]
 800bd40:	4904      	ldr	r1, [pc, #16]	; (800bd54 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd42:	4805      	ldr	r0, [pc, #20]	; (800bd58 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd44:	f7ff fe4d 	bl	800b9e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd48:	4b02      	ldr	r3, [pc, #8]	; (800bd54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3708      	adds	r7, #8
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	20000cdc 	.word	0x20000cdc
 800bd58:	0800d0e0 	.word	0x0800d0e0

0800bd5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	4603      	mov	r3, r0
 800bd64:	6039      	str	r1, [r7, #0]
 800bd66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd68:	683a      	ldr	r2, [r7, #0]
 800bd6a:	4904      	ldr	r1, [pc, #16]	; (800bd7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bd6c:	4804      	ldr	r0, [pc, #16]	; (800bd80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bd6e:	f7ff fe38 	bl	800b9e2 <USBD_GetString>
  return USBD_StrDesc;
 800bd72:	4b02      	ldr	r3, [pc, #8]	; (800bd7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3708      	adds	r7, #8
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	20000cdc 	.word	0x20000cdc
 800bd80:	0800d0e0 	.word	0x0800d0e0

0800bd84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	6039      	str	r1, [r7, #0]
 800bd8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	221a      	movs	r2, #26
 800bd94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd96:	f000 f843 	bl	800be20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bd9a:	4b02      	ldr	r3, [pc, #8]	; (800bda4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3708      	adds	r7, #8
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	2000023c 	.word	0x2000023c

0800bda8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	4603      	mov	r3, r0
 800bdb0:	6039      	str	r1, [r7, #0]
 800bdb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bdb4:	79fb      	ldrb	r3, [r7, #7]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d105      	bne.n	800bdc6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bdba:	683a      	ldr	r2, [r7, #0]
 800bdbc:	4907      	ldr	r1, [pc, #28]	; (800bddc <USBD_FS_ConfigStrDescriptor+0x34>)
 800bdbe:	4808      	ldr	r0, [pc, #32]	; (800bde0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bdc0:	f7ff fe0f 	bl	800b9e2 <USBD_GetString>
 800bdc4:	e004      	b.n	800bdd0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bdc6:	683a      	ldr	r2, [r7, #0]
 800bdc8:	4904      	ldr	r1, [pc, #16]	; (800bddc <USBD_FS_ConfigStrDescriptor+0x34>)
 800bdca:	4805      	ldr	r0, [pc, #20]	; (800bde0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bdcc:	f7ff fe09 	bl	800b9e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdd0:	4b02      	ldr	r3, [pc, #8]	; (800bddc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3708      	adds	r7, #8
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	20000cdc 	.word	0x20000cdc
 800bde0:	0800d0f4 	.word	0x0800d0f4

0800bde4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	4603      	mov	r3, r0
 800bdec:	6039      	str	r1, [r7, #0]
 800bdee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bdf0:	79fb      	ldrb	r3, [r7, #7]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d105      	bne.n	800be02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bdf6:	683a      	ldr	r2, [r7, #0]
 800bdf8:	4907      	ldr	r1, [pc, #28]	; (800be18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bdfa:	4808      	ldr	r0, [pc, #32]	; (800be1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bdfc:	f7ff fdf1 	bl	800b9e2 <USBD_GetString>
 800be00:	e004      	b.n	800be0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	4904      	ldr	r1, [pc, #16]	; (800be18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be06:	4805      	ldr	r0, [pc, #20]	; (800be1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be08:	f7ff fdeb 	bl	800b9e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be0c:	4b02      	ldr	r3, [pc, #8]	; (800be18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3708      	adds	r7, #8
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	20000cdc 	.word	0x20000cdc
 800be1c:	0800d10c 	.word	0x0800d10c

0800be20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be26:	4b0f      	ldr	r3, [pc, #60]	; (800be64 <Get_SerialNum+0x44>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800be2c:	4b0e      	ldr	r3, [pc, #56]	; (800be68 <Get_SerialNum+0x48>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800be32:	4b0e      	ldr	r3, [pc, #56]	; (800be6c <Get_SerialNum+0x4c>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800be38:	68fa      	ldr	r2, [r7, #12]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4413      	add	r3, r2
 800be3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d009      	beq.n	800be5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be46:	2208      	movs	r2, #8
 800be48:	4909      	ldr	r1, [pc, #36]	; (800be70 <Get_SerialNum+0x50>)
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f000 f814 	bl	800be78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800be50:	2204      	movs	r2, #4
 800be52:	4908      	ldr	r1, [pc, #32]	; (800be74 <Get_SerialNum+0x54>)
 800be54:	68b8      	ldr	r0, [r7, #8]
 800be56:	f000 f80f 	bl	800be78 <IntToUnicode>
  }
}
 800be5a:	bf00      	nop
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	1fff7a10 	.word	0x1fff7a10
 800be68:	1fff7a14 	.word	0x1fff7a14
 800be6c:	1fff7a18 	.word	0x1fff7a18
 800be70:	2000023e 	.word	0x2000023e
 800be74:	2000024e 	.word	0x2000024e

0800be78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be78:	b480      	push	{r7}
 800be7a:	b087      	sub	sp, #28
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	4613      	mov	r3, r2
 800be84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be86:	2300      	movs	r3, #0
 800be88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be8a:	2300      	movs	r3, #0
 800be8c:	75fb      	strb	r3, [r7, #23]
 800be8e:	e027      	b.n	800bee0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	0f1b      	lsrs	r3, r3, #28
 800be94:	2b09      	cmp	r3, #9
 800be96:	d80b      	bhi.n	800beb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	0f1b      	lsrs	r3, r3, #28
 800be9c:	b2da      	uxtb	r2, r3
 800be9e:	7dfb      	ldrb	r3, [r7, #23]
 800bea0:	005b      	lsls	r3, r3, #1
 800bea2:	4619      	mov	r1, r3
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	440b      	add	r3, r1
 800bea8:	3230      	adds	r2, #48	; 0x30
 800beaa:	b2d2      	uxtb	r2, r2
 800beac:	701a      	strb	r2, [r3, #0]
 800beae:	e00a      	b.n	800bec6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	0f1b      	lsrs	r3, r3, #28
 800beb4:	b2da      	uxtb	r2, r3
 800beb6:	7dfb      	ldrb	r3, [r7, #23]
 800beb8:	005b      	lsls	r3, r3, #1
 800beba:	4619      	mov	r1, r3
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	440b      	add	r3, r1
 800bec0:	3237      	adds	r2, #55	; 0x37
 800bec2:	b2d2      	uxtb	r2, r2
 800bec4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	011b      	lsls	r3, r3, #4
 800beca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800becc:	7dfb      	ldrb	r3, [r7, #23]
 800bece:	005b      	lsls	r3, r3, #1
 800bed0:	3301      	adds	r3, #1
 800bed2:	68ba      	ldr	r2, [r7, #8]
 800bed4:	4413      	add	r3, r2
 800bed6:	2200      	movs	r2, #0
 800bed8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800beda:	7dfb      	ldrb	r3, [r7, #23]
 800bedc:	3301      	adds	r3, #1
 800bede:	75fb      	strb	r3, [r7, #23]
 800bee0:	7dfa      	ldrb	r2, [r7, #23]
 800bee2:	79fb      	ldrb	r3, [r7, #7]
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d3d3      	bcc.n	800be90 <IntToUnicode+0x18>
  }
}
 800bee8:	bf00      	nop
 800beea:	371c      	adds	r7, #28
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <MIDI_DataRx>:
};

uint8_t flag_sendMidi = 0;

uint16_t MIDI_DataRx(uint8_t *msg, uint16_t length)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	460b      	mov	r3, r1
 800befe:	807b      	strh	r3, [r7, #2]
  //uint8_t chan = msg[0] & 0x0F;
  uint8_t msgtype = msg[0] & 0xF0;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	f023 030f 	bic.w	r3, r3, #15
 800bf08:	73fb      	strb	r3, [r7, #15]
  uint8_t b1 =  msg[2];
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	789b      	ldrb	r3, [r3, #2]
 800bf0e:	73bb      	strb	r3, [r7, #14]
  uint8_t b2 =  msg[3];
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	78db      	ldrb	r3, [r3, #3]
 800bf14:	737b      	strb	r3, [r7, #13]
 // uint16_t b = ((b2 & 0x7F) << 7) | (b1 & 0x7F);
 
  switch (msgtype)
 800bf16:	7bfb      	ldrb	r3, [r7, #15]
 800bf18:	2bb0      	cmp	r3, #176	; 0xb0
 800bf1a:	d01c      	beq.n	800bf56 <MIDI_DataRx+0x62>
 800bf1c:	2bb0      	cmp	r3, #176	; 0xb0
 800bf1e:	dc05      	bgt.n	800bf2c <MIDI_DataRx+0x38>
 800bf20:	2b90      	cmp	r3, #144	; 0x90
 800bf22:	d01a      	beq.n	800bf5a <MIDI_DataRx+0x66>
 800bf24:	2ba0      	cmp	r3, #160	; 0xa0
 800bf26:	d01a      	beq.n	800bf5e <MIDI_DataRx+0x6a>
 800bf28:	2b80      	cmp	r3, #128	; 0x80
	  //key = b1;
	  //velocity = b2;
	  //notepos = key - 8 + transpose;
	  //stop_note(notepos);
	  //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7); //blink LED
	  break;
 800bf2a:	e01f      	b.n	800bf6c <MIDI_DataRx+0x78>
  switch (msgtype)
 800bf2c:	2bd0      	cmp	r3, #208	; 0xd0
 800bf2e:	d018      	beq.n	800bf62 <MIDI_DataRx+0x6e>
 800bf30:	2bd0      	cmp	r3, #208	; 0xd0
 800bf32:	dc01      	bgt.n	800bf38 <MIDI_DataRx+0x44>
 800bf34:	2bc0      	cmp	r3, #192	; 0xc0
							break;
					}*/
	  break;
  case 0xC0:
	  //data = b1;
	  break;
 800bf36:	e019      	b.n	800bf6c <MIDI_DataRx+0x78>
  switch (msgtype)
 800bf38:	2be0      	cmp	r3, #224	; 0xe0
 800bf3a:	d014      	beq.n	800bf66 <MIDI_DataRx+0x72>
 800bf3c:	2bf0      	cmp	r3, #240	; 0xf0
 800bf3e:	d115      	bne.n	800bf6c <MIDI_DataRx+0x78>
  case 0xE0:
	  //data = b2;
	  //		bend = data;
	  break;
  case 0xF0: {
	  if((b1 == 0x7E) && (b2 == 0x7F)) {
 800bf40:	7bbb      	ldrb	r3, [r7, #14]
 800bf42:	2b7e      	cmp	r3, #126	; 0x7e
 800bf44:	d111      	bne.n	800bf6a <MIDI_DataRx+0x76>
 800bf46:	7b7b      	ldrb	r3, [r7, #13]
 800bf48:	2b7f      	cmp	r3, #127	; 0x7f
 800bf4a:	d10e      	bne.n	800bf6a <MIDI_DataRx+0x76>
		  MIDI_DataTx(SysexID, 15);
 800bf4c:	210f      	movs	r1, #15
 800bf4e:	480a      	ldr	r0, [pc, #40]	; (800bf78 <MIDI_DataRx+0x84>)
 800bf50:	f000 f814 	bl	800bf7c <MIDI_DataTx>
	  }
	  break;
 800bf54:	e009      	b.n	800bf6a <MIDI_DataRx+0x76>
	  break;
 800bf56:	bf00      	nop
 800bf58:	e008      	b.n	800bf6c <MIDI_DataRx+0x78>
	  break;
 800bf5a:	bf00      	nop
 800bf5c:	e006      	b.n	800bf6c <MIDI_DataRx+0x78>
	  break;
 800bf5e:	bf00      	nop
 800bf60:	e004      	b.n	800bf6c <MIDI_DataRx+0x78>
	  break;
 800bf62:	bf00      	nop
 800bf64:	e002      	b.n	800bf6c <MIDI_DataRx+0x78>
	  break;
 800bf66:	bf00      	nop
 800bf68:	e000      	b.n	800bf6c <MIDI_DataRx+0x78>
	  break;
 800bf6a:	bf00      	nop
  }
  }
  return 0;
 800bf6c:	2300      	movs	r3, #0
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	20000258 	.word	0x20000258

0800bf7c <MIDI_DataTx>:

uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	460b      	mov	r3, r1
 800bf86:	807b      	strh	r3, [r7, #2]
  uint32_t i = 0;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	60fb      	str	r3, [r7, #12]
  while (i < length) {
 800bf8c:	e017      	b.n	800bfbe <MIDI_DataTx+0x42>
    APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	441a      	add	r2, r3
 800bf94:	4b0f      	ldr	r3, [pc, #60]	; (800bfd4 <MIDI_DataTx+0x58>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	7811      	ldrb	r1, [r2, #0]
 800bf9a:	4a0f      	ldr	r2, [pc, #60]	; (800bfd8 <MIDI_DataTx+0x5c>)
 800bf9c:	54d1      	strb	r1, [r2, r3]
    APP_Rx_ptr_in++;
 800bf9e:	4b0d      	ldr	r3, [pc, #52]	; (800bfd4 <MIDI_DataTx+0x58>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	4a0b      	ldr	r2, [pc, #44]	; (800bfd4 <MIDI_DataTx+0x58>)
 800bfa6:	6013      	str	r3, [r2, #0]
    i++;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	60fb      	str	r3, [r7, #12]
    if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 800bfae:	4b09      	ldr	r3, [pc, #36]	; (800bfd4 <MIDI_DataTx+0x58>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfb6:	d102      	bne.n	800bfbe <MIDI_DataTx+0x42>
      APP_Rx_ptr_in = 0;
 800bfb8:	4b06      	ldr	r3, [pc, #24]	; (800bfd4 <MIDI_DataTx+0x58>)
 800bfba:	2200      	movs	r2, #0
 800bfbc:	601a      	str	r2, [r3, #0]
  while (i < length) {
 800bfbe:	887b      	ldrh	r3, [r7, #2]
 800bfc0:	68fa      	ldr	r2, [r7, #12]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d3e3      	bcc.n	800bf8e <MIDI_DataTx+0x12>
    }
  }
  USBD_MIDI_SendPacket();
 800bfc6:	f7fe fc51 	bl	800a86c <USBD_MIDI_SendPacket>
  return USBD_OK;
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3710      	adds	r7, #16
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	2000038c 	.word	0x2000038c
 800bfd8:	2000090c 	.word	0x2000090c

0800bfdc <MIDI_SendBuffer>:

uint16_t MIDI_SendBuffer(uint8_t *msg, uint16_t length){
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	60fb      	str	r3, [r7, #12]
	while (i < length) {
 800bfec:	e017      	b.n	800c01e <MIDI_SendBuffer+0x42>
		APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	441a      	add	r2, r3
 800bff4:	4b11      	ldr	r3, [pc, #68]	; (800c03c <MIDI_SendBuffer+0x60>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	7811      	ldrb	r1, [r2, #0]
 800bffa:	4a11      	ldr	r2, [pc, #68]	; (800c040 <MIDI_SendBuffer+0x64>)
 800bffc:	54d1      	strb	r1, [r2, r3]
		APP_Rx_ptr_in++;
 800bffe:	4b0f      	ldr	r3, [pc, #60]	; (800c03c <MIDI_SendBuffer+0x60>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	3301      	adds	r3, #1
 800c004:	4a0d      	ldr	r2, [pc, #52]	; (800c03c <MIDI_SendBuffer+0x60>)
 800c006:	6013      	str	r3, [r2, #0]
		i++;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	3301      	adds	r3, #1
 800c00c:	60fb      	str	r3, [r7, #12]
		if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 800c00e:	4b0b      	ldr	r3, [pc, #44]	; (800c03c <MIDI_SendBuffer+0x60>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c016:	d102      	bne.n	800c01e <MIDI_SendBuffer+0x42>
			APP_Rx_ptr_in = 0;
 800c018:	4b08      	ldr	r3, [pc, #32]	; (800c03c <MIDI_SendBuffer+0x60>)
 800c01a:	2200      	movs	r2, #0
 800c01c:	601a      	str	r2, [r3, #0]
	while (i < length) {
 800c01e:	887b      	ldrh	r3, [r7, #2]
 800c020:	68fa      	ldr	r2, [r7, #12]
 800c022:	429a      	cmp	r2, r3
 800c024:	d3e3      	bcc.n	800bfee <MIDI_SendBuffer+0x12>
		}
	}
	flag_sendMidi = 1;
 800c026:	4b07      	ldr	r3, [pc, #28]	; (800c044 <MIDI_SendBuffer+0x68>)
 800c028:	2201      	movs	r2, #1
 800c02a:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3714      	adds	r7, #20
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop
 800c03c:	2000038c 	.word	0x2000038c
 800c040:	2000090c 	.word	0x2000090c
 800c044:	2000039a 	.word	0x2000039a

0800c048 <MIDI_SendCheck>:

void MIDI_SendCheck(void){
 800c048:	b580      	push	{r7, lr}
 800c04a:	af00      	add	r7, sp, #0
	if (flag_sendMidi != 0){
 800c04c:	4b07      	ldr	r3, [pc, #28]	; (800c06c <MIDI_SendCheck+0x24>)
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d008      	beq.n	800c066 <MIDI_SendCheck+0x1e>
		if (USB_Tx_State == 0){
 800c054:	4b06      	ldr	r3, [pc, #24]	; (800c070 <MIDI_SendCheck+0x28>)
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d104      	bne.n	800c066 <MIDI_SendCheck+0x1e>
			USBD_MIDI_SendPacket();
 800c05c:	f7fe fc06 	bl	800a86c <USBD_MIDI_SendPacket>
			flag_sendMidi = 0;
 800c060:	4b02      	ldr	r3, [pc, #8]	; (800c06c <MIDI_SendCheck+0x24>)
 800c062:	2200      	movs	r2, #0
 800c064:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800c066:	bf00      	nop
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	2000039a 	.word	0x2000039a
 800c070:	20000398 	.word	0x20000398

0800c074 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b08a      	sub	sp, #40	; 0x28
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c07c:	f107 0314 	add.w	r3, r7, #20
 800c080:	2200      	movs	r2, #0
 800c082:	601a      	str	r2, [r3, #0]
 800c084:	605a      	str	r2, [r3, #4]
 800c086:	609a      	str	r2, [r3, #8]
 800c088:	60da      	str	r2, [r3, #12]
 800c08a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c094:	d13a      	bne.n	800c10c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c096:	2300      	movs	r3, #0
 800c098:	613b      	str	r3, [r7, #16]
 800c09a:	4b1e      	ldr	r3, [pc, #120]	; (800c114 <HAL_PCD_MspInit+0xa0>)
 800c09c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c09e:	4a1d      	ldr	r2, [pc, #116]	; (800c114 <HAL_PCD_MspInit+0xa0>)
 800c0a0:	f043 0301 	orr.w	r3, r3, #1
 800c0a4:	6313      	str	r3, [r2, #48]	; 0x30
 800c0a6:	4b1b      	ldr	r3, [pc, #108]	; (800c114 <HAL_PCD_MspInit+0xa0>)
 800c0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0aa:	f003 0301 	and.w	r3, r3, #1
 800c0ae:	613b      	str	r3, [r7, #16]
 800c0b0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c0b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c0b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0b8:	2302      	movs	r3, #2
 800c0ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0c0:	2303      	movs	r3, #3
 800c0c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c0c4:	230a      	movs	r3, #10
 800c0c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c0c8:	f107 0314 	add.w	r3, r7, #20
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	4812      	ldr	r0, [pc, #72]	; (800c118 <HAL_PCD_MspInit+0xa4>)
 800c0d0:	f7f6 ffe2 	bl	8003098 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c0d4:	4b0f      	ldr	r3, [pc, #60]	; (800c114 <HAL_PCD_MspInit+0xa0>)
 800c0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0d8:	4a0e      	ldr	r2, [pc, #56]	; (800c114 <HAL_PCD_MspInit+0xa0>)
 800c0da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0de:	6353      	str	r3, [r2, #52]	; 0x34
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	60fb      	str	r3, [r7, #12]
 800c0e4:	4b0b      	ldr	r3, [pc, #44]	; (800c114 <HAL_PCD_MspInit+0xa0>)
 800c0e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0e8:	4a0a      	ldr	r2, [pc, #40]	; (800c114 <HAL_PCD_MspInit+0xa0>)
 800c0ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c0ee:	6453      	str	r3, [r2, #68]	; 0x44
 800c0f0:	4b08      	ldr	r3, [pc, #32]	; (800c114 <HAL_PCD_MspInit+0xa0>)
 800c0f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0f8:	60fb      	str	r3, [r7, #12]
 800c0fa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	2100      	movs	r1, #0
 800c100:	2043      	movs	r0, #67	; 0x43
 800c102:	f7f6 fe68 	bl	8002dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c106:	2043      	movs	r0, #67	; 0x43
 800c108:	f7f6 fe81 	bl	8002e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c10c:	bf00      	nop
 800c10e:	3728      	adds	r7, #40	; 0x28
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	40023800 	.word	0x40023800
 800c118:	40020000 	.word	0x40020000

0800c11c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c130:	4619      	mov	r1, r3
 800c132:	4610      	mov	r0, r2
 800c134:	f7fe fcd3 	bl	800aade <USBD_LL_SetupStage>
}
 800c138:	bf00      	nop
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	460b      	mov	r3, r1
 800c14a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c152:	78fa      	ldrb	r2, [r7, #3]
 800c154:	6879      	ldr	r1, [r7, #4]
 800c156:	4613      	mov	r3, r2
 800c158:	00db      	lsls	r3, r3, #3
 800c15a:	1a9b      	subs	r3, r3, r2
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	440b      	add	r3, r1
 800c160:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	78fb      	ldrb	r3, [r7, #3]
 800c168:	4619      	mov	r1, r3
 800c16a:	f7fe fd0b 	bl	800ab84 <USBD_LL_DataOutStage>
}
 800c16e:	bf00      	nop
 800c170:	3708      	adds	r7, #8
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b082      	sub	sp, #8
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
 800c17e:	460b      	mov	r3, r1
 800c180:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c188:	78fa      	ldrb	r2, [r7, #3]
 800c18a:	6879      	ldr	r1, [r7, #4]
 800c18c:	4613      	mov	r3, r2
 800c18e:	00db      	lsls	r3, r3, #3
 800c190:	1a9b      	subs	r3, r3, r2
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	440b      	add	r3, r1
 800c196:	3348      	adds	r3, #72	; 0x48
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	78fb      	ldrb	r3, [r7, #3]
 800c19c:	4619      	mov	r1, r3
 800c19e:	f7fe fd54 	bl	800ac4a <USBD_LL_DataInStage>
}
 800c1a2:	bf00      	nop
 800c1a4:	3708      	adds	r7, #8
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}

0800c1aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b082      	sub	sp, #8
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7fe fe58 	bl	800ae6e <USBD_LL_SOF>
}
 800c1be:	bf00      	nop
 800c1c0:	3708      	adds	r7, #8
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b084      	sub	sp, #16
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d102      	bne.n	800c1e0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	73fb      	strb	r3, [r7, #15]
 800c1de:	e008      	b.n	800c1f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	2b02      	cmp	r3, #2
 800c1e6:	d102      	bne.n	800c1ee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	73fb      	strb	r3, [r7, #15]
 800c1ec:	e001      	b.n	800c1f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c1ee:	f7f5 fde3 	bl	8001db8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1f8:	7bfa      	ldrb	r2, [r7, #15]
 800c1fa:	4611      	mov	r1, r2
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7fe fdfb 	bl	800adf8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c208:	4618      	mov	r0, r3
 800c20a:	f7fe fdb4 	bl	800ad76 <USBD_LL_Reset>
}
 800c20e:	bf00      	nop
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
	...

0800c218 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c226:	4618      	mov	r0, r3
 800c228:	f7fe fdf6 	bl	800ae18 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	6812      	ldr	r2, [r2, #0]
 800c23a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c23e:	f043 0301 	orr.w	r3, r3, #1
 800c242:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6a1b      	ldr	r3, [r3, #32]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d005      	beq.n	800c258 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c24c:	4b04      	ldr	r3, [pc, #16]	; (800c260 <HAL_PCD_SuspendCallback+0x48>)
 800c24e:	691b      	ldr	r3, [r3, #16]
 800c250:	4a03      	ldr	r2, [pc, #12]	; (800c260 <HAL_PCD_SuspendCallback+0x48>)
 800c252:	f043 0306 	orr.w	r3, r3, #6
 800c256:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c258:	bf00      	nop
 800c25a:	3708      	adds	r7, #8
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	e000ed00 	.word	0xe000ed00

0800c264 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c272:	4618      	mov	r0, r3
 800c274:	f7fe fde5 	bl	800ae42 <USBD_LL_Resume>
}
 800c278:	bf00      	nop
 800c27a:	3708      	adds	r7, #8
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	460b      	mov	r3, r1
 800c28a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c292:	78fa      	ldrb	r2, [r7, #3]
 800c294:	4611      	mov	r1, r2
 800c296:	4618      	mov	r0, r3
 800c298:	f7fe fe10 	bl	800aebc <USBD_LL_IsoOUTIncomplete>
}
 800c29c:	bf00      	nop
 800c29e:	3708      	adds	r7, #8
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c2b6:	78fa      	ldrb	r2, [r7, #3]
 800c2b8:	4611      	mov	r1, r2
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7fe fdf1 	bl	800aea2 <USBD_LL_IsoINIncomplete>
}
 800c2c0:	bf00      	nop
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7fe fdfd 	bl	800aed6 <USBD_LL_DevConnected>
}
 800c2dc:	bf00      	nop
 800c2de:	3708      	adds	r7, #8
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7fe fdfa 	bl	800aeec <USBD_LL_DevDisconnected>
}
 800c2f8:	bf00      	nop
 800c2fa:	3708      	adds	r7, #8
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d13c      	bne.n	800c38a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c310:	4a20      	ldr	r2, [pc, #128]	; (800c394 <USBD_LL_Init+0x94>)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	4a1e      	ldr	r2, [pc, #120]	; (800c394 <USBD_LL_Init+0x94>)
 800c31c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c320:	4b1c      	ldr	r3, [pc, #112]	; (800c394 <USBD_LL_Init+0x94>)
 800c322:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c326:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c328:	4b1a      	ldr	r3, [pc, #104]	; (800c394 <USBD_LL_Init+0x94>)
 800c32a:	2204      	movs	r2, #4
 800c32c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c32e:	4b19      	ldr	r3, [pc, #100]	; (800c394 <USBD_LL_Init+0x94>)
 800c330:	2202      	movs	r2, #2
 800c332:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c334:	4b17      	ldr	r3, [pc, #92]	; (800c394 <USBD_LL_Init+0x94>)
 800c336:	2200      	movs	r2, #0
 800c338:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c33a:	4b16      	ldr	r3, [pc, #88]	; (800c394 <USBD_LL_Init+0x94>)
 800c33c:	2202      	movs	r2, #2
 800c33e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c340:	4b14      	ldr	r3, [pc, #80]	; (800c394 <USBD_LL_Init+0x94>)
 800c342:	2200      	movs	r2, #0
 800c344:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c346:	4b13      	ldr	r3, [pc, #76]	; (800c394 <USBD_LL_Init+0x94>)
 800c348:	2200      	movs	r2, #0
 800c34a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c34c:	4b11      	ldr	r3, [pc, #68]	; (800c394 <USBD_LL_Init+0x94>)
 800c34e:	2200      	movs	r2, #0
 800c350:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c352:	4b10      	ldr	r3, [pc, #64]	; (800c394 <USBD_LL_Init+0x94>)
 800c354:	2200      	movs	r2, #0
 800c356:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c358:	4b0e      	ldr	r3, [pc, #56]	; (800c394 <USBD_LL_Init+0x94>)
 800c35a:	2200      	movs	r2, #0
 800c35c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c35e:	480d      	ldr	r0, [pc, #52]	; (800c394 <USBD_LL_Init+0x94>)
 800c360:	f7f9 f939 	bl	80055d6 <HAL_PCD_Init>
 800c364:	4603      	mov	r3, r0
 800c366:	2b00      	cmp	r3, #0
 800c368:	d001      	beq.n	800c36e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c36a:	f7f5 fd25 	bl	8001db8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c36e:	2180      	movs	r1, #128	; 0x80
 800c370:	4808      	ldr	r0, [pc, #32]	; (800c394 <USBD_LL_Init+0x94>)
 800c372:	f7fa fa96 	bl	80068a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c376:	2240      	movs	r2, #64	; 0x40
 800c378:	2100      	movs	r1, #0
 800c37a:	4806      	ldr	r0, [pc, #24]	; (800c394 <USBD_LL_Init+0x94>)
 800c37c:	f7fa fa4a 	bl	8006814 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c380:	2280      	movs	r2, #128	; 0x80
 800c382:	2101      	movs	r1, #1
 800c384:	4803      	ldr	r0, [pc, #12]	; (800c394 <USBD_LL_Init+0x94>)
 800c386:	f7fa fa45 	bl	8006814 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c38a:	2300      	movs	r3, #0
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3708      	adds	r7, #8
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}
 800c394:	20000edc 	.word	0x20000edc

0800c398 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7f9 fa2e 	bl	8005810 <HAL_PCD_Start>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3b8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f000 f92a 	bl	800c614 <USBD_Get_USB_Status>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b084      	sub	sp, #16
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
 800c3d6:	4608      	mov	r0, r1
 800c3d8:	4611      	mov	r1, r2
 800c3da:	461a      	mov	r2, r3
 800c3dc:	4603      	mov	r3, r0
 800c3de:	70fb      	strb	r3, [r7, #3]
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	70bb      	strb	r3, [r7, #2]
 800c3e4:	4613      	mov	r3, r2
 800c3e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c3f6:	78bb      	ldrb	r3, [r7, #2]
 800c3f8:	883a      	ldrh	r2, [r7, #0]
 800c3fa:	78f9      	ldrb	r1, [r7, #3]
 800c3fc:	f7f9 fe12 	bl	8006024 <HAL_PCD_EP_Open>
 800c400:	4603      	mov	r3, r0
 800c402:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c404:	7bfb      	ldrb	r3, [r7, #15]
 800c406:	4618      	mov	r0, r3
 800c408:	f000 f904 	bl	800c614 <USBD_Get_USB_Status>
 800c40c:	4603      	mov	r3, r0
 800c40e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c410:	7bbb      	ldrb	r3, [r7, #14]
}
 800c412:	4618      	mov	r0, r3
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b084      	sub	sp, #16
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
 800c422:	460b      	mov	r3, r1
 800c424:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c426:	2300      	movs	r3, #0
 800c428:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c42a:	2300      	movs	r3, #0
 800c42c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c434:	78fa      	ldrb	r2, [r7, #3]
 800c436:	4611      	mov	r1, r2
 800c438:	4618      	mov	r0, r3
 800c43a:	f7f9 fe5b 	bl	80060f4 <HAL_PCD_EP_Close>
 800c43e:	4603      	mov	r3, r0
 800c440:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c442:	7bfb      	ldrb	r3, [r7, #15]
 800c444:	4618      	mov	r0, r3
 800c446:	f000 f8e5 	bl	800c614 <USBD_Get_USB_Status>
 800c44a:	4603      	mov	r3, r0
 800c44c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c44e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c450:	4618      	mov	r0, r3
 800c452:	3710      	adds	r7, #16
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	460b      	mov	r3, r1
 800c462:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c464:	2300      	movs	r3, #0
 800c466:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c468:	2300      	movs	r3, #0
 800c46a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c472:	78fa      	ldrb	r2, [r7, #3]
 800c474:	4611      	mov	r1, r2
 800c476:	4618      	mov	r0, r3
 800c478:	f7f9 ff33 	bl	80062e2 <HAL_PCD_EP_SetStall>
 800c47c:	4603      	mov	r3, r0
 800c47e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c480:	7bfb      	ldrb	r3, [r7, #15]
 800c482:	4618      	mov	r0, r3
 800c484:	f000 f8c6 	bl	800c614 <USBD_Get_USB_Status>
 800c488:	4603      	mov	r3, r0
 800c48a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c48c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c496:	b580      	push	{r7, lr}
 800c498:	b084      	sub	sp, #16
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
 800c49e:	460b      	mov	r3, r1
 800c4a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c4b0:	78fa      	ldrb	r2, [r7, #3]
 800c4b2:	4611      	mov	r1, r2
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f7f9 ff78 	bl	80063aa <HAL_PCD_EP_ClrStall>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4be:	7bfb      	ldrb	r3, [r7, #15]
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f000 f8a7 	bl	800c614 <USBD_Get_USB_Status>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3710      	adds	r7, #16
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b085      	sub	sp, #20
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	460b      	mov	r3, r1
 800c4de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c4e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c4e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	da0b      	bge.n	800c508 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c4f0:	78fb      	ldrb	r3, [r7, #3]
 800c4f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c4f6:	68f9      	ldr	r1, [r7, #12]
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	00db      	lsls	r3, r3, #3
 800c4fc:	1a9b      	subs	r3, r3, r2
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	440b      	add	r3, r1
 800c502:	333e      	adds	r3, #62	; 0x3e
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	e00b      	b.n	800c520 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c508:	78fb      	ldrb	r3, [r7, #3]
 800c50a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c50e:	68f9      	ldr	r1, [r7, #12]
 800c510:	4613      	mov	r3, r2
 800c512:	00db      	lsls	r3, r3, #3
 800c514:	1a9b      	subs	r3, r3, r2
 800c516:	009b      	lsls	r3, r3, #2
 800c518:	440b      	add	r3, r1
 800c51a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c51e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c520:	4618      	mov	r0, r3
 800c522:	3714      	adds	r7, #20
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	460b      	mov	r3, r1
 800c536:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c538:	2300      	movs	r3, #0
 800c53a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c53c:	2300      	movs	r3, #0
 800c53e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c546:	78fa      	ldrb	r2, [r7, #3]
 800c548:	4611      	mov	r1, r2
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7f9 fd45 	bl	8005fda <HAL_PCD_SetAddress>
 800c550:	4603      	mov	r3, r0
 800c552:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c554:	7bfb      	ldrb	r3, [r7, #15]
 800c556:	4618      	mov	r0, r3
 800c558:	f000 f85c 	bl	800c614 <USBD_Get_USB_Status>
 800c55c:	4603      	mov	r3, r0
 800c55e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c560:	7bbb      	ldrb	r3, [r7, #14]
}
 800c562:	4618      	mov	r0, r3
 800c564:	3710      	adds	r7, #16
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b086      	sub	sp, #24
 800c56e:	af00      	add	r7, sp, #0
 800c570:	60f8      	str	r0, [r7, #12]
 800c572:	607a      	str	r2, [r7, #4]
 800c574:	603b      	str	r3, [r7, #0]
 800c576:	460b      	mov	r3, r1
 800c578:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c57a:	2300      	movs	r3, #0
 800c57c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c57e:	2300      	movs	r3, #0
 800c580:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c588:	7af9      	ldrb	r1, [r7, #11]
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	f7f9 fe5e 	bl	800624e <HAL_PCD_EP_Transmit>
 800c592:	4603      	mov	r3, r0
 800c594:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c596:	7dfb      	ldrb	r3, [r7, #23]
 800c598:	4618      	mov	r0, r3
 800c59a:	f000 f83b 	bl	800c614 <USBD_Get_USB_Status>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c5a2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3718      	adds	r7, #24
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b086      	sub	sp, #24
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	607a      	str	r2, [r7, #4]
 800c5b6:	603b      	str	r3, [r7, #0]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c5ca:	7af9      	ldrb	r1, [r7, #11]
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	f7f9 fdda 	bl	8006188 <HAL_PCD_EP_Receive>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5d8:	7dfb      	ldrb	r3, [r7, #23]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f000 f81a 	bl	800c614 <USBD_Get_USB_Status>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c5e4:	7dbb      	ldrb	r3, [r7, #22]
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3718      	adds	r7, #24
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b082      	sub	sp, #8
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c600:	78fa      	ldrb	r2, [r7, #3]
 800c602:	4611      	mov	r1, r2
 800c604:	4618      	mov	r0, r3
 800c606:	f7f9 fe0a 	bl	800621e <HAL_PCD_EP_GetRxCount>
 800c60a:	4603      	mov	r3, r0
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c614:	b480      	push	{r7}
 800c616:	b085      	sub	sp, #20
 800c618:	af00      	add	r7, sp, #0
 800c61a:	4603      	mov	r3, r0
 800c61c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c61e:	2300      	movs	r3, #0
 800c620:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c622:	79fb      	ldrb	r3, [r7, #7]
 800c624:	2b03      	cmp	r3, #3
 800c626:	d817      	bhi.n	800c658 <USBD_Get_USB_Status+0x44>
 800c628:	a201      	add	r2, pc, #4	; (adr r2, 800c630 <USBD_Get_USB_Status+0x1c>)
 800c62a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c62e:	bf00      	nop
 800c630:	0800c641 	.word	0x0800c641
 800c634:	0800c647 	.word	0x0800c647
 800c638:	0800c64d 	.word	0x0800c64d
 800c63c:	0800c653 	.word	0x0800c653
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c640:	2300      	movs	r3, #0
 800c642:	73fb      	strb	r3, [r7, #15]
    break;
 800c644:	e00b      	b.n	800c65e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c646:	2303      	movs	r3, #3
 800c648:	73fb      	strb	r3, [r7, #15]
    break;
 800c64a:	e008      	b.n	800c65e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c64c:	2301      	movs	r3, #1
 800c64e:	73fb      	strb	r3, [r7, #15]
    break;
 800c650:	e005      	b.n	800c65e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c652:	2303      	movs	r3, #3
 800c654:	73fb      	strb	r3, [r7, #15]
    break;
 800c656:	e002      	b.n	800c65e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c658:	2303      	movs	r3, #3
 800c65a:	73fb      	strb	r3, [r7, #15]
    break;
 800c65c:	bf00      	nop
  }
  return usb_status;
 800c65e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c660:	4618      	mov	r0, r3
 800c662:	3714      	adds	r7, #20
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr

0800c66c <__errno>:
 800c66c:	4b01      	ldr	r3, [pc, #4]	; (800c674 <__errno+0x8>)
 800c66e:	6818      	ldr	r0, [r3, #0]
 800c670:	4770      	bx	lr
 800c672:	bf00      	nop
 800c674:	20000270 	.word	0x20000270

0800c678 <__libc_init_array>:
 800c678:	b570      	push	{r4, r5, r6, lr}
 800c67a:	4e0d      	ldr	r6, [pc, #52]	; (800c6b0 <__libc_init_array+0x38>)
 800c67c:	4c0d      	ldr	r4, [pc, #52]	; (800c6b4 <__libc_init_array+0x3c>)
 800c67e:	1ba4      	subs	r4, r4, r6
 800c680:	10a4      	asrs	r4, r4, #2
 800c682:	2500      	movs	r5, #0
 800c684:	42a5      	cmp	r5, r4
 800c686:	d109      	bne.n	800c69c <__libc_init_array+0x24>
 800c688:	4e0b      	ldr	r6, [pc, #44]	; (800c6b8 <__libc_init_array+0x40>)
 800c68a:	4c0c      	ldr	r4, [pc, #48]	; (800c6bc <__libc_init_array+0x44>)
 800c68c:	f000 fc36 	bl	800cefc <_init>
 800c690:	1ba4      	subs	r4, r4, r6
 800c692:	10a4      	asrs	r4, r4, #2
 800c694:	2500      	movs	r5, #0
 800c696:	42a5      	cmp	r5, r4
 800c698:	d105      	bne.n	800c6a6 <__libc_init_array+0x2e>
 800c69a:	bd70      	pop	{r4, r5, r6, pc}
 800c69c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c6a0:	4798      	blx	r3
 800c6a2:	3501      	adds	r5, #1
 800c6a4:	e7ee      	b.n	800c684 <__libc_init_array+0xc>
 800c6a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c6aa:	4798      	blx	r3
 800c6ac:	3501      	adds	r5, #1
 800c6ae:	e7f2      	b.n	800c696 <__libc_init_array+0x1e>
 800c6b0:	08040e5c 	.word	0x08040e5c
 800c6b4:	08040e5c 	.word	0x08040e5c
 800c6b8:	08040e5c 	.word	0x08040e5c
 800c6bc:	08040e60 	.word	0x08040e60

0800c6c0 <malloc>:
 800c6c0:	4b02      	ldr	r3, [pc, #8]	; (800c6cc <malloc+0xc>)
 800c6c2:	4601      	mov	r1, r0
 800c6c4:	6818      	ldr	r0, [r3, #0]
 800c6c6:	f000 b861 	b.w	800c78c <_malloc_r>
 800c6ca:	bf00      	nop
 800c6cc:	20000270 	.word	0x20000270

0800c6d0 <free>:
 800c6d0:	4b02      	ldr	r3, [pc, #8]	; (800c6dc <free+0xc>)
 800c6d2:	4601      	mov	r1, r0
 800c6d4:	6818      	ldr	r0, [r3, #0]
 800c6d6:	f000 b80b 	b.w	800c6f0 <_free_r>
 800c6da:	bf00      	nop
 800c6dc:	20000270 	.word	0x20000270

0800c6e0 <memset>:
 800c6e0:	4402      	add	r2, r0
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d100      	bne.n	800c6ea <memset+0xa>
 800c6e8:	4770      	bx	lr
 800c6ea:	f803 1b01 	strb.w	r1, [r3], #1
 800c6ee:	e7f9      	b.n	800c6e4 <memset+0x4>

0800c6f0 <_free_r>:
 800c6f0:	b538      	push	{r3, r4, r5, lr}
 800c6f2:	4605      	mov	r5, r0
 800c6f4:	2900      	cmp	r1, #0
 800c6f6:	d045      	beq.n	800c784 <_free_r+0x94>
 800c6f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6fc:	1f0c      	subs	r4, r1, #4
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	bfb8      	it	lt
 800c702:	18e4      	addlt	r4, r4, r3
 800c704:	f000 f8cc 	bl	800c8a0 <__malloc_lock>
 800c708:	4a1f      	ldr	r2, [pc, #124]	; (800c788 <_free_r+0x98>)
 800c70a:	6813      	ldr	r3, [r2, #0]
 800c70c:	4610      	mov	r0, r2
 800c70e:	b933      	cbnz	r3, 800c71e <_free_r+0x2e>
 800c710:	6063      	str	r3, [r4, #4]
 800c712:	6014      	str	r4, [r2, #0]
 800c714:	4628      	mov	r0, r5
 800c716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c71a:	f000 b8c2 	b.w	800c8a2 <__malloc_unlock>
 800c71e:	42a3      	cmp	r3, r4
 800c720:	d90c      	bls.n	800c73c <_free_r+0x4c>
 800c722:	6821      	ldr	r1, [r4, #0]
 800c724:	1862      	adds	r2, r4, r1
 800c726:	4293      	cmp	r3, r2
 800c728:	bf04      	itt	eq
 800c72a:	681a      	ldreq	r2, [r3, #0]
 800c72c:	685b      	ldreq	r3, [r3, #4]
 800c72e:	6063      	str	r3, [r4, #4]
 800c730:	bf04      	itt	eq
 800c732:	1852      	addeq	r2, r2, r1
 800c734:	6022      	streq	r2, [r4, #0]
 800c736:	6004      	str	r4, [r0, #0]
 800c738:	e7ec      	b.n	800c714 <_free_r+0x24>
 800c73a:	4613      	mov	r3, r2
 800c73c:	685a      	ldr	r2, [r3, #4]
 800c73e:	b10a      	cbz	r2, 800c744 <_free_r+0x54>
 800c740:	42a2      	cmp	r2, r4
 800c742:	d9fa      	bls.n	800c73a <_free_r+0x4a>
 800c744:	6819      	ldr	r1, [r3, #0]
 800c746:	1858      	adds	r0, r3, r1
 800c748:	42a0      	cmp	r0, r4
 800c74a:	d10b      	bne.n	800c764 <_free_r+0x74>
 800c74c:	6820      	ldr	r0, [r4, #0]
 800c74e:	4401      	add	r1, r0
 800c750:	1858      	adds	r0, r3, r1
 800c752:	4282      	cmp	r2, r0
 800c754:	6019      	str	r1, [r3, #0]
 800c756:	d1dd      	bne.n	800c714 <_free_r+0x24>
 800c758:	6810      	ldr	r0, [r2, #0]
 800c75a:	6852      	ldr	r2, [r2, #4]
 800c75c:	605a      	str	r2, [r3, #4]
 800c75e:	4401      	add	r1, r0
 800c760:	6019      	str	r1, [r3, #0]
 800c762:	e7d7      	b.n	800c714 <_free_r+0x24>
 800c764:	d902      	bls.n	800c76c <_free_r+0x7c>
 800c766:	230c      	movs	r3, #12
 800c768:	602b      	str	r3, [r5, #0]
 800c76a:	e7d3      	b.n	800c714 <_free_r+0x24>
 800c76c:	6820      	ldr	r0, [r4, #0]
 800c76e:	1821      	adds	r1, r4, r0
 800c770:	428a      	cmp	r2, r1
 800c772:	bf04      	itt	eq
 800c774:	6811      	ldreq	r1, [r2, #0]
 800c776:	6852      	ldreq	r2, [r2, #4]
 800c778:	6062      	str	r2, [r4, #4]
 800c77a:	bf04      	itt	eq
 800c77c:	1809      	addeq	r1, r1, r0
 800c77e:	6021      	streq	r1, [r4, #0]
 800c780:	605c      	str	r4, [r3, #4]
 800c782:	e7c7      	b.n	800c714 <_free_r+0x24>
 800c784:	bd38      	pop	{r3, r4, r5, pc}
 800c786:	bf00      	nop
 800c788:	2000039c 	.word	0x2000039c

0800c78c <_malloc_r>:
 800c78c:	b570      	push	{r4, r5, r6, lr}
 800c78e:	1ccd      	adds	r5, r1, #3
 800c790:	f025 0503 	bic.w	r5, r5, #3
 800c794:	3508      	adds	r5, #8
 800c796:	2d0c      	cmp	r5, #12
 800c798:	bf38      	it	cc
 800c79a:	250c      	movcc	r5, #12
 800c79c:	2d00      	cmp	r5, #0
 800c79e:	4606      	mov	r6, r0
 800c7a0:	db01      	blt.n	800c7a6 <_malloc_r+0x1a>
 800c7a2:	42a9      	cmp	r1, r5
 800c7a4:	d903      	bls.n	800c7ae <_malloc_r+0x22>
 800c7a6:	230c      	movs	r3, #12
 800c7a8:	6033      	str	r3, [r6, #0]
 800c7aa:	2000      	movs	r0, #0
 800c7ac:	bd70      	pop	{r4, r5, r6, pc}
 800c7ae:	f000 f877 	bl	800c8a0 <__malloc_lock>
 800c7b2:	4a21      	ldr	r2, [pc, #132]	; (800c838 <_malloc_r+0xac>)
 800c7b4:	6814      	ldr	r4, [r2, #0]
 800c7b6:	4621      	mov	r1, r4
 800c7b8:	b991      	cbnz	r1, 800c7e0 <_malloc_r+0x54>
 800c7ba:	4c20      	ldr	r4, [pc, #128]	; (800c83c <_malloc_r+0xb0>)
 800c7bc:	6823      	ldr	r3, [r4, #0]
 800c7be:	b91b      	cbnz	r3, 800c7c8 <_malloc_r+0x3c>
 800c7c0:	4630      	mov	r0, r6
 800c7c2:	f000 f83d 	bl	800c840 <_sbrk_r>
 800c7c6:	6020      	str	r0, [r4, #0]
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	4630      	mov	r0, r6
 800c7cc:	f000 f838 	bl	800c840 <_sbrk_r>
 800c7d0:	1c43      	adds	r3, r0, #1
 800c7d2:	d124      	bne.n	800c81e <_malloc_r+0x92>
 800c7d4:	230c      	movs	r3, #12
 800c7d6:	6033      	str	r3, [r6, #0]
 800c7d8:	4630      	mov	r0, r6
 800c7da:	f000 f862 	bl	800c8a2 <__malloc_unlock>
 800c7de:	e7e4      	b.n	800c7aa <_malloc_r+0x1e>
 800c7e0:	680b      	ldr	r3, [r1, #0]
 800c7e2:	1b5b      	subs	r3, r3, r5
 800c7e4:	d418      	bmi.n	800c818 <_malloc_r+0x8c>
 800c7e6:	2b0b      	cmp	r3, #11
 800c7e8:	d90f      	bls.n	800c80a <_malloc_r+0x7e>
 800c7ea:	600b      	str	r3, [r1, #0]
 800c7ec:	50cd      	str	r5, [r1, r3]
 800c7ee:	18cc      	adds	r4, r1, r3
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	f000 f856 	bl	800c8a2 <__malloc_unlock>
 800c7f6:	f104 000b 	add.w	r0, r4, #11
 800c7fa:	1d23      	adds	r3, r4, #4
 800c7fc:	f020 0007 	bic.w	r0, r0, #7
 800c800:	1ac3      	subs	r3, r0, r3
 800c802:	d0d3      	beq.n	800c7ac <_malloc_r+0x20>
 800c804:	425a      	negs	r2, r3
 800c806:	50e2      	str	r2, [r4, r3]
 800c808:	e7d0      	b.n	800c7ac <_malloc_r+0x20>
 800c80a:	428c      	cmp	r4, r1
 800c80c:	684b      	ldr	r3, [r1, #4]
 800c80e:	bf16      	itet	ne
 800c810:	6063      	strne	r3, [r4, #4]
 800c812:	6013      	streq	r3, [r2, #0]
 800c814:	460c      	movne	r4, r1
 800c816:	e7eb      	b.n	800c7f0 <_malloc_r+0x64>
 800c818:	460c      	mov	r4, r1
 800c81a:	6849      	ldr	r1, [r1, #4]
 800c81c:	e7cc      	b.n	800c7b8 <_malloc_r+0x2c>
 800c81e:	1cc4      	adds	r4, r0, #3
 800c820:	f024 0403 	bic.w	r4, r4, #3
 800c824:	42a0      	cmp	r0, r4
 800c826:	d005      	beq.n	800c834 <_malloc_r+0xa8>
 800c828:	1a21      	subs	r1, r4, r0
 800c82a:	4630      	mov	r0, r6
 800c82c:	f000 f808 	bl	800c840 <_sbrk_r>
 800c830:	3001      	adds	r0, #1
 800c832:	d0cf      	beq.n	800c7d4 <_malloc_r+0x48>
 800c834:	6025      	str	r5, [r4, #0]
 800c836:	e7db      	b.n	800c7f0 <_malloc_r+0x64>
 800c838:	2000039c 	.word	0x2000039c
 800c83c:	200003a0 	.word	0x200003a0

0800c840 <_sbrk_r>:
 800c840:	b538      	push	{r3, r4, r5, lr}
 800c842:	4c06      	ldr	r4, [pc, #24]	; (800c85c <_sbrk_r+0x1c>)
 800c844:	2300      	movs	r3, #0
 800c846:	4605      	mov	r5, r0
 800c848:	4608      	mov	r0, r1
 800c84a:	6023      	str	r3, [r4, #0]
 800c84c:	f7f5 fcce 	bl	80021ec <_sbrk>
 800c850:	1c43      	adds	r3, r0, #1
 800c852:	d102      	bne.n	800c85a <_sbrk_r+0x1a>
 800c854:	6823      	ldr	r3, [r4, #0]
 800c856:	b103      	cbz	r3, 800c85a <_sbrk_r+0x1a>
 800c858:	602b      	str	r3, [r5, #0]
 800c85a:	bd38      	pop	{r3, r4, r5, pc}
 800c85c:	200012e4 	.word	0x200012e4

0800c860 <siprintf>:
 800c860:	b40e      	push	{r1, r2, r3}
 800c862:	b500      	push	{lr}
 800c864:	b09c      	sub	sp, #112	; 0x70
 800c866:	ab1d      	add	r3, sp, #116	; 0x74
 800c868:	9002      	str	r0, [sp, #8]
 800c86a:	9006      	str	r0, [sp, #24]
 800c86c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c870:	4809      	ldr	r0, [pc, #36]	; (800c898 <siprintf+0x38>)
 800c872:	9107      	str	r1, [sp, #28]
 800c874:	9104      	str	r1, [sp, #16]
 800c876:	4909      	ldr	r1, [pc, #36]	; (800c89c <siprintf+0x3c>)
 800c878:	f853 2b04 	ldr.w	r2, [r3], #4
 800c87c:	9105      	str	r1, [sp, #20]
 800c87e:	6800      	ldr	r0, [r0, #0]
 800c880:	9301      	str	r3, [sp, #4]
 800c882:	a902      	add	r1, sp, #8
 800c884:	f000 f868 	bl	800c958 <_svfiprintf_r>
 800c888:	9b02      	ldr	r3, [sp, #8]
 800c88a:	2200      	movs	r2, #0
 800c88c:	701a      	strb	r2, [r3, #0]
 800c88e:	b01c      	add	sp, #112	; 0x70
 800c890:	f85d eb04 	ldr.w	lr, [sp], #4
 800c894:	b003      	add	sp, #12
 800c896:	4770      	bx	lr
 800c898:	20000270 	.word	0x20000270
 800c89c:	ffff0208 	.word	0xffff0208

0800c8a0 <__malloc_lock>:
 800c8a0:	4770      	bx	lr

0800c8a2 <__malloc_unlock>:
 800c8a2:	4770      	bx	lr

0800c8a4 <__ssputs_r>:
 800c8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a8:	688e      	ldr	r6, [r1, #8]
 800c8aa:	429e      	cmp	r6, r3
 800c8ac:	4682      	mov	sl, r0
 800c8ae:	460c      	mov	r4, r1
 800c8b0:	4690      	mov	r8, r2
 800c8b2:	4699      	mov	r9, r3
 800c8b4:	d837      	bhi.n	800c926 <__ssputs_r+0x82>
 800c8b6:	898a      	ldrh	r2, [r1, #12]
 800c8b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c8bc:	d031      	beq.n	800c922 <__ssputs_r+0x7e>
 800c8be:	6825      	ldr	r5, [r4, #0]
 800c8c0:	6909      	ldr	r1, [r1, #16]
 800c8c2:	1a6f      	subs	r7, r5, r1
 800c8c4:	6965      	ldr	r5, [r4, #20]
 800c8c6:	2302      	movs	r3, #2
 800c8c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8cc:	fb95 f5f3 	sdiv	r5, r5, r3
 800c8d0:	f109 0301 	add.w	r3, r9, #1
 800c8d4:	443b      	add	r3, r7
 800c8d6:	429d      	cmp	r5, r3
 800c8d8:	bf38      	it	cc
 800c8da:	461d      	movcc	r5, r3
 800c8dc:	0553      	lsls	r3, r2, #21
 800c8de:	d530      	bpl.n	800c942 <__ssputs_r+0x9e>
 800c8e0:	4629      	mov	r1, r5
 800c8e2:	f7ff ff53 	bl	800c78c <_malloc_r>
 800c8e6:	4606      	mov	r6, r0
 800c8e8:	b950      	cbnz	r0, 800c900 <__ssputs_r+0x5c>
 800c8ea:	230c      	movs	r3, #12
 800c8ec:	f8ca 3000 	str.w	r3, [sl]
 800c8f0:	89a3      	ldrh	r3, [r4, #12]
 800c8f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8f6:	81a3      	strh	r3, [r4, #12]
 800c8f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c900:	463a      	mov	r2, r7
 800c902:	6921      	ldr	r1, [r4, #16]
 800c904:	f000 faa8 	bl	800ce58 <memcpy>
 800c908:	89a3      	ldrh	r3, [r4, #12]
 800c90a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c90e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c912:	81a3      	strh	r3, [r4, #12]
 800c914:	6126      	str	r6, [r4, #16]
 800c916:	6165      	str	r5, [r4, #20]
 800c918:	443e      	add	r6, r7
 800c91a:	1bed      	subs	r5, r5, r7
 800c91c:	6026      	str	r6, [r4, #0]
 800c91e:	60a5      	str	r5, [r4, #8]
 800c920:	464e      	mov	r6, r9
 800c922:	454e      	cmp	r6, r9
 800c924:	d900      	bls.n	800c928 <__ssputs_r+0x84>
 800c926:	464e      	mov	r6, r9
 800c928:	4632      	mov	r2, r6
 800c92a:	4641      	mov	r1, r8
 800c92c:	6820      	ldr	r0, [r4, #0]
 800c92e:	f000 fa9e 	bl	800ce6e <memmove>
 800c932:	68a3      	ldr	r3, [r4, #8]
 800c934:	1b9b      	subs	r3, r3, r6
 800c936:	60a3      	str	r3, [r4, #8]
 800c938:	6823      	ldr	r3, [r4, #0]
 800c93a:	441e      	add	r6, r3
 800c93c:	6026      	str	r6, [r4, #0]
 800c93e:	2000      	movs	r0, #0
 800c940:	e7dc      	b.n	800c8fc <__ssputs_r+0x58>
 800c942:	462a      	mov	r2, r5
 800c944:	f000 faac 	bl	800cea0 <_realloc_r>
 800c948:	4606      	mov	r6, r0
 800c94a:	2800      	cmp	r0, #0
 800c94c:	d1e2      	bne.n	800c914 <__ssputs_r+0x70>
 800c94e:	6921      	ldr	r1, [r4, #16]
 800c950:	4650      	mov	r0, sl
 800c952:	f7ff fecd 	bl	800c6f0 <_free_r>
 800c956:	e7c8      	b.n	800c8ea <__ssputs_r+0x46>

0800c958 <_svfiprintf_r>:
 800c958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c95c:	461d      	mov	r5, r3
 800c95e:	898b      	ldrh	r3, [r1, #12]
 800c960:	061f      	lsls	r7, r3, #24
 800c962:	b09d      	sub	sp, #116	; 0x74
 800c964:	4680      	mov	r8, r0
 800c966:	460c      	mov	r4, r1
 800c968:	4616      	mov	r6, r2
 800c96a:	d50f      	bpl.n	800c98c <_svfiprintf_r+0x34>
 800c96c:	690b      	ldr	r3, [r1, #16]
 800c96e:	b96b      	cbnz	r3, 800c98c <_svfiprintf_r+0x34>
 800c970:	2140      	movs	r1, #64	; 0x40
 800c972:	f7ff ff0b 	bl	800c78c <_malloc_r>
 800c976:	6020      	str	r0, [r4, #0]
 800c978:	6120      	str	r0, [r4, #16]
 800c97a:	b928      	cbnz	r0, 800c988 <_svfiprintf_r+0x30>
 800c97c:	230c      	movs	r3, #12
 800c97e:	f8c8 3000 	str.w	r3, [r8]
 800c982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c986:	e0c8      	b.n	800cb1a <_svfiprintf_r+0x1c2>
 800c988:	2340      	movs	r3, #64	; 0x40
 800c98a:	6163      	str	r3, [r4, #20]
 800c98c:	2300      	movs	r3, #0
 800c98e:	9309      	str	r3, [sp, #36]	; 0x24
 800c990:	2320      	movs	r3, #32
 800c992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c996:	2330      	movs	r3, #48	; 0x30
 800c998:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c99c:	9503      	str	r5, [sp, #12]
 800c99e:	f04f 0b01 	mov.w	fp, #1
 800c9a2:	4637      	mov	r7, r6
 800c9a4:	463d      	mov	r5, r7
 800c9a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c9aa:	b10b      	cbz	r3, 800c9b0 <_svfiprintf_r+0x58>
 800c9ac:	2b25      	cmp	r3, #37	; 0x25
 800c9ae:	d13e      	bne.n	800ca2e <_svfiprintf_r+0xd6>
 800c9b0:	ebb7 0a06 	subs.w	sl, r7, r6
 800c9b4:	d00b      	beq.n	800c9ce <_svfiprintf_r+0x76>
 800c9b6:	4653      	mov	r3, sl
 800c9b8:	4632      	mov	r2, r6
 800c9ba:	4621      	mov	r1, r4
 800c9bc:	4640      	mov	r0, r8
 800c9be:	f7ff ff71 	bl	800c8a4 <__ssputs_r>
 800c9c2:	3001      	adds	r0, #1
 800c9c4:	f000 80a4 	beq.w	800cb10 <_svfiprintf_r+0x1b8>
 800c9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9ca:	4453      	add	r3, sl
 800c9cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c9ce:	783b      	ldrb	r3, [r7, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	f000 809d 	beq.w	800cb10 <_svfiprintf_r+0x1b8>
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9e0:	9304      	str	r3, [sp, #16]
 800c9e2:	9307      	str	r3, [sp, #28]
 800c9e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9e8:	931a      	str	r3, [sp, #104]	; 0x68
 800c9ea:	462f      	mov	r7, r5
 800c9ec:	2205      	movs	r2, #5
 800c9ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c9f2:	4850      	ldr	r0, [pc, #320]	; (800cb34 <_svfiprintf_r+0x1dc>)
 800c9f4:	f7f3 fbec 	bl	80001d0 <memchr>
 800c9f8:	9b04      	ldr	r3, [sp, #16]
 800c9fa:	b9d0      	cbnz	r0, 800ca32 <_svfiprintf_r+0xda>
 800c9fc:	06d9      	lsls	r1, r3, #27
 800c9fe:	bf44      	itt	mi
 800ca00:	2220      	movmi	r2, #32
 800ca02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ca06:	071a      	lsls	r2, r3, #28
 800ca08:	bf44      	itt	mi
 800ca0a:	222b      	movmi	r2, #43	; 0x2b
 800ca0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ca10:	782a      	ldrb	r2, [r5, #0]
 800ca12:	2a2a      	cmp	r2, #42	; 0x2a
 800ca14:	d015      	beq.n	800ca42 <_svfiprintf_r+0xea>
 800ca16:	9a07      	ldr	r2, [sp, #28]
 800ca18:	462f      	mov	r7, r5
 800ca1a:	2000      	movs	r0, #0
 800ca1c:	250a      	movs	r5, #10
 800ca1e:	4639      	mov	r1, r7
 800ca20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca24:	3b30      	subs	r3, #48	; 0x30
 800ca26:	2b09      	cmp	r3, #9
 800ca28:	d94d      	bls.n	800cac6 <_svfiprintf_r+0x16e>
 800ca2a:	b1b8      	cbz	r0, 800ca5c <_svfiprintf_r+0x104>
 800ca2c:	e00f      	b.n	800ca4e <_svfiprintf_r+0xf6>
 800ca2e:	462f      	mov	r7, r5
 800ca30:	e7b8      	b.n	800c9a4 <_svfiprintf_r+0x4c>
 800ca32:	4a40      	ldr	r2, [pc, #256]	; (800cb34 <_svfiprintf_r+0x1dc>)
 800ca34:	1a80      	subs	r0, r0, r2
 800ca36:	fa0b f000 	lsl.w	r0, fp, r0
 800ca3a:	4318      	orrs	r0, r3
 800ca3c:	9004      	str	r0, [sp, #16]
 800ca3e:	463d      	mov	r5, r7
 800ca40:	e7d3      	b.n	800c9ea <_svfiprintf_r+0x92>
 800ca42:	9a03      	ldr	r2, [sp, #12]
 800ca44:	1d11      	adds	r1, r2, #4
 800ca46:	6812      	ldr	r2, [r2, #0]
 800ca48:	9103      	str	r1, [sp, #12]
 800ca4a:	2a00      	cmp	r2, #0
 800ca4c:	db01      	blt.n	800ca52 <_svfiprintf_r+0xfa>
 800ca4e:	9207      	str	r2, [sp, #28]
 800ca50:	e004      	b.n	800ca5c <_svfiprintf_r+0x104>
 800ca52:	4252      	negs	r2, r2
 800ca54:	f043 0302 	orr.w	r3, r3, #2
 800ca58:	9207      	str	r2, [sp, #28]
 800ca5a:	9304      	str	r3, [sp, #16]
 800ca5c:	783b      	ldrb	r3, [r7, #0]
 800ca5e:	2b2e      	cmp	r3, #46	; 0x2e
 800ca60:	d10c      	bne.n	800ca7c <_svfiprintf_r+0x124>
 800ca62:	787b      	ldrb	r3, [r7, #1]
 800ca64:	2b2a      	cmp	r3, #42	; 0x2a
 800ca66:	d133      	bne.n	800cad0 <_svfiprintf_r+0x178>
 800ca68:	9b03      	ldr	r3, [sp, #12]
 800ca6a:	1d1a      	adds	r2, r3, #4
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	9203      	str	r2, [sp, #12]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	bfb8      	it	lt
 800ca74:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ca78:	3702      	adds	r7, #2
 800ca7a:	9305      	str	r3, [sp, #20]
 800ca7c:	4d2e      	ldr	r5, [pc, #184]	; (800cb38 <_svfiprintf_r+0x1e0>)
 800ca7e:	7839      	ldrb	r1, [r7, #0]
 800ca80:	2203      	movs	r2, #3
 800ca82:	4628      	mov	r0, r5
 800ca84:	f7f3 fba4 	bl	80001d0 <memchr>
 800ca88:	b138      	cbz	r0, 800ca9a <_svfiprintf_r+0x142>
 800ca8a:	2340      	movs	r3, #64	; 0x40
 800ca8c:	1b40      	subs	r0, r0, r5
 800ca8e:	fa03 f000 	lsl.w	r0, r3, r0
 800ca92:	9b04      	ldr	r3, [sp, #16]
 800ca94:	4303      	orrs	r3, r0
 800ca96:	3701      	adds	r7, #1
 800ca98:	9304      	str	r3, [sp, #16]
 800ca9a:	7839      	ldrb	r1, [r7, #0]
 800ca9c:	4827      	ldr	r0, [pc, #156]	; (800cb3c <_svfiprintf_r+0x1e4>)
 800ca9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800caa2:	2206      	movs	r2, #6
 800caa4:	1c7e      	adds	r6, r7, #1
 800caa6:	f7f3 fb93 	bl	80001d0 <memchr>
 800caaa:	2800      	cmp	r0, #0
 800caac:	d038      	beq.n	800cb20 <_svfiprintf_r+0x1c8>
 800caae:	4b24      	ldr	r3, [pc, #144]	; (800cb40 <_svfiprintf_r+0x1e8>)
 800cab0:	bb13      	cbnz	r3, 800caf8 <_svfiprintf_r+0x1a0>
 800cab2:	9b03      	ldr	r3, [sp, #12]
 800cab4:	3307      	adds	r3, #7
 800cab6:	f023 0307 	bic.w	r3, r3, #7
 800caba:	3308      	adds	r3, #8
 800cabc:	9303      	str	r3, [sp, #12]
 800cabe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cac0:	444b      	add	r3, r9
 800cac2:	9309      	str	r3, [sp, #36]	; 0x24
 800cac4:	e76d      	b.n	800c9a2 <_svfiprintf_r+0x4a>
 800cac6:	fb05 3202 	mla	r2, r5, r2, r3
 800caca:	2001      	movs	r0, #1
 800cacc:	460f      	mov	r7, r1
 800cace:	e7a6      	b.n	800ca1e <_svfiprintf_r+0xc6>
 800cad0:	2300      	movs	r3, #0
 800cad2:	3701      	adds	r7, #1
 800cad4:	9305      	str	r3, [sp, #20]
 800cad6:	4619      	mov	r1, r3
 800cad8:	250a      	movs	r5, #10
 800cada:	4638      	mov	r0, r7
 800cadc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cae0:	3a30      	subs	r2, #48	; 0x30
 800cae2:	2a09      	cmp	r2, #9
 800cae4:	d903      	bls.n	800caee <_svfiprintf_r+0x196>
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d0c8      	beq.n	800ca7c <_svfiprintf_r+0x124>
 800caea:	9105      	str	r1, [sp, #20]
 800caec:	e7c6      	b.n	800ca7c <_svfiprintf_r+0x124>
 800caee:	fb05 2101 	mla	r1, r5, r1, r2
 800caf2:	2301      	movs	r3, #1
 800caf4:	4607      	mov	r7, r0
 800caf6:	e7f0      	b.n	800cada <_svfiprintf_r+0x182>
 800caf8:	ab03      	add	r3, sp, #12
 800cafa:	9300      	str	r3, [sp, #0]
 800cafc:	4622      	mov	r2, r4
 800cafe:	4b11      	ldr	r3, [pc, #68]	; (800cb44 <_svfiprintf_r+0x1ec>)
 800cb00:	a904      	add	r1, sp, #16
 800cb02:	4640      	mov	r0, r8
 800cb04:	f3af 8000 	nop.w
 800cb08:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800cb0c:	4681      	mov	r9, r0
 800cb0e:	d1d6      	bne.n	800cabe <_svfiprintf_r+0x166>
 800cb10:	89a3      	ldrh	r3, [r4, #12]
 800cb12:	065b      	lsls	r3, r3, #25
 800cb14:	f53f af35 	bmi.w	800c982 <_svfiprintf_r+0x2a>
 800cb18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb1a:	b01d      	add	sp, #116	; 0x74
 800cb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb20:	ab03      	add	r3, sp, #12
 800cb22:	9300      	str	r3, [sp, #0]
 800cb24:	4622      	mov	r2, r4
 800cb26:	4b07      	ldr	r3, [pc, #28]	; (800cb44 <_svfiprintf_r+0x1ec>)
 800cb28:	a904      	add	r1, sp, #16
 800cb2a:	4640      	mov	r0, r8
 800cb2c:	f000 f882 	bl	800cc34 <_printf_i>
 800cb30:	e7ea      	b.n	800cb08 <_svfiprintf_r+0x1b0>
 800cb32:	bf00      	nop
 800cb34:	08040e20 	.word	0x08040e20
 800cb38:	08040e26 	.word	0x08040e26
 800cb3c:	08040e2a 	.word	0x08040e2a
 800cb40:	00000000 	.word	0x00000000
 800cb44:	0800c8a5 	.word	0x0800c8a5

0800cb48 <_printf_common>:
 800cb48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb4c:	4691      	mov	r9, r2
 800cb4e:	461f      	mov	r7, r3
 800cb50:	688a      	ldr	r2, [r1, #8]
 800cb52:	690b      	ldr	r3, [r1, #16]
 800cb54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	bfb8      	it	lt
 800cb5c:	4613      	movlt	r3, r2
 800cb5e:	f8c9 3000 	str.w	r3, [r9]
 800cb62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb66:	4606      	mov	r6, r0
 800cb68:	460c      	mov	r4, r1
 800cb6a:	b112      	cbz	r2, 800cb72 <_printf_common+0x2a>
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	f8c9 3000 	str.w	r3, [r9]
 800cb72:	6823      	ldr	r3, [r4, #0]
 800cb74:	0699      	lsls	r1, r3, #26
 800cb76:	bf42      	ittt	mi
 800cb78:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cb7c:	3302      	addmi	r3, #2
 800cb7e:	f8c9 3000 	strmi.w	r3, [r9]
 800cb82:	6825      	ldr	r5, [r4, #0]
 800cb84:	f015 0506 	ands.w	r5, r5, #6
 800cb88:	d107      	bne.n	800cb9a <_printf_common+0x52>
 800cb8a:	f104 0a19 	add.w	sl, r4, #25
 800cb8e:	68e3      	ldr	r3, [r4, #12]
 800cb90:	f8d9 2000 	ldr.w	r2, [r9]
 800cb94:	1a9b      	subs	r3, r3, r2
 800cb96:	42ab      	cmp	r3, r5
 800cb98:	dc28      	bgt.n	800cbec <_printf_common+0xa4>
 800cb9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cb9e:	6822      	ldr	r2, [r4, #0]
 800cba0:	3300      	adds	r3, #0
 800cba2:	bf18      	it	ne
 800cba4:	2301      	movne	r3, #1
 800cba6:	0692      	lsls	r2, r2, #26
 800cba8:	d42d      	bmi.n	800cc06 <_printf_common+0xbe>
 800cbaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbae:	4639      	mov	r1, r7
 800cbb0:	4630      	mov	r0, r6
 800cbb2:	47c0      	blx	r8
 800cbb4:	3001      	adds	r0, #1
 800cbb6:	d020      	beq.n	800cbfa <_printf_common+0xb2>
 800cbb8:	6823      	ldr	r3, [r4, #0]
 800cbba:	68e5      	ldr	r5, [r4, #12]
 800cbbc:	f8d9 2000 	ldr.w	r2, [r9]
 800cbc0:	f003 0306 	and.w	r3, r3, #6
 800cbc4:	2b04      	cmp	r3, #4
 800cbc6:	bf08      	it	eq
 800cbc8:	1aad      	subeq	r5, r5, r2
 800cbca:	68a3      	ldr	r3, [r4, #8]
 800cbcc:	6922      	ldr	r2, [r4, #16]
 800cbce:	bf0c      	ite	eq
 800cbd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbd4:	2500      	movne	r5, #0
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	bfc4      	itt	gt
 800cbda:	1a9b      	subgt	r3, r3, r2
 800cbdc:	18ed      	addgt	r5, r5, r3
 800cbde:	f04f 0900 	mov.w	r9, #0
 800cbe2:	341a      	adds	r4, #26
 800cbe4:	454d      	cmp	r5, r9
 800cbe6:	d11a      	bne.n	800cc1e <_printf_common+0xd6>
 800cbe8:	2000      	movs	r0, #0
 800cbea:	e008      	b.n	800cbfe <_printf_common+0xb6>
 800cbec:	2301      	movs	r3, #1
 800cbee:	4652      	mov	r2, sl
 800cbf0:	4639      	mov	r1, r7
 800cbf2:	4630      	mov	r0, r6
 800cbf4:	47c0      	blx	r8
 800cbf6:	3001      	adds	r0, #1
 800cbf8:	d103      	bne.n	800cc02 <_printf_common+0xba>
 800cbfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc02:	3501      	adds	r5, #1
 800cc04:	e7c3      	b.n	800cb8e <_printf_common+0x46>
 800cc06:	18e1      	adds	r1, r4, r3
 800cc08:	1c5a      	adds	r2, r3, #1
 800cc0a:	2030      	movs	r0, #48	; 0x30
 800cc0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc10:	4422      	add	r2, r4
 800cc12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc1a:	3302      	adds	r3, #2
 800cc1c:	e7c5      	b.n	800cbaa <_printf_common+0x62>
 800cc1e:	2301      	movs	r3, #1
 800cc20:	4622      	mov	r2, r4
 800cc22:	4639      	mov	r1, r7
 800cc24:	4630      	mov	r0, r6
 800cc26:	47c0      	blx	r8
 800cc28:	3001      	adds	r0, #1
 800cc2a:	d0e6      	beq.n	800cbfa <_printf_common+0xb2>
 800cc2c:	f109 0901 	add.w	r9, r9, #1
 800cc30:	e7d8      	b.n	800cbe4 <_printf_common+0x9c>
	...

0800cc34 <_printf_i>:
 800cc34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cc3c:	460c      	mov	r4, r1
 800cc3e:	7e09      	ldrb	r1, [r1, #24]
 800cc40:	b085      	sub	sp, #20
 800cc42:	296e      	cmp	r1, #110	; 0x6e
 800cc44:	4617      	mov	r7, r2
 800cc46:	4606      	mov	r6, r0
 800cc48:	4698      	mov	r8, r3
 800cc4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc4c:	f000 80b3 	beq.w	800cdb6 <_printf_i+0x182>
 800cc50:	d822      	bhi.n	800cc98 <_printf_i+0x64>
 800cc52:	2963      	cmp	r1, #99	; 0x63
 800cc54:	d036      	beq.n	800ccc4 <_printf_i+0x90>
 800cc56:	d80a      	bhi.n	800cc6e <_printf_i+0x3a>
 800cc58:	2900      	cmp	r1, #0
 800cc5a:	f000 80b9 	beq.w	800cdd0 <_printf_i+0x19c>
 800cc5e:	2958      	cmp	r1, #88	; 0x58
 800cc60:	f000 8083 	beq.w	800cd6a <_printf_i+0x136>
 800cc64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cc6c:	e032      	b.n	800ccd4 <_printf_i+0xa0>
 800cc6e:	2964      	cmp	r1, #100	; 0x64
 800cc70:	d001      	beq.n	800cc76 <_printf_i+0x42>
 800cc72:	2969      	cmp	r1, #105	; 0x69
 800cc74:	d1f6      	bne.n	800cc64 <_printf_i+0x30>
 800cc76:	6820      	ldr	r0, [r4, #0]
 800cc78:	6813      	ldr	r3, [r2, #0]
 800cc7a:	0605      	lsls	r5, r0, #24
 800cc7c:	f103 0104 	add.w	r1, r3, #4
 800cc80:	d52a      	bpl.n	800ccd8 <_printf_i+0xa4>
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	6011      	str	r1, [r2, #0]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	da03      	bge.n	800cc92 <_printf_i+0x5e>
 800cc8a:	222d      	movs	r2, #45	; 0x2d
 800cc8c:	425b      	negs	r3, r3
 800cc8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cc92:	486f      	ldr	r0, [pc, #444]	; (800ce50 <_printf_i+0x21c>)
 800cc94:	220a      	movs	r2, #10
 800cc96:	e039      	b.n	800cd0c <_printf_i+0xd8>
 800cc98:	2973      	cmp	r1, #115	; 0x73
 800cc9a:	f000 809d 	beq.w	800cdd8 <_printf_i+0x1a4>
 800cc9e:	d808      	bhi.n	800ccb2 <_printf_i+0x7e>
 800cca0:	296f      	cmp	r1, #111	; 0x6f
 800cca2:	d020      	beq.n	800cce6 <_printf_i+0xb2>
 800cca4:	2970      	cmp	r1, #112	; 0x70
 800cca6:	d1dd      	bne.n	800cc64 <_printf_i+0x30>
 800cca8:	6823      	ldr	r3, [r4, #0]
 800ccaa:	f043 0320 	orr.w	r3, r3, #32
 800ccae:	6023      	str	r3, [r4, #0]
 800ccb0:	e003      	b.n	800ccba <_printf_i+0x86>
 800ccb2:	2975      	cmp	r1, #117	; 0x75
 800ccb4:	d017      	beq.n	800cce6 <_printf_i+0xb2>
 800ccb6:	2978      	cmp	r1, #120	; 0x78
 800ccb8:	d1d4      	bne.n	800cc64 <_printf_i+0x30>
 800ccba:	2378      	movs	r3, #120	; 0x78
 800ccbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ccc0:	4864      	ldr	r0, [pc, #400]	; (800ce54 <_printf_i+0x220>)
 800ccc2:	e055      	b.n	800cd70 <_printf_i+0x13c>
 800ccc4:	6813      	ldr	r3, [r2, #0]
 800ccc6:	1d19      	adds	r1, r3, #4
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	6011      	str	r1, [r2, #0]
 800cccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e08c      	b.n	800cdf2 <_printf_i+0x1be>
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	6011      	str	r1, [r2, #0]
 800ccdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cce0:	bf18      	it	ne
 800cce2:	b21b      	sxthne	r3, r3
 800cce4:	e7cf      	b.n	800cc86 <_printf_i+0x52>
 800cce6:	6813      	ldr	r3, [r2, #0]
 800cce8:	6825      	ldr	r5, [r4, #0]
 800ccea:	1d18      	adds	r0, r3, #4
 800ccec:	6010      	str	r0, [r2, #0]
 800ccee:	0628      	lsls	r0, r5, #24
 800ccf0:	d501      	bpl.n	800ccf6 <_printf_i+0xc2>
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	e002      	b.n	800ccfc <_printf_i+0xc8>
 800ccf6:	0668      	lsls	r0, r5, #25
 800ccf8:	d5fb      	bpl.n	800ccf2 <_printf_i+0xbe>
 800ccfa:	881b      	ldrh	r3, [r3, #0]
 800ccfc:	4854      	ldr	r0, [pc, #336]	; (800ce50 <_printf_i+0x21c>)
 800ccfe:	296f      	cmp	r1, #111	; 0x6f
 800cd00:	bf14      	ite	ne
 800cd02:	220a      	movne	r2, #10
 800cd04:	2208      	moveq	r2, #8
 800cd06:	2100      	movs	r1, #0
 800cd08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd0c:	6865      	ldr	r5, [r4, #4]
 800cd0e:	60a5      	str	r5, [r4, #8]
 800cd10:	2d00      	cmp	r5, #0
 800cd12:	f2c0 8095 	blt.w	800ce40 <_printf_i+0x20c>
 800cd16:	6821      	ldr	r1, [r4, #0]
 800cd18:	f021 0104 	bic.w	r1, r1, #4
 800cd1c:	6021      	str	r1, [r4, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d13d      	bne.n	800cd9e <_printf_i+0x16a>
 800cd22:	2d00      	cmp	r5, #0
 800cd24:	f040 808e 	bne.w	800ce44 <_printf_i+0x210>
 800cd28:	4665      	mov	r5, ip
 800cd2a:	2a08      	cmp	r2, #8
 800cd2c:	d10b      	bne.n	800cd46 <_printf_i+0x112>
 800cd2e:	6823      	ldr	r3, [r4, #0]
 800cd30:	07db      	lsls	r3, r3, #31
 800cd32:	d508      	bpl.n	800cd46 <_printf_i+0x112>
 800cd34:	6923      	ldr	r3, [r4, #16]
 800cd36:	6862      	ldr	r2, [r4, #4]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	bfde      	ittt	le
 800cd3c:	2330      	movle	r3, #48	; 0x30
 800cd3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd42:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cd46:	ebac 0305 	sub.w	r3, ip, r5
 800cd4a:	6123      	str	r3, [r4, #16]
 800cd4c:	f8cd 8000 	str.w	r8, [sp]
 800cd50:	463b      	mov	r3, r7
 800cd52:	aa03      	add	r2, sp, #12
 800cd54:	4621      	mov	r1, r4
 800cd56:	4630      	mov	r0, r6
 800cd58:	f7ff fef6 	bl	800cb48 <_printf_common>
 800cd5c:	3001      	adds	r0, #1
 800cd5e:	d14d      	bne.n	800cdfc <_printf_i+0x1c8>
 800cd60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd64:	b005      	add	sp, #20
 800cd66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd6a:	4839      	ldr	r0, [pc, #228]	; (800ce50 <_printf_i+0x21c>)
 800cd6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cd70:	6813      	ldr	r3, [r2, #0]
 800cd72:	6821      	ldr	r1, [r4, #0]
 800cd74:	1d1d      	adds	r5, r3, #4
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	6015      	str	r5, [r2, #0]
 800cd7a:	060a      	lsls	r2, r1, #24
 800cd7c:	d50b      	bpl.n	800cd96 <_printf_i+0x162>
 800cd7e:	07ca      	lsls	r2, r1, #31
 800cd80:	bf44      	itt	mi
 800cd82:	f041 0120 	orrmi.w	r1, r1, #32
 800cd86:	6021      	strmi	r1, [r4, #0]
 800cd88:	b91b      	cbnz	r3, 800cd92 <_printf_i+0x15e>
 800cd8a:	6822      	ldr	r2, [r4, #0]
 800cd8c:	f022 0220 	bic.w	r2, r2, #32
 800cd90:	6022      	str	r2, [r4, #0]
 800cd92:	2210      	movs	r2, #16
 800cd94:	e7b7      	b.n	800cd06 <_printf_i+0xd2>
 800cd96:	064d      	lsls	r5, r1, #25
 800cd98:	bf48      	it	mi
 800cd9a:	b29b      	uxthmi	r3, r3
 800cd9c:	e7ef      	b.n	800cd7e <_printf_i+0x14a>
 800cd9e:	4665      	mov	r5, ip
 800cda0:	fbb3 f1f2 	udiv	r1, r3, r2
 800cda4:	fb02 3311 	mls	r3, r2, r1, r3
 800cda8:	5cc3      	ldrb	r3, [r0, r3]
 800cdaa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cdae:	460b      	mov	r3, r1
 800cdb0:	2900      	cmp	r1, #0
 800cdb2:	d1f5      	bne.n	800cda0 <_printf_i+0x16c>
 800cdb4:	e7b9      	b.n	800cd2a <_printf_i+0xf6>
 800cdb6:	6813      	ldr	r3, [r2, #0]
 800cdb8:	6825      	ldr	r5, [r4, #0]
 800cdba:	6961      	ldr	r1, [r4, #20]
 800cdbc:	1d18      	adds	r0, r3, #4
 800cdbe:	6010      	str	r0, [r2, #0]
 800cdc0:	0628      	lsls	r0, r5, #24
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	d501      	bpl.n	800cdca <_printf_i+0x196>
 800cdc6:	6019      	str	r1, [r3, #0]
 800cdc8:	e002      	b.n	800cdd0 <_printf_i+0x19c>
 800cdca:	066a      	lsls	r2, r5, #25
 800cdcc:	d5fb      	bpl.n	800cdc6 <_printf_i+0x192>
 800cdce:	8019      	strh	r1, [r3, #0]
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	6123      	str	r3, [r4, #16]
 800cdd4:	4665      	mov	r5, ip
 800cdd6:	e7b9      	b.n	800cd4c <_printf_i+0x118>
 800cdd8:	6813      	ldr	r3, [r2, #0]
 800cdda:	1d19      	adds	r1, r3, #4
 800cddc:	6011      	str	r1, [r2, #0]
 800cdde:	681d      	ldr	r5, [r3, #0]
 800cde0:	6862      	ldr	r2, [r4, #4]
 800cde2:	2100      	movs	r1, #0
 800cde4:	4628      	mov	r0, r5
 800cde6:	f7f3 f9f3 	bl	80001d0 <memchr>
 800cdea:	b108      	cbz	r0, 800cdf0 <_printf_i+0x1bc>
 800cdec:	1b40      	subs	r0, r0, r5
 800cdee:	6060      	str	r0, [r4, #4]
 800cdf0:	6863      	ldr	r3, [r4, #4]
 800cdf2:	6123      	str	r3, [r4, #16]
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdfa:	e7a7      	b.n	800cd4c <_printf_i+0x118>
 800cdfc:	6923      	ldr	r3, [r4, #16]
 800cdfe:	462a      	mov	r2, r5
 800ce00:	4639      	mov	r1, r7
 800ce02:	4630      	mov	r0, r6
 800ce04:	47c0      	blx	r8
 800ce06:	3001      	adds	r0, #1
 800ce08:	d0aa      	beq.n	800cd60 <_printf_i+0x12c>
 800ce0a:	6823      	ldr	r3, [r4, #0]
 800ce0c:	079b      	lsls	r3, r3, #30
 800ce0e:	d413      	bmi.n	800ce38 <_printf_i+0x204>
 800ce10:	68e0      	ldr	r0, [r4, #12]
 800ce12:	9b03      	ldr	r3, [sp, #12]
 800ce14:	4298      	cmp	r0, r3
 800ce16:	bfb8      	it	lt
 800ce18:	4618      	movlt	r0, r3
 800ce1a:	e7a3      	b.n	800cd64 <_printf_i+0x130>
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	464a      	mov	r2, r9
 800ce20:	4639      	mov	r1, r7
 800ce22:	4630      	mov	r0, r6
 800ce24:	47c0      	blx	r8
 800ce26:	3001      	adds	r0, #1
 800ce28:	d09a      	beq.n	800cd60 <_printf_i+0x12c>
 800ce2a:	3501      	adds	r5, #1
 800ce2c:	68e3      	ldr	r3, [r4, #12]
 800ce2e:	9a03      	ldr	r2, [sp, #12]
 800ce30:	1a9b      	subs	r3, r3, r2
 800ce32:	42ab      	cmp	r3, r5
 800ce34:	dcf2      	bgt.n	800ce1c <_printf_i+0x1e8>
 800ce36:	e7eb      	b.n	800ce10 <_printf_i+0x1dc>
 800ce38:	2500      	movs	r5, #0
 800ce3a:	f104 0919 	add.w	r9, r4, #25
 800ce3e:	e7f5      	b.n	800ce2c <_printf_i+0x1f8>
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d1ac      	bne.n	800cd9e <_printf_i+0x16a>
 800ce44:	7803      	ldrb	r3, [r0, #0]
 800ce46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce4e:	e76c      	b.n	800cd2a <_printf_i+0xf6>
 800ce50:	08040e31 	.word	0x08040e31
 800ce54:	08040e42 	.word	0x08040e42

0800ce58 <memcpy>:
 800ce58:	b510      	push	{r4, lr}
 800ce5a:	1e43      	subs	r3, r0, #1
 800ce5c:	440a      	add	r2, r1
 800ce5e:	4291      	cmp	r1, r2
 800ce60:	d100      	bne.n	800ce64 <memcpy+0xc>
 800ce62:	bd10      	pop	{r4, pc}
 800ce64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce6c:	e7f7      	b.n	800ce5e <memcpy+0x6>

0800ce6e <memmove>:
 800ce6e:	4288      	cmp	r0, r1
 800ce70:	b510      	push	{r4, lr}
 800ce72:	eb01 0302 	add.w	r3, r1, r2
 800ce76:	d807      	bhi.n	800ce88 <memmove+0x1a>
 800ce78:	1e42      	subs	r2, r0, #1
 800ce7a:	4299      	cmp	r1, r3
 800ce7c:	d00a      	beq.n	800ce94 <memmove+0x26>
 800ce7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce82:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ce86:	e7f8      	b.n	800ce7a <memmove+0xc>
 800ce88:	4283      	cmp	r3, r0
 800ce8a:	d9f5      	bls.n	800ce78 <memmove+0xa>
 800ce8c:	1881      	adds	r1, r0, r2
 800ce8e:	1ad2      	subs	r2, r2, r3
 800ce90:	42d3      	cmn	r3, r2
 800ce92:	d100      	bne.n	800ce96 <memmove+0x28>
 800ce94:	bd10      	pop	{r4, pc}
 800ce96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce9a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ce9e:	e7f7      	b.n	800ce90 <memmove+0x22>

0800cea0 <_realloc_r>:
 800cea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cea2:	4607      	mov	r7, r0
 800cea4:	4614      	mov	r4, r2
 800cea6:	460e      	mov	r6, r1
 800cea8:	b921      	cbnz	r1, 800ceb4 <_realloc_r+0x14>
 800ceaa:	4611      	mov	r1, r2
 800ceac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ceb0:	f7ff bc6c 	b.w	800c78c <_malloc_r>
 800ceb4:	b922      	cbnz	r2, 800cec0 <_realloc_r+0x20>
 800ceb6:	f7ff fc1b 	bl	800c6f0 <_free_r>
 800ceba:	4625      	mov	r5, r4
 800cebc:	4628      	mov	r0, r5
 800cebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cec0:	f000 f814 	bl	800ceec <_malloc_usable_size_r>
 800cec4:	42a0      	cmp	r0, r4
 800cec6:	d20f      	bcs.n	800cee8 <_realloc_r+0x48>
 800cec8:	4621      	mov	r1, r4
 800ceca:	4638      	mov	r0, r7
 800cecc:	f7ff fc5e 	bl	800c78c <_malloc_r>
 800ced0:	4605      	mov	r5, r0
 800ced2:	2800      	cmp	r0, #0
 800ced4:	d0f2      	beq.n	800cebc <_realloc_r+0x1c>
 800ced6:	4631      	mov	r1, r6
 800ced8:	4622      	mov	r2, r4
 800ceda:	f7ff ffbd 	bl	800ce58 <memcpy>
 800cede:	4631      	mov	r1, r6
 800cee0:	4638      	mov	r0, r7
 800cee2:	f7ff fc05 	bl	800c6f0 <_free_r>
 800cee6:	e7e9      	b.n	800cebc <_realloc_r+0x1c>
 800cee8:	4635      	mov	r5, r6
 800ceea:	e7e7      	b.n	800cebc <_realloc_r+0x1c>

0800ceec <_malloc_usable_size_r>:
 800ceec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cef0:	1f18      	subs	r0, r3, #4
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	bfbc      	itt	lt
 800cef6:	580b      	ldrlt	r3, [r1, r0]
 800cef8:	18c0      	addlt	r0, r0, r3
 800cefa:	4770      	bx	lr

0800cefc <_init>:
 800cefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cefe:	bf00      	nop
 800cf00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf02:	bc08      	pop	{r3}
 800cf04:	469e      	mov	lr, r3
 800cf06:	4770      	bx	lr

0800cf08 <_fini>:
 800cf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf0a:	bf00      	nop
 800cf0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf0e:	bc08      	pop	{r3}
 800cf10:	469e      	mov	lr, r3
 800cf12:	4770      	bx	lr
