
PEDALERA_beta_V04_STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c310  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00033f18  0800c498  0800c498  0001c498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080403b0  080403b0  000601a0  2**0
                  CONTENTS
  4 .ARM          00000008  080403b0  080403b0  000503b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080403b8  080403b8  000601a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080403b8  080403b8  000503b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080403bc  080403bc  000503bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  080403c0  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fe0  200001a0  08040560  000601a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20001180  08040560  00061180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000601a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023d8a  00000000  00000000  000601d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d57  00000000  00000000  00083f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b50  00000000  00000000  00088cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018f8  00000000  00000000  0008a808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027820  00000000  00000000  0008c100  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b697  00000000  00000000  000b3920  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d87c8  00000000  00000000  000cefb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a777f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000705c  00000000  00000000  001a77fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001a0 	.word	0x200001a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c480 	.word	0x0800c480

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001a4 	.word	0x200001a4
 80001c4:	0800c480 	.word	0x0800c480

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <spi_74HC165_init>:
GPIO_TypeDef* portPL;
GPIO_TypeDef* portCE;
uint16_t pinPL, pinCE;


void spi_74HC165_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* PLport, uint16_t PLpin, GPIO_TypeDef* CEport, uint16_t CEpin){
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	4613      	mov	r3, r2
 80004d6:	80fb      	strh	r3, [r7, #6]

	spi_handler=hspi;
 80004d8:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <spi_74HC165_init+0x3c>)
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	6013      	str	r3, [r2, #0]

	portPL = PLport;
 80004de:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <spi_74HC165_init+0x40>)
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	6013      	str	r3, [r2, #0]
	pinPL = PLpin;
 80004e4:	4a09      	ldr	r2, [pc, #36]	; (800050c <spi_74HC165_init+0x44>)
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	8013      	strh	r3, [r2, #0]

	portCE = CEport;
 80004ea:	4a09      	ldr	r2, [pc, #36]	; (8000510 <spi_74HC165_init+0x48>)
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	6013      	str	r3, [r2, #0]
	pinCE = CEpin;
 80004f0:	4a08      	ldr	r2, [pc, #32]	; (8000514 <spi_74HC165_init+0x4c>)
 80004f2:	8b3b      	ldrh	r3, [r7, #24]
 80004f4:	8013      	strh	r3, [r2, #0]

}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000264 	.word	0x20000264
 8000508:	2000026c 	.word	0x2000026c
 800050c:	20000268 	.word	0x20000268
 8000510:	20000274 	.word	0x20000274
 8000514:	20000270 	.word	0x20000270

08000518 <spi_74HC165_receive>:


void spi_74HC165_receive (uint8_t* pdata, uint16_t sizeData){
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	807b      	strh	r3, [r7, #2]

	//carga paralela
	HAL_GPIO_WritePin(portPL, pinPL, 0);
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <spi_74HC165_receive+0x64>)
 8000526:	6818      	ldr	r0, [r3, #0]
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <spi_74HC165_receive+0x68>)
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	2200      	movs	r2, #0
 800052e:	4619      	mov	r1, r3
 8000530:	f003 f882 	bl	8003638 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portPL, pinPL, 1);
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <spi_74HC165_receive+0x64>)
 8000536:	6818      	ldr	r0, [r3, #0]
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <spi_74HC165_receive+0x68>)
 800053a:	881b      	ldrh	r3, [r3, #0]
 800053c:	2201      	movs	r2, #1
 800053e:	4619      	mov	r1, r3
 8000540:	f003 f87a 	bl	8003638 <HAL_GPIO_WritePin>

	//clock enable
	HAL_GPIO_WritePin(portCE, pinCE, 0);
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <spi_74HC165_receive+0x6c>)
 8000546:	6818      	ldr	r0, [r3, #0]
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <spi_74HC165_receive+0x70>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	2200      	movs	r2, #0
 800054e:	4619      	mov	r1, r3
 8000550:	f003 f872 	bl	8003638 <HAL_GPIO_WritePin>

	//SPI
	HAL_SPI_Receive(spi_handler, pdata, sizeData, 100);
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <spi_74HC165_receive+0x74>)
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	887a      	ldrh	r2, [r7, #2]
 800055a:	2364      	movs	r3, #100	; 0x64
 800055c:	6879      	ldr	r1, [r7, #4]
 800055e:	f007 f8d5 	bl	800770c <HAL_SPI_Receive>

	//clock disable
	HAL_GPIO_WritePin(portCE, pinCE, 1);
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <spi_74HC165_receive+0x6c>)
 8000564:	6818      	ldr	r0, [r3, #0]
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <spi_74HC165_receive+0x70>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	2201      	movs	r2, #1
 800056c:	4619      	mov	r1, r3
 800056e:	f003 f863 	bl	8003638 <HAL_GPIO_WritePin>
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	2000026c 	.word	0x2000026c
 8000580:	20000268 	.word	0x20000268
 8000584:	20000274 	.word	0x20000274
 8000588:	20000270 	.word	0x20000270
 800058c:	20000264 	.word	0x20000264

08000590 <spi_74HC595_init>:
SPI_HandleTypeDef* spi_handler;
GPIO_TypeDef* portST;
uint16_t pinST;


void spi_74HC595_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* STport, uint16_t STpin){
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	4613      	mov	r3, r2
 800059c:	80fb      	strh	r3, [r7, #6]

	spi_handler =hspi;
 800059e:	4a0a      	ldr	r2, [pc, #40]	; (80005c8 <spi_74HC595_init+0x38>)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	6013      	str	r3, [r2, #0]

	portST = STport;
 80005a4:	4a09      	ldr	r2, [pc, #36]	; (80005cc <spi_74HC595_init+0x3c>)
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	6013      	str	r3, [r2, #0]
	pinST = STpin;
 80005aa:	4a09      	ldr	r2, [pc, #36]	; (80005d0 <spi_74HC595_init+0x40>)
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(portST, pinST, 0);
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <spi_74HC595_init+0x3c>)
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <spi_74HC595_init+0x40>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	4619      	mov	r1, r3
 80005bc:	f003 f83c 	bl	8003638 <HAL_GPIO_WritePin>

} //end spi_74HC595_init()
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000264 	.word	0x20000264
 80005cc:	2000027c 	.word	0x2000027c
 80005d0:	20000278 	.word	0x20000278

080005d4 <spi_74HC595_Transmit>:


void spi_74HC595_Transmit (uint8_t* pdata, uint16_t sizeData){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	807b      	strh	r3, [r7, #2]

	HAL_SPI_Transmit(spi_handler, pdata, sizeData, 100);
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <spi_74HC595_Transmit+0x44>)
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	887a      	ldrh	r2, [r7, #2]
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	6879      	ldr	r1, [r7, #4]
 80005ea:	f006 ff5b 	bl	80074a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(portST, pinST, 1);
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <spi_74HC595_Transmit+0x48>)
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <spi_74HC595_Transmit+0x4c>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	2201      	movs	r2, #1
 80005f8:	4619      	mov	r1, r3
 80005fa:	f003 f81d 	bl	8003638 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	HAL_GPIO_WritePin(portST, pinST, 0);
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <spi_74HC595_Transmit+0x48>)
 8000600:	6818      	ldr	r0, [r3, #0]
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <spi_74HC595_Transmit+0x4c>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	4619      	mov	r1, r3
 800060a:	f003 f815 	bl	8003638 <HAL_GPIO_WritePin>

} //end spi_74HC595_transmit()
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000264 	.word	0x20000264
 800061c:	2000027c 	.word	0x2000027c
 8000620:	20000278 	.word	0x20000278

08000624 <makeChord>:

	Parameter: fchord		Number of the chord sent. It was made by setChord() and store in "chordSet[]" vector.

	Returns:	unsigned long	(0xXXXXXX) A 3-byte number that contains the fundamental note in the least significant byte, followed by the 2nd and 3rd notes of the chord.
*/
unsigned long makeChord(unsigned long bnote, uint8_t fchord){
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	70fb      	strb	r3, [r7, #3]

	unsigned long notes;

	notes = bnote;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	60fb      	str	r3, [r7, #12]
	notes += (bnote << 8);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	021b      	lsls	r3, r3, #8
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	4413      	add	r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
	notes += (bnote << 16);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	041b      	lsls	r3, r3, #16
 8000642:	68fa      	ldr	r2, [r7, #12]
 8000644:	4413      	add	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]


	notes += chordSet[fchord];
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	4a06      	ldr	r2, [pc, #24]	; (8000664 <makeChord+0x40>)
 800064c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000650:	68fa      	ldr	r2, [r7, #12]
 8000652:	4413      	add	r3, r2
 8000654:	60fb      	str	r3, [r7, #12]


	return notes;
 8000656:	68fb      	ldr	r3, [r7, #12]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	200001c0 	.word	0x200001c0

08000668 <setChord>:

	Parameter: fnote		id of the pressed note.

	Returns:	void
*/
void setChord(uint8_t fnote){
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]

chordSet[fnote] = hex_chord[chord] - hex_chordInv[chordInv];
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <setChord+0x34>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <setChord+0x38>)
 8000678:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <setChord+0x3c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a09      	ldr	r2, [pc, #36]	; (80006a8 <setChord+0x40>)
 8000682:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	1a8a      	subs	r2, r1, r2
 800068a:	4908      	ldr	r1, [pc, #32]	; (80006ac <setChord+0x44>)
 800068c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	20000288 	.word	0x20000288
 80006a0:	0800c6b8 	.word	0x0800c6b8
 80006a4:	2000028c 	.word	0x2000028c
 80006a8:	0800c6d8 	.word	0x0800c6d8
 80006ac:	200001c0 	.word	0x200001c0

080006b0 <turnOnScreen>:
	Parameters: void

	Returns:	void
*/

void turnOnScreen(void){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

	/////////////CARACTERES ESPECIALES

	lcd_cursor_buff(5, 2);
 80006b4:	2102      	movs	r1, #2
 80006b6:	2005      	movs	r0, #5
 80006b8:	f000 fc56 	bl	8000f68 <lcd_cursor_buff>
	lcd_string_buff("BASS  PEDAL");
 80006bc:	4806      	ldr	r0, [pc, #24]	; (80006d8 <turnOnScreen+0x28>)
 80006be:	f000 fcd7 	bl	8001070 <lcd_string_buff>
	lcd_cursor_buff(5, 3);
 80006c2:	2103      	movs	r1, #3
 80006c4:	2005      	movs	r0, #5
 80006c6:	f000 fc4f 	bl	8000f68 <lcd_cursor_buff>
	lcd_string_buff("SYNTHESIZER");
 80006ca:	4804      	ldr	r0, [pc, #16]	; (80006dc <turnOnScreen+0x2c>)
 80006cc:	f000 fcd0 	bl	8001070 <lcd_string_buff>
	lcd_upDate_IT();
 80006d0:	f000 fd7a 	bl	80011c8 <lcd_upDate_IT>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	0800c544 	.word	0x0800c544
 80006dc:	0800c550 	.word	0x0800c550

080006e0 <chordScreen>:
	Parameters: void

	Returns:	void
*/

void chordScreen(void){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	lcd_clearScreen_buff();
 80006e4:	f000 fc2a 	bl	8000f3c <lcd_clearScreen_buff>
	lcd_cursor_buff(1,0);
 80006e8:	2100      	movs	r1, #0
 80006ea:	2001      	movs	r0, #1
 80006ec:	f000 fc3c 	bl	8000f68 <lcd_cursor_buff>
	lcd_string_buff("Acorde: ");
 80006f0:	4815      	ldr	r0, [pc, #84]	; (8000748 <chordScreen+0x68>)
 80006f2:	f000 fcbd 	bl	8001070 <lcd_string_buff>
	lcd_string_buff( str_chord[chord]);
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <chordScreen+0x6c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a15      	ldr	r2, [pc, #84]	; (8000750 <chordScreen+0x70>)
 80006fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fcb5 	bl	8001070 <lcd_string_buff>
	lcd_cursor_buff(1,1);
 8000706:	2101      	movs	r1, #1
 8000708:	2001      	movs	r0, #1
 800070a:	f000 fc2d 	bl	8000f68 <lcd_cursor_buff>
	lcd_string_buff("Pos:");
 800070e:	4811      	ldr	r0, [pc, #68]	; (8000754 <chordScreen+0x74>)
 8000710:	f000 fcae 	bl	8001070 <lcd_string_buff>
	lcd_string_buff( str_chordInv[chordInv]);
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <chordScreen+0x78>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a10      	ldr	r2, [pc, #64]	; (800075c <chordScreen+0x7c>)
 800071a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fca6 	bl	8001070 <lcd_string_buff>
	lcd_cursor_buff(1,2);
 8000724:	2102      	movs	r1, #2
 8000726:	2001      	movs	r0, #1
 8000728:	f000 fc1e 	bl	8000f68 <lcd_cursor_buff>
	lcd_string_buff("Grabar acorde");
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <chordScreen+0x80>)
 800072e:	f000 fc9f 	bl	8001070 <lcd_string_buff>

	lcd_cursor_buff(0, chordSelect_cursor);
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <chordScreen+0x84>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4619      	mov	r1, r3
 8000738:	2000      	movs	r0, #0
 800073a:	f000 fc15 	bl	8000f68 <lcd_cursor_buff>
	lcd_string_buff(">");
 800073e:	480a      	ldr	r0, [pc, #40]	; (8000768 <chordScreen+0x88>)
 8000740:	f000 fc96 	bl	8001070 <lcd_string_buff>

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	0800c55c 	.word	0x0800c55c
 800074c:	20000288 	.word	0x20000288
 8000750:	20000030 	.word	0x20000030
 8000754:	0800c568 	.word	0x0800c568
 8000758:	2000028c 	.word	0x2000028c
 800075c:	20000050 	.word	0x20000050
 8000760:	0800c570 	.word	0x0800c570
 8000764:	20000280 	.word	0x20000280
 8000768:	0800c580 	.word	0x0800c580

0800076c <mainScreen>:
	Parameters: void

	Returns:	void
*/

void mainScreen(void){
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

	extern uint8_t sustainMode;
	extern uint8_t acorde;

  	lcd_clearScreen_buff();
 8000770:	f000 fbe4 	bl	8000f3c <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 8000774:	2100      	movs	r1, #0
 8000776:	2000      	movs	r0, #0
 8000778:	f000 fbf6 	bl	8000f68 <lcd_cursor_buff>
	lcd_string_buff("Afinacion: ");
 800077c:	4827      	ldr	r0, [pc, #156]	; (800081c <mainScreen+0xb0>)
 800077e:	f000 fc77 	bl	8001070 <lcd_string_buff>
	lcd_string_buff(str_tunne[firstDoTunning - 36]);
 8000782:	4b27      	ldr	r3, [pc, #156]	; (8000820 <mainScreen+0xb4>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	3b24      	subs	r3, #36	; 0x24
 8000788:	4a26      	ldr	r2, [pc, #152]	; (8000824 <mainScreen+0xb8>)
 800078a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fc6e 	bl	8001070 <lcd_string_buff>
	lcd_cursor_buff(0,1);
 8000794:	2101      	movs	r1, #1
 8000796:	2000      	movs	r0, #0
 8000798:	f000 fbe6 	bl	8000f68 <lcd_cursor_buff>
	lcd_string_buff("Octava: ");
 800079c:	4822      	ldr	r0, [pc, #136]	; (8000828 <mainScreen+0xbc>)
 800079e:	f000 fc67 	bl	8001070 <lcd_string_buff>
	lcd_string_buff(str_octava[octava + 1]);
 80007a2:	4b22      	ldr	r3, [pc, #136]	; (800082c <mainScreen+0xc0>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <mainScreen+0xc4>)
 80007aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fc5e 	bl	8001070 <lcd_string_buff>
	lcd_cursor_buff(0,2);
 80007b4:	2102      	movs	r1, #2
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 fbd6 	bl	8000f68 <lcd_cursor_buff>
	lcd_string_buff("Sustain: ");
 80007bc:	481d      	ldr	r0, [pc, #116]	; (8000834 <mainScreen+0xc8>)
 80007be:	f000 fc57 	bl	8001070 <lcd_string_buff>
	switch (sustainMode){
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <mainScreen+0xcc>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d007      	beq.n	80007da <mainScreen+0x6e>
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d009      	beq.n	80007e2 <mainScreen+0x76>
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d10b      	bne.n	80007ea <mainScreen+0x7e>
		case 0:
			lcd_string_buff("OFF");
 80007d2:	481a      	ldr	r0, [pc, #104]	; (800083c <mainScreen+0xd0>)
 80007d4:	f000 fc4c 	bl	8001070 <lcd_string_buff>
		break;
 80007d8:	e007      	b.n	80007ea <mainScreen+0x7e>
		case 1:
			lcd_string_buff("smart");
 80007da:	4819      	ldr	r0, [pc, #100]	; (8000840 <mainScreen+0xd4>)
 80007dc:	f000 fc48 	bl	8001070 <lcd_string_buff>
		break;
 80007e0:	e003      	b.n	80007ea <mainScreen+0x7e>
		case 2:
			lcd_string_buff("clasico");
 80007e2:	4818      	ldr	r0, [pc, #96]	; (8000844 <mainScreen+0xd8>)
 80007e4:	f000 fc44 	bl	8001070 <lcd_string_buff>
		break;
 80007e8:	bf00      	nop
	}//end switch.
	lcd_cursor_buff(0,3);
 80007ea:	2103      	movs	r1, #3
 80007ec:	2000      	movs	r0, #0
 80007ee:	f000 fbbb 	bl	8000f68 <lcd_cursor_buff>
	lcd_string_buff("Acordes: ");
 80007f2:	4815      	ldr	r0, [pc, #84]	; (8000848 <mainScreen+0xdc>)
 80007f4:	f000 fc3c 	bl	8001070 <lcd_string_buff>
	switch (acorde){
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <mainScreen+0xe0>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <mainScreen+0x9a>
 8000800:	2b01      	cmp	r3, #1
 8000802:	d004      	beq.n	800080e <mainScreen+0xa2>
			lcd_string_buff("ON");
		break;
	}//end switch.


}
 8000804:	e007      	b.n	8000816 <mainScreen+0xaa>
			lcd_string_buff("OFF");
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <mainScreen+0xd0>)
 8000808:	f000 fc32 	bl	8001070 <lcd_string_buff>
		break;
 800080c:	e003      	b.n	8000816 <mainScreen+0xaa>
			lcd_string_buff("ON");
 800080e:	4810      	ldr	r0, [pc, #64]	; (8000850 <mainScreen+0xe4>)
 8000810:	f000 fc2e 	bl	8001070 <lcd_string_buff>
		break;
 8000814:	bf00      	nop
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	0800c584 	.word	0x0800c584
 8000820:	20000284 	.word	0x20000284
 8000824:	20000000 	.word	0x20000000
 8000828:	0800c590 	.word	0x0800c590
 800082c:	200001bc 	.word	0x200001bc
 8000830:	2000005c 	.word	0x2000005c
 8000834:	0800c59c 	.word	0x0800c59c
 8000838:	20000234 	.word	0x20000234
 800083c:	0800c5a8 	.word	0x0800c5a8
 8000840:	0800c5ac 	.word	0x0800c5ac
 8000844:	0800c5b4 	.word	0x0800c5b4
 8000848:	0800c5bc 	.word	0x0800c5bc
 800084c:	20000240 	.word	0x20000240
 8000850:	0800c5c8 	.word	0x0800c5c8

08000854 <tunneScreen>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void tunneScreen(void){
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 8000858:	f000 fb70 	bl	8000f3c <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 800085c:	2100      	movs	r1, #0
 800085e:	2000      	movs	r0, #0
 8000860:	f000 fb82 	bl	8000f68 <lcd_cursor_buff>
	lcd_string_buff("AFINACION: ");
 8000864:	480b      	ldr	r0, [pc, #44]	; (8000894 <tunneScreen+0x40>)
 8000866:	f000 fc03 	bl	8001070 <lcd_string_buff>
	lcd_cursor_buff(8, 2);
 800086a:	2102      	movs	r1, #2
 800086c:	2008      	movs	r0, #8
 800086e:	f000 fb7b 	bl	8000f68 <lcd_cursor_buff>
	lcd_string_buff("< ");
 8000872:	4809      	ldr	r0, [pc, #36]	; (8000898 <tunneScreen+0x44>)
 8000874:	f000 fbfc 	bl	8001070 <lcd_string_buff>
	lcd_string_buff(str_tunne[firstDoTunning - 36]);
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <tunneScreen+0x48>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	3b24      	subs	r3, #36	; 0x24
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <tunneScreen+0x4c>)
 8000880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000884:	4618      	mov	r0, r3
 8000886:	f000 fbf3 	bl	8001070 <lcd_string_buff>
	lcd_string_buff(" >");
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <tunneScreen+0x50>)
 800088c:	f000 fbf0 	bl	8001070 <lcd_string_buff>
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	0800c5cc 	.word	0x0800c5cc
 8000898:	0800c5d8 	.word	0x0800c5d8
 800089c:	20000284 	.word	0x20000284
 80008a0:	20000000 	.word	0x20000000
 80008a4:	0800c5dc 	.word	0x0800c5dc

080008a8 <on_off_octave>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void on_off_octave (void){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 80008ac:	f000 fb46 	bl	8000f3c <lcd_clearScreen_buff>
	lcd_cursor_buff(3,2);
 80008b0:	2102      	movs	r1, #2
 80008b2:	2003      	movs	r0, #3
 80008b4:	f000 fb58 	bl	8000f68 <lcd_cursor_buff>
	lcd_string_buff("Octava:  ");
 80008b8:	4806      	ldr	r0, [pc, #24]	; (80008d4 <on_off_octave+0x2c>)
 80008ba:	f000 fbd9 	bl	8001070 <lcd_string_buff>
	lcd_string_buff(str_octava[octava + 1]);
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <on_off_octave+0x30>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a05      	ldr	r2, [pc, #20]	; (80008dc <on_off_octave+0x34>)
 80008c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fbd0 	bl	8001070 <lcd_string_buff>

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	0800c5f8 	.word	0x0800c5f8
 80008d8:	200001bc 	.word	0x200001bc
 80008dc:	2000005c 	.word	0x2000005c

080008e0 <recuest_footkey>:
	Parameter: void

	Returns:	void
*/

void recuest_footkey (void){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 80008e4:	f000 fb2a 	bl	8000f3c <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 80008e8:	2100      	movs	r1, #0
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 fb3c 	bl	8000f68 <lcd_cursor_buff>
	lcd_string_buff("Pulse una tecla para");
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <recuest_footkey+0x28>)
 80008f2:	f000 fbbd 	bl	8001070 <lcd_string_buff>
	lcd_cursor_buff(0,1);
 80008f6:	2101      	movs	r1, #1
 80008f8:	2000      	movs	r0, #0
 80008fa:	f000 fb35 	bl	8000f68 <lcd_cursor_buff>
	lcd_string_buff("grabar el acorde...");
 80008fe:	4803      	ldr	r0, [pc, #12]	; (800090c <recuest_footkey+0x2c>)
 8000900:	f000 fbb6 	bl	8001070 <lcd_string_buff>

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	0800c604 	.word	0x0800c604
 800090c:	0800c61c 	.word	0x0800c61c

08000910 <pop_up_savedChord>:
	Parameter: void

	Returns:	void
*/

void pop_up_savedChord (uint8_t fk){
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]

	lcd_clearScreen_buff();
 800091a:	f000 fb0f 	bl	8000f3c <lcd_clearScreen_buff>
	lcd_cursor_buff(0,1);
 800091e:	2101      	movs	r1, #1
 8000920:	2000      	movs	r0, #0
 8000922:	f000 fb21 	bl	8000f68 <lcd_cursor_buff>
	lcd_string_buff("ACORDE GRABADO EN LA");
 8000926:	480a      	ldr	r0, [pc, #40]	; (8000950 <pop_up_savedChord+0x40>)
 8000928:	f000 fba2 	bl	8001070 <lcd_string_buff>
	lcd_cursor_buff(0,2);
 800092c:	2102      	movs	r1, #2
 800092e:	2000      	movs	r0, #0
 8000930:	f000 fb1a 	bl	8000f68 <lcd_cursor_buff>
	lcd_string_buff("TECLA ");
 8000934:	4807      	ldr	r0, [pc, #28]	; (8000954 <pop_up_savedChord+0x44>)
 8000936:	f000 fb9b 	bl	8001070 <lcd_string_buff>
	lcd_string_buff(str_tunne[fk]);
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <pop_up_savedChord+0x48>)
 800093e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000942:	4618      	mov	r0, r3
 8000944:	f000 fb94 	bl	8001070 <lcd_string_buff>

}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	0800c630 	.word	0x0800c630
 8000954:	0800c648 	.word	0x0800c648
 8000958:	20000000 	.word	0x20000000

0800095c <pop_up_sustain>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void pop_up_sustain (void){
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

	extern uint8_t sustainMode;

	lcd_clearScreen_buff();
 8000960:	f000 faec 	bl	8000f3c <lcd_clearScreen_buff>
	lcd_cursor_buff(2,1);
 8000964:	2101      	movs	r1, #1
 8000966:	2002      	movs	r0, #2
 8000968:	f000 fafe 	bl	8000f68 <lcd_cursor_buff>
	lcd_string_buff("Sustain: ");
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <pop_up_sustain+0x44>)
 800096e:	f000 fb7f 	bl	8001070 <lcd_string_buff>
	switch (sustainMode){
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <pop_up_sustain+0x48>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d008      	beq.n	800098c <pop_up_sustain+0x30>
 800097a:	2b02      	cmp	r3, #2
 800097c:	d00a      	beq.n	8000994 <pop_up_sustain+0x38>
 800097e:	2b00      	cmp	r3, #0
 8000980:	d000      	beq.n	8000984 <pop_up_sustain+0x28>
		case 2:
			lcd_string_buff("clasico");
		break;
	}//end switch.

}
 8000982:	e00b      	b.n	800099c <pop_up_sustain+0x40>
			lcd_string_buff("OFF");
 8000984:	4808      	ldr	r0, [pc, #32]	; (80009a8 <pop_up_sustain+0x4c>)
 8000986:	f000 fb73 	bl	8001070 <lcd_string_buff>
		break;
 800098a:	e007      	b.n	800099c <pop_up_sustain+0x40>
			lcd_string_buff("smart");
 800098c:	4807      	ldr	r0, [pc, #28]	; (80009ac <pop_up_sustain+0x50>)
 800098e:	f000 fb6f 	bl	8001070 <lcd_string_buff>
		break;
 8000992:	e003      	b.n	800099c <pop_up_sustain+0x40>
			lcd_string_buff("clasico");
 8000994:	4806      	ldr	r0, [pc, #24]	; (80009b0 <pop_up_sustain+0x54>)
 8000996:	f000 fb6b 	bl	8001070 <lcd_string_buff>
		break;
 800099a:	bf00      	nop
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	0800c59c 	.word	0x0800c59c
 80009a4:	20000234 	.word	0x20000234
 80009a8:	0800c5a8 	.word	0x0800c5a8
 80009ac:	0800c5ac 	.word	0x0800c5ac
 80009b0:	0800c5b4 	.word	0x0800c5b4

080009b4 <pop_up_cancel>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void pop_up_cancel (void){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 80009b8:	f000 fac0 	bl	8000f3c <lcd_clearScreen_buff>
	lcd_cursor_buff(2,1);
 80009bc:	2101      	movs	r1, #1
 80009be:	2002      	movs	r0, #2
 80009c0:	f000 fad2 	bl	8000f68 <lcd_cursor_buff>
	lcd_string_buff("ACCION CANCELADA");
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <pop_up_cancel+0x1c>)
 80009c6:	f000 fb53 	bl	8001070 <lcd_string_buff>

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	0800c650 	.word	0x0800c650

080009d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80009da:	463b      	mov	r3, r7
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <MX_ADC1_Init+0x98>)
 80009e8:	4a21      	ldr	r2, [pc, #132]	; (8000a70 <MX_ADC1_Init+0x9c>)
 80009ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <MX_ADC1_Init+0x98>)
 80009ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <MX_ADC1_Init+0x98>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009fa:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_ADC1_Init+0x98>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a00:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a16:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <MX_ADC1_Init+0xa0>)
 8000a18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a36:	f001 ffc7 	bl	80029c8 <HAL_ADC_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a40:	f001 fb26 	bl	8002090 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a44:	2308      	movs	r3, #8
 8000a46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a50:	463b      	mov	r3, r7
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a56:	f001 fffb 	bl	8002a50 <HAL_ADC_ConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a60:	f001 fb16 	bl	8002090 <Error_Handler>
  }

}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000294 	.word	0x20000294
 8000a70:	40012000 	.word	0x40012000
 8000a74:	0f000001 	.word	0x0f000001

08000a78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a24      	ldr	r2, [pc, #144]	; (8000b28 <HAL_ADC_MspInit+0xb0>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d141      	bne.n	8000b1e <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <HAL_ADC_MspInit+0xb4>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	4a22      	ldr	r2, [pc, #136]	; (8000b2c <HAL_ADC_MspInit+0xb4>)
 8000aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aaa:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <HAL_ADC_MspInit+0xb4>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <HAL_ADC_MspInit+0xb4>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <HAL_ADC_MspInit+0xb4>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <HAL_ADC_MspInit+0xb4>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_ADC_MspInit+0xb4>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <HAL_ADC_MspInit+0xb4>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_ADC_MspInit+0xb4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000aee:	2303      	movs	r3, #3
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af2:	2303      	movs	r3, #3
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	480b      	ldr	r0, [pc, #44]	; (8000b30 <HAL_ADC_MspInit+0xb8>)
 8000b02:	f002 fbff 	bl	8003304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b06:	2303      	movs	r3, #3
 8000b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	4806      	ldr	r0, [pc, #24]	; (8000b34 <HAL_ADC_MspInit+0xbc>)
 8000b1a:	f002 fbf3 	bl	8003304 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b1e:	bf00      	nop
 8000b20:	3728      	adds	r7, #40	; 0x28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40012000 	.word	0x40012000
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020800 	.word	0x40020800
 8000b34:	40020400 	.word	0x40020400

08000b38 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000b3e:	463b      	mov	r3, r7
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_DAC_Init+0x60>)
 8000b48:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <MX_DAC_Init+0x64>)
 8000b4a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000b4c:	4812      	ldr	r0, [pc, #72]	; (8000b98 <MX_DAC_Init+0x60>)
 8000b4e:	f002 faae 	bl	80030ae <HAL_DAC_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000b58:	f001 fa9a 	bl	8002090 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b64:	463b      	mov	r3, r7
 8000b66:	2200      	movs	r2, #0
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480b      	ldr	r0, [pc, #44]	; (8000b98 <MX_DAC_Init+0x60>)
 8000b6c:	f002 fb27 	bl	80031be <HAL_DAC_ConfigChannel>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000b76:	f001 fa8b 	bl	8002090 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	2210      	movs	r2, #16
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_DAC_Init+0x60>)
 8000b82:	f002 fb1c 	bl	80031be <HAL_DAC_ConfigChannel>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000b8c:	f001 fa80 	bl	8002090 <Error_Handler>
  }

}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200002dc 	.word	0x200002dc
 8000b9c:	40007400 	.word	0x40007400

08000ba0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <HAL_DAC_MspInit+0x7c>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d127      	bne.n	8000c12 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <HAL_DAC_MspInit+0x80>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a15      	ldr	r2, [pc, #84]	; (8000c20 <HAL_DAC_MspInit+0x80>)
 8000bcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <HAL_DAC_MspInit+0x80>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_DAC_MspInit+0x80>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <HAL_DAC_MspInit+0x80>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <HAL_DAC_MspInit+0x80>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bfa:	2330      	movs	r3, #48	; 0x30
 8000bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4805      	ldr	r0, [pc, #20]	; (8000c24 <HAL_DAC_MspInit+0x84>)
 8000c0e:	f002 fb79 	bl	8003304 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40007400 	.word	0x40007400
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020000 	.word	0x40020000

08000c28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <MX_GPIO_Init+0xec>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a33      	ldr	r2, [pc, #204]	; (8000d14 <MX_GPIO_Init+0xec>)
 8000c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <MX_GPIO_Init+0xec>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <MX_GPIO_Init+0xec>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a2c      	ldr	r2, [pc, #176]	; (8000d14 <MX_GPIO_Init+0xec>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <MX_GPIO_Init+0xec>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <MX_GPIO_Init+0xec>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a25      	ldr	r2, [pc, #148]	; (8000d14 <MX_GPIO_Init+0xec>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <MX_GPIO_Init+0xec>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <MX_GPIO_Init+0xec>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a1e      	ldr	r2, [pc, #120]	; (8000d14 <MX_GPIO_Init+0xec>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <MX_GPIO_Init+0xec>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_GPIO_Init+0xec>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a17      	ldr	r2, [pc, #92]	; (8000d14 <MX_GPIO_Init+0xec>)
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_GPIO_Init+0xec>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_VERDE_Pin|LED_NARANJA_Pin|LED_ROJO_Pin|LED_AZUL_Pin
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f24f 01e0 	movw	r1, #61664	; 0xf0e0
 8000cd0:	4811      	ldr	r0, [pc, #68]	; (8000d18 <MX_GPIO_Init+0xf0>)
 8000cd2:	f002 fcb1 	bl	8003638 <HAL_GPIO_WritePin>
                          |PL_bot_Pin|CE_bot_Pin|ST_leds_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOTON_AZUL_Pin;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOTON_AZUL_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <MX_GPIO_Init+0xf4>)
 8000cea:	f002 fb0b 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_VERDE_Pin|LED_NARANJA_Pin|LED_ROJO_Pin|LED_AZUL_Pin
 8000cee:	f24f 03e0 	movw	r3, #61664	; 0xf0e0
 8000cf2:	617b      	str	r3, [r7, #20]
                          |PL_bot_Pin|CE_bot_Pin|ST_leds_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	4804      	ldr	r0, [pc, #16]	; (8000d18 <MX_GPIO_Init+0xf0>)
 8000d08:	f002 fafc 	bl	8003304 <HAL_GPIO_Init>

}
 8000d0c:	bf00      	nop
 8000d0e:	3728      	adds	r7, #40	; 0x28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020c00 	.word	0x40020c00
 8000d1c:	40020000 	.word	0x40020000

08000d20 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d26:	4a13      	ldr	r2, [pc, #76]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d2c:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <MX_I2C1_Init+0x58>)
 8000d2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d5c:	4804      	ldr	r0, [pc, #16]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d5e:	f002 fc85 	bl	800366c <HAL_I2C_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d68:	f001 f992 	bl	8002090 <Error_Handler>
  }

}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200002f0 	.word	0x200002f0
 8000d74:	40005400 	.word	0x40005400
 8000d78:	00061a80 	.word	0x00061a80

08000d7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a21      	ldr	r2, [pc, #132]	; (8000e20 <HAL_I2C_MspInit+0xa4>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d13b      	bne.n	8000e16 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <HAL_I2C_MspInit+0xa8>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a1f      	ldr	r2, [pc, #124]	; (8000e24 <HAL_I2C_MspInit+0xa8>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <HAL_I2C_MspInit+0xa8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dba:	23c0      	movs	r3, #192	; 0xc0
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dbe:	2312      	movs	r3, #18
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dca:	2304      	movs	r3, #4
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4814      	ldr	r0, [pc, #80]	; (8000e28 <HAL_I2C_MspInit+0xac>)
 8000dd6:	f002 fa95 	bl	8003304 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_I2C_MspInit+0xa8>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <HAL_I2C_MspInit+0xa8>)
 8000de4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_I2C_MspInit+0xa8>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	201f      	movs	r0, #31
 8000dfc:	f002 f921 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e00:	201f      	movs	r0, #31
 8000e02:	f002 f93a 	bl	800307a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2020      	movs	r0, #32
 8000e0c:	f002 f919 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000e10:	2020      	movs	r0, #32
 8000e12:	f002 f932 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40005400 	.word	0x40005400
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020400 	.word	0x40020400

08000e2c <__lcd_send_cmd>:
uint8_t flag_sendLcd = 1;
uint8_t I2CtxComplete = 1;

/*Used by lcd_init() only*/
void __lcd_send_cmd (char cmd)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af02      	add	r7, sp, #8
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	f023 030f 	bic.w	r3, r3, #15
 8000e3c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	011b      	lsls	r3, r3, #4
 8000e42:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	f043 030c 	orr.w	r3, r3, #12
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	f043 0308 	orr.w	r3, r3, #8
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000e58:	7bbb      	ldrb	r3, [r7, #14]
 8000e5a:	f043 030c 	orr.w	r3, r3, #12
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e62:	7bbb      	ldrb	r3, [r7, #14]
 8000e64:	f043 0308 	orr.w	r3, r3, #8
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <__lcd_send_cmd+0x60>)
 8000e6e:	6818      	ldr	r0, [r3, #0]
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <__lcd_send_cmd+0x64>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b299      	uxth	r1, r3
 8000e76:	f107 0208 	add.w	r2, r7, #8
 8000e7a:	2364      	movs	r3, #100	; 0x64
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2304      	movs	r3, #4
 8000e80:	f002 fd2c 	bl	80038dc <HAL_I2C_Master_Transmit>
}
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200005f0 	.word	0x200005f0
 8000e90:	200005ec 	.word	0x200005ec

08000e94 <__lcd_send_cmd_buff>:

void __lcd_send_cmd_buff (char cmd)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f023 030f 	bic.w	r3, r3, #15
 8000ea4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	011b      	lsls	r3, r3, #4
 8000eaa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	f043 030c 	orr.w	r3, r3, #12
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	f043 0308 	orr.w	r3, r3, #8
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ec0:	7bbb      	ldrb	r3, [r7, #14]
 8000ec2:	f043 030c 	orr.w	r3, r3, #12
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000eca:	7bbb      	ldrb	r3, [r7, #14]
 8000ecc:	f043 0308 	orr.w	r3, r3, #8
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
	__add_to_lcdBuff((uint8_t*)data_t,4);
 8000ed4:	f107 0308 	add.w	r3, r7, #8
 8000ed8:	2104      	movs	r1, #4
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f8dc 	bl	8001098 <__add_to_lcdBuff>
}
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <__lcd_send_data_buff>:


void __lcd_send_data_buff (char data)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	f023 030f 	bic.w	r3, r3, #15
 8000ef8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	011b      	lsls	r3, r3, #4
 8000efe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	f043 030d 	orr.w	r3, r3, #13
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	f043 0309 	orr.w	r3, r3, #9
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000f14:	7bbb      	ldrb	r3, [r7, #14]
 8000f16:	f043 030d 	orr.w	r3, r3, #13
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000f1e:	7bbb      	ldrb	r3, [r7, #14]
 8000f20:	f043 0309 	orr.w	r3, r3, #9
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
	__add_to_lcdBuff((uint8_t*)data_t,4);
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f8b2 	bl	8001098 <__add_to_lcdBuff>
}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <lcd_clearScreen_buff>:


void lcd_clearScreen_buff (void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
	__lcd_send_cmd_buff (0x80);
 8000f42:	2080      	movs	r0, #128	; 0x80
 8000f44:	f7ff ffa6 	bl	8000e94 <__lcd_send_cmd_buff>
	for (int i=0; i<80; i++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	e005      	b.n	8000f5a <lcd_clearScreen_buff+0x1e>
	{
		__lcd_send_data_buff (' ');
 8000f4e:	2020      	movs	r0, #32
 8000f50:	f7ff ffca 	bl	8000ee8 <__lcd_send_data_buff>
	for (int i=0; i<80; i++)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3301      	adds	r3, #1
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b4f      	cmp	r3, #79	; 0x4f
 8000f5e:	ddf6      	ble.n	8000f4e <lcd_clearScreen_buff+0x12>
	}
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <lcd_cursor_buff>:


void lcd_cursor_buff(int x, int y)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
    switch (y){
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	d82b      	bhi.n	8000fd0 <lcd_cursor_buff+0x68>
 8000f78:	a201      	add	r2, pc, #4	; (adr r2, 8000f80 <lcd_cursor_buff+0x18>)
 8000f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f7e:	bf00      	nop
 8000f80:	08000f91 	.word	0x08000f91
 8000f84:	08000fa1 	.word	0x08000fa1
 8000f88:	08000fb1 	.word	0x08000fb1
 8000f8c:	08000fc1 	.word	0x08000fc1
    	case 0:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE1 + x);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	3b80      	subs	r3, #128	; 0x80
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff7b 	bl	8000e94 <__lcd_send_cmd_buff>
    	break;
 8000f9e:	e017      	b.n	8000fd0 <lcd_cursor_buff+0x68>
    	case 1:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE2 + x);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	3b40      	subs	r3, #64	; 0x40
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff73 	bl	8000e94 <__lcd_send_cmd_buff>
    	break;
 8000fae:	e00f      	b.n	8000fd0 <lcd_cursor_buff+0x68>
    	case 2:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE3 + x);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	3b6c      	subs	r3, #108	; 0x6c
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff6b 	bl	8000e94 <__lcd_send_cmd_buff>
    	break;
 8000fbe:	e007      	b.n	8000fd0 <lcd_cursor_buff+0x68>
    	case 3:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE4 + x);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	3b2c      	subs	r3, #44	; 0x2c
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff63 	bl	8000e94 <__lcd_send_cmd_buff>
    	break;
 8000fce:	bf00      	nop
    }
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <lcd_init>:


void lcd_init (I2C_HandleTypeDef* hi2c, uint8_t i2c_address)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	70fb      	strb	r3, [r7, #3]
	i2c_handler = hi2c; //set the i2c handler struct.
 8000fe4:	4a20      	ldr	r2, [pc, #128]	; (8001068 <lcd_init+0x90>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
	SLAVE_ADDRESS_LCD = (i2c_address << 1); //set the lcd i2c address (left alignment).
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	; (800106c <lcd_init+0x94>)
 8000ff2:	701a      	strb	r2, [r3, #0]

	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000ff4:	2032      	movs	r0, #50	; 0x32
 8000ff6:	f001 fcc5 	bl	8002984 <HAL_Delay>
	__lcd_send_cmd (0x30);
 8000ffa:	2030      	movs	r0, #48	; 0x30
 8000ffc:	f7ff ff16 	bl	8000e2c <__lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001000:	2005      	movs	r0, #5
 8001002:	f001 fcbf 	bl	8002984 <HAL_Delay>
	__lcd_send_cmd (0x30);
 8001006:	2030      	movs	r0, #48	; 0x30
 8001008:	f7ff ff10 	bl	8000e2c <__lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800100c:	2001      	movs	r0, #1
 800100e:	f001 fcb9 	bl	8002984 <HAL_Delay>
	__lcd_send_cmd (0x30);
 8001012:	2030      	movs	r0, #48	; 0x30
 8001014:	f7ff ff0a 	bl	8000e2c <__lcd_send_cmd>
	HAL_Delay(10);
 8001018:	200a      	movs	r0, #10
 800101a:	f001 fcb3 	bl	8002984 <HAL_Delay>
	__lcd_send_cmd (0x20);  // 4bit mode
 800101e:	2020      	movs	r0, #32
 8001020:	f7ff ff04 	bl	8000e2c <__lcd_send_cmd>
	HAL_Delay(10);
 8001024:	200a      	movs	r0, #10
 8001026:	f001 fcad 	bl	8002984 <HAL_Delay>

  // dislay initialisation
	__lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800102a:	2028      	movs	r0, #40	; 0x28
 800102c:	f7ff fefe 	bl	8000e2c <__lcd_send_cmd>
	HAL_Delay(1);
 8001030:	2001      	movs	r0, #1
 8001032:	f001 fca7 	bl	8002984 <HAL_Delay>
	__lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001036:	2008      	movs	r0, #8
 8001038:	f7ff fef8 	bl	8000e2c <__lcd_send_cmd>
	HAL_Delay(1);
 800103c:	2001      	movs	r0, #1
 800103e:	f001 fca1 	bl	8002984 <HAL_Delay>
	__lcd_send_cmd (0x01);  // clear display
 8001042:	2001      	movs	r0, #1
 8001044:	f7ff fef2 	bl	8000e2c <__lcd_send_cmd>
	HAL_Delay(2);
 8001048:	2002      	movs	r0, #2
 800104a:	f001 fc9b 	bl	8002984 <HAL_Delay>
	__lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800104e:	2006      	movs	r0, #6
 8001050:	f7ff feec 	bl	8000e2c <__lcd_send_cmd>
	HAL_Delay(1);
 8001054:	2001      	movs	r0, #1
 8001056:	f001 fc95 	bl	8002984 <HAL_Delay>
	__lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800105a:	200c      	movs	r0, #12
 800105c:	f7ff fee6 	bl	8000e2c <__lcd_send_cmd>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200005f0 	.word	0x200005f0
 800106c:	200005ec 	.word	0x200005ec

08001070 <lcd_string_buff>:


void lcd_string_buff (char *str)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	while (*str) __lcd_send_data_buff(*str++);
 8001078:	e006      	b.n	8001088 <lcd_string_buff+0x18>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff30 	bl	8000ee8 <__lcd_send_data_buff>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1f4      	bne.n	800107a <lcd_string_buff+0xa>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <__add_to_lcdBuff>:


void __add_to_lcdBuff(uint8_t* data, uint8_t sizeData){
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]
	while (i < sizeData){
 80010a8:	e018      	b.n	80010dc <__add_to_lcdBuff+0x44>
		lcd_circ_buffer[lcd_circ_buff_in] = *(data + i);
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a11      	ldr	r2, [pc, #68]	; (80010f8 <__add_to_lcdBuff+0x60>)
 80010b2:	8812      	ldrh	r2, [r2, #0]
 80010b4:	7819      	ldrb	r1, [r3, #0]
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <__add_to_lcdBuff+0x64>)
 80010b8:	5499      	strb	r1, [r3, r2]
		lcd_circ_buff_in++;
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <__add_to_lcdBuff+0x60>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <__add_to_lcdBuff+0x60>)
 80010c4:	801a      	strh	r2, [r3, #0]
		i++;
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	3301      	adds	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
		if (lcd_circ_buff_in == LCD_CIRCBUFF_MAX){
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <__add_to_lcdBuff+0x60>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 80010d4:	d102      	bne.n	80010dc <__add_to_lcdBuff+0x44>
			lcd_circ_buff_in = 0;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <__add_to_lcdBuff+0x60>)
 80010d8:	2200      	movs	r2, #0
 80010da:	801a      	strh	r2, [r3, #0]
	while (i < sizeData){
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	78fb      	ldrb	r3, [r7, #3]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d3e2      	bcc.n	80010aa <__add_to_lcdBuff+0x12>
		}
	}
	flag_sendLcd = 1;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <__add_to_lcdBuff+0x68>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	200001f4 	.word	0x200001f4
 80010fc:	20000344 	.word	0x20000344
 8001100:	20000068 	.word	0x20000068

08001104 <__lcd_sendBuff_IT>:


void __lcd_sendBuff_IT (void){
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
	uint16_t I2C_Tx_ptr;
	uint16_t I2C_Tx_length;

	//if (I2CtxComplete != 0){ //si no termino la transmision anterior...

		if (lcd_circ_buff_out == LCD_CIRCBUFF_MAX){
 800110a:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <__lcd_sendBuff_IT+0xa4>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8001112:	d102      	bne.n	800111a <__lcd_sendBuff_IT+0x16>
			lcd_circ_buff_out = 0;
 8001114:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <__lcd_sendBuff_IT+0xa4>)
 8001116:	2200      	movs	r2, #0
 8001118:	801a      	strh	r2, [r3, #0]
		}

		if (lcd_circ_buff_out == lcd_circ_buff_in){
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <__lcd_sendBuff_IT+0xa4>)
 800111c:	881a      	ldrh	r2, [r3, #0]
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <__lcd_sendBuff_IT+0xa8>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	d103      	bne.n	800112e <__lcd_sendBuff_IT+0x2a>
			//no hay transmisión acá
			flag_sendLcd = 0;
 8001126:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <__lcd_sendBuff_IT+0xac>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
			return;
 800112c:	e038      	b.n	80011a0 <__lcd_sendBuff_IT+0x9c>
		}

		if (lcd_circ_buff_out > lcd_circ_buff_in){
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <__lcd_sendBuff_IT+0xa4>)
 8001130:	881a      	ldrh	r2, [r3, #0]
 8001132:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <__lcd_sendBuff_IT+0xa8>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d907      	bls.n	800114a <__lcd_sendBuff_IT+0x46>
			lcd_tx_length = LCD_CIRCBUFF_MAX - lcd_circ_buff_out;//transmite solo hasta el final del buffer, para luego reacomodar los punteros.
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <__lcd_sendBuff_IT+0xa4>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	f5c3 732a 	rsb	r3, r3, #680	; 0x2a8
 8001142:	b29a      	uxth	r2, r3
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <__lcd_sendBuff_IT+0xb0>)
 8001146:	801a      	strh	r2, [r3, #0]
 8001148:	e007      	b.n	800115a <__lcd_sendBuff_IT+0x56>
		}else{
			lcd_tx_length = lcd_circ_buff_in - lcd_circ_buff_out;
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <__lcd_sendBuff_IT+0xa8>)
 800114c:	881a      	ldrh	r2, [r3, #0]
 800114e:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <__lcd_sendBuff_IT+0xa4>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	b29a      	uxth	r2, r3
 8001156:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <__lcd_sendBuff_IT+0xb0>)
 8001158:	801a      	strh	r2, [r3, #0]
//		I2C_Tx_ptr = lcd_circ_buff_out;
//		I2C_Tx_length = lcd_tx_length;
//		lcd_circ_buff_out += lcd_tx_length;
//		lcd_tx_length = 0;

		if (I2CtxComplete != 0){
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <__lcd_sendBuff_IT+0xb4>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d01e      	beq.n	80011a0 <__lcd_sendBuff_IT+0x9c>
			I2CtxComplete = 0;
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <__lcd_sendBuff_IT+0xb4>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]

			I2C_Tx_ptr = lcd_circ_buff_out;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <__lcd_sendBuff_IT+0xa4>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	80fb      	strh	r3, [r7, #6]
			I2C_Tx_length = lcd_tx_length;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <__lcd_sendBuff_IT+0xb0>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	80bb      	strh	r3, [r7, #4]
			lcd_circ_buff_out += lcd_tx_length;
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <__lcd_sendBuff_IT+0xa4>)
 8001176:	881a      	ldrh	r2, [r3, #0]
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <__lcd_sendBuff_IT+0xb0>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	4413      	add	r3, r2
 800117e:	b29a      	uxth	r2, r3
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <__lcd_sendBuff_IT+0xa4>)
 8001182:	801a      	strh	r2, [r3, #0]
			lcd_tx_length = 0;
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <__lcd_sendBuff_IT+0xb0>)
 8001186:	2200      	movs	r2, #0
 8001188:	801a      	strh	r2, [r3, #0]
			HAL_I2C_Master_Transmit_IT(i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) &lcd_circ_buffer[I2C_Tx_ptr],I2C_Tx_length);
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <__lcd_sendBuff_IT+0xb8>)
 800118c:	6818      	ldr	r0, [r3, #0]
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <__lcd_sendBuff_IT+0xbc>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b299      	uxth	r1, r3
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <__lcd_sendBuff_IT+0xc0>)
 8001198:	441a      	add	r2, r3
 800119a:	88bb      	ldrh	r3, [r7, #4]
 800119c:	f002 fc9c 	bl	8003ad8 <HAL_I2C_Master_Transmit_IT>
		}
	//}
}
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200001f6 	.word	0x200001f6
 80011ac:	200001f4 	.word	0x200001f4
 80011b0:	20000068 	.word	0x20000068
 80011b4:	200001f8 	.word	0x200001f8
 80011b8:	20000069 	.word	0x20000069
 80011bc:	200005f0 	.word	0x200005f0
 80011c0:	200005ec 	.word	0x200005ec
 80011c4:	20000344 	.word	0x20000344

080011c8 <lcd_upDate_IT>:


void lcd_upDate_IT(void){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	if (flag_sendLcd) __lcd_sendBuff_IT();
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <lcd_upDate_IT+0x14>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <lcd_upDate_IT+0x10>
 80011d4:	f7ff ff96 	bl	8001104 <__lcd_sendBuff_IT>
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000068 	.word	0x20000068

080011e0 <_lcd_ISR>:


/* Insert the next function in your ISR*/
void _lcd_ISR (void){
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
	I2CtxComplete=1;
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <_lcd_ISR+0x14>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	701a      	strb	r2, [r3, #0]
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	20000069 	.word	0x20000069

080011f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011fe:	f001 fb4f 	bl	80028a0 <HAL_Init>

  /* USER CODE BEGIN Init */
  firstDoTunning = 36;
 8001202:	4ba9      	ldr	r3, [pc, #676]	; (80014a8 <main+0x2b0>)
 8001204:	2224      	movs	r2, #36	; 0x24
 8001206:	701a      	strb	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001208:	f000 f9d0 	bl	80015ac <SystemClock_Config>
   */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120c:	f7ff fd0c 	bl	8000c28 <MX_GPIO_Init>
  MX_DAC_Init();
 8001210:	f7ff fc92 	bl	8000b38 <MX_DAC_Init>
  MX_I2C1_Init();
 8001214:	f7ff fd84 	bl	8000d20 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001218:	f00a fc2c 	bl	800ba74 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800121c:	f001 f968 	bl	80024f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001220:	f001 f9b2 	bl	8002588 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001224:	f7ff fbd6 	bl	80009d4 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001228:	f001 fa3e 	bl	80026a8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800122c:	f001 fa66 	bl	80026fc <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8001230:	f001 f830 	bl	8002294 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  spi_74HC165_init(&hspi1, PL_bot_GPIO_Port, PL_bot_Pin, CE_bot_GPIO_Port, CE_bot_Pin);
 8001234:	2340      	movs	r3, #64	; 0x40
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	4b9c      	ldr	r3, [pc, #624]	; (80014ac <main+0x2b4>)
 800123a:	2220      	movs	r2, #32
 800123c:	499b      	ldr	r1, [pc, #620]	; (80014ac <main+0x2b4>)
 800123e:	489c      	ldr	r0, [pc, #624]	; (80014b0 <main+0x2b8>)
 8001240:	f7ff f942 	bl	80004c8 <spi_74HC165_init>
  spi_74HC595_init(&hspi1, ST_leds_GPIO_Port, ST_leds_Pin);
 8001244:	2280      	movs	r2, #128	; 0x80
 8001246:	4999      	ldr	r1, [pc, #612]	; (80014ac <main+0x2b4>)
 8001248:	4899      	ldr	r0, [pc, #612]	; (80014b0 <main+0x2b8>)
 800124a:	f7ff f9a1 	bl	8000590 <spi_74HC595_init>

  HAL_TIM_Base_Start_IT(&htim2); // 1 ms tick timer.
 800124e:	4899      	ldr	r0, [pc, #612]	; (80014b4 <main+0x2bc>)
 8001250:	f006 ff63 	bl	800811a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); // 44100Hz timer.
 8001254:	4898      	ldr	r0, [pc, #608]	; (80014b8 <main+0x2c0>)
 8001256:	f006 ff60 	bl	800811a <HAL_TIM_Base_Start_IT>

  osc_dac_init(&hdac, DAC_CHANNEL_1);
 800125a:	2100      	movs	r1, #0
 800125c:	4897      	ldr	r0, [pc, #604]	; (80014bc <main+0x2c4>)
 800125e:	f000 ff1f 	bl	80020a0 <osc_dac_init>
  osc_setRatios(100, 100, 100);
 8001262:	2264      	movs	r2, #100	; 0x64
 8001264:	2164      	movs	r1, #100	; 0x64
 8001266:	2064      	movs	r0, #100	; 0x64
 8001268:	f000 ffe8 	bl	800223c <osc_setRatios>

  leds_buffer = 0xFFFF;
 800126c:	4b94      	ldr	r3, [pc, #592]	; (80014c0 <main+0x2c8>)
 800126e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001272:	801a      	strh	r2, [r3, #0]
  spi_74HC595_Transmit((uint8_t*) &leds_buffer, 2 /*bytes*/);
 8001274:	2102      	movs	r1, #2
 8001276:	4892      	ldr	r0, [pc, #584]	; (80014c0 <main+0x2c8>)
 8001278:	f7ff f9ac 	bl	80005d4 <spi_74HC595_Transmit>

  lcd_init(&hi2c1, 0x3f);
 800127c:	213f      	movs	r1, #63	; 0x3f
 800127e:	4891      	ldr	r0, [pc, #580]	; (80014c4 <main+0x2cc>)
 8001280:	f7ff feaa 	bl	8000fd8 <lcd_init>

  //rutina de encendido//

  turnOnScreen();
 8001284:	f7ff fa14 	bl	80006b0 <turnOnScreen>
  HAL_Delay(500);
 8001288:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800128c:	f001 fb7a 	bl	8002984 <HAL_Delay>
  showLeds();
 8001290:	f000 fe28 	bl	8001ee4 <showLeds>
  HAL_Delay(500);
 8001294:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001298:	f001 fb74 	bl	8002984 <HAL_Delay>
  mainScreen();
 800129c:	f7ff fa66 	bl	800076c <mainScreen>
  leds_octava = 0b1 << LED_OCT_M;
 80012a0:	4b89      	ldr	r3, [pc, #548]	; (80014c8 <main+0x2d0>)
 80012a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a6:	801a      	strh	r2, [r3, #0]
  leds_buffer = leds_octava;
 80012a8:	4b87      	ldr	r3, [pc, #540]	; (80014c8 <main+0x2d0>)
 80012aa:	881a      	ldrh	r2, [r3, #0]
 80012ac:	4b84      	ldr	r3, [pc, #528]	; (80014c0 <main+0x2c8>)
 80012ae:	801a      	strh	r2, [r3, #0]
  leds_buffer = ~leds_buffer;
 80012b0:	4b83      	ldr	r3, [pc, #524]	; (80014c0 <main+0x2c8>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	4b81      	ldr	r3, [pc, #516]	; (80014c0 <main+0x2c8>)
 80012ba:	801a      	strh	r2, [r3, #0]
  spi_74HC595_Transmit((uint8_t*) &leds_buffer, 2 /*bytes*/);
 80012bc:	2102      	movs	r1, #2
 80012be:	4880      	ldr	r0, [pc, #512]	; (80014c0 <main+0x2c8>)
 80012c0:	f7ff f988 	bl	80005d4 <spi_74HC595_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	switch (screenNum){
 80012c4:	4b81      	ldr	r3, [pc, #516]	; (80014cc <main+0x2d4>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d855      	bhi.n	800137a <main+0x182>
 80012ce:	a201      	add	r2, pc, #4	; (adr r2, 80012d4 <main+0xdc>)
 80012d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d4:	080012f9 	.word	0x080012f9
 80012d8:	08001307 	.word	0x08001307
 80012dc:	08001315 	.word	0x08001315
 80012e0:	0800137b 	.word	0x0800137b
 80012e4:	08001323 	.word	0x08001323
 80012e8:	0800133f 	.word	0x0800133f
 80012ec:	08001331 	.word	0x08001331
 80012f0:	08001359 	.word	0x08001359
 80012f4:	08001367 	.word	0x08001367
	  		case MAIN_SCREEN:
	  			mainScreen();
 80012f8:	f7ff fa38 	bl	800076c <mainScreen>
	  			last_screenNum = screenNum;
 80012fc:	4b73      	ldr	r3, [pc, #460]	; (80014cc <main+0x2d4>)
 80012fe:	781a      	ldrb	r2, [r3, #0]
 8001300:	4b73      	ldr	r3, [pc, #460]	; (80014d0 <main+0x2d8>)
 8001302:	701a      	strb	r2, [r3, #0]
	  		break;
 8001304:	e03a      	b.n	800137c <main+0x184>
	  		case CHORD_SCREEN:
	  			chordScreen();
 8001306:	f7ff f9eb 	bl	80006e0 <chordScreen>
	  			last_screenNum = screenNum;
 800130a:	4b70      	ldr	r3, [pc, #448]	; (80014cc <main+0x2d4>)
 800130c:	781a      	ldrb	r2, [r3, #0]
 800130e:	4b70      	ldr	r3, [pc, #448]	; (80014d0 <main+0x2d8>)
 8001310:	701a      	strb	r2, [r3, #0]
	  		break;
 8001312:	e033      	b.n	800137c <main+0x184>
	  		case TUNNE_SCREEN:
	  			tunneScreen();
 8001314:	f7ff fa9e 	bl	8000854 <tunneScreen>
	  			last_screenNum = screenNum;
 8001318:	4b6c      	ldr	r3, [pc, #432]	; (80014cc <main+0x2d4>)
 800131a:	781a      	ldrb	r2, [r3, #0]
 800131c:	4b6c      	ldr	r3, [pc, #432]	; (80014d0 <main+0x2d8>)
 800131e:	701a      	strb	r2, [r3, #0]
	  		break;
 8001320:	e02c      	b.n	800137c <main+0x184>
	  		case RECUEST_FOOTKEY_SCREEN:
	  			recuest_footkey();
 8001322:	f7ff fadd 	bl	80008e0 <recuest_footkey>
	  			last_screenNum = screenNum; //this variable must store the CHORD_SCREEN value, to use it as return point.
 8001326:	4b69      	ldr	r3, [pc, #420]	; (80014cc <main+0x2d4>)
 8001328:	781a      	ldrb	r2, [r3, #0]
 800132a:	4b69      	ldr	r3, [pc, #420]	; (80014d0 <main+0x2d8>)
 800132c:	701a      	strb	r2, [r3, #0]
	  		break;
 800132e:	e025      	b.n	800137c <main+0x184>
	  		case POPUP_OCTAVE:
	  			on_off_octave();
 8001330:	f7ff faba 	bl	80008a8 <on_off_octave>
	  			popup_time = 2000;
 8001334:	4b67      	ldr	r3, [pc, #412]	; (80014d4 <main+0x2dc>)
 8001336:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800133a:	601a      	str	r2, [r3, #0]
	  		break;
 800133c:	e01e      	b.n	800137c <main+0x184>
	  		case POPUP_SAVED_CHORD:
	  			pop_up_savedChord(lastKey_pos);
 800133e:	4b66      	ldr	r3, [pc, #408]	; (80014d8 <main+0x2e0>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fae4 	bl	8000910 <pop_up_savedChord>
	  			last_screenNum = CHORD_SCREEN;
 8001348:	4b61      	ldr	r3, [pc, #388]	; (80014d0 <main+0x2d8>)
 800134a:	2204      	movs	r2, #4
 800134c:	701a      	strb	r2, [r3, #0]
	  			popup_time = 2000;
 800134e:	4b61      	ldr	r3, [pc, #388]	; (80014d4 <main+0x2dc>)
 8001350:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001354:	601a      	str	r2, [r3, #0]
	  		break;
 8001356:	e011      	b.n	800137c <main+0x184>
	  		case POPUP_SUSTAIN:
	  			pop_up_sustain();
 8001358:	f7ff fb00 	bl	800095c <pop_up_sustain>
	  			popup_time = 2000;
 800135c:	4b5d      	ldr	r3, [pc, #372]	; (80014d4 <main+0x2dc>)
 800135e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001362:	601a      	str	r2, [r3, #0]
	  		break;
 8001364:	e00a      	b.n	800137c <main+0x184>
	  		case POPUP_CANCEL:
	  			pop_up_cancel();
 8001366:	f7ff fb25 	bl	80009b4 <pop_up_cancel>
	  			popup_time = 2000;
 800136a:	4b5a      	ldr	r3, [pc, #360]	; (80014d4 <main+0x2dc>)
 800136c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001370:	601a      	str	r2, [r3, #0]
	  			last_screenNum = CHORD_SCREEN;
 8001372:	4b57      	ldr	r3, [pc, #348]	; (80014d0 <main+0x2d8>)
 8001374:	2204      	movs	r2, #4
 8001376:	701a      	strb	r2, [r3, #0]
	  		break;
 8001378:	e000      	b.n	800137c <main+0x184>
	  		default:
	  		break;
 800137a:	bf00      	nop
	  	}
	  	screenNum = NO_SCREEN;
 800137c:	4b53      	ldr	r3, [pc, #332]	; (80014cc <main+0x2d4>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]

	  	if (popup_timeUp){
 8001382:	4b56      	ldr	r3, [pc, #344]	; (80014dc <main+0x2e4>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00a      	beq.n	80013a2 <main+0x1aa>
	  		if (screenNum == NO_SCREEN) screenNum = last_screenNum;
 800138c:	4b4f      	ldr	r3, [pc, #316]	; (80014cc <main+0x2d4>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d103      	bne.n	800139c <main+0x1a4>
 8001394:	4b4e      	ldr	r3, [pc, #312]	; (80014d0 <main+0x2d8>)
 8001396:	781a      	ldrb	r2, [r3, #0]
 8001398:	4b4c      	ldr	r3, [pc, #304]	; (80014cc <main+0x2d4>)
 800139a:	701a      	strb	r2, [r3, #0]
	  		popup_timeUp = 0;
 800139c:	4b4f      	ldr	r3, [pc, #316]	; (80014dc <main+0x2e4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
	  	}

	  	//botones y teclas
	  	buttonFall = last_button & ~read_button;
 80013a2:	4b4f      	ldr	r3, [pc, #316]	; (80014e0 <main+0x2e8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	43da      	mvns	r2, r3
 80013a8:	4b4e      	ldr	r3, [pc, #312]	; (80014e4 <main+0x2ec>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4013      	ands	r3, r2
 80013ae:	4a4e      	ldr	r2, [pc, #312]	; (80014e8 <main+0x2f0>)
 80013b0:	6013      	str	r3, [r2, #0]
	  	buttonRise = ~last_button & read_button;
 80013b2:	4b4c      	ldr	r3, [pc, #304]	; (80014e4 <main+0x2ec>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	43da      	mvns	r2, r3
 80013b8:	4b49      	ldr	r3, [pc, #292]	; (80014e0 <main+0x2e8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4013      	ands	r3, r2
 80013be:	4a4b      	ldr	r2, [pc, #300]	; (80014ec <main+0x2f4>)
 80013c0:	6013      	str	r3, [r2, #0]
	  	if (GETBUTTONSTATUS(IN_BACK, buttonFall)){
 80013c2:	4b49      	ldr	r3, [pc, #292]	; (80014e8 <main+0x2f0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <main+0x1e2>
	  		screenNum = MAIN_SCREEN;
 80013ce:	4b3f      	ldr	r3, [pc, #252]	; (80014cc <main+0x2d4>)
 80013d0:	2203      	movs	r2, #3
 80013d2:	701a      	strb	r2, [r3, #0]
	  		menu = MAIN_SCREEN;
 80013d4:	4b46      	ldr	r3, [pc, #280]	; (80014f0 <main+0x2f8>)
 80013d6:	2203      	movs	r2, #3
 80013d8:	701a      	strb	r2, [r3, #0]
	  	}
	  	if (GETBUTTONSTATUS(IN_SUST_PROP, buttonFall)){
 80013da:	4b43      	ldr	r3, [pc, #268]	; (80014e8 <main+0x2f0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <main+0x1f2>
	  		sustainProp();
 80013e6:	f000 f94b 	bl	8001680 <sustainProp>
	  	}
	  	if (GETBUTTONSTATUS(IN_SUST_MIDI, buttonFall)){
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <main+0x2f0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <main+0x202>
	  		sustainMIDI();
 80013f6:	f000 f9b1 	bl	800175c <sustainMIDI>
	  	}
	  	if (GETBUTTONSTATUS(IN_CHORD, buttonFall)){
 80013fa:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <main+0x2f0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <main+0x212>
	  		inputChord();
 8001406:	f000 fa0b 	bl	8001820 <inputChord>
	  	}
	  	inputOctave();
 800140a:	f000 fa65 	bl	80018d8 <inputOctave>
	  	if (GETBUTTONSTATUS(IN_TUNNE, buttonFall)){
 800140e:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <main+0x2f0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <main+0x226>
	  		inputTunne();
 800141a:	f000 fa9f 	bl	800195c <inputTunne>
	  	}
	  	inputPresets();
 800141e:	f000 fab9 	bl	8001994 <inputPresets>

	  	last_button = read_button;
 8001422:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <main+0x2e8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a2f      	ldr	r2, [pc, #188]	; (80014e4 <main+0x2ec>)
 8001428:	6013      	str	r3, [r2, #0]
	  		default:
	  		break;
	  	}
	  	*/

	    switch (menu){ //manage the recuested menu function.
 800142a:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <main+0x2f8>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	3b03      	subs	r3, #3
 8001430:	2b04      	cmp	r3, #4
 8001432:	d81c      	bhi.n	800146e <main+0x276>
 8001434:	a201      	add	r2, pc, #4	; (adr r2, 800143c <main+0x244>)
 8001436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143a:	bf00      	nop
 800143c:	08001451 	.word	0x08001451
 8001440:	08001457 	.word	0x08001457
 8001444:	08001461 	.word	0x08001461
 8001448:	0800146f 	.word	0x0800146f
 800144c:	0800146b 	.word	0x0800146b
	    	case MAIN_SCREEN:
	    		inputNotes();
 8001450:	f000 fae2 	bl	8001a18 <inputNotes>
	    	break;
 8001454:	e00c      	b.n	8001470 <main+0x278>
	  		case CHORD_SCREEN:
	  			chordSelect();
 8001456:	f000 fbe9 	bl	8001c2c <chordSelect>
	  			inputNotes();
 800145a:	f000 fadd 	bl	8001a18 <inputNotes>
	  		break;
 800145e:	e007      	b.n	8001470 <main+0x278>
	  		case TUNNE_SCREEN:
	  			tunneSelect();
 8001460:	f000 fca8 	bl	8001db4 <tunneSelect>
	  			inputNotes();
 8001464:	f000 fad8 	bl	8001a18 <inputNotes>
	  		break;
 8001468:	e002      	b.n	8001470 <main+0x278>
	  		case RECUEST_FOOTKEY_SCREEN:
	  			inputSaveChord(); // @suppress("No break at end of case")
 800146a:	f000 fb8d 	bl	8001b88 <inputSaveChord>
	  		default:
	  		break;
 800146e:	bf00      	nop

	    }

	    MIDI_SendCheck();
 8001470:	f00a fcda 	bl	800be28 <MIDI_SendCheck>

		if (flag_dac != 0){
 8001474:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <main+0x2fc>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d004      	beq.n	8001486 <main+0x28e>
		  osc_dac_update();
 800147c:	f000 fe2c 	bl	80020d8 <osc_dac_update>
		  flag_dac = 0;
 8001480:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <main+0x2fc>)
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
		}


	    if (flag_tick != 0){
 8001486:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <main+0x300>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	f43f af1a 	beq.w	80012c4 <main+0xcc>

	    	if (lcd_refresh_time != 0){
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <main+0x304>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d033      	beq.n	8001500 <main+0x308>
	    		lcd_refresh_time--;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <main+0x304>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	3b01      	subs	r3, #1
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <main+0x304>)
 80014a2:	701a      	strb	r2, [r3, #0]
 80014a4:	e031      	b.n	800150a <main+0x312>
 80014a6:	bf00      	nop
 80014a8:	20000284 	.word	0x20000284
 80014ac:	40020c00 	.word	0x40020c00
 80014b0:	2000060c 	.word	0x2000060c
 80014b4:	200006a4 	.word	0x200006a4
 80014b8:	20000664 	.word	0x20000664
 80014bc:	200002dc 	.word	0x200002dc
 80014c0:	200005f6 	.word	0x200005f6
 80014c4:	200002f0 	.word	0x200002f0
 80014c8:	200005fa 	.word	0x200005fa
 80014cc:	20000241 	.word	0x20000241
 80014d0:	20000086 	.word	0x20000086
 80014d4:	20000244 	.word	0x20000244
 80014d8:	200005f4 	.word	0x200005f4
 80014dc:	20000248 	.word	0x20000248
 80014e0:	2000006c 	.word	0x2000006c
 80014e4:	20000070 	.word	0x20000070
 80014e8:	20000238 	.word	0x20000238
 80014ec:	2000023c 	.word	0x2000023c
 80014f0:	20000085 	.word	0x20000085
 80014f4:	2000024b 	.word	0x2000024b
 80014f8:	2000024a 	.word	0x2000024a
 80014fc:	20000087 	.word	0x20000087
	    	}else{
	    		lcd_upDate_IT();
 8001500:	f7ff fe62 	bl	80011c8 <lcd_upDate_IT>
	    		lcd_refresh_time = 25;
 8001504:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <main+0x38c>)
 8001506:	2219      	movs	r2, #25
 8001508:	701a      	strb	r2, [r3, #0]
	    	}//end if lcd_refresh_time

	    	if (popup_time != 0){
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <main+0x390>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00b      	beq.n	800152a <main+0x332>
				popup_time--;
 8001512:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <main+0x390>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	3b01      	subs	r3, #1
 8001518:	4a1b      	ldr	r2, [pc, #108]	; (8001588 <main+0x390>)
 800151a:	6013      	str	r3, [r2, #0]
				if (popup_time == 1) popup_timeUp = 1;
 800151c:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <main+0x390>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d102      	bne.n	800152a <main+0x332>
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <main+0x394>)
 8001526:	2201      	movs	r2, #1
 8001528:	701a      	strb	r2, [r3, #0]
			}//end if popup_time

	    	if (refresh_buttons != 0){
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <main+0x398>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <main+0x348>
	    		refresh_buttons--;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <main+0x398>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	3b01      	subs	r3, #1
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <main+0x398>)
 800153c:	701a      	strb	r2, [r3, #0]
 800153e:	e01c      	b.n	800157a <main+0x382>
	    	}else{
//	    		last_button = read_button;
	    		spi_74HC165_receive((uint8_t *)&read_button, sizeof(read_button));
 8001540:	2104      	movs	r1, #4
 8001542:	4814      	ldr	r0, [pc, #80]	; (8001594 <main+0x39c>)
 8001544:	f7fe ffe8 	bl	8000518 <spi_74HC165_receive>

//	    		buttonFall = last_button & ~read_button;
//	    		buttonRise = ~last_button & read_button;

	    		leds_buffer = leds_octava | leds_presets | leds_resto;
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <main+0x3a0>)
 800154a:	881a      	ldrh	r2, [r3, #0]
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <main+0x3a4>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	4313      	orrs	r3, r2
 8001552:	b29a      	uxth	r2, r3
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <main+0x3a8>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	4313      	orrs	r3, r2
 800155a:	b29a      	uxth	r2, r3
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <main+0x3ac>)
 800155e:	801a      	strh	r2, [r3, #0]
	    		leds_buffer = ~leds_buffer; //pasa a logica negativa
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <main+0x3ac>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	43db      	mvns	r3, r3
 8001566:	b29a      	uxth	r2, r3
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <main+0x3ac>)
 800156a:	801a      	strh	r2, [r3, #0]
	    		spi_74HC595_Transmit((uint8_t*) &leds_buffer, 2 /*bytes*/);
 800156c:	2102      	movs	r1, #2
 800156e:	480d      	ldr	r0, [pc, #52]	; (80015a4 <main+0x3ac>)
 8001570:	f7ff f830 	bl	80005d4 <spi_74HC595_Transmit>
//	    			spi_74HC595_Transmit((uint8_t*) &buff_leds, 2);
//	    			__NOP();
//	    		}


	    		refresh_buttons = 20;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <main+0x398>)
 8001576:	2214      	movs	r2, #20
 8001578:	701a      	strb	r2, [r3, #0]
	    	}

	    	flag_tick = 0;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <main+0x3b0>)
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
	  	switch (screenNum){
 8001580:	e6a0      	b.n	80012c4 <main+0xcc>
 8001582:	bf00      	nop
 8001584:	20000087 	.word	0x20000087
 8001588:	20000244 	.word	0x20000244
 800158c:	20000248 	.word	0x20000248
 8001590:	20000074 	.word	0x20000074
 8001594:	2000006c 	.word	0x2000006c
 8001598:	200005fa 	.word	0x200005fa
 800159c:	200005f8 	.word	0x200005f8
 80015a0:	20000600 	.word	0x20000600
 80015a4:	200005f6 	.word	0x200005f6
 80015a8:	2000024a 	.word	0x2000024a

080015ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b094      	sub	sp, #80	; 0x50
 80015b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b2:	f107 0320 	add.w	r3, r7, #32
 80015b6:	2230      	movs	r2, #48	; 0x30
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f00a ff58 	bl	800c470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	4b28      	ldr	r3, [pc, #160]	; (8001678 <SystemClock_Config+0xcc>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	4a27      	ldr	r2, [pc, #156]	; (8001678 <SystemClock_Config+0xcc>)
 80015da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015de:	6413      	str	r3, [r2, #64]	; 0x40
 80015e0:	4b25      	ldr	r3, [pc, #148]	; (8001678 <SystemClock_Config+0xcc>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	4b22      	ldr	r3, [pc, #136]	; (800167c <SystemClock_Config+0xd0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a21      	ldr	r2, [pc, #132]	; (800167c <SystemClock_Config+0xd0>)
 80015f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	4b1f      	ldr	r3, [pc, #124]	; (800167c <SystemClock_Config+0xd0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001608:	2301      	movs	r3, #1
 800160a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800160c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001612:	2302      	movs	r3, #2
 8001614:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800161a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800161c:	2304      	movs	r3, #4
 800161e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001620:	23a8      	movs	r3, #168	; 0xa8
 8001622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001624:	2302      	movs	r3, #2
 8001626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001628:	2307      	movs	r3, #7
 800162a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	4618      	mov	r0, r3
 8001632:	f005 fa71 	bl	8006b18 <HAL_RCC_OscConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800163c:	f000 fd28 	bl	8002090 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001640:	230f      	movs	r3, #15
 8001642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001644:	2302      	movs	r3, #2
 8001646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800164c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	2105      	movs	r1, #5
 800165e:	4618      	mov	r0, r3
 8001660:	f005 fcca 	bl	8006ff8 <HAL_RCC_ClockConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800166a:	f000 fd11 	bl	8002090 <Error_Handler>
  }
}
 800166e:	bf00      	nop
 8001670:	3750      	adds	r7, #80	; 0x50
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	40007000 	.word	0x40007000

08001680 <sustainProp>:

/* USER CODE BEGIN 4 */

void sustainProp (void){
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0

		for (int j = 0; j <= 12; j++){
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	e00b      	b.n	80016a4 <sustainProp+0x24>
			sendChord(lastSendNote[j], 0, 1); // silents all notes
 800168c:	4a2c      	ldr	r2, [pc, #176]	; (8001740 <sustainProp+0xc0>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001694:	2201      	movs	r2, #1
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f000 fbcd 	bl	8001e38 <sendChord>
		for (int j = 0; j <= 12; j++){
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3301      	adds	r3, #1
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b0c      	cmp	r3, #12
 80016a8:	ddf0      	ble.n	800168c <sustainProp+0xc>
		}

		switch (sustainMode){
 80016aa:	4b26      	ldr	r3, [pc, #152]	; (8001744 <sustainProp+0xc4>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d029      	beq.n	8001706 <sustainProp+0x86>
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d002      	beq.n	80016bc <sustainProp+0x3c>
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d010      	beq.n	80016dc <sustainProp+0x5c>
 80016ba:	e039      	b.n	8001730 <sustainProp+0xb0>
			case 2:
				//event = {0x0B, 0xB0 | MIDI_CHANNEL, 64, 0};
				//MidiUSB.sendMIDI(event);
				midi_msg[0] = 0x0B; //0x0B == type event (control change)
 80016bc:	4b22      	ldr	r3, [pc, #136]	; (8001748 <sustainProp+0xc8>)
 80016be:	220b      	movs	r2, #11
 80016c0:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 80016c2:	4b21      	ldr	r3, [pc, #132]	; (8001748 <sustainProp+0xc8>)
 80016c4:	22b1      	movs	r2, #177	; 0xb1
 80016c6:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	// 64 == sustain.
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <sustainProp+0xc8>)
 80016ca:	2240      	movs	r2, #64	; 0x40
 80016cc:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 0;
 80016ce:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <sustainProp+0xc8>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4); // @suppress("No break at end of case")
 80016d4:	2104      	movs	r1, #4
 80016d6:	481c      	ldr	r0, [pc, #112]	; (8001748 <sustainProp+0xc8>)
 80016d8:	f00a fb70 	bl	800bdbc <MIDI_SendBuffer>
			case 0:
				lastSustainNote = 0;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <sustainProp+0xcc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
				sustainMode = 1; //prop
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <sustainProp+0xc4>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	701a      	strb	r2, [r3, #0]
				leds_resto |= 0x1 << LED_SUST_P;
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <sustainProp+0xd0>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <sustainProp+0xd0>)
 80016f4:	801a      	strh	r2, [r3, #0]
				leds_resto &= ~(0x1 << LED_SUST_M);
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <sustainProp+0xd0>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	f023 0302 	bic.w	r3, r3, #2
 80016fe:	b29a      	uxth	r2, r3
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <sustainProp+0xd0>)
 8001702:	801a      	strh	r2, [r3, #0]
			break;
 8001704:	e014      	b.n	8001730 <sustainProp+0xb0>

			case 1:
				sustainFlag = 1;
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <sustainProp+0xd4>)
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
				sustainMode = 0;
 800170c:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <sustainProp+0xc4>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
				leds_resto &= ~(0x1 << LED_SUST_M);
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <sustainProp+0xd0>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	f023 0302 	bic.w	r3, r3, #2
 800171a:	b29a      	uxth	r2, r3
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <sustainProp+0xd0>)
 800171e:	801a      	strh	r2, [r3, #0]
				leds_resto &= ~(0x1 << LED_SUST_P);
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <sustainProp+0xd0>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	f023 0304 	bic.w	r3, r3, #4
 8001728:	b29a      	uxth	r2, r3
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <sustainProp+0xd0>)
 800172c:	801a      	strh	r2, [r3, #0]
			break;
 800172e:	bf00      	nop
		} //end switch

		screenNum = POPUP_SUSTAIN;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <sustainProp+0xd8>)
 8001732:	220a      	movs	r2, #10
 8001734:	701a      	strb	r2, [r3, #0]

} //end sustainProp()
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200001fc 	.word	0x200001fc
 8001744:	20000234 	.word	0x20000234
 8001748:	200005fc 	.word	0x200005fc
 800174c:	20000230 	.word	0x20000230
 8001750:	20000600 	.word	0x20000600
 8001754:	2000006a 	.word	0x2000006a
 8001758:	20000241 	.word	0x20000241

0800175c <sustainMIDI>:

void sustainMIDI (void){
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0

		switch (sustainMode){
 8001760:	4b2a      	ldr	r3, [pc, #168]	; (800180c <sustainMIDI+0xb0>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db4b      	blt.n	8001800 <sustainMIDI+0xa4>
 8001768:	2b01      	cmp	r3, #1
 800176a:	dd02      	ble.n	8001772 <sustainMIDI+0x16>
 800176c:	2b02      	cmp	r3, #2
 800176e:	d025      	beq.n	80017bc <sustainMIDI+0x60>
 8001770:	e046      	b.n	8001800 <sustainMIDI+0xa4>
			case 0:
			case 1:
				sustainFlag = 1;	// needed to normal notes functioning.
 8001772:	4b27      	ldr	r3, [pc, #156]	; (8001810 <sustainMIDI+0xb4>)
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]

				midi_msg[0] = 0x0B;		//0x0B == type event (control change),
 8001778:	4b26      	ldr	r3, [pc, #152]	; (8001814 <sustainMIDI+0xb8>)
 800177a:	220b      	movs	r2, #11
 800177c:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 800177e:	4b25      	ldr	r3, [pc, #148]	; (8001814 <sustainMIDI+0xb8>)
 8001780:	22b1      	movs	r2, #177	; 0xb1
 8001782:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	//64 == sustain.
 8001784:	4b23      	ldr	r3, [pc, #140]	; (8001814 <sustainMIDI+0xb8>)
 8001786:	2240      	movs	r2, #64	; 0x40
 8001788:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 127;
 800178a:	4b22      	ldr	r3, [pc, #136]	; (8001814 <sustainMIDI+0xb8>)
 800178c:	227f      	movs	r2, #127	; 0x7f
 800178e:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4);
 8001790:	2104      	movs	r1, #4
 8001792:	4820      	ldr	r0, [pc, #128]	; (8001814 <sustainMIDI+0xb8>)
 8001794:	f00a fb12 	bl	800bdbc <MIDI_SendBuffer>

				sustainMode = 2;
 8001798:	4b1c      	ldr	r3, [pc, #112]	; (800180c <sustainMIDI+0xb0>)
 800179a:	2202      	movs	r2, #2
 800179c:	701a      	strb	r2, [r3, #0]
				leds_resto |= 0x1 << LED_SUST_M;
 800179e:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <sustainMIDI+0xbc>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	f043 0302 	orr.w	r3, r3, #2
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <sustainMIDI+0xbc>)
 80017aa:	801a      	strh	r2, [r3, #0]
				leds_resto &= ~(0x1 << LED_SUST_P);
 80017ac:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <sustainMIDI+0xbc>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	f023 0304 	bic.w	r3, r3, #4
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <sustainMIDI+0xbc>)
 80017b8:	801a      	strh	r2, [r3, #0]
			break;
 80017ba:	e021      	b.n	8001800 <sustainMIDI+0xa4>
			case 2:
				midi_msg[0] = 0x0B;	//0x0B == type event (control change)
 80017bc:	4b15      	ldr	r3, [pc, #84]	; (8001814 <sustainMIDI+0xb8>)
 80017be:	220b      	movs	r2, #11
 80017c0:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <sustainMIDI+0xb8>)
 80017c4:	22b1      	movs	r2, #177	; 0xb1
 80017c6:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	//64 == sustain.
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <sustainMIDI+0xb8>)
 80017ca:	2240      	movs	r2, #64	; 0x40
 80017cc:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 0;
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <sustainMIDI+0xb8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4);
 80017d4:	2104      	movs	r1, #4
 80017d6:	480f      	ldr	r0, [pc, #60]	; (8001814 <sustainMIDI+0xb8>)
 80017d8:	f00a faf0 	bl	800bdbc <MIDI_SendBuffer>

				sustainMode = 0;
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <sustainMIDI+0xb0>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
				leds_resto &= ~(0x1 << LED_SUST_M);
 80017e2:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <sustainMIDI+0xbc>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	f023 0302 	bic.w	r3, r3, #2
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <sustainMIDI+0xbc>)
 80017ee:	801a      	strh	r2, [r3, #0]
				leds_resto &= ~(0x1 << LED_SUST_P);
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <sustainMIDI+0xbc>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	f023 0304 	bic.w	r3, r3, #4
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	4b07      	ldr	r3, [pc, #28]	; (8001818 <sustainMIDI+0xbc>)
 80017fc:	801a      	strh	r2, [r3, #0]
			break;
 80017fe:	bf00      	nop
		} //end switch

		screenNum = POPUP_SUSTAIN;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <sustainMIDI+0xc0>)
 8001802:	220a      	movs	r2, #10
 8001804:	701a      	strb	r2, [r3, #0]
} //end sustainMIDI()
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000234 	.word	0x20000234
 8001810:	2000006a 	.word	0x2000006a
 8001814:	200005fc 	.word	0x200005fc
 8001818:	20000600 	.word	0x20000600
 800181c:	20000241 	.word	0x20000241

08001820 <inputChord>:

void inputChord (void){
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

	switch (menu){
 8001824:	4b28      	ldr	r3, [pc, #160]	; (80018c8 <inputChord+0xa8>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d002      	beq.n	8001832 <inputChord+0x12>
 800182c:	2b04      	cmp	r3, #4
 800182e:	d023      	beq.n	8001878 <inputChord+0x58>
 8001830:	e033      	b.n	800189a <inputChord+0x7a>
		case MAIN_SCREEN:
			if (acorde != 0){
 8001832:	4b26      	ldr	r3, [pc, #152]	; (80018cc <inputChord+0xac>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00d      	beq.n	8001856 <inputChord+0x36>
				acorde = 0;
 800183a:	4b24      	ldr	r3, [pc, #144]	; (80018cc <inputChord+0xac>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
				leds_resto &= ~(0x1 << LED_CHORD);
 8001840:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <inputChord+0xb0>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	f023 0308 	bic.w	r3, r3, #8
 8001848:	b29a      	uxth	r2, r3
 800184a:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <inputChord+0xb0>)
 800184c:	801a      	strh	r2, [r3, #0]
				screenNum = MAIN_SCREEN;
 800184e:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <inputChord+0xb4>)
 8001850:	2203      	movs	r2, #3
 8001852:	701a      	strb	r2, [r3, #0]
				screenNum = CHORD_SCREEN;
				menu = CHORD_SCREEN;
				acorde = 1;
				leds_resto |= 0x1 << LED_CHORD;
			} //fin if acorde
		break;
 8001854:	e032      	b.n	80018bc <inputChord+0x9c>
				screenNum = CHORD_SCREEN;
 8001856:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <inputChord+0xb4>)
 8001858:	2204      	movs	r2, #4
 800185a:	701a      	strb	r2, [r3, #0]
				menu = CHORD_SCREEN;
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <inputChord+0xa8>)
 800185e:	2204      	movs	r2, #4
 8001860:	701a      	strb	r2, [r3, #0]
				acorde = 1;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <inputChord+0xac>)
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
				leds_resto |= 0x1 << LED_CHORD;
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <inputChord+0xb0>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	f043 0308 	orr.w	r3, r3, #8
 8001870:	b29a      	uxth	r2, r3
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <inputChord+0xb0>)
 8001874:	801a      	strh	r2, [r3, #0]
		break;
 8001876:	e021      	b.n	80018bc <inputChord+0x9c>
		case CHORD_SCREEN:
			screenNum = MAIN_SCREEN;
 8001878:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <inputChord+0xb4>)
 800187a:	2203      	movs	r2, #3
 800187c:	701a      	strb	r2, [r3, #0]
			menu = MAIN_SCREEN;
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <inputChord+0xa8>)
 8001880:	2203      	movs	r2, #3
 8001882:	701a      	strb	r2, [r3, #0]
			acorde = 0;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <inputChord+0xac>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
			leds_resto &= ~(0x1 << LED_CHORD);
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <inputChord+0xb0>)
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	f023 0308 	bic.w	r3, r3, #8
 8001892:	b29a      	uxth	r2, r3
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <inputChord+0xb0>)
 8001896:	801a      	strh	r2, [r3, #0]
		break;
 8001898:	e010      	b.n	80018bc <inputChord+0x9c>
		default:
			screenNum = CHORD_SCREEN;
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <inputChord+0xb4>)
 800189c:	2204      	movs	r2, #4
 800189e:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN;
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <inputChord+0xa8>)
 80018a2:	2204      	movs	r2, #4
 80018a4:	701a      	strb	r2, [r3, #0]
			acorde = 1;
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <inputChord+0xac>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
			leds_resto |= 0x1 << LED_CHORD;
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <inputChord+0xb0>)
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <inputChord+0xb0>)
 80018b8:	801a      	strh	r2, [r3, #0]
		break;
 80018ba:	bf00      	nop
	} //fin switch menu

} //end inputChord()
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000085 	.word	0x20000085
 80018cc:	20000240 	.word	0x20000240
 80018d0:	20000600 	.word	0x20000600
 80018d4:	20000241 	.word	0x20000241

080018d8 <inputOctave>:


void inputOctave (void){
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

	if(GETBUTTONSTATUS(IN_OCT_G, buttonFall)){
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <inputOctave+0x74>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00b      	beq.n	8001900 <inputOctave+0x28>
		octava = -1;
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <inputOctave+0x78>)
 80018ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018ee:	601a      	str	r2, [r3, #0]
		screenNum=POPUP_OCTAVE;
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <inputOctave+0x7c>)
 80018f2:	2209      	movs	r2, #9
 80018f4:	701a      	strb	r2, [r3, #0]
		leds_octava = 0x1 << LED_OCT_G;
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <inputOctave+0x80>)
 80018f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018fc:	801a      	strh	r2, [r3, #0]
		return;
 80018fe:	e021      	b.n	8001944 <inputOctave+0x6c>
	}

	if (GETBUTTONSTATUS(IN_OCT_M, buttonFall)){
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <inputOctave+0x74>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00a      	beq.n	8001922 <inputOctave+0x4a>
		octava = 0;
 800190c:	4b10      	ldr	r3, [pc, #64]	; (8001950 <inputOctave+0x78>)
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
		screenNum=POPUP_OCTAVE;
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <inputOctave+0x7c>)
 8001914:	2209      	movs	r2, #9
 8001916:	701a      	strb	r2, [r3, #0]
		leds_octava = 0x1 << LED_OCT_M;
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <inputOctave+0x80>)
 800191a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800191e:	801a      	strh	r2, [r3, #0]
		return;
 8001920:	e010      	b.n	8001944 <inputOctave+0x6c>
	}

	if (GETBUTTONSTATUS(IN_OCT_A, buttonFall)){
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <inputOctave+0x74>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00a      	beq.n	8001944 <inputOctave+0x6c>
		octava = 1;
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <inputOctave+0x78>)
 8001930:	2201      	movs	r2, #1
 8001932:	601a      	str	r2, [r3, #0]
		screenNum=POPUP_OCTAVE;
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <inputOctave+0x7c>)
 8001936:	2209      	movs	r2, #9
 8001938:	701a      	strb	r2, [r3, #0]
		leds_octava = 0x1 << LED_OCT_A;
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <inputOctave+0x80>)
 800193c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001940:	801a      	strh	r2, [r3, #0]
		return;
 8001942:	bf00      	nop
	}
} //end inputOctave()
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	20000238 	.word	0x20000238
 8001950:	200001bc 	.word	0x200001bc
 8001954:	20000241 	.word	0x20000241
 8001958:	200005fa 	.word	0x200005fa

0800195c <inputTunne>:


void inputTunne(void){
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

      if (menu != TUNNE_SCREEN){
 8001960:	4b0a      	ldr	r3, [pc, #40]	; (800198c <inputTunne+0x30>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b05      	cmp	r3, #5
 8001966:	d006      	beq.n	8001976 <inputTunne+0x1a>
		screenNum = TUNNE_SCREEN;
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <inputTunne+0x34>)
 800196a:	2205      	movs	r2, #5
 800196c:	701a      	strb	r2, [r3, #0]
		menu = TUNNE_SCREEN;
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <inputTunne+0x30>)
 8001970:	2205      	movs	r2, #5
 8001972:	701a      	strb	r2, [r3, #0]
	  }else{
		screenNum = MAIN_SCREEN;
		menu = MAIN_SCREEN;
	  } //end  if menu

} //end inputTunne()
 8001974:	e005      	b.n	8001982 <inputTunne+0x26>
		screenNum = MAIN_SCREEN;
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <inputTunne+0x34>)
 8001978:	2203      	movs	r2, #3
 800197a:	701a      	strb	r2, [r3, #0]
		menu = MAIN_SCREEN;
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <inputTunne+0x30>)
 800197e:	2203      	movs	r2, #3
 8001980:	701a      	strb	r2, [r3, #0]
} //end inputTunne()
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	20000085 	.word	0x20000085
 8001990:	20000241 	.word	0x20000241

08001994 <inputPresets>:


void inputPresets (void){
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++){                                         // 6 presets en total.
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	e02d      	b.n	80019fc <inputPresets+0x68>

		if (GETBUTTONSTATUS(i + IN_PRESET0, buttonFall)){
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3308      	adds	r3, #8
 80019a4:	2201      	movs	r2, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <inputPresets+0x78>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d01f      	beq.n	80019f6 <inputPresets+0x62>
			midi_msg[0] = 0x0C;	//0x0C == type event (program change)
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <inputPresets+0x7c>)
 80019b8:	220c      	movs	r2, #12
 80019ba:	701a      	strb	r2, [r3, #0]
			midi_msg[1] = 0xC0 | 1;
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <inputPresets+0x7c>)
 80019be:	22c1      	movs	r2, #193	; 0xc1
 80019c0:	705a      	strb	r2, [r3, #1]
			midi_msg[2] = i;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <inputPresets+0x7c>)
 80019c8:	709a      	strb	r2, [r3, #2]
			midi_msg[3] = 0;	//last param == 0 (unused in program change).
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <inputPresets+0x7c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	70da      	strb	r2, [r3, #3]
			MIDI_SendBuffer(midi_msg, 4);
 80019d0:	2104      	movs	r1, #4
 80019d2:	480f      	ldr	r0, [pc, #60]	; (8001a10 <inputPresets+0x7c>)
 80019d4:	f00a f9f2 	bl	800bdbc <MIDI_SendBuffer>
			if (i == 5){
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b05      	cmp	r3, #5
 80019dc:	d103      	bne.n	80019e6 <inputPresets+0x52>
				leds_presets = 0x1;
 80019de:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <inputPresets+0x80>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	801a      	strh	r2, [r3, #0]
 80019e4:	e007      	b.n	80019f6 <inputPresets+0x62>
			}else{
				leds_presets = 0x1 << (LED_PS0 + i);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	330b      	adds	r3, #11
 80019ea:	2201      	movs	r2, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <inputPresets+0x80>)
 80019f4:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 6; i++){                                         // 6 presets en total.
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3301      	adds	r3, #1
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b05      	cmp	r3, #5
 8001a00:	ddce      	ble.n	80019a0 <inputPresets+0xc>
			}
		} //end if GETBUTTONSTATUS

	} //end for

} //end inputPresets()
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000238 	.word	0x20000238
 8001a10:	200005fc 	.word	0x200005fc
 8001a14:	200005f8 	.word	0x200005f8

08001a18 <inputNotes>:


void inputNotes(void){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0

  uint8_t pressedNote;

  for (int i = 0; i <= 12; i++){
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	e094      	b.n	8001b4e <inputNotes+0x136>

//    buttonState[i + IN_DO] = HAL_GPIO_ReadPin(notePort_list[i], notePin_list[i]); //read current button pin.

//    if(!buttonState[i + IN_DO] && lastState[i + IN_DO]){  // If we read 1, and the last time we read 0, means button was just pressed.
    if (GETBUTTONSTATUS(teclas[i], buttonFall)){
 8001a24:	4a4e      	ldr	r2, [pc, #312]	; (8001b60 <inputNotes+0x148>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	2301      	movs	r3, #1
 8001a30:	4093      	lsls	r3, r2
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b4b      	ldr	r3, [pc, #300]	; (8001b64 <inputNotes+0x14c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d067      	beq.n	8001b0e <inputNotes+0xf6>
        pressedNote = firstDoTunning + i + 12 * octava; //detects the pressed note.
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4b49      	ldr	r3, [pc, #292]	; (8001b68 <inputNotes+0x150>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4b48      	ldr	r3, [pc, #288]	; (8001b6c <inputNotes+0x154>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	4619      	mov	r1, r3
 8001a52:	0049      	lsls	r1, r1, #1
 8001a54:	440b      	add	r3, r1
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	70fb      	strb	r3, [r7, #3]

    	if (acorde){ //If chord mode is on...
 8001a5e:	4b44      	ldr	r3, [pc, #272]	; (8001b70 <inputNotes+0x158>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00c      	beq.n	8001a80 <inputNotes+0x68>
            lastSendNote[i] = makeChord(pressedNote, i); // saves the current chord config. on pressed note.
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fdd8 	bl	8000624 <makeChord>
 8001a74:	4601      	mov	r1, r0
 8001a76:	4a3f      	ldr	r2, [pc, #252]	; (8001b74 <inputNotes+0x15c>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001a7e:	e004      	b.n	8001a8a <inputNotes+0x72>

        }else{ //If chord mode is off...

            lastSendNote[i] = pressedNote; // saves nothing but pressed note.
 8001a80:	78fa      	ldrb	r2, [r7, #3]
 8001a82:	493c      	ldr	r1, [pc, #240]	; (8001b74 <inputNotes+0x15c>)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        } //end if acorde


        if (sustainMode == 1){ // If proprietary sustain mode on...
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <inputNotes+0x160>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d122      	bne.n	8001ad8 <inputNotes+0xc0>

			if (lastSustainNote != lastSendNote[i]){ // If last sustained note differs from the current pressed one...
 8001a92:	4a38      	ldr	r2, [pc, #224]	; (8001b74 <inputNotes+0x15c>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a9a:	4b38      	ldr	r3, [pc, #224]	; (8001b7c <inputNotes+0x164>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d010      	beq.n	8001ac4 <inputNotes+0xac>

				sendChord(lastSustainNote, 0, 1); // mute current chord. 0 in second param means "noteOff".
 8001aa2:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <inputNotes+0x164>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f9c4 	bl	8001e38 <sendChord>
				lastSustainNote = lastSendNote[i]; // and saves the current sustained note.
 8001ab0:	4a30      	ldr	r2, [pc, #192]	; (8001b74 <inputNotes+0x15c>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab8:	4a30      	ldr	r2, [pc, #192]	; (8001b7c <inputNotes+0x164>)
 8001aba:	6013      	str	r3, [r2, #0]
				sustainFlag = 1; // turn sustained note on
 8001abc:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <inputNotes+0x168>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]
 8001ac2:	e009      	b.n	8001ad8 <inputNotes+0xc0>

			}else{ // If last sustained note and the current pressed one are the same...

				sustainFlag = !sustainFlag; // turn sustained note off.
 8001ac4:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <inputNotes+0x168>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	bf0c      	ite	eq
 8001acc:	2301      	moveq	r3, #1
 8001ace:	2300      	movne	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <inputNotes+0x168>)
 8001ad6:	701a      	strb	r2, [r3, #0]

			}//end if lastSustainNote...
        }//end if sustainMode


        sendChord(lastSendNote[i], 127 * sustainFlag, 1); //send the appropriate midi message.
 8001ad8:	4a26      	ldr	r2, [pc, #152]	; (8001b74 <inputNotes+0x15c>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ae0:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <inputNotes+0x168>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	01db      	lsls	r3, r3, #7
 8001aea:	1a9b      	subs	r3, r3, r2
 8001aec:	2201      	movs	r2, #1
 8001aee:	4619      	mov	r1, r3
 8001af0:	f000 f9a2 	bl	8001e38 <sendChord>

        if (sustainFlag != 0){
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <inputNotes+0x168>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d004      	beq.n	8001b06 <inputNotes+0xee>
        	osc_setNote(pressedNote);
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fb76 	bl	80021f0 <osc_setNote>
 8001b04:	e020      	b.n	8001b48 <inputNotes+0x130>
        }else{
        	osc_setNote(0);
 8001b06:	2000      	movs	r0, #0
 8001b08:	f000 fb72 	bl	80021f0 <osc_setNote>
 8001b0c:	e01c      	b.n	8001b48 <inputNotes+0x130>
        }

    }else if(GETBUTTONSTATUS(teclas[i], buttonRise)){
 8001b0e:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <inputNotes+0x148>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	2301      	movs	r3, #1
 8001b1a:	4093      	lsls	r3, r2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <inputNotes+0x16c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00f      	beq.n	8001b48 <inputNotes+0x130>

    	if (sustainMode != 1){ // If proprietary sustain mode off...
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <inputNotes+0x160>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d00b      	beq.n	8001b48 <inputNotes+0x130>
			sendChord(lastSendNote[i], 0, 1); // 0 in second param means "noteOff".
 8001b30:	4a10      	ldr	r2, [pc, #64]	; (8001b74 <inputNotes+0x15c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 f97b 	bl	8001e38 <sendChord>
			osc_setNote(0); // turn DAC off.
 8001b42:	2000      	movs	r0, #0
 8001b44:	f000 fb54 	bl	80021f0 <osc_setNote>
  for (int i = 0; i <= 12; i++){
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b0c      	cmp	r3, #12
 8001b52:	f77f af67 	ble.w	8001a24 <inputNotes+0xc>
        }
    }

  }
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000078 	.word	0x20000078
 8001b64:	20000238 	.word	0x20000238
 8001b68:	20000284 	.word	0x20000284
 8001b6c:	200001bc 	.word	0x200001bc
 8001b70:	20000240 	.word	0x20000240
 8001b74:	200001fc 	.word	0x200001fc
 8001b78:	20000234 	.word	0x20000234
 8001b7c:	20000230 	.word	0x20000230
 8001b80:	2000006a 	.word	0x2000006a
 8001b84:	2000023c 	.word	0x2000023c

08001b88 <inputSaveChord>:


void inputSaveChord(void){
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0

uint8_t flag = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	71fb      	strb	r3, [r7, #7]

	for (int i = 0; i <= 12; i++){
 8001b92:	2300      	movs	r3, #0
 8001b94:	603b      	str	r3, [r7, #0]
 8001b96:	e024      	b.n	8001be2 <inputSaveChord+0x5a>

//		buttonState[i + IN_DO] = HAL_GPIO_ReadPin(notePort_list[i], notePin_list[i]);

//		if(!buttonState[i + IN_DO] && lastState[i + IN_DO]){       // If we read 1, and the last time we read 0, means button was just pressed
		if (GETBUTTONSTATUS(teclas[i], buttonFall)){
 8001b98:	4a1e      	ldr	r2, [pc, #120]	; (8001c14 <inputSaveChord+0x8c>)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	4093      	lsls	r3, r2
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <inputSaveChord+0x90>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d014      	beq.n	8001bdc <inputSaveChord+0x54>

			//storing the selected chord:
			setChord(i);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fd56 	bl	8000668 <setChord>
			footKey = NORMAL;
 8001bbc:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <inputSaveChord+0x94>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
			screenNum = POPUP_SAVED_CHORD;
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <inputSaveChord+0x98>)
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN; 				//return point to chordSelect().
 8001bc8:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <inputSaveChord+0x9c>)
 8001bca:	2204      	movs	r2, #4
 8001bcc:	701a      	strb	r2, [r3, #0]
			lastKey_pos = i; 					// to show in screen the foot key pressed.
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <inputSaveChord+0xa0>)
 8001bd4:	701a      	strb	r2, [r3, #0]
			flag = 1;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	71fb      	strb	r3, [r7, #7]
			break; 								 //it must exit from function.
 8001bda:	e005      	b.n	8001be8 <inputSaveChord+0x60>
	for (int i = 0; i <= 12; i++){
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	603b      	str	r3, [r7, #0]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	2b0c      	cmp	r3, #12
 8001be6:	ddd7      	ble.n	8001b98 <inputSaveChord+0x10>
		} //end if getStatusButton
	} //end for

	if (!flag){
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10e      	bne.n	8001c0c <inputSaveChord+0x84>


		if (GETBUTTONSTATUS(IN_LEFT, buttonFall)){
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <inputSaveChord+0x90>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d008      	beq.n	8001c0c <inputSaveChord+0x84>
			footKey = NORMAL;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <inputSaveChord+0x94>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
			screenNum = POPUP_CANCEL;
 8001c00:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <inputSaveChord+0x98>)
 8001c02:	220b      	movs	r2, #11
 8001c04:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN;
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <inputSaveChord+0x9c>)
 8001c08:	2204      	movs	r2, #4
 8001c0a:	701a      	strb	r2, [r3, #0]
		}
	} //end if !flag

} //end inputSaveChord()
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000078 	.word	0x20000078
 8001c18:	20000238 	.word	0x20000238
 8001c1c:	20000249 	.word	0x20000249
 8001c20:	20000241 	.word	0x20000241
 8001c24:	20000085 	.word	0x20000085
 8001c28:	200005f4 	.word	0x200005f4

08001c2c <chordSelect>:

void chordSelect(void){
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0

  uint8_t flag = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	71fb      	strb	r3, [r7, #7]

  switch (chordSelect_cursor){
 8001c36:	4b58      	ldr	r3, [pc, #352]	; (8001d98 <chordSelect+0x16c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d03a      	beq.n	8001cb4 <chordSelect+0x88>
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d302      	bcc.n	8001c48 <chordSelect+0x1c>
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d079      	beq.n	8001d3a <chordSelect+0x10e>
 8001c46:	e09a      	b.n	8001d7e <chordSelect+0x152>

		case 0:

			if (GETBUTTONSTATUS(IN_DOWN, buttonFall)){
 8001c48:	4b54      	ldr	r3, [pc, #336]	; (8001d9c <chordSelect+0x170>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d006      	beq.n	8001c62 <chordSelect+0x36>
				chordSelect_cursor++;
 8001c54:	4b50      	ldr	r3, [pc, #320]	; (8001d98 <chordSelect+0x16c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	4a4f      	ldr	r2, [pc, #316]	; (8001d98 <chordSelect+0x16c>)
 8001c5c:	6013      	str	r3, [r2, #0]
				flag = 1;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_LEFT, buttonFall)){
 8001c62:	4b4e      	ldr	r3, [pc, #312]	; (8001d9c <chordSelect+0x170>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00d      	beq.n	8001c8a <chordSelect+0x5e>
				chord--;
 8001c6e:	4b4c      	ldr	r3, [pc, #304]	; (8001da0 <chordSelect+0x174>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	4a4a      	ldr	r2, [pc, #296]	; (8001da0 <chordSelect+0x174>)
 8001c76:	6013      	str	r3, [r2, #0]
				if (chord < 0)
 8001c78:	4b49      	ldr	r3, [pc, #292]	; (8001da0 <chordSelect+0x174>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	da02      	bge.n	8001c86 <chordSelect+0x5a>
					chord = 7;
 8001c80:	4b47      	ldr	r3, [pc, #284]	; (8001da0 <chordSelect+0x174>)
 8001c82:	2207      	movs	r2, #7
 8001c84:	601a      	str	r2, [r3, #0]
				flag = 1;
 8001c86:	2301      	movs	r3, #1
 8001c88:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_RIGHT, buttonFall)){
 8001c8a:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <chordSelect+0x170>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d06e      	beq.n	8001d74 <chordSelect+0x148>
				chord++;
 8001c96:	4b42      	ldr	r3, [pc, #264]	; (8001da0 <chordSelect+0x174>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	4a40      	ldr	r2, [pc, #256]	; (8001da0 <chordSelect+0x174>)
 8001c9e:	6013      	str	r3, [r2, #0]
				if (chord > 7)
 8001ca0:	4b3f      	ldr	r3, [pc, #252]	; (8001da0 <chordSelect+0x174>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b07      	cmp	r3, #7
 8001ca6:	dd02      	ble.n	8001cae <chordSelect+0x82>
					chord = 0;
 8001ca8:	4b3d      	ldr	r3, [pc, #244]	; (8001da0 <chordSelect+0x174>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
				flag = 1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	71fb      	strb	r3, [r7, #7]
			}

		break;
 8001cb2:	e05f      	b.n	8001d74 <chordSelect+0x148>
		case 1:

			if (GETBUTTONSTATUS(IN_UP, buttonFall)){
 8001cb4:	4b39      	ldr	r3, [pc, #228]	; (8001d9c <chordSelect+0x170>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <chordSelect+0xa2>
				chordSelect_cursor--;
 8001cc0:	4b35      	ldr	r3, [pc, #212]	; (8001d98 <chordSelect+0x16c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	4a34      	ldr	r2, [pc, #208]	; (8001d98 <chordSelect+0x16c>)
 8001cc8:	6013      	str	r3, [r2, #0]
				flag = 1;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_DOWN, buttonFall)){
 8001cce:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <chordSelect+0x170>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <chordSelect+0xbc>
				chordSelect_cursor++;
 8001cda:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <chordSelect+0x16c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	4a2d      	ldr	r2, [pc, #180]	; (8001d98 <chordSelect+0x16c>)
 8001ce2:	6013      	str	r3, [r2, #0]
				flag = 1;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_LEFT, buttonFall)){
 8001ce8:	4b2c      	ldr	r3, [pc, #176]	; (8001d9c <chordSelect+0x170>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00d      	beq.n	8001d10 <chordSelect+0xe4>
				chordInv--;
 8001cf4:	4b2b      	ldr	r3, [pc, #172]	; (8001da4 <chordSelect+0x178>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	4a2a      	ldr	r2, [pc, #168]	; (8001da4 <chordSelect+0x178>)
 8001cfc:	6013      	str	r3, [r2, #0]
				if (chordInv < 0)
 8001cfe:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <chordSelect+0x178>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	da02      	bge.n	8001d0c <chordSelect+0xe0>
					chordInv = 2;
 8001d06:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <chordSelect+0x178>)
 8001d08:	2202      	movs	r2, #2
 8001d0a:	601a      	str	r2, [r3, #0]
				flag = 1;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_RIGHT, buttonFall)){
 8001d10:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <chordSelect+0x170>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0320 	and.w	r3, r3, #32
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d02d      	beq.n	8001d78 <chordSelect+0x14c>
				chordInv++;
 8001d1c:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <chordSelect+0x178>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	3301      	adds	r3, #1
 8001d22:	4a20      	ldr	r2, [pc, #128]	; (8001da4 <chordSelect+0x178>)
 8001d24:	6013      	str	r3, [r2, #0]
				if (chordInv > 2)
 8001d26:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <chordSelect+0x178>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	dd02      	ble.n	8001d34 <chordSelect+0x108>
					chordInv = 0;
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <chordSelect+0x178>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
				flag = 1;
 8001d34:	2301      	movs	r3, #1
 8001d36:	71fb      	strb	r3, [r7, #7]
			}

		break;
 8001d38:	e01e      	b.n	8001d78 <chordSelect+0x14c>
		case 2:

			if (GETBUTTONSTATUS(IN_UP, buttonFall)){
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <chordSelect+0x170>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d006      	beq.n	8001d54 <chordSelect+0x128>
				chordSelect_cursor--;
 8001d46:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <chordSelect+0x16c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <chordSelect+0x16c>)
 8001d4e:	6013      	str	r3, [r2, #0]
				flag = 1;
 8001d50:	2301      	movs	r3, #1
 8001d52:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_RIGHT, buttonFall)){
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <chordSelect+0x170>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0320 	and.w	r3, r3, #32
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00d      	beq.n	8001d7c <chordSelect+0x150>
				footKey = SAVE_CHORD; //
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <chordSelect+0x17c>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
				menu = RECUEST_FOOTKEY_SCREEN;
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <chordSelect+0x180>)
 8001d68:	2207      	movs	r2, #7
 8001d6a:	701a      	strb	r2, [r3, #0]
				screenNum = RECUEST_FOOTKEY_SCREEN;
 8001d6c:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <chordSelect+0x184>)
 8001d6e:	2207      	movs	r2, #7
 8001d70:	701a      	strb	r2, [r3, #0]
			}

		break;
 8001d72:	e003      	b.n	8001d7c <chordSelect+0x150>
		break;
 8001d74:	bf00      	nop
 8001d76:	e002      	b.n	8001d7e <chordSelect+0x152>
		break;
 8001d78:	bf00      	nop
 8001d7a:	e000      	b.n	8001d7e <chordSelect+0x152>
		break;
 8001d7c:	bf00      	nop
	} //fin switch chordSelect_cursor

  if (flag){        ///flag de impresion
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <chordSelect+0x15e>

      screenNum = CHORD_SCREEN;
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <chordSelect+0x184>)
 8001d86:	2204      	movs	r2, #4
 8001d88:	701a      	strb	r2, [r3, #0]
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000280 	.word	0x20000280
 8001d9c:	20000238 	.word	0x20000238
 8001da0:	20000288 	.word	0x20000288
 8001da4:	2000028c 	.word	0x2000028c
 8001da8:	20000249 	.word	0x20000249
 8001dac:	20000085 	.word	0x20000085
 8001db0:	20000241 	.word	0x20000241

08001db4 <tunneSelect>:


void tunneSelect(void){
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
	uint8_t flag = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	71fb      	strb	r3, [r7, #7]

	if (GETBUTTONSTATUS(IN_LEFT, buttonFall)){
 8001dbe:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <tunneSelect+0x78>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00e      	beq.n	8001de8 <tunneSelect+0x34>
		firstDoTunning--;
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <tunneSelect+0x7c>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <tunneSelect+0x7c>)
 8001dd4:	701a      	strb	r2, [r3, #0]
		if (firstDoTunning < MIDI_C2)
 8001dd6:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <tunneSelect+0x7c>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b23      	cmp	r3, #35	; 0x23
 8001ddc:	d802      	bhi.n	8001de4 <tunneSelect+0x30>
			firstDoTunning = MIDI_B2;
 8001dde:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <tunneSelect+0x7c>)
 8001de0:	222f      	movs	r2, #47	; 0x2f
 8001de2:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8001de4:	2301      	movs	r3, #1
 8001de6:	71fb      	strb	r3, [r7, #7]
	}
	if (GETBUTTONSTATUS(IN_RIGHT, buttonFall)){
 8001de8:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <tunneSelect+0x78>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00e      	beq.n	8001e12 <tunneSelect+0x5e>
		firstDoTunning++;
 8001df4:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <tunneSelect+0x7c>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <tunneSelect+0x7c>)
 8001dfe:	701a      	strb	r2, [r3, #0]
		if (firstDoTunning >MIDI_B2)
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <tunneSelect+0x7c>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b2f      	cmp	r3, #47	; 0x2f
 8001e06:	d902      	bls.n	8001e0e <tunneSelect+0x5a>
			firstDoTunning = MIDI_C2;
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <tunneSelect+0x7c>)
 8001e0a:	2224      	movs	r2, #36	; 0x24
 8001e0c:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	71fb      	strb	r3, [r7, #7]
	}

	if (flag){
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <tunneSelect+0x6a>
		screenNum = TUNNE_SCREEN;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <tunneSelect+0x80>)
 8001e1a:	2205      	movs	r2, #5
 8001e1c:	701a      	strb	r2, [r3, #0]
	}
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000238 	.word	0x20000238
 8001e30:	20000284 	.word	0x20000284
 8001e34:	20000241 	.word	0x20000241

08001e38 <sendChord>:


void sendChord(unsigned long bnotes, int velocity, int channel){
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]

  uint8_t note1;
  uint8_t note2;
  uint8_t note3;

  note1 = (bnotes & 0x7f);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e4c:	75fb      	strb	r3, [r7, #23]
  note2 = (bnotes >> 8) & 0x7f;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e58:	75bb      	strb	r3, [r7, #22]
  note3 = (bnotes >> 16) & 0x7f;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	0c1b      	lsrs	r3, r3, #16
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e64:	757b      	strb	r3, [r7, #21]

  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001e66:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <sendChord+0xa8>)
 8001e68:	2209      	movs	r2, #9
 8001e6a:	701a      	strb	r2, [r3, #0]
  midi_msg[1] = 0x90 | 1;
 8001e6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <sendChord+0xa8>)
 8001e6e:	2291      	movs	r2, #145	; 0x91
 8001e70:	705a      	strb	r2, [r3, #1]
  midi_msg[2] = note1;
 8001e72:	4a1b      	ldr	r2, [pc, #108]	; (8001ee0 <sendChord+0xa8>)
 8001e74:	7dfb      	ldrb	r3, [r7, #23]
 8001e76:	7093      	strb	r3, [r2, #2]
  midi_msg[3] = velocity;
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <sendChord+0xa8>)
 8001e7e:	70da      	strb	r2, [r3, #3]
  MIDI_SendBuffer(midi_msg, 4);
 8001e80:	2104      	movs	r1, #4
 8001e82:	4817      	ldr	r0, [pc, #92]	; (8001ee0 <sendChord+0xa8>)
 8001e84:	f009 ff9a 	bl	800bdbc <MIDI_SendBuffer>

  if (note2 && note3){
 8001e88:	7dbb      	ldrb	r3, [r7, #22]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d024      	beq.n	8001ed8 <sendChord+0xa0>
 8001e8e:	7d7b      	ldrb	r3, [r7, #21]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d021      	beq.n	8001ed8 <sendChord+0xa0>

	  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <sendChord+0xa8>)
 8001e96:	2209      	movs	r2, #9
 8001e98:	701a      	strb	r2, [r3, #0]
	  midi_msg[1] = 0x90 | 1;
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <sendChord+0xa8>)
 8001e9c:	2291      	movs	r2, #145	; 0x91
 8001e9e:	705a      	strb	r2, [r3, #1]
	  midi_msg[2] = note2;
 8001ea0:	4a0f      	ldr	r2, [pc, #60]	; (8001ee0 <sendChord+0xa8>)
 8001ea2:	7dbb      	ldrb	r3, [r7, #22]
 8001ea4:	7093      	strb	r3, [r2, #2]
	  midi_msg[3] = velocity;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <sendChord+0xa8>)
 8001eac:	70da      	strb	r2, [r3, #3]
	  MIDI_SendBuffer(midi_msg, 4);
 8001eae:	2104      	movs	r1, #4
 8001eb0:	480b      	ldr	r0, [pc, #44]	; (8001ee0 <sendChord+0xa8>)
 8001eb2:	f009 ff83 	bl	800bdbc <MIDI_SendBuffer>

	  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <sendChord+0xa8>)
 8001eb8:	2209      	movs	r2, #9
 8001eba:	701a      	strb	r2, [r3, #0]
	  midi_msg[1] = 0x90 | 1;
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <sendChord+0xa8>)
 8001ebe:	2291      	movs	r2, #145	; 0x91
 8001ec0:	705a      	strb	r2, [r3, #1]
	  midi_msg[2] = note3;
 8001ec2:	4a07      	ldr	r2, [pc, #28]	; (8001ee0 <sendChord+0xa8>)
 8001ec4:	7d7b      	ldrb	r3, [r7, #21]
 8001ec6:	7093      	strb	r3, [r2, #2]
	  midi_msg[3] = velocity;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <sendChord+0xa8>)
 8001ece:	70da      	strb	r2, [r3, #3]
	  MIDI_SendBuffer(midi_msg, 4);
 8001ed0:	2104      	movs	r1, #4
 8001ed2:	4803      	ldr	r0, [pc, #12]	; (8001ee0 <sendChord+0xa8>)
 8001ed4:	f009 ff72 	bl	800bdbc <MIDI_SendBuffer>
  }
} //fin sendChord()
 8001ed8:	bf00      	nop
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	200005fc 	.word	0x200005fc

08001ee4 <showLeds>:


void showLeds(void){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0

	uint16_t demora = 50;
 8001eea:	2332      	movs	r3, #50	; 0x32
 8001eec:	82bb      	strh	r3, [r7, #20]
	uint8_t posLed[] = {	LED_OCT_G,
 8001eee:	4a51      	ldr	r2, [pc, #324]	; (8002034 <showLeds+0x150>)
 8001ef0:	f107 0308 	add.w	r3, r7, #8
 8001ef4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ef6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
							LED_PS5,
							LED_SUST_P,
							LED_SUST_M,
							LED_CHORD };

	uint16_t indexLed = 0x1 << LED_OCT_G;
 8001efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001efe:	80fb      	strh	r3, [r7, #6]
	indexLed = ~indexLed;
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	80fb      	strh	r3, [r7, #6]
	spi_74HC595_Transmit((uint8_t *)&indexLed, 2/*bytes*/);
 8001f08:	1dbb      	adds	r3, r7, #6
 8001f0a:	2102      	movs	r1, #2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fb61 	bl	80005d4 <spi_74HC595_Transmit>
	HAL_Delay(demora);
 8001f12:	8abb      	ldrh	r3, [r7, #20]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 fd35 	bl	8002984 <HAL_Delay>

	indexLed = (0x1 << posLed[0]) | (0x1 << posLed[1]);
 8001f1a:	7a3b      	ldrb	r3, [r7, #8]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	2301      	movs	r3, #1
 8001f20:	4093      	lsls	r3, r2
 8001f22:	b21a      	sxth	r2, r3
 8001f24:	7a7b      	ldrb	r3, [r7, #9]
 8001f26:	4619      	mov	r1, r3
 8001f28:	2301      	movs	r3, #1
 8001f2a:	408b      	lsls	r3, r1
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	b21b      	sxth	r3, r3
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	80fb      	strh	r3, [r7, #6]
	indexLed = ~indexLed;
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	80fb      	strh	r3, [r7, #6]
	spi_74HC595_Transmit((uint8_t *)&indexLed, 2/*bytes*/);
 8001f3e:	1dbb      	adds	r3, r7, #6
 8001f40:	2102      	movs	r1, #2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fb46 	bl	80005d4 <spi_74HC595_Transmit>
	HAL_Delay(demora);
 8001f48:	8abb      	ldrh	r3, [r7, #20]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fd1a 	bl	8002984 <HAL_Delay>

	for (uint8_t i=0; i<10; i++){
 8001f50:	2300      	movs	r3, #0
 8001f52:	75fb      	strb	r3, [r7, #23]
 8001f54:	e035      	b.n	8001fc2 <showLeds+0xde>
		indexLed = (0x1 << posLed[i]) | (0x1 << posLed[i + 1]) | (0x1 << posLed[i + 2]);
 8001f56:	7dfb      	ldrb	r3, [r7, #23]
 8001f58:	f107 0218 	add.w	r2, r7, #24
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001f62:	461a      	mov	r2, r3
 8001f64:	2301      	movs	r3, #1
 8001f66:	4093      	lsls	r3, r2
 8001f68:	b21a      	sxth	r2, r3
 8001f6a:	7dfb      	ldrb	r3, [r7, #23]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f107 0118 	add.w	r1, r7, #24
 8001f72:	440b      	add	r3, r1
 8001f74:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	408b      	lsls	r3, r1
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	4313      	orrs	r3, r2
 8001f82:	b21a      	sxth	r2, r3
 8001f84:	7dfb      	ldrb	r3, [r7, #23]
 8001f86:	3302      	adds	r3, #2
 8001f88:	f107 0118 	add.w	r1, r7, #24
 8001f8c:	440b      	add	r3, r1
 8001f8e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001f92:	4619      	mov	r1, r3
 8001f94:	2301      	movs	r3, #1
 8001f96:	408b      	lsls	r3, r1
 8001f98:	b21b      	sxth	r3, r3
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	80fb      	strh	r3, [r7, #6]
		indexLed = ~indexLed;
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	80fb      	strh	r3, [r7, #6]
		spi_74HC595_Transmit((uint8_t *)&indexLed, 2/*bytes*/);
 8001faa:	1dbb      	adds	r3, r7, #6
 8001fac:	2102      	movs	r1, #2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fb10 	bl	80005d4 <spi_74HC595_Transmit>
		HAL_Delay(demora);
 8001fb4:	8abb      	ldrh	r3, [r7, #20]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 fce4 	bl	8002984 <HAL_Delay>
	for (uint8_t i=0; i<10; i++){
 8001fbc:	7dfb      	ldrb	r3, [r7, #23]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	75fb      	strb	r3, [r7, #23]
 8001fc2:	7dfb      	ldrb	r3, [r7, #23]
 8001fc4:	2b09      	cmp	r3, #9
 8001fc6:	d9c6      	bls.n	8001f56 <showLeds+0x72>
	}

	indexLed = (0x1 << posLed[10]) | (0x1 << posLed[11]);
 8001fc8:	7cbb      	ldrb	r3, [r7, #18]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	2301      	movs	r3, #1
 8001fce:	4093      	lsls	r3, r2
 8001fd0:	b21a      	sxth	r2, r3
 8001fd2:	7cfb      	ldrb	r3, [r7, #19]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	408b      	lsls	r3, r1
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	b21b      	sxth	r3, r3
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	80fb      	strh	r3, [r7, #6]
	indexLed = ~indexLed;
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	80fb      	strh	r3, [r7, #6]
	spi_74HC595_Transmit((uint8_t *)&indexLed, 2/*bytes*/);
 8001fec:	1dbb      	adds	r3, r7, #6
 8001fee:	2102      	movs	r1, #2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe faef 	bl	80005d4 <spi_74HC595_Transmit>
	HAL_Delay(demora);
 8001ff6:	8abb      	ldrh	r3, [r7, #20]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fcc3 	bl	8002984 <HAL_Delay>

	indexLed = 0x1 << LED_CHORD;
 8001ffe:	2308      	movs	r3, #8
 8002000:	80fb      	strh	r3, [r7, #6]
	indexLed = ~indexLed;
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	43db      	mvns	r3, r3
 8002006:	b29b      	uxth	r3, r3
 8002008:	80fb      	strh	r3, [r7, #6]
	spi_74HC595_Transmit((uint8_t *)&indexLed, 2/*bytes*/);
 800200a:	1dbb      	adds	r3, r7, #6
 800200c:	2102      	movs	r1, #2
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fae0 	bl	80005d4 <spi_74HC595_Transmit>
	HAL_Delay(demora);
 8002014:	8abb      	ldrh	r3, [r7, #20]
 8002016:	4618      	mov	r0, r3
 8002018:	f000 fcb4 	bl	8002984 <HAL_Delay>

	indexLed = 0xFFFF;
 800201c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002020:	80fb      	strh	r3, [r7, #6]
	spi_74HC595_Transmit((uint8_t *)&indexLed, 2/*bytes*/);
 8002022:	1dbb      	adds	r3, r7, #6
 8002024:	2102      	movs	r1, #2
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fad4 	bl	80005d4 <spi_74HC595_Transmit>
}
 800202c:	bf00      	nop
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	0800c664 	.word	0x0800c664

08002038 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){ // dac
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d103      	bne.n	8002052 <HAL_TIM_PeriodElapsedCallback+0x1a>
		flag_dac = 1;
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800204c:	2201      	movs	r2, #1
 800204e:	701a      	strb	r2, [r3, #0]
	}else if (htim->Instance == TIM2){ //tick
		flag_tick = 1;
	}

}
 8002050:	e007      	b.n	8002062 <HAL_TIM_PeriodElapsedCallback+0x2a>
	}else if (htim->Instance == TIM2){ //tick
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205a:	d102      	bne.n	8002062 <HAL_TIM_PeriodElapsedCallback+0x2a>
		flag_tick = 1;
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40000400 	.word	0x40000400
 8002074:	2000024b 	.word	0x2000024b
 8002078:	2000024a 	.word	0x2000024a

0800207c <HAL_I2C_MasterTxCpltCallback>:


void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c){
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
	_lcd_ISR();
 8002084:	f7ff f8ac 	bl	80011e0 <_lcd_ISR>
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <osc_dac_init>:
uint8_t ratio_sen = 100;
uint8_t ratio_cuad = 100;
uint8_t ratio_ramp = 100;


void osc_dac_init(DAC_HandleTypeDef *p_hdac, uint32_t ch){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
	handler_dac = p_hdac;
 80020aa:	4a09      	ldr	r2, [pc, #36]	; (80020d0 <osc_dac_init+0x30>)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6013      	str	r3, [r2, #0]
	dac_ch = ch;
 80020b0:	4a08      	ldr	r2, [pc, #32]	; (80020d4 <osc_dac_init+0x34>)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	6013      	str	r3, [r2, #0]

	HAL_DAC_Start(handler_dac, dac_ch);
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <osc_dac_init+0x30>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <osc_dac_init+0x34>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4619      	mov	r1, r3
 80020c0:	4610      	mov	r0, r2
 80020c2:	f001 f816 	bl	80030f2 <HAL_DAC_Start>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000608 	.word	0x20000608
 80020d4:	20000604 	.word	0x20000604

080020d8 <osc_dac_update>:

//must be handled with a 44100 Hz timer.
void osc_dac_update(void){
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0

	if (nota_activa!=-1){
 80020dc:	4b37      	ldr	r3, [pc, #220]	; (80021bc <osc_dac_update+0xe4>)
 80020de:	f993 3000 	ldrsb.w	r3, [r3]
 80020e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020e6:	d057      	beq.n	8002198 <osc_dac_update+0xc0>
		phase+= nota_incrFase[nota_activa];
 80020e8:	4b34      	ldr	r3, [pc, #208]	; (80021bc <osc_dac_update+0xe4>)
 80020ea:	f993 3000 	ldrsb.w	r3, [r3]
 80020ee:	461a      	mov	r2, r3
 80020f0:	4b33      	ldr	r3, [pc, #204]	; (80021c0 <osc_dac_update+0xe8>)
 80020f2:	5c9b      	ldrb	r3, [r3, r2]
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	4b33      	ldr	r3, [pc, #204]	; (80021c4 <osc_dac_update+0xec>)
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <osc_dac_update+0xec>)
 8002100:	801a      	strh	r2, [r3, #0]
		if (phase>OSC_LAST) phase -= OSC_LAST;
 8002102:	4b30      	ldr	r3, [pc, #192]	; (80021c4 <osc_dac_update+0xec>)
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	f244 520a 	movw	r2, #17674	; 0x450a
 800210a:	4293      	cmp	r3, r2
 800210c:	d907      	bls.n	800211e <osc_dac_update+0x46>
 800210e:	4b2d      	ldr	r3, [pc, #180]	; (80021c4 <osc_dac_update+0xec>)
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	f5a3 438a 	sub.w	r3, r3, #17664	; 0x4500
 8002116:	3b0a      	subs	r3, #10
 8002118:	b29a      	uxth	r2, r3
 800211a:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <osc_dac_update+0xec>)
 800211c:	801a      	strh	r2, [r3, #0]
		dac_out = ratio_sen/100*tabla_seno[phase] + ratio_cuad/100*tabla_cuadrada[phase] + ratio_ramp/100*tabla_sierra[phase];
 800211e:	4b2a      	ldr	r3, [pc, #168]	; (80021c8 <osc_dac_update+0xf0>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	4a2a      	ldr	r2, [pc, #168]	; (80021cc <osc_dac_update+0xf4>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	095b      	lsrs	r3, r3, #5
 800212a:	b2db      	uxtb	r3, r3
 800212c:	b29a      	uxth	r2, r3
 800212e:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <osc_dac_update+0xec>)
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	4619      	mov	r1, r3
 8002134:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <osc_dac_update+0xf8>)
 8002136:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800213a:	b29b      	uxth	r3, r3
 800213c:	fb12 f303 	smulbb	r3, r2, r3
 8002140:	b29a      	uxth	r2, r3
 8002142:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <osc_dac_update+0xfc>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	4921      	ldr	r1, [pc, #132]	; (80021cc <osc_dac_update+0xf4>)
 8002148:	fba1 1303 	umull	r1, r3, r1, r3
 800214c:	095b      	lsrs	r3, r3, #5
 800214e:	b2db      	uxtb	r3, r3
 8002150:	b299      	uxth	r1, r3
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <osc_dac_update+0xec>)
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <osc_dac_update+0x100>)
 800215a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800215e:	b29b      	uxth	r3, r3
 8002160:	fb11 f303 	smulbb	r3, r1, r3
 8002164:	b29b      	uxth	r3, r3
 8002166:	4413      	add	r3, r2
 8002168:	b29a      	uxth	r2, r3
 800216a:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <osc_dac_update+0x104>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	4917      	ldr	r1, [pc, #92]	; (80021cc <osc_dac_update+0xf4>)
 8002170:	fba1 1303 	umull	r1, r3, r1, r3
 8002174:	095b      	lsrs	r3, r3, #5
 8002176:	b2db      	uxtb	r3, r3
 8002178:	b299      	uxth	r1, r3
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <osc_dac_update+0xec>)
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <osc_dac_update+0x108>)
 8002182:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002186:	b29b      	uxth	r3, r3
 8002188:	fb11 f303 	smulbb	r3, r1, r3
 800218c:	b29b      	uxth	r3, r3
 800218e:	4413      	add	r3, r2
 8002190:	b29a      	uxth	r2, r3
 8002192:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <osc_dac_update+0x10c>)
 8002194:	801a      	strh	r2, [r3, #0]
 8002196:	e005      	b.n	80021a4 <osc_dac_update+0xcc>
		//HAL_DAC_SetValue(handler_dac, dac_ch, DAC_ALIGN_12B_R, dac_out);
	}else{
		phase = 0;
 8002198:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <osc_dac_update+0xec>)
 800219a:	2200      	movs	r2, #0
 800219c:	801a      	strh	r2, [r3, #0]
		dac_out = 0;
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <osc_dac_update+0x10c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	801a      	strh	r2, [r3, #0]
	}

	HAL_DAC_SetValue(handler_dac, dac_ch, DAC_ALIGN_12B_R, dac_out);
 80021a4:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <osc_dac_update+0x110>)
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	4b10      	ldr	r3, [pc, #64]	; (80021ec <osc_dac_update+0x114>)
 80021aa:	6819      	ldr	r1, [r3, #0]
 80021ac:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <osc_dac_update+0x10c>)
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f001 f851 	bl	8003258 <HAL_DAC_SetValue>

//	flag_dac = 0;
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000088 	.word	0x20000088
 80021c0:	08040368 	.word	0x08040368
 80021c4:	2000024c 	.word	0x2000024c
 80021c8:	20000089 	.word	0x20000089
 80021cc:	51eb851f 	.word	0x51eb851f
 80021d0:	0800c6e4 	.word	0x0800c6e4
 80021d4:	2000008a 	.word	0x2000008a
 80021d8:	0801db10 	.word	0x0801db10
 80021dc:	2000008b 	.word	0x2000008b
 80021e0:	0802ef3c 	.word	0x0802ef3c
 80021e4:	2000024e 	.word	0x2000024e
 80021e8:	20000608 	.word	0x20000608
 80021ec:	20000604 	.word	0x20000604

080021f0 <osc_setNote>:


int8_t osc_setNote (uint8_t nn){
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]

	if (!nn){
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d104      	bne.n	800220a <osc_setNote+0x1a>
		nota_activa = -1;
 8002200:	4b0d      	ldr	r3, [pc, #52]	; (8002238 <osc_setNote+0x48>)
 8002202:	22ff      	movs	r2, #255	; 0xff
 8002204:	701a      	strb	r2, [r3, #0]
		return 0;
 8002206:	2300      	movs	r3, #0
 8002208:	e00f      	b.n	800222a <osc_setNote+0x3a>
	}

	if(nn<24 || nn>60){
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	2b17      	cmp	r3, #23
 800220e:	d902      	bls.n	8002216 <osc_setNote+0x26>
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	2b3c      	cmp	r3, #60	; 0x3c
 8002214:	d902      	bls.n	800221c <osc_setNote+0x2c>
		return -1;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800221a:	e006      	b.n	800222a <osc_setNote+0x3a>
	}

	nota_activa = nn - NOTA_C1;
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	3b18      	subs	r3, #24
 8002220:	b2db      	uxtb	r3, r3
 8002222:	b25a      	sxtb	r2, r3
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <osc_setNote+0x48>)
 8002226:	701a      	strb	r2, [r3, #0]
	return 0;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000088 	.word	0x20000088

0800223c <osc_setRatios>:

int8_t osc_setRatios(uint8_t rsen, uint8_t rcuad, uint8_t rsier){
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
 8002246:	460b      	mov	r3, r1
 8002248:	71bb      	strb	r3, [r7, #6]
 800224a:	4613      	mov	r3, r2
 800224c:	717b      	strb	r3, [r7, #5]

	if (rsen > 100 || rcuad > 100 || rsier > 100){
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	2b64      	cmp	r3, #100	; 0x64
 8002252:	d805      	bhi.n	8002260 <osc_setRatios+0x24>
 8002254:	79bb      	ldrb	r3, [r7, #6]
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d802      	bhi.n	8002260 <osc_setRatios+0x24>
 800225a:	797b      	ldrb	r3, [r7, #5]
 800225c:	2b64      	cmp	r3, #100	; 0x64
 800225e:	d902      	bls.n	8002266 <osc_setRatios+0x2a>
		return -1;
 8002260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002264:	e009      	b.n	800227a <osc_setRatios+0x3e>
	}

	ratio_sen = rsen; ratio_cuad = rcuad; ratio_ramp = rsier;
 8002266:	4a08      	ldr	r2, [pc, #32]	; (8002288 <osc_setRatios+0x4c>)
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	7013      	strb	r3, [r2, #0]
 800226c:	4a07      	ldr	r2, [pc, #28]	; (800228c <osc_setRatios+0x50>)
 800226e:	79bb      	ldrb	r3, [r7, #6]
 8002270:	7013      	strb	r3, [r2, #0]
 8002272:	4a07      	ldr	r2, [pc, #28]	; (8002290 <osc_setRatios+0x54>)
 8002274:	797b      	ldrb	r3, [r7, #5]
 8002276:	7013      	strb	r3, [r2, #0]
	return 0;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000089 	.word	0x20000089
 800228c:	2000008a 	.word	0x2000008a
 8002290:	2000008b 	.word	0x2000008b

08002294 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002298:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <MX_SPI1_Init+0x64>)
 800229a:	4a18      	ldr	r2, [pc, #96]	; (80022fc <MX_SPI1_Init+0x68>)
 800229c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800229e:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022a6:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80022c6:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022c8:	2220      	movs	r2, #32
 80022ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d8:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022da:	2200      	movs	r2, #0
 80022dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022e0:	220a      	movs	r2, #10
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022e4:	4804      	ldr	r0, [pc, #16]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022e6:	f005 f879 	bl	80073dc <HAL_SPI_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80022f0:	f7ff fece 	bl	8002090 <Error_Handler>
  }

}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	2000060c 	.word	0x2000060c
 80022fc:	40013000 	.word	0x40013000

08002300 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <HAL_SPI_MspInit+0x94>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d133      	bne.n	800238a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <HAL_SPI_MspInit+0x98>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <HAL_SPI_MspInit+0x98>)
 800232c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_SPI_MspInit+0x98>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_SPI_MspInit+0x98>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a14      	ldr	r2, [pc, #80]	; (8002398 <HAL_SPI_MspInit+0x98>)
 8002348:	f043 0302 	orr.w	r3, r3, #2
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_SPI_MspInit+0x98>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800235a:	2338      	movs	r3, #56	; 0x38
 800235c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800236a:	2305      	movs	r3, #5
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	4619      	mov	r1, r3
 8002374:	4809      	ldr	r0, [pc, #36]	; (800239c <HAL_SPI_MspInit+0x9c>)
 8002376:	f000 ffc5 	bl	8003304 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800237a:	2200      	movs	r2, #0
 800237c:	2100      	movs	r1, #0
 800237e:	2023      	movs	r0, #35	; 0x23
 8002380:	f000 fe5f 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002384:	2023      	movs	r0, #35	; 0x23
 8002386:	f000 fe78 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800238a:	bf00      	nop
 800238c:	3728      	adds	r7, #40	; 0x28
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40013000 	.word	0x40013000
 8002398:	40023800 	.word	0x40023800
 800239c:	40020400 	.word	0x40020400

080023a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <HAL_MspInit+0x4c>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4a0f      	ldr	r2, [pc, #60]	; (80023ec <HAL_MspInit+0x4c>)
 80023b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b4:	6453      	str	r3, [r2, #68]	; 0x44
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <HAL_MspInit+0x4c>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023be:	607b      	str	r3, [r7, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	603b      	str	r3, [r7, #0]
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_MspInit+0x4c>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a08      	ldr	r2, [pc, #32]	; (80023ec <HAL_MspInit+0x4c>)
 80023cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_MspInit+0x4c>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023de:	2007      	movs	r0, #7
 80023e0:	f000 fe24 	bl	800302c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800

080023f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002402:	e7fe      	b.n	8002402 <HardFault_Handler+0x4>

08002404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002408:	e7fe      	b.n	8002408 <MemManage_Handler+0x4>

0800240a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800240e:	e7fe      	b.n	800240e <BusFault_Handler+0x4>

08002410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002414:	e7fe      	b.n	8002414 <UsageFault_Handler+0x4>

08002416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002444:	f000 fa7e 	bl	8002944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}

0800244c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <TIM2_IRQHandler+0x10>)
 8002452:	f005 fe86 	bl	8008162 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	200006a4 	.word	0x200006a4

08002460 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <TIM3_IRQHandler+0x10>)
 8002466:	f005 fe7c 	bl	8008162 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000664 	.word	0x20000664

08002474 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <I2C1_EV_IRQHandler+0x10>)
 800247a:	f001 fbd3 	bl	8003c24 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	200002f0 	.word	0x200002f0

08002488 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <I2C1_ER_IRQHandler+0x10>)
 800248e:	f001 fd2f 	bl	8003ef0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200002f0 	.word	0x200002f0

0800249c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <SPI1_IRQHandler+0x10>)
 80024a2:	f005 fbdf 	bl	8007c64 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	2000060c 	.word	0x2000060c

080024b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <OTG_FS_IRQHandler+0x10>)
 80024b6:	f003 fb14 	bl	8005ae2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000d78 	.word	0x20000d78

080024c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024c8:	4b08      	ldr	r3, [pc, #32]	; (80024ec <SystemInit+0x28>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	4a07      	ldr	r2, [pc, #28]	; (80024ec <SystemInit+0x28>)
 80024d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <SystemInit+0x28>)
 80024da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024de:	609a      	str	r2, [r3, #8]
#endif
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024f6:	f107 0308 	add.w	r3, r7, #8
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]
 8002502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002504:	463b      	mov	r3, r7
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800250c:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <MX_TIM2_Init+0x94>)
 800250e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002512:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <MX_TIM2_Init+0x94>)
 8002516:	2263      	movs	r2, #99	; 0x63
 8002518:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800251a:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <MX_TIM2_Init+0x94>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 840-1;
 8002520:	4b18      	ldr	r3, [pc, #96]	; (8002584 <MX_TIM2_Init+0x94>)
 8002522:	f240 3247 	movw	r2, #839	; 0x347
 8002526:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002528:	4b16      	ldr	r3, [pc, #88]	; (8002584 <MX_TIM2_Init+0x94>)
 800252a:	2200      	movs	r2, #0
 800252c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <MX_TIM2_Init+0x94>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002534:	4813      	ldr	r0, [pc, #76]	; (8002584 <MX_TIM2_Init+0x94>)
 8002536:	f005 fdc5 	bl	80080c4 <HAL_TIM_Base_Init>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002540:	f7ff fda6 	bl	8002090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002548:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800254a:	f107 0308 	add.w	r3, r7, #8
 800254e:	4619      	mov	r1, r3
 8002550:	480c      	ldr	r0, [pc, #48]	; (8002584 <MX_TIM2_Init+0x94>)
 8002552:	f005 ff0e 	bl	8008372 <HAL_TIM_ConfigClockSource>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800255c:	f7ff fd98 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002560:	2300      	movs	r3, #0
 8002562:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002568:	463b      	mov	r3, r7
 800256a:	4619      	mov	r1, r3
 800256c:	4805      	ldr	r0, [pc, #20]	; (8002584 <MX_TIM2_Init+0x94>)
 800256e:	f006 f919 	bl	80087a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002578:	f7ff fd8a 	bl	8002090 <Error_Handler>
  }

}
 800257c:	bf00      	nop
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	200006a4 	.word	0x200006a4

08002588 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800258e:	f107 0308 	add.w	r3, r7, #8
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800259c:	463b      	mov	r3, r7
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80025a4:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <MX_TIM3_Init+0x90>)
 80025a6:	4a1d      	ldr	r2, [pc, #116]	; (800261c <MX_TIM3_Init+0x94>)
 80025a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 119-1;
 80025aa:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <MX_TIM3_Init+0x90>)
 80025ac:	2276      	movs	r2, #118	; 0x76
 80025ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <MX_TIM3_Init+0x90>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16-1;
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <MX_TIM3_Init+0x90>)
 80025b8:	220f      	movs	r2, #15
 80025ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025bc:	4b16      	ldr	r3, [pc, #88]	; (8002618 <MX_TIM3_Init+0x90>)
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <MX_TIM3_Init+0x90>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025c8:	4813      	ldr	r0, [pc, #76]	; (8002618 <MX_TIM3_Init+0x90>)
 80025ca:	f005 fd7b 	bl	80080c4 <HAL_TIM_Base_Init>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80025d4:	f7ff fd5c 	bl	8002090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025de:	f107 0308 	add.w	r3, r7, #8
 80025e2:	4619      	mov	r1, r3
 80025e4:	480c      	ldr	r0, [pc, #48]	; (8002618 <MX_TIM3_Init+0x90>)
 80025e6:	f005 fec4 	bl	8008372 <HAL_TIM_ConfigClockSource>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80025f0:	f7ff fd4e 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f4:	2300      	movs	r3, #0
 80025f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f8:	2300      	movs	r3, #0
 80025fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025fc:	463b      	mov	r3, r7
 80025fe:	4619      	mov	r1, r3
 8002600:	4805      	ldr	r0, [pc, #20]	; (8002618 <MX_TIM3_Init+0x90>)
 8002602:	f006 f8cf 	bl	80087a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800260c:	f7ff fd40 	bl	8002090 <Error_Handler>
  }

}
 8002610:	bf00      	nop
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000664 	.word	0x20000664
 800261c:	40000400 	.word	0x40000400

08002620 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002630:	d116      	bne.n	8002660 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <HAL_TIM_Base_MspInit+0x80>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	4a19      	ldr	r2, [pc, #100]	; (80026a0 <HAL_TIM_Base_MspInit+0x80>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6413      	str	r3, [r2, #64]	; 0x40
 8002642:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <HAL_TIM_Base_MspInit+0x80>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800264e:	2200      	movs	r2, #0
 8002650:	2100      	movs	r1, #0
 8002652:	201c      	movs	r0, #28
 8002654:	f000 fcf5 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002658:	201c      	movs	r0, #28
 800265a:	f000 fd0e 	bl	800307a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800265e:	e01a      	b.n	8002696 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM3)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0f      	ldr	r2, [pc, #60]	; (80026a4 <HAL_TIM_Base_MspInit+0x84>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d115      	bne.n	8002696 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <HAL_TIM_Base_MspInit+0x80>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a0b      	ldr	r2, [pc, #44]	; (80026a0 <HAL_TIM_Base_MspInit+0x80>)
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <HAL_TIM_Base_MspInit+0x80>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	2100      	movs	r1, #0
 800268a:	201d      	movs	r0, #29
 800268c:	f000 fcd9 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002690:	201d      	movs	r0, #29
 8002692:	f000 fcf2 	bl	800307a <HAL_NVIC_EnableIRQ>
}
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40000400 	.word	0x40000400

080026a8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80026ac:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026ae:	4a12      	ldr	r2, [pc, #72]	; (80026f8 <MX_USART3_UART_Init+0x50>)
 80026b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026ce:	220c      	movs	r2, #12
 80026d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026da:	2200      	movs	r2, #0
 80026dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026de:	4805      	ldr	r0, [pc, #20]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026e0:	f006 f8f0 	bl	80088c4 <HAL_UART_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80026ea:	f7ff fcd1 	bl	8002090 <Error_Handler>
  }

}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200006e4 	.word	0x200006e4
 80026f8:	40004800 	.word	0x40004800

080026fc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <MX_USART6_UART_Init+0x4c>)
 8002702:	4a12      	ldr	r2, [pc, #72]	; (800274c <MX_USART6_UART_Init+0x50>)
 8002704:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <MX_USART6_UART_Init+0x4c>)
 8002708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800270c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <MX_USART6_UART_Init+0x4c>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <MX_USART6_UART_Init+0x4c>)
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800271a:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <MX_USART6_UART_Init+0x4c>)
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002720:	4b09      	ldr	r3, [pc, #36]	; (8002748 <MX_USART6_UART_Init+0x4c>)
 8002722:	220c      	movs	r2, #12
 8002724:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002726:	4b08      	ldr	r3, [pc, #32]	; (8002748 <MX_USART6_UART_Init+0x4c>)
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <MX_USART6_UART_Init+0x4c>)
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002732:	4805      	ldr	r0, [pc, #20]	; (8002748 <MX_USART6_UART_Init+0x4c>)
 8002734:	f006 f8c6 	bl	80088c4 <HAL_UART_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800273e:	f7ff fca7 	bl	8002090 <Error_Handler>
  }

}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000724 	.word	0x20000724
 800274c:	40011400 	.word	0x40011400

08002750 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08c      	sub	sp, #48	; 0x30
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 031c 	add.w	r3, r7, #28
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a32      	ldr	r2, [pc, #200]	; (8002838 <HAL_UART_MspInit+0xe8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d12d      	bne.n	80027ce <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	61bb      	str	r3, [r7, #24]
 8002776:	4b31      	ldr	r3, [pc, #196]	; (800283c <HAL_UART_MspInit+0xec>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	4a30      	ldr	r2, [pc, #192]	; (800283c <HAL_UART_MspInit+0xec>)
 800277c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002780:	6413      	str	r3, [r2, #64]	; 0x40
 8002782:	4b2e      	ldr	r3, [pc, #184]	; (800283c <HAL_UART_MspInit+0xec>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	4b2a      	ldr	r3, [pc, #168]	; (800283c <HAL_UART_MspInit+0xec>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4a29      	ldr	r2, [pc, #164]	; (800283c <HAL_UART_MspInit+0xec>)
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	6313      	str	r3, [r2, #48]	; 0x30
 800279e:	4b27      	ldr	r3, [pc, #156]	; (800283c <HAL_UART_MspInit+0xec>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b0:	2302      	movs	r3, #2
 80027b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b8:	2303      	movs	r3, #3
 80027ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027bc:	2307      	movs	r3, #7
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c0:	f107 031c 	add.w	r3, r7, #28
 80027c4:	4619      	mov	r1, r3
 80027c6:	481e      	ldr	r0, [pc, #120]	; (8002840 <HAL_UART_MspInit+0xf0>)
 80027c8:	f000 fd9c 	bl	8003304 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80027cc:	e030      	b.n	8002830 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1c      	ldr	r2, [pc, #112]	; (8002844 <HAL_UART_MspInit+0xf4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d12b      	bne.n	8002830 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80027d8:	2300      	movs	r3, #0
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	4b17      	ldr	r3, [pc, #92]	; (800283c <HAL_UART_MspInit+0xec>)
 80027de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e0:	4a16      	ldr	r2, [pc, #88]	; (800283c <HAL_UART_MspInit+0xec>)
 80027e2:	f043 0320 	orr.w	r3, r3, #32
 80027e6:	6453      	str	r3, [r2, #68]	; 0x44
 80027e8:	4b14      	ldr	r3, [pc, #80]	; (800283c <HAL_UART_MspInit+0xec>)
 80027ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ec:	f003 0320 	and.w	r3, r3, #32
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	4b10      	ldr	r3, [pc, #64]	; (800283c <HAL_UART_MspInit+0xec>)
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	4a0f      	ldr	r2, [pc, #60]	; (800283c <HAL_UART_MspInit+0xec>)
 80027fe:	f043 0304 	orr.w	r3, r3, #4
 8002802:	6313      	str	r3, [r2, #48]	; 0x30
 8002804:	4b0d      	ldr	r3, [pc, #52]	; (800283c <HAL_UART_MspInit+0xec>)
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MIDI_TX_Pin|MIDI_RX_Pin;
 8002810:	23c0      	movs	r3, #192	; 0xc0
 8002812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002814:	2302      	movs	r3, #2
 8002816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281c:	2303      	movs	r3, #3
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002820:	2308      	movs	r3, #8
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002824:	f107 031c 	add.w	r3, r7, #28
 8002828:	4619      	mov	r1, r3
 800282a:	4807      	ldr	r0, [pc, #28]	; (8002848 <HAL_UART_MspInit+0xf8>)
 800282c:	f000 fd6a 	bl	8003304 <HAL_GPIO_Init>
}
 8002830:	bf00      	nop
 8002832:	3730      	adds	r7, #48	; 0x30
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40004800 	.word	0x40004800
 800283c:	40023800 	.word	0x40023800
 8002840:	40020400 	.word	0x40020400
 8002844:	40011400 	.word	0x40011400
 8002848:	40020800 	.word	0x40020800

0800284c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800284c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002884 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002850:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002852:	e003      	b.n	800285c <LoopCopyDataInit>

08002854 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002856:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002858:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800285a:	3104      	adds	r1, #4

0800285c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800285c:	480b      	ldr	r0, [pc, #44]	; (800288c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800285e:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002860:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002862:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002864:	d3f6      	bcc.n	8002854 <CopyDataInit>
  ldr  r2, =_sbss
 8002866:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002868:	e002      	b.n	8002870 <LoopFillZerobss>

0800286a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800286a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800286c:	f842 3b04 	str.w	r3, [r2], #4

08002870 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002870:	4b09      	ldr	r3, [pc, #36]	; (8002898 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002872:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002874:	d3f9      	bcc.n	800286a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002876:	f7ff fe25 	bl	80024c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800287a:	f009 fdd5 	bl	800c428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800287e:	f7fe fcbb 	bl	80011f8 <main>
  bx  lr    
 8002882:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002884:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002888:	080403c0 	.word	0x080403c0
  ldr  r0, =_sdata
 800288c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002890:	200001a0 	.word	0x200001a0
  ldr  r2, =_sbss
 8002894:	200001a0 	.word	0x200001a0
  ldr  r3, = _ebss
 8002898:	20001180 	.word	0x20001180

0800289c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800289c:	e7fe      	b.n	800289c <ADC_IRQHandler>
	...

080028a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028a4:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <HAL_Init+0x40>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0d      	ldr	r2, [pc, #52]	; (80028e0 <HAL_Init+0x40>)
 80028aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_Init+0x40>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <HAL_Init+0x40>)
 80028b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <HAL_Init+0x40>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <HAL_Init+0x40>)
 80028c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c8:	2003      	movs	r0, #3
 80028ca:	f000 fbaf 	bl	800302c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f000 f808 	bl	80028e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028d4:	f7ff fd64 	bl	80023a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023c00 	.word	0x40023c00

080028e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <HAL_InitTick+0x54>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_InitTick+0x58>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	4619      	mov	r1, r3
 80028f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80028fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fbc7 	bl	8003096 <HAL_SYSTICK_Config>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e00e      	b.n	8002930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b0f      	cmp	r3, #15
 8002916:	d80a      	bhi.n	800292e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002918:	2200      	movs	r2, #0
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002920:	f000 fb8f 	bl	8003042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002924:	4a06      	ldr	r2, [pc, #24]	; (8002940 <HAL_InitTick+0x5c>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e000      	b.n	8002930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	2000008c 	.word	0x2000008c
 800293c:	20000094 	.word	0x20000094
 8002940:	20000090 	.word	0x20000090

08002944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002948:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_IncTick+0x20>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_IncTick+0x24>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4413      	add	r3, r2
 8002954:	4a04      	ldr	r2, [pc, #16]	; (8002968 <HAL_IncTick+0x24>)
 8002956:	6013      	str	r3, [r2, #0]
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20000094 	.word	0x20000094
 8002968:	20000764 	.word	0x20000764

0800296c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return uwTick;
 8002970:	4b03      	ldr	r3, [pc, #12]	; (8002980 <HAL_GetTick+0x14>)
 8002972:	681b      	ldr	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20000764 	.word	0x20000764

08002984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800298c:	f7ff ffee 	bl	800296c <HAL_GetTick>
 8002990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800299c:	d005      	beq.n	80029aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_Delay+0x40>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4413      	add	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029aa:	bf00      	nop
 80029ac:	f7ff ffde 	bl	800296c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d8f7      	bhi.n	80029ac <HAL_Delay+0x28>
  {
  }
}
 80029bc:	bf00      	nop
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000094 	.word	0x20000094

080029c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e033      	b.n	8002a46 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7fe f846 	bl	8000a78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d118      	bne.n	8002a38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a0e:	f023 0302 	bic.w	r3, r3, #2
 8002a12:	f043 0202 	orr.w	r2, r3, #2
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f93a 	bl	8002c94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f023 0303 	bic.w	r3, r3, #3
 8002a2e:	f043 0201 	orr.w	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40
 8002a36:	e001      	b.n	8002a3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x1c>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e105      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x228>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b09      	cmp	r3, #9
 8002a7a:	d925      	bls.n	8002ac8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68d9      	ldr	r1, [r3, #12]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4413      	add	r3, r2
 8002a90:	3b1e      	subs	r3, #30
 8002a92:	2207      	movs	r2, #7
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43da      	mvns	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	400a      	ands	r2, r1
 8002aa0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68d9      	ldr	r1, [r3, #12]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	4403      	add	r3, r0
 8002aba:	3b1e      	subs	r3, #30
 8002abc:	409a      	lsls	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	e022      	b.n	8002b0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6919      	ldr	r1, [r3, #16]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	4413      	add	r3, r2
 8002adc:	2207      	movs	r2, #7
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43da      	mvns	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	400a      	ands	r2, r1
 8002aea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6919      	ldr	r1, [r3, #16]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	4618      	mov	r0, r3
 8002afe:	4603      	mov	r3, r0
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4403      	add	r3, r0
 8002b04:	409a      	lsls	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b06      	cmp	r3, #6
 8002b14:	d824      	bhi.n	8002b60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	3b05      	subs	r3, #5
 8002b28:	221f      	movs	r2, #31
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	400a      	ands	r2, r1
 8002b36:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	4618      	mov	r0, r3
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	3b05      	subs	r3, #5
 8002b52:	fa00 f203 	lsl.w	r2, r0, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b5e:	e04c      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b0c      	cmp	r3, #12
 8002b66:	d824      	bhi.n	8002bb2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	3b23      	subs	r3, #35	; 0x23
 8002b7a:	221f      	movs	r2, #31
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43da      	mvns	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	400a      	ands	r2, r1
 8002b88:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	4618      	mov	r0, r3
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3b23      	subs	r3, #35	; 0x23
 8002ba4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	631a      	str	r2, [r3, #48]	; 0x30
 8002bb0:	e023      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3b41      	subs	r3, #65	; 0x41
 8002bc4:	221f      	movs	r2, #31
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	400a      	ands	r2, r1
 8002bd2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	4618      	mov	r0, r3
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	3b41      	subs	r3, #65	; 0x41
 8002bee:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bfa:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <HAL_ADC_ConfigChannel+0x234>)
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a21      	ldr	r2, [pc, #132]	; (8002c88 <HAL_ADC_ConfigChannel+0x238>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d109      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x1cc>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b12      	cmp	r3, #18
 8002c0e:	d105      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a19      	ldr	r2, [pc, #100]	; (8002c88 <HAL_ADC_ConfigChannel+0x238>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d123      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x21e>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	d003      	beq.n	8002c36 <HAL_ADC_ConfigChannel+0x1e6>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b11      	cmp	r3, #17
 8002c34:	d11b      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b10      	cmp	r3, #16
 8002c48:	d111      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <HAL_ADC_ConfigChannel+0x23c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a10      	ldr	r2, [pc, #64]	; (8002c90 <HAL_ADC_ConfigChannel+0x240>)
 8002c50:	fba2 2303 	umull	r2, r3, r2, r3
 8002c54:	0c9a      	lsrs	r2, r3, #18
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c60:	e002      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	3b01      	subs	r3, #1
 8002c66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f9      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	40012300 	.word	0x40012300
 8002c88:	40012000 	.word	0x40012000
 8002c8c:	2000008c 	.word	0x2000008c
 8002c90:	431bde83 	.word	0x431bde83

08002c94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c9c:	4b79      	ldr	r3, [pc, #484]	; (8002e84 <ADC_Init+0x1f0>)
 8002c9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6859      	ldr	r1, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	021a      	lsls	r2, r3, #8
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002cec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6859      	ldr	r1, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6899      	ldr	r1, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d26:	4a58      	ldr	r2, [pc, #352]	; (8002e88 <ADC_Init+0x1f4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d022      	beq.n	8002d72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6899      	ldr	r1, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6899      	ldr	r1, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	e00f      	b.n	8002d92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0202 	bic.w	r2, r2, #2
 8002da0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6899      	ldr	r1, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	7e1b      	ldrb	r3, [r3, #24]
 8002dac:	005a      	lsls	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01b      	beq.n	8002df8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002dde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6859      	ldr	r1, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	3b01      	subs	r3, #1
 8002dec:	035a      	lsls	r2, r3, #13
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	e007      	b.n	8002e08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	051a      	lsls	r2, r3, #20
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6899      	ldr	r1, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e4a:	025a      	lsls	r2, r3, #9
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6899      	ldr	r1, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	029a      	lsls	r2, r3, #10
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	609a      	str	r2, [r3, #8]
}
 8002e78:	bf00      	nop
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	40012300 	.word	0x40012300
 8002e88:	0f000001 	.word	0x0f000001

08002e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ebe:	4a04      	ldr	r2, [pc, #16]	; (8002ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	60d3      	str	r3, [r2, #12]
}
 8002ec4:	bf00      	nop
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed8:	4b04      	ldr	r3, [pc, #16]	; (8002eec <__NVIC_GetPriorityGrouping+0x18>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	f003 0307 	and.w	r3, r3, #7
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	db0b      	blt.n	8002f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	f003 021f 	and.w	r2, r3, #31
 8002f08:	4907      	ldr	r1, [pc, #28]	; (8002f28 <__NVIC_EnableIRQ+0x38>)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	2001      	movs	r0, #1
 8002f12:	fa00 f202 	lsl.w	r2, r0, r2
 8002f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	e000e100 	.word	0xe000e100

08002f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	6039      	str	r1, [r7, #0]
 8002f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	db0a      	blt.n	8002f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	490c      	ldr	r1, [pc, #48]	; (8002f78 <__NVIC_SetPriority+0x4c>)
 8002f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4a:	0112      	lsls	r2, r2, #4
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	440b      	add	r3, r1
 8002f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f54:	e00a      	b.n	8002f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	4908      	ldr	r1, [pc, #32]	; (8002f7c <__NVIC_SetPriority+0x50>)
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	3b04      	subs	r3, #4
 8002f64:	0112      	lsls	r2, r2, #4
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	440b      	add	r3, r1
 8002f6a:	761a      	strb	r2, [r3, #24]
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000e100 	.word	0xe000e100
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b089      	sub	sp, #36	; 0x24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f1c3 0307 	rsb	r3, r3, #7
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	bf28      	it	cs
 8002f9e:	2304      	movcs	r3, #4
 8002fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d902      	bls.n	8002fb0 <NVIC_EncodePriority+0x30>
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3b03      	subs	r3, #3
 8002fae:	e000      	b.n	8002fb2 <NVIC_EncodePriority+0x32>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	43d9      	mvns	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd8:	4313      	orrs	r3, r2
         );
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3724      	adds	r7, #36	; 0x24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ff8:	d301      	bcc.n	8002ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e00f      	b.n	800301e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <SysTick_Config+0x40>)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3b01      	subs	r3, #1
 8003004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003006:	210f      	movs	r1, #15
 8003008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800300c:	f7ff ff8e 	bl	8002f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <SysTick_Config+0x40>)
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003016:	4b04      	ldr	r3, [pc, #16]	; (8003028 <SysTick_Config+0x40>)
 8003018:	2207      	movs	r2, #7
 800301a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	e000e010 	.word	0xe000e010

0800302c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff ff29 	bl	8002e8c <__NVIC_SetPriorityGrouping>
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003042:	b580      	push	{r7, lr}
 8003044:	b086      	sub	sp, #24
 8003046:	af00      	add	r7, sp, #0
 8003048:	4603      	mov	r3, r0
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003054:	f7ff ff3e 	bl	8002ed4 <__NVIC_GetPriorityGrouping>
 8003058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	6978      	ldr	r0, [r7, #20]
 8003060:	f7ff ff8e 	bl	8002f80 <NVIC_EncodePriority>
 8003064:	4602      	mov	r2, r0
 8003066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff5d 	bl	8002f2c <__NVIC_SetPriority>
}
 8003072:	bf00      	nop
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	4603      	mov	r3, r0
 8003082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff31 	bl	8002ef0 <__NVIC_EnableIRQ>
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff ffa2 	bl	8002fe8 <SysTick_Config>
 80030a4:	4603      	mov	r3, r0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e014      	b.n	80030ea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	791b      	ldrb	r3, [r3, #4]
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d105      	bne.n	80030d6 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7fd fd65 	bl	8000ba0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2202      	movs	r2, #2
 80030da:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	2300      	movs	r3, #0
 8003102:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	795b      	ldrb	r3, [r3, #5]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_DAC_Start+0x1e>
 800310c:	2302      	movs	r3, #2
 800310e:	e050      	b.n	80031b2 <HAL_DAC_Start+0xc0>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2202      	movs	r2, #2
 800311a:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6819      	ldr	r1, [r3, #0]
 8003122:	2201      	movs	r2, #1
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	409a      	lsls	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d11a      	bne.n	800316c <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800314c:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2b04      	cmp	r3, #4
 8003152:	d127      	bne.n	80031a4 <HAL_DAC_Start+0xb2>
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b38      	cmp	r3, #56	; 0x38
 8003158:	d124      	bne.n	80031a4 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 0201 	orr.w	r2, r2, #1
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	e01b      	b.n	80031a4 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003176:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8003182:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800318a:	d10b      	bne.n	80031a4 <HAL_DAC_Start+0xb2>
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003192:	d107      	bne.n	80031a4 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0202 	orr.w	r2, r2, #2
 80031a2:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80031be:	b480      	push	{r7}
 80031c0:	b087      	sub	sp, #28
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	2300      	movs	r3, #0
 80031d0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	795b      	ldrb	r3, [r3, #5]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_DAC_ConfigChannel+0x20>
 80031da:	2302      	movs	r3, #2
 80031dc:	e036      	b.n	800324c <HAL_DAC_ConfigChannel+0x8e>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2202      	movs	r2, #2
 80031e8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80031f2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4013      	ands	r3, r2
 8003202:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6819      	ldr	r1, [r3, #0]
 800322c:	22c0      	movs	r2, #192	; 0xc0
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43da      	mvns	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	400a      	ands	r2, r1
 800323c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	371c      	adds	r7, #28
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d105      	bne.n	8003282 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4413      	add	r3, r2
 800327c:	3308      	adds	r3, #8
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	e004      	b.n	800328c <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4413      	add	r3, r2
 8003288:	3314      	adds	r3, #20
 800328a:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	461a      	mov	r2, r3
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	371c      	adds	r7, #28
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d004      	beq.n	80032c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2280      	movs	r2, #128	; 0x80
 80032ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e00c      	b.n	80032da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2205      	movs	r2, #5
 80032c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f4:	b2db      	uxtb	r3, r3
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003304:	b480      	push	{r7}
 8003306:	b089      	sub	sp, #36	; 0x24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003316:	2300      	movs	r3, #0
 8003318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	e16b      	b.n	80035f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003320:	2201      	movs	r2, #1
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	429a      	cmp	r2, r3
 800333a:	f040 815a 	bne.w	80035f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d00b      	beq.n	800335e <HAL_GPIO_Init+0x5a>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d007      	beq.n	800335e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003352:	2b11      	cmp	r3, #17
 8003354:	d003      	beq.n	800335e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b12      	cmp	r3, #18
 800335c:	d130      	bne.n	80033c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	2203      	movs	r2, #3
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003394:	2201      	movs	r2, #1
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	f003 0201 	and.w	r2, r3, #1
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	2203      	movs	r2, #3
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d003      	beq.n	8003400 <HAL_GPIO_Init+0xfc>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b12      	cmp	r3, #18
 80033fe:	d123      	bne.n	8003448 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	08da      	lsrs	r2, r3, #3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3208      	adds	r2, #8
 8003408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800340c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	220f      	movs	r2, #15
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	08da      	lsrs	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3208      	adds	r2, #8
 8003442:	69b9      	ldr	r1, [r7, #24]
 8003444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	2203      	movs	r2, #3
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 0203 	and.w	r2, r3, #3
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4313      	orrs	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80b4 	beq.w	80035f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	4b5f      	ldr	r3, [pc, #380]	; (800360c <HAL_GPIO_Init+0x308>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	4a5e      	ldr	r2, [pc, #376]	; (800360c <HAL_GPIO_Init+0x308>)
 8003494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003498:	6453      	str	r3, [r2, #68]	; 0x44
 800349a:	4b5c      	ldr	r3, [pc, #368]	; (800360c <HAL_GPIO_Init+0x308>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034a6:	4a5a      	ldr	r2, [pc, #360]	; (8003610 <HAL_GPIO_Init+0x30c>)
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	089b      	lsrs	r3, r3, #2
 80034ac:	3302      	adds	r3, #2
 80034ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	220f      	movs	r2, #15
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a51      	ldr	r2, [pc, #324]	; (8003614 <HAL_GPIO_Init+0x310>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d02b      	beq.n	800352a <HAL_GPIO_Init+0x226>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a50      	ldr	r2, [pc, #320]	; (8003618 <HAL_GPIO_Init+0x314>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d025      	beq.n	8003526 <HAL_GPIO_Init+0x222>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a4f      	ldr	r2, [pc, #316]	; (800361c <HAL_GPIO_Init+0x318>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d01f      	beq.n	8003522 <HAL_GPIO_Init+0x21e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a4e      	ldr	r2, [pc, #312]	; (8003620 <HAL_GPIO_Init+0x31c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d019      	beq.n	800351e <HAL_GPIO_Init+0x21a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a4d      	ldr	r2, [pc, #308]	; (8003624 <HAL_GPIO_Init+0x320>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d013      	beq.n	800351a <HAL_GPIO_Init+0x216>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a4c      	ldr	r2, [pc, #304]	; (8003628 <HAL_GPIO_Init+0x324>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00d      	beq.n	8003516 <HAL_GPIO_Init+0x212>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a4b      	ldr	r2, [pc, #300]	; (800362c <HAL_GPIO_Init+0x328>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d007      	beq.n	8003512 <HAL_GPIO_Init+0x20e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a4a      	ldr	r2, [pc, #296]	; (8003630 <HAL_GPIO_Init+0x32c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d101      	bne.n	800350e <HAL_GPIO_Init+0x20a>
 800350a:	2307      	movs	r3, #7
 800350c:	e00e      	b.n	800352c <HAL_GPIO_Init+0x228>
 800350e:	2308      	movs	r3, #8
 8003510:	e00c      	b.n	800352c <HAL_GPIO_Init+0x228>
 8003512:	2306      	movs	r3, #6
 8003514:	e00a      	b.n	800352c <HAL_GPIO_Init+0x228>
 8003516:	2305      	movs	r3, #5
 8003518:	e008      	b.n	800352c <HAL_GPIO_Init+0x228>
 800351a:	2304      	movs	r3, #4
 800351c:	e006      	b.n	800352c <HAL_GPIO_Init+0x228>
 800351e:	2303      	movs	r3, #3
 8003520:	e004      	b.n	800352c <HAL_GPIO_Init+0x228>
 8003522:	2302      	movs	r3, #2
 8003524:	e002      	b.n	800352c <HAL_GPIO_Init+0x228>
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <HAL_GPIO_Init+0x228>
 800352a:	2300      	movs	r3, #0
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	f002 0203 	and.w	r2, r2, #3
 8003532:	0092      	lsls	r2, r2, #2
 8003534:	4093      	lsls	r3, r2
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4313      	orrs	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800353c:	4934      	ldr	r1, [pc, #208]	; (8003610 <HAL_GPIO_Init+0x30c>)
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	089b      	lsrs	r3, r3, #2
 8003542:	3302      	adds	r3, #2
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800354a:	4b3a      	ldr	r3, [pc, #232]	; (8003634 <HAL_GPIO_Init+0x330>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	43db      	mvns	r3, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4013      	ands	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4313      	orrs	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800356e:	4a31      	ldr	r2, [pc, #196]	; (8003634 <HAL_GPIO_Init+0x330>)
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003574:	4b2f      	ldr	r3, [pc, #188]	; (8003634 <HAL_GPIO_Init+0x330>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003598:	4a26      	ldr	r2, [pc, #152]	; (8003634 <HAL_GPIO_Init+0x330>)
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800359e:	4b25      	ldr	r3, [pc, #148]	; (8003634 <HAL_GPIO_Init+0x330>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4013      	ands	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035c2:	4a1c      	ldr	r2, [pc, #112]	; (8003634 <HAL_GPIO_Init+0x330>)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035c8:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <HAL_GPIO_Init+0x330>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	43db      	mvns	r3, r3
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4013      	ands	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035ec:	4a11      	ldr	r2, [pc, #68]	; (8003634 <HAL_GPIO_Init+0x330>)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3301      	adds	r3, #1
 80035f6:	61fb      	str	r3, [r7, #28]
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	2b0f      	cmp	r3, #15
 80035fc:	f67f ae90 	bls.w	8003320 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003600:	bf00      	nop
 8003602:	3724      	adds	r7, #36	; 0x24
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	40023800 	.word	0x40023800
 8003610:	40013800 	.word	0x40013800
 8003614:	40020000 	.word	0x40020000
 8003618:	40020400 	.word	0x40020400
 800361c:	40020800 	.word	0x40020800
 8003620:	40020c00 	.word	0x40020c00
 8003624:	40021000 	.word	0x40021000
 8003628:	40021400 	.word	0x40021400
 800362c:	40021800 	.word	0x40021800
 8003630:	40021c00 	.word	0x40021c00
 8003634:	40013c00 	.word	0x40013c00

08003638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	807b      	strh	r3, [r7, #2]
 8003644:	4613      	mov	r3, r2
 8003646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003648:	787b      	ldrb	r3, [r7, #1]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800364e:	887a      	ldrh	r2, [r7, #2]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003654:	e003      	b.n	800365e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003656:	887b      	ldrh	r3, [r7, #2]
 8003658:	041a      	lsls	r2, r3, #16
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	619a      	str	r2, [r3, #24]
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e11f      	b.n	80038be <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fd fb72 	bl	8000d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2224      	movs	r2, #36	; 0x24
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036d0:	f003 fe5c 	bl	800738c <HAL_RCC_GetPCLK1Freq>
 80036d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4a7b      	ldr	r2, [pc, #492]	; (80038c8 <HAL_I2C_Init+0x25c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d807      	bhi.n	80036f0 <HAL_I2C_Init+0x84>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4a7a      	ldr	r2, [pc, #488]	; (80038cc <HAL_I2C_Init+0x260>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	bf94      	ite	ls
 80036e8:	2301      	movls	r3, #1
 80036ea:	2300      	movhi	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	e006      	b.n	80036fe <HAL_I2C_Init+0x92>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4a77      	ldr	r2, [pc, #476]	; (80038d0 <HAL_I2C_Init+0x264>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	bf94      	ite	ls
 80036f8:	2301      	movls	r3, #1
 80036fa:	2300      	movhi	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e0db      	b.n	80038be <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4a72      	ldr	r2, [pc, #456]	; (80038d4 <HAL_I2C_Init+0x268>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	0c9b      	lsrs	r3, r3, #18
 8003710:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	4a64      	ldr	r2, [pc, #400]	; (80038c8 <HAL_I2C_Init+0x25c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d802      	bhi.n	8003740 <HAL_I2C_Init+0xd4>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	3301      	adds	r3, #1
 800373e:	e009      	b.n	8003754 <HAL_I2C_Init+0xe8>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	4a63      	ldr	r2, [pc, #396]	; (80038d8 <HAL_I2C_Init+0x26c>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	099b      	lsrs	r3, r3, #6
 8003752:	3301      	adds	r3, #1
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	430b      	orrs	r3, r1
 800375a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003766:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4956      	ldr	r1, [pc, #344]	; (80038c8 <HAL_I2C_Init+0x25c>)
 8003770:	428b      	cmp	r3, r1
 8003772:	d80d      	bhi.n	8003790 <HAL_I2C_Init+0x124>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1e59      	subs	r1, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003782:	3301      	adds	r3, #1
 8003784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003788:	2b04      	cmp	r3, #4
 800378a:	bf38      	it	cc
 800378c:	2304      	movcc	r3, #4
 800378e:	e04f      	b.n	8003830 <HAL_I2C_Init+0x1c4>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d111      	bne.n	80037bc <HAL_I2C_Init+0x150>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1e58      	subs	r0, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6859      	ldr	r1, [r3, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	440b      	add	r3, r1
 80037a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037aa:	3301      	adds	r3, #1
 80037ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bf0c      	ite	eq
 80037b4:	2301      	moveq	r3, #1
 80037b6:	2300      	movne	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	e012      	b.n	80037e2 <HAL_I2C_Init+0x176>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	1e58      	subs	r0, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6859      	ldr	r1, [r3, #4]
 80037c4:	460b      	mov	r3, r1
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	0099      	lsls	r1, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d2:	3301      	adds	r3, #1
 80037d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d8:	2b00      	cmp	r3, #0
 80037da:	bf0c      	ite	eq
 80037dc:	2301      	moveq	r3, #1
 80037de:	2300      	movne	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_I2C_Init+0x17e>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e022      	b.n	8003830 <HAL_I2C_Init+0x1c4>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10e      	bne.n	8003810 <HAL_I2C_Init+0x1a4>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1e58      	subs	r0, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6859      	ldr	r1, [r3, #4]
 80037fa:	460b      	mov	r3, r1
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	440b      	add	r3, r1
 8003800:	fbb0 f3f3 	udiv	r3, r0, r3
 8003804:	3301      	adds	r3, #1
 8003806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800380a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800380e:	e00f      	b.n	8003830 <HAL_I2C_Init+0x1c4>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	1e58      	subs	r0, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6859      	ldr	r1, [r3, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	0099      	lsls	r1, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	fbb0 f3f3 	udiv	r3, r0, r3
 8003826:	3301      	adds	r3, #1
 8003828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	6809      	ldr	r1, [r1, #0]
 8003834:	4313      	orrs	r3, r2
 8003836:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69da      	ldr	r2, [r3, #28]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800385e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6911      	ldr	r1, [r2, #16]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	68d2      	ldr	r2, [r2, #12]
 800386a:	4311      	orrs	r1, r2
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	430b      	orrs	r3, r1
 8003872:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0201 	orr.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	000186a0 	.word	0x000186a0
 80038cc:	001e847f 	.word	0x001e847f
 80038d0:	003d08ff 	.word	0x003d08ff
 80038d4:	431bde83 	.word	0x431bde83
 80038d8:	10624dd3 	.word	0x10624dd3

080038dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	607a      	str	r2, [r7, #4]
 80038e6:	461a      	mov	r2, r3
 80038e8:	460b      	mov	r3, r1
 80038ea:	817b      	strh	r3, [r7, #10]
 80038ec:	4613      	mov	r3, r2
 80038ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038f0:	f7ff f83c 	bl	800296c <HAL_GetTick>
 80038f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b20      	cmp	r3, #32
 8003900:	f040 80e0 	bne.w	8003ac4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	2319      	movs	r3, #25
 800390a:	2201      	movs	r2, #1
 800390c:	4970      	ldr	r1, [pc, #448]	; (8003ad0 <HAL_I2C_Master_Transmit+0x1f4>)
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f001 fdf5 	bl	80054fe <I2C_WaitOnFlagUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800391a:	2302      	movs	r3, #2
 800391c:	e0d3      	b.n	8003ac6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_I2C_Master_Transmit+0x50>
 8003928:	2302      	movs	r3, #2
 800392a:	e0cc      	b.n	8003ac6 <HAL_I2C_Master_Transmit+0x1ea>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b01      	cmp	r3, #1
 8003940:	d007      	beq.n	8003952 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0201 	orr.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003960:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2221      	movs	r2, #33	; 0x21
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2210      	movs	r2, #16
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	893a      	ldrh	r2, [r7, #8]
 8003982:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4a50      	ldr	r2, [pc, #320]	; (8003ad4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003992:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003994:	8979      	ldrh	r1, [r7, #10]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	6a3a      	ldr	r2, [r7, #32]
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f001 fcae 	bl	80052fc <I2C_MasterRequestWrite>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e08d      	b.n	8003ac6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039aa:	2300      	movs	r3, #0
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80039c0:	e066      	b.n	8003a90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	6a39      	ldr	r1, [r7, #32]
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f001 fe6f 	bl	80056aa <I2C_WaitOnTXEFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d107      	bne.n	80039ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e06b      	b.n	8003ac6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	781a      	ldrb	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d11b      	bne.n	8003a64 <HAL_I2C_Master_Transmit+0x188>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d017      	beq.n	8003a64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	781a      	ldrb	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	6a39      	ldr	r1, [r7, #32]
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f001 fe5f 	bl	800572c <I2C_WaitOnBTFFlagUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00d      	beq.n	8003a90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d107      	bne.n	8003a8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e01a      	b.n	8003ac6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d194      	bne.n	80039c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e000      	b.n	8003ac6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ac4:	2302      	movs	r3, #2
  }
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	00100002 	.word	0x00100002
 8003ad4:	ffff0000 	.word	0xffff0000

08003ad8 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	607a      	str	r2, [r7, #4]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	817b      	strh	r3, [r7, #10]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	f040 8085 	bne.w	8003c08 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003afe:	4b46      	ldr	r3, [pc, #280]	; (8003c18 <HAL_I2C_Master_Transmit_IT+0x140>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	08db      	lsrs	r3, r3, #3
 8003b04:	4a45      	ldr	r2, [pc, #276]	; (8003c1c <HAL_I2C_Master_Transmit_IT+0x144>)
 8003b06:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0a:	0a1a      	lsrs	r2, r3, #8
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	009a      	lsls	r2, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d116      	bne.n	8003b52 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f043 0220 	orr.w	r2, r3, #32
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e05b      	b.n	8003c0a <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d0db      	beq.n	8003b18 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_I2C_Master_Transmit_IT+0x96>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e04d      	b.n	8003c0a <HAL_I2C_Master_Transmit_IT+0x132>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d007      	beq.n	8003b94 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ba2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2221      	movs	r2, #33	; 0x21
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2210      	movs	r2, #16
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	893a      	ldrh	r2, [r7, #8]
 8003bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <HAL_I2C_Master_Transmit_IT+0x148>)
 8003bd4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003bd6:	897a      	ldrh	r2, [r7, #10]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bea:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003c02:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	e000      	b.n	8003c0a <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8003c08:	2302      	movs	r3, #2
  }
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	2000008c 	.word	0x2000008c
 8003c1c:	14f8b589 	.word	0x14f8b589
 8003c20:	ffff0000 	.word	0xffff0000

08003c24 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c44:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	d003      	beq.n	8003c5c <HAL_I2C_EV_IRQHandler+0x38>
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	2b40      	cmp	r3, #64	; 0x40
 8003c58:	f040 80b6 	bne.w	8003dc8 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10d      	bne.n	8003c92 <HAL_I2C_EV_IRQHandler+0x6e>
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c7c:	d003      	beq.n	8003c86 <HAL_I2C_EV_IRQHandler+0x62>
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c84:	d101      	bne.n	8003c8a <HAL_I2C_EV_IRQHandler+0x66>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <HAL_I2C_EV_IRQHandler+0x68>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	f000 8127 	beq.w	8003ee0 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00c      	beq.n	8003cb6 <HAL_I2C_EV_IRQHandler+0x92>
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	0a5b      	lsrs	r3, r3, #9
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d006      	beq.n	8003cb6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f001 fdaf 	bl	800580c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fd12 	bl	80046d8 <I2C_Master_SB>
 8003cb4:	e087      	b.n	8003dc6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	08db      	lsrs	r3, r3, #3
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d009      	beq.n	8003cd6 <HAL_I2C_EV_IRQHandler+0xb2>
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	0a5b      	lsrs	r3, r3, #9
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fd88 	bl	80047e4 <I2C_Master_ADD10>
 8003cd4:	e077      	b.n	8003dc6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d009      	beq.n	8003cf6 <HAL_I2C_EV_IRQHandler+0xd2>
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	0a5b      	lsrs	r3, r3, #9
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fda2 	bl	8004838 <I2C_Master_ADDR>
 8003cf4:	e067      	b.n	8003dc6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	089b      	lsrs	r3, r3, #2
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d030      	beq.n	8003d64 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d10:	f000 80e8 	beq.w	8003ee4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	09db      	lsrs	r3, r3, #7
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00f      	beq.n	8003d40 <HAL_I2C_EV_IRQHandler+0x11c>
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	0a9b      	lsrs	r3, r3, #10
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d009      	beq.n	8003d40 <HAL_I2C_EV_IRQHandler+0x11c>
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	089b      	lsrs	r3, r3, #2
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d103      	bne.n	8003d40 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f9de 	bl	80040fa <I2C_MasterTransmit_TXE>
 8003d3e:	e042      	b.n	8003dc6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	089b      	lsrs	r3, r3, #2
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80cb 	beq.w	8003ee4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	0a5b      	lsrs	r3, r3, #9
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 80c4 	beq.w	8003ee4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 fa68 	bl	8004232 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d62:	e0bf      	b.n	8003ee4 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d72:	f000 80b7 	beq.w	8003ee4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	099b      	lsrs	r3, r3, #6
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00f      	beq.n	8003da2 <HAL_I2C_EV_IRQHandler+0x17e>
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	0a9b      	lsrs	r3, r3, #10
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <HAL_I2C_EV_IRQHandler+0x17e>
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	089b      	lsrs	r3, r3, #2
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d103      	bne.n	8003da2 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fb30 	bl	8004400 <I2C_MasterReceive_RXNE>
 8003da0:	e011      	b.n	8003dc6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	089b      	lsrs	r3, r3, #2
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 809a 	beq.w	8003ee4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	0a5b      	lsrs	r3, r3, #9
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 8093 	beq.w	8003ee4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fba0 	bl	8004504 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dc4:	e08e      	b.n	8003ee4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003dc6:	e08d      	b.n	8003ee4 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d004      	beq.n	8003dda <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	61fb      	str	r3, [r7, #28]
 8003dd8:	e007      	b.n	8003dea <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	085b      	lsrs	r3, r3, #1
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d012      	beq.n	8003e1c <HAL_I2C_EV_IRQHandler+0x1f8>
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	0a5b      	lsrs	r3, r3, #9
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00c      	beq.n	8003e1c <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003e12:	69b9      	ldr	r1, [r7, #24]
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 ff5e 	bl	8004cd6 <I2C_Slave_ADDR>
 8003e1a:	e066      	b.n	8003eea <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	091b      	lsrs	r3, r3, #4
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d009      	beq.n	8003e3c <HAL_I2C_EV_IRQHandler+0x218>
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	0a5b      	lsrs	r3, r3, #9
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 ff93 	bl	8004d60 <I2C_Slave_STOPF>
 8003e3a:	e056      	b.n	8003eea <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e3c:	7bbb      	ldrb	r3, [r7, #14]
 8003e3e:	2b21      	cmp	r3, #33	; 0x21
 8003e40:	d002      	beq.n	8003e48 <HAL_I2C_EV_IRQHandler+0x224>
 8003e42:	7bbb      	ldrb	r3, [r7, #14]
 8003e44:	2b29      	cmp	r3, #41	; 0x29
 8003e46:	d125      	bne.n	8003e94 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	09db      	lsrs	r3, r3, #7
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00f      	beq.n	8003e74 <HAL_I2C_EV_IRQHandler+0x250>
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	0a9b      	lsrs	r3, r3, #10
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d009      	beq.n	8003e74 <HAL_I2C_EV_IRQHandler+0x250>
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	089b      	lsrs	r3, r3, #2
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d103      	bne.n	8003e74 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fe74 	bl	8004b5a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e72:	e039      	b.n	8003ee8 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	089b      	lsrs	r3, r3, #2
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d033      	beq.n	8003ee8 <HAL_I2C_EV_IRQHandler+0x2c4>
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	0a5b      	lsrs	r3, r3, #9
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d02d      	beq.n	8003ee8 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fea1 	bl	8004bd4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e92:	e029      	b.n	8003ee8 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	099b      	lsrs	r3, r3, #6
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00f      	beq.n	8003ec0 <HAL_I2C_EV_IRQHandler+0x29c>
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	0a9b      	lsrs	r3, r3, #10
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d009      	beq.n	8003ec0 <HAL_I2C_EV_IRQHandler+0x29c>
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	089b      	lsrs	r3, r3, #2
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d103      	bne.n	8003ec0 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 feac 	bl	8004c16 <I2C_SlaveReceive_RXNE>
 8003ebe:	e014      	b.n	8003eea <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	089b      	lsrs	r3, r3, #2
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00e      	beq.n	8003eea <HAL_I2C_EV_IRQHandler+0x2c6>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	0a5b      	lsrs	r3, r3, #9
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 feda 	bl	8004c92 <I2C_SlaveReceive_BTF>
 8003ede:	e004      	b.n	8003eea <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003ee0:	bf00      	nop
 8003ee2:	e002      	b.n	8003eea <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ee4:	bf00      	nop
 8003ee6:	e000      	b.n	8003eea <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ee8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003eea:	3720      	adds	r7, #32
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08a      	sub	sp, #40	; 0x28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f12:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	0a1b      	lsrs	r3, r3, #8
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00e      	beq.n	8003f3e <HAL_I2C_ER_IRQHandler+0x4e>
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	0a1b      	lsrs	r3, r3, #8
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f3c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	0a5b      	lsrs	r3, r3, #9
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00e      	beq.n	8003f68 <HAL_I2C_ER_IRQHandler+0x78>
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	0a1b      	lsrs	r3, r3, #8
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	f043 0302 	orr.w	r3, r3, #2
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003f66:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	0a9b      	lsrs	r3, r3, #10
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d03f      	beq.n	8003ff4 <HAL_I2C_ER_IRQHandler+0x104>
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	0a1b      	lsrs	r3, r3, #8
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d039      	beq.n	8003ff4 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003f80:	7efb      	ldrb	r3, [r7, #27]
 8003f82:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f92:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003f9a:	7ebb      	ldrb	r3, [r7, #26]
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d112      	bne.n	8003fc6 <HAL_I2C_ER_IRQHandler+0xd6>
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10f      	bne.n	8003fc6 <HAL_I2C_ER_IRQHandler+0xd6>
 8003fa6:	7cfb      	ldrb	r3, [r7, #19]
 8003fa8:	2b21      	cmp	r3, #33	; 0x21
 8003faa:	d008      	beq.n	8003fbe <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003fac:	7cfb      	ldrb	r3, [r7, #19]
 8003fae:	2b29      	cmp	r3, #41	; 0x29
 8003fb0:	d005      	beq.n	8003fbe <HAL_I2C_ER_IRQHandler+0xce>
 8003fb2:	7cfb      	ldrb	r3, [r7, #19]
 8003fb4:	2b28      	cmp	r3, #40	; 0x28
 8003fb6:	d106      	bne.n	8003fc6 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b21      	cmp	r3, #33	; 0x21
 8003fbc:	d103      	bne.n	8003fc6 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fffe 	bl	8004fc0 <I2C_Slave_AF>
 8003fc4:	e016      	b.n	8003ff4 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fce:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	f043 0304 	orr.w	r3, r3, #4
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003fd8:	7efb      	ldrb	r3, [r7, #27]
 8003fda:	2b10      	cmp	r3, #16
 8003fdc:	d002      	beq.n	8003fe4 <HAL_I2C_ER_IRQHandler+0xf4>
 8003fde:	7efb      	ldrb	r3, [r7, #27]
 8003fe0:	2b40      	cmp	r3, #64	; 0x40
 8003fe2:	d107      	bne.n	8003ff4 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff2:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	0adb      	lsrs	r3, r3, #11
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00e      	beq.n	800401e <HAL_I2C_ER_IRQHandler+0x12e>
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	0a1b      	lsrs	r3, r3, #8
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	f043 0308 	orr.w	r3, r3, #8
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800401c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f001 f835 	bl	80050a0 <I2C_ITError>
  }
}
 8004036:	bf00      	nop
 8004038:	3728      	adds	r7, #40	; 0x28
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	460b      	mov	r3, r1
 8004084:	70fb      	strb	r3, [r7, #3]
 8004086:	4613      	mov	r3, r2
 8004088:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004108:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004110:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411c:	2b00      	cmp	r3, #0
 800411e:	d150      	bne.n	80041c2 <I2C_MasterTransmit_TXE+0xc8>
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	2b21      	cmp	r3, #33	; 0x21
 8004124:	d14d      	bne.n	80041c2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b08      	cmp	r3, #8
 800412a:	d01d      	beq.n	8004168 <I2C_MasterTransmit_TXE+0x6e>
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b20      	cmp	r3, #32
 8004130:	d01a      	beq.n	8004168 <I2C_MasterTransmit_TXE+0x6e>
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004138:	d016      	beq.n	8004168 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004148:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2211      	movs	r2, #17
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7fd ff8b 	bl	800207c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004166:	e060      	b.n	800422a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004176:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004186:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2220      	movs	r2, #32
 8004192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b40      	cmp	r3, #64	; 0x40
 80041a0:	d107      	bne.n	80041b2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff ff7d 	bl	80040aa <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041b0:	e03b      	b.n	800422a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fd ff5e 	bl	800207c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041c0:	e033      	b.n	800422a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	2b21      	cmp	r3, #33	; 0x21
 80041c6:	d005      	beq.n	80041d4 <I2C_MasterTransmit_TXE+0xda>
 80041c8:	7bbb      	ldrb	r3, [r7, #14]
 80041ca:	2b40      	cmp	r3, #64	; 0x40
 80041cc:	d12d      	bne.n	800422a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	2b22      	cmp	r3, #34	; 0x22
 80041d2:	d12a      	bne.n	800422a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d108      	bne.n	80041f0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ec:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80041ee:	e01c      	b.n	800422a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b40      	cmp	r3, #64	; 0x40
 80041fa:	d103      	bne.n	8004204 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f898 	bl	8004332 <I2C_MemoryTransmit_TXE_BTF>
}
 8004202:	e012      	b.n	800422a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	781a      	ldrb	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004228:	e7ff      	b.n	800422a <I2C_MasterTransmit_TXE+0x130>
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b21      	cmp	r3, #33	; 0x21
 800424a:	d165      	bne.n	8004318 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d012      	beq.n	800427c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	781a      	ldrb	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800427a:	e056      	b.n	800432a <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b08      	cmp	r3, #8
 8004280:	d01d      	beq.n	80042be <I2C_MasterTransmit_BTF+0x8c>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b20      	cmp	r3, #32
 8004286:	d01a      	beq.n	80042be <I2C_MasterTransmit_BTF+0x8c>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800428e:	d016      	beq.n	80042be <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800429e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2211      	movs	r2, #17
 80042a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fd fee0 	bl	800207c <HAL_I2C_MasterTxCpltCallback>
}
 80042bc:	e035      	b.n	800432a <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042cc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042dc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b40      	cmp	r3, #64	; 0x40
 80042f6:	d107      	bne.n	8004308 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7ff fed2 	bl	80040aa <HAL_I2C_MemTxCpltCallback>
}
 8004306:	e010      	b.n	800432a <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7fd feb3 	bl	800207c <HAL_I2C_MasterTxCpltCallback>
}
 8004316:	e008      	b.n	800432a <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b40      	cmp	r3, #64	; 0x40
 8004322:	d102      	bne.n	800432a <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f804 	bl	8004332 <I2C_MemoryTransmit_TXE_BTF>
}
 800432a:	bf00      	nop
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800433e:	2b00      	cmp	r3, #0
 8004340:	d11d      	bne.n	800437e <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004346:	2b01      	cmp	r3, #1
 8004348:	d10b      	bne.n	8004362 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800434e:	b2da      	uxtb	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435a:	1c9a      	adds	r2, r3, #2
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004360:	e048      	b.n	80043f4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004366:	b29b      	uxth	r3, r3
 8004368:	121b      	asrs	r3, r3, #8
 800436a:	b2da      	uxtb	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800437c:	e03a      	b.n	80043f4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004382:	2b01      	cmp	r3, #1
 8004384:	d10b      	bne.n	800439e <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800438a:	b2da      	uxtb	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800439c:	e02a      	b.n	80043f4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d126      	bne.n	80043f4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b22      	cmp	r3, #34	; 0x22
 80043b0:	d108      	bne.n	80043c4 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043c0:	601a      	str	r2, [r3, #0]
}
 80043c2:	e017      	b.n	80043f4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b21      	cmp	r3, #33	; 0x21
 80043ce:	d111      	bne.n	80043f4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b22      	cmp	r3, #34	; 0x22
 8004412:	d173      	bne.n	80044fc <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b03      	cmp	r3, #3
 8004420:	d920      	bls.n	8004464 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b03      	cmp	r3, #3
 8004450:	d154      	bne.n	80044fc <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004460:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004462:	e04b      	b.n	80044fc <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	2b02      	cmp	r3, #2
 800446a:	d047      	beq.n	80044fc <I2C_MasterReceive_RXNE+0xfc>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d002      	beq.n	8004478 <I2C_MasterReceive_RXNE+0x78>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d141      	bne.n	80044fc <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004486:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004496:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b40      	cmp	r3, #64	; 0x40
 80044d0:	d10a      	bne.n	80044e8 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff fdec 	bl	80040be <HAL_I2C_MemRxCpltCallback>
}
 80044e6:	e009      	b.n	80044fc <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2212      	movs	r2, #18
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff fda1 	bl	800403e <HAL_I2C_MasterRxCpltCallback>
}
 80044fc:	bf00      	nop
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b04      	cmp	r3, #4
 800451a:	d11b      	bne.n	8004554 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691a      	ldr	r2, [r3, #16]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004548:	b29b      	uxth	r3, r3
 800454a:	3b01      	subs	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004552:	e0bd      	b.n	80046d0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b03      	cmp	r3, #3
 800455c:	d129      	bne.n	80045b2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800456c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b04      	cmp	r3, #4
 8004572:	d00a      	beq.n	800458a <I2C_MasterReceive_BTF+0x86>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d007      	beq.n	800458a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004588:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045b0:	e08e      	b.n	80046d0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d176      	bne.n	80046aa <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d002      	beq.n	80045c8 <I2C_MasterReceive_BTF+0xc4>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2b10      	cmp	r3, #16
 80045c6:	d108      	bne.n	80045da <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	e019      	b.n	800460e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d002      	beq.n	80045e6 <I2C_MasterReceive_BTF+0xe2>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d108      	bne.n	80045f8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	e00a      	b.n	800460e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b10      	cmp	r3, #16
 80045fc:	d007      	beq.n	800460e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800460c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b01      	subs	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004668:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b40      	cmp	r3, #64	; 0x40
 800467c:	d10a      	bne.n	8004694 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7ff fd16 	bl	80040be <HAL_I2C_MemRxCpltCallback>
}
 8004692:	e01d      	b.n	80046d0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2212      	movs	r2, #18
 80046a0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff fccb 	bl	800403e <HAL_I2C_MasterRxCpltCallback>
}
 80046a8:	e012      	b.n	80046d0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b40      	cmp	r3, #64	; 0x40
 80046ea:	d117      	bne.n	800471c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	461a      	mov	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004704:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004706:	e067      	b.n	80047d8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470c:	b2db      	uxtb	r3, r3
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	b2da      	uxtb	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	611a      	str	r2, [r3, #16]
}
 800471a:	e05d      	b.n	80047d8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004724:	d133      	bne.n	800478e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b21      	cmp	r3, #33	; 0x21
 8004730:	d109      	bne.n	8004746 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	b2db      	uxtb	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004742:	611a      	str	r2, [r3, #16]
 8004744:	e008      	b.n	8004758 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474a:	b2db      	uxtb	r3, r3
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	b2da      	uxtb	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475c:	2b00      	cmp	r3, #0
 800475e:	d004      	beq.n	800476a <I2C_Master_SB+0x92>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004766:	2b00      	cmp	r3, #0
 8004768:	d108      	bne.n	800477c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	2b00      	cmp	r3, #0
 8004770:	d032      	beq.n	80047d8 <I2C_Master_SB+0x100>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d02d      	beq.n	80047d8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800478a:	605a      	str	r2, [r3, #4]
}
 800478c:	e024      	b.n	80047d8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10e      	bne.n	80047b4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479a:	b29b      	uxth	r3, r3
 800479c:	11db      	asrs	r3, r3, #7
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	f003 0306 	and.w	r3, r3, #6
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	f063 030f 	orn	r3, r3, #15
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	611a      	str	r2, [r3, #16]
}
 80047b2:	e011      	b.n	80047d8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d10d      	bne.n	80047d8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	11db      	asrs	r3, r3, #7
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	f003 0306 	and.w	r3, r3, #6
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f063 030e 	orn	r3, r3, #14
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	611a      	str	r2, [r3, #16]
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d103      	bne.n	8004808 <I2C_Master_ADD10+0x24>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004804:	2b00      	cmp	r3, #0
 8004806:	d011      	beq.n	800482c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480e:	2b00      	cmp	r3, #0
 8004810:	d104      	bne.n	800481c <I2C_Master_ADD10+0x38>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004818:	2b00      	cmp	r3, #0
 800481a:	d007      	beq.n	800482c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800482a:	605a      	str	r2, [r3, #4]
    }
  }
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004838:	b480      	push	{r7}
 800483a:	b091      	sub	sp, #68	; 0x44
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004846:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b22      	cmp	r3, #34	; 0x22
 8004860:	f040 8169 	bne.w	8004b36 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10f      	bne.n	800488c <I2C_Master_ADDR+0x54>
 800486c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004870:	2b40      	cmp	r3, #64	; 0x40
 8004872:	d10b      	bne.n	800488c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004874:	2300      	movs	r3, #0
 8004876:	633b      	str	r3, [r7, #48]	; 0x30
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	633b      	str	r3, [r7, #48]	; 0x30
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	633b      	str	r3, [r7, #48]	; 0x30
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	e160      	b.n	8004b4e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004890:	2b00      	cmp	r3, #0
 8004892:	d11d      	bne.n	80048d0 <I2C_Master_ADDR+0x98>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800489c:	d118      	bne.n	80048d0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800489e:	2300      	movs	r3, #0
 80048a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048c2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	651a      	str	r2, [r3, #80]	; 0x50
 80048ce:	e13e      	b.n	8004b4e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d113      	bne.n	8004902 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048da:	2300      	movs	r3, #0
 80048dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	e115      	b.n	8004b2e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004906:	b29b      	uxth	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	f040 808a 	bne.w	8004a22 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004914:	d137      	bne.n	8004986 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004924:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004934:	d113      	bne.n	800495e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004944:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004946:	2300      	movs	r3, #0
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	e0e7      	b.n	8004b2e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800495e:	2300      	movs	r3, #0
 8004960:	623b      	str	r3, [r7, #32]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	623b      	str	r3, [r7, #32]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	623b      	str	r3, [r7, #32]
 8004972:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	e0d3      	b.n	8004b2e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	2b08      	cmp	r3, #8
 800498a:	d02e      	beq.n	80049ea <I2C_Master_ADDR+0x1b2>
 800498c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498e:	2b20      	cmp	r3, #32
 8004990:	d02b      	beq.n	80049ea <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004994:	2b12      	cmp	r3, #18
 8004996:	d102      	bne.n	800499e <I2C_Master_ADDR+0x166>
 8004998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499a:	2b01      	cmp	r3, #1
 800499c:	d125      	bne.n	80049ea <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d00e      	beq.n	80049c2 <I2C_Master_ADDR+0x18a>
 80049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d00b      	beq.n	80049c2 <I2C_Master_ADDR+0x18a>
 80049aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ac:	2b10      	cmp	r3, #16
 80049ae:	d008      	beq.n	80049c2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	e007      	b.n	80049d2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049d2:	2300      	movs	r3, #0
 80049d4:	61fb      	str	r3, [r7, #28]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	61fb      	str	r3, [r7, #28]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	61fb      	str	r3, [r7, #28]
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	e0a1      	b.n	8004b2e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049fa:	2300      	movs	r3, #0
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	61bb      	str	r3, [r7, #24]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	61bb      	str	r3, [r7, #24]
 8004a0e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	e085      	b.n	8004b2e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d14d      	bne.n	8004ac8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d016      	beq.n	8004a60 <I2C_Master_ADDR+0x228>
 8004a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d013      	beq.n	8004a60 <I2C_Master_ADDR+0x228>
 8004a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3a:	2b10      	cmp	r3, #16
 8004a3c:	d010      	beq.n	8004a60 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a4c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	e007      	b.n	8004a70 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a6e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a7e:	d117      	bne.n	8004ab0 <I2C_Master_ADDR+0x278>
 8004a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a86:	d00b      	beq.n	8004aa0 <I2C_Master_ADDR+0x268>
 8004a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d008      	beq.n	8004aa0 <I2C_Master_ADDR+0x268>
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d005      	beq.n	8004aa0 <I2C_Master_ADDR+0x268>
 8004a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d002      	beq.n	8004aa0 <I2C_Master_ADDR+0x268>
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d107      	bne.n	8004ab0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004aae:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	e032      	b.n	8004b2e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ad6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ae6:	d117      	bne.n	8004b18 <I2C_Master_ADDR+0x2e0>
 8004ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004aee:	d00b      	beq.n	8004b08 <I2C_Master_ADDR+0x2d0>
 8004af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d008      	beq.n	8004b08 <I2C_Master_ADDR+0x2d0>
 8004af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d005      	beq.n	8004b08 <I2C_Master_ADDR+0x2d0>
 8004afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afe:	2b10      	cmp	r3, #16
 8004b00:	d002      	beq.n	8004b08 <I2C_Master_ADDR+0x2d0>
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	2b20      	cmp	r3, #32
 8004b06:	d107      	bne.n	8004b18 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b16:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b18:	2300      	movs	r3, #0
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	613b      	str	r3, [r7, #16]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	613b      	str	r3, [r7, #16]
 8004b2c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004b34:	e00b      	b.n	8004b4e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
}
 8004b4c:	e7ff      	b.n	8004b4e <I2C_Master_ADDR+0x316>
 8004b4e:	bf00      	nop
 8004b50:	3744      	adds	r7, #68	; 0x44
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b68:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d02b      	beq.n	8004bcc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	781a      	ldrb	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d114      	bne.n	8004bcc <I2C_SlaveTransmit_TXE+0x72>
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
 8004ba4:	2b29      	cmp	r3, #41	; 0x29
 8004ba6:	d111      	bne.n	8004bcc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2221      	movs	r2, #33	; 0x21
 8004bbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2228      	movs	r2, #40	; 0x28
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7ff fa43 	bl	8004052 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004bcc:	bf00      	nop
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d011      	beq.n	8004c0a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	781a      	ldrb	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c24:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d02c      	beq.n	8004c8a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d114      	bne.n	8004c8a <I2C_SlaveReceive_RXNE+0x74>
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
 8004c62:	2b2a      	cmp	r3, #42	; 0x2a
 8004c64:	d111      	bne.n	8004c8a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c74:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2222      	movs	r2, #34	; 0x22
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2228      	movs	r2, #40	; 0x28
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff f9ee 	bl	8004066 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d012      	beq.n	8004cca <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cf0:	2b28      	cmp	r3, #40	; 0x28
 8004cf2:	d127      	bne.n	8004d44 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d02:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	089b      	lsrs	r3, r3, #2
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004d10:	2301      	movs	r3, #1
 8004d12:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	09db      	lsrs	r3, r3, #7
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d103      	bne.n	8004d28 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	81bb      	strh	r3, [r7, #12]
 8004d26:	e002      	b.n	8004d2e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004d36:	89ba      	ldrh	r2, [r7, #12]
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7ff f99c 	bl	800407a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d42:	e008      	b.n	8004d56 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0202 	mvn.w	r2, #2
 8004d4c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004d56:	bf00      	nop
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d7e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004d80:	2300      	movs	r3, #0
 8004d82:	60bb      	str	r3, [r7, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	60bb      	str	r3, [r7, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dac:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dbc:	d172      	bne.n	8004ea4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
 8004dc0:	2b22      	cmp	r3, #34	; 0x22
 8004dc2:	d002      	beq.n	8004dca <I2C_Slave_STOPF+0x6a>
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
 8004dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8004dc8:	d135      	bne.n	8004e36 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	f043 0204 	orr.w	r2, r3, #4
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dfc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fe fa6f 	bl	80032e6 <HAL_DMA_GetState>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d049      	beq.n	8004ea2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	4a69      	ldr	r2, [pc, #420]	; (8004fb8 <I2C_Slave_STOPF+0x258>)
 8004e14:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe fa41 	bl	80032a2 <HAL_DMA_Abort_IT>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d03d      	beq.n	8004ea2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e30:	4610      	mov	r0, r2
 8004e32:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e34:	e035      	b.n	8004ea2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f043 0204 	orr.w	r2, r3, #4
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e68:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fe fa39 	bl	80032e6 <HAL_DMA_GetState>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d014      	beq.n	8004ea4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7e:	4a4e      	ldr	r2, [pc, #312]	; (8004fb8 <I2C_Slave_STOPF+0x258>)
 8004e80:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fe fa0b 	bl	80032a2 <HAL_DMA_Abort_IT>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d008      	beq.n	8004ea4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	4798      	blx	r3
 8004ea0:	e000      	b.n	8004ea4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ea2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d03e      	beq.n	8004f2c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d112      	bne.n	8004ee2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691a      	ldr	r2, [r3, #16]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eec:	2b40      	cmp	r3, #64	; 0x40
 8004eee:	d112      	bne.n	8004f16 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	f043 0204 	orr.w	r2, r3, #4
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f8b3 	bl	80050a0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004f3a:	e039      	b.n	8004fb0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f40:	d109      	bne.n	8004f56 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2228      	movs	r2, #40	; 0x28
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7ff f888 	bl	8004066 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b28      	cmp	r3, #40	; 0x28
 8004f60:	d111      	bne.n	8004f86 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a15      	ldr	r2, [pc, #84]	; (8004fbc <I2C_Slave_STOPF+0x25c>)
 8004f66:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff f889 	bl	8004096 <HAL_I2C_ListenCpltCallback>
}
 8004f84:	e014      	b.n	8004fb0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8a:	2b22      	cmp	r3, #34	; 0x22
 8004f8c:	d002      	beq.n	8004f94 <I2C_Slave_STOPF+0x234>
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	2b22      	cmp	r3, #34	; 0x22
 8004f92:	d10d      	bne.n	8004fb0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7ff f85b 	bl	8004066 <HAL_I2C_SlaveRxCpltCallback>
}
 8004fb0:	bf00      	nop
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	08005401 	.word	0x08005401
 8004fbc:	ffff0000 	.word	0xffff0000

08004fc0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fce:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d002      	beq.n	8004fe2 <I2C_Slave_AF+0x22>
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b20      	cmp	r3, #32
 8004fe0:	d129      	bne.n	8005036 <I2C_Slave_AF+0x76>
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	2b28      	cmp	r3, #40	; 0x28
 8004fe6:	d126      	bne.n	8005036 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a2c      	ldr	r2, [pc, #176]	; (800509c <I2C_Slave_AF+0xdc>)
 8004fec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ffc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005006:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005016:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff f831 	bl	8004096 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005034:	e02e      	b.n	8005094 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	2b21      	cmp	r3, #33	; 0x21
 800503a:	d126      	bne.n	800508a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a17      	ldr	r2, [pc, #92]	; (800509c <I2C_Slave_AF+0xdc>)
 8005040:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2221      	movs	r2, #33	; 0x21
 8005046:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2220      	movs	r2, #32
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005066:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005070:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005080:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fe ffe5 	bl	8004052 <HAL_I2C_SlaveTxCpltCallback>
}
 8005088:	e004      	b.n	8005094 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005092:	615a      	str	r2, [r3, #20]
}
 8005094:	bf00      	nop
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	ffff0000 	.word	0xffff0000

080050a0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b10      	cmp	r3, #16
 80050ba:	d10a      	bne.n	80050d2 <I2C_ITError+0x32>
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
 80050be:	2b22      	cmp	r3, #34	; 0x22
 80050c0:	d107      	bne.n	80050d2 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050d0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050d8:	2b28      	cmp	r3, #40	; 0x28
 80050da:	d107      	bne.n	80050ec <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2228      	movs	r2, #40	; 0x28
 80050e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80050ea:	e015      	b.n	8005118 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050fa:	d006      	beq.n	800510a <I2C_ITError+0x6a>
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	2b60      	cmp	r3, #96	; 0x60
 8005100:	d003      	beq.n	800510a <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005126:	d162      	bne.n	80051ee <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005136:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b01      	cmp	r3, #1
 8005144:	d020      	beq.n	8005188 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514a:	4a6a      	ldr	r2, [pc, #424]	; (80052f4 <I2C_ITError+0x254>)
 800514c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005152:	4618      	mov	r0, r3
 8005154:	f7fe f8a5 	bl	80032a2 <HAL_DMA_Abort_IT>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 8089 	beq.w	8005272 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0201 	bic.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005182:	4610      	mov	r0, r2
 8005184:	4798      	blx	r3
 8005186:	e074      	b.n	8005272 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	4a59      	ldr	r2, [pc, #356]	; (80052f4 <I2C_ITError+0x254>)
 800518e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	4618      	mov	r0, r3
 8005196:	f7fe f884 	bl	80032a2 <HAL_DMA_Abort_IT>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d068      	beq.n	8005272 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051aa:	2b40      	cmp	r3, #64	; 0x40
 80051ac:	d10b      	bne.n	80051c6 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 0201 	bic.w	r2, r2, #1
 80051d4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051e8:	4610      	mov	r0, r2
 80051ea:	4798      	blx	r3
 80051ec:	e041      	b.n	8005272 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b60      	cmp	r3, #96	; 0x60
 80051f8:	d125      	bne.n	8005246 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005212:	2b40      	cmp	r3, #64	; 0x40
 8005214:	d10b      	bne.n	800522e <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	691a      	ldr	r2, [r3, #16]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0201 	bic.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fe ff51 	bl	80040e6 <HAL_I2C_AbortCpltCallback>
 8005244:	e015      	b.n	8005272 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b40      	cmp	r3, #64	; 0x40
 8005252:	d10b      	bne.n	800526c <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7fe ff30 	bl	80040d2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10e      	bne.n	80052a0 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005288:	2b00      	cmp	r3, #0
 800528a:	d109      	bne.n	80052a0 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005292:	2b00      	cmp	r3, #0
 8005294:	d104      	bne.n	80052a0 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800529c:	2b00      	cmp	r3, #0
 800529e:	d007      	beq.n	80052b0 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052ae:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d113      	bne.n	80052ec <I2C_ITError+0x24c>
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	2b28      	cmp	r3, #40	; 0x28
 80052c8:	d110      	bne.n	80052ec <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a0a      	ldr	r2, [pc, #40]	; (80052f8 <I2C_ITError+0x258>)
 80052ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fe fed5 	bl	8004096 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052ec:	bf00      	nop
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	08005401 	.word	0x08005401
 80052f8:	ffff0000 	.word	0xffff0000

080052fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	607a      	str	r2, [r7, #4]
 8005306:	603b      	str	r3, [r7, #0]
 8005308:	460b      	mov	r3, r1
 800530a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2b08      	cmp	r3, #8
 8005316:	d006      	beq.n	8005326 <I2C_MasterRequestWrite+0x2a>
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d003      	beq.n	8005326 <I2C_MasterRequestWrite+0x2a>
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005324:	d108      	bne.n	8005338 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	e00b      	b.n	8005350 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	2b12      	cmp	r3, #18
 800533e:	d107      	bne.n	8005350 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800534e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f8ce 	bl	80054fe <I2C_WaitOnFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00c      	beq.n	8005382 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800537c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e035      	b.n	80053ee <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800538a:	d108      	bne.n	800539e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800538c:	897b      	ldrh	r3, [r7, #10]
 800538e:	b2db      	uxtb	r3, r3
 8005390:	461a      	mov	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800539a:	611a      	str	r2, [r3, #16]
 800539c:	e01b      	b.n	80053d6 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800539e:	897b      	ldrh	r3, [r7, #10]
 80053a0:	11db      	asrs	r3, r3, #7
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	f003 0306 	and.w	r3, r3, #6
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	f063 030f 	orn	r3, r3, #15
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	490f      	ldr	r1, [pc, #60]	; (80053f8 <I2C_MasterRequestWrite+0xfc>)
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f8f5 	bl	80055ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e010      	b.n	80053ee <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053cc:	897b      	ldrh	r3, [r7, #10]
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	4908      	ldr	r1, [pc, #32]	; (80053fc <I2C_MasterRequestWrite+0x100>)
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 f8e5 	bl	80055ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e000      	b.n	80053ee <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	00010008 	.word	0x00010008
 80053fc:	00010002 	.word	0x00010002

08005400 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005414:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005422:	2200      	movs	r2, #0
 8005424:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	2200      	movs	r2, #0
 8005434:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005444:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005458:	2200      	movs	r2, #0
 800545a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005468:	2200      	movs	r2, #0
 800546a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0201 	bic.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b60      	cmp	r3, #96	; 0x60
 8005486:	d10e      	bne.n	80054a6 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f7fe fe21 	bl	80040e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80054a4:	e027      	b.n	80054f6 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80054a6:	7afb      	ldrb	r3, [r7, #11]
 80054a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054ac:	2b28      	cmp	r3, #40	; 0x28
 80054ae:	d117      	bne.n	80054e0 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0201 	orr.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2228      	movs	r2, #40	; 0x28
 80054da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80054de:	e007      	b.n	80054f0 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f7fe fdee 	bl	80040d2 <HAL_I2C_ErrorCallback>
}
 80054f6:	bf00      	nop
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	603b      	str	r3, [r7, #0]
 800550a:	4613      	mov	r3, r2
 800550c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800550e:	e025      	b.n	800555c <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005516:	d021      	beq.n	800555c <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005518:	f7fd fa28 	bl	800296c <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	429a      	cmp	r2, r3
 8005526:	d302      	bcc.n	800552e <I2C_WaitOnFlagUntilTimeout+0x30>
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d116      	bne.n	800555c <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2220      	movs	r2, #32
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	f043 0220 	orr.w	r2, r3, #32
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e023      	b.n	80055a4 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	0c1b      	lsrs	r3, r3, #16
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b01      	cmp	r3, #1
 8005564:	d10d      	bne.n	8005582 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	43da      	mvns	r2, r3
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	4013      	ands	r3, r2
 8005572:	b29b      	uxth	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	bf0c      	ite	eq
 8005578:	2301      	moveq	r3, #1
 800557a:	2300      	movne	r3, #0
 800557c:	b2db      	uxtb	r3, r3
 800557e:	461a      	mov	r2, r3
 8005580:	e00c      	b.n	800559c <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	43da      	mvns	r2, r3
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	4013      	ands	r3, r2
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	bf0c      	ite	eq
 8005594:	2301      	moveq	r3, #1
 8005596:	2300      	movne	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	461a      	mov	r2, r3
 800559c:	79fb      	ldrb	r3, [r7, #7]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d0b6      	beq.n	8005510 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055ba:	e051      	b.n	8005660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ca:	d123      	bne.n	8005614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005600:	f043 0204 	orr.w	r2, r3, #4
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e046      	b.n	80056a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800561a:	d021      	beq.n	8005660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561c:	f7fd f9a6 	bl	800296c <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	429a      	cmp	r2, r3
 800562a:	d302      	bcc.n	8005632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d116      	bne.n	8005660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564c:	f043 0220 	orr.w	r2, r3, #32
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e020      	b.n	80056a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	0c1b      	lsrs	r3, r3, #16
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b01      	cmp	r3, #1
 8005668:	d10c      	bne.n	8005684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	43da      	mvns	r2, r3
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	4013      	ands	r3, r2
 8005676:	b29b      	uxth	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	bf14      	ite	ne
 800567c:	2301      	movne	r3, #1
 800567e:	2300      	moveq	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	e00b      	b.n	800569c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	43da      	mvns	r2, r3
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4013      	ands	r3, r2
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	bf14      	ite	ne
 8005696:	2301      	movne	r3, #1
 8005698:	2300      	moveq	r3, #0
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d18d      	bne.n	80055bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b084      	sub	sp, #16
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056b6:	e02d      	b.n	8005714 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 f878 	bl	80057ae <I2C_IsAcknowledgeFailed>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e02d      	b.n	8005724 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ce:	d021      	beq.n	8005714 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d0:	f7fd f94c 	bl	800296c <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d302      	bcc.n	80056e6 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d116      	bne.n	8005714 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005700:	f043 0220 	orr.w	r2, r3, #32
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e007      	b.n	8005724 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571e:	2b80      	cmp	r3, #128	; 0x80
 8005720:	d1ca      	bne.n	80056b8 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005738:	e02d      	b.n	8005796 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 f837 	bl	80057ae <I2C_IsAcknowledgeFailed>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e02d      	b.n	80057a6 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005750:	d021      	beq.n	8005796 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005752:	f7fd f90b 	bl	800296c <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	429a      	cmp	r2, r3
 8005760:	d302      	bcc.n	8005768 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d116      	bne.n	8005796 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	f043 0220 	orr.w	r2, r3, #32
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e007      	b.n	80057a6 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b04      	cmp	r3, #4
 80057a2:	d1ca      	bne.n	800573a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c4:	d11b      	bne.n	80057fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2220      	movs	r2, #32
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	f043 0204 	orr.w	r2, r3, #4
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800581c:	d103      	bne.n	8005826 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005824:	e007      	b.n	8005836 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800582e:	d102      	bne.n	8005836 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2208      	movs	r2, #8
 8005834:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005842:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005844:	b08f      	sub	sp, #60	; 0x3c
 8005846:	af0a      	add	r7, sp, #40	; 0x28
 8005848:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e10f      	b.n	8005a74 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f006 faf0 	bl	800be54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2203      	movs	r2, #3
 8005878:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005884:	2b00      	cmp	r3, #0
 8005886:	d102      	bne.n	800588e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f003 fcf5 	bl	8009282 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	603b      	str	r3, [r7, #0]
 800589e:	687e      	ldr	r6, [r7, #4]
 80058a0:	466d      	mov	r5, sp
 80058a2:	f106 0410 	add.w	r4, r6, #16
 80058a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80058b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80058b6:	1d33      	adds	r3, r6, #4
 80058b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058ba:	6838      	ldr	r0, [r7, #0]
 80058bc:	f003 fbcc 	bl	8009058 <USB_CoreInit>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2202      	movs	r2, #2
 80058ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e0d0      	b.n	8005a74 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2100      	movs	r1, #0
 80058d8:	4618      	mov	r0, r3
 80058da:	f003 fce3 	bl	80092a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058de:	2300      	movs	r3, #0
 80058e0:	73fb      	strb	r3, [r7, #15]
 80058e2:	e04a      	b.n	800597a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80058e4:	7bfa      	ldrb	r2, [r7, #15]
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	4613      	mov	r3, r2
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	1a9b      	subs	r3, r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	440b      	add	r3, r1
 80058f2:	333d      	adds	r3, #61	; 0x3d
 80058f4:	2201      	movs	r2, #1
 80058f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80058f8:	7bfa      	ldrb	r2, [r7, #15]
 80058fa:	6879      	ldr	r1, [r7, #4]
 80058fc:	4613      	mov	r3, r2
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	1a9b      	subs	r3, r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	440b      	add	r3, r1
 8005906:	333c      	adds	r3, #60	; 0x3c
 8005908:	7bfa      	ldrb	r2, [r7, #15]
 800590a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800590c:	7bfa      	ldrb	r2, [r7, #15]
 800590e:	7bfb      	ldrb	r3, [r7, #15]
 8005910:	b298      	uxth	r0, r3
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	4613      	mov	r3, r2
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	1a9b      	subs	r3, r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	3342      	adds	r3, #66	; 0x42
 8005920:	4602      	mov	r2, r0
 8005922:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005924:	7bfa      	ldrb	r2, [r7, #15]
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	4613      	mov	r3, r2
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	1a9b      	subs	r3, r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	440b      	add	r3, r1
 8005932:	333f      	adds	r3, #63	; 0x3f
 8005934:	2200      	movs	r2, #0
 8005936:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005938:	7bfa      	ldrb	r2, [r7, #15]
 800593a:	6879      	ldr	r1, [r7, #4]
 800593c:	4613      	mov	r3, r2
 800593e:	00db      	lsls	r3, r3, #3
 8005940:	1a9b      	subs	r3, r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	440b      	add	r3, r1
 8005946:	3344      	adds	r3, #68	; 0x44
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800594c:	7bfa      	ldrb	r2, [r7, #15]
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	4613      	mov	r3, r2
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	1a9b      	subs	r3, r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	440b      	add	r3, r1
 800595a:	3348      	adds	r3, #72	; 0x48
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005960:	7bfa      	ldrb	r2, [r7, #15]
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	4613      	mov	r3, r2
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	1a9b      	subs	r3, r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	440b      	add	r3, r1
 800596e:	3350      	adds	r3, #80	; 0x50
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	3301      	adds	r3, #1
 8005978:	73fb      	strb	r3, [r7, #15]
 800597a:	7bfa      	ldrb	r2, [r7, #15]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	429a      	cmp	r2, r3
 8005982:	d3af      	bcc.n	80058e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005984:	2300      	movs	r3, #0
 8005986:	73fb      	strb	r3, [r7, #15]
 8005988:	e044      	b.n	8005a14 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800598a:	7bfa      	ldrb	r2, [r7, #15]
 800598c:	6879      	ldr	r1, [r7, #4]
 800598e:	4613      	mov	r3, r2
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	1a9b      	subs	r3, r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	440b      	add	r3, r1
 8005998:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800599c:	2200      	movs	r2, #0
 800599e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80059a0:	7bfa      	ldrb	r2, [r7, #15]
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	4613      	mov	r3, r2
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	1a9b      	subs	r3, r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80059b2:	7bfa      	ldrb	r2, [r7, #15]
 80059b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80059b6:	7bfa      	ldrb	r2, [r7, #15]
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	1a9b      	subs	r3, r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80059c8:	2200      	movs	r2, #0
 80059ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80059cc:	7bfa      	ldrb	r2, [r7, #15]
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	4613      	mov	r3, r2
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	1a9b      	subs	r3, r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	440b      	add	r3, r1
 80059da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80059e2:	7bfa      	ldrb	r2, [r7, #15]
 80059e4:	6879      	ldr	r1, [r7, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	1a9b      	subs	r3, r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	440b      	add	r3, r1
 80059f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80059f4:	2200      	movs	r2, #0
 80059f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80059f8:	7bfa      	ldrb	r2, [r7, #15]
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	4613      	mov	r3, r2
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	1a9b      	subs	r3, r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	440b      	add	r3, r1
 8005a06:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	3301      	adds	r3, #1
 8005a12:	73fb      	strb	r3, [r7, #15]
 8005a14:	7bfa      	ldrb	r2, [r7, #15]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d3b5      	bcc.n	800598a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	603b      	str	r3, [r7, #0]
 8005a24:	687e      	ldr	r6, [r7, #4]
 8005a26:	466d      	mov	r5, sp
 8005a28:	f106 0410 	add.w	r4, r6, #16
 8005a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a38:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a3c:	1d33      	adds	r3, r6, #4
 8005a3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a40:	6838      	ldr	r0, [r7, #0]
 8005a42:	f003 fc59 	bl	80092f8 <USB_DevInit>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d005      	beq.n	8005a58 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e00d      	b.n	8005a74 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f004 fc98 	bl	800a3a2 <USB_DevDisconnect>

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a7c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_PCD_Start+0x1c>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e020      	b.n	8005ada <HAL_PCD_Start+0x5e>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d109      	bne.n	8005abc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d005      	beq.n	8005abc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f004 fc56 	bl	800a372 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f003 fbc8 	bl	8009260 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005ae2:	b590      	push	{r4, r7, lr}
 8005ae4:	b08d      	sub	sp, #52	; 0x34
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f004 fcfd 	bl	800a4f8 <USB_GetMode>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f040 839d 	bne.w	8006240 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f004 fc61 	bl	800a3d2 <USB_ReadInterrupts>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 8393 	beq.w	800623e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f004 fc58 	bl	800a3d2 <USB_ReadInterrupts>
 8005b22:	4603      	mov	r3, r0
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d107      	bne.n	8005b3c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695a      	ldr	r2, [r3, #20]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f002 0202 	and.w	r2, r2, #2
 8005b3a:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f004 fc46 	bl	800a3d2 <USB_ReadInterrupts>
 8005b46:	4603      	mov	r3, r0
 8005b48:	f003 0310 	and.w	r3, r3, #16
 8005b4c:	2b10      	cmp	r3, #16
 8005b4e:	d161      	bne.n	8005c14 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	699a      	ldr	r2, [r3, #24]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0210 	bic.w	r2, r2, #16
 8005b5e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	f003 020f 	and.w	r2, r3, #15
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	1a9b      	subs	r3, r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	0c5b      	lsrs	r3, r3, #17
 8005b84:	f003 030f 	and.w	r3, r3, #15
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d124      	bne.n	8005bd6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005b92:	4013      	ands	r3, r2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d035      	beq.n	8005c04 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	091b      	lsrs	r3, r3, #4
 8005ba0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005ba2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	461a      	mov	r2, r3
 8005baa:	6a38      	ldr	r0, [r7, #32]
 8005bac:	f004 fabe 	bl	800a12c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	091b      	lsrs	r3, r3, #4
 8005bb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bbc:	441a      	add	r2, r3
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	699a      	ldr	r2, [r3, #24]
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	091b      	lsrs	r3, r3, #4
 8005bca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bce:	441a      	add	r2, r3
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	619a      	str	r2, [r3, #24]
 8005bd4:	e016      	b.n	8005c04 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	0c5b      	lsrs	r3, r3, #17
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	2b06      	cmp	r3, #6
 8005be0:	d110      	bne.n	8005c04 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005be8:	2208      	movs	r2, #8
 8005bea:	4619      	mov	r1, r3
 8005bec:	6a38      	ldr	r0, [r7, #32]
 8005bee:	f004 fa9d 	bl	800a12c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	699a      	ldr	r2, [r3, #24]
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	091b      	lsrs	r3, r3, #4
 8005bfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bfe:	441a      	add	r2, r3
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0210 	orr.w	r2, r2, #16
 8005c12:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f004 fbda 	bl	800a3d2 <USB_ReadInterrupts>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c24:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c28:	d16e      	bne.n	8005d08 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f004 fbe0 	bl	800a3f8 <USB_ReadDevAllOutEpInterrupt>
 8005c38:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005c3a:	e062      	b.n	8005d02 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d057      	beq.n	8005cf6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	4611      	mov	r1, r2
 8005c50:	4618      	mov	r0, r3
 8005c52:	f004 fc05 	bl	800a460 <USB_ReadDevOutEPInterrupt>
 8005c56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00c      	beq.n	8005c7c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6e:	461a      	mov	r2, r3
 8005c70:	2301      	movs	r3, #1
 8005c72:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005c74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fd98 	bl	80067ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00c      	beq.n	8005ca0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c92:	461a      	mov	r2, r3
 8005c94:	2308      	movs	r3, #8
 8005c96:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005c98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fe92 	bl	80069c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f003 0310 	and.w	r3, r3, #16
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d008      	beq.n	8005cbc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	2310      	movs	r3, #16
 8005cba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f003 0320 	and.w	r3, r3, #32
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d008      	beq.n	8005cd8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	2320      	movs	r3, #32
 8005cd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d009      	beq.n	8005cf6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005cf4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfe:	085b      	lsrs	r3, r3, #1
 8005d00:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d199      	bne.n	8005c3c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f004 fb60 	bl	800a3d2 <USB_ReadInterrupts>
 8005d12:	4603      	mov	r3, r0
 8005d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d1c:	f040 80c0 	bne.w	8005ea0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f004 fb81 	bl	800a42c <USB_ReadDevAllInEpInterrupt>
 8005d2a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005d30:	e0b2      	b.n	8005e98 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 80a7 	beq.w	8005e8c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d44:	b2d2      	uxtb	r2, r2
 8005d46:	4611      	mov	r1, r2
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f004 fba7 	bl	800a49c <USB_ReadDevInEPInterrupt>
 8005d4e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d057      	beq.n	8005e0a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	f003 030f 	and.w	r3, r3, #15
 8005d60:	2201      	movs	r2, #1
 8005d62:	fa02 f303 	lsl.w	r3, r2, r3
 8005d66:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	43db      	mvns	r3, r3
 8005d74:	69f9      	ldr	r1, [r7, #28]
 8005d76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d132      	bne.n	8005dfe <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005d98:	6879      	ldr	r1, [r7, #4]
 8005d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	1a9b      	subs	r3, r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	440b      	add	r3, r1
 8005da6:	3348      	adds	r3, #72	; 0x48
 8005da8:	6819      	ldr	r1, [r3, #0]
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dae:	4613      	mov	r3, r2
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	1a9b      	subs	r3, r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4403      	add	r3, r0
 8005db8:	3344      	adds	r3, #68	; 0x44
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4419      	add	r1, r3
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	1a9b      	subs	r3, r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4403      	add	r3, r0
 8005dcc:	3348      	adds	r3, #72	; 0x48
 8005dce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d113      	bne.n	8005dfe <HAL_PCD_IRQHandler+0x31c>
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dda:	4613      	mov	r3, r2
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	1a9b      	subs	r3, r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	440b      	add	r3, r1
 8005de4:	3350      	adds	r3, #80	; 0x50
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d108      	bne.n	8005dfe <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6818      	ldr	r0, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005df6:	461a      	mov	r2, r3
 8005df8:	2101      	movs	r1, #1
 8005dfa:	f004 fbaf 	bl	800a55c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	4619      	mov	r1, r3
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f006 f8a6 	bl	800bf56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f003 0308 	and.w	r3, r3, #8
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d008      	beq.n	8005e26 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e20:	461a      	mov	r2, r3
 8005e22:	2308      	movs	r3, #8
 8005e24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d008      	beq.n	8005e42 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	2310      	movs	r3, #16
 8005e40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d008      	beq.n	8005e5e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e58:	461a      	mov	r2, r3
 8005e5a:	2340      	movs	r3, #64	; 0x40
 8005e5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d008      	beq.n	8005e7a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e74:	461a      	mov	r2, r3
 8005e76:	2302      	movs	r3, #2
 8005e78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005e84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fc03 	bl	8006692 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	3301      	adds	r3, #1
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e94:	085b      	lsrs	r3, r3, #1
 8005e96:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f47f af49 	bne.w	8005d32 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f004 fa94 	bl	800a3d2 <USB_ReadInterrupts>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eb4:	d122      	bne.n	8005efc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ec4:	f023 0301 	bic.w	r3, r3, #1
 8005ec8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d108      	bne.n	8005ee6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005edc:	2100      	movs	r1, #0
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fe0e 	bl	8006b00 <HAL_PCDEx_LPM_Callback>
 8005ee4:	e002      	b.n	8005eec <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f006 f8ac 	bl	800c044 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695a      	ldr	r2, [r3, #20]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005efa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f004 fa66 	bl	800a3d2 <USB_ReadInterrupts>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f10:	d112      	bne.n	8005f38 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d102      	bne.n	8005f28 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f006 f868 	bl	800bff8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	695a      	ldr	r2, [r3, #20]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005f36:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f004 fa48 	bl	800a3d2 <USB_ReadInterrupts>
 8005f42:	4603      	mov	r3, r0
 8005f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f4c:	f040 80c7 	bne.w	80060de <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	69fa      	ldr	r2, [r7, #28]
 8005f5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f5e:	f023 0301 	bic.w	r3, r3, #1
 8005f62:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2110      	movs	r1, #16
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f003 fb28 	bl	80095c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f70:	2300      	movs	r3, #0
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f74:	e056      	b.n	8006024 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f82:	461a      	mov	r2, r3
 8005f84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f88:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f9a:	0151      	lsls	r1, r2, #5
 8005f9c:	69fa      	ldr	r2, [r7, #28]
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fa8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fba:	0151      	lsls	r1, r2, #5
 8005fbc:	69fa      	ldr	r2, [r7, #28]
 8005fbe:	440a      	add	r2, r1
 8005fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fc8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005fdc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fee:	0151      	lsls	r1, r2, #5
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	440a      	add	r2, r1
 8005ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ffc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800600e:	0151      	lsls	r1, r2, #5
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	440a      	add	r2, r1
 8006014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006018:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800601c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	3301      	adds	r3, #1
 8006022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800602a:	429a      	cmp	r2, r3
 800602c:	d3a3      	bcc.n	8005f76 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	69fa      	ldr	r2, [r7, #28]
 8006038:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800603c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006040:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006046:	2b00      	cmp	r3, #0
 8006048:	d016      	beq.n	8006078 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006054:	69fa      	ldr	r2, [r7, #28]
 8006056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800605a:	f043 030b 	orr.w	r3, r3, #11
 800605e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006070:	f043 030b 	orr.w	r3, r3, #11
 8006074:	6453      	str	r3, [r2, #68]	; 0x44
 8006076:	e015      	b.n	80060a4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	69fa      	ldr	r2, [r7, #28]
 8006082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006086:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800608a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800608e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	69fa      	ldr	r2, [r7, #28]
 800609a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800609e:	f043 030b 	orr.w	r3, r3, #11
 80060a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	69fa      	ldr	r2, [r7, #28]
 80060ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80060b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6818      	ldr	r0, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80060c8:	461a      	mov	r2, r3
 80060ca:	f004 fa47 	bl	800a55c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	695a      	ldr	r2, [r3, #20]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80060dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f004 f975 	bl	800a3d2 <USB_ReadInterrupts>
 80060e8:	4603      	mov	r3, r0
 80060ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f2:	d124      	bne.n	800613e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f004 fa0b 	bl	800a514 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4618      	mov	r0, r3
 8006104:	f003 fabd 	bl	8009682 <USB_GetDevSpeed>
 8006108:	4603      	mov	r3, r0
 800610a:	461a      	mov	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681c      	ldr	r4, [r3, #0]
 8006114:	f001 f92e 	bl	8007374 <HAL_RCC_GetHCLKFreq>
 8006118:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800611e:	b2db      	uxtb	r3, r3
 8006120:	461a      	mov	r2, r3
 8006122:	4620      	mov	r0, r4
 8006124:	f002 fffa 	bl	800911c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f005 ff3c 	bl	800bfa6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695a      	ldr	r2, [r3, #20]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800613c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4618      	mov	r0, r3
 8006144:	f004 f945 	bl	800a3d2 <USB_ReadInterrupts>
 8006148:	4603      	mov	r3, r0
 800614a:	f003 0308 	and.w	r3, r3, #8
 800614e:	2b08      	cmp	r3, #8
 8006150:	d10a      	bne.n	8006168 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f005 ff19 	bl	800bf8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	695a      	ldr	r2, [r3, #20]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f002 0208 	and.w	r2, r2, #8
 8006166:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4618      	mov	r0, r3
 800616e:	f004 f930 	bl	800a3d2 <USB_ReadInterrupts>
 8006172:	4603      	mov	r3, r0
 8006174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800617c:	d10f      	bne.n	800619e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	b2db      	uxtb	r3, r3
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f005 ff7b 	bl	800c084 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	695a      	ldr	r2, [r3, #20]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800619c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f004 f915 	bl	800a3d2 <USB_ReadInterrupts>
 80061a8:	4603      	mov	r3, r0
 80061aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061b2:	d10f      	bne.n	80061d4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80061b4:	2300      	movs	r3, #0
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f005 ff4e 	bl	800c060 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	695a      	ldr	r2, [r3, #20]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80061d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4618      	mov	r0, r3
 80061da:	f004 f8fa 	bl	800a3d2 <USB_ReadInterrupts>
 80061de:	4603      	mov	r3, r0
 80061e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80061e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e8:	d10a      	bne.n	8006200 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f005 ff5c 	bl	800c0a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695a      	ldr	r2, [r3, #20]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80061fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4618      	mov	r0, r3
 8006206:	f004 f8e4 	bl	800a3d2 <USB_ReadInterrupts>
 800620a:	4603      	mov	r3, r0
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b04      	cmp	r3, #4
 8006212:	d115      	bne.n	8006240 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	f003 0304 	and.w	r3, r3, #4
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f005 ff4c 	bl	800c0c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6859      	ldr	r1, [r3, #4]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	430a      	orrs	r2, r1
 800623a:	605a      	str	r2, [r3, #4]
 800623c:	e000      	b.n	8006240 <HAL_PCD_IRQHandler+0x75e>
      return;
 800623e:	bf00      	nop
    }
  }
}
 8006240:	3734      	adds	r7, #52	; 0x34
 8006242:	46bd      	mov	sp, r7
 8006244:	bd90      	pop	{r4, r7, pc}

08006246 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b082      	sub	sp, #8
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	460b      	mov	r3, r1
 8006250:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_PCD_SetAddress+0x1a>
 800625c:	2302      	movs	r3, #2
 800625e:	e013      	b.n	8006288 <HAL_PCD_SetAddress+0x42>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	78fa      	ldrb	r2, [r7, #3]
 800626c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	78fa      	ldrb	r2, [r7, #3]
 8006276:	4611      	mov	r1, r2
 8006278:	4618      	mov	r0, r3
 800627a:	f004 f854 	bl	800a326 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	4608      	mov	r0, r1
 800629a:	4611      	mov	r1, r2
 800629c:	461a      	mov	r2, r3
 800629e:	4603      	mov	r3, r0
 80062a0:	70fb      	strb	r3, [r7, #3]
 80062a2:	460b      	mov	r3, r1
 80062a4:	803b      	strh	r3, [r7, #0]
 80062a6:	4613      	mov	r3, r2
 80062a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80062ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	da0f      	bge.n	80062d6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062b6:	78fb      	ldrb	r3, [r7, #3]
 80062b8:	f003 020f 	and.w	r2, r3, #15
 80062bc:	4613      	mov	r3, r2
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	1a9b      	subs	r3, r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	3338      	adds	r3, #56	; 0x38
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	4413      	add	r3, r2
 80062ca:	3304      	adds	r3, #4
 80062cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2201      	movs	r2, #1
 80062d2:	705a      	strb	r2, [r3, #1]
 80062d4:	e00f      	b.n	80062f6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062d6:	78fb      	ldrb	r3, [r7, #3]
 80062d8:	f003 020f 	and.w	r2, r3, #15
 80062dc:	4613      	mov	r3, r2
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	1a9b      	subs	r3, r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	4413      	add	r3, r2
 80062ec:	3304      	adds	r3, #4
 80062ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80062f6:	78fb      	ldrb	r3, [r7, #3]
 80062f8:	f003 030f 	and.w	r3, r3, #15
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006302:	883a      	ldrh	r2, [r7, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	78ba      	ldrb	r2, [r7, #2]
 800630c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	785b      	ldrb	r3, [r3, #1]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d004      	beq.n	8006320 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	b29a      	uxth	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006320:	78bb      	ldrb	r3, [r7, #2]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d102      	bne.n	800632c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006332:	2b01      	cmp	r3, #1
 8006334:	d101      	bne.n	800633a <HAL_PCD_EP_Open+0xaa>
 8006336:	2302      	movs	r3, #2
 8006338:	e00e      	b.n	8006358 <HAL_PCD_EP_Open+0xc8>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68f9      	ldr	r1, [r7, #12]
 8006348:	4618      	mov	r0, r3
 800634a:	f003 f9bf 	bl	80096cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006356:	7afb      	ldrb	r3, [r7, #11]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800636c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006370:	2b00      	cmp	r3, #0
 8006372:	da0f      	bge.n	8006394 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006374:	78fb      	ldrb	r3, [r7, #3]
 8006376:	f003 020f 	and.w	r2, r3, #15
 800637a:	4613      	mov	r3, r2
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	1a9b      	subs	r3, r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	3338      	adds	r3, #56	; 0x38
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	4413      	add	r3, r2
 8006388:	3304      	adds	r3, #4
 800638a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2201      	movs	r2, #1
 8006390:	705a      	strb	r2, [r3, #1]
 8006392:	e00f      	b.n	80063b4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	f003 020f 	and.w	r2, r3, #15
 800639a:	4613      	mov	r3, r2
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	1a9b      	subs	r3, r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	4413      	add	r3, r2
 80063aa:	3304      	adds	r3, #4
 80063ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80063b4:	78fb      	ldrb	r3, [r7, #3]
 80063b6:	f003 030f 	and.w	r3, r3, #15
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d101      	bne.n	80063ce <HAL_PCD_EP_Close+0x6e>
 80063ca:	2302      	movs	r3, #2
 80063cc:	e00e      	b.n	80063ec <HAL_PCD_EP_Close+0x8c>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68f9      	ldr	r1, [r7, #12]
 80063dc:	4618      	mov	r0, r3
 80063de:	f003 f9fd 	bl	80097dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	607a      	str	r2, [r7, #4]
 80063fe:	603b      	str	r3, [r7, #0]
 8006400:	460b      	mov	r3, r1
 8006402:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006404:	7afb      	ldrb	r3, [r7, #11]
 8006406:	f003 020f 	and.w	r2, r3, #15
 800640a:	4613      	mov	r3, r2
 800640c:	00db      	lsls	r3, r3, #3
 800640e:	1a9b      	subs	r3, r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	4413      	add	r3, r2
 800641a:	3304      	adds	r3, #4
 800641c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2200      	movs	r2, #0
 800642e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2200      	movs	r2, #0
 8006434:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006436:	7afb      	ldrb	r3, [r7, #11]
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	b2da      	uxtb	r2, r3
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d102      	bne.n	8006450 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006450:	7afb      	ldrb	r3, [r7, #11]
 8006452:	f003 030f 	and.w	r3, r3, #15
 8006456:	2b00      	cmp	r3, #0
 8006458:	d109      	bne.n	800646e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6818      	ldr	r0, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	b2db      	uxtb	r3, r3
 8006464:	461a      	mov	r2, r3
 8006466:	6979      	ldr	r1, [r7, #20]
 8006468:	f003 fcd8 	bl	8009e1c <USB_EP0StartXfer>
 800646c:	e008      	b.n	8006480 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6818      	ldr	r0, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	b2db      	uxtb	r3, r3
 8006478:	461a      	mov	r2, r3
 800647a:	6979      	ldr	r1, [r7, #20]
 800647c:	f003 fa8a 	bl	8009994 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b086      	sub	sp, #24
 800648e:	af00      	add	r7, sp, #0
 8006490:	60f8      	str	r0, [r7, #12]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	603b      	str	r3, [r7, #0]
 8006496:	460b      	mov	r3, r1
 8006498:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800649a:	7afb      	ldrb	r3, [r7, #11]
 800649c:	f003 020f 	and.w	r2, r3, #15
 80064a0:	4613      	mov	r3, r2
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	1a9b      	subs	r3, r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	3338      	adds	r3, #56	; 0x38
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4413      	add	r3, r2
 80064ae:	3304      	adds	r3, #4
 80064b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2200      	movs	r2, #0
 80064c2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2201      	movs	r2, #1
 80064c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064ca:	7afb      	ldrb	r3, [r7, #11]
 80064cc:	f003 030f 	and.w	r3, r3, #15
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d102      	bne.n	80064e4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80064e4:	7afb      	ldrb	r3, [r7, #11]
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d109      	bne.n	8006502 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6818      	ldr	r0, [r3, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	461a      	mov	r2, r3
 80064fa:	6979      	ldr	r1, [r7, #20]
 80064fc:	f003 fc8e 	bl	8009e1c <USB_EP0StartXfer>
 8006500:	e008      	b.n	8006514 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	b2db      	uxtb	r3, r3
 800650c:	461a      	mov	r2, r3
 800650e:	6979      	ldr	r1, [r7, #20]
 8006510:	f003 fa40 	bl	8009994 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	460b      	mov	r3, r1
 8006528:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800652a:	78fb      	ldrb	r3, [r7, #3]
 800652c:	f003 020f 	and.w	r2, r3, #15
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	429a      	cmp	r2, r3
 8006536:	d901      	bls.n	800653c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e050      	b.n	80065de <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800653c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006540:	2b00      	cmp	r3, #0
 8006542:	da0f      	bge.n	8006564 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006544:	78fb      	ldrb	r3, [r7, #3]
 8006546:	f003 020f 	and.w	r2, r3, #15
 800654a:	4613      	mov	r3, r2
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	1a9b      	subs	r3, r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	3338      	adds	r3, #56	; 0x38
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	4413      	add	r3, r2
 8006558:	3304      	adds	r3, #4
 800655a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	705a      	strb	r2, [r3, #1]
 8006562:	e00d      	b.n	8006580 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006564:	78fa      	ldrb	r2, [r7, #3]
 8006566:	4613      	mov	r3, r2
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	1a9b      	subs	r3, r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	4413      	add	r3, r2
 8006576:	3304      	adds	r3, #4
 8006578:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2201      	movs	r2, #1
 8006584:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006586:	78fb      	ldrb	r3, [r7, #3]
 8006588:	f003 030f 	and.w	r3, r3, #15
 800658c:	b2da      	uxtb	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_PCD_EP_SetStall+0x82>
 800659c:	2302      	movs	r3, #2
 800659e:	e01e      	b.n	80065de <HAL_PCD_EP_SetStall+0xc0>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68f9      	ldr	r1, [r7, #12]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f003 fde5 	bl	800a17e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80065b4:	78fb      	ldrb	r3, [r7, #3]
 80065b6:	f003 030f 	and.w	r3, r3, #15
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10a      	bne.n	80065d4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	b2d9      	uxtb	r1, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80065ce:	461a      	mov	r2, r3
 80065d0:	f003 ffc4 	bl	800a55c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b084      	sub	sp, #16
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	460b      	mov	r3, r1
 80065f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80065f2:	78fb      	ldrb	r3, [r7, #3]
 80065f4:	f003 020f 	and.w	r2, r3, #15
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d901      	bls.n	8006604 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e042      	b.n	800668a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006608:	2b00      	cmp	r3, #0
 800660a:	da0f      	bge.n	800662c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	f003 020f 	and.w	r2, r3, #15
 8006612:	4613      	mov	r3, r2
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	1a9b      	subs	r3, r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	3338      	adds	r3, #56	; 0x38
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	4413      	add	r3, r2
 8006620:	3304      	adds	r3, #4
 8006622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2201      	movs	r2, #1
 8006628:	705a      	strb	r2, [r3, #1]
 800662a:	e00f      	b.n	800664c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800662c:	78fb      	ldrb	r3, [r7, #3]
 800662e:	f003 020f 	and.w	r2, r3, #15
 8006632:	4613      	mov	r3, r2
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	1a9b      	subs	r3, r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	4413      	add	r3, r2
 8006642:	3304      	adds	r3, #4
 8006644:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006652:	78fb      	ldrb	r3, [r7, #3]
 8006654:	f003 030f 	and.w	r3, r3, #15
 8006658:	b2da      	uxtb	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006664:	2b01      	cmp	r3, #1
 8006666:	d101      	bne.n	800666c <HAL_PCD_EP_ClrStall+0x86>
 8006668:	2302      	movs	r3, #2
 800666a:	e00e      	b.n	800668a <HAL_PCD_EP_ClrStall+0xa4>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68f9      	ldr	r1, [r7, #12]
 800667a:	4618      	mov	r0, r3
 800667c:	f003 fded 	bl	800a25a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b08a      	sub	sp, #40	; 0x28
 8006696:	af02      	add	r7, sp, #8
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	4613      	mov	r3, r2
 80066aa:	00db      	lsls	r3, r3, #3
 80066ac:	1a9b      	subs	r3, r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	3338      	adds	r3, #56	; 0x38
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	4413      	add	r3, r2
 80066b6:	3304      	adds	r3, #4
 80066b8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	699a      	ldr	r2, [r3, #24]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d901      	bls.n	80066ca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e06c      	b.n	80067a4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	695a      	ldr	r2, [r3, #20]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	69fa      	ldr	r2, [r7, #28]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d902      	bls.n	80066e6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	3303      	adds	r3, #3
 80066ea:	089b      	lsrs	r3, r3, #2
 80066ec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066ee:	e02b      	b.n	8006748 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	695a      	ldr	r2, [r3, #20]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	69fa      	ldr	r2, [r7, #28]
 8006702:	429a      	cmp	r2, r3
 8006704:	d902      	bls.n	800670c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	3303      	adds	r3, #3
 8006710:	089b      	lsrs	r3, r3, #2
 8006712:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	68d9      	ldr	r1, [r3, #12]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	b2da      	uxtb	r2, r3
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006724:	b2db      	uxtb	r3, r3
 8006726:	9300      	str	r3, [sp, #0]
 8006728:	4603      	mov	r3, r0
 800672a:	6978      	ldr	r0, [r7, #20]
 800672c:	f003 fcc9 	bl	800a0c2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	441a      	add	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	699a      	ldr	r2, [r3, #24]
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	441a      	add	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	4413      	add	r3, r2
 8006750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	b29b      	uxth	r3, r3
 8006758:	69ba      	ldr	r2, [r7, #24]
 800675a:	429a      	cmp	r2, r3
 800675c:	d809      	bhi.n	8006772 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	699a      	ldr	r2, [r3, #24]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006766:	429a      	cmp	r2, r3
 8006768:	d203      	bcs.n	8006772 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1be      	bne.n	80066f0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	695a      	ldr	r2, [r3, #20]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	429a      	cmp	r2, r3
 800677c:	d811      	bhi.n	80067a2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	f003 030f 	and.w	r3, r3, #15
 8006784:	2201      	movs	r2, #1
 8006786:	fa02 f303 	lsl.w	r3, r2, r3
 800678a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	43db      	mvns	r3, r3
 8006798:	6939      	ldr	r1, [r7, #16]
 800679a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800679e:	4013      	ands	r3, r2
 80067a0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3720      	adds	r7, #32
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	333c      	adds	r3, #60	; 0x3c
 80067c4:	3304      	adds	r3, #4
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	f040 80a0 	bne.w	8006924 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f003 0308 	and.w	r3, r3, #8
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d015      	beq.n	800681a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4a72      	ldr	r2, [pc, #456]	; (80069bc <PCD_EP_OutXfrComplete_int+0x210>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	f240 80dd 	bls.w	80069b2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f000 80d7 	beq.w	80069b2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006810:	461a      	mov	r2, r3
 8006812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006816:	6093      	str	r3, [r2, #8]
 8006818:	e0cb      	b.n	80069b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f003 0320 	and.w	r3, r3, #32
 8006820:	2b00      	cmp	r3, #0
 8006822:	d009      	beq.n	8006838 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006830:	461a      	mov	r2, r3
 8006832:	2320      	movs	r3, #32
 8006834:	6093      	str	r3, [r2, #8]
 8006836:	e0bc      	b.n	80069b2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800683e:	2b00      	cmp	r3, #0
 8006840:	f040 80b7 	bne.w	80069b2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4a5d      	ldr	r2, [pc, #372]	; (80069bc <PCD_EP_OutXfrComplete_int+0x210>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d90f      	bls.n	800686c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006862:	461a      	mov	r2, r3
 8006864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006868:	6093      	str	r3, [r2, #8]
 800686a:	e0a2      	b.n	80069b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	4613      	mov	r3, r2
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	1a9b      	subs	r3, r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	440b      	add	r3, r1
 800687a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800687e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	0159      	lsls	r1, r3, #5
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	440b      	add	r3, r1
 8006888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006892:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	4613      	mov	r3, r2
 800689a:	00db      	lsls	r3, r3, #3
 800689c:	1a9b      	subs	r3, r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4403      	add	r3, r0
 80068a2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80068a6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80068a8:	6879      	ldr	r1, [r7, #4]
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	4613      	mov	r3, r2
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	1a9b      	subs	r3, r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	440b      	add	r3, r1
 80068b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80068ba:	6819      	ldr	r1, [r3, #0]
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	4613      	mov	r3, r2
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	1a9b      	subs	r3, r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4403      	add	r3, r0
 80068ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4419      	add	r1, r3
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	4613      	mov	r3, r2
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	1a9b      	subs	r3, r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4403      	add	r3, r0
 80068e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80068e4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d114      	bne.n	8006916 <PCD_EP_OutXfrComplete_int+0x16a>
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	4613      	mov	r3, r2
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	1a9b      	subs	r3, r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	440b      	add	r3, r1
 80068fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d108      	bne.n	8006916 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6818      	ldr	r0, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800690e:	461a      	mov	r2, r3
 8006910:	2101      	movs	r1, #1
 8006912:	f003 fe23 	bl	800a55c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	b2db      	uxtb	r3, r3
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f005 faff 	bl	800bf20 <HAL_PCD_DataOutStageCallback>
 8006922:	e046      	b.n	80069b2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4a26      	ldr	r2, [pc, #152]	; (80069c0 <PCD_EP_OutXfrComplete_int+0x214>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d124      	bne.n	8006976 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00a      	beq.n	800694c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006942:	461a      	mov	r2, r3
 8006944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006948:	6093      	str	r3, [r2, #8]
 800694a:	e032      	b.n	80069b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f003 0320 	and.w	r3, r3, #32
 8006952:	2b00      	cmp	r3, #0
 8006954:	d008      	beq.n	8006968 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	4413      	add	r3, r2
 800695e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006962:	461a      	mov	r2, r3
 8006964:	2320      	movs	r3, #32
 8006966:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	b2db      	uxtb	r3, r3
 800696c:	4619      	mov	r1, r3
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f005 fad6 	bl	800bf20 <HAL_PCD_DataOutStageCallback>
 8006974:	e01d      	b.n	80069b2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d114      	bne.n	80069a6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800697c:	6879      	ldr	r1, [r7, #4]
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	4613      	mov	r3, r2
 8006982:	00db      	lsls	r3, r3, #3
 8006984:	1a9b      	subs	r3, r3, r2
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	440b      	add	r3, r1
 800698a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d108      	bne.n	80069a6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6818      	ldr	r0, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800699e:	461a      	mov	r2, r3
 80069a0:	2100      	movs	r1, #0
 80069a2:	f003 fddb 	bl	800a55c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f005 fab7 	bl	800bf20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	4f54300a 	.word	0x4f54300a
 80069c0:	4f54310a 	.word	0x4f54310a

080069c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	333c      	adds	r3, #60	; 0x3c
 80069dc:	3304      	adds	r3, #4
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4a15      	ldr	r2, [pc, #84]	; (8006a4c <PCD_EP_OutSetupPacket_int+0x88>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d90e      	bls.n	8006a18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d009      	beq.n	8006a18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a10:	461a      	mov	r2, r3
 8006a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f005 fa6f 	bl	800befc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4a0a      	ldr	r2, [pc, #40]	; (8006a4c <PCD_EP_OutSetupPacket_int+0x88>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d90c      	bls.n	8006a40 <PCD_EP_OutSetupPacket_int+0x7c>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d108      	bne.n	8006a40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6818      	ldr	r0, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006a38:	461a      	mov	r2, r3
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	f003 fd8e 	bl	800a55c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	4f54300a 	.word	0x4f54300a

08006a50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	70fb      	strb	r3, [r7, #3]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006a68:	78fb      	ldrb	r3, [r7, #3]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d107      	bne.n	8006a7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006a6e:	883b      	ldrh	r3, [r7, #0]
 8006a70:	0419      	lsls	r1, r3, #16
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8006a7c:	e028      	b.n	8006ad0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a84:	0c1b      	lsrs	r3, r3, #16
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	4413      	add	r3, r2
 8006a8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	73fb      	strb	r3, [r7, #15]
 8006a90:	e00d      	b.n	8006aae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
 8006a98:	3340      	adds	r3, #64	; 0x40
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	0c1b      	lsrs	r3, r3, #16
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	73fb      	strb	r3, [r7, #15]
 8006aae:	7bfa      	ldrb	r2, [r7, #15]
 8006ab0:	78fb      	ldrb	r3, [r7, #3]
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d3ec      	bcc.n	8006a92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006ab8:	883b      	ldrh	r3, [r7, #0]
 8006aba:	0418      	lsls	r0, r3, #16
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6819      	ldr	r1, [r3, #0]
 8006ac0:	78fb      	ldrb	r3, [r7, #3]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	4302      	orrs	r2, r0
 8006ac8:	3340      	adds	r3, #64	; 0x40
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	440b      	add	r3, r1
 8006ace:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	887a      	ldrh	r2, [r7, #2]
 8006af0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e25b      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d075      	beq.n	8006c22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b36:	4ba3      	ldr	r3, [pc, #652]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f003 030c 	and.w	r3, r3, #12
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d00c      	beq.n	8006b5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b42:	4ba0      	ldr	r3, [pc, #640]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b4a:	2b08      	cmp	r3, #8
 8006b4c:	d112      	bne.n	8006b74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b4e:	4b9d      	ldr	r3, [pc, #628]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b5a:	d10b      	bne.n	8006b74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b5c:	4b99      	ldr	r3, [pc, #612]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d05b      	beq.n	8006c20 <HAL_RCC_OscConfig+0x108>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d157      	bne.n	8006c20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e236      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b7c:	d106      	bne.n	8006b8c <HAL_RCC_OscConfig+0x74>
 8006b7e:	4b91      	ldr	r3, [pc, #580]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a90      	ldr	r2, [pc, #576]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b88:	6013      	str	r3, [r2, #0]
 8006b8a:	e01d      	b.n	8006bc8 <HAL_RCC_OscConfig+0xb0>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b94:	d10c      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x98>
 8006b96:	4b8b      	ldr	r3, [pc, #556]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a8a      	ldr	r2, [pc, #552]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	4b88      	ldr	r3, [pc, #544]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a87      	ldr	r2, [pc, #540]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bac:	6013      	str	r3, [r2, #0]
 8006bae:	e00b      	b.n	8006bc8 <HAL_RCC_OscConfig+0xb0>
 8006bb0:	4b84      	ldr	r3, [pc, #528]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a83      	ldr	r2, [pc, #524]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bba:	6013      	str	r3, [r2, #0]
 8006bbc:	4b81      	ldr	r3, [pc, #516]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a80      	ldr	r2, [pc, #512]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d013      	beq.n	8006bf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bd0:	f7fb fecc 	bl	800296c <HAL_GetTick>
 8006bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bd6:	e008      	b.n	8006bea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bd8:	f7fb fec8 	bl	800296c <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	2b64      	cmp	r3, #100	; 0x64
 8006be4:	d901      	bls.n	8006bea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e1fb      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bea:	4b76      	ldr	r3, [pc, #472]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d0f0      	beq.n	8006bd8 <HAL_RCC_OscConfig+0xc0>
 8006bf6:	e014      	b.n	8006c22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bf8:	f7fb feb8 	bl	800296c <HAL_GetTick>
 8006bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bfe:	e008      	b.n	8006c12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c00:	f7fb feb4 	bl	800296c <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	2b64      	cmp	r3, #100	; 0x64
 8006c0c:	d901      	bls.n	8006c12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e1e7      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c12:	4b6c      	ldr	r3, [pc, #432]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1f0      	bne.n	8006c00 <HAL_RCC_OscConfig+0xe8>
 8006c1e:	e000      	b.n	8006c22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d063      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c2e:	4b65      	ldr	r3, [pc, #404]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f003 030c 	and.w	r3, r3, #12
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00b      	beq.n	8006c52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c3a:	4b62      	ldr	r3, [pc, #392]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c42:	2b08      	cmp	r3, #8
 8006c44:	d11c      	bne.n	8006c80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c46:	4b5f      	ldr	r3, [pc, #380]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d116      	bne.n	8006c80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c52:	4b5c      	ldr	r3, [pc, #368]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d005      	beq.n	8006c6a <HAL_RCC_OscConfig+0x152>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d001      	beq.n	8006c6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e1bb      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c6a:	4b56      	ldr	r3, [pc, #344]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	4952      	ldr	r1, [pc, #328]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c7e:	e03a      	b.n	8006cf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d020      	beq.n	8006cca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c88:	4b4f      	ldr	r3, [pc, #316]	; (8006dc8 <HAL_RCC_OscConfig+0x2b0>)
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c8e:	f7fb fe6d 	bl	800296c <HAL_GetTick>
 8006c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c94:	e008      	b.n	8006ca8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c96:	f7fb fe69 	bl	800296c <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d901      	bls.n	8006ca8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e19c      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ca8:	4b46      	ldr	r3, [pc, #280]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d0f0      	beq.n	8006c96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cb4:	4b43      	ldr	r3, [pc, #268]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	00db      	lsls	r3, r3, #3
 8006cc2:	4940      	ldr	r1, [pc, #256]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	600b      	str	r3, [r1, #0]
 8006cc8:	e015      	b.n	8006cf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cca:	4b3f      	ldr	r3, [pc, #252]	; (8006dc8 <HAL_RCC_OscConfig+0x2b0>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd0:	f7fb fe4c 	bl	800296c <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cd6:	e008      	b.n	8006cea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cd8:	f7fb fe48 	bl	800296c <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e17b      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cea:	4b36      	ldr	r3, [pc, #216]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1f0      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0308 	and.w	r3, r3, #8
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d030      	beq.n	8006d64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d016      	beq.n	8006d38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d0a:	4b30      	ldr	r3, [pc, #192]	; (8006dcc <HAL_RCC_OscConfig+0x2b4>)
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d10:	f7fb fe2c 	bl	800296c <HAL_GetTick>
 8006d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d16:	e008      	b.n	8006d2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d18:	f7fb fe28 	bl	800296c <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e15b      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d2a:	4b26      	ldr	r3, [pc, #152]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d0f0      	beq.n	8006d18 <HAL_RCC_OscConfig+0x200>
 8006d36:	e015      	b.n	8006d64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d38:	4b24      	ldr	r3, [pc, #144]	; (8006dcc <HAL_RCC_OscConfig+0x2b4>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d3e:	f7fb fe15 	bl	800296c <HAL_GetTick>
 8006d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d44:	e008      	b.n	8006d58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d46:	f7fb fe11 	bl	800296c <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d901      	bls.n	8006d58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e144      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d58:	4b1a      	ldr	r3, [pc, #104]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1f0      	bne.n	8006d46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 80a0 	beq.w	8006eb2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d72:	2300      	movs	r3, #0
 8006d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d76:	4b13      	ldr	r3, [pc, #76]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10f      	bne.n	8006da2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d82:	2300      	movs	r3, #0
 8006d84:	60bb      	str	r3, [r7, #8]
 8006d86:	4b0f      	ldr	r3, [pc, #60]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	4a0e      	ldr	r2, [pc, #56]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d90:	6413      	str	r3, [r2, #64]	; 0x40
 8006d92:	4b0c      	ldr	r3, [pc, #48]	; (8006dc4 <HAL_RCC_OscConfig+0x2ac>)
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d9a:	60bb      	str	r3, [r7, #8]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006da2:	4b0b      	ldr	r3, [pc, #44]	; (8006dd0 <HAL_RCC_OscConfig+0x2b8>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d121      	bne.n	8006df2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dae:	4b08      	ldr	r3, [pc, #32]	; (8006dd0 <HAL_RCC_OscConfig+0x2b8>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a07      	ldr	r2, [pc, #28]	; (8006dd0 <HAL_RCC_OscConfig+0x2b8>)
 8006db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dba:	f7fb fdd7 	bl	800296c <HAL_GetTick>
 8006dbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dc0:	e011      	b.n	8006de6 <HAL_RCC_OscConfig+0x2ce>
 8006dc2:	bf00      	nop
 8006dc4:	40023800 	.word	0x40023800
 8006dc8:	42470000 	.word	0x42470000
 8006dcc:	42470e80 	.word	0x42470e80
 8006dd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dd4:	f7fb fdca 	bl	800296c <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e0fd      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006de6:	4b81      	ldr	r3, [pc, #516]	; (8006fec <HAL_RCC_OscConfig+0x4d4>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d0f0      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d106      	bne.n	8006e08 <HAL_RCC_OscConfig+0x2f0>
 8006dfa:	4b7d      	ldr	r3, [pc, #500]	; (8006ff0 <HAL_RCC_OscConfig+0x4d8>)
 8006dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfe:	4a7c      	ldr	r2, [pc, #496]	; (8006ff0 <HAL_RCC_OscConfig+0x4d8>)
 8006e00:	f043 0301 	orr.w	r3, r3, #1
 8006e04:	6713      	str	r3, [r2, #112]	; 0x70
 8006e06:	e01c      	b.n	8006e42 <HAL_RCC_OscConfig+0x32a>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	2b05      	cmp	r3, #5
 8006e0e:	d10c      	bne.n	8006e2a <HAL_RCC_OscConfig+0x312>
 8006e10:	4b77      	ldr	r3, [pc, #476]	; (8006ff0 <HAL_RCC_OscConfig+0x4d8>)
 8006e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e14:	4a76      	ldr	r2, [pc, #472]	; (8006ff0 <HAL_RCC_OscConfig+0x4d8>)
 8006e16:	f043 0304 	orr.w	r3, r3, #4
 8006e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e1c:	4b74      	ldr	r3, [pc, #464]	; (8006ff0 <HAL_RCC_OscConfig+0x4d8>)
 8006e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e20:	4a73      	ldr	r2, [pc, #460]	; (8006ff0 <HAL_RCC_OscConfig+0x4d8>)
 8006e22:	f043 0301 	orr.w	r3, r3, #1
 8006e26:	6713      	str	r3, [r2, #112]	; 0x70
 8006e28:	e00b      	b.n	8006e42 <HAL_RCC_OscConfig+0x32a>
 8006e2a:	4b71      	ldr	r3, [pc, #452]	; (8006ff0 <HAL_RCC_OscConfig+0x4d8>)
 8006e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2e:	4a70      	ldr	r2, [pc, #448]	; (8006ff0 <HAL_RCC_OscConfig+0x4d8>)
 8006e30:	f023 0301 	bic.w	r3, r3, #1
 8006e34:	6713      	str	r3, [r2, #112]	; 0x70
 8006e36:	4b6e      	ldr	r3, [pc, #440]	; (8006ff0 <HAL_RCC_OscConfig+0x4d8>)
 8006e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3a:	4a6d      	ldr	r2, [pc, #436]	; (8006ff0 <HAL_RCC_OscConfig+0x4d8>)
 8006e3c:	f023 0304 	bic.w	r3, r3, #4
 8006e40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d015      	beq.n	8006e76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e4a:	f7fb fd8f 	bl	800296c <HAL_GetTick>
 8006e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e50:	e00a      	b.n	8006e68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e52:	f7fb fd8b 	bl	800296c <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d901      	bls.n	8006e68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e0bc      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e68:	4b61      	ldr	r3, [pc, #388]	; (8006ff0 <HAL_RCC_OscConfig+0x4d8>)
 8006e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6c:	f003 0302 	and.w	r3, r3, #2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d0ee      	beq.n	8006e52 <HAL_RCC_OscConfig+0x33a>
 8006e74:	e014      	b.n	8006ea0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e76:	f7fb fd79 	bl	800296c <HAL_GetTick>
 8006e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e7c:	e00a      	b.n	8006e94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e7e:	f7fb fd75 	bl	800296c <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d901      	bls.n	8006e94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e0a6      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e94:	4b56      	ldr	r3, [pc, #344]	; (8006ff0 <HAL_RCC_OscConfig+0x4d8>)
 8006e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e98:	f003 0302 	and.w	r3, r3, #2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1ee      	bne.n	8006e7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d105      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ea6:	4b52      	ldr	r3, [pc, #328]	; (8006ff0 <HAL_RCC_OscConfig+0x4d8>)
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eaa:	4a51      	ldr	r2, [pc, #324]	; (8006ff0 <HAL_RCC_OscConfig+0x4d8>)
 8006eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006eb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 8092 	beq.w	8006fe0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ebc:	4b4c      	ldr	r3, [pc, #304]	; (8006ff0 <HAL_RCC_OscConfig+0x4d8>)
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f003 030c 	and.w	r3, r3, #12
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d05c      	beq.n	8006f82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d141      	bne.n	8006f54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ed0:	4b48      	ldr	r3, [pc, #288]	; (8006ff4 <HAL_RCC_OscConfig+0x4dc>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ed6:	f7fb fd49 	bl	800296c <HAL_GetTick>
 8006eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006edc:	e008      	b.n	8006ef0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ede:	f7fb fd45 	bl	800296c <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d901      	bls.n	8006ef0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e078      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ef0:	4b3f      	ldr	r3, [pc, #252]	; (8006ff0 <HAL_RCC_OscConfig+0x4d8>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1f0      	bne.n	8006ede <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	69da      	ldr	r2, [r3, #28]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	431a      	orrs	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0a:	019b      	lsls	r3, r3, #6
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f12:	085b      	lsrs	r3, r3, #1
 8006f14:	3b01      	subs	r3, #1
 8006f16:	041b      	lsls	r3, r3, #16
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1e:	061b      	lsls	r3, r3, #24
 8006f20:	4933      	ldr	r1, [pc, #204]	; (8006ff0 <HAL_RCC_OscConfig+0x4d8>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f26:	4b33      	ldr	r3, [pc, #204]	; (8006ff4 <HAL_RCC_OscConfig+0x4dc>)
 8006f28:	2201      	movs	r2, #1
 8006f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f2c:	f7fb fd1e 	bl	800296c <HAL_GetTick>
 8006f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f32:	e008      	b.n	8006f46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f34:	f7fb fd1a 	bl	800296c <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e04d      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f46:	4b2a      	ldr	r3, [pc, #168]	; (8006ff0 <HAL_RCC_OscConfig+0x4d8>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d0f0      	beq.n	8006f34 <HAL_RCC_OscConfig+0x41c>
 8006f52:	e045      	b.n	8006fe0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f54:	4b27      	ldr	r3, [pc, #156]	; (8006ff4 <HAL_RCC_OscConfig+0x4dc>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f5a:	f7fb fd07 	bl	800296c <HAL_GetTick>
 8006f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f60:	e008      	b.n	8006f74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f62:	f7fb fd03 	bl	800296c <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d901      	bls.n	8006f74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e036      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f74:	4b1e      	ldr	r3, [pc, #120]	; (8006ff0 <HAL_RCC_OscConfig+0x4d8>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1f0      	bne.n	8006f62 <HAL_RCC_OscConfig+0x44a>
 8006f80:	e02e      	b.n	8006fe0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d101      	bne.n	8006f8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e029      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f8e:	4b18      	ldr	r3, [pc, #96]	; (8006ff0 <HAL_RCC_OscConfig+0x4d8>)
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d11c      	bne.n	8006fdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d115      	bne.n	8006fdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d10d      	bne.n	8006fdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d106      	bne.n	8006fdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d001      	beq.n	8006fe0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e000      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	40007000 	.word	0x40007000
 8006ff0:	40023800 	.word	0x40023800
 8006ff4:	42470060 	.word	0x42470060

08006ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e0cc      	b.n	80071a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800700c:	4b68      	ldr	r3, [pc, #416]	; (80071b0 <HAL_RCC_ClockConfig+0x1b8>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 030f 	and.w	r3, r3, #15
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	429a      	cmp	r2, r3
 8007018:	d90c      	bls.n	8007034 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800701a:	4b65      	ldr	r3, [pc, #404]	; (80071b0 <HAL_RCC_ClockConfig+0x1b8>)
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	b2d2      	uxtb	r2, r2
 8007020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007022:	4b63      	ldr	r3, [pc, #396]	; (80071b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 030f 	and.w	r3, r3, #15
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	429a      	cmp	r2, r3
 800702e:	d001      	beq.n	8007034 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e0b8      	b.n	80071a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0302 	and.w	r3, r3, #2
 800703c:	2b00      	cmp	r3, #0
 800703e:	d020      	beq.n	8007082 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0304 	and.w	r3, r3, #4
 8007048:	2b00      	cmp	r3, #0
 800704a:	d005      	beq.n	8007058 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800704c:	4b59      	ldr	r3, [pc, #356]	; (80071b4 <HAL_RCC_ClockConfig+0x1bc>)
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	4a58      	ldr	r2, [pc, #352]	; (80071b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007052:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007056:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0308 	and.w	r3, r3, #8
 8007060:	2b00      	cmp	r3, #0
 8007062:	d005      	beq.n	8007070 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007064:	4b53      	ldr	r3, [pc, #332]	; (80071b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	4a52      	ldr	r2, [pc, #328]	; (80071b4 <HAL_RCC_ClockConfig+0x1bc>)
 800706a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800706e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007070:	4b50      	ldr	r3, [pc, #320]	; (80071b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	494d      	ldr	r1, [pc, #308]	; (80071b4 <HAL_RCC_ClockConfig+0x1bc>)
 800707e:	4313      	orrs	r3, r2
 8007080:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d044      	beq.n	8007118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d107      	bne.n	80070a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007096:	4b47      	ldr	r3, [pc, #284]	; (80071b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d119      	bne.n	80070d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e07f      	b.n	80071a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d003      	beq.n	80070b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070b2:	2b03      	cmp	r3, #3
 80070b4:	d107      	bne.n	80070c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070b6:	4b3f      	ldr	r3, [pc, #252]	; (80071b4 <HAL_RCC_ClockConfig+0x1bc>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d109      	bne.n	80070d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e06f      	b.n	80071a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070c6:	4b3b      	ldr	r3, [pc, #236]	; (80071b4 <HAL_RCC_ClockConfig+0x1bc>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e067      	b.n	80071a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070d6:	4b37      	ldr	r3, [pc, #220]	; (80071b4 <HAL_RCC_ClockConfig+0x1bc>)
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f023 0203 	bic.w	r2, r3, #3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	4934      	ldr	r1, [pc, #208]	; (80071b4 <HAL_RCC_ClockConfig+0x1bc>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070e8:	f7fb fc40 	bl	800296c <HAL_GetTick>
 80070ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ee:	e00a      	b.n	8007106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070f0:	f7fb fc3c 	bl	800296c <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80070fe:	4293      	cmp	r3, r2
 8007100:	d901      	bls.n	8007106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e04f      	b.n	80071a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007106:	4b2b      	ldr	r3, [pc, #172]	; (80071b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f003 020c 	and.w	r2, r3, #12
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	429a      	cmp	r2, r3
 8007116:	d1eb      	bne.n	80070f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007118:	4b25      	ldr	r3, [pc, #148]	; (80071b0 <HAL_RCC_ClockConfig+0x1b8>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 030f 	and.w	r3, r3, #15
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	429a      	cmp	r2, r3
 8007124:	d20c      	bcs.n	8007140 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007126:	4b22      	ldr	r3, [pc, #136]	; (80071b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	b2d2      	uxtb	r2, r2
 800712c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800712e:	4b20      	ldr	r3, [pc, #128]	; (80071b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 030f 	and.w	r3, r3, #15
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	429a      	cmp	r2, r3
 800713a:	d001      	beq.n	8007140 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e032      	b.n	80071a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0304 	and.w	r3, r3, #4
 8007148:	2b00      	cmp	r3, #0
 800714a:	d008      	beq.n	800715e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800714c:	4b19      	ldr	r3, [pc, #100]	; (80071b4 <HAL_RCC_ClockConfig+0x1bc>)
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	4916      	ldr	r1, [pc, #88]	; (80071b4 <HAL_RCC_ClockConfig+0x1bc>)
 800715a:	4313      	orrs	r3, r2
 800715c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0308 	and.w	r3, r3, #8
 8007166:	2b00      	cmp	r3, #0
 8007168:	d009      	beq.n	800717e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800716a:	4b12      	ldr	r3, [pc, #72]	; (80071b4 <HAL_RCC_ClockConfig+0x1bc>)
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	490e      	ldr	r1, [pc, #56]	; (80071b4 <HAL_RCC_ClockConfig+0x1bc>)
 800717a:	4313      	orrs	r3, r2
 800717c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800717e:	f000 f821 	bl	80071c4 <HAL_RCC_GetSysClockFreq>
 8007182:	4601      	mov	r1, r0
 8007184:	4b0b      	ldr	r3, [pc, #44]	; (80071b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	091b      	lsrs	r3, r3, #4
 800718a:	f003 030f 	and.w	r3, r3, #15
 800718e:	4a0a      	ldr	r2, [pc, #40]	; (80071b8 <HAL_RCC_ClockConfig+0x1c0>)
 8007190:	5cd3      	ldrb	r3, [r2, r3]
 8007192:	fa21 f303 	lsr.w	r3, r1, r3
 8007196:	4a09      	ldr	r2, [pc, #36]	; (80071bc <HAL_RCC_ClockConfig+0x1c4>)
 8007198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800719a:	4b09      	ldr	r3, [pc, #36]	; (80071c0 <HAL_RCC_ClockConfig+0x1c8>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fb fba0 	bl	80028e4 <HAL_InitTick>

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	40023c00 	.word	0x40023c00
 80071b4:	40023800 	.word	0x40023800
 80071b8:	08040398 	.word	0x08040398
 80071bc:	2000008c 	.word	0x2000008c
 80071c0:	20000090 	.word	0x20000090

080071c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	607b      	str	r3, [r7, #4]
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]
 80071d2:	2300      	movs	r3, #0
 80071d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071da:	4b63      	ldr	r3, [pc, #396]	; (8007368 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f003 030c 	and.w	r3, r3, #12
 80071e2:	2b04      	cmp	r3, #4
 80071e4:	d007      	beq.n	80071f6 <HAL_RCC_GetSysClockFreq+0x32>
 80071e6:	2b08      	cmp	r3, #8
 80071e8:	d008      	beq.n	80071fc <HAL_RCC_GetSysClockFreq+0x38>
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f040 80b4 	bne.w	8007358 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071f0:	4b5e      	ldr	r3, [pc, #376]	; (800736c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80071f2:	60bb      	str	r3, [r7, #8]
       break;
 80071f4:	e0b3      	b.n	800735e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071f6:	4b5e      	ldr	r3, [pc, #376]	; (8007370 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80071f8:	60bb      	str	r3, [r7, #8]
      break;
 80071fa:	e0b0      	b.n	800735e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071fc:	4b5a      	ldr	r3, [pc, #360]	; (8007368 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007204:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007206:	4b58      	ldr	r3, [pc, #352]	; (8007368 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d04a      	beq.n	80072a8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007212:	4b55      	ldr	r3, [pc, #340]	; (8007368 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	099b      	lsrs	r3, r3, #6
 8007218:	f04f 0400 	mov.w	r4, #0
 800721c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007220:	f04f 0200 	mov.w	r2, #0
 8007224:	ea03 0501 	and.w	r5, r3, r1
 8007228:	ea04 0602 	and.w	r6, r4, r2
 800722c:	4629      	mov	r1, r5
 800722e:	4632      	mov	r2, r6
 8007230:	f04f 0300 	mov.w	r3, #0
 8007234:	f04f 0400 	mov.w	r4, #0
 8007238:	0154      	lsls	r4, r2, #5
 800723a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800723e:	014b      	lsls	r3, r1, #5
 8007240:	4619      	mov	r1, r3
 8007242:	4622      	mov	r2, r4
 8007244:	1b49      	subs	r1, r1, r5
 8007246:	eb62 0206 	sbc.w	r2, r2, r6
 800724a:	f04f 0300 	mov.w	r3, #0
 800724e:	f04f 0400 	mov.w	r4, #0
 8007252:	0194      	lsls	r4, r2, #6
 8007254:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007258:	018b      	lsls	r3, r1, #6
 800725a:	1a5b      	subs	r3, r3, r1
 800725c:	eb64 0402 	sbc.w	r4, r4, r2
 8007260:	f04f 0100 	mov.w	r1, #0
 8007264:	f04f 0200 	mov.w	r2, #0
 8007268:	00e2      	lsls	r2, r4, #3
 800726a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800726e:	00d9      	lsls	r1, r3, #3
 8007270:	460b      	mov	r3, r1
 8007272:	4614      	mov	r4, r2
 8007274:	195b      	adds	r3, r3, r5
 8007276:	eb44 0406 	adc.w	r4, r4, r6
 800727a:	f04f 0100 	mov.w	r1, #0
 800727e:	f04f 0200 	mov.w	r2, #0
 8007282:	0262      	lsls	r2, r4, #9
 8007284:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007288:	0259      	lsls	r1, r3, #9
 800728a:	460b      	mov	r3, r1
 800728c:	4614      	mov	r4, r2
 800728e:	4618      	mov	r0, r3
 8007290:	4621      	mov	r1, r4
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f04f 0400 	mov.w	r4, #0
 8007298:	461a      	mov	r2, r3
 800729a:	4623      	mov	r3, r4
 800729c:	f7f8 ff94 	bl	80001c8 <__aeabi_uldivmod>
 80072a0:	4603      	mov	r3, r0
 80072a2:	460c      	mov	r4, r1
 80072a4:	60fb      	str	r3, [r7, #12]
 80072a6:	e049      	b.n	800733c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072a8:	4b2f      	ldr	r3, [pc, #188]	; (8007368 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	099b      	lsrs	r3, r3, #6
 80072ae:	f04f 0400 	mov.w	r4, #0
 80072b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80072b6:	f04f 0200 	mov.w	r2, #0
 80072ba:	ea03 0501 	and.w	r5, r3, r1
 80072be:	ea04 0602 	and.w	r6, r4, r2
 80072c2:	4629      	mov	r1, r5
 80072c4:	4632      	mov	r2, r6
 80072c6:	f04f 0300 	mov.w	r3, #0
 80072ca:	f04f 0400 	mov.w	r4, #0
 80072ce:	0154      	lsls	r4, r2, #5
 80072d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80072d4:	014b      	lsls	r3, r1, #5
 80072d6:	4619      	mov	r1, r3
 80072d8:	4622      	mov	r2, r4
 80072da:	1b49      	subs	r1, r1, r5
 80072dc:	eb62 0206 	sbc.w	r2, r2, r6
 80072e0:	f04f 0300 	mov.w	r3, #0
 80072e4:	f04f 0400 	mov.w	r4, #0
 80072e8:	0194      	lsls	r4, r2, #6
 80072ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80072ee:	018b      	lsls	r3, r1, #6
 80072f0:	1a5b      	subs	r3, r3, r1
 80072f2:	eb64 0402 	sbc.w	r4, r4, r2
 80072f6:	f04f 0100 	mov.w	r1, #0
 80072fa:	f04f 0200 	mov.w	r2, #0
 80072fe:	00e2      	lsls	r2, r4, #3
 8007300:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007304:	00d9      	lsls	r1, r3, #3
 8007306:	460b      	mov	r3, r1
 8007308:	4614      	mov	r4, r2
 800730a:	195b      	adds	r3, r3, r5
 800730c:	eb44 0406 	adc.w	r4, r4, r6
 8007310:	f04f 0100 	mov.w	r1, #0
 8007314:	f04f 0200 	mov.w	r2, #0
 8007318:	02a2      	lsls	r2, r4, #10
 800731a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800731e:	0299      	lsls	r1, r3, #10
 8007320:	460b      	mov	r3, r1
 8007322:	4614      	mov	r4, r2
 8007324:	4618      	mov	r0, r3
 8007326:	4621      	mov	r1, r4
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f04f 0400 	mov.w	r4, #0
 800732e:	461a      	mov	r2, r3
 8007330:	4623      	mov	r3, r4
 8007332:	f7f8 ff49 	bl	80001c8 <__aeabi_uldivmod>
 8007336:	4603      	mov	r3, r0
 8007338:	460c      	mov	r4, r1
 800733a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800733c:	4b0a      	ldr	r3, [pc, #40]	; (8007368 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	0c1b      	lsrs	r3, r3, #16
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	3301      	adds	r3, #1
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	fbb2 f3f3 	udiv	r3, r2, r3
 8007354:	60bb      	str	r3, [r7, #8]
      break;
 8007356:	e002      	b.n	800735e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007358:	4b04      	ldr	r3, [pc, #16]	; (800736c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800735a:	60bb      	str	r3, [r7, #8]
      break;
 800735c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800735e:	68bb      	ldr	r3, [r7, #8]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007368:	40023800 	.word	0x40023800
 800736c:	00f42400 	.word	0x00f42400
 8007370:	007a1200 	.word	0x007a1200

08007374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007374:	b480      	push	{r7}
 8007376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007378:	4b03      	ldr	r3, [pc, #12]	; (8007388 <HAL_RCC_GetHCLKFreq+0x14>)
 800737a:	681b      	ldr	r3, [r3, #0]
}
 800737c:	4618      	mov	r0, r3
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	2000008c 	.word	0x2000008c

0800738c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007390:	f7ff fff0 	bl	8007374 <HAL_RCC_GetHCLKFreq>
 8007394:	4601      	mov	r1, r0
 8007396:	4b05      	ldr	r3, [pc, #20]	; (80073ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	0a9b      	lsrs	r3, r3, #10
 800739c:	f003 0307 	and.w	r3, r3, #7
 80073a0:	4a03      	ldr	r2, [pc, #12]	; (80073b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073a2:	5cd3      	ldrb	r3, [r2, r3]
 80073a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	40023800 	.word	0x40023800
 80073b0:	080403a8 	.word	0x080403a8

080073b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80073b8:	f7ff ffdc 	bl	8007374 <HAL_RCC_GetHCLKFreq>
 80073bc:	4601      	mov	r1, r0
 80073be:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	0b5b      	lsrs	r3, r3, #13
 80073c4:	f003 0307 	and.w	r3, r3, #7
 80073c8:	4a03      	ldr	r2, [pc, #12]	; (80073d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073ca:	5cd3      	ldrb	r3, [r2, r3]
 80073cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	40023800 	.word	0x40023800
 80073d8:	080403a8 	.word	0x080403a8

080073dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e056      	b.n	800749c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d106      	bne.n	800740e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7fa ff79 	bl	8002300 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2202      	movs	r2, #2
 8007412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007424:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	431a      	orrs	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	431a      	orrs	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	431a      	orrs	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800744a:	431a      	orrs	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	431a      	orrs	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	ea42 0103 	orr.w	r1, r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	0c1b      	lsrs	r3, r3, #16
 800746c:	f003 0104 	and.w	r1, r3, #4
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	69da      	ldr	r2, [r3, #28]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800748a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b088      	sub	sp, #32
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	603b      	str	r3, [r7, #0]
 80074b0:	4613      	mov	r3, r2
 80074b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d101      	bne.n	80074c6 <HAL_SPI_Transmit+0x22>
 80074c2:	2302      	movs	r3, #2
 80074c4:	e11e      	b.n	8007704 <HAL_SPI_Transmit+0x260>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074ce:	f7fb fa4d 	bl	800296c <HAL_GetTick>
 80074d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80074d4:	88fb      	ldrh	r3, [r7, #6]
 80074d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d002      	beq.n	80074ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80074e4:	2302      	movs	r3, #2
 80074e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074e8:	e103      	b.n	80076f2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d002      	beq.n	80074f6 <HAL_SPI_Transmit+0x52>
 80074f0:	88fb      	ldrh	r3, [r7, #6]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d102      	bne.n	80074fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074fa:	e0fa      	b.n	80076f2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2203      	movs	r2, #3
 8007500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	88fa      	ldrh	r2, [r7, #6]
 8007514:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	88fa      	ldrh	r2, [r7, #6]
 800751a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007542:	d107      	bne.n	8007554 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007552:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800755e:	2b40      	cmp	r3, #64	; 0x40
 8007560:	d007      	beq.n	8007572 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007570:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800757a:	d14b      	bne.n	8007614 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d002      	beq.n	800758a <HAL_SPI_Transmit+0xe6>
 8007584:	8afb      	ldrh	r3, [r7, #22]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d13e      	bne.n	8007608 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758e:	881a      	ldrh	r2, [r3, #0]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759a:	1c9a      	adds	r2, r3, #2
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	3b01      	subs	r3, #1
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80075ae:	e02b      	b.n	8007608 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f003 0302 	and.w	r3, r3, #2
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d112      	bne.n	80075e4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c2:	881a      	ldrh	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ce:	1c9a      	adds	r2, r3, #2
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075d8:	b29b      	uxth	r3, r3
 80075da:	3b01      	subs	r3, #1
 80075dc:	b29a      	uxth	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80075e2:	e011      	b.n	8007608 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075e4:	f7fb f9c2 	bl	800296c <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d803      	bhi.n	80075fc <HAL_SPI_Transmit+0x158>
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075fa:	d102      	bne.n	8007602 <HAL_SPI_Transmit+0x15e>
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d102      	bne.n	8007608 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007606:	e074      	b.n	80076f2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800760c:	b29b      	uxth	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1ce      	bne.n	80075b0 <HAL_SPI_Transmit+0x10c>
 8007612:	e04c      	b.n	80076ae <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <HAL_SPI_Transmit+0x17e>
 800761c:	8afb      	ldrh	r3, [r7, #22]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d140      	bne.n	80076a4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	330c      	adds	r3, #12
 800762c:	7812      	ldrb	r2, [r2, #0]
 800762e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800763e:	b29b      	uxth	r3, r3
 8007640:	3b01      	subs	r3, #1
 8007642:	b29a      	uxth	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007648:	e02c      	b.n	80076a4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f003 0302 	and.w	r3, r3, #2
 8007654:	2b02      	cmp	r3, #2
 8007656:	d113      	bne.n	8007680 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	330c      	adds	r3, #12
 8007662:	7812      	ldrb	r2, [r2, #0]
 8007664:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766a:	1c5a      	adds	r2, r3, #1
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007674:	b29b      	uxth	r3, r3
 8007676:	3b01      	subs	r3, #1
 8007678:	b29a      	uxth	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	86da      	strh	r2, [r3, #54]	; 0x36
 800767e:	e011      	b.n	80076a4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007680:	f7fb f974 	bl	800296c <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	429a      	cmp	r2, r3
 800768e:	d803      	bhi.n	8007698 <HAL_SPI_Transmit+0x1f4>
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007696:	d102      	bne.n	800769e <HAL_SPI_Transmit+0x1fa>
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d102      	bne.n	80076a4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076a2:	e026      	b.n	80076f2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1cd      	bne.n	800764a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 fcc4 	bl	8008040 <SPI_EndRxTxTransaction>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d002      	beq.n	80076c4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2220      	movs	r2, #32
 80076c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10a      	bne.n	80076e2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076cc:	2300      	movs	r3, #0
 80076ce:	613b      	str	r3, [r7, #16]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	613b      	str	r3, [r7, #16]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	613b      	str	r3, [r7, #16]
 80076e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	77fb      	strb	r3, [r7, #31]
 80076ee:	e000      	b.n	80076f2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80076f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007702:	7ffb      	ldrb	r3, [r7, #31]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3720      	adds	r7, #32
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b088      	sub	sp, #32
 8007710:	af02      	add	r7, sp, #8
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	603b      	str	r3, [r7, #0]
 8007718:	4613      	mov	r3, r2
 800771a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800771c:	2300      	movs	r3, #0
 800771e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007728:	d112      	bne.n	8007750 <HAL_SPI_Receive+0x44>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10e      	bne.n	8007750 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2204      	movs	r2, #4
 8007736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800773a:	88fa      	ldrh	r2, [r7, #6]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	4613      	mov	r3, r2
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	68b9      	ldr	r1, [r7, #8]
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 f8e9 	bl	800791e <HAL_SPI_TransmitReceive>
 800774c:	4603      	mov	r3, r0
 800774e:	e0e2      	b.n	8007916 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007756:	2b01      	cmp	r3, #1
 8007758:	d101      	bne.n	800775e <HAL_SPI_Receive+0x52>
 800775a:	2302      	movs	r3, #2
 800775c:	e0db      	b.n	8007916 <HAL_SPI_Receive+0x20a>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007766:	f7fb f901 	bl	800296c <HAL_GetTick>
 800776a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b01      	cmp	r3, #1
 8007776:	d002      	beq.n	800777e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007778:	2302      	movs	r3, #2
 800777a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800777c:	e0c2      	b.n	8007904 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d002      	beq.n	800778a <HAL_SPI_Receive+0x7e>
 8007784:	88fb      	ldrh	r3, [r7, #6]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d102      	bne.n	8007790 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800778e:	e0b9      	b.n	8007904 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2204      	movs	r2, #4
 8007794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	88fa      	ldrh	r2, [r7, #6]
 80077a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	88fa      	ldrh	r2, [r7, #6]
 80077ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077d6:	d107      	bne.n	80077e8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077e6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f2:	2b40      	cmp	r3, #64	; 0x40
 80077f4:	d007      	beq.n	8007806 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007804:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d162      	bne.n	80078d4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800780e:	e02e      	b.n	800786e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b01      	cmp	r3, #1
 800781c:	d115      	bne.n	800784a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f103 020c 	add.w	r2, r3, #12
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782a:	7812      	ldrb	r2, [r2, #0]
 800782c:	b2d2      	uxtb	r2, r2
 800782e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007834:	1c5a      	adds	r2, r3, #1
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800783e:	b29b      	uxth	r3, r3
 8007840:	3b01      	subs	r3, #1
 8007842:	b29a      	uxth	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007848:	e011      	b.n	800786e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800784a:	f7fb f88f 	bl	800296c <HAL_GetTick>
 800784e:	4602      	mov	r2, r0
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	683a      	ldr	r2, [r7, #0]
 8007856:	429a      	cmp	r2, r3
 8007858:	d803      	bhi.n	8007862 <HAL_SPI_Receive+0x156>
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007860:	d102      	bne.n	8007868 <HAL_SPI_Receive+0x15c>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d102      	bne.n	800786e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800786c:	e04a      	b.n	8007904 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007872:	b29b      	uxth	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1cb      	bne.n	8007810 <HAL_SPI_Receive+0x104>
 8007878:	e031      	b.n	80078de <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b01      	cmp	r3, #1
 8007886:	d113      	bne.n	80078b0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68da      	ldr	r2, [r3, #12]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007892:	b292      	uxth	r2, r2
 8007894:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789a:	1c9a      	adds	r2, r3, #2
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	3b01      	subs	r3, #1
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078ae:	e011      	b.n	80078d4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078b0:	f7fb f85c 	bl	800296c <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d803      	bhi.n	80078c8 <HAL_SPI_Receive+0x1bc>
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078c6:	d102      	bne.n	80078ce <HAL_SPI_Receive+0x1c2>
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d102      	bne.n	80078d4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80078d2:	e017      	b.n	8007904 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078d8:	b29b      	uxth	r3, r3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1cd      	bne.n	800787a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 fb46 	bl	8007f74 <SPI_EndRxTransaction>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d002      	beq.n	80078f4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2220      	movs	r2, #32
 80078f2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	75fb      	strb	r3, [r7, #23]
 8007900:	e000      	b.n	8007904 <HAL_SPI_Receive+0x1f8>
  }

error :
 8007902:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007914:	7dfb      	ldrb	r3, [r7, #23]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3718      	adds	r7, #24
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b08c      	sub	sp, #48	; 0x30
 8007922:	af00      	add	r7, sp, #0
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	60b9      	str	r1, [r7, #8]
 8007928:	607a      	str	r2, [r7, #4]
 800792a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800792c:	2301      	movs	r3, #1
 800792e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007930:	2300      	movs	r3, #0
 8007932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800793c:	2b01      	cmp	r3, #1
 800793e:	d101      	bne.n	8007944 <HAL_SPI_TransmitReceive+0x26>
 8007940:	2302      	movs	r3, #2
 8007942:	e18a      	b.n	8007c5a <HAL_SPI_TransmitReceive+0x33c>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800794c:	f7fb f80e 	bl	800296c <HAL_GetTick>
 8007950:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007958:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007962:	887b      	ldrh	r3, [r7, #2]
 8007964:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007966:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800796a:	2b01      	cmp	r3, #1
 800796c:	d00f      	beq.n	800798e <HAL_SPI_TransmitReceive+0x70>
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007974:	d107      	bne.n	8007986 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d103      	bne.n	8007986 <HAL_SPI_TransmitReceive+0x68>
 800797e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007982:	2b04      	cmp	r3, #4
 8007984:	d003      	beq.n	800798e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007986:	2302      	movs	r3, #2
 8007988:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800798c:	e15b      	b.n	8007c46 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d005      	beq.n	80079a0 <HAL_SPI_TransmitReceive+0x82>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <HAL_SPI_TransmitReceive+0x82>
 800799a:	887b      	ldrh	r3, [r7, #2]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d103      	bne.n	80079a8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80079a6:	e14e      	b.n	8007c46 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	d003      	beq.n	80079bc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2205      	movs	r2, #5
 80079b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	887a      	ldrh	r2, [r7, #2]
 80079cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	887a      	ldrh	r2, [r7, #2]
 80079d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	887a      	ldrh	r2, [r7, #2]
 80079de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	887a      	ldrh	r2, [r7, #2]
 80079e4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fc:	2b40      	cmp	r3, #64	; 0x40
 80079fe:	d007      	beq.n	8007a10 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a18:	d178      	bne.n	8007b0c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <HAL_SPI_TransmitReceive+0x10a>
 8007a22:	8b7b      	ldrh	r3, [r7, #26]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d166      	bne.n	8007af6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2c:	881a      	ldrh	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a38:	1c9a      	adds	r2, r3, #2
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	3b01      	subs	r3, #1
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a4c:	e053      	b.n	8007af6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d11b      	bne.n	8007a94 <HAL_SPI_TransmitReceive+0x176>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d016      	beq.n	8007a94 <HAL_SPI_TransmitReceive+0x176>
 8007a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d113      	bne.n	8007a94 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a70:	881a      	ldrh	r2, [r3, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7c:	1c9a      	adds	r2, r3, #2
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d119      	bne.n	8007ad6 <HAL_SPI_TransmitReceive+0x1b8>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d014      	beq.n	8007ad6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab6:	b292      	uxth	r2, r2
 8007ab8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abe:	1c9a      	adds	r2, r3, #2
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	3b01      	subs	r3, #1
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ad6:	f7fa ff49 	bl	800296c <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d807      	bhi.n	8007af6 <HAL_SPI_TransmitReceive+0x1d8>
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aec:	d003      	beq.n	8007af6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007af4:	e0a7      	b.n	8007c46 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1a6      	bne.n	8007a4e <HAL_SPI_TransmitReceive+0x130>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1a1      	bne.n	8007a4e <HAL_SPI_TransmitReceive+0x130>
 8007b0a:	e07c      	b.n	8007c06 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <HAL_SPI_TransmitReceive+0x1fc>
 8007b14:	8b7b      	ldrh	r3, [r7, #26]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d16b      	bne.n	8007bf2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	330c      	adds	r3, #12
 8007b24:	7812      	ldrb	r2, [r2, #0]
 8007b26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2c:	1c5a      	adds	r2, r3, #1
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b40:	e057      	b.n	8007bf2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d11c      	bne.n	8007b8a <HAL_SPI_TransmitReceive+0x26c>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d017      	beq.n	8007b8a <HAL_SPI_TransmitReceive+0x26c>
 8007b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d114      	bne.n	8007b8a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	330c      	adds	r3, #12
 8007b6a:	7812      	ldrb	r2, [r2, #0]
 8007b6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b72:	1c5a      	adds	r2, r3, #1
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d119      	bne.n	8007bcc <HAL_SPI_TransmitReceive+0x2ae>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d014      	beq.n	8007bcc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68da      	ldr	r2, [r3, #12]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bac:	b2d2      	uxtb	r2, r2
 8007bae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb4:	1c5a      	adds	r2, r3, #1
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007bcc:	f7fa fece 	bl	800296c <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d803      	bhi.n	8007be4 <HAL_SPI_TransmitReceive+0x2c6>
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007be2:	d102      	bne.n	8007bea <HAL_SPI_TransmitReceive+0x2cc>
 8007be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d103      	bne.n	8007bf2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007bf0:	e029      	b.n	8007c46 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1a2      	bne.n	8007b42 <HAL_SPI_TransmitReceive+0x224>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d19d      	bne.n	8007b42 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 fa18 	bl	8008040 <SPI_EndRxTxTransaction>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d006      	beq.n	8007c24 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007c22:	e010      	b.n	8007c46 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10b      	bne.n	8007c44 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	617b      	str	r3, [r7, #20]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	617b      	str	r3, [r7, #20]
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	e000      	b.n	8007c46 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007c44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3730      	adds	r7, #48	; 0x30
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
	...

08007c64 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b088      	sub	sp, #32
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	099b      	lsrs	r3, r3, #6
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10f      	bne.n	8007ca8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00a      	beq.n	8007ca8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	099b      	lsrs	r3, r3, #6
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d004      	beq.n	8007ca8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	4798      	blx	r3
    return;
 8007ca6:	e0d8      	b.n	8007e5a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	085b      	lsrs	r3, r3, #1
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00a      	beq.n	8007cca <HAL_SPI_IRQHandler+0x66>
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	09db      	lsrs	r3, r3, #7
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d004      	beq.n	8007cca <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	4798      	blx	r3
    return;
 8007cc8:	e0c7      	b.n	8007e5a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	095b      	lsrs	r3, r3, #5
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10c      	bne.n	8007cf0 <HAL_SPI_IRQHandler+0x8c>
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	099b      	lsrs	r3, r3, #6
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d106      	bne.n	8007cf0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	0a1b      	lsrs	r3, r3, #8
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 80b5 	beq.w	8007e5a <HAL_SPI_IRQHandler+0x1f6>
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	095b      	lsrs	r3, r3, #5
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 80ae 	beq.w	8007e5a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	099b      	lsrs	r3, r3, #6
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d023      	beq.n	8007d52 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d011      	beq.n	8007d3a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1a:	f043 0204 	orr.w	r2, r3, #4
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d22:	2300      	movs	r3, #0
 8007d24:	617b      	str	r3, [r7, #20]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	617b      	str	r3, [r7, #20]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	617b      	str	r3, [r7, #20]
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	e00b      	b.n	8007d52 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	613b      	str	r3, [r7, #16]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	613b      	str	r3, [r7, #16]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	613b      	str	r3, [r7, #16]
 8007d4e:	693b      	ldr	r3, [r7, #16]
        return;
 8007d50:	e083      	b.n	8007e5a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	095b      	lsrs	r3, r3, #5
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d014      	beq.n	8007d88 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d62:	f043 0201 	orr.w	r2, r3, #1
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60fb      	str	r3, [r7, #12]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	60fb      	str	r3, [r7, #12]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d84:	601a      	str	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	0a1b      	lsrs	r3, r3, #8
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00c      	beq.n	8007dae <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d98:	f043 0208 	orr.w	r2, r3, #8
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007da0:	2300      	movs	r3, #0
 8007da2:	60bb      	str	r3, [r7, #8]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	60bb      	str	r3, [r7, #8]
 8007dac:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d050      	beq.n	8007e58 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007dc4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	f003 0302 	and.w	r3, r3, #2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d104      	bne.n	8007de2 <HAL_SPI_IRQHandler+0x17e>
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d034      	beq.n	8007e4c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f022 0203 	bic.w	r2, r2, #3
 8007df0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d011      	beq.n	8007e1e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dfe:	4a18      	ldr	r2, [pc, #96]	; (8007e60 <HAL_SPI_IRQHandler+0x1fc>)
 8007e00:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fb fa4b 	bl	80032a2 <HAL_DMA_Abort_IT>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d005      	beq.n	8007e1e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d016      	beq.n	8007e54 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e2a:	4a0d      	ldr	r2, [pc, #52]	; (8007e60 <HAL_SPI_IRQHandler+0x1fc>)
 8007e2c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fb fa35 	bl	80032a2 <HAL_DMA_Abort_IT>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007e4a:	e003      	b.n	8007e54 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f809 	bl	8007e64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007e52:	e000      	b.n	8007e56 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007e54:	bf00      	nop
    return;
 8007e56:	bf00      	nop
 8007e58:	bf00      	nop
  }
}
 8007e5a:	3720      	adds	r7, #32
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	08007e79 	.word	0x08007e79

08007e64 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e84:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f7ff ffe6 	bl	8007e64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e98:	bf00      	nop
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	603b      	str	r3, [r7, #0]
 8007eac:	4613      	mov	r3, r2
 8007eae:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007eb0:	e04c      	b.n	8007f4c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007eb8:	d048      	beq.n	8007f4c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007eba:	f7fa fd57 	bl	800296c <HAL_GetTick>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d902      	bls.n	8007ed0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d13d      	bne.n	8007f4c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ede:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ee8:	d111      	bne.n	8007f0e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ef2:	d004      	beq.n	8007efe <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007efc:	d107      	bne.n	8007f0e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f16:	d10f      	bne.n	8007f38 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f26:	601a      	str	r2, [r3, #0]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e00f      	b.n	8007f6c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689a      	ldr	r2, [r3, #8]
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	4013      	ands	r3, r2
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	bf0c      	ite	eq
 8007f5c:	2301      	moveq	r3, #1
 8007f5e:	2300      	movne	r3, #0
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	461a      	mov	r2, r3
 8007f64:	79fb      	ldrb	r3, [r7, #7]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d1a3      	bne.n	8007eb2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af02      	add	r7, sp, #8
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f88:	d111      	bne.n	8007fae <SPI_EndRxTransaction+0x3a>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f92:	d004      	beq.n	8007f9e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f9c:	d107      	bne.n	8007fae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fb6:	d12a      	bne.n	800800e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fc0:	d012      	beq.n	8007fe8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2180      	movs	r1, #128	; 0x80
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f7ff ff67 	bl	8007ea0 <SPI_WaitFlagStateUntilTimeout>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d02d      	beq.n	8008034 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fdc:	f043 0220 	orr.w	r2, r3, #32
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e026      	b.n	8008036 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	2101      	movs	r1, #1
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f7ff ff54 	bl	8007ea0 <SPI_WaitFlagStateUntilTimeout>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d01a      	beq.n	8008034 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008002:	f043 0220 	orr.w	r2, r3, #32
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e013      	b.n	8008036 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2200      	movs	r2, #0
 8008016:	2101      	movs	r1, #1
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f7ff ff41 	bl	8007ea0 <SPI_WaitFlagStateUntilTimeout>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d007      	beq.n	8008034 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008028:	f043 0220 	orr.w	r2, r3, #32
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e000      	b.n	8008036 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b088      	sub	sp, #32
 8008044:	af02      	add	r7, sp, #8
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800804c:	4b1b      	ldr	r3, [pc, #108]	; (80080bc <SPI_EndRxTxTransaction+0x7c>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a1b      	ldr	r2, [pc, #108]	; (80080c0 <SPI_EndRxTxTransaction+0x80>)
 8008052:	fba2 2303 	umull	r2, r3, r2, r3
 8008056:	0d5b      	lsrs	r3, r3, #21
 8008058:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800805c:	fb02 f303 	mul.w	r3, r2, r3
 8008060:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800806a:	d112      	bne.n	8008092 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	2200      	movs	r2, #0
 8008074:	2180      	movs	r1, #128	; 0x80
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f7ff ff12 	bl	8007ea0 <SPI_WaitFlagStateUntilTimeout>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d016      	beq.n	80080b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008086:	f043 0220 	orr.w	r2, r3, #32
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e00f      	b.n	80080b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00a      	beq.n	80080ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	3b01      	subs	r3, #1
 800809c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a8:	2b80      	cmp	r3, #128	; 0x80
 80080aa:	d0f2      	beq.n	8008092 <SPI_EndRxTxTransaction+0x52>
 80080ac:	e000      	b.n	80080b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80080ae:	bf00      	nop
  }

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3718      	adds	r7, #24
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	2000008c 	.word	0x2000008c
 80080c0:	165e9f81 	.word	0x165e9f81

080080c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e01d      	b.n	8008112 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d106      	bne.n	80080f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7fa fa98 	bl	8002620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2202      	movs	r2, #2
 80080f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	3304      	adds	r3, #4
 8008100:	4619      	mov	r1, r3
 8008102:	4610      	mov	r0, r2
 8008104:	f000 fa14 	bl	8008530 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800811a:	b480      	push	{r7}
 800811c:	b085      	sub	sp, #20
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68da      	ldr	r2, [r3, #12]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f042 0201 	orr.w	r2, r2, #1
 8008130:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f003 0307 	and.w	r3, r3, #7
 800813c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2b06      	cmp	r3, #6
 8008142:	d007      	beq.n	8008154 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f042 0201 	orr.w	r2, r2, #1
 8008152:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b082      	sub	sp, #8
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	f003 0302 	and.w	r3, r3, #2
 8008174:	2b02      	cmp	r3, #2
 8008176:	d122      	bne.n	80081be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	f003 0302 	and.w	r3, r3, #2
 8008182:	2b02      	cmp	r3, #2
 8008184:	d11b      	bne.n	80081be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f06f 0202 	mvn.w	r2, #2
 800818e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	f003 0303 	and.w	r3, r3, #3
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d003      	beq.n	80081ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f9a5 	bl	80084f4 <HAL_TIM_IC_CaptureCallback>
 80081aa:	e005      	b.n	80081b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f997 	bl	80084e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f9a8 	bl	8008508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	f003 0304 	and.w	r3, r3, #4
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	d122      	bne.n	8008212 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	f003 0304 	and.w	r3, r3, #4
 80081d6:	2b04      	cmp	r3, #4
 80081d8:	d11b      	bne.n	8008212 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f06f 0204 	mvn.w	r2, #4
 80081e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2202      	movs	r2, #2
 80081e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d003      	beq.n	8008200 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 f97b 	bl	80084f4 <HAL_TIM_IC_CaptureCallback>
 80081fe:	e005      	b.n	800820c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f96d 	bl	80084e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f97e 	bl	8008508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	f003 0308 	and.w	r3, r3, #8
 800821c:	2b08      	cmp	r3, #8
 800821e:	d122      	bne.n	8008266 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	f003 0308 	and.w	r3, r3, #8
 800822a:	2b08      	cmp	r3, #8
 800822c:	d11b      	bne.n	8008266 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f06f 0208 	mvn.w	r2, #8
 8008236:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2204      	movs	r2, #4
 800823c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	69db      	ldr	r3, [r3, #28]
 8008244:	f003 0303 	and.w	r3, r3, #3
 8008248:	2b00      	cmp	r3, #0
 800824a:	d003      	beq.n	8008254 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f951 	bl	80084f4 <HAL_TIM_IC_CaptureCallback>
 8008252:	e005      	b.n	8008260 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f943 	bl	80084e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f954 	bl	8008508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	f003 0310 	and.w	r3, r3, #16
 8008270:	2b10      	cmp	r3, #16
 8008272:	d122      	bne.n	80082ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	f003 0310 	and.w	r3, r3, #16
 800827e:	2b10      	cmp	r3, #16
 8008280:	d11b      	bne.n	80082ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f06f 0210 	mvn.w	r2, #16
 800828a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2208      	movs	r2, #8
 8008290:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800829c:	2b00      	cmp	r3, #0
 800829e:	d003      	beq.n	80082a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 f927 	bl	80084f4 <HAL_TIM_IC_CaptureCallback>
 80082a6:	e005      	b.n	80082b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f919 	bl	80084e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f92a 	bl	8008508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	f003 0301 	and.w	r3, r3, #1
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d10e      	bne.n	80082e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d107      	bne.n	80082e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f06f 0201 	mvn.w	r2, #1
 80082de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7f9 fea9 	bl	8002038 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f0:	2b80      	cmp	r3, #128	; 0x80
 80082f2:	d10e      	bne.n	8008312 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082fe:	2b80      	cmp	r3, #128	; 0x80
 8008300:	d107      	bne.n	8008312 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800830a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 facf 	bl	80088b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800831c:	2b40      	cmp	r3, #64	; 0x40
 800831e:	d10e      	bne.n	800833e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800832a:	2b40      	cmp	r3, #64	; 0x40
 800832c:	d107      	bne.n	800833e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f8ef 	bl	800851c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	f003 0320 	and.w	r3, r3, #32
 8008348:	2b20      	cmp	r3, #32
 800834a:	d10e      	bne.n	800836a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	f003 0320 	and.w	r3, r3, #32
 8008356:	2b20      	cmp	r3, #32
 8008358:	d107      	bne.n	800836a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f06f 0220 	mvn.w	r2, #32
 8008362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fa99 	bl	800889c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800836a:	bf00      	nop
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b084      	sub	sp, #16
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008382:	2b01      	cmp	r3, #1
 8008384:	d101      	bne.n	800838a <HAL_TIM_ConfigClockSource+0x18>
 8008386:	2302      	movs	r3, #2
 8008388:	e0a6      	b.n	80084d8 <HAL_TIM_ConfigClockSource+0x166>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2202      	movs	r2, #2
 8008396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80083a8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083b0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b40      	cmp	r3, #64	; 0x40
 80083c0:	d067      	beq.n	8008492 <HAL_TIM_ConfigClockSource+0x120>
 80083c2:	2b40      	cmp	r3, #64	; 0x40
 80083c4:	d80b      	bhi.n	80083de <HAL_TIM_ConfigClockSource+0x6c>
 80083c6:	2b10      	cmp	r3, #16
 80083c8:	d073      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0x140>
 80083ca:	2b10      	cmp	r3, #16
 80083cc:	d802      	bhi.n	80083d4 <HAL_TIM_ConfigClockSource+0x62>
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d06f      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80083d2:	e078      	b.n	80084c6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80083d4:	2b20      	cmp	r3, #32
 80083d6:	d06c      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0x140>
 80083d8:	2b30      	cmp	r3, #48	; 0x30
 80083da:	d06a      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80083dc:	e073      	b.n	80084c6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80083de:	2b70      	cmp	r3, #112	; 0x70
 80083e0:	d00d      	beq.n	80083fe <HAL_TIM_ConfigClockSource+0x8c>
 80083e2:	2b70      	cmp	r3, #112	; 0x70
 80083e4:	d804      	bhi.n	80083f0 <HAL_TIM_ConfigClockSource+0x7e>
 80083e6:	2b50      	cmp	r3, #80	; 0x50
 80083e8:	d033      	beq.n	8008452 <HAL_TIM_ConfigClockSource+0xe0>
 80083ea:	2b60      	cmp	r3, #96	; 0x60
 80083ec:	d041      	beq.n	8008472 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80083ee:	e06a      	b.n	80084c6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80083f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083f4:	d066      	beq.n	80084c4 <HAL_TIM_ConfigClockSource+0x152>
 80083f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083fa:	d017      	beq.n	800842c <HAL_TIM_ConfigClockSource+0xba>
      break;
 80083fc:	e063      	b.n	80084c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	6899      	ldr	r1, [r3, #8]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685a      	ldr	r2, [r3, #4]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f000 f9a9 	bl	8008764 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008420:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	609a      	str	r2, [r3, #8]
      break;
 800842a:	e04c      	b.n	80084c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6818      	ldr	r0, [r3, #0]
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	6899      	ldr	r1, [r3, #8]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	f000 f992 	bl	8008764 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800844e:	609a      	str	r2, [r3, #8]
      break;
 8008450:	e039      	b.n	80084c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6818      	ldr	r0, [r3, #0]
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	6859      	ldr	r1, [r3, #4]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	461a      	mov	r2, r3
 8008460:	f000 f906 	bl	8008670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2150      	movs	r1, #80	; 0x50
 800846a:	4618      	mov	r0, r3
 800846c:	f000 f95f 	bl	800872e <TIM_ITRx_SetConfig>
      break;
 8008470:	e029      	b.n	80084c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6818      	ldr	r0, [r3, #0]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	6859      	ldr	r1, [r3, #4]
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	461a      	mov	r2, r3
 8008480:	f000 f925 	bl	80086ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2160      	movs	r1, #96	; 0x60
 800848a:	4618      	mov	r0, r3
 800848c:	f000 f94f 	bl	800872e <TIM_ITRx_SetConfig>
      break;
 8008490:	e019      	b.n	80084c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6818      	ldr	r0, [r3, #0]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	6859      	ldr	r1, [r3, #4]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	461a      	mov	r2, r3
 80084a0:	f000 f8e6 	bl	8008670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2140      	movs	r1, #64	; 0x40
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 f93f 	bl	800872e <TIM_ITRx_SetConfig>
      break;
 80084b0:	e009      	b.n	80084c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4619      	mov	r1, r3
 80084bc:	4610      	mov	r0, r2
 80084be:	f000 f936 	bl	800872e <TIM_ITRx_SetConfig>
      break;
 80084c2:	e000      	b.n	80084c6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80084c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a40      	ldr	r2, [pc, #256]	; (8008644 <TIM_Base_SetConfig+0x114>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d013      	beq.n	8008570 <TIM_Base_SetConfig+0x40>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800854e:	d00f      	beq.n	8008570 <TIM_Base_SetConfig+0x40>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a3d      	ldr	r2, [pc, #244]	; (8008648 <TIM_Base_SetConfig+0x118>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d00b      	beq.n	8008570 <TIM_Base_SetConfig+0x40>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a3c      	ldr	r2, [pc, #240]	; (800864c <TIM_Base_SetConfig+0x11c>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d007      	beq.n	8008570 <TIM_Base_SetConfig+0x40>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a3b      	ldr	r2, [pc, #236]	; (8008650 <TIM_Base_SetConfig+0x120>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d003      	beq.n	8008570 <TIM_Base_SetConfig+0x40>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a3a      	ldr	r2, [pc, #232]	; (8008654 <TIM_Base_SetConfig+0x124>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d108      	bne.n	8008582 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	4313      	orrs	r3, r2
 8008580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a2f      	ldr	r2, [pc, #188]	; (8008644 <TIM_Base_SetConfig+0x114>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d02b      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008590:	d027      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a2c      	ldr	r2, [pc, #176]	; (8008648 <TIM_Base_SetConfig+0x118>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d023      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a2b      	ldr	r2, [pc, #172]	; (800864c <TIM_Base_SetConfig+0x11c>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d01f      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a2a      	ldr	r2, [pc, #168]	; (8008650 <TIM_Base_SetConfig+0x120>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d01b      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a29      	ldr	r2, [pc, #164]	; (8008654 <TIM_Base_SetConfig+0x124>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d017      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a28      	ldr	r2, [pc, #160]	; (8008658 <TIM_Base_SetConfig+0x128>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d013      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a27      	ldr	r2, [pc, #156]	; (800865c <TIM_Base_SetConfig+0x12c>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d00f      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a26      	ldr	r2, [pc, #152]	; (8008660 <TIM_Base_SetConfig+0x130>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d00b      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a25      	ldr	r2, [pc, #148]	; (8008664 <TIM_Base_SetConfig+0x134>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d007      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a24      	ldr	r2, [pc, #144]	; (8008668 <TIM_Base_SetConfig+0x138>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d003      	beq.n	80085e2 <TIM_Base_SetConfig+0xb2>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a23      	ldr	r2, [pc, #140]	; (800866c <TIM_Base_SetConfig+0x13c>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d108      	bne.n	80085f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	4313      	orrs	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	689a      	ldr	r2, [r3, #8]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a0a      	ldr	r2, [pc, #40]	; (8008644 <TIM_Base_SetConfig+0x114>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d003      	beq.n	8008628 <TIM_Base_SetConfig+0xf8>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a0c      	ldr	r2, [pc, #48]	; (8008654 <TIM_Base_SetConfig+0x124>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d103      	bne.n	8008630 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	691a      	ldr	r2, [r3, #16]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	615a      	str	r2, [r3, #20]
}
 8008636:	bf00      	nop
 8008638:	3714      	adds	r7, #20
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	40010000 	.word	0x40010000
 8008648:	40000400 	.word	0x40000400
 800864c:	40000800 	.word	0x40000800
 8008650:	40000c00 	.word	0x40000c00
 8008654:	40010400 	.word	0x40010400
 8008658:	40014000 	.word	0x40014000
 800865c:	40014400 	.word	0x40014400
 8008660:	40014800 	.word	0x40014800
 8008664:	40001800 	.word	0x40001800
 8008668:	40001c00 	.word	0x40001c00
 800866c:	40002000 	.word	0x40002000

08008670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6a1b      	ldr	r3, [r3, #32]
 8008680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	f023 0201 	bic.w	r2, r3, #1
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800869a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	011b      	lsls	r3, r3, #4
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	f023 030a 	bic.w	r3, r3, #10
 80086ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	621a      	str	r2, [r3, #32]
}
 80086c2:	bf00      	nop
 80086c4:	371c      	adds	r7, #28
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b087      	sub	sp, #28
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	60f8      	str	r0, [r7, #12]
 80086d6:	60b9      	str	r1, [r7, #8]
 80086d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	f023 0210 	bic.w	r2, r3, #16
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6a1b      	ldr	r3, [r3, #32]
 80086f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	031b      	lsls	r3, r3, #12
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	4313      	orrs	r3, r2
 8008702:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800870a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	011b      	lsls	r3, r3, #4
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	4313      	orrs	r3, r2
 8008714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	697a      	ldr	r2, [r7, #20]
 800871a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	621a      	str	r2, [r3, #32]
}
 8008722:	bf00      	nop
 8008724:	371c      	adds	r7, #28
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800872e:	b480      	push	{r7}
 8008730:	b085      	sub	sp, #20
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	4313      	orrs	r3, r2
 800874c:	f043 0307 	orr.w	r3, r3, #7
 8008750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	609a      	str	r2, [r3, #8]
}
 8008758:	bf00      	nop
 800875a:	3714      	adds	r7, #20
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008764:	b480      	push	{r7}
 8008766:	b087      	sub	sp, #28
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800877e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	021a      	lsls	r2, r3, #8
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	431a      	orrs	r2, r3
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	4313      	orrs	r3, r2
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	4313      	orrs	r3, r2
 8008790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	609a      	str	r2, [r3, #8]
}
 8008798:	bf00      	nop
 800879a:	371c      	adds	r7, #28
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d101      	bne.n	80087bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087b8:	2302      	movs	r3, #2
 80087ba:	e05a      	b.n	8008872 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2202      	movs	r2, #2
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a21      	ldr	r2, [pc, #132]	; (8008880 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d022      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008808:	d01d      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a1d      	ldr	r2, [pc, #116]	; (8008884 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d018      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a1b      	ldr	r2, [pc, #108]	; (8008888 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d013      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a1a      	ldr	r2, [pc, #104]	; (800888c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d00e      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a18      	ldr	r2, [pc, #96]	; (8008890 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d009      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a17      	ldr	r2, [pc, #92]	; (8008894 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d004      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a15      	ldr	r2, [pc, #84]	; (8008898 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d10c      	bne.n	8008860 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800884c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	4313      	orrs	r3, r2
 8008856:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68ba      	ldr	r2, [r7, #8]
 800885e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	40010000 	.word	0x40010000
 8008884:	40000400 	.word	0x40000400
 8008888:	40000800 	.word	0x40000800
 800888c:	40000c00 	.word	0x40000c00
 8008890:	40010400 	.word	0x40010400
 8008894:	40014000 	.word	0x40014000
 8008898:	40001800 	.word	0x40001800

0800889c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088a4:	bf00      	nop
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088b8:	bf00      	nop
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e03f      	b.n	8008956 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d106      	bne.n	80088f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7f9 ff30 	bl	8002750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2224      	movs	r2, #36	; 0x24
 80088f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68da      	ldr	r2, [r3, #12]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008906:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 f829 	bl	8008960 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	691a      	ldr	r2, [r3, #16]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800891c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	695a      	ldr	r2, [r3, #20]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800892c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68da      	ldr	r2, [r3, #12]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800893c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2220      	movs	r2, #32
 8008948:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2220      	movs	r2, #32
 8008950:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
	...

08008960 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	b085      	sub	sp, #20
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68da      	ldr	r2, [r3, #12]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	430a      	orrs	r2, r1
 800897e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	689a      	ldr	r2, [r3, #8]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	431a      	orrs	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	431a      	orrs	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	69db      	ldr	r3, [r3, #28]
 8008994:	4313      	orrs	r3, r2
 8008996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80089a2:	f023 030c 	bic.w	r3, r3, #12
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	6812      	ldr	r2, [r2, #0]
 80089aa:	68f9      	ldr	r1, [r7, #12]
 80089ac:	430b      	orrs	r3, r1
 80089ae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	699a      	ldr	r2, [r3, #24]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	430a      	orrs	r2, r1
 80089c4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089ce:	f040 818b 	bne.w	8008ce8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4ac1      	ldr	r2, [pc, #772]	; (8008cdc <UART_SetConfig+0x37c>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d005      	beq.n	80089e8 <UART_SetConfig+0x88>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4abf      	ldr	r2, [pc, #764]	; (8008ce0 <UART_SetConfig+0x380>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	f040 80bd 	bne.w	8008b62 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80089e8:	f7fe fce4 	bl	80073b4 <HAL_RCC_GetPCLK2Freq>
 80089ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	461d      	mov	r5, r3
 80089f2:	f04f 0600 	mov.w	r6, #0
 80089f6:	46a8      	mov	r8, r5
 80089f8:	46b1      	mov	r9, r6
 80089fa:	eb18 0308 	adds.w	r3, r8, r8
 80089fe:	eb49 0409 	adc.w	r4, r9, r9
 8008a02:	4698      	mov	r8, r3
 8008a04:	46a1      	mov	r9, r4
 8008a06:	eb18 0805 	adds.w	r8, r8, r5
 8008a0a:	eb49 0906 	adc.w	r9, r9, r6
 8008a0e:	f04f 0100 	mov.w	r1, #0
 8008a12:	f04f 0200 	mov.w	r2, #0
 8008a16:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008a1a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008a1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008a22:	4688      	mov	r8, r1
 8008a24:	4691      	mov	r9, r2
 8008a26:	eb18 0005 	adds.w	r0, r8, r5
 8008a2a:	eb49 0106 	adc.w	r1, r9, r6
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	461d      	mov	r5, r3
 8008a34:	f04f 0600 	mov.w	r6, #0
 8008a38:	196b      	adds	r3, r5, r5
 8008a3a:	eb46 0406 	adc.w	r4, r6, r6
 8008a3e:	461a      	mov	r2, r3
 8008a40:	4623      	mov	r3, r4
 8008a42:	f7f7 fbc1 	bl	80001c8 <__aeabi_uldivmod>
 8008a46:	4603      	mov	r3, r0
 8008a48:	460c      	mov	r4, r1
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	4ba5      	ldr	r3, [pc, #660]	; (8008ce4 <UART_SetConfig+0x384>)
 8008a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8008a52:	095b      	lsrs	r3, r3, #5
 8008a54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	461d      	mov	r5, r3
 8008a5c:	f04f 0600 	mov.w	r6, #0
 8008a60:	46a9      	mov	r9, r5
 8008a62:	46b2      	mov	sl, r6
 8008a64:	eb19 0309 	adds.w	r3, r9, r9
 8008a68:	eb4a 040a 	adc.w	r4, sl, sl
 8008a6c:	4699      	mov	r9, r3
 8008a6e:	46a2      	mov	sl, r4
 8008a70:	eb19 0905 	adds.w	r9, r9, r5
 8008a74:	eb4a 0a06 	adc.w	sl, sl, r6
 8008a78:	f04f 0100 	mov.w	r1, #0
 8008a7c:	f04f 0200 	mov.w	r2, #0
 8008a80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a8c:	4689      	mov	r9, r1
 8008a8e:	4692      	mov	sl, r2
 8008a90:	eb19 0005 	adds.w	r0, r9, r5
 8008a94:	eb4a 0106 	adc.w	r1, sl, r6
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	461d      	mov	r5, r3
 8008a9e:	f04f 0600 	mov.w	r6, #0
 8008aa2:	196b      	adds	r3, r5, r5
 8008aa4:	eb46 0406 	adc.w	r4, r6, r6
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	4623      	mov	r3, r4
 8008aac:	f7f7 fb8c 	bl	80001c8 <__aeabi_uldivmod>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	4b8b      	ldr	r3, [pc, #556]	; (8008ce4 <UART_SetConfig+0x384>)
 8008ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8008abc:	095b      	lsrs	r3, r3, #5
 8008abe:	2164      	movs	r1, #100	; 0x64
 8008ac0:	fb01 f303 	mul.w	r3, r1, r3
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	00db      	lsls	r3, r3, #3
 8008ac8:	3332      	adds	r3, #50	; 0x32
 8008aca:	4a86      	ldr	r2, [pc, #536]	; (8008ce4 <UART_SetConfig+0x384>)
 8008acc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ad0:	095b      	lsrs	r3, r3, #5
 8008ad2:	005b      	lsls	r3, r3, #1
 8008ad4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ad8:	4498      	add	r8, r3
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	461d      	mov	r5, r3
 8008ade:	f04f 0600 	mov.w	r6, #0
 8008ae2:	46a9      	mov	r9, r5
 8008ae4:	46b2      	mov	sl, r6
 8008ae6:	eb19 0309 	adds.w	r3, r9, r9
 8008aea:	eb4a 040a 	adc.w	r4, sl, sl
 8008aee:	4699      	mov	r9, r3
 8008af0:	46a2      	mov	sl, r4
 8008af2:	eb19 0905 	adds.w	r9, r9, r5
 8008af6:	eb4a 0a06 	adc.w	sl, sl, r6
 8008afa:	f04f 0100 	mov.w	r1, #0
 8008afe:	f04f 0200 	mov.w	r2, #0
 8008b02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b0e:	4689      	mov	r9, r1
 8008b10:	4692      	mov	sl, r2
 8008b12:	eb19 0005 	adds.w	r0, r9, r5
 8008b16:	eb4a 0106 	adc.w	r1, sl, r6
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	461d      	mov	r5, r3
 8008b20:	f04f 0600 	mov.w	r6, #0
 8008b24:	196b      	adds	r3, r5, r5
 8008b26:	eb46 0406 	adc.w	r4, r6, r6
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	4623      	mov	r3, r4
 8008b2e:	f7f7 fb4b 	bl	80001c8 <__aeabi_uldivmod>
 8008b32:	4603      	mov	r3, r0
 8008b34:	460c      	mov	r4, r1
 8008b36:	461a      	mov	r2, r3
 8008b38:	4b6a      	ldr	r3, [pc, #424]	; (8008ce4 <UART_SetConfig+0x384>)
 8008b3a:	fba3 1302 	umull	r1, r3, r3, r2
 8008b3e:	095b      	lsrs	r3, r3, #5
 8008b40:	2164      	movs	r1, #100	; 0x64
 8008b42:	fb01 f303 	mul.w	r3, r1, r3
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	00db      	lsls	r3, r3, #3
 8008b4a:	3332      	adds	r3, #50	; 0x32
 8008b4c:	4a65      	ldr	r2, [pc, #404]	; (8008ce4 <UART_SetConfig+0x384>)
 8008b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b52:	095b      	lsrs	r3, r3, #5
 8008b54:	f003 0207 	and.w	r2, r3, #7
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4442      	add	r2, r8
 8008b5e:	609a      	str	r2, [r3, #8]
 8008b60:	e26f      	b.n	8009042 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b62:	f7fe fc13 	bl	800738c <HAL_RCC_GetPCLK1Freq>
 8008b66:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	461d      	mov	r5, r3
 8008b6c:	f04f 0600 	mov.w	r6, #0
 8008b70:	46a8      	mov	r8, r5
 8008b72:	46b1      	mov	r9, r6
 8008b74:	eb18 0308 	adds.w	r3, r8, r8
 8008b78:	eb49 0409 	adc.w	r4, r9, r9
 8008b7c:	4698      	mov	r8, r3
 8008b7e:	46a1      	mov	r9, r4
 8008b80:	eb18 0805 	adds.w	r8, r8, r5
 8008b84:	eb49 0906 	adc.w	r9, r9, r6
 8008b88:	f04f 0100 	mov.w	r1, #0
 8008b8c:	f04f 0200 	mov.w	r2, #0
 8008b90:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008b94:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008b98:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008b9c:	4688      	mov	r8, r1
 8008b9e:	4691      	mov	r9, r2
 8008ba0:	eb18 0005 	adds.w	r0, r8, r5
 8008ba4:	eb49 0106 	adc.w	r1, r9, r6
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	461d      	mov	r5, r3
 8008bae:	f04f 0600 	mov.w	r6, #0
 8008bb2:	196b      	adds	r3, r5, r5
 8008bb4:	eb46 0406 	adc.w	r4, r6, r6
 8008bb8:	461a      	mov	r2, r3
 8008bba:	4623      	mov	r3, r4
 8008bbc:	f7f7 fb04 	bl	80001c8 <__aeabi_uldivmod>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	4b47      	ldr	r3, [pc, #284]	; (8008ce4 <UART_SetConfig+0x384>)
 8008bc8:	fba3 2302 	umull	r2, r3, r3, r2
 8008bcc:	095b      	lsrs	r3, r3, #5
 8008bce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	461d      	mov	r5, r3
 8008bd6:	f04f 0600 	mov.w	r6, #0
 8008bda:	46a9      	mov	r9, r5
 8008bdc:	46b2      	mov	sl, r6
 8008bde:	eb19 0309 	adds.w	r3, r9, r9
 8008be2:	eb4a 040a 	adc.w	r4, sl, sl
 8008be6:	4699      	mov	r9, r3
 8008be8:	46a2      	mov	sl, r4
 8008bea:	eb19 0905 	adds.w	r9, r9, r5
 8008bee:	eb4a 0a06 	adc.w	sl, sl, r6
 8008bf2:	f04f 0100 	mov.w	r1, #0
 8008bf6:	f04f 0200 	mov.w	r2, #0
 8008bfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008bfe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c06:	4689      	mov	r9, r1
 8008c08:	4692      	mov	sl, r2
 8008c0a:	eb19 0005 	adds.w	r0, r9, r5
 8008c0e:	eb4a 0106 	adc.w	r1, sl, r6
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	461d      	mov	r5, r3
 8008c18:	f04f 0600 	mov.w	r6, #0
 8008c1c:	196b      	adds	r3, r5, r5
 8008c1e:	eb46 0406 	adc.w	r4, r6, r6
 8008c22:	461a      	mov	r2, r3
 8008c24:	4623      	mov	r3, r4
 8008c26:	f7f7 facf 	bl	80001c8 <__aeabi_uldivmod>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	461a      	mov	r2, r3
 8008c30:	4b2c      	ldr	r3, [pc, #176]	; (8008ce4 <UART_SetConfig+0x384>)
 8008c32:	fba3 1302 	umull	r1, r3, r3, r2
 8008c36:	095b      	lsrs	r3, r3, #5
 8008c38:	2164      	movs	r1, #100	; 0x64
 8008c3a:	fb01 f303 	mul.w	r3, r1, r3
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	00db      	lsls	r3, r3, #3
 8008c42:	3332      	adds	r3, #50	; 0x32
 8008c44:	4a27      	ldr	r2, [pc, #156]	; (8008ce4 <UART_SetConfig+0x384>)
 8008c46:	fba2 2303 	umull	r2, r3, r2, r3
 8008c4a:	095b      	lsrs	r3, r3, #5
 8008c4c:	005b      	lsls	r3, r3, #1
 8008c4e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c52:	4498      	add	r8, r3
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	461d      	mov	r5, r3
 8008c58:	f04f 0600 	mov.w	r6, #0
 8008c5c:	46a9      	mov	r9, r5
 8008c5e:	46b2      	mov	sl, r6
 8008c60:	eb19 0309 	adds.w	r3, r9, r9
 8008c64:	eb4a 040a 	adc.w	r4, sl, sl
 8008c68:	4699      	mov	r9, r3
 8008c6a:	46a2      	mov	sl, r4
 8008c6c:	eb19 0905 	adds.w	r9, r9, r5
 8008c70:	eb4a 0a06 	adc.w	sl, sl, r6
 8008c74:	f04f 0100 	mov.w	r1, #0
 8008c78:	f04f 0200 	mov.w	r2, #0
 8008c7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c88:	4689      	mov	r9, r1
 8008c8a:	4692      	mov	sl, r2
 8008c8c:	eb19 0005 	adds.w	r0, r9, r5
 8008c90:	eb4a 0106 	adc.w	r1, sl, r6
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	461d      	mov	r5, r3
 8008c9a:	f04f 0600 	mov.w	r6, #0
 8008c9e:	196b      	adds	r3, r5, r5
 8008ca0:	eb46 0406 	adc.w	r4, r6, r6
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	4623      	mov	r3, r4
 8008ca8:	f7f7 fa8e 	bl	80001c8 <__aeabi_uldivmod>
 8008cac:	4603      	mov	r3, r0
 8008cae:	460c      	mov	r4, r1
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	4b0c      	ldr	r3, [pc, #48]	; (8008ce4 <UART_SetConfig+0x384>)
 8008cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8008cb8:	095b      	lsrs	r3, r3, #5
 8008cba:	2164      	movs	r1, #100	; 0x64
 8008cbc:	fb01 f303 	mul.w	r3, r1, r3
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	00db      	lsls	r3, r3, #3
 8008cc4:	3332      	adds	r3, #50	; 0x32
 8008cc6:	4a07      	ldr	r2, [pc, #28]	; (8008ce4 <UART_SetConfig+0x384>)
 8008cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8008ccc:	095b      	lsrs	r3, r3, #5
 8008cce:	f003 0207 	and.w	r2, r3, #7
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4442      	add	r2, r8
 8008cd8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008cda:	e1b2      	b.n	8009042 <UART_SetConfig+0x6e2>
 8008cdc:	40011000 	.word	0x40011000
 8008ce0:	40011400 	.word	0x40011400
 8008ce4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4ad7      	ldr	r2, [pc, #860]	; (800904c <UART_SetConfig+0x6ec>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d005      	beq.n	8008cfe <UART_SetConfig+0x39e>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4ad6      	ldr	r2, [pc, #856]	; (8009050 <UART_SetConfig+0x6f0>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	f040 80d1 	bne.w	8008ea0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008cfe:	f7fe fb59 	bl	80073b4 <HAL_RCC_GetPCLK2Freq>
 8008d02:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	469a      	mov	sl, r3
 8008d08:	f04f 0b00 	mov.w	fp, #0
 8008d0c:	46d0      	mov	r8, sl
 8008d0e:	46d9      	mov	r9, fp
 8008d10:	eb18 0308 	adds.w	r3, r8, r8
 8008d14:	eb49 0409 	adc.w	r4, r9, r9
 8008d18:	4698      	mov	r8, r3
 8008d1a:	46a1      	mov	r9, r4
 8008d1c:	eb18 080a 	adds.w	r8, r8, sl
 8008d20:	eb49 090b 	adc.w	r9, r9, fp
 8008d24:	f04f 0100 	mov.w	r1, #0
 8008d28:	f04f 0200 	mov.w	r2, #0
 8008d2c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008d30:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008d34:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008d38:	4688      	mov	r8, r1
 8008d3a:	4691      	mov	r9, r2
 8008d3c:	eb1a 0508 	adds.w	r5, sl, r8
 8008d40:	eb4b 0609 	adc.w	r6, fp, r9
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	4619      	mov	r1, r3
 8008d4a:	f04f 0200 	mov.w	r2, #0
 8008d4e:	f04f 0300 	mov.w	r3, #0
 8008d52:	f04f 0400 	mov.w	r4, #0
 8008d56:	0094      	lsls	r4, r2, #2
 8008d58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008d5c:	008b      	lsls	r3, r1, #2
 8008d5e:	461a      	mov	r2, r3
 8008d60:	4623      	mov	r3, r4
 8008d62:	4628      	mov	r0, r5
 8008d64:	4631      	mov	r1, r6
 8008d66:	f7f7 fa2f 	bl	80001c8 <__aeabi_uldivmod>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	460c      	mov	r4, r1
 8008d6e:	461a      	mov	r2, r3
 8008d70:	4bb8      	ldr	r3, [pc, #736]	; (8009054 <UART_SetConfig+0x6f4>)
 8008d72:	fba3 2302 	umull	r2, r3, r3, r2
 8008d76:	095b      	lsrs	r3, r3, #5
 8008d78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	469b      	mov	fp, r3
 8008d80:	f04f 0c00 	mov.w	ip, #0
 8008d84:	46d9      	mov	r9, fp
 8008d86:	46e2      	mov	sl, ip
 8008d88:	eb19 0309 	adds.w	r3, r9, r9
 8008d8c:	eb4a 040a 	adc.w	r4, sl, sl
 8008d90:	4699      	mov	r9, r3
 8008d92:	46a2      	mov	sl, r4
 8008d94:	eb19 090b 	adds.w	r9, r9, fp
 8008d98:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008d9c:	f04f 0100 	mov.w	r1, #0
 8008da0:	f04f 0200 	mov.w	r2, #0
 8008da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008da8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008dac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008db0:	4689      	mov	r9, r1
 8008db2:	4692      	mov	sl, r2
 8008db4:	eb1b 0509 	adds.w	r5, fp, r9
 8008db8:	eb4c 060a 	adc.w	r6, ip, sl
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	f04f 0200 	mov.w	r2, #0
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	f04f 0400 	mov.w	r4, #0
 8008dce:	0094      	lsls	r4, r2, #2
 8008dd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008dd4:	008b      	lsls	r3, r1, #2
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	4623      	mov	r3, r4
 8008dda:	4628      	mov	r0, r5
 8008ddc:	4631      	mov	r1, r6
 8008dde:	f7f7 f9f3 	bl	80001c8 <__aeabi_uldivmod>
 8008de2:	4603      	mov	r3, r0
 8008de4:	460c      	mov	r4, r1
 8008de6:	461a      	mov	r2, r3
 8008de8:	4b9a      	ldr	r3, [pc, #616]	; (8009054 <UART_SetConfig+0x6f4>)
 8008dea:	fba3 1302 	umull	r1, r3, r3, r2
 8008dee:	095b      	lsrs	r3, r3, #5
 8008df0:	2164      	movs	r1, #100	; 0x64
 8008df2:	fb01 f303 	mul.w	r3, r1, r3
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	011b      	lsls	r3, r3, #4
 8008dfa:	3332      	adds	r3, #50	; 0x32
 8008dfc:	4a95      	ldr	r2, [pc, #596]	; (8009054 <UART_SetConfig+0x6f4>)
 8008dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8008e02:	095b      	lsrs	r3, r3, #5
 8008e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e08:	4498      	add	r8, r3
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	469b      	mov	fp, r3
 8008e0e:	f04f 0c00 	mov.w	ip, #0
 8008e12:	46d9      	mov	r9, fp
 8008e14:	46e2      	mov	sl, ip
 8008e16:	eb19 0309 	adds.w	r3, r9, r9
 8008e1a:	eb4a 040a 	adc.w	r4, sl, sl
 8008e1e:	4699      	mov	r9, r3
 8008e20:	46a2      	mov	sl, r4
 8008e22:	eb19 090b 	adds.w	r9, r9, fp
 8008e26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008e2a:	f04f 0100 	mov.w	r1, #0
 8008e2e:	f04f 0200 	mov.w	r2, #0
 8008e32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008e3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008e3e:	4689      	mov	r9, r1
 8008e40:	4692      	mov	sl, r2
 8008e42:	eb1b 0509 	adds.w	r5, fp, r9
 8008e46:	eb4c 060a 	adc.w	r6, ip, sl
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	4619      	mov	r1, r3
 8008e50:	f04f 0200 	mov.w	r2, #0
 8008e54:	f04f 0300 	mov.w	r3, #0
 8008e58:	f04f 0400 	mov.w	r4, #0
 8008e5c:	0094      	lsls	r4, r2, #2
 8008e5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008e62:	008b      	lsls	r3, r1, #2
 8008e64:	461a      	mov	r2, r3
 8008e66:	4623      	mov	r3, r4
 8008e68:	4628      	mov	r0, r5
 8008e6a:	4631      	mov	r1, r6
 8008e6c:	f7f7 f9ac 	bl	80001c8 <__aeabi_uldivmod>
 8008e70:	4603      	mov	r3, r0
 8008e72:	460c      	mov	r4, r1
 8008e74:	461a      	mov	r2, r3
 8008e76:	4b77      	ldr	r3, [pc, #476]	; (8009054 <UART_SetConfig+0x6f4>)
 8008e78:	fba3 1302 	umull	r1, r3, r3, r2
 8008e7c:	095b      	lsrs	r3, r3, #5
 8008e7e:	2164      	movs	r1, #100	; 0x64
 8008e80:	fb01 f303 	mul.w	r3, r1, r3
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	011b      	lsls	r3, r3, #4
 8008e88:	3332      	adds	r3, #50	; 0x32
 8008e8a:	4a72      	ldr	r2, [pc, #456]	; (8009054 <UART_SetConfig+0x6f4>)
 8008e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e90:	095b      	lsrs	r3, r3, #5
 8008e92:	f003 020f 	and.w	r2, r3, #15
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4442      	add	r2, r8
 8008e9c:	609a      	str	r2, [r3, #8]
 8008e9e:	e0d0      	b.n	8009042 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ea0:	f7fe fa74 	bl	800738c <HAL_RCC_GetPCLK1Freq>
 8008ea4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	469a      	mov	sl, r3
 8008eaa:	f04f 0b00 	mov.w	fp, #0
 8008eae:	46d0      	mov	r8, sl
 8008eb0:	46d9      	mov	r9, fp
 8008eb2:	eb18 0308 	adds.w	r3, r8, r8
 8008eb6:	eb49 0409 	adc.w	r4, r9, r9
 8008eba:	4698      	mov	r8, r3
 8008ebc:	46a1      	mov	r9, r4
 8008ebe:	eb18 080a 	adds.w	r8, r8, sl
 8008ec2:	eb49 090b 	adc.w	r9, r9, fp
 8008ec6:	f04f 0100 	mov.w	r1, #0
 8008eca:	f04f 0200 	mov.w	r2, #0
 8008ece:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008ed2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008ed6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008eda:	4688      	mov	r8, r1
 8008edc:	4691      	mov	r9, r2
 8008ede:	eb1a 0508 	adds.w	r5, sl, r8
 8008ee2:	eb4b 0609 	adc.w	r6, fp, r9
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	4619      	mov	r1, r3
 8008eec:	f04f 0200 	mov.w	r2, #0
 8008ef0:	f04f 0300 	mov.w	r3, #0
 8008ef4:	f04f 0400 	mov.w	r4, #0
 8008ef8:	0094      	lsls	r4, r2, #2
 8008efa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008efe:	008b      	lsls	r3, r1, #2
 8008f00:	461a      	mov	r2, r3
 8008f02:	4623      	mov	r3, r4
 8008f04:	4628      	mov	r0, r5
 8008f06:	4631      	mov	r1, r6
 8008f08:	f7f7 f95e 	bl	80001c8 <__aeabi_uldivmod>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	461a      	mov	r2, r3
 8008f12:	4b50      	ldr	r3, [pc, #320]	; (8009054 <UART_SetConfig+0x6f4>)
 8008f14:	fba3 2302 	umull	r2, r3, r3, r2
 8008f18:	095b      	lsrs	r3, r3, #5
 8008f1a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	469b      	mov	fp, r3
 8008f22:	f04f 0c00 	mov.w	ip, #0
 8008f26:	46d9      	mov	r9, fp
 8008f28:	46e2      	mov	sl, ip
 8008f2a:	eb19 0309 	adds.w	r3, r9, r9
 8008f2e:	eb4a 040a 	adc.w	r4, sl, sl
 8008f32:	4699      	mov	r9, r3
 8008f34:	46a2      	mov	sl, r4
 8008f36:	eb19 090b 	adds.w	r9, r9, fp
 8008f3a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008f3e:	f04f 0100 	mov.w	r1, #0
 8008f42:	f04f 0200 	mov.w	r2, #0
 8008f46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f52:	4689      	mov	r9, r1
 8008f54:	4692      	mov	sl, r2
 8008f56:	eb1b 0509 	adds.w	r5, fp, r9
 8008f5a:	eb4c 060a 	adc.w	r6, ip, sl
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	4619      	mov	r1, r3
 8008f64:	f04f 0200 	mov.w	r2, #0
 8008f68:	f04f 0300 	mov.w	r3, #0
 8008f6c:	f04f 0400 	mov.w	r4, #0
 8008f70:	0094      	lsls	r4, r2, #2
 8008f72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008f76:	008b      	lsls	r3, r1, #2
 8008f78:	461a      	mov	r2, r3
 8008f7a:	4623      	mov	r3, r4
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	4631      	mov	r1, r6
 8008f80:	f7f7 f922 	bl	80001c8 <__aeabi_uldivmod>
 8008f84:	4603      	mov	r3, r0
 8008f86:	460c      	mov	r4, r1
 8008f88:	461a      	mov	r2, r3
 8008f8a:	4b32      	ldr	r3, [pc, #200]	; (8009054 <UART_SetConfig+0x6f4>)
 8008f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8008f90:	095b      	lsrs	r3, r3, #5
 8008f92:	2164      	movs	r1, #100	; 0x64
 8008f94:	fb01 f303 	mul.w	r3, r1, r3
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	011b      	lsls	r3, r3, #4
 8008f9c:	3332      	adds	r3, #50	; 0x32
 8008f9e:	4a2d      	ldr	r2, [pc, #180]	; (8009054 <UART_SetConfig+0x6f4>)
 8008fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa4:	095b      	lsrs	r3, r3, #5
 8008fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008faa:	4498      	add	r8, r3
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	469b      	mov	fp, r3
 8008fb0:	f04f 0c00 	mov.w	ip, #0
 8008fb4:	46d9      	mov	r9, fp
 8008fb6:	46e2      	mov	sl, ip
 8008fb8:	eb19 0309 	adds.w	r3, r9, r9
 8008fbc:	eb4a 040a 	adc.w	r4, sl, sl
 8008fc0:	4699      	mov	r9, r3
 8008fc2:	46a2      	mov	sl, r4
 8008fc4:	eb19 090b 	adds.w	r9, r9, fp
 8008fc8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008fcc:	f04f 0100 	mov.w	r1, #0
 8008fd0:	f04f 0200 	mov.w	r2, #0
 8008fd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008fdc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008fe0:	4689      	mov	r9, r1
 8008fe2:	4692      	mov	sl, r2
 8008fe4:	eb1b 0509 	adds.w	r5, fp, r9
 8008fe8:	eb4c 060a 	adc.w	r6, ip, sl
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	f04f 0200 	mov.w	r2, #0
 8008ff6:	f04f 0300 	mov.w	r3, #0
 8008ffa:	f04f 0400 	mov.w	r4, #0
 8008ffe:	0094      	lsls	r4, r2, #2
 8009000:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009004:	008b      	lsls	r3, r1, #2
 8009006:	461a      	mov	r2, r3
 8009008:	4623      	mov	r3, r4
 800900a:	4628      	mov	r0, r5
 800900c:	4631      	mov	r1, r6
 800900e:	f7f7 f8db 	bl	80001c8 <__aeabi_uldivmod>
 8009012:	4603      	mov	r3, r0
 8009014:	460c      	mov	r4, r1
 8009016:	461a      	mov	r2, r3
 8009018:	4b0e      	ldr	r3, [pc, #56]	; (8009054 <UART_SetConfig+0x6f4>)
 800901a:	fba3 1302 	umull	r1, r3, r3, r2
 800901e:	095b      	lsrs	r3, r3, #5
 8009020:	2164      	movs	r1, #100	; 0x64
 8009022:	fb01 f303 	mul.w	r3, r1, r3
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	011b      	lsls	r3, r3, #4
 800902a:	3332      	adds	r3, #50	; 0x32
 800902c:	4a09      	ldr	r2, [pc, #36]	; (8009054 <UART_SetConfig+0x6f4>)
 800902e:	fba2 2303 	umull	r2, r3, r2, r3
 8009032:	095b      	lsrs	r3, r3, #5
 8009034:	f003 020f 	and.w	r2, r3, #15
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4442      	add	r2, r8
 800903e:	609a      	str	r2, [r3, #8]
}
 8009040:	e7ff      	b.n	8009042 <UART_SetConfig+0x6e2>
 8009042:	bf00      	nop
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904c:	40011000 	.word	0x40011000
 8009050:	40011400 	.word	0x40011400
 8009054:	51eb851f 	.word	0x51eb851f

08009058 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009058:	b084      	sub	sp, #16
 800905a:	b580      	push	{r7, lr}
 800905c:	b084      	sub	sp, #16
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	f107 001c 	add.w	r0, r7, #28
 8009066:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906c:	2b01      	cmp	r3, #1
 800906e:	d122      	bne.n	80090b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009074:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800909a:	2b01      	cmp	r3, #1
 800909c:	d105      	bne.n	80090aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f001 fab4 	bl	800a618 <USB_CoreReset>
 80090b0:	4603      	mov	r3, r0
 80090b2:	73fb      	strb	r3, [r7, #15]
 80090b4:	e01a      	b.n	80090ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f001 faa8 	bl	800a618 <USB_CoreReset>
 80090c8:	4603      	mov	r3, r0
 80090ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80090cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d106      	bne.n	80090e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	639a      	str	r2, [r3, #56]	; 0x38
 80090de:	e005      	b.n	80090ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80090ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d10b      	bne.n	800910a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	f043 0206 	orr.w	r2, r3, #6
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	f043 0220 	orr.w	r2, r3, #32
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800910a:	7bfb      	ldrb	r3, [r7, #15]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009116:	b004      	add	sp, #16
 8009118:	4770      	bx	lr
	...

0800911c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800911c:	b480      	push	{r7}
 800911e:	b087      	sub	sp, #28
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	4613      	mov	r3, r2
 8009128:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800912a:	79fb      	ldrb	r3, [r7, #7]
 800912c:	2b02      	cmp	r3, #2
 800912e:	d165      	bne.n	80091fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	4a41      	ldr	r2, [pc, #260]	; (8009238 <USB_SetTurnaroundTime+0x11c>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d906      	bls.n	8009146 <USB_SetTurnaroundTime+0x2a>
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	4a40      	ldr	r2, [pc, #256]	; (800923c <USB_SetTurnaroundTime+0x120>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d802      	bhi.n	8009146 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009140:	230f      	movs	r3, #15
 8009142:	617b      	str	r3, [r7, #20]
 8009144:	e062      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	4a3c      	ldr	r2, [pc, #240]	; (800923c <USB_SetTurnaroundTime+0x120>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d906      	bls.n	800915c <USB_SetTurnaroundTime+0x40>
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	4a3b      	ldr	r2, [pc, #236]	; (8009240 <USB_SetTurnaroundTime+0x124>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d802      	bhi.n	800915c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009156:	230e      	movs	r3, #14
 8009158:	617b      	str	r3, [r7, #20]
 800915a:	e057      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	4a38      	ldr	r2, [pc, #224]	; (8009240 <USB_SetTurnaroundTime+0x124>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d906      	bls.n	8009172 <USB_SetTurnaroundTime+0x56>
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	4a37      	ldr	r2, [pc, #220]	; (8009244 <USB_SetTurnaroundTime+0x128>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d802      	bhi.n	8009172 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800916c:	230d      	movs	r3, #13
 800916e:	617b      	str	r3, [r7, #20]
 8009170:	e04c      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	4a33      	ldr	r2, [pc, #204]	; (8009244 <USB_SetTurnaroundTime+0x128>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d906      	bls.n	8009188 <USB_SetTurnaroundTime+0x6c>
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	4a32      	ldr	r2, [pc, #200]	; (8009248 <USB_SetTurnaroundTime+0x12c>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d802      	bhi.n	8009188 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009182:	230c      	movs	r3, #12
 8009184:	617b      	str	r3, [r7, #20]
 8009186:	e041      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	4a2f      	ldr	r2, [pc, #188]	; (8009248 <USB_SetTurnaroundTime+0x12c>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d906      	bls.n	800919e <USB_SetTurnaroundTime+0x82>
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	4a2e      	ldr	r2, [pc, #184]	; (800924c <USB_SetTurnaroundTime+0x130>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d802      	bhi.n	800919e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009198:	230b      	movs	r3, #11
 800919a:	617b      	str	r3, [r7, #20]
 800919c:	e036      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	4a2a      	ldr	r2, [pc, #168]	; (800924c <USB_SetTurnaroundTime+0x130>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d906      	bls.n	80091b4 <USB_SetTurnaroundTime+0x98>
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	4a29      	ldr	r2, [pc, #164]	; (8009250 <USB_SetTurnaroundTime+0x134>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d802      	bhi.n	80091b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80091ae:	230a      	movs	r3, #10
 80091b0:	617b      	str	r3, [r7, #20]
 80091b2:	e02b      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	4a26      	ldr	r2, [pc, #152]	; (8009250 <USB_SetTurnaroundTime+0x134>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d906      	bls.n	80091ca <USB_SetTurnaroundTime+0xae>
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	4a25      	ldr	r2, [pc, #148]	; (8009254 <USB_SetTurnaroundTime+0x138>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d802      	bhi.n	80091ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80091c4:	2309      	movs	r3, #9
 80091c6:	617b      	str	r3, [r7, #20]
 80091c8:	e020      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	4a21      	ldr	r2, [pc, #132]	; (8009254 <USB_SetTurnaroundTime+0x138>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d906      	bls.n	80091e0 <USB_SetTurnaroundTime+0xc4>
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	4a20      	ldr	r2, [pc, #128]	; (8009258 <USB_SetTurnaroundTime+0x13c>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d802      	bhi.n	80091e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80091da:	2308      	movs	r3, #8
 80091dc:	617b      	str	r3, [r7, #20]
 80091de:	e015      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	4a1d      	ldr	r2, [pc, #116]	; (8009258 <USB_SetTurnaroundTime+0x13c>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d906      	bls.n	80091f6 <USB_SetTurnaroundTime+0xda>
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	4a1c      	ldr	r2, [pc, #112]	; (800925c <USB_SetTurnaroundTime+0x140>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d802      	bhi.n	80091f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80091f0:	2307      	movs	r3, #7
 80091f2:	617b      	str	r3, [r7, #20]
 80091f4:	e00a      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80091f6:	2306      	movs	r3, #6
 80091f8:	617b      	str	r3, [r7, #20]
 80091fa:	e007      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80091fc:	79fb      	ldrb	r3, [r7, #7]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d102      	bne.n	8009208 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009202:	2309      	movs	r3, #9
 8009204:	617b      	str	r3, [r7, #20]
 8009206:	e001      	b.n	800920c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009208:	2309      	movs	r3, #9
 800920a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	68da      	ldr	r2, [r3, #12]
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	029b      	lsls	r3, r3, #10
 8009220:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009224:	431a      	orrs	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	371c      	adds	r7, #28
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr
 8009238:	00d8acbf 	.word	0x00d8acbf
 800923c:	00e4e1bf 	.word	0x00e4e1bf
 8009240:	00f423ff 	.word	0x00f423ff
 8009244:	0106737f 	.word	0x0106737f
 8009248:	011a499f 	.word	0x011a499f
 800924c:	01312cff 	.word	0x01312cff
 8009250:	014ca43f 	.word	0x014ca43f
 8009254:	016e35ff 	.word	0x016e35ff
 8009258:	01a6ab1f 	.word	0x01a6ab1f
 800925c:	01e847ff 	.word	0x01e847ff

08009260 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f043 0201 	orr.w	r2, r3, #1
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	370c      	adds	r7, #12
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009282:	b480      	push	{r7}
 8009284:	b083      	sub	sp, #12
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	f023 0201 	bic.w	r2, r3, #1
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80092bc:	78fb      	ldrb	r3, [r7, #3]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d106      	bne.n	80092d0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	60da      	str	r2, [r3, #12]
 80092ce:	e00b      	b.n	80092e8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80092d0:	78fb      	ldrb	r3, [r7, #3]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d106      	bne.n	80092e4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	60da      	str	r2, [r3, #12]
 80092e2:	e001      	b.n	80092e8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e003      	b.n	80092f0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80092e8:	2032      	movs	r0, #50	; 0x32
 80092ea:	f7f9 fb4b 	bl	8002984 <HAL_Delay>

  return HAL_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092f8:	b084      	sub	sp, #16
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b086      	sub	sp, #24
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
 8009302:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009306:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009312:	2300      	movs	r3, #0
 8009314:	613b      	str	r3, [r7, #16]
 8009316:	e009      	b.n	800932c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	3340      	adds	r3, #64	; 0x40
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4413      	add	r3, r2
 8009322:	2200      	movs	r2, #0
 8009324:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	3301      	adds	r3, #1
 800932a:	613b      	str	r3, [r7, #16]
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	2b0e      	cmp	r3, #14
 8009330:	d9f2      	bls.n	8009318 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009334:	2b00      	cmp	r3, #0
 8009336:	d11c      	bne.n	8009372 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009346:	f043 0302 	orr.w	r3, r3, #2
 800934a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009350:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009368:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	639a      	str	r2, [r3, #56]	; 0x38
 8009370:	e00b      	b.n	800938a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009376:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009382:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009390:	461a      	mov	r2, r3
 8009392:	2300      	movs	r3, #0
 8009394:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800939c:	4619      	mov	r1, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a4:	461a      	mov	r2, r3
 80093a6:	680b      	ldr	r3, [r1, #0]
 80093a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80093aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d10c      	bne.n	80093ca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80093b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d104      	bne.n	80093c0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80093b6:	2100      	movs	r1, #0
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f949 	bl	8009650 <USB_SetDevSpeed>
 80093be:	e008      	b.n	80093d2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80093c0:	2101      	movs	r1, #1
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f944 	bl	8009650 <USB_SetDevSpeed>
 80093c8:	e003      	b.n	80093d2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80093ca:	2103      	movs	r1, #3
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f93f 	bl	8009650 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80093d2:	2110      	movs	r1, #16
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f8f3 	bl	80095c0 <USB_FlushTxFifo>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f911 	bl	800960c <USB_FlushRxFifo>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d001      	beq.n	80093f4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093fa:	461a      	mov	r2, r3
 80093fc:	2300      	movs	r3, #0
 80093fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009406:	461a      	mov	r2, r3
 8009408:	2300      	movs	r3, #0
 800940a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009412:	461a      	mov	r2, r3
 8009414:	2300      	movs	r3, #0
 8009416:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009418:	2300      	movs	r3, #0
 800941a:	613b      	str	r3, [r7, #16]
 800941c:	e043      	b.n	80094a6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	015a      	lsls	r2, r3, #5
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	4413      	add	r3, r2
 8009426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009434:	d118      	bne.n	8009468 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10a      	bne.n	8009452 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	4413      	add	r3, r2
 8009444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009448:	461a      	mov	r2, r3
 800944a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800944e:	6013      	str	r3, [r2, #0]
 8009450:	e013      	b.n	800947a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	015a      	lsls	r2, r3, #5
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	4413      	add	r3, r2
 800945a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800945e:	461a      	mov	r2, r3
 8009460:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009464:	6013      	str	r3, [r2, #0]
 8009466:	e008      	b.n	800947a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	015a      	lsls	r2, r3, #5
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	4413      	add	r3, r2
 8009470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009474:	461a      	mov	r2, r3
 8009476:	2300      	movs	r3, #0
 8009478:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	4413      	add	r3, r2
 8009482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009486:	461a      	mov	r2, r3
 8009488:	2300      	movs	r3, #0
 800948a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	015a      	lsls	r2, r3, #5
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	4413      	add	r3, r2
 8009494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009498:	461a      	mov	r2, r3
 800949a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800949e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	3301      	adds	r3, #1
 80094a4:	613b      	str	r3, [r7, #16]
 80094a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d3b7      	bcc.n	800941e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094ae:	2300      	movs	r3, #0
 80094b0:	613b      	str	r3, [r7, #16]
 80094b2:	e043      	b.n	800953c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	015a      	lsls	r2, r3, #5
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	4413      	add	r3, r2
 80094bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094ca:	d118      	bne.n	80094fe <USB_DevInit+0x206>
    {
      if (i == 0U)
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10a      	bne.n	80094e8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	015a      	lsls	r2, r3, #5
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	4413      	add	r3, r2
 80094da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094de:	461a      	mov	r2, r3
 80094e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80094e4:	6013      	str	r3, [r2, #0]
 80094e6:	e013      	b.n	8009510 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	015a      	lsls	r2, r3, #5
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	4413      	add	r3, r2
 80094f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f4:	461a      	mov	r2, r3
 80094f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80094fa:	6013      	str	r3, [r2, #0]
 80094fc:	e008      	b.n	8009510 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	015a      	lsls	r2, r3, #5
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	4413      	add	r3, r2
 8009506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800950a:	461a      	mov	r2, r3
 800950c:	2300      	movs	r3, #0
 800950e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	015a      	lsls	r2, r3, #5
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	4413      	add	r3, r2
 8009518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800951c:	461a      	mov	r2, r3
 800951e:	2300      	movs	r3, #0
 8009520:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	015a      	lsls	r2, r3, #5
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	4413      	add	r3, r2
 800952a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800952e:	461a      	mov	r2, r3
 8009530:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009534:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	3301      	adds	r3, #1
 800953a:	613b      	str	r3, [r7, #16]
 800953c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953e:	693a      	ldr	r2, [r7, #16]
 8009540:	429a      	cmp	r2, r3
 8009542:	d3b7      	bcc.n	80094b4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009552:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009556:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009564:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009568:	2b00      	cmp	r3, #0
 800956a:	d105      	bne.n	8009578 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	f043 0210 	orr.w	r2, r3, #16
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	699a      	ldr	r2, [r3, #24]
 800957c:	4b0f      	ldr	r3, [pc, #60]	; (80095bc <USB_DevInit+0x2c4>)
 800957e:	4313      	orrs	r3, r2
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009586:	2b00      	cmp	r3, #0
 8009588:	d005      	beq.n	8009596 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	f043 0208 	orr.w	r2, r3, #8
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009598:	2b01      	cmp	r3, #1
 800959a:	d107      	bne.n	80095ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095a4:	f043 0304 	orr.w	r3, r3, #4
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80095ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3718      	adds	r7, #24
 80095b2:	46bd      	mov	sp, r7
 80095b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095b8:	b004      	add	sp, #16
 80095ba:	4770      	bx	lr
 80095bc:	803c3800 	.word	0x803c3800

080095c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80095ca:	2300      	movs	r3, #0
 80095cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	019b      	lsls	r3, r3, #6
 80095d2:	f043 0220 	orr.w	r2, r3, #32
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	3301      	adds	r3, #1
 80095de:	60fb      	str	r3, [r7, #12]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	4a09      	ldr	r2, [pc, #36]	; (8009608 <USB_FlushTxFifo+0x48>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d901      	bls.n	80095ec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80095e8:	2303      	movs	r3, #3
 80095ea:	e006      	b.n	80095fa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	f003 0320 	and.w	r3, r3, #32
 80095f4:	2b20      	cmp	r3, #32
 80095f6:	d0f0      	beq.n	80095da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3714      	adds	r7, #20
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	00030d40 	.word	0x00030d40

0800960c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009614:	2300      	movs	r3, #0
 8009616:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2210      	movs	r2, #16
 800961c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	3301      	adds	r3, #1
 8009622:	60fb      	str	r3, [r7, #12]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	4a09      	ldr	r2, [pc, #36]	; (800964c <USB_FlushRxFifo+0x40>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d901      	bls.n	8009630 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800962c:	2303      	movs	r3, #3
 800962e:	e006      	b.n	800963e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	f003 0310 	and.w	r3, r3, #16
 8009638:	2b10      	cmp	r3, #16
 800963a:	d0f0      	beq.n	800961e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3714      	adds	r7, #20
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	00030d40 	.word	0x00030d40

08009650 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	460b      	mov	r3, r1
 800965a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	78fb      	ldrb	r3, [r7, #3]
 800966a:	68f9      	ldr	r1, [r7, #12]
 800966c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009670:	4313      	orrs	r3, r2
 8009672:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3714      	adds	r7, #20
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009682:	b480      	push	{r7}
 8009684:	b087      	sub	sp, #28
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f003 0306 	and.w	r3, r3, #6
 800969a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d102      	bne.n	80096a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80096a2:	2300      	movs	r3, #0
 80096a4:	75fb      	strb	r3, [r7, #23]
 80096a6:	e00a      	b.n	80096be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d002      	beq.n	80096b4 <USB_GetDevSpeed+0x32>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2b06      	cmp	r3, #6
 80096b2:	d102      	bne.n	80096ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80096b4:	2302      	movs	r3, #2
 80096b6:	75fb      	strb	r3, [r7, #23]
 80096b8:	e001      	b.n	80096be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80096ba:	230f      	movs	r3, #15
 80096bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80096be:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	371c      	adds	r7, #28
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	785b      	ldrb	r3, [r3, #1]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d13a      	bne.n	800975e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ee:	69da      	ldr	r2, [r3, #28]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	f003 030f 	and.w	r3, r3, #15
 80096f8:	2101      	movs	r1, #1
 80096fa:	fa01 f303 	lsl.w	r3, r1, r3
 80096fe:	b29b      	uxth	r3, r3
 8009700:	68f9      	ldr	r1, [r7, #12]
 8009702:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009706:	4313      	orrs	r3, r2
 8009708:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	015a      	lsls	r2, r3, #5
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	4413      	add	r3, r2
 8009712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800971c:	2b00      	cmp	r3, #0
 800971e:	d155      	bne.n	80097cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	015a      	lsls	r2, r3, #5
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	4413      	add	r3, r2
 8009728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	78db      	ldrb	r3, [r3, #3]
 800973a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800973c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	059b      	lsls	r3, r3, #22
 8009742:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009744:	4313      	orrs	r3, r2
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	0151      	lsls	r1, r2, #5
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	440a      	add	r2, r1
 800974e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800975a:	6013      	str	r3, [r2, #0]
 800975c:	e036      	b.n	80097cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009764:	69da      	ldr	r2, [r3, #28]
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	f003 030f 	and.w	r3, r3, #15
 800976e:	2101      	movs	r1, #1
 8009770:	fa01 f303 	lsl.w	r3, r1, r3
 8009774:	041b      	lsls	r3, r3, #16
 8009776:	68f9      	ldr	r1, [r7, #12]
 8009778:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800977c:	4313      	orrs	r3, r2
 800977e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	015a      	lsls	r2, r3, #5
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	4413      	add	r3, r2
 8009788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009792:	2b00      	cmp	r3, #0
 8009794:	d11a      	bne.n	80097cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	015a      	lsls	r2, r3, #5
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	4413      	add	r3, r2
 800979e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	78db      	ldrb	r3, [r3, #3]
 80097b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80097b2:	430b      	orrs	r3, r1
 80097b4:	4313      	orrs	r3, r2
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	0151      	lsls	r1, r2, #5
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	440a      	add	r2, r1
 80097be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3714      	adds	r7, #20
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
	...

080097dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	785b      	ldrb	r3, [r3, #1]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d161      	bne.n	80098bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	015a      	lsls	r2, r3, #5
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	4413      	add	r3, r2
 8009800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800980a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800980e:	d11f      	bne.n	8009850 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	0151      	lsls	r1, r2, #5
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	440a      	add	r2, r1
 8009826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800982a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800982e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	015a      	lsls	r2, r3, #5
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	4413      	add	r3, r2
 8009838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	0151      	lsls	r1, r2, #5
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	440a      	add	r2, r1
 8009846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800984a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800984e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	f003 030f 	and.w	r3, r3, #15
 8009860:	2101      	movs	r1, #1
 8009862:	fa01 f303 	lsl.w	r3, r1, r3
 8009866:	b29b      	uxth	r3, r3
 8009868:	43db      	mvns	r3, r3
 800986a:	68f9      	ldr	r1, [r7, #12]
 800986c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009870:	4013      	ands	r3, r2
 8009872:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800987a:	69da      	ldr	r2, [r3, #28]
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	f003 030f 	and.w	r3, r3, #15
 8009884:	2101      	movs	r1, #1
 8009886:	fa01 f303 	lsl.w	r3, r1, r3
 800988a:	b29b      	uxth	r3, r3
 800988c:	43db      	mvns	r3, r3
 800988e:	68f9      	ldr	r1, [r7, #12]
 8009890:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009894:	4013      	ands	r3, r2
 8009896:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	015a      	lsls	r2, r3, #5
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	4413      	add	r3, r2
 80098a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	0159      	lsls	r1, r3, #5
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	440b      	add	r3, r1
 80098ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b2:	4619      	mov	r1, r3
 80098b4:	4b35      	ldr	r3, [pc, #212]	; (800998c <USB_DeactivateEndpoint+0x1b0>)
 80098b6:	4013      	ands	r3, r2
 80098b8:	600b      	str	r3, [r1, #0]
 80098ba:	e060      	b.n	800997e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	015a      	lsls	r2, r3, #5
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	4413      	add	r3, r2
 80098c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098d2:	d11f      	bne.n	8009914 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	0151      	lsls	r1, r2, #5
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	440a      	add	r2, r1
 80098ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80098f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	015a      	lsls	r2, r3, #5
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	4413      	add	r3, r2
 80098fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	0151      	lsls	r1, r2, #5
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	440a      	add	r2, r1
 800990a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800990e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009912:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800991a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	f003 030f 	and.w	r3, r3, #15
 8009924:	2101      	movs	r1, #1
 8009926:	fa01 f303 	lsl.w	r3, r1, r3
 800992a:	041b      	lsls	r3, r3, #16
 800992c:	43db      	mvns	r3, r3
 800992e:	68f9      	ldr	r1, [r7, #12]
 8009930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009934:	4013      	ands	r3, r2
 8009936:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800993e:	69da      	ldr	r2, [r3, #28]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	f003 030f 	and.w	r3, r3, #15
 8009948:	2101      	movs	r1, #1
 800994a:	fa01 f303 	lsl.w	r3, r1, r3
 800994e:	041b      	lsls	r3, r3, #16
 8009950:	43db      	mvns	r3, r3
 8009952:	68f9      	ldr	r1, [r7, #12]
 8009954:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009958:	4013      	ands	r3, r2
 800995a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	015a      	lsls	r2, r3, #5
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	4413      	add	r3, r2
 8009964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	0159      	lsls	r1, r3, #5
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	440b      	add	r3, r1
 8009972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009976:	4619      	mov	r1, r3
 8009978:	4b05      	ldr	r3, [pc, #20]	; (8009990 <USB_DeactivateEndpoint+0x1b4>)
 800997a:	4013      	ands	r3, r2
 800997c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3714      	adds	r7, #20
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	ec337800 	.word	0xec337800
 8009990:	eff37800 	.word	0xeff37800

08009994 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b08a      	sub	sp, #40	; 0x28
 8009998:	af02      	add	r7, sp, #8
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	4613      	mov	r3, r2
 80099a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	785b      	ldrb	r3, [r3, #1]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	f040 815c 	bne.w	8009c6e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d132      	bne.n	8009a24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	015a      	lsls	r2, r3, #5
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	4413      	add	r3, r2
 80099c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	69ba      	ldr	r2, [r7, #24]
 80099ce:	0151      	lsls	r1, r2, #5
 80099d0:	69fa      	ldr	r2, [r7, #28]
 80099d2:	440a      	add	r2, r1
 80099d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80099dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80099e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	015a      	lsls	r2, r3, #5
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	4413      	add	r3, r2
 80099ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	69ba      	ldr	r2, [r7, #24]
 80099f2:	0151      	lsls	r1, r2, #5
 80099f4:	69fa      	ldr	r2, [r7, #28]
 80099f6:	440a      	add	r2, r1
 80099f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	015a      	lsls	r2, r3, #5
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	4413      	add	r3, r2
 8009a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	69ba      	ldr	r2, [r7, #24]
 8009a12:	0151      	lsls	r1, r2, #5
 8009a14:	69fa      	ldr	r2, [r7, #28]
 8009a16:	440a      	add	r2, r1
 8009a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a1c:	0cdb      	lsrs	r3, r3, #19
 8009a1e:	04db      	lsls	r3, r3, #19
 8009a20:	6113      	str	r3, [r2, #16]
 8009a22:	e074      	b.n	8009b0e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	015a      	lsls	r2, r3, #5
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	69ba      	ldr	r2, [r7, #24]
 8009a34:	0151      	lsls	r1, r2, #5
 8009a36:	69fa      	ldr	r2, [r7, #28]
 8009a38:	440a      	add	r2, r1
 8009a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a3e:	0cdb      	lsrs	r3, r3, #19
 8009a40:	04db      	lsls	r3, r3, #19
 8009a42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	015a      	lsls	r2, r3, #5
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	69ba      	ldr	r2, [r7, #24]
 8009a54:	0151      	lsls	r1, r2, #5
 8009a56:	69fa      	ldr	r2, [r7, #28]
 8009a58:	440a      	add	r2, r1
 8009a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	015a      	lsls	r2, r3, #5
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	4413      	add	r3, r2
 8009a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a74:	691a      	ldr	r2, [r3, #16]
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	6959      	ldr	r1, [r3, #20]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	440b      	add	r3, r1
 8009a80:	1e59      	subs	r1, r3, #1
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a8a:	04d9      	lsls	r1, r3, #19
 8009a8c:	4b9d      	ldr	r3, [pc, #628]	; (8009d04 <USB_EPStartXfer+0x370>)
 8009a8e:	400b      	ands	r3, r1
 8009a90:	69b9      	ldr	r1, [r7, #24]
 8009a92:	0148      	lsls	r0, r1, #5
 8009a94:	69f9      	ldr	r1, [r7, #28]
 8009a96:	4401      	add	r1, r0
 8009a98:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	015a      	lsls	r2, r3, #5
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aac:	691a      	ldr	r2, [r3, #16]
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	695b      	ldr	r3, [r3, #20]
 8009ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ab6:	69b9      	ldr	r1, [r7, #24]
 8009ab8:	0148      	lsls	r0, r1, #5
 8009aba:	69f9      	ldr	r1, [r7, #28]
 8009abc:	4401      	add	r1, r0
 8009abe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	78db      	ldrb	r3, [r3, #3]
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d11f      	bne.n	8009b0e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	015a      	lsls	r2, r3, #5
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	69ba      	ldr	r2, [r7, #24]
 8009ade:	0151      	lsls	r1, r2, #5
 8009ae0:	69fa      	ldr	r2, [r7, #28]
 8009ae2:	440a      	add	r2, r1
 8009ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ae8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009aec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	015a      	lsls	r2, r3, #5
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	4413      	add	r3, r2
 8009af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	69ba      	ldr	r2, [r7, #24]
 8009afe:	0151      	lsls	r1, r2, #5
 8009b00:	69fa      	ldr	r2, [r7, #28]
 8009b02:	440a      	add	r2, r1
 8009b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b0c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009b0e:	79fb      	ldrb	r3, [r7, #7]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d14b      	bne.n	8009bac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d009      	beq.n	8009b30 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	015a      	lsls	r2, r3, #5
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	4413      	add	r3, r2
 8009b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b28:	461a      	mov	r2, r3
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	78db      	ldrb	r3, [r3, #3]
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d128      	bne.n	8009b8a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d110      	bne.n	8009b6a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	015a      	lsls	r2, r3, #5
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	4413      	add	r3, r2
 8009b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	69ba      	ldr	r2, [r7, #24]
 8009b58:	0151      	lsls	r1, r2, #5
 8009b5a:	69fa      	ldr	r2, [r7, #28]
 8009b5c:	440a      	add	r2, r1
 8009b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	e00f      	b.n	8009b8a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	015a      	lsls	r2, r3, #5
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	4413      	add	r3, r2
 8009b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	69ba      	ldr	r2, [r7, #24]
 8009b7a:	0151      	lsls	r1, r2, #5
 8009b7c:	69fa      	ldr	r2, [r7, #28]
 8009b7e:	440a      	add	r2, r1
 8009b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b88:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	015a      	lsls	r2, r3, #5
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	4413      	add	r3, r2
 8009b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	69ba      	ldr	r2, [r7, #24]
 8009b9a:	0151      	lsls	r1, r2, #5
 8009b9c:	69fa      	ldr	r2, [r7, #28]
 8009b9e:	440a      	add	r2, r1
 8009ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ba4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ba8:	6013      	str	r3, [r2, #0]
 8009baa:	e12f      	b.n	8009e0c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	015a      	lsls	r2, r3, #5
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	4413      	add	r3, r2
 8009bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	69ba      	ldr	r2, [r7, #24]
 8009bbc:	0151      	lsls	r1, r2, #5
 8009bbe:	69fa      	ldr	r2, [r7, #28]
 8009bc0:	440a      	add	r2, r1
 8009bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009bca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	78db      	ldrb	r3, [r3, #3]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d015      	beq.n	8009c00 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	695b      	ldr	r3, [r3, #20]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f000 8117 	beq.w	8009e0c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	f003 030f 	and.w	r3, r3, #15
 8009bee:	2101      	movs	r1, #1
 8009bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8009bf4:	69f9      	ldr	r1, [r7, #28]
 8009bf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	634b      	str	r3, [r1, #52]	; 0x34
 8009bfe:	e105      	b.n	8009e0c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d110      	bne.n	8009c32 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	015a      	lsls	r2, r3, #5
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	4413      	add	r3, r2
 8009c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	69ba      	ldr	r2, [r7, #24]
 8009c20:	0151      	lsls	r1, r2, #5
 8009c22:	69fa      	ldr	r2, [r7, #28]
 8009c24:	440a      	add	r2, r1
 8009c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c2e:	6013      	str	r3, [r2, #0]
 8009c30:	e00f      	b.n	8009c52 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	015a      	lsls	r2, r3, #5
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	4413      	add	r3, r2
 8009c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	69ba      	ldr	r2, [r7, #24]
 8009c42:	0151      	lsls	r1, r2, #5
 8009c44:	69fa      	ldr	r2, [r7, #28]
 8009c46:	440a      	add	r2, r1
 8009c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c50:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	68d9      	ldr	r1, [r3, #12]
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	781a      	ldrb	r2, [r3, #0]
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	695b      	ldr	r3, [r3, #20]
 8009c5e:	b298      	uxth	r0, r3
 8009c60:	79fb      	ldrb	r3, [r7, #7]
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	4603      	mov	r3, r0
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f000 fa2b 	bl	800a0c2 <USB_WritePacket>
 8009c6c:	e0ce      	b.n	8009e0c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	015a      	lsls	r2, r3, #5
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	4413      	add	r3, r2
 8009c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	69ba      	ldr	r2, [r7, #24]
 8009c7e:	0151      	lsls	r1, r2, #5
 8009c80:	69fa      	ldr	r2, [r7, #28]
 8009c82:	440a      	add	r2, r1
 8009c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c88:	0cdb      	lsrs	r3, r3, #19
 8009c8a:	04db      	lsls	r3, r3, #19
 8009c8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	015a      	lsls	r2, r3, #5
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	4413      	add	r3, r2
 8009c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	69ba      	ldr	r2, [r7, #24]
 8009c9e:	0151      	lsls	r1, r2, #5
 8009ca0:	69fa      	ldr	r2, [r7, #28]
 8009ca2:	440a      	add	r2, r1
 8009ca4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ca8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009cac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009cb0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	695b      	ldr	r3, [r3, #20]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d126      	bne.n	8009d08 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	015a      	lsls	r2, r3, #5
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc6:	691a      	ldr	r2, [r3, #16]
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cd0:	69b9      	ldr	r1, [r7, #24]
 8009cd2:	0148      	lsls	r0, r1, #5
 8009cd4:	69f9      	ldr	r1, [r7, #28]
 8009cd6:	4401      	add	r1, r0
 8009cd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	015a      	lsls	r2, r3, #5
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	69ba      	ldr	r2, [r7, #24]
 8009cf0:	0151      	lsls	r1, r2, #5
 8009cf2:	69fa      	ldr	r2, [r7, #28]
 8009cf4:	440a      	add	r2, r1
 8009cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009cfe:	6113      	str	r3, [r2, #16]
 8009d00:	e036      	b.n	8009d70 <USB_EPStartXfer+0x3dc>
 8009d02:	bf00      	nop
 8009d04:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	695a      	ldr	r2, [r3, #20]
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	4413      	add	r3, r2
 8009d12:	1e5a      	subs	r2, r3, #1
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d1c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	015a      	lsls	r2, r3, #5
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	4413      	add	r3, r2
 8009d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d2a:	691a      	ldr	r2, [r3, #16]
 8009d2c:	8afb      	ldrh	r3, [r7, #22]
 8009d2e:	04d9      	lsls	r1, r3, #19
 8009d30:	4b39      	ldr	r3, [pc, #228]	; (8009e18 <USB_EPStartXfer+0x484>)
 8009d32:	400b      	ands	r3, r1
 8009d34:	69b9      	ldr	r1, [r7, #24]
 8009d36:	0148      	lsls	r0, r1, #5
 8009d38:	69f9      	ldr	r1, [r7, #28]
 8009d3a:	4401      	add	r1, r0
 8009d3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009d40:	4313      	orrs	r3, r2
 8009d42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	015a      	lsls	r2, r3, #5
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d50:	691a      	ldr	r2, [r3, #16]
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	8af9      	ldrh	r1, [r7, #22]
 8009d58:	fb01 f303 	mul.w	r3, r1, r3
 8009d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d60:	69b9      	ldr	r1, [r7, #24]
 8009d62:	0148      	lsls	r0, r1, #5
 8009d64:	69f9      	ldr	r1, [r7, #28]
 8009d66:	4401      	add	r1, r0
 8009d68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009d70:	79fb      	ldrb	r3, [r7, #7]
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d10d      	bne.n	8009d92 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d009      	beq.n	8009d92 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	68d9      	ldr	r1, [r3, #12]
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	015a      	lsls	r2, r3, #5
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	4413      	add	r3, r2
 8009d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d8e:	460a      	mov	r2, r1
 8009d90:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	78db      	ldrb	r3, [r3, #3]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d128      	bne.n	8009dec <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d110      	bne.n	8009dcc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	015a      	lsls	r2, r3, #5
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	4413      	add	r3, r2
 8009db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	69ba      	ldr	r2, [r7, #24]
 8009dba:	0151      	lsls	r1, r2, #5
 8009dbc:	69fa      	ldr	r2, [r7, #28]
 8009dbe:	440a      	add	r2, r1
 8009dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009dc8:	6013      	str	r3, [r2, #0]
 8009dca:	e00f      	b.n	8009dec <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	015a      	lsls	r2, r3, #5
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	69ba      	ldr	r2, [r7, #24]
 8009ddc:	0151      	lsls	r1, r2, #5
 8009dde:	69fa      	ldr	r2, [r7, #28]
 8009de0:	440a      	add	r2, r1
 8009de2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	015a      	lsls	r2, r3, #5
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	4413      	add	r3, r2
 8009df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	69ba      	ldr	r2, [r7, #24]
 8009dfc:	0151      	lsls	r1, r2, #5
 8009dfe:	69fa      	ldr	r2, [r7, #28]
 8009e00:	440a      	add	r2, r1
 8009e02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3720      	adds	r7, #32
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	1ff80000 	.word	0x1ff80000

08009e1c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b087      	sub	sp, #28
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	4613      	mov	r3, r2
 8009e28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	785b      	ldrb	r3, [r3, #1]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	f040 80cd 	bne.w	8009fd8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	695b      	ldr	r3, [r3, #20]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d132      	bne.n	8009eac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	015a      	lsls	r2, r3, #5
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	0151      	lsls	r1, r2, #5
 8009e58:	697a      	ldr	r2, [r7, #20]
 8009e5a:	440a      	add	r2, r1
 8009e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	015a      	lsls	r2, r3, #5
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	4413      	add	r3, r2
 8009e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	693a      	ldr	r2, [r7, #16]
 8009e7a:	0151      	lsls	r1, r2, #5
 8009e7c:	697a      	ldr	r2, [r7, #20]
 8009e7e:	440a      	add	r2, r1
 8009e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	015a      	lsls	r2, r3, #5
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	4413      	add	r3, r2
 8009e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e96:	691b      	ldr	r3, [r3, #16]
 8009e98:	693a      	ldr	r2, [r7, #16]
 8009e9a:	0151      	lsls	r1, r2, #5
 8009e9c:	697a      	ldr	r2, [r7, #20]
 8009e9e:	440a      	add	r2, r1
 8009ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ea4:	0cdb      	lsrs	r3, r3, #19
 8009ea6:	04db      	lsls	r3, r3, #19
 8009ea8:	6113      	str	r3, [r2, #16]
 8009eaa:	e04e      	b.n	8009f4a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	015a      	lsls	r2, r3, #5
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	693a      	ldr	r2, [r7, #16]
 8009ebc:	0151      	lsls	r1, r2, #5
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	440a      	add	r2, r1
 8009ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ec6:	0cdb      	lsrs	r3, r3, #19
 8009ec8:	04db      	lsls	r3, r3, #19
 8009eca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	015a      	lsls	r2, r3, #5
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	693a      	ldr	r2, [r7, #16]
 8009edc:	0151      	lsls	r1, r2, #5
 8009ede:	697a      	ldr	r2, [r7, #20]
 8009ee0:	440a      	add	r2, r1
 8009ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ee6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009eea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009eee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	695a      	ldr	r2, [r3, #20]
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d903      	bls.n	8009f04 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	689a      	ldr	r2, [r3, #8]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	015a      	lsls	r2, r3, #5
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	0151      	lsls	r1, r2, #5
 8009f16:	697a      	ldr	r2, [r7, #20]
 8009f18:	440a      	add	r2, r1
 8009f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	015a      	lsls	r2, r3, #5
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f30:	691a      	ldr	r2, [r3, #16]
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	695b      	ldr	r3, [r3, #20]
 8009f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f3a:	6939      	ldr	r1, [r7, #16]
 8009f3c:	0148      	lsls	r0, r1, #5
 8009f3e:	6979      	ldr	r1, [r7, #20]
 8009f40:	4401      	add	r1, r0
 8009f42:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009f46:	4313      	orrs	r3, r2
 8009f48:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009f4a:	79fb      	ldrb	r3, [r7, #7]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d11e      	bne.n	8009f8e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d009      	beq.n	8009f6c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	015a      	lsls	r2, r3, #5
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	4413      	add	r3, r2
 8009f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f64:	461a      	mov	r2, r3
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	015a      	lsls	r2, r3, #5
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	4413      	add	r3, r2
 8009f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	0151      	lsls	r1, r2, #5
 8009f7e:	697a      	ldr	r2, [r7, #20]
 8009f80:	440a      	add	r2, r1
 8009f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f8a:	6013      	str	r3, [r2, #0]
 8009f8c:	e092      	b.n	800a0b4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	015a      	lsls	r2, r3, #5
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	4413      	add	r3, r2
 8009f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	0151      	lsls	r1, r2, #5
 8009fa0:	697a      	ldr	r2, [r7, #20]
 8009fa2:	440a      	add	r2, r1
 8009fa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fa8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009fac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	695b      	ldr	r3, [r3, #20]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d07e      	beq.n	800a0b4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	f003 030f 	and.w	r3, r3, #15
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009fcc:	6979      	ldr	r1, [r7, #20]
 8009fce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	634b      	str	r3, [r1, #52]	; 0x34
 8009fd6:	e06d      	b.n	800a0b4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	015a      	lsls	r2, r3, #5
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	4413      	add	r3, r2
 8009fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	693a      	ldr	r2, [r7, #16]
 8009fe8:	0151      	lsls	r1, r2, #5
 8009fea:	697a      	ldr	r2, [r7, #20]
 8009fec:	440a      	add	r2, r1
 8009fee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ff2:	0cdb      	lsrs	r3, r3, #19
 8009ff4:	04db      	lsls	r3, r3, #19
 8009ff6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	015a      	lsls	r2, r3, #5
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	4413      	add	r3, r2
 800a000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a004:	691b      	ldr	r3, [r3, #16]
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	0151      	lsls	r1, r2, #5
 800a00a:	697a      	ldr	r2, [r7, #20]
 800a00c:	440a      	add	r2, r1
 800a00e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a012:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a016:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a01a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	695b      	ldr	r3, [r3, #20]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d003      	beq.n	800a02c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	689a      	ldr	r2, [r3, #8]
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	015a      	lsls	r2, r3, #5
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	4413      	add	r3, r2
 800a034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	693a      	ldr	r2, [r7, #16]
 800a03c:	0151      	lsls	r1, r2, #5
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	440a      	add	r2, r1
 800a042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a046:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a04a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	015a      	lsls	r2, r3, #5
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	4413      	add	r3, r2
 800a054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a058:	691a      	ldr	r2, [r3, #16]
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a062:	6939      	ldr	r1, [r7, #16]
 800a064:	0148      	lsls	r0, r1, #5
 800a066:	6979      	ldr	r1, [r7, #20]
 800a068:	4401      	add	r1, r0
 800a06a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a06e:	4313      	orrs	r3, r2
 800a070:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a072:	79fb      	ldrb	r3, [r7, #7]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d10d      	bne.n	800a094 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d009      	beq.n	800a094 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	68d9      	ldr	r1, [r3, #12]
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	015a      	lsls	r2, r3, #5
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	4413      	add	r3, r2
 800a08c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a090:	460a      	mov	r2, r1
 800a092:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	015a      	lsls	r2, r3, #5
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	4413      	add	r3, r2
 800a09c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	693a      	ldr	r2, [r7, #16]
 800a0a4:	0151      	lsls	r1, r2, #5
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	440a      	add	r2, r1
 800a0aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a0b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	371c      	adds	r7, #28
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a0c2:	b480      	push	{r7}
 800a0c4:	b089      	sub	sp, #36	; 0x24
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	60f8      	str	r0, [r7, #12]
 800a0ca:	60b9      	str	r1, [r7, #8]
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	71fb      	strb	r3, [r7, #7]
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a0e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d11a      	bne.n	800a11e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a0e8:	88bb      	ldrh	r3, [r7, #4]
 800a0ea:	3303      	adds	r3, #3
 800a0ec:	089b      	lsrs	r3, r3, #2
 800a0ee:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	61bb      	str	r3, [r7, #24]
 800a0f4:	e00f      	b.n	800a116 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a0f6:	79fb      	ldrb	r3, [r7, #7]
 800a0f8:	031a      	lsls	r2, r3, #12
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a102:	461a      	mov	r2, r3
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	3304      	adds	r3, #4
 800a10e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	3301      	adds	r3, #1
 800a114:	61bb      	str	r3, [r7, #24]
 800a116:	69ba      	ldr	r2, [r7, #24]
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d3eb      	bcc.n	800a0f6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3724      	adds	r7, #36	; 0x24
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b089      	sub	sp, #36	; 0x24
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	60b9      	str	r1, [r7, #8]
 800a136:	4613      	mov	r3, r2
 800a138:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a142:	88fb      	ldrh	r3, [r7, #6]
 800a144:	3303      	adds	r3, #3
 800a146:	089b      	lsrs	r3, r3, #2
 800a148:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a14a:	2300      	movs	r3, #0
 800a14c:	61bb      	str	r3, [r7, #24]
 800a14e:	e00b      	b.n	800a168 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	3304      	adds	r3, #4
 800a160:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	3301      	adds	r3, #1
 800a166:	61bb      	str	r3, [r7, #24]
 800a168:	69ba      	ldr	r2, [r7, #24]
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d3ef      	bcc.n	800a150 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a170:	69fb      	ldr	r3, [r7, #28]
}
 800a172:	4618      	mov	r0, r3
 800a174:	3724      	adds	r7, #36	; 0x24
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr

0800a17e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a17e:	b480      	push	{r7}
 800a180:	b085      	sub	sp, #20
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	785b      	ldrb	r3, [r3, #1]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d12c      	bne.n	800a1f4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	015a      	lsls	r2, r3, #5
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	db12      	blt.n	800a1d2 <USB_EPSetStall+0x54>
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00f      	beq.n	800a1d2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	015a      	lsls	r2, r3, #5
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	68ba      	ldr	r2, [r7, #8]
 800a1c2:	0151      	lsls	r1, r2, #5
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	440a      	add	r2, r1
 800a1c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a1d0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	015a      	lsls	r2, r3, #5
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	4413      	add	r3, r2
 800a1da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68ba      	ldr	r2, [r7, #8]
 800a1e2:	0151      	lsls	r1, r2, #5
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	440a      	add	r2, r1
 800a1e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1f0:	6013      	str	r3, [r2, #0]
 800a1f2:	e02b      	b.n	800a24c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	015a      	lsls	r2, r3, #5
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2b00      	cmp	r3, #0
 800a204:	db12      	blt.n	800a22c <USB_EPSetStall+0xae>
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00f      	beq.n	800a22c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	015a      	lsls	r2, r3, #5
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	4413      	add	r3, r2
 800a214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	0151      	lsls	r1, r2, #5
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	440a      	add	r2, r1
 800a222:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a226:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a22a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	015a      	lsls	r2, r3, #5
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	4413      	add	r3, r2
 800a234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	0151      	lsls	r1, r2, #5
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	440a      	add	r2, r1
 800a242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a246:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a24a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3714      	adds	r7, #20
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b085      	sub	sp, #20
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	785b      	ldrb	r3, [r3, #1]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d128      	bne.n	800a2c8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	015a      	lsls	r2, r3, #5
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	4413      	add	r3, r2
 800a27e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	0151      	lsls	r1, r2, #5
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	440a      	add	r2, r1
 800a28c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a290:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a294:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	78db      	ldrb	r3, [r3, #3]
 800a29a:	2b03      	cmp	r3, #3
 800a29c:	d003      	beq.n	800a2a6 <USB_EPClearStall+0x4c>
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	78db      	ldrb	r3, [r3, #3]
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d138      	bne.n	800a318 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	015a      	lsls	r2, r3, #5
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	0151      	lsls	r1, r2, #5
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	440a      	add	r2, r1
 800a2bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2c4:	6013      	str	r3, [r2, #0]
 800a2c6:	e027      	b.n	800a318 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	015a      	lsls	r2, r3, #5
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	68ba      	ldr	r2, [r7, #8]
 800a2d8:	0151      	lsls	r1, r2, #5
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	440a      	add	r2, r1
 800a2de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	78db      	ldrb	r3, [r3, #3]
 800a2ec:	2b03      	cmp	r3, #3
 800a2ee:	d003      	beq.n	800a2f8 <USB_EPClearStall+0x9e>
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	78db      	ldrb	r3, [r3, #3]
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d10f      	bne.n	800a318 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	015a      	lsls	r2, r3, #5
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	4413      	add	r3, r2
 800a300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	68ba      	ldr	r2, [r7, #8]
 800a308:	0151      	lsls	r1, r2, #5
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	440a      	add	r2, r1
 800a30e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a316:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3714      	adds	r7, #20
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a326:	b480      	push	{r7}
 800a328:	b085      	sub	sp, #20
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	460b      	mov	r3, r1
 800a330:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a344:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a348:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	78fb      	ldrb	r3, [r7, #3]
 800a354:	011b      	lsls	r3, r3, #4
 800a356:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a35a:	68f9      	ldr	r1, [r7, #12]
 800a35c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a360:	4313      	orrs	r3, r2
 800a362:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	3714      	adds	r7, #20
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr

0800a372 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b084      	sub	sp, #16
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a38c:	f023 0302 	bic.w	r3, r3, #2
 800a390:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800a392:	2003      	movs	r0, #3
 800a394:	f7f8 faf6 	bl	8002984 <HAL_Delay>

  return HAL_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b084      	sub	sp, #16
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3bc:	f043 0302 	orr.w	r3, r3, #2
 800a3c0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800a3c2:	2003      	movs	r0, #3
 800a3c4:	f7f8 fade 	bl	8002984 <HAL_Delay>

  return HAL_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b085      	sub	sp, #20
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	695b      	ldr	r3, [r3, #20]
 800a3de:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	699b      	ldr	r3, [r3, #24]
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	4013      	ands	r3, r2
 800a3e8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3714      	adds	r7, #20
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b085      	sub	sp, #20
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a40a:	699b      	ldr	r3, [r3, #24]
 800a40c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a414:	69db      	ldr	r3, [r3, #28]
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	4013      	ands	r3, r2
 800a41a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	0c1b      	lsrs	r3, r3, #16
}
 800a420:	4618      	mov	r0, r3
 800a422:	3714      	adds	r7, #20
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a43e:	699b      	ldr	r3, [r3, #24]
 800a440:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a448:	69db      	ldr	r3, [r3, #28]
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	4013      	ands	r3, r2
 800a44e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	b29b      	uxth	r3, r3
}
 800a454:	4618      	mov	r0, r3
 800a456:	3714      	adds	r7, #20
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	460b      	mov	r3, r1
 800a46a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a470:	78fb      	ldrb	r3, [r7, #3]
 800a472:	015a      	lsls	r2, r3, #5
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	4413      	add	r3, r2
 800a478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a486:	695b      	ldr	r3, [r3, #20]
 800a488:	68ba      	ldr	r2, [r7, #8]
 800a48a:	4013      	ands	r3, r2
 800a48c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a48e:	68bb      	ldr	r3, [r7, #8]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3714      	adds	r7, #20
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b087      	sub	sp, #28
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4be:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a4c0:	78fb      	ldrb	r3, [r7, #3]
 800a4c2:	f003 030f 	and.w	r3, r3, #15
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a4cc:	01db      	lsls	r3, r3, #7
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	693a      	ldr	r2, [r7, #16]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a4d6:	78fb      	ldrb	r3, [r7, #3]
 800a4d8:	015a      	lsls	r2, r3, #5
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	4413      	add	r3, r2
 800a4de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	693a      	ldr	r2, [r7, #16]
 800a4e6:	4013      	ands	r3, r2
 800a4e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a4ea:	68bb      	ldr	r3, [r7, #8]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	371c      	adds	r7, #28
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	695b      	ldr	r3, [r3, #20]
 800a504:	f003 0301 	and.w	r3, r3, #1
}
 800a508:	4618      	mov	r0, r3
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a514:	b480      	push	{r7}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a52e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a532:	f023 0307 	bic.w	r3, r3, #7
 800a536:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a54a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3714      	adds	r7, #20
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr
	...

0800a55c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b087      	sub	sp, #28
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	460b      	mov	r3, r1
 800a566:	607a      	str	r2, [r7, #4]
 800a568:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	333c      	adds	r3, #60	; 0x3c
 800a572:	3304      	adds	r3, #4
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	4a26      	ldr	r2, [pc, #152]	; (800a614 <USB_EP0_OutStart+0xb8>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d90a      	bls.n	800a596 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a58c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a590:	d101      	bne.n	800a596 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	e037      	b.n	800a606 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a59c:	461a      	mov	r2, r3
 800a59e:	2300      	movs	r3, #0
 800a5a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a5b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5c4:	f043 0318 	orr.w	r3, r3, #24
 800a5c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a5dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a5de:	7afb      	ldrb	r3, [r7, #11]
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d10f      	bne.n	800a604 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	697a      	ldr	r2, [r7, #20]
 800a5fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a602:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	371c      	adds	r7, #28
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	4f54300a 	.word	0x4f54300a

0800a618 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a620:	2300      	movs	r3, #0
 800a622:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	3301      	adds	r3, #1
 800a628:	60fb      	str	r3, [r7, #12]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	4a13      	ldr	r2, [pc, #76]	; (800a67c <USB_CoreReset+0x64>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d901      	bls.n	800a636 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a632:	2303      	movs	r3, #3
 800a634:	e01b      	b.n	800a66e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	daf2      	bge.n	800a624 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a63e:	2300      	movs	r3, #0
 800a640:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	f043 0201 	orr.w	r2, r3, #1
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	3301      	adds	r3, #1
 800a652:	60fb      	str	r3, [r7, #12]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	4a09      	ldr	r2, [pc, #36]	; (800a67c <USB_CoreReset+0x64>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d901      	bls.n	800a660 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a65c:	2303      	movs	r3, #3
 800a65e:	e006      	b.n	800a66e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	f003 0301 	and.w	r3, r3, #1
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d0f0      	beq.n	800a64e <USB_CoreReset+0x36>

  return HAL_OK;
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3714      	adds	r7, #20
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	00030d40 	.word	0x00030d40

0800a680 <USBD_MIDI_Init>:
  // IN endpoint descriptor
  0x09, 0x05, MIDI_IN_EP, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x25, 0x01, 0x01, 0x03,
};

static uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	460b      	mov	r3, r1
 800a68a:	70fb      	strb	r3, [r7, #3]
  pInstance = pdev;
 800a68c:	4a0c      	ldr	r2, [pc, #48]	; (800a6c0 <USBD_MIDI_Init+0x40>)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6013      	str	r3, [r2, #0]
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 800a692:	2340      	movs	r3, #64	; 0x40
 800a694:	2202      	movs	r2, #2
 800a696:	2181      	movs	r1, #129	; 0x81
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f001 fd88 	bl	800c1ae <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 800a69e:	2340      	movs	r3, #64	; 0x40
 800a6a0:	2202      	movs	r2, #2
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f001 fd82 	bl	800c1ae <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 800a6aa:	2340      	movs	r3, #64	; 0x40
 800a6ac:	4a05      	ldr	r2, [pc, #20]	; (800a6c4 <USBD_MIDI_Init+0x44>)
 800a6ae:	2101      	movs	r1, #1
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f001 fe6b 	bl	800c38c <USBD_LL_PrepareReceive>
  return 0;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	20000250 	.word	0x20000250
 800a6c4:	20000768 	.word	0x20000768

0800a6c8 <USBD_MIDI_DeInit>:

static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	70fb      	strb	r3, [r7, #3]
  pInstance = NULL;
 800a6d4:	4b07      	ldr	r3, [pc, #28]	; (800a6f4 <USBD_MIDI_DeInit+0x2c>)
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	601a      	str	r2, [r3, #0]
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 800a6da:	2181      	movs	r1, #129	; 0x81
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f001 fd8c 	bl	800c1fa <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,MIDI_OUT_EP);
 800a6e2:	2101      	movs	r1, #1
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f001 fd88 	bl	800c1fa <USBD_LL_CloseEP>
  return 0;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	20000250 	.word	0x20000250

0800a6f8 <USBD_MIDI_DataIn>:

//midi data incoming to host
static uint8_t USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum){
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	460b      	mov	r3, r1
 800a702:	70fb      	strb	r3, [r7, #3]

  if (USB_Tx_State == 1){
 800a704:	4b06      	ldr	r3, [pc, #24]	; (800a720 <USBD_MIDI_DataIn+0x28>)
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d102      	bne.n	800a712 <USBD_MIDI_DataIn+0x1a>
    USB_Tx_State = 0;
 800a70c:	4b04      	ldr	r3, [pc, #16]	; (800a720 <USBD_MIDI_DataIn+0x28>)
 800a70e:	2200      	movs	r2, #0
 800a710:	701a      	strb	r2, [r3, #0]
  }

  return USBD_OK;
 800a712:	2300      	movs	r3, #0
}
 800a714:	4618      	mov	r0, r3
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr
 800a720:	20000260 	.word	0x20000260

0800a724 <USBD_MIDI_DataOut>:

//midi data outcoming from host
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	460b      	mov	r3, r1
 800a72e:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;

  USBD_MIDI_ItfTypeDef *pmidi;
  pmidi = (USBD_MIDI_ItfTypeDef *)(pdev->pUserData);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a736:	60fb      	str	r3, [r7, #12]

  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
 800a73e:	78fa      	ldrb	r2, [r7, #3]
 800a740:	4613      	mov	r3, r2
 800a742:	00db      	lsls	r3, r3, #3
 800a744:	1a9b      	subs	r3, r3, r2
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	440b      	add	r3, r1
 800a74a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	817b      	strh	r3, [r7, #10]

  pmidi->pIf_MidiRx((uint8_t *)&USB_Rx_Buffer, USB_Rx_Cnt);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	897a      	ldrh	r2, [r7, #10]
 800a758:	4611      	mov	r1, r2
 800a75a:	4806      	ldr	r0, [pc, #24]	; (800a774 <USBD_MIDI_DataOut+0x50>)
 800a75c:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 800a75e:	2340      	movs	r3, #64	; 0x40
 800a760:	4a04      	ldr	r2, [pc, #16]	; (800a774 <USBD_MIDI_DataOut+0x50>)
 800a762:	2101      	movs	r1, #1
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f001 fe11 	bl	800c38c <USBD_LL_PrepareReceive>
  return USBD_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}
 800a774:	20000768 	.word	0x20000768

0800a778 <USBD_MIDI_SendPacket>:

void USBD_MIDI_SendPacket (){
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if(USB_Tx_State != 1){
 800a77e:	4b30      	ldr	r3, [pc, #192]	; (800a840 <USBD_MIDI_SendPacket+0xc8>)
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	2b01      	cmp	r3, #1
 800a784:	d059      	beq.n	800a83a <USBD_MIDI_SendPacket+0xc2>
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE){
 800a786:	4b2f      	ldr	r3, [pc, #188]	; (800a844 <USBD_MIDI_SendPacket+0xcc>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a78e:	d102      	bne.n	800a796 <USBD_MIDI_SendPacket+0x1e>
      APP_Rx_ptr_out = 0;
 800a790:	4b2c      	ldr	r3, [pc, #176]	; (800a844 <USBD_MIDI_SendPacket+0xcc>)
 800a792:	2200      	movs	r2, #0
 800a794:	601a      	str	r2, [r3, #0]
    }

    if(APP_Rx_ptr_out == APP_Rx_ptr_in){
 800a796:	4b2b      	ldr	r3, [pc, #172]	; (800a844 <USBD_MIDI_SendPacket+0xcc>)
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	4b2b      	ldr	r3, [pc, #172]	; (800a848 <USBD_MIDI_SendPacket+0xd0>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d103      	bne.n	800a7aa <USBD_MIDI_SendPacket+0x32>
      USB_Tx_State = 0;
 800a7a2:	4b27      	ldr	r3, [pc, #156]	; (800a840 <USBD_MIDI_SendPacket+0xc8>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	701a      	strb	r2, [r3, #0]
      return;
 800a7a8:	e047      	b.n	800a83a <USBD_MIDI_SendPacket+0xc2>
    }

    if(APP_Rx_ptr_out > APP_Rx_ptr_in){
 800a7aa:	4b26      	ldr	r3, [pc, #152]	; (800a844 <USBD_MIDI_SendPacket+0xcc>)
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	4b26      	ldr	r3, [pc, #152]	; (800a848 <USBD_MIDI_SendPacket+0xd0>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d906      	bls.n	800a7c4 <USBD_MIDI_SendPacket+0x4c>
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 800a7b6:	4b23      	ldr	r3, [pc, #140]	; (800a844 <USBD_MIDI_SendPacket+0xcc>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a7be:	4a23      	ldr	r2, [pc, #140]	; (800a84c <USBD_MIDI_SendPacket+0xd4>)
 800a7c0:	6013      	str	r3, [r2, #0]
 800a7c2:	e006      	b.n	800a7d2 <USBD_MIDI_SendPacket+0x5a>
    }else{
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 800a7c4:	4b20      	ldr	r3, [pc, #128]	; (800a848 <USBD_MIDI_SendPacket+0xd0>)
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	4b1e      	ldr	r3, [pc, #120]	; (800a844 <USBD_MIDI_SendPacket+0xcc>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	1ad3      	subs	r3, r2, r3
 800a7ce:	4a1f      	ldr	r2, [pc, #124]	; (800a84c <USBD_MIDI_SendPacket+0xd4>)
 800a7d0:	6013      	str	r3, [r2, #0]
    }

    if (APP_Rx_length > MIDI_DATA_IN_PACKET_SIZE){
 800a7d2:	4b1e      	ldr	r3, [pc, #120]	; (800a84c <USBD_MIDI_SendPacket+0xd4>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2b40      	cmp	r3, #64	; 0x40
 800a7d8:	d90f      	bls.n	800a7fa <USBD_MIDI_SendPacket+0x82>
      USB_Tx_ptr = APP_Rx_ptr_out;
 800a7da:	4b1a      	ldr	r3, [pc, #104]	; (800a844 <USBD_MIDI_SendPacket+0xcc>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = MIDI_DATA_IN_PACKET_SIZE;
 800a7e0:	2340      	movs	r3, #64	; 0x40
 800a7e2:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += MIDI_DATA_IN_PACKET_SIZE;
 800a7e4:	4b17      	ldr	r3, [pc, #92]	; (800a844 <USBD_MIDI_SendPacket+0xcc>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	3340      	adds	r3, #64	; 0x40
 800a7ea:	4a16      	ldr	r2, [pc, #88]	; (800a844 <USBD_MIDI_SendPacket+0xcc>)
 800a7ec:	6013      	str	r3, [r2, #0]
      APP_Rx_length -= MIDI_DATA_IN_PACKET_SIZE;
 800a7ee:	4b17      	ldr	r3, [pc, #92]	; (800a84c <USBD_MIDI_SendPacket+0xd4>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	3b40      	subs	r3, #64	; 0x40
 800a7f4:	4a15      	ldr	r2, [pc, #84]	; (800a84c <USBD_MIDI_SendPacket+0xd4>)
 800a7f6:	6013      	str	r3, [r2, #0]
 800a7f8:	e00f      	b.n	800a81a <USBD_MIDI_SendPacket+0xa2>
    }else{
      USB_Tx_ptr = APP_Rx_ptr_out;
 800a7fa:	4b12      	ldr	r3, [pc, #72]	; (800a844 <USBD_MIDI_SendPacket+0xcc>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = APP_Rx_length;
 800a800:	4b12      	ldr	r3, [pc, #72]	; (800a84c <USBD_MIDI_SendPacket+0xd4>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += APP_Rx_length;
 800a806:	4b0f      	ldr	r3, [pc, #60]	; (800a844 <USBD_MIDI_SendPacket+0xcc>)
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	4b10      	ldr	r3, [pc, #64]	; (800a84c <USBD_MIDI_SendPacket+0xd4>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4413      	add	r3, r2
 800a810:	4a0c      	ldr	r2, [pc, #48]	; (800a844 <USBD_MIDI_SendPacket+0xcc>)
 800a812:	6013      	str	r3, [r2, #0]
      APP_Rx_length = 0;
 800a814:	4b0d      	ldr	r3, [pc, #52]	; (800a84c <USBD_MIDI_SendPacket+0xd4>)
 800a816:	2200      	movs	r2, #0
 800a818:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1;
 800a81a:	4b09      	ldr	r3, [pc, #36]	; (800a840 <USBD_MIDI_SendPacket+0xc8>)
 800a81c:	2201      	movs	r2, #1
 800a81e:	701a      	strb	r2, [r3, #0]
    while(USBD_LL_Transmit(pInstance,
 800a820:	bf00      	nop
 800a822:	4b0b      	ldr	r3, [pc, #44]	; (800a850 <USBD_MIDI_SendPacket+0xd8>)
 800a824:	6818      	ldr	r0, [r3, #0]
    		MIDI_IN_EP,(uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],USB_Tx_length) != USBD_OK);
 800a826:	88fb      	ldrh	r3, [r7, #6]
    while(USBD_LL_Transmit(pInstance,
 800a828:	4a0a      	ldr	r2, [pc, #40]	; (800a854 <USBD_MIDI_SendPacket+0xdc>)
 800a82a:	441a      	add	r2, r3
 800a82c:	88bb      	ldrh	r3, [r7, #4]
 800a82e:	2181      	movs	r1, #129	; 0x81
 800a830:	f001 fd8b 	bl	800c34a <USBD_LL_Transmit>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1f3      	bne.n	800a822 <USBD_MIDI_SendPacket+0xaa>
  }
}
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	20000260 	.word	0x20000260
 800a844:	20000258 	.word	0x20000258
 800a848:	20000254 	.word	0x20000254
 800a84c:	2000025c 	.word	0x2000025c
 800a850:	20000250 	.word	0x20000250
 800a854:	200007a8 	.word	0x200007a8

0800a858 <USBD_MIDI_GetCfgDesc>:

static uint8_t *USBD_MIDI_GetCfgDesc (uint16_t *length){
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2265      	movs	r2, #101	; 0x65
 800a864:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 800a866:	4b03      	ldr	r3, [pc, #12]	; (800a874 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 800a868:	4618      	mov	r0, r3
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr
 800a874:	200000d0 	.word	0x200000d0

0800a878 <USBD_MIDI_RegisterInterface>:
//  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
//  return USBD_MIDI_DeviceQualifierDesc;
//}

uint8_t USBD_MIDI_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_MIDI_ItfTypeDef *fops)
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  uint8_t ret = USBD_FAIL;
 800a882:	2303      	movs	r3, #3
 800a884:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL){
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d005      	beq.n	800a898 <USBD_MIDI_RegisterInterface+0x20>
    pdev->pUserData= fops;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;    
 800a894:	2300      	movs	r3, #0
 800a896:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800a898:	7bfb      	ldrb	r3, [r7, #15]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3714      	adds	r7, #20
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr

0800a8a6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b086      	sub	sp, #24
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	60f8      	str	r0, [r7, #12]
 800a8ae:	60b9      	str	r1, [r7, #8]
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d101      	bne.n	800a8be <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e025      	b.n	800a90a <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d003      	beq.n	800a8d0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d003      	beq.n	800a8e2 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d003      	beq.n	800a8f0 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	68ba      	ldr	r2, [r7, #8]
 800a8ec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	79fa      	ldrb	r2, [r7, #7]
 800a8fc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f001 fbee 	bl	800c0e0 <USBD_LL_Init>
 800a904:	4603      	mov	r3, r0
 800a906:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a908:	7dfb      	ldrb	r3, [r7, #23]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3718      	adds	r7, #24
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b084      	sub	sp, #16
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a91c:	2300      	movs	r3, #0
 800a91e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d101      	bne.n	800a92a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a926:	2303      	movs	r3, #3
 800a928:	e010      	b.n	800a94c <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	683a      	ldr	r2, [r7, #0]
 800a92e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93a:	f107 020e 	add.w	r2, r7, #14
 800a93e:	4610      	mov	r0, r2
 800a940:	4798      	blx	r3
 800a942:	4602      	mov	r2, r0
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
#endif /* USE_USB_FS */


  return USBD_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f001 fc0b 	bl	800c178 <USBD_LL_Start>
 800a962:	4603      	mov	r3, r0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3708      	adds	r7, #8
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b084      	sub	sp, #16
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	460b      	mov	r3, r1
 800a98c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a98e:	2303      	movs	r3, #3
 800a990:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d009      	beq.n	800a9b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	78fa      	ldrb	r2, [r7, #3]
 800a9a6:	4611      	mov	r1, r2
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	4798      	blx	r3
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b082      	sub	sp, #8
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d007      	beq.n	800a9e0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	78fa      	ldrb	r2, [r7, #3]
 800a9da:	4611      	mov	r1, r2
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	4798      	blx	r3
  }

  return USBD_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b084      	sub	sp, #16
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a9fa:	6839      	ldr	r1, [r7, #0]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f000 ff2b 	bl	800b858 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2201      	movs	r2, #1
 800aa06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800aa10:	461a      	mov	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aa1e:	f003 031f 	and.w	r3, r3, #31
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d00e      	beq.n	800aa44 <USBD_LL_SetupStage+0x5a>
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d302      	bcc.n	800aa30 <USBD_LL_SetupStage+0x46>
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d014      	beq.n	800aa58 <USBD_LL_SetupStage+0x6e>
 800aa2e:	e01d      	b.n	800aa6c <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa36:	4619      	mov	r1, r3
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 fa17 	bl	800ae6c <USBD_StdDevReq>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	73fb      	strb	r3, [r7, #15]
      break;
 800aa42:	e020      	b.n	800aa86 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 fa7b 	bl	800af48 <USBD_StdItfReq>
 800aa52:	4603      	mov	r3, r0
 800aa54:	73fb      	strb	r3, [r7, #15]
      break;
 800aa56:	e016      	b.n	800aa86 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa5e:	4619      	mov	r1, r3
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 fab7 	bl	800afd4 <USBD_StdEPReq>
 800aa66:	4603      	mov	r3, r0
 800aa68:	73fb      	strb	r3, [r7, #15]
      break;
 800aa6a:	e00c      	b.n	800aa86 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aa72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	4619      	mov	r1, r3
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f001 fbdc 	bl	800c238 <USBD_LL_StallEP>
 800aa80:	4603      	mov	r3, r0
 800aa82:	73fb      	strb	r3, [r7, #15]
      break;
 800aa84:	bf00      	nop
  }

  return ret;
 800aa86:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b086      	sub	sp, #24
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	460b      	mov	r3, r1
 800aa9a:	607a      	str	r2, [r7, #4]
 800aa9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aa9e:	7afb      	ldrb	r3, [r7, #11]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d137      	bne.n	800ab14 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aaaa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aab2:	2b03      	cmp	r3, #3
 800aab4:	d14a      	bne.n	800ab4c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	689a      	ldr	r2, [r3, #8]
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d913      	bls.n	800aaea <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	689a      	ldr	r2, [r3, #8]
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	1ad2      	subs	r2, r2, r3
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	68da      	ldr	r2, [r3, #12]
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	4293      	cmp	r3, r2
 800aada:	bf28      	it	cs
 800aadc:	4613      	movcs	r3, r2
 800aade:	461a      	mov	r2, r3
 800aae0:	6879      	ldr	r1, [r7, #4]
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f000 ff8f 	bl	800ba06 <USBD_CtlContinueRx>
 800aae8:	e030      	b.n	800ab4c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00a      	beq.n	800ab0c <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aafc:	2b03      	cmp	r3, #3
 800aafe:	d105      	bne.n	800ab0c <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab06:	691b      	ldr	r3, [r3, #16]
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f000 ff8b 	bl	800ba28 <USBD_CtlSendStatus>
 800ab12:	e01b      	b.n	800ab4c <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab1a:	699b      	ldr	r3, [r3, #24]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d013      	beq.n	800ab48 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ab26:	2b03      	cmp	r3, #3
 800ab28:	d10e      	bne.n	800ab48 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	7afa      	ldrb	r2, [r7, #11]
 800ab34:	4611      	mov	r1, r2
 800ab36:	68f8      	ldr	r0, [r7, #12]
 800ab38:	4798      	blx	r3
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ab3e:	7dfb      	ldrb	r3, [r7, #23]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d003      	beq.n	800ab4c <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800ab44:	7dfb      	ldrb	r3, [r7, #23]
 800ab46:	e002      	b.n	800ab4e <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ab48:	2303      	movs	r3, #3
 800ab4a:	e000      	b.n	800ab4e <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3718      	adds	r7, #24
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b086      	sub	sp, #24
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	60f8      	str	r0, [r7, #12]
 800ab5e:	460b      	mov	r3, r1
 800ab60:	607a      	str	r2, [r7, #4]
 800ab62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ab64:	7afb      	ldrb	r3, [r7, #11]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d16a      	bne.n	800ac40 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	3314      	adds	r3, #20
 800ab6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab76:	2b02      	cmp	r3, #2
 800ab78:	d155      	bne.n	800ac26 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	689a      	ldr	r2, [r3, #8]
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d914      	bls.n	800abb0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	689a      	ldr	r2, [r3, #8]
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	68db      	ldr	r3, [r3, #12]
 800ab8e:	1ad2      	subs	r2, r2, r3
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	461a      	mov	r2, r3
 800ab9a:	6879      	ldr	r1, [r7, #4]
 800ab9c:	68f8      	ldr	r0, [r7, #12]
 800ab9e:	f000 ff21 	bl	800b9e4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aba2:	2300      	movs	r3, #0
 800aba4:	2200      	movs	r2, #0
 800aba6:	2100      	movs	r1, #0
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f001 fbef 	bl	800c38c <USBD_LL_PrepareReceive>
 800abae:	e03a      	b.n	800ac26 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	68da      	ldr	r2, [r3, #12]
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d11c      	bne.n	800abf6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	685a      	ldr	r2, [r3, #4]
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d316      	bcc.n	800abf6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	685a      	ldr	r2, [r3, #4]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d20f      	bcs.n	800abf6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800abd6:	2200      	movs	r2, #0
 800abd8:	2100      	movs	r1, #0
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f000 ff02 	bl	800b9e4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abe8:	2300      	movs	r3, #0
 800abea:	2200      	movs	r2, #0
 800abec:	2100      	movs	r1, #0
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f001 fbcc 	bl	800c38c <USBD_LL_PrepareReceive>
 800abf4:	e017      	b.n	800ac26 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00a      	beq.n	800ac18 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ac08:	2b03      	cmp	r3, #3
 800ac0a:	d105      	bne.n	800ac18 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac18:	2180      	movs	r1, #128	; 0x80
 800ac1a:	68f8      	ldr	r0, [r7, #12]
 800ac1c:	f001 fb0c 	bl	800c238 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f000 ff14 	bl	800ba4e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d123      	bne.n	800ac78 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	f7ff fe9b 	bl	800a96c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ac3e:	e01b      	b.n	800ac78 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac46:	695b      	ldr	r3, [r3, #20]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d013      	beq.n	800ac74 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ac52:	2b03      	cmp	r3, #3
 800ac54:	d10e      	bne.n	800ac74 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac5c:	695b      	ldr	r3, [r3, #20]
 800ac5e:	7afa      	ldrb	r2, [r7, #11]
 800ac60:	4611      	mov	r1, r2
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	4798      	blx	r3
 800ac66:	4603      	mov	r3, r0
 800ac68:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ac6a:	7dfb      	ldrb	r3, [r7, #23]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d003      	beq.n	800ac78 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800ac70:	7dfb      	ldrb	r3, [r7, #23]
 800ac72:	e002      	b.n	800ac7a <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ac74:	2303      	movs	r3, #3
 800ac76:	e000      	b.n	800ac7a <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3718      	adds	r7, #24
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b082      	sub	sp, #8
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d009      	beq.n	800acc6 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	6852      	ldr	r2, [r2, #4]
 800acbe:	b2d2      	uxtb	r2, r2
 800acc0:	4611      	mov	r1, r2
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800acc6:	2340      	movs	r3, #64	; 0x40
 800acc8:	2200      	movs	r2, #0
 800acca:	2100      	movs	r1, #0
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f001 fa6e 	bl	800c1ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2201      	movs	r2, #1
 800acd6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2240      	movs	r2, #64	; 0x40
 800acde:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ace2:	2340      	movs	r3, #64	; 0x40
 800ace4:	2200      	movs	r2, #0
 800ace6:	2180      	movs	r1, #128	; 0x80
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f001 fa60 	bl	800c1ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2201      	movs	r2, #1
 800acf2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2240      	movs	r2, #64	; 0x40
 800acf8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3708      	adds	r7, #8
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	78fa      	ldrb	r2, [r7, #3]
 800ad14:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2204      	movs	r2, #4
 800ad3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	370c      	adds	r7, #12
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ad4e:	b480      	push	{r7}
 800ad50:	b083      	sub	sp, #12
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad5c:	2b04      	cmp	r3, #4
 800ad5e:	d105      	bne.n	800ad6c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ad6c:	2300      	movs	r3, #0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	370c      	adds	r7, #12
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ad7a:	b580      	push	{r7, lr}
 800ad7c:	b082      	sub	sp, #8
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad88:	2b03      	cmp	r3, #3
 800ad8a:	d10b      	bne.n	800ada4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad92:	69db      	ldr	r3, [r3, #28]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d005      	beq.n	800ada4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad9e:	69db      	ldr	r3, [r3, #28]
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800adae:	b480      	push	{r7}
 800adb0:	b083      	sub	sp, #12
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	460b      	mov	r3, r1
 800adb8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800adba:	2300      	movs	r3, #0
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	460b      	mov	r3, r1
 800add2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	370c      	adds	r7, #12
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr

0800ade2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ade2:	b480      	push	{r7}
 800ade4:	b083      	sub	sp, #12
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	370c      	adds	r7, #12
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr

0800adf8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2201      	movs	r2, #1
 800ae04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d009      	beq.n	800ae26 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	6852      	ldr	r2, [r2, #4]
 800ae1e:	b2d2      	uxtb	r2, r2
 800ae20:	4611      	mov	r1, r2
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	4798      	blx	r3
  }

  return USBD_OK;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b087      	sub	sp, #28
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	3301      	adds	r3, #1
 800ae46:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ae4e:	8a3b      	ldrh	r3, [r7, #16]
 800ae50:	021b      	lsls	r3, r3, #8
 800ae52:	b21a      	sxth	r2, r3
 800ae54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	b21b      	sxth	r3, r3
 800ae5c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ae5e:	89fb      	ldrh	r3, [r7, #14]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	371c      	adds	r7, #28
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae76:	2300      	movs	r3, #0
 800ae78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae82:	2b20      	cmp	r3, #32
 800ae84:	d004      	beq.n	800ae90 <USBD_StdDevReq+0x24>
 800ae86:	2b40      	cmp	r3, #64	; 0x40
 800ae88:	d002      	beq.n	800ae90 <USBD_StdDevReq+0x24>
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00a      	beq.n	800aea4 <USBD_StdDevReq+0x38>
 800ae8e:	e050      	b.n	800af32 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	6839      	ldr	r1, [r7, #0]
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	4798      	blx	r3
 800ae9e:	4603      	mov	r3, r0
 800aea0:	73fb      	strb	r3, [r7, #15]
    break;
 800aea2:	e04b      	b.n	800af3c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	785b      	ldrb	r3, [r3, #1]
 800aea8:	2b09      	cmp	r3, #9
 800aeaa:	d83c      	bhi.n	800af26 <USBD_StdDevReq+0xba>
 800aeac:	a201      	add	r2, pc, #4	; (adr r2, 800aeb4 <USBD_StdDevReq+0x48>)
 800aeae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb2:	bf00      	nop
 800aeb4:	0800af09 	.word	0x0800af09
 800aeb8:	0800af1d 	.word	0x0800af1d
 800aebc:	0800af27 	.word	0x0800af27
 800aec0:	0800af13 	.word	0x0800af13
 800aec4:	0800af27 	.word	0x0800af27
 800aec8:	0800aee7 	.word	0x0800aee7
 800aecc:	0800aedd 	.word	0x0800aedd
 800aed0:	0800af27 	.word	0x0800af27
 800aed4:	0800aeff 	.word	0x0800aeff
 800aed8:	0800aef1 	.word	0x0800aef1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800aedc:	6839      	ldr	r1, [r7, #0]
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 f9ce 	bl	800b280 <USBD_GetDescriptor>
      break;
 800aee4:	e024      	b.n	800af30 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800aee6:	6839      	ldr	r1, [r7, #0]
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 fb33 	bl	800b554 <USBD_SetAddress>
      break;
 800aeee:	e01f      	b.n	800af30 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800aef0:	6839      	ldr	r1, [r7, #0]
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 fb70 	bl	800b5d8 <USBD_SetConfig>
 800aef8:	4603      	mov	r3, r0
 800aefa:	73fb      	strb	r3, [r7, #15]
      break;
 800aefc:	e018      	b.n	800af30 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800aefe:	6839      	ldr	r1, [r7, #0]
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fc0d 	bl	800b720 <USBD_GetConfig>
      break;
 800af06:	e013      	b.n	800af30 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fc3c 	bl	800b788 <USBD_GetStatus>
      break;
 800af10:	e00e      	b.n	800af30 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800af12:	6839      	ldr	r1, [r7, #0]
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fc6a 	bl	800b7ee <USBD_SetFeature>
      break;
 800af1a:	e009      	b.n	800af30 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800af1c:	6839      	ldr	r1, [r7, #0]
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 fc79 	bl	800b816 <USBD_ClrFeature>
      break;
 800af24:	e004      	b.n	800af30 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800af26:	6839      	ldr	r1, [r7, #0]
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 fccf 	bl	800b8cc <USBD_CtlError>
      break;
 800af2e:	bf00      	nop
    }
    break;
 800af30:	e004      	b.n	800af3c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800af32:	6839      	ldr	r1, [r7, #0]
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 fcc9 	bl	800b8cc <USBD_CtlError>
    break;
 800af3a:	bf00      	nop
  }

  return ret;
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop

0800af48 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af52:	2300      	movs	r3, #0
 800af54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af5e:	2b20      	cmp	r3, #32
 800af60:	d003      	beq.n	800af6a <USBD_StdItfReq+0x22>
 800af62:	2b40      	cmp	r3, #64	; 0x40
 800af64:	d001      	beq.n	800af6a <USBD_StdItfReq+0x22>
 800af66:	2b00      	cmp	r3, #0
 800af68:	d12a      	bne.n	800afc0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af70:	3b01      	subs	r3, #1
 800af72:	2b02      	cmp	r3, #2
 800af74:	d81d      	bhi.n	800afb2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	889b      	ldrh	r3, [r3, #4]
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d813      	bhi.n	800afa8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	6839      	ldr	r1, [r7, #0]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	4798      	blx	r3
 800af8e:	4603      	mov	r3, r0
 800af90:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	88db      	ldrh	r3, [r3, #6]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d110      	bne.n	800afbc <USBD_StdItfReq+0x74>
 800af9a:	7bfb      	ldrb	r3, [r7, #15]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d10d      	bne.n	800afbc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 fd41 	bl	800ba28 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800afa6:	e009      	b.n	800afbc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800afa8:	6839      	ldr	r1, [r7, #0]
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 fc8e 	bl	800b8cc <USBD_CtlError>
      break;
 800afb0:	e004      	b.n	800afbc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800afb2:	6839      	ldr	r1, [r7, #0]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 fc89 	bl	800b8cc <USBD_CtlError>
      break;
 800afba:	e000      	b.n	800afbe <USBD_StdItfReq+0x76>
      break;
 800afbc:	bf00      	nop
    }
    break;
 800afbe:	e004      	b.n	800afca <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800afc0:	6839      	ldr	r1, [r7, #0]
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 fc82 	bl	800b8cc <USBD_CtlError>
    break;
 800afc8:	bf00      	nop
  }

  return ret;
 800afca:	7bfb      	ldrb	r3, [r7, #15]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3710      	adds	r7, #16
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800afde:	2300      	movs	r3, #0
 800afe0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	889b      	ldrh	r3, [r3, #4]
 800afe6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aff0:	2b20      	cmp	r3, #32
 800aff2:	d004      	beq.n	800affe <USBD_StdEPReq+0x2a>
 800aff4:	2b40      	cmp	r3, #64	; 0x40
 800aff6:	d002      	beq.n	800affe <USBD_StdEPReq+0x2a>
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00a      	beq.n	800b012 <USBD_StdEPReq+0x3e>
 800affc:	e135      	b.n	800b26a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	4798      	blx	r3
 800b00c:	4603      	mov	r3, r0
 800b00e:	73fb      	strb	r3, [r7, #15]
    break;
 800b010:	e130      	b.n	800b274 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	785b      	ldrb	r3, [r3, #1]
 800b016:	2b01      	cmp	r3, #1
 800b018:	d03e      	beq.n	800b098 <USBD_StdEPReq+0xc4>
 800b01a:	2b03      	cmp	r3, #3
 800b01c:	d002      	beq.n	800b024 <USBD_StdEPReq+0x50>
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d077      	beq.n	800b112 <USBD_StdEPReq+0x13e>
 800b022:	e11c      	b.n	800b25e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b02a:	2b02      	cmp	r3, #2
 800b02c:	d002      	beq.n	800b034 <USBD_StdEPReq+0x60>
 800b02e:	2b03      	cmp	r3, #3
 800b030:	d015      	beq.n	800b05e <USBD_StdEPReq+0x8a>
 800b032:	e02b      	b.n	800b08c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b034:	7bbb      	ldrb	r3, [r7, #14]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00c      	beq.n	800b054 <USBD_StdEPReq+0x80>
 800b03a:	7bbb      	ldrb	r3, [r7, #14]
 800b03c:	2b80      	cmp	r3, #128	; 0x80
 800b03e:	d009      	beq.n	800b054 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b040:	7bbb      	ldrb	r3, [r7, #14]
 800b042:	4619      	mov	r1, r3
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f001 f8f7 	bl	800c238 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b04a:	2180      	movs	r1, #128	; 0x80
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f001 f8f3 	bl	800c238 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b052:	e020      	b.n	800b096 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800b054:	6839      	ldr	r1, [r7, #0]
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fc38 	bl	800b8cc <USBD_CtlError>
        break;
 800b05c:	e01b      	b.n	800b096 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	885b      	ldrh	r3, [r3, #2]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d10e      	bne.n	800b084 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b066:	7bbb      	ldrb	r3, [r7, #14]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00b      	beq.n	800b084 <USBD_StdEPReq+0xb0>
 800b06c:	7bbb      	ldrb	r3, [r7, #14]
 800b06e:	2b80      	cmp	r3, #128	; 0x80
 800b070:	d008      	beq.n	800b084 <USBD_StdEPReq+0xb0>
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	88db      	ldrh	r3, [r3, #6]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d104      	bne.n	800b084 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800b07a:	7bbb      	ldrb	r3, [r7, #14]
 800b07c:	4619      	mov	r1, r3
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f001 f8da 	bl	800c238 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 fccf 	bl	800ba28 <USBD_CtlSendStatus>

        break;
 800b08a:	e004      	b.n	800b096 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800b08c:	6839      	ldr	r1, [r7, #0]
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 fc1c 	bl	800b8cc <USBD_CtlError>
        break;
 800b094:	bf00      	nop
      }
      break;
 800b096:	e0e7      	b.n	800b268 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d002      	beq.n	800b0a8 <USBD_StdEPReq+0xd4>
 800b0a2:	2b03      	cmp	r3, #3
 800b0a4:	d015      	beq.n	800b0d2 <USBD_StdEPReq+0xfe>
 800b0a6:	e02d      	b.n	800b104 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0a8:	7bbb      	ldrb	r3, [r7, #14]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d00c      	beq.n	800b0c8 <USBD_StdEPReq+0xf4>
 800b0ae:	7bbb      	ldrb	r3, [r7, #14]
 800b0b0:	2b80      	cmp	r3, #128	; 0x80
 800b0b2:	d009      	beq.n	800b0c8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0b4:	7bbb      	ldrb	r3, [r7, #14]
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f001 f8bd 	bl	800c238 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0be:	2180      	movs	r1, #128	; 0x80
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f001 f8b9 	bl	800c238 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b0c6:	e023      	b.n	800b110 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800b0c8:	6839      	ldr	r1, [r7, #0]
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 fbfe 	bl	800b8cc <USBD_CtlError>
        break;
 800b0d0:	e01e      	b.n	800b110 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	885b      	ldrh	r3, [r3, #2]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d119      	bne.n	800b10e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800b0da:	7bbb      	ldrb	r3, [r7, #14]
 800b0dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d004      	beq.n	800b0ee <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b0e4:	7bbb      	ldrb	r3, [r7, #14]
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f001 f8c4 	bl	800c276 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 fc9a 	bl	800ba28 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0fa:	689b      	ldr	r3, [r3, #8]
 800b0fc:	6839      	ldr	r1, [r7, #0]
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	4798      	blx	r3
        }
        break;
 800b102:	e004      	b.n	800b10e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800b104:	6839      	ldr	r1, [r7, #0]
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 fbe0 	bl	800b8cc <USBD_CtlError>
        break;
 800b10c:	e000      	b.n	800b110 <USBD_StdEPReq+0x13c>
        break;
 800b10e:	bf00      	nop
      }
      break;
 800b110:	e0aa      	b.n	800b268 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b118:	2b02      	cmp	r3, #2
 800b11a:	d002      	beq.n	800b122 <USBD_StdEPReq+0x14e>
 800b11c:	2b03      	cmp	r3, #3
 800b11e:	d032      	beq.n	800b186 <USBD_StdEPReq+0x1b2>
 800b120:	e097      	b.n	800b252 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b122:	7bbb      	ldrb	r3, [r7, #14]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d007      	beq.n	800b138 <USBD_StdEPReq+0x164>
 800b128:	7bbb      	ldrb	r3, [r7, #14]
 800b12a:	2b80      	cmp	r3, #128	; 0x80
 800b12c:	d004      	beq.n	800b138 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800b12e:	6839      	ldr	r1, [r7, #0]
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 fbcb 	bl	800b8cc <USBD_CtlError>
          break;
 800b136:	e091      	b.n	800b25c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b138:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	da0b      	bge.n	800b158 <USBD_StdEPReq+0x184>
 800b140:	7bbb      	ldrb	r3, [r7, #14]
 800b142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b146:	4613      	mov	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	4413      	add	r3, r2
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	3310      	adds	r3, #16
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	4413      	add	r3, r2
 800b154:	3304      	adds	r3, #4
 800b156:	e00b      	b.n	800b170 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b158:	7bbb      	ldrb	r3, [r7, #14]
 800b15a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b15e:	4613      	mov	r3, r2
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	4413      	add	r3, r2
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	4413      	add	r3, r2
 800b16e:	3304      	adds	r3, #4
 800b170:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	2200      	movs	r2, #0
 800b176:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	2202      	movs	r2, #2
 800b17c:	4619      	mov	r1, r3
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 fc15 	bl	800b9ae <USBD_CtlSendData>
        break;
 800b184:	e06a      	b.n	800b25c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800b186:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	da11      	bge.n	800b1b2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b18e:	7bbb      	ldrb	r3, [r7, #14]
 800b190:	f003 020f 	and.w	r2, r3, #15
 800b194:	6879      	ldr	r1, [r7, #4]
 800b196:	4613      	mov	r3, r2
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	4413      	add	r3, r2
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	440b      	add	r3, r1
 800b1a0:	3324      	adds	r3, #36	; 0x24
 800b1a2:	881b      	ldrh	r3, [r3, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d117      	bne.n	800b1d8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800b1a8:	6839      	ldr	r1, [r7, #0]
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 fb8e 	bl	800b8cc <USBD_CtlError>
            break;
 800b1b0:	e054      	b.n	800b25c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b1b2:	7bbb      	ldrb	r3, [r7, #14]
 800b1b4:	f003 020f 	and.w	r2, r3, #15
 800b1b8:	6879      	ldr	r1, [r7, #4]
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	4413      	add	r3, r2
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	440b      	add	r3, r1
 800b1c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b1c8:	881b      	ldrh	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d104      	bne.n	800b1d8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800b1ce:	6839      	ldr	r1, [r7, #0]
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 fb7b 	bl	800b8cc <USBD_CtlError>
            break;
 800b1d6:	e041      	b.n	800b25c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	da0b      	bge.n	800b1f8 <USBD_StdEPReq+0x224>
 800b1e0:	7bbb      	ldrb	r3, [r7, #14]
 800b1e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4413      	add	r3, r2
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	3310      	adds	r3, #16
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	4413      	add	r3, r2
 800b1f4:	3304      	adds	r3, #4
 800b1f6:	e00b      	b.n	800b210 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b1f8:	7bbb      	ldrb	r3, [r7, #14]
 800b1fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1fe:	4613      	mov	r3, r2
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	4413      	add	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	4413      	add	r3, r2
 800b20e:	3304      	adds	r3, #4
 800b210:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b212:	7bbb      	ldrb	r3, [r7, #14]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d002      	beq.n	800b21e <USBD_StdEPReq+0x24a>
 800b218:	7bbb      	ldrb	r3, [r7, #14]
 800b21a:	2b80      	cmp	r3, #128	; 0x80
 800b21c:	d103      	bne.n	800b226 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	2200      	movs	r2, #0
 800b222:	601a      	str	r2, [r3, #0]
 800b224:	e00e      	b.n	800b244 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b226:	7bbb      	ldrb	r3, [r7, #14]
 800b228:	4619      	mov	r1, r3
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f001 f842 	bl	800c2b4 <USBD_LL_IsStallEP>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d003      	beq.n	800b23e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	2201      	movs	r2, #1
 800b23a:	601a      	str	r2, [r3, #0]
 800b23c:	e002      	b.n	800b244 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	2200      	movs	r2, #0
 800b242:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	2202      	movs	r2, #2
 800b248:	4619      	mov	r1, r3
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 fbaf 	bl	800b9ae <USBD_CtlSendData>
          break;
 800b250:	e004      	b.n	800b25c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800b252:	6839      	ldr	r1, [r7, #0]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 fb39 	bl	800b8cc <USBD_CtlError>
        break;
 800b25a:	bf00      	nop
      }
      break;
 800b25c:	e004      	b.n	800b268 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800b25e:	6839      	ldr	r1, [r7, #0]
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 fb33 	bl	800b8cc <USBD_CtlError>
      break;
 800b266:	bf00      	nop
    }
    break;
 800b268:	e004      	b.n	800b274 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800b26a:	6839      	ldr	r1, [r7, #0]
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 fb2d 	bl	800b8cc <USBD_CtlError>
    break;
 800b272:	bf00      	nop
  }

  return ret;
 800b274:	7bfb      	ldrb	r3, [r7, #15]
}
 800b276:	4618      	mov	r0, r3
 800b278:	3710      	adds	r7, #16
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
	...

0800b280 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b28a:	2300      	movs	r3, #0
 800b28c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b28e:	2300      	movs	r3, #0
 800b290:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b292:	2300      	movs	r3, #0
 800b294:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	885b      	ldrh	r3, [r3, #2]
 800b29a:	0a1b      	lsrs	r3, r3, #8
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	2b06      	cmp	r3, #6
 800b2a2:	f200 8128 	bhi.w	800b4f6 <USBD_GetDescriptor+0x276>
 800b2a6:	a201      	add	r2, pc, #4	; (adr r2, 800b2ac <USBD_GetDescriptor+0x2c>)
 800b2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ac:	0800b2c9 	.word	0x0800b2c9
 800b2b0:	0800b2e1 	.word	0x0800b2e1
 800b2b4:	0800b321 	.word	0x0800b321
 800b2b8:	0800b4f7 	.word	0x0800b4f7
 800b2bc:	0800b4f7 	.word	0x0800b4f7
 800b2c0:	0800b497 	.word	0x0800b497
 800b2c4:	0800b4c3 	.word	0x0800b4c3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	7c12      	ldrb	r2, [r2, #16]
 800b2d4:	f107 0108 	add.w	r1, r7, #8
 800b2d8:	4610      	mov	r0, r2
 800b2da:	4798      	blx	r3
 800b2dc:	60f8      	str	r0, [r7, #12]
    break;
 800b2de:	e112      	b.n	800b506 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	7c1b      	ldrb	r3, [r3, #16]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d10d      	bne.n	800b304 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f0:	f107 0208 	add.w	r2, r7, #8
 800b2f4:	4610      	mov	r0, r2
 800b2f6:	4798      	blx	r3
 800b2f8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	2202      	movs	r2, #2
 800b300:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800b302:	e100      	b.n	800b506 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30c:	f107 0208 	add.w	r2, r7, #8
 800b310:	4610      	mov	r0, r2
 800b312:	4798      	blx	r3
 800b314:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	3301      	adds	r3, #1
 800b31a:	2202      	movs	r2, #2
 800b31c:	701a      	strb	r2, [r3, #0]
    break;
 800b31e:	e0f2      	b.n	800b506 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	885b      	ldrh	r3, [r3, #2]
 800b324:	b2db      	uxtb	r3, r3
 800b326:	2b05      	cmp	r3, #5
 800b328:	f200 80ac 	bhi.w	800b484 <USBD_GetDescriptor+0x204>
 800b32c:	a201      	add	r2, pc, #4	; (adr r2, 800b334 <USBD_GetDescriptor+0xb4>)
 800b32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b332:	bf00      	nop
 800b334:	0800b34d 	.word	0x0800b34d
 800b338:	0800b381 	.word	0x0800b381
 800b33c:	0800b3b5 	.word	0x0800b3b5
 800b340:	0800b3e9 	.word	0x0800b3e9
 800b344:	0800b41d 	.word	0x0800b41d
 800b348:	0800b451 	.word	0x0800b451
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00b      	beq.n	800b370 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	7c12      	ldrb	r2, [r2, #16]
 800b364:	f107 0108 	add.w	r1, r7, #8
 800b368:	4610      	mov	r0, r2
 800b36a:	4798      	blx	r3
 800b36c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b36e:	e091      	b.n	800b494 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b370:	6839      	ldr	r1, [r7, #0]
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 faaa 	bl	800b8cc <USBD_CtlError>
        err++;
 800b378:	7afb      	ldrb	r3, [r7, #11]
 800b37a:	3301      	adds	r3, #1
 800b37c:	72fb      	strb	r3, [r7, #11]
      break;
 800b37e:	e089      	b.n	800b494 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d00b      	beq.n	800b3a4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	7c12      	ldrb	r2, [r2, #16]
 800b398:	f107 0108 	add.w	r1, r7, #8
 800b39c:	4610      	mov	r0, r2
 800b39e:	4798      	blx	r3
 800b3a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3a2:	e077      	b.n	800b494 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b3a4:	6839      	ldr	r1, [r7, #0]
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fa90 	bl	800b8cc <USBD_CtlError>
        err++;
 800b3ac:	7afb      	ldrb	r3, [r7, #11]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	72fb      	strb	r3, [r7, #11]
      break;
 800b3b2:	e06f      	b.n	800b494 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00b      	beq.n	800b3d8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	7c12      	ldrb	r2, [r2, #16]
 800b3cc:	f107 0108 	add.w	r1, r7, #8
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	4798      	blx	r3
 800b3d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3d6:	e05d      	b.n	800b494 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b3d8:	6839      	ldr	r1, [r7, #0]
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 fa76 	bl	800b8cc <USBD_CtlError>
        err++;
 800b3e0:	7afb      	ldrb	r3, [r7, #11]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	72fb      	strb	r3, [r7, #11]
      break;
 800b3e6:	e055      	b.n	800b494 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ee:	691b      	ldr	r3, [r3, #16]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d00b      	beq.n	800b40c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	7c12      	ldrb	r2, [r2, #16]
 800b400:	f107 0108 	add.w	r1, r7, #8
 800b404:	4610      	mov	r0, r2
 800b406:	4798      	blx	r3
 800b408:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b40a:	e043      	b.n	800b494 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b40c:	6839      	ldr	r1, [r7, #0]
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 fa5c 	bl	800b8cc <USBD_CtlError>
        err++;
 800b414:	7afb      	ldrb	r3, [r7, #11]
 800b416:	3301      	adds	r3, #1
 800b418:	72fb      	strb	r3, [r7, #11]
      break;
 800b41a:	e03b      	b.n	800b494 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b422:	695b      	ldr	r3, [r3, #20]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00b      	beq.n	800b440 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b42e:	695b      	ldr	r3, [r3, #20]
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	7c12      	ldrb	r2, [r2, #16]
 800b434:	f107 0108 	add.w	r1, r7, #8
 800b438:	4610      	mov	r0, r2
 800b43a:	4798      	blx	r3
 800b43c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b43e:	e029      	b.n	800b494 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b440:	6839      	ldr	r1, [r7, #0]
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 fa42 	bl	800b8cc <USBD_CtlError>
        err++;
 800b448:	7afb      	ldrb	r3, [r7, #11]
 800b44a:	3301      	adds	r3, #1
 800b44c:	72fb      	strb	r3, [r7, #11]
      break;
 800b44e:	e021      	b.n	800b494 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b456:	699b      	ldr	r3, [r3, #24]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d00b      	beq.n	800b474 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b462:	699b      	ldr	r3, [r3, #24]
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	7c12      	ldrb	r2, [r2, #16]
 800b468:	f107 0108 	add.w	r1, r7, #8
 800b46c:	4610      	mov	r0, r2
 800b46e:	4798      	blx	r3
 800b470:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b472:	e00f      	b.n	800b494 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b474:	6839      	ldr	r1, [r7, #0]
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 fa28 	bl	800b8cc <USBD_CtlError>
        err++;
 800b47c:	7afb      	ldrb	r3, [r7, #11]
 800b47e:	3301      	adds	r3, #1
 800b480:	72fb      	strb	r3, [r7, #11]
      break;
 800b482:	e007      	b.n	800b494 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800b484:	6839      	ldr	r1, [r7, #0]
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 fa20 	bl	800b8cc <USBD_CtlError>
      err++;
 800b48c:	7afb      	ldrb	r3, [r7, #11]
 800b48e:	3301      	adds	r3, #1
 800b490:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800b492:	bf00      	nop
    }
    break;
 800b494:	e037      	b.n	800b506 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	7c1b      	ldrb	r3, [r3, #16]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d109      	bne.n	800b4b2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4a6:	f107 0208 	add.w	r2, r7, #8
 800b4aa:	4610      	mov	r0, r2
 800b4ac:	4798      	blx	r3
 800b4ae:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b4b0:	e029      	b.n	800b506 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800b4b2:	6839      	ldr	r1, [r7, #0]
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 fa09 	bl	800b8cc <USBD_CtlError>
      err++;
 800b4ba:	7afb      	ldrb	r3, [r7, #11]
 800b4bc:	3301      	adds	r3, #1
 800b4be:	72fb      	strb	r3, [r7, #11]
    break;
 800b4c0:	e021      	b.n	800b506 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	7c1b      	ldrb	r3, [r3, #16]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d10d      	bne.n	800b4e6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d2:	f107 0208 	add.w	r2, r7, #8
 800b4d6:	4610      	mov	r0, r2
 800b4d8:	4798      	blx	r3
 800b4da:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	2207      	movs	r2, #7
 800b4e2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b4e4:	e00f      	b.n	800b506 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800b4e6:	6839      	ldr	r1, [r7, #0]
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 f9ef 	bl	800b8cc <USBD_CtlError>
      err++;
 800b4ee:	7afb      	ldrb	r3, [r7, #11]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	72fb      	strb	r3, [r7, #11]
    break;
 800b4f4:	e007      	b.n	800b506 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800b4f6:	6839      	ldr	r1, [r7, #0]
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 f9e7 	bl	800b8cc <USBD_CtlError>
    err++;
 800b4fe:	7afb      	ldrb	r3, [r7, #11]
 800b500:	3301      	adds	r3, #1
 800b502:	72fb      	strb	r3, [r7, #11]
    break;
 800b504:	bf00      	nop
  }

  if (err != 0U)
 800b506:	7afb      	ldrb	r3, [r7, #11]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d11e      	bne.n	800b54a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	88db      	ldrh	r3, [r3, #6]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d016      	beq.n	800b542 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800b514:	893b      	ldrh	r3, [r7, #8]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00e      	beq.n	800b538 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	88da      	ldrh	r2, [r3, #6]
 800b51e:	893b      	ldrh	r3, [r7, #8]
 800b520:	4293      	cmp	r3, r2
 800b522:	bf28      	it	cs
 800b524:	4613      	movcs	r3, r2
 800b526:	b29b      	uxth	r3, r3
 800b528:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b52a:	893b      	ldrh	r3, [r7, #8]
 800b52c:	461a      	mov	r2, r3
 800b52e:	68f9      	ldr	r1, [r7, #12]
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 fa3c 	bl	800b9ae <USBD_CtlSendData>
 800b536:	e009      	b.n	800b54c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800b538:	6839      	ldr	r1, [r7, #0]
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 f9c6 	bl	800b8cc <USBD_CtlError>
 800b540:	e004      	b.n	800b54c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 fa70 	bl	800ba28 <USBD_CtlSendStatus>
 800b548:	e000      	b.n	800b54c <USBD_GetDescriptor+0x2cc>
    return;
 800b54a:	bf00      	nop
    }
  }
}
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop

0800b554 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	889b      	ldrh	r3, [r3, #4]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d130      	bne.n	800b5c8 <USBD_SetAddress+0x74>
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	88db      	ldrh	r3, [r3, #6]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d12c      	bne.n	800b5c8 <USBD_SetAddress+0x74>
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	885b      	ldrh	r3, [r3, #2]
 800b572:	2b7f      	cmp	r3, #127	; 0x7f
 800b574:	d828      	bhi.n	800b5c8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	885b      	ldrh	r3, [r3, #2]
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b580:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b588:	2b03      	cmp	r3, #3
 800b58a:	d104      	bne.n	800b596 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b58c:	6839      	ldr	r1, [r7, #0]
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 f99c 	bl	800b8cc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b594:	e01c      	b.n	800b5d0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	7bfa      	ldrb	r2, [r7, #15]
 800b59a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b59e:	7bfb      	ldrb	r3, [r7, #15]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 feb2 	bl	800c30c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 fa3d 	bl	800ba28 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b5ae:	7bfb      	ldrb	r3, [r7, #15]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d004      	beq.n	800b5be <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2202      	movs	r2, #2
 800b5b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5bc:	e008      	b.n	800b5d0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5c6:	e003      	b.n	800b5d0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b5c8:	6839      	ldr	r1, [r7, #0]
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 f97e 	bl	800b8cc <USBD_CtlError>
  }
}
 800b5d0:	bf00      	nop
 800b5d2:	3710      	adds	r7, #16
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	885b      	ldrh	r3, [r3, #2]
 800b5ea:	b2da      	uxtb	r2, r3
 800b5ec:	4b4b      	ldr	r3, [pc, #300]	; (800b71c <USBD_SetConfig+0x144>)
 800b5ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b5f0:	4b4a      	ldr	r3, [pc, #296]	; (800b71c <USBD_SetConfig+0x144>)
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d905      	bls.n	800b604 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b5f8:	6839      	ldr	r1, [r7, #0]
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 f966 	bl	800b8cc <USBD_CtlError>
    return USBD_FAIL;
 800b600:	2303      	movs	r3, #3
 800b602:	e087      	b.n	800b714 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b60a:	2b02      	cmp	r3, #2
 800b60c:	d002      	beq.n	800b614 <USBD_SetConfig+0x3c>
 800b60e:	2b03      	cmp	r3, #3
 800b610:	d025      	beq.n	800b65e <USBD_SetConfig+0x86>
 800b612:	e071      	b.n	800b6f8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800b614:	4b41      	ldr	r3, [pc, #260]	; (800b71c <USBD_SetConfig+0x144>)
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d01c      	beq.n	800b656 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800b61c:	4b3f      	ldr	r3, [pc, #252]	; (800b71c <USBD_SetConfig+0x144>)
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	461a      	mov	r2, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b626:	4b3d      	ldr	r3, [pc, #244]	; (800b71c <USBD_SetConfig+0x144>)
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	4619      	mov	r1, r3
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f7ff f9a8 	bl	800a982 <USBD_SetClassConfig>
 800b632:	4603      	mov	r3, r0
 800b634:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800b636:	7bfb      	ldrb	r3, [r7, #15]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d004      	beq.n	800b646 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800b63c:	6839      	ldr	r1, [r7, #0]
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 f944 	bl	800b8cc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b644:	e065      	b.n	800b712 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 f9ee 	bl	800ba28 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2203      	movs	r2, #3
 800b650:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b654:	e05d      	b.n	800b712 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 f9e6 	bl	800ba28 <USBD_CtlSendStatus>
    break;
 800b65c:	e059      	b.n	800b712 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800b65e:	4b2f      	ldr	r3, [pc, #188]	; (800b71c <USBD_SetConfig+0x144>)
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d112      	bne.n	800b68c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2202      	movs	r2, #2
 800b66a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800b66e:	4b2b      	ldr	r3, [pc, #172]	; (800b71c <USBD_SetConfig+0x144>)
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	461a      	mov	r2, r3
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b678:	4b28      	ldr	r3, [pc, #160]	; (800b71c <USBD_SetConfig+0x144>)
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	4619      	mov	r1, r3
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7ff f99b 	bl	800a9ba <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f9cf 	bl	800ba28 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b68a:	e042      	b.n	800b712 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800b68c:	4b23      	ldr	r3, [pc, #140]	; (800b71c <USBD_SetConfig+0x144>)
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	461a      	mov	r2, r3
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	429a      	cmp	r2, r3
 800b698:	d02a      	beq.n	800b6f0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f7ff f989 	bl	800a9ba <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800b6a8:	4b1c      	ldr	r3, [pc, #112]	; (800b71c <USBD_SetConfig+0x144>)
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b6b2:	4b1a      	ldr	r3, [pc, #104]	; (800b71c <USBD_SetConfig+0x144>)
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f7ff f962 	bl	800a982 <USBD_SetClassConfig>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800b6c2:	7bfb      	ldrb	r3, [r7, #15]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d00f      	beq.n	800b6e8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800b6c8:	6839      	ldr	r1, [r7, #0]
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 f8fe 	bl	800b8cc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f7ff f96e 	bl	800a9ba <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2202      	movs	r2, #2
 800b6e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b6e6:	e014      	b.n	800b712 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 f99d 	bl	800ba28 <USBD_CtlSendStatus>
    break;
 800b6ee:	e010      	b.n	800b712 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 f999 	bl	800ba28 <USBD_CtlSendStatus>
    break;
 800b6f6:	e00c      	b.n	800b712 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800b6f8:	6839      	ldr	r1, [r7, #0]
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 f8e6 	bl	800b8cc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b700:	4b06      	ldr	r3, [pc, #24]	; (800b71c <USBD_SetConfig+0x144>)
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	4619      	mov	r1, r3
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f7ff f957 	bl	800a9ba <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800b70c:	2303      	movs	r3, #3
 800b70e:	73fb      	strb	r3, [r7, #15]
    break;
 800b710:	bf00      	nop
  }

  return ret;
 800b712:	7bfb      	ldrb	r3, [r7, #15]
}
 800b714:	4618      	mov	r0, r3
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	20000261 	.word	0x20000261

0800b720 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	88db      	ldrh	r3, [r3, #6]
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d004      	beq.n	800b73c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b732:	6839      	ldr	r1, [r7, #0]
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 f8c9 	bl	800b8cc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800b73a:	e021      	b.n	800b780 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b742:	2b01      	cmp	r3, #1
 800b744:	db17      	blt.n	800b776 <USBD_GetConfig+0x56>
 800b746:	2b02      	cmp	r3, #2
 800b748:	dd02      	ble.n	800b750 <USBD_GetConfig+0x30>
 800b74a:	2b03      	cmp	r3, #3
 800b74c:	d00b      	beq.n	800b766 <USBD_GetConfig+0x46>
 800b74e:	e012      	b.n	800b776 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2200      	movs	r2, #0
 800b754:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	3308      	adds	r3, #8
 800b75a:	2201      	movs	r2, #1
 800b75c:	4619      	mov	r1, r3
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f925 	bl	800b9ae <USBD_CtlSendData>
      break;
 800b764:	e00c      	b.n	800b780 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	3304      	adds	r3, #4
 800b76a:	2201      	movs	r2, #1
 800b76c:	4619      	mov	r1, r3
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 f91d 	bl	800b9ae <USBD_CtlSendData>
      break;
 800b774:	e004      	b.n	800b780 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800b776:	6839      	ldr	r1, [r7, #0]
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 f8a7 	bl	800b8cc <USBD_CtlError>
      break;
 800b77e:	bf00      	nop
}
 800b780:	bf00      	nop
 800b782:	3708      	adds	r7, #8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b798:	3b01      	subs	r3, #1
 800b79a:	2b02      	cmp	r3, #2
 800b79c:	d81e      	bhi.n	800b7dc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	88db      	ldrh	r3, [r3, #6]
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d004      	beq.n	800b7b0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b7a6:	6839      	ldr	r1, [r7, #0]
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 f88f 	bl	800b8cc <USBD_CtlError>
      break;
 800b7ae:	e01a      	b.n	800b7e6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d005      	beq.n	800b7cc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	f043 0202 	orr.w	r2, r3, #2
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	330c      	adds	r3, #12
 800b7d0:	2202      	movs	r2, #2
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 f8ea 	bl	800b9ae <USBD_CtlSendData>
    break;
 800b7da:	e004      	b.n	800b7e6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800b7dc:	6839      	ldr	r1, [r7, #0]
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 f874 	bl	800b8cc <USBD_CtlError>
    break;
 800b7e4:	bf00      	nop
  }
}
 800b7e6:	bf00      	nop
 800b7e8:	3708      	adds	r7, #8
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}

0800b7ee <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b082      	sub	sp, #8
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
 800b7f6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	885b      	ldrh	r3, [r3, #2]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d106      	bne.n	800b80e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 f90d 	bl	800ba28 <USBD_CtlSendStatus>
  }
}
 800b80e:	bf00      	nop
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b082      	sub	sp, #8
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
 800b81e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b826:	3b01      	subs	r3, #1
 800b828:	2b02      	cmp	r3, #2
 800b82a:	d80b      	bhi.n	800b844 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	885b      	ldrh	r3, [r3, #2]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d10c      	bne.n	800b84e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 f8f3 	bl	800ba28 <USBD_CtlSendStatus>
      }
      break;
 800b842:	e004      	b.n	800b84e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b844:	6839      	ldr	r1, [r7, #0]
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 f840 	bl	800b8cc <USBD_CtlError>
      break;
 800b84c:	e000      	b.n	800b850 <USBD_ClrFeature+0x3a>
      break;
 800b84e:	bf00      	nop
  }
}
 800b850:	bf00      	nop
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	781a      	ldrb	r2, [r3, #0]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	3301      	adds	r3, #1
 800b872:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	781a      	ldrb	r2, [r3, #0]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	3301      	adds	r3, #1
 800b880:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b882:	68f8      	ldr	r0, [r7, #12]
 800b884:	f7ff fad4 	bl	800ae30 <SWAPBYTE>
 800b888:	4603      	mov	r3, r0
 800b88a:	461a      	mov	r2, r3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	3301      	adds	r3, #1
 800b894:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	3301      	adds	r3, #1
 800b89a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f7ff fac7 	bl	800ae30 <SWAPBYTE>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f7ff faba 	bl	800ae30 <SWAPBYTE>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	461a      	mov	r2, r3
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	80da      	strh	r2, [r3, #6]
}
 800b8c4:	bf00      	nop
 800b8c6:	3710      	adds	r7, #16
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8d6:	2180      	movs	r1, #128	; 0x80
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 fcad 	bl	800c238 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b8de:	2100      	movs	r1, #0
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 fca9 	bl	800c238 <USBD_LL_StallEP>
}
 800b8e6:	bf00      	nop
 800b8e8:	3708      	adds	r7, #8
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}

0800b8ee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b8ee:	b580      	push	{r7, lr}
 800b8f0:	b086      	sub	sp, #24
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	60f8      	str	r0, [r7, #12]
 800b8f6:	60b9      	str	r1, [r7, #8]
 800b8f8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d036      	beq.n	800b972 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b908:	6938      	ldr	r0, [r7, #16]
 800b90a:	f000 f836 	bl	800b97a <USBD_GetLen>
 800b90e:	4603      	mov	r3, r0
 800b910:	3301      	adds	r3, #1
 800b912:	b29b      	uxth	r3, r3
 800b914:	005b      	lsls	r3, r3, #1
 800b916:	b29a      	uxth	r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b91c:	7dfb      	ldrb	r3, [r7, #23]
 800b91e:	68ba      	ldr	r2, [r7, #8]
 800b920:	4413      	add	r3, r2
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	7812      	ldrb	r2, [r2, #0]
 800b926:	701a      	strb	r2, [r3, #0]
  idx++;
 800b928:	7dfb      	ldrb	r3, [r7, #23]
 800b92a:	3301      	adds	r3, #1
 800b92c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b92e:	7dfb      	ldrb	r3, [r7, #23]
 800b930:	68ba      	ldr	r2, [r7, #8]
 800b932:	4413      	add	r3, r2
 800b934:	2203      	movs	r2, #3
 800b936:	701a      	strb	r2, [r3, #0]
  idx++;
 800b938:	7dfb      	ldrb	r3, [r7, #23]
 800b93a:	3301      	adds	r3, #1
 800b93c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b93e:	e013      	b.n	800b968 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b940:	7dfb      	ldrb	r3, [r7, #23]
 800b942:	68ba      	ldr	r2, [r7, #8]
 800b944:	4413      	add	r3, r2
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	7812      	ldrb	r2, [r2, #0]
 800b94a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	3301      	adds	r3, #1
 800b950:	613b      	str	r3, [r7, #16]
    idx++;
 800b952:	7dfb      	ldrb	r3, [r7, #23]
 800b954:	3301      	adds	r3, #1
 800b956:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b958:	7dfb      	ldrb	r3, [r7, #23]
 800b95a:	68ba      	ldr	r2, [r7, #8]
 800b95c:	4413      	add	r3, r2
 800b95e:	2200      	movs	r2, #0
 800b960:	701a      	strb	r2, [r3, #0]
    idx++;
 800b962:	7dfb      	ldrb	r3, [r7, #23]
 800b964:	3301      	adds	r3, #1
 800b966:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d1e7      	bne.n	800b940 <USBD_GetString+0x52>
 800b970:	e000      	b.n	800b974 <USBD_GetString+0x86>
    return;
 800b972:	bf00      	nop
  }
}
 800b974:	3718      	adds	r7, #24
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b97a:	b480      	push	{r7}
 800b97c:	b085      	sub	sp, #20
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b982:	2300      	movs	r3, #0
 800b984:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b98a:	e005      	b.n	800b998 <USBD_GetLen+0x1e>
  {
    len++;
 800b98c:	7bfb      	ldrb	r3, [r7, #15]
 800b98e:	3301      	adds	r3, #1
 800b990:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	3301      	adds	r3, #1
 800b996:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1f5      	bne.n	800b98c <USBD_GetLen+0x12>
  }

  return len;
 800b9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3714      	adds	r7, #20
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b084      	sub	sp, #16
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	60f8      	str	r0, [r7, #12]
 800b9b6:	60b9      	str	r1, [r7, #8]
 800b9b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2202      	movs	r2, #2
 800b9be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	68ba      	ldr	r2, [r7, #8]
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f000 fcb8 	bl	800c34a <USBD_LL_Transmit>

  return USBD_OK;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3710      	adds	r7, #16
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	68ba      	ldr	r2, [r7, #8]
 800b9f4:	2100      	movs	r1, #0
 800b9f6:	68f8      	ldr	r0, [r7, #12]
 800b9f8:	f000 fca7 	bl	800c34a <USBD_LL_Transmit>

  return USBD_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b084      	sub	sp, #16
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	60f8      	str	r0, [r7, #12]
 800ba0e:	60b9      	str	r1, [r7, #8]
 800ba10:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	68ba      	ldr	r2, [r7, #8]
 800ba16:	2100      	movs	r1, #0
 800ba18:	68f8      	ldr	r0, [r7, #12]
 800ba1a:	f000 fcb7 	bl	800c38c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2204      	movs	r2, #4
 800ba34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba38:	2300      	movs	r3, #0
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 fc83 	bl	800c34a <USBD_LL_Transmit>

  return USBD_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3708      	adds	r7, #8
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b082      	sub	sp, #8
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2205      	movs	r2, #5
 800ba5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba5e:	2300      	movs	r3, #0
 800ba60:	2200      	movs	r2, #0
 800ba62:	2100      	movs	r1, #0
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 fc91 	bl	800c38c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3708      	adds	r7, #8
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba78:	2200      	movs	r2, #0
 800ba7a:	490b      	ldr	r1, [pc, #44]	; (800baa8 <MX_USB_DEVICE_Init+0x34>)
 800ba7c:	480b      	ldr	r0, [pc, #44]	; (800baac <MX_USB_DEVICE_Init+0x38>)
 800ba7e:	f7fe ff12 	bl	800a8a6 <USBD_Init>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d001      	beq.n	800ba8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ba88:	f7f6 fb02 	bl	8002090 <Error_Handler>
//  {
//    Error_Handler();
//  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI);
 800ba8c:	4908      	ldr	r1, [pc, #32]	; (800bab0 <MX_USB_DEVICE_Init+0x3c>)
 800ba8e:	4807      	ldr	r0, [pc, #28]	; (800baac <MX_USB_DEVICE_Init+0x38>)
 800ba90:	f7fe ff3f 	bl	800a912 <USBD_RegisterClass>

	USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800ba94:	4907      	ldr	r1, [pc, #28]	; (800bab4 <MX_USB_DEVICE_Init+0x40>)
 800ba96:	4805      	ldr	r0, [pc, #20]	; (800baac <MX_USB_DEVICE_Init+0x38>)
 800ba98:	f7fe feee 	bl	800a878 <USBD_MIDI_RegisterInterface>

	USBD_Start(&hUsbDeviceFS);
 800ba9c:	4803      	ldr	r0, [pc, #12]	; (800baac <MX_USB_DEVICE_Init+0x38>)
 800ba9e:	f7fe ff59 	bl	800a954 <USBD_Start>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800baa2:	bf00      	nop
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	20000138 	.word	0x20000138
 800baac:	200008a8 	.word	0x200008a8
 800bab0:	20000098 	.word	0x20000098
 800bab4:	20000198 	.word	0x20000198

0800bab8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	4603      	mov	r3, r0
 800bac0:	6039      	str	r1, [r7, #0]
 800bac2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	2212      	movs	r2, #18
 800bac8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800baca:	4b03      	ldr	r3, [pc, #12]	; (800bad8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bacc:	4618      	mov	r0, r3
 800bace:	370c      	adds	r7, #12
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr
 800bad8:	20000154 	.word	0x20000154

0800badc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800badc:	b480      	push	{r7}
 800bade:	b083      	sub	sp, #12
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	4603      	mov	r3, r0
 800bae4:	6039      	str	r1, [r7, #0]
 800bae6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	2204      	movs	r2, #4
 800baec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800baee:	4b03      	ldr	r3, [pc, #12]	; (800bafc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr
 800bafc:	20000168 	.word	0x20000168

0800bb00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	4603      	mov	r3, r0
 800bb08:	6039      	str	r1, [r7, #0]
 800bb0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb0c:	79fb      	ldrb	r3, [r7, #7]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d105      	bne.n	800bb1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb12:	683a      	ldr	r2, [r7, #0]
 800bb14:	4907      	ldr	r1, [pc, #28]	; (800bb34 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb16:	4808      	ldr	r0, [pc, #32]	; (800bb38 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb18:	f7ff fee9 	bl	800b8ee <USBD_GetString>
 800bb1c:	e004      	b.n	800bb28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb1e:	683a      	ldr	r2, [r7, #0]
 800bb20:	4904      	ldr	r1, [pc, #16]	; (800bb34 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb22:	4805      	ldr	r0, [pc, #20]	; (800bb38 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb24:	f7ff fee3 	bl	800b8ee <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb28:	4b02      	ldr	r3, [pc, #8]	; (800bb34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	20000b78 	.word	0x20000b78
 800bb38:	0800c670 	.word	0x0800c670

0800bb3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	4603      	mov	r3, r0
 800bb44:	6039      	str	r1, [r7, #0]
 800bb46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bb48:	683a      	ldr	r2, [r7, #0]
 800bb4a:	4904      	ldr	r1, [pc, #16]	; (800bb5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bb4c:	4804      	ldr	r0, [pc, #16]	; (800bb60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bb4e:	f7ff fece 	bl	800b8ee <USBD_GetString>
  return USBD_StrDesc;
 800bb52:	4b02      	ldr	r3, [pc, #8]	; (800bb5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3708      	adds	r7, #8
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}
 800bb5c:	20000b78 	.word	0x20000b78
 800bb60:	0800c670 	.word	0x0800c670

0800bb64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	6039      	str	r1, [r7, #0]
 800bb6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	221a      	movs	r2, #26
 800bb74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bb76:	f000 f843 	bl	800bc00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bb7a:	4b02      	ldr	r3, [pc, #8]	; (800bb84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3708      	adds	r7, #8
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	2000016c 	.word	0x2000016c

0800bb88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	4603      	mov	r3, r0
 800bb90:	6039      	str	r1, [r7, #0]
 800bb92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bb94:	79fb      	ldrb	r3, [r7, #7]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d105      	bne.n	800bba6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb9a:	683a      	ldr	r2, [r7, #0]
 800bb9c:	4907      	ldr	r1, [pc, #28]	; (800bbbc <USBD_FS_ConfigStrDescriptor+0x34>)
 800bb9e:	4808      	ldr	r0, [pc, #32]	; (800bbc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bba0:	f7ff fea5 	bl	800b8ee <USBD_GetString>
 800bba4:	e004      	b.n	800bbb0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bba6:	683a      	ldr	r2, [r7, #0]
 800bba8:	4904      	ldr	r1, [pc, #16]	; (800bbbc <USBD_FS_ConfigStrDescriptor+0x34>)
 800bbaa:	4805      	ldr	r0, [pc, #20]	; (800bbc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bbac:	f7ff fe9f 	bl	800b8ee <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbb0:	4b02      	ldr	r3, [pc, #8]	; (800bbbc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	20000b78 	.word	0x20000b78
 800bbc0:	0800c684 	.word	0x0800c684

0800bbc4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	4603      	mov	r3, r0
 800bbcc:	6039      	str	r1, [r7, #0]
 800bbce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bbd0:	79fb      	ldrb	r3, [r7, #7]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d105      	bne.n	800bbe2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bbd6:	683a      	ldr	r2, [r7, #0]
 800bbd8:	4907      	ldr	r1, [pc, #28]	; (800bbf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bbda:	4808      	ldr	r0, [pc, #32]	; (800bbfc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bbdc:	f7ff fe87 	bl	800b8ee <USBD_GetString>
 800bbe0:	e004      	b.n	800bbec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bbe2:	683a      	ldr	r2, [r7, #0]
 800bbe4:	4904      	ldr	r1, [pc, #16]	; (800bbf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bbe6:	4805      	ldr	r0, [pc, #20]	; (800bbfc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bbe8:	f7ff fe81 	bl	800b8ee <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbec:	4b02      	ldr	r3, [pc, #8]	; (800bbf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3708      	adds	r7, #8
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	20000b78 	.word	0x20000b78
 800bbfc:	0800c69c 	.word	0x0800c69c

0800bc00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bc06:	4b0f      	ldr	r3, [pc, #60]	; (800bc44 <Get_SerialNum+0x44>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bc0c:	4b0e      	ldr	r3, [pc, #56]	; (800bc48 <Get_SerialNum+0x48>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc12:	4b0e      	ldr	r3, [pc, #56]	; (800bc4c <Get_SerialNum+0x4c>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d009      	beq.n	800bc3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bc26:	2208      	movs	r2, #8
 800bc28:	4909      	ldr	r1, [pc, #36]	; (800bc50 <Get_SerialNum+0x50>)
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	f000 f814 	bl	800bc58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bc30:	2204      	movs	r2, #4
 800bc32:	4908      	ldr	r1, [pc, #32]	; (800bc54 <Get_SerialNum+0x54>)
 800bc34:	68b8      	ldr	r0, [r7, #8]
 800bc36:	f000 f80f 	bl	800bc58 <IntToUnicode>
  }
}
 800bc3a:	bf00      	nop
 800bc3c:	3710      	adds	r7, #16
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	1fff7a10 	.word	0x1fff7a10
 800bc48:	1fff7a14 	.word	0x1fff7a14
 800bc4c:	1fff7a18 	.word	0x1fff7a18
 800bc50:	2000016e 	.word	0x2000016e
 800bc54:	2000017e 	.word	0x2000017e

0800bc58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b087      	sub	sp, #28
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	60f8      	str	r0, [r7, #12]
 800bc60:	60b9      	str	r1, [r7, #8]
 800bc62:	4613      	mov	r3, r2
 800bc64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bc66:	2300      	movs	r3, #0
 800bc68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	75fb      	strb	r3, [r7, #23]
 800bc6e:	e027      	b.n	800bcc0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	0f1b      	lsrs	r3, r3, #28
 800bc74:	2b09      	cmp	r3, #9
 800bc76:	d80b      	bhi.n	800bc90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	0f1b      	lsrs	r3, r3, #28
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	7dfb      	ldrb	r3, [r7, #23]
 800bc80:	005b      	lsls	r3, r3, #1
 800bc82:	4619      	mov	r1, r3
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	440b      	add	r3, r1
 800bc88:	3230      	adds	r2, #48	; 0x30
 800bc8a:	b2d2      	uxtb	r2, r2
 800bc8c:	701a      	strb	r2, [r3, #0]
 800bc8e:	e00a      	b.n	800bca6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	0f1b      	lsrs	r3, r3, #28
 800bc94:	b2da      	uxtb	r2, r3
 800bc96:	7dfb      	ldrb	r3, [r7, #23]
 800bc98:	005b      	lsls	r3, r3, #1
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	440b      	add	r3, r1
 800bca0:	3237      	adds	r2, #55	; 0x37
 800bca2:	b2d2      	uxtb	r2, r2
 800bca4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	011b      	lsls	r3, r3, #4
 800bcaa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bcac:	7dfb      	ldrb	r3, [r7, #23]
 800bcae:	005b      	lsls	r3, r3, #1
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	68ba      	ldr	r2, [r7, #8]
 800bcb4:	4413      	add	r3, r2
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bcba:	7dfb      	ldrb	r3, [r7, #23]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	75fb      	strb	r3, [r7, #23]
 800bcc0:	7dfa      	ldrb	r2, [r7, #23]
 800bcc2:	79fb      	ldrb	r3, [r7, #7]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d3d3      	bcc.n	800bc70 <IntToUnicode+0x18>
  }
}
 800bcc8:	bf00      	nop
 800bcca:	371c      	adds	r7, #28
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <MIDI_DataRx>:
};

uint8_t flag_sendMidi = 0;

uint16_t MIDI_DataRx(uint8_t *msg, uint16_t length)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	460b      	mov	r3, r1
 800bcde:	807b      	strh	r3, [r7, #2]
  //uint8_t chan = msg[0] & 0x0F;
  uint8_t msgtype = msg[0] & 0xF0;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	f023 030f 	bic.w	r3, r3, #15
 800bce8:	73fb      	strb	r3, [r7, #15]
  uint8_t b1 =  msg[2];
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	789b      	ldrb	r3, [r3, #2]
 800bcee:	73bb      	strb	r3, [r7, #14]
  uint8_t b2 =  msg[3];
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	78db      	ldrb	r3, [r3, #3]
 800bcf4:	737b      	strb	r3, [r7, #13]
 // uint16_t b = ((b2 & 0x7F) << 7) | (b1 & 0x7F);
 
  switch (msgtype)
 800bcf6:	7bfb      	ldrb	r3, [r7, #15]
 800bcf8:	2bb0      	cmp	r3, #176	; 0xb0
 800bcfa:	d01c      	beq.n	800bd36 <MIDI_DataRx+0x62>
 800bcfc:	2bb0      	cmp	r3, #176	; 0xb0
 800bcfe:	dc05      	bgt.n	800bd0c <MIDI_DataRx+0x38>
 800bd00:	2b90      	cmp	r3, #144	; 0x90
 800bd02:	d01a      	beq.n	800bd3a <MIDI_DataRx+0x66>
 800bd04:	2ba0      	cmp	r3, #160	; 0xa0
 800bd06:	d01a      	beq.n	800bd3e <MIDI_DataRx+0x6a>
 800bd08:	2b80      	cmp	r3, #128	; 0x80
	  //key = b1;
	  //velocity = b2;
	  //notepos = key - 8 + transpose;
	  //stop_note(notepos);
	  //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7); //blink LED
	  break;
 800bd0a:	e01f      	b.n	800bd4c <MIDI_DataRx+0x78>
  switch (msgtype)
 800bd0c:	2bd0      	cmp	r3, #208	; 0xd0
 800bd0e:	d018      	beq.n	800bd42 <MIDI_DataRx+0x6e>
 800bd10:	2bd0      	cmp	r3, #208	; 0xd0
 800bd12:	dc01      	bgt.n	800bd18 <MIDI_DataRx+0x44>
 800bd14:	2bc0      	cmp	r3, #192	; 0xc0
							break;
					}*/
	  break;
  case 0xC0:
	  //data = b1;
	  break;
 800bd16:	e019      	b.n	800bd4c <MIDI_DataRx+0x78>
  switch (msgtype)
 800bd18:	2be0      	cmp	r3, #224	; 0xe0
 800bd1a:	d014      	beq.n	800bd46 <MIDI_DataRx+0x72>
 800bd1c:	2bf0      	cmp	r3, #240	; 0xf0
 800bd1e:	d115      	bne.n	800bd4c <MIDI_DataRx+0x78>
  case 0xE0:
	  //data = b2;
	  //		bend = data;
	  break;
  case 0xF0: {
	  if((b1 == 0x7E) && (b2 == 0x7F)) {
 800bd20:	7bbb      	ldrb	r3, [r7, #14]
 800bd22:	2b7e      	cmp	r3, #126	; 0x7e
 800bd24:	d111      	bne.n	800bd4a <MIDI_DataRx+0x76>
 800bd26:	7b7b      	ldrb	r3, [r7, #13]
 800bd28:	2b7f      	cmp	r3, #127	; 0x7f
 800bd2a:	d10e      	bne.n	800bd4a <MIDI_DataRx+0x76>
		  MIDI_DataTx(SysexID, 15);
 800bd2c:	210f      	movs	r1, #15
 800bd2e:	480a      	ldr	r0, [pc, #40]	; (800bd58 <MIDI_DataRx+0x84>)
 800bd30:	f000 f814 	bl	800bd5c <MIDI_DataTx>
	  }
	  break;
 800bd34:	e009      	b.n	800bd4a <MIDI_DataRx+0x76>
	  break;
 800bd36:	bf00      	nop
 800bd38:	e008      	b.n	800bd4c <MIDI_DataRx+0x78>
	  break;
 800bd3a:	bf00      	nop
 800bd3c:	e006      	b.n	800bd4c <MIDI_DataRx+0x78>
	  break;
 800bd3e:	bf00      	nop
 800bd40:	e004      	b.n	800bd4c <MIDI_DataRx+0x78>
	  break;
 800bd42:	bf00      	nop
 800bd44:	e002      	b.n	800bd4c <MIDI_DataRx+0x78>
	  break;
 800bd46:	bf00      	nop
 800bd48:	e000      	b.n	800bd4c <MIDI_DataRx+0x78>
	  break;
 800bd4a:	bf00      	nop
  }
  }
  return 0;
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	20000188 	.word	0x20000188

0800bd5c <MIDI_DataTx>:

uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	460b      	mov	r3, r1
 800bd66:	807b      	strh	r3, [r7, #2]
  uint32_t i = 0;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	60fb      	str	r3, [r7, #12]
  while (i < length) {
 800bd6c:	e017      	b.n	800bd9e <MIDI_DataTx+0x42>
    APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	441a      	add	r2, r3
 800bd74:	4b0f      	ldr	r3, [pc, #60]	; (800bdb4 <MIDI_DataTx+0x58>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	7811      	ldrb	r1, [r2, #0]
 800bd7a:	4a0f      	ldr	r2, [pc, #60]	; (800bdb8 <MIDI_DataTx+0x5c>)
 800bd7c:	54d1      	strb	r1, [r2, r3]
    APP_Rx_ptr_in++;
 800bd7e:	4b0d      	ldr	r3, [pc, #52]	; (800bdb4 <MIDI_DataTx+0x58>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	3301      	adds	r3, #1
 800bd84:	4a0b      	ldr	r2, [pc, #44]	; (800bdb4 <MIDI_DataTx+0x58>)
 800bd86:	6013      	str	r3, [r2, #0]
    i++;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	60fb      	str	r3, [r7, #12]
    if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 800bd8e:	4b09      	ldr	r3, [pc, #36]	; (800bdb4 <MIDI_DataTx+0x58>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd96:	d102      	bne.n	800bd9e <MIDI_DataTx+0x42>
      APP_Rx_ptr_in = 0;
 800bd98:	4b06      	ldr	r3, [pc, #24]	; (800bdb4 <MIDI_DataTx+0x58>)
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	601a      	str	r2, [r3, #0]
  while (i < length) {
 800bd9e:	887b      	ldrh	r3, [r7, #2]
 800bda0:	68fa      	ldr	r2, [r7, #12]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d3e3      	bcc.n	800bd6e <MIDI_DataTx+0x12>
    }
  }
  USBD_MIDI_SendPacket();
 800bda6:	f7fe fce7 	bl	800a778 <USBD_MIDI_SendPacket>
  return USBD_OK;
 800bdaa:	2300      	movs	r3, #0
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	20000254 	.word	0x20000254
 800bdb8:	200007a8 	.word	0x200007a8

0800bdbc <MIDI_SendBuffer>:

uint16_t MIDI_SendBuffer(uint8_t *msg, uint16_t length){
 800bdbc:	b480      	push	{r7}
 800bdbe:	b085      	sub	sp, #20
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	60fb      	str	r3, [r7, #12]
	while (i < length) {
 800bdcc:	e017      	b.n	800bdfe <MIDI_SendBuffer+0x42>
		APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	441a      	add	r2, r3
 800bdd4:	4b11      	ldr	r3, [pc, #68]	; (800be1c <MIDI_SendBuffer+0x60>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	7811      	ldrb	r1, [r2, #0]
 800bdda:	4a11      	ldr	r2, [pc, #68]	; (800be20 <MIDI_SendBuffer+0x64>)
 800bddc:	54d1      	strb	r1, [r2, r3]
		APP_Rx_ptr_in++;
 800bdde:	4b0f      	ldr	r3, [pc, #60]	; (800be1c <MIDI_SendBuffer+0x60>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	3301      	adds	r3, #1
 800bde4:	4a0d      	ldr	r2, [pc, #52]	; (800be1c <MIDI_SendBuffer+0x60>)
 800bde6:	6013      	str	r3, [r2, #0]
		i++;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	3301      	adds	r3, #1
 800bdec:	60fb      	str	r3, [r7, #12]
		if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 800bdee:	4b0b      	ldr	r3, [pc, #44]	; (800be1c <MIDI_SendBuffer+0x60>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdf6:	d102      	bne.n	800bdfe <MIDI_SendBuffer+0x42>
			APP_Rx_ptr_in = 0;
 800bdf8:	4b08      	ldr	r3, [pc, #32]	; (800be1c <MIDI_SendBuffer+0x60>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	601a      	str	r2, [r3, #0]
	while (i < length) {
 800bdfe:	887b      	ldrh	r3, [r7, #2]
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	429a      	cmp	r2, r3
 800be04:	d3e3      	bcc.n	800bdce <MIDI_SendBuffer+0x12>
		}
	}
	flag_sendMidi = 1;
 800be06:	4b07      	ldr	r3, [pc, #28]	; (800be24 <MIDI_SendBuffer+0x68>)
 800be08:	2201      	movs	r2, #1
 800be0a:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 800be0c:	2300      	movs	r3, #0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3714      	adds	r7, #20
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop
 800be1c:	20000254 	.word	0x20000254
 800be20:	200007a8 	.word	0x200007a8
 800be24:	20000262 	.word	0x20000262

0800be28 <MIDI_SendCheck>:

void MIDI_SendCheck(void){
 800be28:	b580      	push	{r7, lr}
 800be2a:	af00      	add	r7, sp, #0
	if (flag_sendMidi != 0){
 800be2c:	4b07      	ldr	r3, [pc, #28]	; (800be4c <MIDI_SendCheck+0x24>)
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d008      	beq.n	800be46 <MIDI_SendCheck+0x1e>
		if (USB_Tx_State == 0){
 800be34:	4b06      	ldr	r3, [pc, #24]	; (800be50 <MIDI_SendCheck+0x28>)
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d104      	bne.n	800be46 <MIDI_SendCheck+0x1e>
			USBD_MIDI_SendPacket();
 800be3c:	f7fe fc9c 	bl	800a778 <USBD_MIDI_SendPacket>
			flag_sendMidi = 0;
 800be40:	4b02      	ldr	r3, [pc, #8]	; (800be4c <MIDI_SendCheck+0x24>)
 800be42:	2200      	movs	r2, #0
 800be44:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800be46:	bf00      	nop
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	20000262 	.word	0x20000262
 800be50:	20000260 	.word	0x20000260

0800be54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b08a      	sub	sp, #40	; 0x28
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be5c:	f107 0314 	add.w	r3, r7, #20
 800be60:	2200      	movs	r2, #0
 800be62:	601a      	str	r2, [r3, #0]
 800be64:	605a      	str	r2, [r3, #4]
 800be66:	609a      	str	r2, [r3, #8]
 800be68:	60da      	str	r2, [r3, #12]
 800be6a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be74:	d13a      	bne.n	800beec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be76:	2300      	movs	r3, #0
 800be78:	613b      	str	r3, [r7, #16]
 800be7a:	4b1e      	ldr	r3, [pc, #120]	; (800bef4 <HAL_PCD_MspInit+0xa0>)
 800be7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be7e:	4a1d      	ldr	r2, [pc, #116]	; (800bef4 <HAL_PCD_MspInit+0xa0>)
 800be80:	f043 0301 	orr.w	r3, r3, #1
 800be84:	6313      	str	r3, [r2, #48]	; 0x30
 800be86:	4b1b      	ldr	r3, [pc, #108]	; (800bef4 <HAL_PCD_MspInit+0xa0>)
 800be88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be8a:	f003 0301 	and.w	r3, r3, #1
 800be8e:	613b      	str	r3, [r7, #16]
 800be90:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800be92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800be96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be98:	2302      	movs	r3, #2
 800be9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be9c:	2300      	movs	r3, #0
 800be9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bea0:	2303      	movs	r3, #3
 800bea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bea4:	230a      	movs	r3, #10
 800bea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bea8:	f107 0314 	add.w	r3, r7, #20
 800beac:	4619      	mov	r1, r3
 800beae:	4812      	ldr	r0, [pc, #72]	; (800bef8 <HAL_PCD_MspInit+0xa4>)
 800beb0:	f7f7 fa28 	bl	8003304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800beb4:	4b0f      	ldr	r3, [pc, #60]	; (800bef4 <HAL_PCD_MspInit+0xa0>)
 800beb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beb8:	4a0e      	ldr	r2, [pc, #56]	; (800bef4 <HAL_PCD_MspInit+0xa0>)
 800beba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bebe:	6353      	str	r3, [r2, #52]	; 0x34
 800bec0:	2300      	movs	r3, #0
 800bec2:	60fb      	str	r3, [r7, #12]
 800bec4:	4b0b      	ldr	r3, [pc, #44]	; (800bef4 <HAL_PCD_MspInit+0xa0>)
 800bec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bec8:	4a0a      	ldr	r2, [pc, #40]	; (800bef4 <HAL_PCD_MspInit+0xa0>)
 800beca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bece:	6453      	str	r3, [r2, #68]	; 0x44
 800bed0:	4b08      	ldr	r3, [pc, #32]	; (800bef4 <HAL_PCD_MspInit+0xa0>)
 800bed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bed8:	60fb      	str	r3, [r7, #12]
 800beda:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bedc:	2200      	movs	r2, #0
 800bede:	2100      	movs	r1, #0
 800bee0:	2043      	movs	r0, #67	; 0x43
 800bee2:	f7f7 f8ae 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bee6:	2043      	movs	r0, #67	; 0x43
 800bee8:	f7f7 f8c7 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800beec:	bf00      	nop
 800beee:	3728      	adds	r7, #40	; 0x28
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	40023800 	.word	0x40023800
 800bef8:	40020000 	.word	0x40020000

0800befc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bf10:	4619      	mov	r1, r3
 800bf12:	4610      	mov	r0, r2
 800bf14:	f7fe fd69 	bl	800a9ea <USBD_LL_SetupStage>
}
 800bf18:	bf00      	nop
 800bf1a:	3708      	adds	r7, #8
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	460b      	mov	r3, r1
 800bf2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bf32:	78fa      	ldrb	r2, [r7, #3]
 800bf34:	6879      	ldr	r1, [r7, #4]
 800bf36:	4613      	mov	r3, r2
 800bf38:	00db      	lsls	r3, r3, #3
 800bf3a:	1a9b      	subs	r3, r3, r2
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	440b      	add	r3, r1
 800bf40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bf44:	681a      	ldr	r2, [r3, #0]
 800bf46:	78fb      	ldrb	r3, [r7, #3]
 800bf48:	4619      	mov	r1, r3
 800bf4a:	f7fe fda1 	bl	800aa90 <USBD_LL_DataOutStage>
}
 800bf4e:	bf00      	nop
 800bf50:	3708      	adds	r7, #8
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}

0800bf56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf56:	b580      	push	{r7, lr}
 800bf58:	b082      	sub	sp, #8
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
 800bf5e:	460b      	mov	r3, r1
 800bf60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bf68:	78fa      	ldrb	r2, [r7, #3]
 800bf6a:	6879      	ldr	r1, [r7, #4]
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	00db      	lsls	r3, r3, #3
 800bf70:	1a9b      	subs	r3, r3, r2
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	440b      	add	r3, r1
 800bf76:	3348      	adds	r3, #72	; 0x48
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	78fb      	ldrb	r3, [r7, #3]
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	f7fe fdea 	bl	800ab56 <USBD_LL_DataInStage>
}
 800bf82:	bf00      	nop
 800bf84:	3708      	adds	r7, #8
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b082      	sub	sp, #8
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7fe feee 	bl	800ad7a <USBD_LL_SOF>
}
 800bf9e:	bf00      	nop
 800bfa0:	3708      	adds	r7, #8
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b084      	sub	sp, #16
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d102      	bne.n	800bfc0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	73fb      	strb	r3, [r7, #15]
 800bfbe:	e008      	b.n	800bfd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	68db      	ldr	r3, [r3, #12]
 800bfc4:	2b02      	cmp	r3, #2
 800bfc6:	d102      	bne.n	800bfce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	73fb      	strb	r3, [r7, #15]
 800bfcc:	e001      	b.n	800bfd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bfce:	f7f6 f85f 	bl	8002090 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bfd8:	7bfa      	ldrb	r2, [r7, #15]
 800bfda:	4611      	mov	r1, r2
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7fe fe91 	bl	800ad04 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7fe fe4a 	bl	800ac82 <USBD_LL_Reset>
}
 800bfee:	bf00      	nop
 800bff0:	3710      	adds	r7, #16
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
	...

0800bff8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b082      	sub	sp, #8
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c006:	4618      	mov	r0, r3
 800c008:	f7fe fe8c 	bl	800ad24 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	6812      	ldr	r2, [r2, #0]
 800c01a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c01e:	f043 0301 	orr.w	r3, r3, #1
 800c022:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6a1b      	ldr	r3, [r3, #32]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d005      	beq.n	800c038 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c02c:	4b04      	ldr	r3, [pc, #16]	; (800c040 <HAL_PCD_SuspendCallback+0x48>)
 800c02e:	691b      	ldr	r3, [r3, #16]
 800c030:	4a03      	ldr	r2, [pc, #12]	; (800c040 <HAL_PCD_SuspendCallback+0x48>)
 800c032:	f043 0306 	orr.w	r3, r3, #6
 800c036:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c038:	bf00      	nop
 800c03a:	3708      	adds	r7, #8
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	e000ed00 	.word	0xe000ed00

0800c044 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c052:	4618      	mov	r0, r3
 800c054:	f7fe fe7b 	bl	800ad4e <USBD_LL_Resume>
}
 800c058:	bf00      	nop
 800c05a:	3708      	adds	r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	460b      	mov	r3, r1
 800c06a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c072:	78fa      	ldrb	r2, [r7, #3]
 800c074:	4611      	mov	r1, r2
 800c076:	4618      	mov	r0, r3
 800c078:	f7fe fea6 	bl	800adc8 <USBD_LL_IsoOUTIncomplete>
}
 800c07c:	bf00      	nop
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	460b      	mov	r3, r1
 800c08e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c096:	78fa      	ldrb	r2, [r7, #3]
 800c098:	4611      	mov	r1, r2
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7fe fe87 	bl	800adae <USBD_LL_IsoINIncomplete>
}
 800c0a0:	bf00      	nop
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fe fe93 	bl	800ade2 <USBD_LL_DevConnected>
}
 800c0bc:	bf00      	nop
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7fe fe90 	bl	800adf8 <USBD_LL_DevDisconnected>
}
 800c0d8:	bf00      	nop
 800c0da:	3708      	adds	r7, #8
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d13c      	bne.n	800c16a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c0f0:	4a20      	ldr	r2, [pc, #128]	; (800c174 <USBD_LL_Init+0x94>)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4a1e      	ldr	r2, [pc, #120]	; (800c174 <USBD_LL_Init+0x94>)
 800c0fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c100:	4b1c      	ldr	r3, [pc, #112]	; (800c174 <USBD_LL_Init+0x94>)
 800c102:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c106:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c108:	4b1a      	ldr	r3, [pc, #104]	; (800c174 <USBD_LL_Init+0x94>)
 800c10a:	2204      	movs	r2, #4
 800c10c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c10e:	4b19      	ldr	r3, [pc, #100]	; (800c174 <USBD_LL_Init+0x94>)
 800c110:	2202      	movs	r2, #2
 800c112:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c114:	4b17      	ldr	r3, [pc, #92]	; (800c174 <USBD_LL_Init+0x94>)
 800c116:	2200      	movs	r2, #0
 800c118:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c11a:	4b16      	ldr	r3, [pc, #88]	; (800c174 <USBD_LL_Init+0x94>)
 800c11c:	2202      	movs	r2, #2
 800c11e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c120:	4b14      	ldr	r3, [pc, #80]	; (800c174 <USBD_LL_Init+0x94>)
 800c122:	2200      	movs	r2, #0
 800c124:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c126:	4b13      	ldr	r3, [pc, #76]	; (800c174 <USBD_LL_Init+0x94>)
 800c128:	2200      	movs	r2, #0
 800c12a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c12c:	4b11      	ldr	r3, [pc, #68]	; (800c174 <USBD_LL_Init+0x94>)
 800c12e:	2200      	movs	r2, #0
 800c130:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c132:	4b10      	ldr	r3, [pc, #64]	; (800c174 <USBD_LL_Init+0x94>)
 800c134:	2200      	movs	r2, #0
 800c136:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c138:	4b0e      	ldr	r3, [pc, #56]	; (800c174 <USBD_LL_Init+0x94>)
 800c13a:	2200      	movs	r2, #0
 800c13c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c13e:	480d      	ldr	r0, [pc, #52]	; (800c174 <USBD_LL_Init+0x94>)
 800c140:	f7f9 fb7f 	bl	8005842 <HAL_PCD_Init>
 800c144:	4603      	mov	r3, r0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d001      	beq.n	800c14e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c14a:	f7f5 ffa1 	bl	8002090 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c14e:	2180      	movs	r1, #128	; 0x80
 800c150:	4808      	ldr	r0, [pc, #32]	; (800c174 <USBD_LL_Init+0x94>)
 800c152:	f7fa fcc4 	bl	8006ade <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c156:	2240      	movs	r2, #64	; 0x40
 800c158:	2100      	movs	r1, #0
 800c15a:	4806      	ldr	r0, [pc, #24]	; (800c174 <USBD_LL_Init+0x94>)
 800c15c:	f7fa fc78 	bl	8006a50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c160:	2280      	movs	r2, #128	; 0x80
 800c162:	2101      	movs	r1, #1
 800c164:	4803      	ldr	r0, [pc, #12]	; (800c174 <USBD_LL_Init+0x94>)
 800c166:	f7fa fc73 	bl	8006a50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c16a:	2300      	movs	r3, #0
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3708      	adds	r7, #8
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	20000d78 	.word	0x20000d78

0800c178 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c180:	2300      	movs	r3, #0
 800c182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c184:	2300      	movs	r3, #0
 800c186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c18e:	4618      	mov	r0, r3
 800c190:	f7f9 fc74 	bl	8005a7c <HAL_PCD_Start>
 800c194:	4603      	mov	r3, r0
 800c196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c198:	7bfb      	ldrb	r3, [r7, #15]
 800c19a:	4618      	mov	r0, r3
 800c19c:	f000 f918 	bl	800c3d0 <USBD_Get_USB_Status>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b084      	sub	sp, #16
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
 800c1b6:	4608      	mov	r0, r1
 800c1b8:	4611      	mov	r1, r2
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	4603      	mov	r3, r0
 800c1be:	70fb      	strb	r3, [r7, #3]
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	70bb      	strb	r3, [r7, #2]
 800c1c4:	4613      	mov	r3, r2
 800c1c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c1d6:	78bb      	ldrb	r3, [r7, #2]
 800c1d8:	883a      	ldrh	r2, [r7, #0]
 800c1da:	78f9      	ldrb	r1, [r7, #3]
 800c1dc:	f7fa f858 	bl	8006290 <HAL_PCD_EP_Open>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1e4:	7bfb      	ldrb	r3, [r7, #15]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f000 f8f2 	bl	800c3d0 <USBD_Get_USB_Status>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b084      	sub	sp, #16
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
 800c202:	460b      	mov	r3, r1
 800c204:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c206:	2300      	movs	r3, #0
 800c208:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c20a:	2300      	movs	r3, #0
 800c20c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c214:	78fa      	ldrb	r2, [r7, #3]
 800c216:	4611      	mov	r1, r2
 800c218:	4618      	mov	r0, r3
 800c21a:	f7fa f8a1 	bl	8006360 <HAL_PCD_EP_Close>
 800c21e:	4603      	mov	r3, r0
 800c220:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c222:	7bfb      	ldrb	r3, [r7, #15]
 800c224:	4618      	mov	r0, r3
 800c226:	f000 f8d3 	bl	800c3d0 <USBD_Get_USB_Status>
 800c22a:	4603      	mov	r3, r0
 800c22c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c22e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c230:	4618      	mov	r0, r3
 800c232:	3710      	adds	r7, #16
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	460b      	mov	r3, r1
 800c242:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c244:	2300      	movs	r3, #0
 800c246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c248:	2300      	movs	r3, #0
 800c24a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c252:	78fa      	ldrb	r2, [r7, #3]
 800c254:	4611      	mov	r1, r2
 800c256:	4618      	mov	r0, r3
 800c258:	f7fa f961 	bl	800651e <HAL_PCD_EP_SetStall>
 800c25c:	4603      	mov	r3, r0
 800c25e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c260:	7bfb      	ldrb	r3, [r7, #15]
 800c262:	4618      	mov	r0, r3
 800c264:	f000 f8b4 	bl	800c3d0 <USBD_Get_USB_Status>
 800c268:	4603      	mov	r3, r0
 800c26a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c26c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3710      	adds	r7, #16
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c276:	b580      	push	{r7, lr}
 800c278:	b084      	sub	sp, #16
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
 800c27e:	460b      	mov	r3, r1
 800c280:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c282:	2300      	movs	r3, #0
 800c284:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c286:	2300      	movs	r3, #0
 800c288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c290:	78fa      	ldrb	r2, [r7, #3]
 800c292:	4611      	mov	r1, r2
 800c294:	4618      	mov	r0, r3
 800c296:	f7fa f9a6 	bl	80065e6 <HAL_PCD_EP_ClrStall>
 800c29a:	4603      	mov	r3, r0
 800c29c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c29e:	7bfb      	ldrb	r3, [r7, #15]
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f000 f895 	bl	800c3d0 <USBD_Get_USB_Status>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3710      	adds	r7, #16
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	460b      	mov	r3, r1
 800c2be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c2c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c2c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	da0b      	bge.n	800c2e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c2d0:	78fb      	ldrb	r3, [r7, #3]
 800c2d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2d6:	68f9      	ldr	r1, [r7, #12]
 800c2d8:	4613      	mov	r3, r2
 800c2da:	00db      	lsls	r3, r3, #3
 800c2dc:	1a9b      	subs	r3, r3, r2
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	440b      	add	r3, r1
 800c2e2:	333e      	adds	r3, #62	; 0x3e
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	e00b      	b.n	800c300 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c2e8:	78fb      	ldrb	r3, [r7, #3]
 800c2ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2ee:	68f9      	ldr	r1, [r7, #12]
 800c2f0:	4613      	mov	r3, r2
 800c2f2:	00db      	lsls	r3, r3, #3
 800c2f4:	1a9b      	subs	r3, r3, r2
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	440b      	add	r3, r1
 800c2fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c2fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c300:	4618      	mov	r0, r3
 800c302:	3714      	adds	r7, #20
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	460b      	mov	r3, r1
 800c316:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c318:	2300      	movs	r3, #0
 800c31a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c31c:	2300      	movs	r3, #0
 800c31e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c326:	78fa      	ldrb	r2, [r7, #3]
 800c328:	4611      	mov	r1, r2
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7f9 ff8b 	bl	8006246 <HAL_PCD_SetAddress>
 800c330:	4603      	mov	r3, r0
 800c332:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c334:	7bfb      	ldrb	r3, [r7, #15]
 800c336:	4618      	mov	r0, r3
 800c338:	f000 f84a 	bl	800c3d0 <USBD_Get_USB_Status>
 800c33c:	4603      	mov	r3, r0
 800c33e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c340:	7bbb      	ldrb	r3, [r7, #14]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3710      	adds	r7, #16
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b086      	sub	sp, #24
 800c34e:	af00      	add	r7, sp, #0
 800c350:	60f8      	str	r0, [r7, #12]
 800c352:	607a      	str	r2, [r7, #4]
 800c354:	603b      	str	r3, [r7, #0]
 800c356:	460b      	mov	r3, r1
 800c358:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c35a:	2300      	movs	r3, #0
 800c35c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c35e:	2300      	movs	r3, #0
 800c360:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c368:	7af9      	ldrb	r1, [r7, #11]
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	f7fa f88c 	bl	800648a <HAL_PCD_EP_Transmit>
 800c372:	4603      	mov	r3, r0
 800c374:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c376:	7dfb      	ldrb	r3, [r7, #23]
 800c378:	4618      	mov	r0, r3
 800c37a:	f000 f829 	bl	800c3d0 <USBD_Get_USB_Status>
 800c37e:	4603      	mov	r3, r0
 800c380:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c382:	7dbb      	ldrb	r3, [r7, #22]
}
 800c384:	4618      	mov	r0, r3
 800c386:	3718      	adds	r7, #24
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b086      	sub	sp, #24
 800c390:	af00      	add	r7, sp, #0
 800c392:	60f8      	str	r0, [r7, #12]
 800c394:	607a      	str	r2, [r7, #4]
 800c396:	603b      	str	r3, [r7, #0]
 800c398:	460b      	mov	r3, r1
 800c39a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c39c:	2300      	movs	r3, #0
 800c39e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c3aa:	7af9      	ldrb	r1, [r7, #11]
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	f7fa f820 	bl	80063f4 <HAL_PCD_EP_Receive>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3b8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f000 f808 	bl	800c3d0 <USBD_Get_USB_Status>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3c4:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3718      	adds	r7, #24
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
	...

0800c3d0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c3de:	79fb      	ldrb	r3, [r7, #7]
 800c3e0:	2b03      	cmp	r3, #3
 800c3e2:	d817      	bhi.n	800c414 <USBD_Get_USB_Status+0x44>
 800c3e4:	a201      	add	r2, pc, #4	; (adr r2, 800c3ec <USBD_Get_USB_Status+0x1c>)
 800c3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ea:	bf00      	nop
 800c3ec:	0800c3fd 	.word	0x0800c3fd
 800c3f0:	0800c403 	.word	0x0800c403
 800c3f4:	0800c409 	.word	0x0800c409
 800c3f8:	0800c40f 	.word	0x0800c40f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	73fb      	strb	r3, [r7, #15]
    break;
 800c400:	e00b      	b.n	800c41a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c402:	2303      	movs	r3, #3
 800c404:	73fb      	strb	r3, [r7, #15]
    break;
 800c406:	e008      	b.n	800c41a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c408:	2301      	movs	r3, #1
 800c40a:	73fb      	strb	r3, [r7, #15]
    break;
 800c40c:	e005      	b.n	800c41a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c40e:	2303      	movs	r3, #3
 800c410:	73fb      	strb	r3, [r7, #15]
    break;
 800c412:	e002      	b.n	800c41a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c414:	2303      	movs	r3, #3
 800c416:	73fb      	strb	r3, [r7, #15]
    break;
 800c418:	bf00      	nop
  }
  return usb_status;
 800c41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3714      	adds	r7, #20
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr

0800c428 <__libc_init_array>:
 800c428:	b570      	push	{r4, r5, r6, lr}
 800c42a:	4e0d      	ldr	r6, [pc, #52]	; (800c460 <__libc_init_array+0x38>)
 800c42c:	4c0d      	ldr	r4, [pc, #52]	; (800c464 <__libc_init_array+0x3c>)
 800c42e:	1ba4      	subs	r4, r4, r6
 800c430:	10a4      	asrs	r4, r4, #2
 800c432:	2500      	movs	r5, #0
 800c434:	42a5      	cmp	r5, r4
 800c436:	d109      	bne.n	800c44c <__libc_init_array+0x24>
 800c438:	4e0b      	ldr	r6, [pc, #44]	; (800c468 <__libc_init_array+0x40>)
 800c43a:	4c0c      	ldr	r4, [pc, #48]	; (800c46c <__libc_init_array+0x44>)
 800c43c:	f000 f820 	bl	800c480 <_init>
 800c440:	1ba4      	subs	r4, r4, r6
 800c442:	10a4      	asrs	r4, r4, #2
 800c444:	2500      	movs	r5, #0
 800c446:	42a5      	cmp	r5, r4
 800c448:	d105      	bne.n	800c456 <__libc_init_array+0x2e>
 800c44a:	bd70      	pop	{r4, r5, r6, pc}
 800c44c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c450:	4798      	blx	r3
 800c452:	3501      	adds	r5, #1
 800c454:	e7ee      	b.n	800c434 <__libc_init_array+0xc>
 800c456:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c45a:	4798      	blx	r3
 800c45c:	3501      	adds	r5, #1
 800c45e:	e7f2      	b.n	800c446 <__libc_init_array+0x1e>
 800c460:	080403b8 	.word	0x080403b8
 800c464:	080403b8 	.word	0x080403b8
 800c468:	080403b8 	.word	0x080403b8
 800c46c:	080403bc 	.word	0x080403bc

0800c470 <memset>:
 800c470:	4402      	add	r2, r0
 800c472:	4603      	mov	r3, r0
 800c474:	4293      	cmp	r3, r2
 800c476:	d100      	bne.n	800c47a <memset+0xa>
 800c478:	4770      	bx	lr
 800c47a:	f803 1b01 	strb.w	r1, [r3], #1
 800c47e:	e7f9      	b.n	800c474 <memset+0x4>

0800c480 <_init>:
 800c480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c482:	bf00      	nop
 800c484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c486:	bc08      	pop	{r3}
 800c488:	469e      	mov	lr, r3
 800c48a:	4770      	bx	lr

0800c48c <_fini>:
 800c48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c48e:	bf00      	nop
 800c490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c492:	bc08      	pop	{r3}
 800c494:	469e      	mov	lr, r3
 800c496:	4770      	bx	lr
