
PEDALERA_beta_V04_STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d680  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00033f20  0800d808  0800d808  0001d808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08041728  08041728  000602f0  2**0
                  CONTENTS
  4 .ARM          00000008  08041728  08041728  00051728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08041730  08041730  000602f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08041730  08041730  00051730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08041734  08041734  00051734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f0  20000000  08041738  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001008  200002f0  08041a28  000602f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200012f8  08041a28  000612f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000602f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027fda  00000000  00000000  00060320  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005632  00000000  00000000  000882fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d18  00000000  00000000  0008d930  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a80  00000000  00000000  0008f648  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028a15  00000000  00000000  000910c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ddea  00000000  00000000  000b9add  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9486  00000000  00000000  000d78c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b0d4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007894  00000000  00000000  001b0dc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200002f0 	.word	0x200002f0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d7f0 	.word	0x0800d7f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200002f4 	.word	0x200002f4
 80001c4:	0800d7f0 	.word	0x0800d7f0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <spi_74HC165_init>:
GPIO_TypeDef* portPL;
GPIO_TypeDef* portCE;
uint16_t pinPL, pinCE;


void spi_74HC165_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* PLport, uint16_t PLpin, GPIO_TypeDef* CEport, uint16_t CEpin){
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	4613      	mov	r3, r2
 80004d6:	80fb      	strh	r3, [r7, #6]

	spi_handler=hspi;
 80004d8:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <spi_74HC165_init+0x3c>)
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	6013      	str	r3, [r2, #0]

	portPL = PLport;
 80004de:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <spi_74HC165_init+0x40>)
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	6013      	str	r3, [r2, #0]
	pinPL = PLpin;
 80004e4:	4a09      	ldr	r2, [pc, #36]	; (800050c <spi_74HC165_init+0x44>)
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	8013      	strh	r3, [r2, #0]

	portCE = CEport;
 80004ea:	4a09      	ldr	r2, [pc, #36]	; (8000510 <spi_74HC165_init+0x48>)
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	6013      	str	r3, [r2, #0]
	pinCE = CEpin;
 80004f0:	4a08      	ldr	r2, [pc, #32]	; (8000514 <spi_74HC165_init+0x4c>)
 80004f2:	8b3b      	ldrh	r3, [r7, #24]
 80004f4:	8013      	strh	r3, [r2, #0]

}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	200003d8 	.word	0x200003d8
 8000508:	200003e0 	.word	0x200003e0
 800050c:	200003dc 	.word	0x200003dc
 8000510:	200003e8 	.word	0x200003e8
 8000514:	200003e4 	.word	0x200003e4

08000518 <spi_74HC165_receive>:


void spi_74HC165_receive (uint8_t* pdata, uint16_t sizeData){
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	807b      	strh	r3, [r7, #2]

	//carga paralela
	HAL_GPIO_WritePin(portPL, pinPL, 0);
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <spi_74HC165_receive+0x64>)
 8000526:	6818      	ldr	r0, [r3, #0]
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <spi_74HC165_receive+0x68>)
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	2200      	movs	r2, #0
 800052e:	4619      	mov	r1, r3
 8000530:	f003 fdde 	bl	80040f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portPL, pinPL, 1);
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <spi_74HC165_receive+0x64>)
 8000536:	6818      	ldr	r0, [r3, #0]
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <spi_74HC165_receive+0x68>)
 800053a:	881b      	ldrh	r3, [r3, #0]
 800053c:	2201      	movs	r2, #1
 800053e:	4619      	mov	r1, r3
 8000540:	f003 fdd6 	bl	80040f0 <HAL_GPIO_WritePin>

	//clock enable
	HAL_GPIO_WritePin(portCE, pinCE, 0);
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <spi_74HC165_receive+0x6c>)
 8000546:	6818      	ldr	r0, [r3, #0]
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <spi_74HC165_receive+0x70>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	2200      	movs	r2, #0
 800054e:	4619      	mov	r1, r3
 8000550:	f003 fdce 	bl	80040f0 <HAL_GPIO_WritePin>

	//SPI
	HAL_SPI_Receive(spi_handler, pdata, sizeData, 100);
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <spi_74HC165_receive+0x74>)
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	887a      	ldrh	r2, [r7, #2]
 800055a:	2364      	movs	r3, #100	; 0x64
 800055c:	6879      	ldr	r1, [r7, #4]
 800055e:	f007 fe49 	bl	80081f4 <HAL_SPI_Receive>

	//clock disable
	HAL_GPIO_WritePin(portCE, pinCE, 1);
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <spi_74HC165_receive+0x6c>)
 8000564:	6818      	ldr	r0, [r3, #0]
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <spi_74HC165_receive+0x70>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	2201      	movs	r2, #1
 800056c:	4619      	mov	r1, r3
 800056e:	f003 fdbf 	bl	80040f0 <HAL_GPIO_WritePin>
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200003e0 	.word	0x200003e0
 8000580:	200003dc 	.word	0x200003dc
 8000584:	200003e8 	.word	0x200003e8
 8000588:	200003e4 	.word	0x200003e4
 800058c:	200003d8 	.word	0x200003d8

08000590 <spi_74HC595_init>:
SPI_HandleTypeDef* spi_handler;
GPIO_TypeDef* portST;
uint16_t pinST;


void spi_74HC595_init (SPI_HandleTypeDef* hspi, GPIO_TypeDef* STport, uint16_t STpin){
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	4613      	mov	r3, r2
 800059c:	80fb      	strh	r3, [r7, #6]

	spi_handler =hspi;
 800059e:	4a0a      	ldr	r2, [pc, #40]	; (80005c8 <spi_74HC595_init+0x38>)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	6013      	str	r3, [r2, #0]

	portST = STport;
 80005a4:	4a09      	ldr	r2, [pc, #36]	; (80005cc <spi_74HC595_init+0x3c>)
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	6013      	str	r3, [r2, #0]
	pinST = STpin;
 80005aa:	4a09      	ldr	r2, [pc, #36]	; (80005d0 <spi_74HC595_init+0x40>)
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(portST, pinST, 0);
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <spi_74HC595_init+0x3c>)
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <spi_74HC595_init+0x40>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	4619      	mov	r1, r3
 80005bc:	f003 fd98 	bl	80040f0 <HAL_GPIO_WritePin>

} //end spi_74HC595_init()
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200003d8 	.word	0x200003d8
 80005cc:	200003f0 	.word	0x200003f0
 80005d0:	200003ec 	.word	0x200003ec

080005d4 <spi_74HC595_Transmit>:


void spi_74HC595_Transmit (uint8_t* pdata, uint16_t sizeData){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	807b      	strh	r3, [r7, #2]

	HAL_SPI_Transmit(spi_handler, pdata, sizeData, 100);
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <spi_74HC595_Transmit+0x44>)
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	887a      	ldrh	r2, [r7, #2]
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	6879      	ldr	r1, [r7, #4]
 80005ea:	f007 fccf 	bl	8007f8c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(portST, pinST, 1);
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <spi_74HC595_Transmit+0x48>)
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <spi_74HC595_Transmit+0x4c>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	2201      	movs	r2, #1
 80005f8:	4619      	mov	r1, r3
 80005fa:	f003 fd79 	bl	80040f0 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	HAL_GPIO_WritePin(portST, pinST, 0);
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <spi_74HC595_Transmit+0x48>)
 8000600:	6818      	ldr	r0, [r3, #0]
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <spi_74HC595_Transmit+0x4c>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	4619      	mov	r1, r3
 800060a:	f003 fd71 	bl	80040f0 <HAL_GPIO_WritePin>

} //end spi_74HC595_transmit()
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200003d8 	.word	0x200003d8
 800061c:	200003f0 	.word	0x200003f0
 8000620:	200003ec 	.word	0x200003ec

08000624 <makeChord>:

	Parameter: fchord		Number of the chord sent. It was made by setChord() and store in "chordSet[]" vector.

	Returns:	unsigned long	(0xXXXXXX) A 3-byte number that contains the fundamental note in the least significant byte, followed by the 2nd and 3rd notes of the chord.
*/
unsigned long makeChord(unsigned long bnote, uint8_t fchord){
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	70fb      	strb	r3, [r7, #3]

	unsigned long notes;

	notes = bnote;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	60fb      	str	r3, [r7, #12]
	notes += (bnote << 8);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	021b      	lsls	r3, r3, #8
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	4413      	add	r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
	notes += (bnote << 16);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	041b      	lsls	r3, r3, #16
 8000642:	68fa      	ldr	r2, [r7, #12]
 8000644:	4413      	add	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]


	notes += chordSet[fchord];
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	4a06      	ldr	r2, [pc, #24]	; (8000664 <makeChord+0x40>)
 800064c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000650:	68fa      	ldr	r2, [r7, #12]
 8000652:	4413      	add	r3, r2
 8000654:	60fb      	str	r3, [r7, #12]


	return notes;
 8000656:	68fb      	ldr	r3, [r7, #12]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	20000310 	.word	0x20000310

08000668 <setChord>:

	Parameter: fnote		id of the pressed note.

	Returns:	void
*/
void setChord(uint8_t fnote){
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]

chordSet[fnote] = hex_chord[chord] - hex_chordInv[chordInv];
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <setChord+0x34>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <setChord+0x38>)
 8000678:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <setChord+0x3c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a09      	ldr	r2, [pc, #36]	; (80006a8 <setChord+0x40>)
 8000682:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	1a8a      	subs	r2, r1, r2
 800068a:	4908      	ldr	r1, [pc, #32]	; (80006ac <setChord+0x44>)
 800068c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	200003fc 	.word	0x200003fc
 80006a0:	0800da30 	.word	0x0800da30
 80006a4:	20000400 	.word	0x20000400
 80006a8:	0800da50 	.word	0x0800da50
 80006ac:	20000310 	.word	0x20000310

080006b0 <turnOnScreen>:
	Parameters: void

	Returns:	void
*/

void turnOnScreen(void){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

	/////////////CARACTERES ESPECIALES

	lcd_cursor_buff(5, 2);
 80006b4:	2102      	movs	r1, #2
 80006b6:	2005      	movs	r0, #5
 80006b8:	f000 fcaa 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("BASS  PEDAL");
 80006bc:	4806      	ldr	r0, [pc, #24]	; (80006d8 <turnOnScreen+0x28>)
 80006be:	f000 fd2b 	bl	8001118 <lcd_string_buff>
	lcd_cursor_buff(5, 3);
 80006c2:	2103      	movs	r1, #3
 80006c4:	2005      	movs	r0, #5
 80006c6:	f000 fca3 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("SYNTHESIZER");
 80006ca:	4804      	ldr	r0, [pc, #16]	; (80006dc <turnOnScreen+0x2c>)
 80006cc:	f000 fd24 	bl	8001118 <lcd_string_buff>
	lcd_upDate_IT();
 80006d0:	f000 fdce 	bl	8001270 <lcd_upDate_IT>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	0800d8b4 	.word	0x0800d8b4
 80006dc:	0800d8c0 	.word	0x0800d8c0

080006e0 <chordScreen>:
	Parameters: void

	Returns:	void
*/

void chordScreen(void){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	lcd_clearScreen_buff();
 80006e4:	f000 fc7e 	bl	8000fe4 <lcd_clearScreen_buff>
	lcd_cursor_buff(1,0);
 80006e8:	2100      	movs	r1, #0
 80006ea:	2001      	movs	r0, #1
 80006ec:	f000 fc90 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("Acorde: ");
 80006f0:	4815      	ldr	r0, [pc, #84]	; (8000748 <chordScreen+0x68>)
 80006f2:	f000 fd11 	bl	8001118 <lcd_string_buff>
	lcd_string_buff( str_chord[chord]);
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <chordScreen+0x6c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a15      	ldr	r2, [pc, #84]	; (8000750 <chordScreen+0x70>)
 80006fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fd09 	bl	8001118 <lcd_string_buff>
	lcd_cursor_buff(1,1);
 8000706:	2101      	movs	r1, #1
 8000708:	2001      	movs	r0, #1
 800070a:	f000 fc81 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("Pos:");
 800070e:	4811      	ldr	r0, [pc, #68]	; (8000754 <chordScreen+0x74>)
 8000710:	f000 fd02 	bl	8001118 <lcd_string_buff>
	lcd_string_buff( str_chordInv[chordInv]);
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <chordScreen+0x78>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a10      	ldr	r2, [pc, #64]	; (800075c <chordScreen+0x7c>)
 800071a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fcfa 	bl	8001118 <lcd_string_buff>
	lcd_cursor_buff(1,2);
 8000724:	2102      	movs	r1, #2
 8000726:	2001      	movs	r0, #1
 8000728:	f000 fc72 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("Grabar acorde");
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <chordScreen+0x80>)
 800072e:	f000 fcf3 	bl	8001118 <lcd_string_buff>

	lcd_cursor_buff(0, chordSelect_cursor);
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <chordScreen+0x84>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4619      	mov	r1, r3
 8000738:	2000      	movs	r0, #0
 800073a:	f000 fc69 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff(">");
 800073e:	480a      	ldr	r0, [pc, #40]	; (8000768 <chordScreen+0x88>)
 8000740:	f000 fcea 	bl	8001118 <lcd_string_buff>

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	0800d8cc 	.word	0x0800d8cc
 800074c:	200003fc 	.word	0x200003fc
 8000750:	20000030 	.word	0x20000030
 8000754:	0800d8d8 	.word	0x0800d8d8
 8000758:	20000400 	.word	0x20000400
 800075c:	20000050 	.word	0x20000050
 8000760:	0800d8e0 	.word	0x0800d8e0
 8000764:	200003f4 	.word	0x200003f4
 8000768:	0800d8f0 	.word	0x0800d8f0

0800076c <mainScreen>:
	Parameters: void

	Returns:	void
*/

void mainScreen(void){
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

	extern uint8_t sustainMode;
	extern uint8_t acorde;

  	lcd_clearScreen_buff();
 8000770:	f000 fc38 	bl	8000fe4 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 8000774:	2100      	movs	r1, #0
 8000776:	2000      	movs	r0, #0
 8000778:	f000 fc4a 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("Afinacion: ");
 800077c:	4827      	ldr	r0, [pc, #156]	; (800081c <mainScreen+0xb0>)
 800077e:	f000 fccb 	bl	8001118 <lcd_string_buff>
	lcd_string_buff(str_tunne[firstDoTunning - 36]);
 8000782:	4b27      	ldr	r3, [pc, #156]	; (8000820 <mainScreen+0xb4>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	3b24      	subs	r3, #36	; 0x24
 8000788:	4a26      	ldr	r2, [pc, #152]	; (8000824 <mainScreen+0xb8>)
 800078a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fcc2 	bl	8001118 <lcd_string_buff>
	lcd_cursor_buff(0,1);
 8000794:	2101      	movs	r1, #1
 8000796:	2000      	movs	r0, #0
 8000798:	f000 fc3a 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("Octava: ");
 800079c:	4822      	ldr	r0, [pc, #136]	; (8000828 <mainScreen+0xbc>)
 800079e:	f000 fcbb 	bl	8001118 <lcd_string_buff>
	lcd_string_buff(str_octava[octava + 1]);
 80007a2:	4b22      	ldr	r3, [pc, #136]	; (800082c <mainScreen+0xc0>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <mainScreen+0xc4>)
 80007aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fcb2 	bl	8001118 <lcd_string_buff>
	lcd_cursor_buff(0,2);
 80007b4:	2102      	movs	r1, #2
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 fc2a 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("Sustain: ");
 80007bc:	481d      	ldr	r0, [pc, #116]	; (8000834 <mainScreen+0xc8>)
 80007be:	f000 fcab 	bl	8001118 <lcd_string_buff>
	switch (sustainMode){
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <mainScreen+0xcc>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d007      	beq.n	80007da <mainScreen+0x6e>
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d009      	beq.n	80007e2 <mainScreen+0x76>
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d10b      	bne.n	80007ea <mainScreen+0x7e>
		case 0:
			lcd_string_buff("OFF");
 80007d2:	481a      	ldr	r0, [pc, #104]	; (800083c <mainScreen+0xd0>)
 80007d4:	f000 fca0 	bl	8001118 <lcd_string_buff>
		break;
 80007d8:	e007      	b.n	80007ea <mainScreen+0x7e>
		case 1:
			lcd_string_buff("smart");
 80007da:	4819      	ldr	r0, [pc, #100]	; (8000840 <mainScreen+0xd4>)
 80007dc:	f000 fc9c 	bl	8001118 <lcd_string_buff>
		break;
 80007e0:	e003      	b.n	80007ea <mainScreen+0x7e>
		case 2:
			lcd_string_buff("clasico");
 80007e2:	4818      	ldr	r0, [pc, #96]	; (8000844 <mainScreen+0xd8>)
 80007e4:	f000 fc98 	bl	8001118 <lcd_string_buff>
		break;
 80007e8:	bf00      	nop
	}//end switch.
	lcd_cursor_buff(0,3);
 80007ea:	2103      	movs	r1, #3
 80007ec:	2000      	movs	r0, #0
 80007ee:	f000 fc0f 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("Acordes: ");
 80007f2:	4815      	ldr	r0, [pc, #84]	; (8000848 <mainScreen+0xdc>)
 80007f4:	f000 fc90 	bl	8001118 <lcd_string_buff>
	switch (acorde){
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <mainScreen+0xe0>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <mainScreen+0x9a>
 8000800:	2b01      	cmp	r3, #1
 8000802:	d004      	beq.n	800080e <mainScreen+0xa2>
			lcd_string_buff("ON");
		break;
	}//end switch.


}
 8000804:	e007      	b.n	8000816 <mainScreen+0xaa>
			lcd_string_buff("OFF");
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <mainScreen+0xd0>)
 8000808:	f000 fc86 	bl	8001118 <lcd_string_buff>
		break;
 800080c:	e003      	b.n	8000816 <mainScreen+0xaa>
			lcd_string_buff("ON");
 800080e:	4810      	ldr	r0, [pc, #64]	; (8000850 <mainScreen+0xe4>)
 8000810:	f000 fc82 	bl	8001118 <lcd_string_buff>
		break;
 8000814:	bf00      	nop
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	0800d8f4 	.word	0x0800d8f4
 8000820:	200003f8 	.word	0x200003f8
 8000824:	20000000 	.word	0x20000000
 8000828:	0800d900 	.word	0x0800d900
 800082c:	2000030c 	.word	0x2000030c
 8000830:	2000005c 	.word	0x2000005c
 8000834:	0800d90c 	.word	0x0800d90c
 8000838:	20000384 	.word	0x20000384
 800083c:	0800d918 	.word	0x0800d918
 8000840:	0800d91c 	.word	0x0800d91c
 8000844:	0800d924 	.word	0x0800d924
 8000848:	0800d92c 	.word	0x0800d92c
 800084c:	20000390 	.word	0x20000390
 8000850:	0800d938 	.word	0x0800d938

08000854 <tunneScreen>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void tunneScreen(void){
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 8000858:	f000 fbc4 	bl	8000fe4 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 800085c:	2100      	movs	r1, #0
 800085e:	2000      	movs	r0, #0
 8000860:	f000 fbd6 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("AFINACION: ");
 8000864:	480b      	ldr	r0, [pc, #44]	; (8000894 <tunneScreen+0x40>)
 8000866:	f000 fc57 	bl	8001118 <lcd_string_buff>
	lcd_cursor_buff(8, 2);
 800086a:	2102      	movs	r1, #2
 800086c:	2008      	movs	r0, #8
 800086e:	f000 fbcf 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("< ");
 8000872:	4809      	ldr	r0, [pc, #36]	; (8000898 <tunneScreen+0x44>)
 8000874:	f000 fc50 	bl	8001118 <lcd_string_buff>
	lcd_string_buff(str_tunne[firstDoTunning - 36]);
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <tunneScreen+0x48>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	3b24      	subs	r3, #36	; 0x24
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <tunneScreen+0x4c>)
 8000880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000884:	4618      	mov	r0, r3
 8000886:	f000 fc47 	bl	8001118 <lcd_string_buff>
	lcd_string_buff(" >");
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <tunneScreen+0x50>)
 800088c:	f000 fc44 	bl	8001118 <lcd_string_buff>
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	0800d93c 	.word	0x0800d93c
 8000898:	0800d948 	.word	0x0800d948
 800089c:	200003f8 	.word	0x200003f8
 80008a0:	20000000 	.word	0x20000000
 80008a4:	0800d94c 	.word	0x0800d94c

080008a8 <on_off_octave>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void on_off_octave (void){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 80008ac:	f000 fb9a 	bl	8000fe4 <lcd_clearScreen_buff>
	lcd_cursor_buff(3,2);
 80008b0:	2102      	movs	r1, #2
 80008b2:	2003      	movs	r0, #3
 80008b4:	f000 fbac 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("Octava:  ");
 80008b8:	4806      	ldr	r0, [pc, #24]	; (80008d4 <on_off_octave+0x2c>)
 80008ba:	f000 fc2d 	bl	8001118 <lcd_string_buff>
	lcd_string_buff(str_octava[octava + 1]);
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <on_off_octave+0x30>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a05      	ldr	r2, [pc, #20]	; (80008dc <on_off_octave+0x34>)
 80008c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fc24 	bl	8001118 <lcd_string_buff>

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	0800d968 	.word	0x0800d968
 80008d8:	2000030c 	.word	0x2000030c
 80008dc:	2000005c 	.word	0x2000005c

080008e0 <recuest_footkey>:
	Parameter: void

	Returns:	void
*/

void recuest_footkey (void){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 80008e4:	f000 fb7e 	bl	8000fe4 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 80008e8:	2100      	movs	r1, #0
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 fb90 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("Pulse una tecla para");
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <recuest_footkey+0x28>)
 80008f2:	f000 fc11 	bl	8001118 <lcd_string_buff>
	lcd_cursor_buff(0,1);
 80008f6:	2101      	movs	r1, #1
 80008f8:	2000      	movs	r0, #0
 80008fa:	f000 fb89 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("grabar el acorde...");
 80008fe:	4803      	ldr	r0, [pc, #12]	; (800090c <recuest_footkey+0x2c>)
 8000900:	f000 fc0a 	bl	8001118 <lcd_string_buff>

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	0800d974 	.word	0x0800d974
 800090c:	0800d98c 	.word	0x0800d98c

08000910 <pop_up_savedChord>:
	Parameter: void

	Returns:	void
*/

void pop_up_savedChord (uint8_t fk){
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]

	lcd_clearScreen_buff();
 800091a:	f000 fb63 	bl	8000fe4 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,1);
 800091e:	2101      	movs	r1, #1
 8000920:	2000      	movs	r0, #0
 8000922:	f000 fb75 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("ACORDE GRABADO EN LA");
 8000926:	480e      	ldr	r0, [pc, #56]	; (8000960 <pop_up_savedChord+0x50>)
 8000928:	f000 fbf6 	bl	8001118 <lcd_string_buff>
	lcd_cursor_buff(0,2);
 800092c:	2102      	movs	r1, #2
 800092e:	2000      	movs	r0, #0
 8000930:	f000 fb6e 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("TECLA ");
 8000934:	480b      	ldr	r0, [pc, #44]	; (8000964 <pop_up_savedChord+0x54>)
 8000936:	f000 fbef 	bl	8001118 <lcd_string_buff>

	if( fk == 12){
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2b0c      	cmp	r3, #12
 800093e:	d103      	bne.n	8000948 <pop_up_savedChord+0x38>
		lcd_string_buff("C AGUDA");
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <pop_up_savedChord+0x58>)
 8000942:	f000 fbe9 	bl	8001118 <lcd_string_buff>
	}else{
		lcd_string_buff(str_tunne[fk]);
	}

}
 8000946:	e006      	b.n	8000956 <pop_up_savedChord+0x46>
		lcd_string_buff(str_tunne[fk]);
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <pop_up_savedChord+0x5c>)
 800094c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000950:	4618      	mov	r0, r3
 8000952:	f000 fbe1 	bl	8001118 <lcd_string_buff>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	0800d9a0 	.word	0x0800d9a0
 8000964:	0800d9b8 	.word	0x0800d9b8
 8000968:	0800d9c0 	.word	0x0800d9c0
 800096c:	20000000 	.word	0x20000000

08000970 <pop_up_sustain>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void pop_up_sustain (void){
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

	extern uint8_t sustainMode;

	lcd_clearScreen_buff();
 8000974:	f000 fb36 	bl	8000fe4 <lcd_clearScreen_buff>
	lcd_cursor_buff(2,1);
 8000978:	2101      	movs	r1, #1
 800097a:	2002      	movs	r0, #2
 800097c:	f000 fb48 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("Sustain: ");
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <pop_up_sustain+0x44>)
 8000982:	f000 fbc9 	bl	8001118 <lcd_string_buff>
	switch (sustainMode){
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <pop_up_sustain+0x48>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d008      	beq.n	80009a0 <pop_up_sustain+0x30>
 800098e:	2b02      	cmp	r3, #2
 8000990:	d00a      	beq.n	80009a8 <pop_up_sustain+0x38>
 8000992:	2b00      	cmp	r3, #0
 8000994:	d000      	beq.n	8000998 <pop_up_sustain+0x28>
		case 2:
			lcd_string_buff("clasico");
		break;
	}//end switch.

}
 8000996:	e00b      	b.n	80009b0 <pop_up_sustain+0x40>
			lcd_string_buff("OFF");
 8000998:	4808      	ldr	r0, [pc, #32]	; (80009bc <pop_up_sustain+0x4c>)
 800099a:	f000 fbbd 	bl	8001118 <lcd_string_buff>
		break;
 800099e:	e007      	b.n	80009b0 <pop_up_sustain+0x40>
			lcd_string_buff("smart");
 80009a0:	4807      	ldr	r0, [pc, #28]	; (80009c0 <pop_up_sustain+0x50>)
 80009a2:	f000 fbb9 	bl	8001118 <lcd_string_buff>
		break;
 80009a6:	e003      	b.n	80009b0 <pop_up_sustain+0x40>
			lcd_string_buff("clasico");
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <pop_up_sustain+0x54>)
 80009aa:	f000 fbb5 	bl	8001118 <lcd_string_buff>
		break;
 80009ae:	bf00      	nop
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	0800d90c 	.word	0x0800d90c
 80009b8:	20000384 	.word	0x20000384
 80009bc:	0800d918 	.word	0x0800d918
 80009c0:	0800d91c 	.word	0x0800d91c
 80009c4:	0800d924 	.word	0x0800d924

080009c8 <pop_up_cancel>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void pop_up_cancel (void){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 80009cc:	f000 fb0a 	bl	8000fe4 <lcd_clearScreen_buff>
	lcd_cursor_buff(2,1);
 80009d0:	2101      	movs	r1, #1
 80009d2:	2002      	movs	r0, #2
 80009d4:	f000 fb1c 	bl	8001010 <lcd_cursor_buff>
	lcd_string_buff("ACCION CANCELADA");
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <pop_up_cancel+0x1c>)
 80009da:	f000 fb9d 	bl	8001118 <lcd_string_buff>

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	0800d9c8 	.word	0x0800d9c8

080009e8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80009ee:	463b      	mov	r3, r7
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009fa:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 80009fc:	4a2f      	ldr	r2, [pc, #188]	; (8000abc <MX_ADC1_Init+0xd4>)
 80009fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a00:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a08:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a14:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a1a:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a22:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a28:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a2a:	4a25      	ldr	r2, [pc, #148]	; (8000ac0 <MX_ADC1_Init+0xd8>)
 8000a2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a2e:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000a34:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a36:	2203      	movs	r2, #3
 8000a38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a42:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a48:	481b      	ldr	r0, [pc, #108]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a4a:	f002 f981 	bl	8002d50 <HAL_ADC_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a54:	f001 fbaa 	bl	80021ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000a60:	2301      	movs	r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	4813      	ldr	r0, [pc, #76]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a6a:	f002 fc19 	bl	80032a0 <HAL_ADC_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a74:	f001 fb9a 	bl	80021ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a78:	2309      	movs	r3, #9
 8000a7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a80:	463b      	mov	r3, r7
 8000a82:	4619      	mov	r1, r3
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000a86:	f002 fc0b 	bl	80032a0 <HAL_ADC_ConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a90:	f001 fb8c 	bl	80021ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a94:	230a      	movs	r3, #10
 8000a96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_ADC1_Init+0xd0>)
 8000aa2:	f002 fbfd 	bl	80032a0 <HAL_ADC_ConfigChannel>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000aac:	f001 fb7e 	bl	80021ac <Error_Handler>
  }

}
 8000ab0:	bf00      	nop
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000408 	.word	0x20000408
 8000abc:	40012000 	.word	0x40012000
 8000ac0:	0f000001 	.word	0x0f000001

08000ac4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a28      	ldr	r2, [pc, #160]	; (8000b84 <HAL_ADC_MspInit+0xc0>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d149      	bne.n	8000b7a <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b27      	ldr	r3, [pc, #156]	; (8000b88 <HAL_ADC_MspInit+0xc4>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a26      	ldr	r2, [pc, #152]	; (8000b88 <HAL_ADC_MspInit+0xc4>)
 8000af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <HAL_ADC_MspInit+0xc4>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b20      	ldr	r3, [pc, #128]	; (8000b88 <HAL_ADC_MspInit+0xc4>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <HAL_ADC_MspInit+0xc4>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <HAL_ADC_MspInit+0xc4>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <HAL_ADC_MspInit+0xc4>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a18      	ldr	r2, [pc, #96]	; (8000b88 <HAL_ADC_MspInit+0xc4>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <HAL_ADC_MspInit+0xc4>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480f      	ldr	r0, [pc, #60]	; (8000b8c <HAL_ADC_MspInit+0xc8>)
 8000b4e:	f003 f83b 	bl	8003bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b52:	2303      	movs	r3, #3
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b56:	2303      	movs	r3, #3
 8000b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	480a      	ldr	r0, [pc, #40]	; (8000b90 <HAL_ADC_MspInit+0xcc>)
 8000b66:	f003 f82f 	bl	8003bc8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2012      	movs	r0, #18
 8000b70:	f002 febb 	bl	80038ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b74:	2012      	movs	r0, #18
 8000b76:	f002 fed4 	bl	8003922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40012000 	.word	0x40012000
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020800 	.word	0x40020800
 8000b90:	40020400 	.word	0x40020400

08000b94 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <HAL_ADC_MspDeInit+0x3c>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d110      	bne.n	8000bc8 <HAL_ADC_MspDeInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <HAL_ADC_MspDeInit+0x40>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_ADC_MspDeInit+0x40>)
 8000bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 8000bb2:	2103      	movs	r1, #3
 8000bb4:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <HAL_ADC_MspDeInit+0x44>)
 8000bb6:	f003 f9a1 	bl	8003efc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1);
 8000bba:	2103      	movs	r1, #3
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <HAL_ADC_MspDeInit+0x48>)
 8000bbe:	f003 f99d 	bl	8003efc <HAL_GPIO_DeInit>

    /* ADC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC_IRQn);
 8000bc2:	2012      	movs	r0, #18
 8000bc4:	f002 febb 	bl	800393e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40012000 	.word	0x40012000
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020800 	.word	0x40020800
 8000bdc:	40020400 	.word	0x40020400

08000be0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000be6:	463b      	mov	r3, r7
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_DAC_Init+0x60>)
 8000bf0:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <MX_DAC_Init+0x64>)
 8000bf2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000bf4:	4812      	ldr	r0, [pc, #72]	; (8000c40 <MX_DAC_Init+0x60>)
 8000bf6:	f002 febc 	bl	8003972 <HAL_DAC_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000c00:	f001 fad4 	bl	80021ac <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	2200      	movs	r2, #0
 8000c10:	4619      	mov	r1, r3
 8000c12:	480b      	ldr	r0, [pc, #44]	; (8000c40 <MX_DAC_Init+0x60>)
 8000c14:	f002 ff35 	bl	8003a82 <HAL_DAC_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000c1e:	f001 fac5 	bl	80021ac <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c22:	463b      	mov	r3, r7
 8000c24:	2210      	movs	r2, #16
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_DAC_Init+0x60>)
 8000c2a:	f002 ff2a 	bl	8003a82 <HAL_DAC_ConfigChannel>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000c34:	f001 faba 	bl	80021ac <Error_Handler>
  }

}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000450 	.word	0x20000450
 8000c44:	40007400 	.word	0x40007400

08000c48 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a17      	ldr	r2, [pc, #92]	; (8000cc4 <HAL_DAC_MspInit+0x7c>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d127      	bne.n	8000cba <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <HAL_DAC_MspInit+0x80>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <HAL_DAC_MspInit+0x80>)
 8000c74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <HAL_DAC_MspInit+0x80>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_DAC_MspInit+0x80>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <HAL_DAC_MspInit+0x80>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <HAL_DAC_MspInit+0x80>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ca2:	2330      	movs	r3, #48	; 0x30
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <HAL_DAC_MspInit+0x84>)
 8000cb6:	f002 ff87 	bl	8003bc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	; 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40007400 	.word	0x40007400
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020000 	.word	0x40020000

08000cd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b34      	ldr	r3, [pc, #208]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a33      	ldr	r2, [pc, #204]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b31      	ldr	r3, [pc, #196]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a2c      	ldr	r2, [pc, #176]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a25      	ldr	r2, [pc, #148]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a1e      	ldr	r2, [pc, #120]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d60:	f043 0308 	orr.w	r3, r3, #8
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <MX_GPIO_Init+0xec>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0308 	and.w	r3, r3, #8
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_VERDE_Pin|LED_NARANJA_Pin|LED_ROJO_Pin|LED_AZUL_Pin
 8000d72:	2200      	movs	r2, #0
 8000d74:	f24f 01e0 	movw	r1, #61664	; 0xf0e0
 8000d78:	4811      	ldr	r0, [pc, #68]	; (8000dc0 <MX_GPIO_Init+0xf0>)
 8000d7a:	f003 f9b9 	bl	80040f0 <HAL_GPIO_WritePin>
                          |PL_bot_Pin|CE_bot_Pin|ST_leds_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOTON_AZUL_Pin;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOTON_AZUL_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <MX_GPIO_Init+0xf4>)
 8000d92:	f002 ff19 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_VERDE_Pin|LED_NARANJA_Pin|LED_ROJO_Pin|LED_AZUL_Pin
 8000d96:	f24f 03e0 	movw	r3, #61664	; 0xf0e0
 8000d9a:	617b      	str	r3, [r7, #20]
                          |PL_bot_Pin|CE_bot_Pin|ST_leds_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <MX_GPIO_Init+0xf0>)
 8000db0:	f002 ff0a 	bl	8003bc8 <HAL_GPIO_Init>

}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	; 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020c00 	.word	0x40020c00
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000dce:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <MX_I2C1_Init+0x54>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000dd4:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <MX_I2C1_Init+0x58>)
 8000dd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000de6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000e06:	f003 f98d 	bl	8004124 <HAL_I2C_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e10:	f001 f9cc 	bl	80021ac <Error_Handler>
  }

}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000464 	.word	0x20000464
 8000e1c:	40005400 	.word	0x40005400
 8000e20:	00061a80 	.word	0x00061a80

08000e24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a21      	ldr	r2, [pc, #132]	; (8000ec8 <HAL_I2C_MspInit+0xa4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d13b      	bne.n	8000ebe <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <HAL_I2C_MspInit+0xa8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a1f      	ldr	r2, [pc, #124]	; (8000ecc <HAL_I2C_MspInit+0xa8>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_I2C_MspInit+0xa8>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e62:	23c0      	movs	r3, #192	; 0xc0
 8000e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e66:	2312      	movs	r3, #18
 8000e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e72:	2304      	movs	r3, #4
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4814      	ldr	r0, [pc, #80]	; (8000ed0 <HAL_I2C_MspInit+0xac>)
 8000e7e:	f002 fea3 	bl	8003bc8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_I2C_MspInit+0xa8>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <HAL_I2C_MspInit+0xa8>)
 8000e8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_I2C_MspInit+0xa8>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	201f      	movs	r0, #31
 8000ea4:	f002 fd21 	bl	80038ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ea8:	201f      	movs	r0, #31
 8000eaa:	f002 fd3a 	bl	8003922 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2020      	movs	r0, #32
 8000eb4:	f002 fd19 	bl	80038ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000eb8:	2020      	movs	r0, #32
 8000eba:	f002 fd32 	bl	8003922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020400 	.word	0x40020400

08000ed4 <__lcd_send_cmd>:
uint8_t flag_sendLcd = 1;
uint8_t I2CtxComplete = 1;

/*Used by lcd_init() only*/
void __lcd_send_cmd (char cmd)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f023 030f 	bic.w	r3, r3, #15
 8000ee4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	011b      	lsls	r3, r3, #4
 8000eea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	f043 030c 	orr.w	r3, r3, #12
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f00:	7bbb      	ldrb	r3, [r7, #14]
 8000f02:	f043 030c 	orr.w	r3, r3, #12
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f0a:	7bbb      	ldrb	r3, [r7, #14]
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <__lcd_send_cmd+0x60>)
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <__lcd_send_cmd+0x64>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b299      	uxth	r1, r3
 8000f1e:	f107 0208 	add.w	r2, r7, #8
 8000f22:	2364      	movs	r3, #100	; 0x64
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2304      	movs	r3, #4
 8000f28:	f003 fa34 	bl	8004394 <HAL_I2C_Master_Transmit>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000764 	.word	0x20000764
 8000f38:	20000760 	.word	0x20000760

08000f3c <__lcd_send_cmd_buff>:

void __lcd_send_cmd_buff (char cmd)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	f023 030f 	bic.w	r3, r3, #15
 8000f4c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	011b      	lsls	r3, r3, #4
 8000f52:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	f043 030c 	orr.w	r3, r3, #12
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f68:	7bbb      	ldrb	r3, [r7, #14]
 8000f6a:	f043 030c 	orr.w	r3, r3, #12
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f72:	7bbb      	ldrb	r3, [r7, #14]
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
	__add_to_lcdBuff((uint8_t*)data_t,4);
 8000f7c:	f107 0308 	add.w	r3, r7, #8
 8000f80:	2104      	movs	r1, #4
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f8dc 	bl	8001140 <__add_to_lcdBuff>
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <__lcd_send_data_buff>:


void __lcd_send_data_buff (char data)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f023 030f 	bic.w	r3, r3, #15
 8000fa0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	011b      	lsls	r3, r3, #4
 8000fa6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	f043 030d 	orr.w	r3, r3, #13
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	f043 0309 	orr.w	r3, r3, #9
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000fbc:	7bbb      	ldrb	r3, [r7, #14]
 8000fbe:	f043 030d 	orr.w	r3, r3, #13
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	f043 0309 	orr.w	r3, r3, #9
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
	__add_to_lcdBuff((uint8_t*)data_t,4);
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	2104      	movs	r1, #4
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f8b2 	bl	8001140 <__add_to_lcdBuff>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <lcd_clearScreen_buff>:


void lcd_clearScreen_buff (void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
	__lcd_send_cmd_buff (0x80);
 8000fea:	2080      	movs	r0, #128	; 0x80
 8000fec:	f7ff ffa6 	bl	8000f3c <__lcd_send_cmd_buff>
	for (int i=0; i<80; i++)
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	e005      	b.n	8001002 <lcd_clearScreen_buff+0x1e>
	{
		__lcd_send_data_buff (' ');
 8000ff6:	2020      	movs	r0, #32
 8000ff8:	f7ff ffca 	bl	8000f90 <__lcd_send_data_buff>
	for (int i=0; i<80; i++)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3301      	adds	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b4f      	cmp	r3, #79	; 0x4f
 8001006:	ddf6      	ble.n	8000ff6 <lcd_clearScreen_buff+0x12>
	}
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <lcd_cursor_buff>:


void lcd_cursor_buff(int x, int y)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
    switch (y){
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	2b03      	cmp	r3, #3
 800101e:	d82b      	bhi.n	8001078 <lcd_cursor_buff+0x68>
 8001020:	a201      	add	r2, pc, #4	; (adr r2, 8001028 <lcd_cursor_buff+0x18>)
 8001022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001026:	bf00      	nop
 8001028:	08001039 	.word	0x08001039
 800102c:	08001049 	.word	0x08001049
 8001030:	08001059 	.word	0x08001059
 8001034:	08001069 	.word	0x08001069
    	case 0:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE1 + x);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	3b80      	subs	r3, #128	; 0x80
 800103e:	b2db      	uxtb	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff7b 	bl	8000f3c <__lcd_send_cmd_buff>
    	break;
 8001046:	e017      	b.n	8001078 <lcd_cursor_buff+0x68>
    	case 1:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE2 + x);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	3b40      	subs	r3, #64	; 0x40
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff73 	bl	8000f3c <__lcd_send_cmd_buff>
    	break;
 8001056:	e00f      	b.n	8001078 <lcd_cursor_buff+0x68>
    	case 2:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE3 + x);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	3b6c      	subs	r3, #108	; 0x6c
 800105e:	b2db      	uxtb	r3, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff6b 	bl	8000f3c <__lcd_send_cmd_buff>
    	break;
 8001066:	e007      	b.n	8001078 <lcd_cursor_buff+0x68>
    	case 3:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE4 + x);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	3b2c      	subs	r3, #44	; 0x2c
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff63 	bl	8000f3c <__lcd_send_cmd_buff>
    	break;
 8001076:	bf00      	nop
    }
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <lcd_init>:


void lcd_init (I2C_HandleTypeDef* hi2c, uint8_t i2c_address)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	70fb      	strb	r3, [r7, #3]
	i2c_handler = hi2c; //set the i2c handler struct.
 800108c:	4a20      	ldr	r2, [pc, #128]	; (8001110 <lcd_init+0x90>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
	SLAVE_ADDRESS_LCD = (i2c_address << 1); //set the lcd i2c address (left alignment).
 8001092:	78fb      	ldrb	r3, [r7, #3]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <lcd_init+0x94>)
 800109a:	701a      	strb	r2, [r3, #0]

	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800109c:	2032      	movs	r0, #50	; 0x32
 800109e:	f001 fe35 	bl	8002d0c <HAL_Delay>
	__lcd_send_cmd (0x30);
 80010a2:	2030      	movs	r0, #48	; 0x30
 80010a4:	f7ff ff16 	bl	8000ed4 <__lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80010a8:	2005      	movs	r0, #5
 80010aa:	f001 fe2f 	bl	8002d0c <HAL_Delay>
	__lcd_send_cmd (0x30);
 80010ae:	2030      	movs	r0, #48	; 0x30
 80010b0:	f7ff ff10 	bl	8000ed4 <__lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80010b4:	2001      	movs	r0, #1
 80010b6:	f001 fe29 	bl	8002d0c <HAL_Delay>
	__lcd_send_cmd (0x30);
 80010ba:	2030      	movs	r0, #48	; 0x30
 80010bc:	f7ff ff0a 	bl	8000ed4 <__lcd_send_cmd>
	HAL_Delay(10);
 80010c0:	200a      	movs	r0, #10
 80010c2:	f001 fe23 	bl	8002d0c <HAL_Delay>
	__lcd_send_cmd (0x20);  // 4bit mode
 80010c6:	2020      	movs	r0, #32
 80010c8:	f7ff ff04 	bl	8000ed4 <__lcd_send_cmd>
	HAL_Delay(10);
 80010cc:	200a      	movs	r0, #10
 80010ce:	f001 fe1d 	bl	8002d0c <HAL_Delay>

  // dislay initialisation
	__lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80010d2:	2028      	movs	r0, #40	; 0x28
 80010d4:	f7ff fefe 	bl	8000ed4 <__lcd_send_cmd>
	HAL_Delay(1);
 80010d8:	2001      	movs	r0, #1
 80010da:	f001 fe17 	bl	8002d0c <HAL_Delay>
	__lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80010de:	2008      	movs	r0, #8
 80010e0:	f7ff fef8 	bl	8000ed4 <__lcd_send_cmd>
	HAL_Delay(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f001 fe11 	bl	8002d0c <HAL_Delay>
	__lcd_send_cmd (0x01);  // clear display
 80010ea:	2001      	movs	r0, #1
 80010ec:	f7ff fef2 	bl	8000ed4 <__lcd_send_cmd>
	HAL_Delay(2);
 80010f0:	2002      	movs	r0, #2
 80010f2:	f001 fe0b 	bl	8002d0c <HAL_Delay>
	__lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80010f6:	2006      	movs	r0, #6
 80010f8:	f7ff feec 	bl	8000ed4 <__lcd_send_cmd>
	HAL_Delay(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f001 fe05 	bl	8002d0c <HAL_Delay>
	__lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001102:	200c      	movs	r0, #12
 8001104:	f7ff fee6 	bl	8000ed4 <__lcd_send_cmd>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000764 	.word	0x20000764
 8001114:	20000760 	.word	0x20000760

08001118 <lcd_string_buff>:


void lcd_string_buff (char *str)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	while (*str) __lcd_send_data_buff(*str++);
 8001120:	e006      	b.n	8001130 <lcd_string_buff+0x18>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	1c5a      	adds	r2, r3, #1
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff30 	bl	8000f90 <__lcd_send_data_buff>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f4      	bne.n	8001122 <lcd_string_buff+0xa>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <__add_to_lcdBuff>:


void __add_to_lcdBuff(uint8_t* data, uint8_t sizeData){
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]
	while (i < sizeData){
 8001150:	e018      	b.n	8001184 <__add_to_lcdBuff+0x44>
		lcd_circ_buffer[lcd_circ_buff_in] = *(data + i);
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	4413      	add	r3, r2
 8001158:	4a11      	ldr	r2, [pc, #68]	; (80011a0 <__add_to_lcdBuff+0x60>)
 800115a:	8812      	ldrh	r2, [r2, #0]
 800115c:	7819      	ldrb	r1, [r3, #0]
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <__add_to_lcdBuff+0x64>)
 8001160:	5499      	strb	r1, [r3, r2]
		lcd_circ_buff_in++;
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <__add_to_lcdBuff+0x60>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <__add_to_lcdBuff+0x60>)
 800116c:	801a      	strh	r2, [r3, #0]
		i++;
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	3301      	adds	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
		if (lcd_circ_buff_in == LCD_CIRCBUFF_MAX){
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <__add_to_lcdBuff+0x60>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800117c:	d102      	bne.n	8001184 <__add_to_lcdBuff+0x44>
			lcd_circ_buff_in = 0;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <__add_to_lcdBuff+0x60>)
 8001180:	2200      	movs	r2, #0
 8001182:	801a      	strh	r2, [r3, #0]
	while (i < sizeData){
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	429a      	cmp	r2, r3
 800118a:	d3e2      	bcc.n	8001152 <__add_to_lcdBuff+0x12>
		}
	}
	flag_sendLcd = 1;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <__add_to_lcdBuff+0x68>)
 800118e:	2201      	movs	r2, #1
 8001190:	701a      	strb	r2, [r3, #0]
}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000344 	.word	0x20000344
 80011a4:	200004b8 	.word	0x200004b8
 80011a8:	20000068 	.word	0x20000068

080011ac <__lcd_sendBuff_IT>:


void __lcd_sendBuff_IT (void){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
	uint16_t I2C_Tx_ptr;
	uint16_t I2C_Tx_length;

	//if (I2CtxComplete != 0){ //si no termino la transmision anterior...

		if (lcd_circ_buff_out == LCD_CIRCBUFF_MAX){
 80011b2:	4b27      	ldr	r3, [pc, #156]	; (8001250 <__lcd_sendBuff_IT+0xa4>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 80011ba:	d102      	bne.n	80011c2 <__lcd_sendBuff_IT+0x16>
			lcd_circ_buff_out = 0;
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <__lcd_sendBuff_IT+0xa4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	801a      	strh	r2, [r3, #0]
		}

		if (lcd_circ_buff_out == lcd_circ_buff_in){
 80011c2:	4b23      	ldr	r3, [pc, #140]	; (8001250 <__lcd_sendBuff_IT+0xa4>)
 80011c4:	881a      	ldrh	r2, [r3, #0]
 80011c6:	4b23      	ldr	r3, [pc, #140]	; (8001254 <__lcd_sendBuff_IT+0xa8>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d103      	bne.n	80011d6 <__lcd_sendBuff_IT+0x2a>
			//no hay transmisión acá
			flag_sendLcd = 0;
 80011ce:	4b22      	ldr	r3, [pc, #136]	; (8001258 <__lcd_sendBuff_IT+0xac>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
			return;
 80011d4:	e038      	b.n	8001248 <__lcd_sendBuff_IT+0x9c>
		}

		if (lcd_circ_buff_out > lcd_circ_buff_in){
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <__lcd_sendBuff_IT+0xa4>)
 80011d8:	881a      	ldrh	r2, [r3, #0]
 80011da:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <__lcd_sendBuff_IT+0xa8>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d907      	bls.n	80011f2 <__lcd_sendBuff_IT+0x46>
			lcd_tx_length = LCD_CIRCBUFF_MAX - lcd_circ_buff_out;//transmite solo hasta el final del buffer, para luego reacomodar los punteros.
 80011e2:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <__lcd_sendBuff_IT+0xa4>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	f5c3 732a 	rsb	r3, r3, #680	; 0x2a8
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <__lcd_sendBuff_IT+0xb0>)
 80011ee:	801a      	strh	r2, [r3, #0]
 80011f0:	e007      	b.n	8001202 <__lcd_sendBuff_IT+0x56>
		}else{
			lcd_tx_length = lcd_circ_buff_in - lcd_circ_buff_out;
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <__lcd_sendBuff_IT+0xa8>)
 80011f4:	881a      	ldrh	r2, [r3, #0]
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <__lcd_sendBuff_IT+0xa4>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <__lcd_sendBuff_IT+0xb0>)
 8001200:	801a      	strh	r2, [r3, #0]
//		I2C_Tx_ptr = lcd_circ_buff_out;
//		I2C_Tx_length = lcd_tx_length;
//		lcd_circ_buff_out += lcd_tx_length;
//		lcd_tx_length = 0;

		if (I2CtxComplete != 0){
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <__lcd_sendBuff_IT+0xb4>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d01e      	beq.n	8001248 <__lcd_sendBuff_IT+0x9c>
			I2CtxComplete = 0;
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <__lcd_sendBuff_IT+0xb4>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]

			I2C_Tx_ptr = lcd_circ_buff_out;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <__lcd_sendBuff_IT+0xa4>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	80fb      	strh	r3, [r7, #6]
			I2C_Tx_length = lcd_tx_length;
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <__lcd_sendBuff_IT+0xb0>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	80bb      	strh	r3, [r7, #4]
			lcd_circ_buff_out += lcd_tx_length;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <__lcd_sendBuff_IT+0xa4>)
 800121e:	881a      	ldrh	r2, [r3, #0]
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <__lcd_sendBuff_IT+0xb0>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	4413      	add	r3, r2
 8001226:	b29a      	uxth	r2, r3
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <__lcd_sendBuff_IT+0xa4>)
 800122a:	801a      	strh	r2, [r3, #0]
			lcd_tx_length = 0;
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <__lcd_sendBuff_IT+0xb0>)
 800122e:	2200      	movs	r2, #0
 8001230:	801a      	strh	r2, [r3, #0]
			HAL_I2C_Master_Transmit_IT(i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) &lcd_circ_buffer[I2C_Tx_ptr],I2C_Tx_length);
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <__lcd_sendBuff_IT+0xb8>)
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <__lcd_sendBuff_IT+0xbc>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	b299      	uxth	r1, r3
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <__lcd_sendBuff_IT+0xc0>)
 8001240:	441a      	add	r2, r3
 8001242:	88bb      	ldrh	r3, [r7, #4]
 8001244:	f003 f9a4 	bl	8004590 <HAL_I2C_Master_Transmit_IT>
		}
	//}
}
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000346 	.word	0x20000346
 8001254:	20000344 	.word	0x20000344
 8001258:	20000068 	.word	0x20000068
 800125c:	20000348 	.word	0x20000348
 8001260:	20000069 	.word	0x20000069
 8001264:	20000764 	.word	0x20000764
 8001268:	20000760 	.word	0x20000760
 800126c:	200004b8 	.word	0x200004b8

08001270 <lcd_upDate_IT>:


void lcd_upDate_IT(void){
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	if (flag_sendLcd) __lcd_sendBuff_IT();
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <lcd_upDate_IT+0x14>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <lcd_upDate_IT+0x10>
 800127c:	f7ff ff96 	bl	80011ac <__lcd_sendBuff_IT>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000068 	.word	0x20000068

08001288 <_lcd_ISR>:


/* Insert the next function in your ISR*/
void _lcd_ISR (void){
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
	I2CtxComplete=1;
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <_lcd_ISR+0x14>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	20000069 	.word	0x20000069

080012a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a6:	f001 fcbf 	bl	8002c28 <HAL_Init>

  /* USER CODE BEGIN Init */
  firstDoTunning = 36;
 80012aa:	4bac      	ldr	r3, [pc, #688]	; (800155c <main+0x2bc>)
 80012ac:	2224      	movs	r2, #36	; 0x24
 80012ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b0:	f000 f9fa 	bl	80016a8 <SystemClock_Config>
   */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b4:	f7ff fd0c 	bl	8000cd0 <MX_GPIO_Init>
  MX_DAC_Init();
 80012b8:	f7ff fc92 	bl	8000be0 <MX_DAC_Init>
  MX_I2C1_Init();
 80012bc:	f7ff fd84 	bl	8000dc8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80012c0:	f00b fc36 	bl	800cb30 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80012c4:	f001 fad8 	bl	8002878 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012c8:	f001 fb22 	bl	8002910 <MX_TIM3_Init>
  MX_ADC1_Init();
 80012cc:	f7ff fb8c 	bl	80009e8 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80012d0:	f001 fbae 	bl	8002a30 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80012d4:	f001 fbd6 	bl	8002a84 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 80012d8:	f001 f960 	bl	800259c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  spi_74HC165_init(&hspi1, PL_bot_GPIO_Port, PL_bot_Pin, CE_bot_GPIO_Port, CE_bot_Pin);
 80012dc:	2340      	movs	r3, #64	; 0x40
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	4b9f      	ldr	r3, [pc, #636]	; (8001560 <main+0x2c0>)
 80012e2:	2220      	movs	r2, #32
 80012e4:	499e      	ldr	r1, [pc, #632]	; (8001560 <main+0x2c0>)
 80012e6:	489f      	ldr	r0, [pc, #636]	; (8001564 <main+0x2c4>)
 80012e8:	f7ff f8ee 	bl	80004c8 <spi_74HC165_init>
  spi_74HC595_init(&hspi1, ST_leds_GPIO_Port, ST_leds_Pin);
 80012ec:	2280      	movs	r2, #128	; 0x80
 80012ee:	499c      	ldr	r1, [pc, #624]	; (8001560 <main+0x2c0>)
 80012f0:	489c      	ldr	r0, [pc, #624]	; (8001564 <main+0x2c4>)
 80012f2:	f7ff f94d 	bl	8000590 <spi_74HC595_init>

  adc_potes_init();
 80012f6:	f001 f863 	bl	80023c0 <adc_potes_init>

  HAL_TIM_Base_Start_IT(&htim2); // 1 ms tick timer.
 80012fa:	489b      	ldr	r0, [pc, #620]	; (8001568 <main+0x2c8>)
 80012fc:	f007 fc81 	bl	8008c02 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); // 44100Hz timer.
 8001300:	489a      	ldr	r0, [pc, #616]	; (800156c <main+0x2cc>)
 8001302:	f007 fc7e 	bl	8008c02 <HAL_TIM_Base_Start_IT>

  osc_dac_init(&hdac, DAC_CHANNEL_1);
 8001306:	2100      	movs	r1, #0
 8001308:	4899      	ldr	r0, [pc, #612]	; (8001570 <main+0x2d0>)
 800130a:	f000 ff57 	bl	80021bc <osc_dac_init>
  osc_setRatios(100, 100, 100);
 800130e:	2264      	movs	r2, #100	; 0x64
 8001310:	2164      	movs	r1, #100	; 0x64
 8001312:	2064      	movs	r0, #100	; 0x64
 8001314:	f001 f828 	bl	8002368 <osc_setRatios>

  leds_buffer = 0xFFFF;
 8001318:	4b96      	ldr	r3, [pc, #600]	; (8001574 <main+0x2d4>)
 800131a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800131e:	801a      	strh	r2, [r3, #0]
  spi_74HC595_Transmit((uint8_t*) &leds_buffer, 2 /*bytes*/);
 8001320:	2102      	movs	r1, #2
 8001322:	4894      	ldr	r0, [pc, #592]	; (8001574 <main+0x2d4>)
 8001324:	f7ff f956 	bl	80005d4 <spi_74HC595_Transmit>

  lcd_init(&hi2c1, 0x3f);
 8001328:	213f      	movs	r1, #63	; 0x3f
 800132a:	4893      	ldr	r0, [pc, #588]	; (8001578 <main+0x2d8>)
 800132c:	f7ff fea8 	bl	8001080 <lcd_init>

  //rutina de encendido//

  turnOnScreen();
 8001330:	f7ff f9be 	bl	80006b0 <turnOnScreen>
  HAL_Delay(500);
 8001334:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001338:	f001 fce8 	bl	8002d0c <HAL_Delay>
  showLeds();
 800133c:	f000 fe50 	bl	8001fe0 <showLeds>
  HAL_Delay(500);
 8001340:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001344:	f001 fce2 	bl	8002d0c <HAL_Delay>
  mainScreen();
 8001348:	f7ff fa10 	bl	800076c <mainScreen>
  leds_octava = 0b1 << LED_OCT_M;
 800134c:	4b8b      	ldr	r3, [pc, #556]	; (800157c <main+0x2dc>)
 800134e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001352:	801a      	strh	r2, [r3, #0]
  leds_buffer = leds_octava;
 8001354:	4b89      	ldr	r3, [pc, #548]	; (800157c <main+0x2dc>)
 8001356:	881a      	ldrh	r2, [r3, #0]
 8001358:	4b86      	ldr	r3, [pc, #536]	; (8001574 <main+0x2d4>)
 800135a:	801a      	strh	r2, [r3, #0]
  leds_buffer = ~leds_buffer;
 800135c:	4b85      	ldr	r3, [pc, #532]	; (8001574 <main+0x2d4>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	43db      	mvns	r3, r3
 8001362:	b29a      	uxth	r2, r3
 8001364:	4b83      	ldr	r3, [pc, #524]	; (8001574 <main+0x2d4>)
 8001366:	801a      	strh	r2, [r3, #0]
  spi_74HC595_Transmit((uint8_t*) &leds_buffer, 2 /*bytes*/);
 8001368:	2102      	movs	r1, #2
 800136a:	4882      	ldr	r0, [pc, #520]	; (8001574 <main+0x2d4>)
 800136c:	f7ff f932 	bl	80005d4 <spi_74HC595_Transmit>

  HAL_ADC_Start_IT(&hadc1);
 8001370:	4883      	ldr	r0, [pc, #524]	; (8001580 <main+0x2e0>)
 8001372:	f001 fd63 	bl	8002e3c <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (screenNum){
 8001376:	4b83      	ldr	r3, [pc, #524]	; (8001584 <main+0x2e4>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	3b03      	subs	r3, #3
 800137c:	2b08      	cmp	r3, #8
 800137e:	d856      	bhi.n	800142e <main+0x18e>
 8001380:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <main+0xe8>)
 8001382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001386:	bf00      	nop
 8001388:	080013ad 	.word	0x080013ad
 800138c:	080013bb 	.word	0x080013bb
 8001390:	080013c9 	.word	0x080013c9
 8001394:	0800142f 	.word	0x0800142f
 8001398:	080013d7 	.word	0x080013d7
 800139c:	080013f3 	.word	0x080013f3
 80013a0:	080013e5 	.word	0x080013e5
 80013a4:	0800140d 	.word	0x0800140d
 80013a8:	0800141b 	.word	0x0800141b
	  		case MAIN_SCREEN:
	  			mainScreen();
 80013ac:	f7ff f9de 	bl	800076c <mainScreen>
	  			last_screenNum = screenNum;
 80013b0:	4b74      	ldr	r3, [pc, #464]	; (8001584 <main+0x2e4>)
 80013b2:	781a      	ldrb	r2, [r3, #0]
 80013b4:	4b74      	ldr	r3, [pc, #464]	; (8001588 <main+0x2e8>)
 80013b6:	701a      	strb	r2, [r3, #0]
	  		break;
 80013b8:	e03a      	b.n	8001430 <main+0x190>
	  		case CHORD_SCREEN:
	  			chordScreen();
 80013ba:	f7ff f991 	bl	80006e0 <chordScreen>
	  			last_screenNum = screenNum;
 80013be:	4b71      	ldr	r3, [pc, #452]	; (8001584 <main+0x2e4>)
 80013c0:	781a      	ldrb	r2, [r3, #0]
 80013c2:	4b71      	ldr	r3, [pc, #452]	; (8001588 <main+0x2e8>)
 80013c4:	701a      	strb	r2, [r3, #0]
	  		break;
 80013c6:	e033      	b.n	8001430 <main+0x190>
	  		case TUNNE_SCREEN:
	  			tunneScreen();
 80013c8:	f7ff fa44 	bl	8000854 <tunneScreen>
	  			last_screenNum = screenNum;
 80013cc:	4b6d      	ldr	r3, [pc, #436]	; (8001584 <main+0x2e4>)
 80013ce:	781a      	ldrb	r2, [r3, #0]
 80013d0:	4b6d      	ldr	r3, [pc, #436]	; (8001588 <main+0x2e8>)
 80013d2:	701a      	strb	r2, [r3, #0]
	  		break;
 80013d4:	e02c      	b.n	8001430 <main+0x190>
	  		case RECUEST_FOOTKEY_SCREEN:
	  			recuest_footkey();
 80013d6:	f7ff fa83 	bl	80008e0 <recuest_footkey>
	  			last_screenNum = screenNum; //this variable must store the CHORD_SCREEN value, to use it as return point.
 80013da:	4b6a      	ldr	r3, [pc, #424]	; (8001584 <main+0x2e4>)
 80013dc:	781a      	ldrb	r2, [r3, #0]
 80013de:	4b6a      	ldr	r3, [pc, #424]	; (8001588 <main+0x2e8>)
 80013e0:	701a      	strb	r2, [r3, #0]
	  		break;
 80013e2:	e025      	b.n	8001430 <main+0x190>
	  		case POPUP_OCTAVE:
	  			on_off_octave();
 80013e4:	f7ff fa60 	bl	80008a8 <on_off_octave>
	  			popup_time = 2000;
 80013e8:	4b68      	ldr	r3, [pc, #416]	; (800158c <main+0x2ec>)
 80013ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013ee:	601a      	str	r2, [r3, #0]
	  		break;
 80013f0:	e01e      	b.n	8001430 <main+0x190>
	  		case POPUP_SAVED_CHORD:
	  			pop_up_savedChord(lastKey_pos);
 80013f2:	4b67      	ldr	r3, [pc, #412]	; (8001590 <main+0x2f0>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fa8a 	bl	8000910 <pop_up_savedChord>
	  			last_screenNum = CHORD_SCREEN;
 80013fc:	4b62      	ldr	r3, [pc, #392]	; (8001588 <main+0x2e8>)
 80013fe:	2204      	movs	r2, #4
 8001400:	701a      	strb	r2, [r3, #0]
	  			popup_time = 2000;
 8001402:	4b62      	ldr	r3, [pc, #392]	; (800158c <main+0x2ec>)
 8001404:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001408:	601a      	str	r2, [r3, #0]
	  		break;
 800140a:	e011      	b.n	8001430 <main+0x190>
	  		case POPUP_SUSTAIN:
	  			pop_up_sustain();
 800140c:	f7ff fab0 	bl	8000970 <pop_up_sustain>
	  			popup_time = 2000;
 8001410:	4b5e      	ldr	r3, [pc, #376]	; (800158c <main+0x2ec>)
 8001412:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001416:	601a      	str	r2, [r3, #0]
	  		break;
 8001418:	e00a      	b.n	8001430 <main+0x190>
	  		case POPUP_CANCEL:
	  			pop_up_cancel();
 800141a:	f7ff fad5 	bl	80009c8 <pop_up_cancel>
	  			popup_time = 2000;
 800141e:	4b5b      	ldr	r3, [pc, #364]	; (800158c <main+0x2ec>)
 8001420:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001424:	601a      	str	r2, [r3, #0]
	  			last_screenNum = CHORD_SCREEN;
 8001426:	4b58      	ldr	r3, [pc, #352]	; (8001588 <main+0x2e8>)
 8001428:	2204      	movs	r2, #4
 800142a:	701a      	strb	r2, [r3, #0]
	  		break;
 800142c:	e000      	b.n	8001430 <main+0x190>
	  		default:
	  		break;
 800142e:	bf00      	nop
	  	}
	  	screenNum = NO_SCREEN;
 8001430:	4b54      	ldr	r3, [pc, #336]	; (8001584 <main+0x2e4>)
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]

	  	if (popup_timeUp){
 8001436:	4b57      	ldr	r3, [pc, #348]	; (8001594 <main+0x2f4>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00a      	beq.n	8001456 <main+0x1b6>
	  		if (screenNum == NO_SCREEN) screenNum = last_screenNum;
 8001440:	4b50      	ldr	r3, [pc, #320]	; (8001584 <main+0x2e4>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d103      	bne.n	8001450 <main+0x1b0>
 8001448:	4b4f      	ldr	r3, [pc, #316]	; (8001588 <main+0x2e8>)
 800144a:	781a      	ldrb	r2, [r3, #0]
 800144c:	4b4d      	ldr	r3, [pc, #308]	; (8001584 <main+0x2e4>)
 800144e:	701a      	strb	r2, [r3, #0]
	  		popup_timeUp = 0;
 8001450:	4b50      	ldr	r3, [pc, #320]	; (8001594 <main+0x2f4>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
	  	}

	  	//botones y teclas
	  	buttonFall = last_button & ~read_button;
 8001456:	4b50      	ldr	r3, [pc, #320]	; (8001598 <main+0x2f8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	43da      	mvns	r2, r3
 800145c:	4b4f      	ldr	r3, [pc, #316]	; (800159c <main+0x2fc>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4013      	ands	r3, r2
 8001462:	4a4f      	ldr	r2, [pc, #316]	; (80015a0 <main+0x300>)
 8001464:	6013      	str	r3, [r2, #0]
	  	buttonRise = ~last_button & read_button;
 8001466:	4b4d      	ldr	r3, [pc, #308]	; (800159c <main+0x2fc>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	43da      	mvns	r2, r3
 800146c:	4b4a      	ldr	r3, [pc, #296]	; (8001598 <main+0x2f8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4013      	ands	r3, r2
 8001472:	4a4c      	ldr	r2, [pc, #304]	; (80015a4 <main+0x304>)
 8001474:	6013      	str	r3, [r2, #0]
	  	if (GETBUTTONSTATUS(IN_BACK, buttonFall)){
 8001476:	4b4a      	ldr	r3, [pc, #296]	; (80015a0 <main+0x300>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147e:	2b00      	cmp	r3, #0
 8001480:	d005      	beq.n	800148e <main+0x1ee>
	  		screenNum = MAIN_SCREEN;
 8001482:	4b40      	ldr	r3, [pc, #256]	; (8001584 <main+0x2e4>)
 8001484:	2203      	movs	r2, #3
 8001486:	701a      	strb	r2, [r3, #0]
	  		menu = MAIN_SCREEN;
 8001488:	4b47      	ldr	r3, [pc, #284]	; (80015a8 <main+0x308>)
 800148a:	2203      	movs	r2, #3
 800148c:	701a      	strb	r2, [r3, #0]
	  	}
	  	if (GETBUTTONSTATUS(IN_SUST_PROP, buttonFall)){
 800148e:	4b44      	ldr	r3, [pc, #272]	; (80015a0 <main+0x300>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <main+0x1fe>
	  		sustainProp();
 800149a:	f000 f96f 	bl	800177c <sustainProp>
	  	}
	  	if (GETBUTTONSTATUS(IN_SUST_MIDI, buttonFall)){
 800149e:	4b40      	ldr	r3, [pc, #256]	; (80015a0 <main+0x300>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <main+0x20e>
	  		sustainMIDI();
 80014aa:	f000 f9d5 	bl	8001858 <sustainMIDI>
	  	}
	  	if (GETBUTTONSTATUS(IN_CHORD, buttonFall)){
 80014ae:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <main+0x300>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <main+0x21e>
	  		inputChord();
 80014ba:	f000 fa2f 	bl	800191c <inputChord>
	  	}
	  	inputOctave();
 80014be:	f000 fa89 	bl	80019d4 <inputOctave>
	  	if (GETBUTTONSTATUS(IN_TUNNE, buttonFall)){
 80014c2:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <main+0x300>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <main+0x232>
	  		inputTunne();
 80014ce:	f000 fac3 	bl	8001a58 <inputTunne>
	  	}
	  	inputPresets();
 80014d2:	f000 fadd 	bl	8001a90 <inputPresets>

	  	last_button = read_button;
 80014d6:	4b30      	ldr	r3, [pc, #192]	; (8001598 <main+0x2f8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a30      	ldr	r2, [pc, #192]	; (800159c <main+0x2fc>)
 80014dc:	6013      	str	r3, [r2, #0]
	  		default:
	  		break;
	  	}
	  	*/

	    switch (menu){ //manage the recuested menu function.
 80014de:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <main+0x308>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	3b03      	subs	r3, #3
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d81c      	bhi.n	8001522 <main+0x282>
 80014e8:	a201      	add	r2, pc, #4	; (adr r2, 80014f0 <main+0x250>)
 80014ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ee:	bf00      	nop
 80014f0:	08001505 	.word	0x08001505
 80014f4:	0800150b 	.word	0x0800150b
 80014f8:	08001515 	.word	0x08001515
 80014fc:	08001523 	.word	0x08001523
 8001500:	0800151f 	.word	0x0800151f
	    	case MAIN_SCREEN:
	    		inputNotes();
 8001504:	f000 fb06 	bl	8001b14 <inputNotes>
	    	break;
 8001508:	e00c      	b.n	8001524 <main+0x284>
	  		case CHORD_SCREEN:
	  			chordSelect();
 800150a:	f000 fc0d 	bl	8001d28 <chordSelect>
	  			inputNotes();
 800150e:	f000 fb01 	bl	8001b14 <inputNotes>
	  		break;
 8001512:	e007      	b.n	8001524 <main+0x284>
	  		case TUNNE_SCREEN:
	  			tunneSelect();
 8001514:	f000 fccc 	bl	8001eb0 <tunneSelect>
	  			inputNotes();
 8001518:	f000 fafc 	bl	8001b14 <inputNotes>
	  		break;
 800151c:	e002      	b.n	8001524 <main+0x284>
	  		case RECUEST_FOOTKEY_SCREEN:
	  			inputSaveChord(); // @suppress("No break at end of case")
 800151e:	f000 fbb1 	bl	8001c84 <inputSaveChord>
	  		default:
	  		break;
 8001522:	bf00      	nop

	    }

	    MIDI_SendCheck();
 8001524:	f00b fd56 	bl	800cfd4 <MIDI_SendCheck>

		if (flag_dac != 0){
 8001528:	4b20      	ldr	r3, [pc, #128]	; (80015ac <main+0x30c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d004      	beq.n	800153a <main+0x29a>
		  osc_dac_update();
 8001530:	f000 fe60 	bl	80021f4 <osc_dac_update>
		  flag_dac = 0;
 8001534:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <main+0x30c>)
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
		}


	    if (flag_tick != 0){
 800153a:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <main+0x310>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f43f af19 	beq.w	8001376 <main+0xd6>

	    	if (lcd_refresh_time != 0){
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <main+0x314>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d035      	beq.n	80015b8 <main+0x318>
	    		lcd_refresh_time--;
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <main+0x314>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	3b01      	subs	r3, #1
 8001552:	b2da      	uxtb	r2, r3
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <main+0x314>)
 8001556:	701a      	strb	r2, [r3, #0]
 8001558:	e033      	b.n	80015c2 <main+0x322>
 800155a:	bf00      	nop
 800155c:	200003f8 	.word	0x200003f8
 8001560:	40020c00 	.word	0x40020c00
 8001564:	20000780 	.word	0x20000780
 8001568:	20000818 	.word	0x20000818
 800156c:	200007d8 	.word	0x200007d8
 8001570:	20000450 	.word	0x20000450
 8001574:	2000076a 	.word	0x2000076a
 8001578:	20000464 	.word	0x20000464
 800157c:	2000076e 	.word	0x2000076e
 8001580:	20000408 	.word	0x20000408
 8001584:	20000391 	.word	0x20000391
 8001588:	2000008a 	.word	0x2000008a
 800158c:	20000394 	.word	0x20000394
 8001590:	20000768 	.word	0x20000768
 8001594:	20000398 	.word	0x20000398
 8001598:	20000070 	.word	0x20000070
 800159c:	20000074 	.word	0x20000074
 80015a0:	20000388 	.word	0x20000388
 80015a4:	2000038c 	.word	0x2000038c
 80015a8:	20000089 	.word	0x20000089
 80015ac:	2000039b 	.word	0x2000039b
 80015b0:	2000039a 	.word	0x2000039a
 80015b4:	2000008b 	.word	0x2000008b
	    	}else{
	    		lcd_upDate_IT();
 80015b8:	f7ff fe5a 	bl	8001270 <lcd_upDate_IT>
	    		lcd_refresh_time = 25;
 80015bc:	4b2d      	ldr	r3, [pc, #180]	; (8001674 <main+0x3d4>)
 80015be:	2219      	movs	r2, #25
 80015c0:	701a      	strb	r2, [r3, #0]
	    	}//end if lcd_refresh_time

	    	if (popup_time != 0){
 80015c2:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <main+0x3d8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00b      	beq.n	80015e2 <main+0x342>
				popup_time--;
 80015ca:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <main+0x3d8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	4a29      	ldr	r2, [pc, #164]	; (8001678 <main+0x3d8>)
 80015d2:	6013      	str	r3, [r2, #0]
				if (popup_time == 1) popup_timeUp = 1;
 80015d4:	4b28      	ldr	r3, [pc, #160]	; (8001678 <main+0x3d8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d102      	bne.n	80015e2 <main+0x342>
 80015dc:	4b27      	ldr	r3, [pc, #156]	; (800167c <main+0x3dc>)
 80015de:	2201      	movs	r2, #1
 80015e0:	701a      	strb	r2, [r3, #0]
			}//end if popup_time

	    	if (refresh_buttons != 0){
 80015e2:	4b27      	ldr	r3, [pc, #156]	; (8001680 <main+0x3e0>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d006      	beq.n	80015f8 <main+0x358>
	    		refresh_buttons--;
 80015ea:	4b25      	ldr	r3, [pc, #148]	; (8001680 <main+0x3e0>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b23      	ldr	r3, [pc, #140]	; (8001680 <main+0x3e0>)
 80015f4:	701a      	strb	r2, [r3, #0]
 80015f6:	e01c      	b.n	8001632 <main+0x392>
	    	}else{
//	    		last_button = read_button;
	    		spi_74HC165_receive((uint8_t *)&read_button, sizeof(read_button));
 80015f8:	2104      	movs	r1, #4
 80015fa:	4822      	ldr	r0, [pc, #136]	; (8001684 <main+0x3e4>)
 80015fc:	f7fe ff8c 	bl	8000518 <spi_74HC165_receive>

//	    		buttonFall = last_button & ~read_button;
//	    		buttonRise = ~last_button & read_button;

	    		leds_buffer = leds_octava | leds_presets | leds_resto;
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <main+0x3e8>)
 8001602:	881a      	ldrh	r2, [r3, #0]
 8001604:	4b21      	ldr	r3, [pc, #132]	; (800168c <main+0x3ec>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	4313      	orrs	r3, r2
 800160a:	b29a      	uxth	r2, r3
 800160c:	4b20      	ldr	r3, [pc, #128]	; (8001690 <main+0x3f0>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	4313      	orrs	r3, r2
 8001612:	b29a      	uxth	r2, r3
 8001614:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <main+0x3f4>)
 8001616:	801a      	strh	r2, [r3, #0]
	    		leds_buffer = ~leds_buffer; //pasa a logica negativa
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <main+0x3f4>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	43db      	mvns	r3, r3
 800161e:	b29a      	uxth	r2, r3
 8001620:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <main+0x3f4>)
 8001622:	801a      	strh	r2, [r3, #0]
	    		spi_74HC595_Transmit((uint8_t*) &leds_buffer, 2 /*bytes*/);
 8001624:	2102      	movs	r1, #2
 8001626:	481b      	ldr	r0, [pc, #108]	; (8001694 <main+0x3f4>)
 8001628:	f7fe ffd4 	bl	80005d4 <spi_74HC595_Transmit>
//	    			spi_74HC595_Transmit((uint8_t*) &buff_leds, 2);
//	    			__NOP();
//	    		}


	    		refresh_buttons = 20;
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <main+0x3e0>)
 800162e:	2214      	movs	r2, #20
 8001630:	701a      	strb	r2, [r3, #0]
	    	}

	    	if (refresh_adc != 0){
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <main+0x3f8>)
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d006      	beq.n	8001648 <main+0x3a8>
	    		refresh_adc--;
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <main+0x3f8>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	3b01      	subs	r3, #1
 8001640:	b29a      	uxth	r2, r3
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <main+0x3f8>)
 8001644:	801a      	strh	r2, [r3, #0]
 8001646:	e010      	b.n	800166a <main+0x3ca>
	    	}else{
	    		if (flag_adc != 0){
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <main+0x3fc>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d009      	beq.n	8001664 <main+0x3c4>

	    			set_nextPote();
 8001650:	f000 fefc 	bl	800244c <set_nextPote>

//	    			HAL_ADC_Start_IT(&hadc1);

	    			flag_adc = 0;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <main+0x3fc>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]

	    			refresh_adc = 500;
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <main+0x3f8>)
 800165c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001660:	801a      	strh	r2, [r3, #0]
 8001662:	e002      	b.n	800166a <main+0x3ca>
	    		}else{
	    			HAL_ADC_Start_IT(&hadc1);
 8001664:	480e      	ldr	r0, [pc, #56]	; (80016a0 <main+0x400>)
 8001666:	f001 fbe9 	bl	8002e3c <HAL_ADC_Start_IT>
	    		}
	    	}

	    	flag_tick = 0;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <main+0x404>)
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
	  switch (screenNum){
 8001670:	e681      	b.n	8001376 <main+0xd6>
 8001672:	bf00      	nop
 8001674:	2000008b 	.word	0x2000008b
 8001678:	20000394 	.word	0x20000394
 800167c:	20000398 	.word	0x20000398
 8001680:	20000078 	.word	0x20000078
 8001684:	20000070 	.word	0x20000070
 8001688:	2000076e 	.word	0x2000076e
 800168c:	2000076c 	.word	0x2000076c
 8001690:	20000774 	.word	0x20000774
 8001694:	2000076a 	.word	0x2000076a
 8001698:	2000006c 	.word	0x2000006c
 800169c:	20000385 	.word	0x20000385
 80016a0:	20000408 	.word	0x20000408
 80016a4:	2000039a 	.word	0x2000039a

080016a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b094      	sub	sp, #80	; 0x50
 80016ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ae:	f107 0320 	add.w	r3, r7, #32
 80016b2:	2230      	movs	r2, #48	; 0x30
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f00b ffd8 	bl	800d66c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	4b28      	ldr	r3, [pc, #160]	; (8001774 <SystemClock_Config+0xcc>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	4a27      	ldr	r2, [pc, #156]	; (8001774 <SystemClock_Config+0xcc>)
 80016d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016da:	6413      	str	r3, [r2, #64]	; 0x40
 80016dc:	4b25      	ldr	r3, [pc, #148]	; (8001774 <SystemClock_Config+0xcc>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e8:	2300      	movs	r3, #0
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	4b22      	ldr	r3, [pc, #136]	; (8001778 <SystemClock_Config+0xd0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a21      	ldr	r2, [pc, #132]	; (8001778 <SystemClock_Config+0xd0>)
 80016f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <SystemClock_Config+0xd0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001704:	2301      	movs	r3, #1
 8001706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800170e:	2302      	movs	r3, #2
 8001710:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001712:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001716:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001718:	2304      	movs	r3, #4
 800171a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800171c:	23a8      	movs	r3, #168	; 0xa8
 800171e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001720:	2302      	movs	r3, #2
 8001722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001724:	2307      	movs	r3, #7
 8001726:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001728:	f107 0320 	add.w	r3, r7, #32
 800172c:	4618      	mov	r0, r3
 800172e:	f005 ff67 	bl	8007600 <HAL_RCC_OscConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001738:	f000 fd38 	bl	80021ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800173c:	230f      	movs	r3, #15
 800173e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001740:	2302      	movs	r3, #2
 8001742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001748:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800174c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800174e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001752:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2105      	movs	r1, #5
 800175a:	4618      	mov	r0, r3
 800175c:	f006 f9c0 	bl	8007ae0 <HAL_RCC_ClockConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001766:	f000 fd21 	bl	80021ac <Error_Handler>
  }
}
 800176a:	bf00      	nop
 800176c:	3750      	adds	r7, #80	; 0x50
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	40007000 	.word	0x40007000

0800177c <sustainProp>:

/* USER CODE BEGIN 4 */

void sustainProp (void){
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0

		for (int j = 0; j <= 12; j++){
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	e00b      	b.n	80017a0 <sustainProp+0x24>
			sendChord(lastSendNote[j], 0, 1); // silents all notes
 8001788:	4a2c      	ldr	r2, [pc, #176]	; (800183c <sustainProp+0xc0>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001790:	2201      	movs	r2, #1
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f000 fbcd 	bl	8001f34 <sendChord>
		for (int j = 0; j <= 12; j++){
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3301      	adds	r3, #1
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b0c      	cmp	r3, #12
 80017a4:	ddf0      	ble.n	8001788 <sustainProp+0xc>
		}

		switch (sustainMode){
 80017a6:	4b26      	ldr	r3, [pc, #152]	; (8001840 <sustainProp+0xc4>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d029      	beq.n	8001802 <sustainProp+0x86>
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d002      	beq.n	80017b8 <sustainProp+0x3c>
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d010      	beq.n	80017d8 <sustainProp+0x5c>
 80017b6:	e039      	b.n	800182c <sustainProp+0xb0>
			case 2:
				//event = {0x0B, 0xB0 | MIDI_CHANNEL, 64, 0};
				//MidiUSB.sendMIDI(event);
				midi_msg[0] = 0x0B; //0x0B == type event (control change)
 80017b8:	4b22      	ldr	r3, [pc, #136]	; (8001844 <sustainProp+0xc8>)
 80017ba:	220b      	movs	r2, #11
 80017bc:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 80017be:	4b21      	ldr	r3, [pc, #132]	; (8001844 <sustainProp+0xc8>)
 80017c0:	22b1      	movs	r2, #177	; 0xb1
 80017c2:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	// 64 == sustain.
 80017c4:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <sustainProp+0xc8>)
 80017c6:	2240      	movs	r2, #64	; 0x40
 80017c8:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 0;
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <sustainProp+0xc8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4); // @suppress("No break at end of case")
 80017d0:	2104      	movs	r1, #4
 80017d2:	481c      	ldr	r0, [pc, #112]	; (8001844 <sustainProp+0xc8>)
 80017d4:	f00b fbc8 	bl	800cf68 <MIDI_SendBuffer>
			case 0:
				lastSustainNote = 0;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <sustainProp+0xcc>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
				sustainMode = 1; //prop
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <sustainProp+0xc4>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
				leds_resto |= 0x1 << LED_SUST_P;
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <sustainProp+0xd0>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <sustainProp+0xd0>)
 80017f0:	801a      	strh	r2, [r3, #0]
				leds_resto &= ~(0x1 << LED_SUST_M);
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <sustainProp+0xd0>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	f023 0302 	bic.w	r3, r3, #2
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <sustainProp+0xd0>)
 80017fe:	801a      	strh	r2, [r3, #0]
			break;
 8001800:	e014      	b.n	800182c <sustainProp+0xb0>

			case 1:
				sustainFlag = 1;
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <sustainProp+0xd4>)
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
				sustainMode = 0;
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <sustainProp+0xc4>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
				leds_resto &= ~(0x1 << LED_SUST_M);
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <sustainProp+0xd0>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	f023 0302 	bic.w	r3, r3, #2
 8001816:	b29a      	uxth	r2, r3
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <sustainProp+0xd0>)
 800181a:	801a      	strh	r2, [r3, #0]
				leds_resto &= ~(0x1 << LED_SUST_P);
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <sustainProp+0xd0>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	f023 0304 	bic.w	r3, r3, #4
 8001824:	b29a      	uxth	r2, r3
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <sustainProp+0xd0>)
 8001828:	801a      	strh	r2, [r3, #0]
			break;
 800182a:	bf00      	nop
		} //end switch

		screenNum = POPUP_SUSTAIN;
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <sustainProp+0xd8>)
 800182e:	220a      	movs	r2, #10
 8001830:	701a      	strb	r2, [r3, #0]

} //end sustainProp()
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000034c 	.word	0x2000034c
 8001840:	20000384 	.word	0x20000384
 8001844:	20000770 	.word	0x20000770
 8001848:	20000380 	.word	0x20000380
 800184c:	20000774 	.word	0x20000774
 8001850:	2000006a 	.word	0x2000006a
 8001854:	20000391 	.word	0x20000391

08001858 <sustainMIDI>:

void sustainMIDI (void){
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0

		switch (sustainMode){
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <sustainMIDI+0xb0>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db4b      	blt.n	80018fc <sustainMIDI+0xa4>
 8001864:	2b01      	cmp	r3, #1
 8001866:	dd02      	ble.n	800186e <sustainMIDI+0x16>
 8001868:	2b02      	cmp	r3, #2
 800186a:	d025      	beq.n	80018b8 <sustainMIDI+0x60>
 800186c:	e046      	b.n	80018fc <sustainMIDI+0xa4>
			case 0:
			case 1:
				sustainFlag = 1;	// needed to normal notes functioning.
 800186e:	4b27      	ldr	r3, [pc, #156]	; (800190c <sustainMIDI+0xb4>)
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]

				midi_msg[0] = 0x0B;		//0x0B == type event (control change),
 8001874:	4b26      	ldr	r3, [pc, #152]	; (8001910 <sustainMIDI+0xb8>)
 8001876:	220b      	movs	r2, #11
 8001878:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 800187a:	4b25      	ldr	r3, [pc, #148]	; (8001910 <sustainMIDI+0xb8>)
 800187c:	22b1      	movs	r2, #177	; 0xb1
 800187e:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	//64 == sustain.
 8001880:	4b23      	ldr	r3, [pc, #140]	; (8001910 <sustainMIDI+0xb8>)
 8001882:	2240      	movs	r2, #64	; 0x40
 8001884:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 127;
 8001886:	4b22      	ldr	r3, [pc, #136]	; (8001910 <sustainMIDI+0xb8>)
 8001888:	227f      	movs	r2, #127	; 0x7f
 800188a:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4);
 800188c:	2104      	movs	r1, #4
 800188e:	4820      	ldr	r0, [pc, #128]	; (8001910 <sustainMIDI+0xb8>)
 8001890:	f00b fb6a 	bl	800cf68 <MIDI_SendBuffer>

				sustainMode = 2;
 8001894:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <sustainMIDI+0xb0>)
 8001896:	2202      	movs	r2, #2
 8001898:	701a      	strb	r2, [r3, #0]
				leds_resto |= 0x1 << LED_SUST_M;
 800189a:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <sustainMIDI+0xbc>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	f043 0302 	orr.w	r3, r3, #2
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <sustainMIDI+0xbc>)
 80018a6:	801a      	strh	r2, [r3, #0]
				leds_resto &= ~(0x1 << LED_SUST_P);
 80018a8:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <sustainMIDI+0xbc>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	f023 0304 	bic.w	r3, r3, #4
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <sustainMIDI+0xbc>)
 80018b4:	801a      	strh	r2, [r3, #0]
			break;
 80018b6:	e021      	b.n	80018fc <sustainMIDI+0xa4>
			case 2:
				midi_msg[0] = 0x0B;	//0x0B == type event (control change)
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <sustainMIDI+0xb8>)
 80018ba:	220b      	movs	r2, #11
 80018bc:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <sustainMIDI+0xb8>)
 80018c0:	22b1      	movs	r2, #177	; 0xb1
 80018c2:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	//64 == sustain.
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <sustainMIDI+0xb8>)
 80018c6:	2240      	movs	r2, #64	; 0x40
 80018c8:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 0;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <sustainMIDI+0xb8>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4);
 80018d0:	2104      	movs	r1, #4
 80018d2:	480f      	ldr	r0, [pc, #60]	; (8001910 <sustainMIDI+0xb8>)
 80018d4:	f00b fb48 	bl	800cf68 <MIDI_SendBuffer>

				sustainMode = 0;
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <sustainMIDI+0xb0>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
				leds_resto &= ~(0x1 << LED_SUST_M);
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <sustainMIDI+0xbc>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	f023 0302 	bic.w	r3, r3, #2
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <sustainMIDI+0xbc>)
 80018ea:	801a      	strh	r2, [r3, #0]
				leds_resto &= ~(0x1 << LED_SUST_P);
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <sustainMIDI+0xbc>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	f023 0304 	bic.w	r3, r3, #4
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <sustainMIDI+0xbc>)
 80018f8:	801a      	strh	r2, [r3, #0]
			break;
 80018fa:	bf00      	nop
		} //end switch

		screenNum = POPUP_SUSTAIN;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <sustainMIDI+0xc0>)
 80018fe:	220a      	movs	r2, #10
 8001900:	701a      	strb	r2, [r3, #0]
} //end sustainMIDI()
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000384 	.word	0x20000384
 800190c:	2000006a 	.word	0x2000006a
 8001910:	20000770 	.word	0x20000770
 8001914:	20000774 	.word	0x20000774
 8001918:	20000391 	.word	0x20000391

0800191c <inputChord>:

void inputChord (void){
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

	switch (menu){
 8001920:	4b28      	ldr	r3, [pc, #160]	; (80019c4 <inputChord+0xa8>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b03      	cmp	r3, #3
 8001926:	d002      	beq.n	800192e <inputChord+0x12>
 8001928:	2b04      	cmp	r3, #4
 800192a:	d023      	beq.n	8001974 <inputChord+0x58>
 800192c:	e033      	b.n	8001996 <inputChord+0x7a>
		case MAIN_SCREEN:
			if (acorde != 0){
 800192e:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <inputChord+0xac>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00d      	beq.n	8001952 <inputChord+0x36>
				acorde = 0;
 8001936:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <inputChord+0xac>)
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
				leds_resto &= ~(0x1 << LED_CHORD);
 800193c:	4b23      	ldr	r3, [pc, #140]	; (80019cc <inputChord+0xb0>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	f023 0308 	bic.w	r3, r3, #8
 8001944:	b29a      	uxth	r2, r3
 8001946:	4b21      	ldr	r3, [pc, #132]	; (80019cc <inputChord+0xb0>)
 8001948:	801a      	strh	r2, [r3, #0]
				screenNum = MAIN_SCREEN;
 800194a:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <inputChord+0xb4>)
 800194c:	2203      	movs	r2, #3
 800194e:	701a      	strb	r2, [r3, #0]
				screenNum = CHORD_SCREEN;
				menu = CHORD_SCREEN;
				acorde = 1;
				leds_resto |= 0x1 << LED_CHORD;
			} //fin if acorde
		break;
 8001950:	e032      	b.n	80019b8 <inputChord+0x9c>
				screenNum = CHORD_SCREEN;
 8001952:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <inputChord+0xb4>)
 8001954:	2204      	movs	r2, #4
 8001956:	701a      	strb	r2, [r3, #0]
				menu = CHORD_SCREEN;
 8001958:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <inputChord+0xa8>)
 800195a:	2204      	movs	r2, #4
 800195c:	701a      	strb	r2, [r3, #0]
				acorde = 1;
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <inputChord+0xac>)
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
				leds_resto |= 0x1 << LED_CHORD;
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <inputChord+0xb0>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	f043 0308 	orr.w	r3, r3, #8
 800196c:	b29a      	uxth	r2, r3
 800196e:	4b17      	ldr	r3, [pc, #92]	; (80019cc <inputChord+0xb0>)
 8001970:	801a      	strh	r2, [r3, #0]
		break;
 8001972:	e021      	b.n	80019b8 <inputChord+0x9c>
		case CHORD_SCREEN:
			screenNum = MAIN_SCREEN;
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <inputChord+0xb4>)
 8001976:	2203      	movs	r2, #3
 8001978:	701a      	strb	r2, [r3, #0]
			menu = MAIN_SCREEN;
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <inputChord+0xa8>)
 800197c:	2203      	movs	r2, #3
 800197e:	701a      	strb	r2, [r3, #0]
			acorde = 0;
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <inputChord+0xac>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
			leds_resto &= ~(0x1 << LED_CHORD);
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <inputChord+0xb0>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	f023 0308 	bic.w	r3, r3, #8
 800198e:	b29a      	uxth	r2, r3
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <inputChord+0xb0>)
 8001992:	801a      	strh	r2, [r3, #0]
		break;
 8001994:	e010      	b.n	80019b8 <inputChord+0x9c>
		default:
			screenNum = CHORD_SCREEN;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <inputChord+0xb4>)
 8001998:	2204      	movs	r2, #4
 800199a:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN;
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <inputChord+0xa8>)
 800199e:	2204      	movs	r2, #4
 80019a0:	701a      	strb	r2, [r3, #0]
			acorde = 1;
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <inputChord+0xac>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	701a      	strb	r2, [r3, #0]
			leds_resto |= 0x1 << LED_CHORD;
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <inputChord+0xb0>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	f043 0308 	orr.w	r3, r3, #8
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <inputChord+0xb0>)
 80019b4:	801a      	strh	r2, [r3, #0]
		break;
 80019b6:	bf00      	nop
	} //fin switch menu

} //end inputChord()
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000089 	.word	0x20000089
 80019c8:	20000390 	.word	0x20000390
 80019cc:	20000774 	.word	0x20000774
 80019d0:	20000391 	.word	0x20000391

080019d4 <inputOctave>:


void inputOctave (void){
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

	if(GETBUTTONSTATUS(IN_OCT_G, buttonFall)){
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <inputOctave+0x74>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00b      	beq.n	80019fc <inputOctave+0x28>
		octava = -1;
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <inputOctave+0x78>)
 80019e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019ea:	601a      	str	r2, [r3, #0]
		screenNum=POPUP_OCTAVE;
 80019ec:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <inputOctave+0x7c>)
 80019ee:	2209      	movs	r2, #9
 80019f0:	701a      	strb	r2, [r3, #0]
		leds_octava = 0x1 << LED_OCT_G;
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <inputOctave+0x80>)
 80019f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f8:	801a      	strh	r2, [r3, #0]
		return;
 80019fa:	e021      	b.n	8001a40 <inputOctave+0x6c>
	}

	if (GETBUTTONSTATUS(IN_OCT_M, buttonFall)){
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <inputOctave+0x74>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00a      	beq.n	8001a1e <inputOctave+0x4a>
		octava = 0;
 8001a08:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <inputOctave+0x78>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
		screenNum=POPUP_OCTAVE;
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <inputOctave+0x7c>)
 8001a10:	2209      	movs	r2, #9
 8001a12:	701a      	strb	r2, [r3, #0]
		leds_octava = 0x1 << LED_OCT_M;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <inputOctave+0x80>)
 8001a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a1a:	801a      	strh	r2, [r3, #0]
		return;
 8001a1c:	e010      	b.n	8001a40 <inputOctave+0x6c>
	}

	if (GETBUTTONSTATUS(IN_OCT_A, buttonFall)){
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <inputOctave+0x74>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00a      	beq.n	8001a40 <inputOctave+0x6c>
		octava = 1;
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <inputOctave+0x78>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
		screenNum=POPUP_OCTAVE;
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <inputOctave+0x7c>)
 8001a32:	2209      	movs	r2, #9
 8001a34:	701a      	strb	r2, [r3, #0]
		leds_octava = 0x1 << LED_OCT_A;
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <inputOctave+0x80>)
 8001a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a3c:	801a      	strh	r2, [r3, #0]
		return;
 8001a3e:	bf00      	nop
	}
} //end inputOctave()
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	20000388 	.word	0x20000388
 8001a4c:	2000030c 	.word	0x2000030c
 8001a50:	20000391 	.word	0x20000391
 8001a54:	2000076e 	.word	0x2000076e

08001a58 <inputTunne>:


void inputTunne(void){
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

      if (menu != TUNNE_SCREEN){
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <inputTunne+0x30>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b05      	cmp	r3, #5
 8001a62:	d006      	beq.n	8001a72 <inputTunne+0x1a>
		screenNum = TUNNE_SCREEN;
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <inputTunne+0x34>)
 8001a66:	2205      	movs	r2, #5
 8001a68:	701a      	strb	r2, [r3, #0]
		menu = TUNNE_SCREEN;
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <inputTunne+0x30>)
 8001a6c:	2205      	movs	r2, #5
 8001a6e:	701a      	strb	r2, [r3, #0]
	  }else{
		screenNum = MAIN_SCREEN;
		menu = MAIN_SCREEN;
	  } //end  if menu

} //end inputTunne()
 8001a70:	e005      	b.n	8001a7e <inputTunne+0x26>
		screenNum = MAIN_SCREEN;
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <inputTunne+0x34>)
 8001a74:	2203      	movs	r2, #3
 8001a76:	701a      	strb	r2, [r3, #0]
		menu = MAIN_SCREEN;
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <inputTunne+0x30>)
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	701a      	strb	r2, [r3, #0]
} //end inputTunne()
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	20000089 	.word	0x20000089
 8001a8c:	20000391 	.word	0x20000391

08001a90 <inputPresets>:


void inputPresets (void){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++){                                         // 6 presets en total.
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	e02d      	b.n	8001af8 <inputPresets+0x68>

		if (GETBUTTONSTATUS(i + IN_PRESET0, buttonFall)){
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3308      	adds	r3, #8
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <inputPresets+0x78>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d01f      	beq.n	8001af2 <inputPresets+0x62>
			midi_msg[0] = 0x0C;	//0x0C == type event (program change)
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <inputPresets+0x7c>)
 8001ab4:	220c      	movs	r2, #12
 8001ab6:	701a      	strb	r2, [r3, #0]
			midi_msg[1] = 0xC0 | 1;
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <inputPresets+0x7c>)
 8001aba:	22c1      	movs	r2, #193	; 0xc1
 8001abc:	705a      	strb	r2, [r3, #1]
			midi_msg[2] = i;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <inputPresets+0x7c>)
 8001ac4:	709a      	strb	r2, [r3, #2]
			midi_msg[3] = 0;	//last param == 0 (unused in program change).
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <inputPresets+0x7c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	70da      	strb	r2, [r3, #3]
			MIDI_SendBuffer(midi_msg, 4);
 8001acc:	2104      	movs	r1, #4
 8001ace:	480f      	ldr	r0, [pc, #60]	; (8001b0c <inputPresets+0x7c>)
 8001ad0:	f00b fa4a 	bl	800cf68 <MIDI_SendBuffer>
			if (i == 5){
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b05      	cmp	r3, #5
 8001ad8:	d103      	bne.n	8001ae2 <inputPresets+0x52>
				leds_presets = 0x1;
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <inputPresets+0x80>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	801a      	strh	r2, [r3, #0]
 8001ae0:	e007      	b.n	8001af2 <inputPresets+0x62>
			}else{
				leds_presets = 0x1 << (LED_PS0 + i);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	330b      	adds	r3, #11
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <inputPresets+0x80>)
 8001af0:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 6; i++){                                         // 6 presets en total.
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3301      	adds	r3, #1
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	ddce      	ble.n	8001a9c <inputPresets+0xc>
			}
		} //end if GETBUTTONSTATUS

	} //end for

} //end inputPresets()
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000388 	.word	0x20000388
 8001b0c:	20000770 	.word	0x20000770
 8001b10:	2000076c 	.word	0x2000076c

08001b14 <inputNotes>:


void inputNotes(void){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0

  uint8_t pressedNote;

  for (int i = 0; i <= 12; i++){
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	e094      	b.n	8001c4a <inputNotes+0x136>

//    buttonState[i + IN_DO] = HAL_GPIO_ReadPin(notePort_list[i], notePin_list[i]); //read current button pin.

//    if(!buttonState[i + IN_DO] && lastState[i + IN_DO]){  // If we read 1, and the last time we read 0, means button was just pressed.
    if (GETBUTTONSTATUS(teclas[i], buttonFall)){
 8001b20:	4a4e      	ldr	r2, [pc, #312]	; (8001c5c <inputNotes+0x148>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	4093      	lsls	r3, r2
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b4b      	ldr	r3, [pc, #300]	; (8001c60 <inputNotes+0x14c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d067      	beq.n	8001c0a <inputNotes+0xf6>
        pressedNote = firstDoTunning + i + 12 * octava; //detects the pressed note.
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4b49      	ldr	r3, [pc, #292]	; (8001c64 <inputNotes+0x150>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4b48      	ldr	r3, [pc, #288]	; (8001c68 <inputNotes+0x154>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	0049      	lsls	r1, r1, #1
 8001b50:	440b      	add	r3, r1
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	70fb      	strb	r3, [r7, #3]

    	if (acorde){ //If chord mode is on...
 8001b5a:	4b44      	ldr	r3, [pc, #272]	; (8001c6c <inputNotes+0x158>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00c      	beq.n	8001b7c <inputNotes+0x68>
            lastSendNote[i] = makeChord(pressedNote, i); // saves the current chord config. on pressed note.
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fd5a 	bl	8000624 <makeChord>
 8001b70:	4601      	mov	r1, r0
 8001b72:	4a3f      	ldr	r2, [pc, #252]	; (8001c70 <inputNotes+0x15c>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001b7a:	e004      	b.n	8001b86 <inputNotes+0x72>

        }else{ //If chord mode is off...

            lastSendNote[i] = pressedNote; // saves nothing but pressed note.
 8001b7c:	78fa      	ldrb	r2, [r7, #3]
 8001b7e:	493c      	ldr	r1, [pc, #240]	; (8001c70 <inputNotes+0x15c>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        } //end if acorde


        if (sustainMode == 1){ // If proprietary sustain mode on...
 8001b86:	4b3b      	ldr	r3, [pc, #236]	; (8001c74 <inputNotes+0x160>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d122      	bne.n	8001bd4 <inputNotes+0xc0>

			if (lastSustainNote != lastSendNote[i]){ // If last sustained note differs from the current pressed one...
 8001b8e:	4a38      	ldr	r2, [pc, #224]	; (8001c70 <inputNotes+0x15c>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b96:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <inputNotes+0x164>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d010      	beq.n	8001bc0 <inputNotes+0xac>

				sendChord(lastSustainNote, 0, 1); // mute current chord. 0 in second param means "noteOff".
 8001b9e:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <inputNotes+0x164>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f9c4 	bl	8001f34 <sendChord>
				lastSustainNote = lastSendNote[i]; // and saves the current sustained note.
 8001bac:	4a30      	ldr	r2, [pc, #192]	; (8001c70 <inputNotes+0x15c>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb4:	4a30      	ldr	r2, [pc, #192]	; (8001c78 <inputNotes+0x164>)
 8001bb6:	6013      	str	r3, [r2, #0]
				sustainFlag = 1; // turn sustained note on
 8001bb8:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <inputNotes+0x168>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]
 8001bbe:	e009      	b.n	8001bd4 <inputNotes+0xc0>

			}else{ // If last sustained note and the current pressed one are the same...

				sustainFlag = !sustainFlag; // turn sustained note off.
 8001bc0:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <inputNotes+0x168>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf0c      	ite	eq
 8001bc8:	2301      	moveq	r3, #1
 8001bca:	2300      	movne	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <inputNotes+0x168>)
 8001bd2:	701a      	strb	r2, [r3, #0]

			}//end if lastSustainNote...
        }//end if sustainMode


        sendChord(lastSendNote[i], 127 * sustainFlag, 1); //send the appropriate midi message.
 8001bd4:	4a26      	ldr	r2, [pc, #152]	; (8001c70 <inputNotes+0x15c>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001bdc:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <inputNotes+0x168>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4613      	mov	r3, r2
 8001be4:	01db      	lsls	r3, r3, #7
 8001be6:	1a9b      	subs	r3, r3, r2
 8001be8:	2201      	movs	r2, #1
 8001bea:	4619      	mov	r1, r3
 8001bec:	f000 f9a2 	bl	8001f34 <sendChord>

        if (sustainFlag != 0){
 8001bf0:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <inputNotes+0x168>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d004      	beq.n	8001c02 <inputNotes+0xee>
        	osc_setNote(pressedNote);
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 fb8e 	bl	800231c <osc_setNote>
 8001c00:	e020      	b.n	8001c44 <inputNotes+0x130>
        }else{
        	osc_setNote(0);
 8001c02:	2000      	movs	r0, #0
 8001c04:	f000 fb8a 	bl	800231c <osc_setNote>
 8001c08:	e01c      	b.n	8001c44 <inputNotes+0x130>
        }

    }else if(GETBUTTONSTATUS(teclas[i], buttonRise)){
 8001c0a:	4a14      	ldr	r2, [pc, #80]	; (8001c5c <inputNotes+0x148>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4413      	add	r3, r2
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	2301      	movs	r3, #1
 8001c16:	4093      	lsls	r3, r2
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <inputNotes+0x16c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00f      	beq.n	8001c44 <inputNotes+0x130>

    	if (sustainMode != 1){ // If proprietary sustain mode off...
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <inputNotes+0x160>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d00b      	beq.n	8001c44 <inputNotes+0x130>
			sendChord(lastSendNote[i], 0, 1); // 0 in second param means "noteOff".
 8001c2c:	4a10      	ldr	r2, [pc, #64]	; (8001c70 <inputNotes+0x15c>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c34:	2201      	movs	r2, #1
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 f97b 	bl	8001f34 <sendChord>
			osc_setNote(0); // turn DAC off.
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f000 fb6c 	bl	800231c <osc_setNote>
  for (int i = 0; i <= 12; i++){
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3301      	adds	r3, #1
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b0c      	cmp	r3, #12
 8001c4e:	f77f af67 	ble.w	8001b20 <inputNotes+0xc>
        }
    }

  }
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	2000007c 	.word	0x2000007c
 8001c60:	20000388 	.word	0x20000388
 8001c64:	200003f8 	.word	0x200003f8
 8001c68:	2000030c 	.word	0x2000030c
 8001c6c:	20000390 	.word	0x20000390
 8001c70:	2000034c 	.word	0x2000034c
 8001c74:	20000384 	.word	0x20000384
 8001c78:	20000380 	.word	0x20000380
 8001c7c:	2000006a 	.word	0x2000006a
 8001c80:	2000038c 	.word	0x2000038c

08001c84 <inputSaveChord>:


void inputSaveChord(void){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0

uint8_t flag = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	71fb      	strb	r3, [r7, #7]

	for (int i = 0; i <= 12; i++){
 8001c8e:	2300      	movs	r3, #0
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	e024      	b.n	8001cde <inputSaveChord+0x5a>

//		buttonState[i + IN_DO] = HAL_GPIO_ReadPin(notePort_list[i], notePin_list[i]);

//		if(!buttonState[i + IN_DO] && lastState[i + IN_DO]){       // If we read 1, and the last time we read 0, means button was just pressed
		if (GETBUTTONSTATUS(teclas[i], buttonFall)){
 8001c94:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <inputSaveChord+0x8c>)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	4413      	add	r3, r2
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <inputSaveChord+0x90>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d014      	beq.n	8001cd8 <inputSaveChord+0x54>

			//storing the selected chord:
			setChord(i);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fcd8 	bl	8000668 <setChord>
			footKey = NORMAL;
 8001cb8:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <inputSaveChord+0x94>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
			screenNum = POPUP_SAVED_CHORD;
 8001cbe:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <inputSaveChord+0x98>)
 8001cc0:	2208      	movs	r2, #8
 8001cc2:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN; 				//return point to chordSelect().
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <inputSaveChord+0x9c>)
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	701a      	strb	r2, [r3, #0]
			lastKey_pos = i; 					// to show in screen the foot key pressed.
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <inputSaveChord+0xa0>)
 8001cd0:	701a      	strb	r2, [r3, #0]
			flag = 1;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	71fb      	strb	r3, [r7, #7]
			break; 								 //it must exit from function.
 8001cd6:	e005      	b.n	8001ce4 <inputSaveChord+0x60>
	for (int i = 0; i <= 12; i++){
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2b0c      	cmp	r3, #12
 8001ce2:	ddd7      	ble.n	8001c94 <inputSaveChord+0x10>
		} //end if getStatusButton
	} //end for

	if (!flag){
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10e      	bne.n	8001d08 <inputSaveChord+0x84>


		if (GETBUTTONSTATUS(IN_LEFT, buttonFall)){
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <inputSaveChord+0x90>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d008      	beq.n	8001d08 <inputSaveChord+0x84>
			footKey = NORMAL;
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <inputSaveChord+0x94>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
			screenNum = POPUP_CANCEL;
 8001cfc:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <inputSaveChord+0x98>)
 8001cfe:	220b      	movs	r2, #11
 8001d00:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN;
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <inputSaveChord+0x9c>)
 8001d04:	2204      	movs	r2, #4
 8001d06:	701a      	strb	r2, [r3, #0]
		}
	} //end if !flag

} //end inputSaveChord()
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	2000007c 	.word	0x2000007c
 8001d14:	20000388 	.word	0x20000388
 8001d18:	20000399 	.word	0x20000399
 8001d1c:	20000391 	.word	0x20000391
 8001d20:	20000089 	.word	0x20000089
 8001d24:	20000768 	.word	0x20000768

08001d28 <chordSelect>:

void chordSelect(void){
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0

  uint8_t flag = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	71fb      	strb	r3, [r7, #7]

  switch (chordSelect_cursor){
 8001d32:	4b58      	ldr	r3, [pc, #352]	; (8001e94 <chordSelect+0x16c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d03a      	beq.n	8001db0 <chordSelect+0x88>
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d302      	bcc.n	8001d44 <chordSelect+0x1c>
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d079      	beq.n	8001e36 <chordSelect+0x10e>
 8001d42:	e09a      	b.n	8001e7a <chordSelect+0x152>

		case 0:

			if (GETBUTTONSTATUS(IN_DOWN, buttonFall)){
 8001d44:	4b54      	ldr	r3, [pc, #336]	; (8001e98 <chordSelect+0x170>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <chordSelect+0x36>
				chordSelect_cursor++;
 8001d50:	4b50      	ldr	r3, [pc, #320]	; (8001e94 <chordSelect+0x16c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	3301      	adds	r3, #1
 8001d56:	4a4f      	ldr	r2, [pc, #316]	; (8001e94 <chordSelect+0x16c>)
 8001d58:	6013      	str	r3, [r2, #0]
				flag = 1;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_LEFT, buttonFall)){
 8001d5e:	4b4e      	ldr	r3, [pc, #312]	; (8001e98 <chordSelect+0x170>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0310 	and.w	r3, r3, #16
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00d      	beq.n	8001d86 <chordSelect+0x5e>
				chord--;
 8001d6a:	4b4c      	ldr	r3, [pc, #304]	; (8001e9c <chordSelect+0x174>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	4a4a      	ldr	r2, [pc, #296]	; (8001e9c <chordSelect+0x174>)
 8001d72:	6013      	str	r3, [r2, #0]
				if (chord < 0)
 8001d74:	4b49      	ldr	r3, [pc, #292]	; (8001e9c <chordSelect+0x174>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	da02      	bge.n	8001d82 <chordSelect+0x5a>
					chord = 7;
 8001d7c:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <chordSelect+0x174>)
 8001d7e:	2207      	movs	r2, #7
 8001d80:	601a      	str	r2, [r3, #0]
				flag = 1;
 8001d82:	2301      	movs	r3, #1
 8001d84:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_RIGHT, buttonFall)){
 8001d86:	4b44      	ldr	r3, [pc, #272]	; (8001e98 <chordSelect+0x170>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d06e      	beq.n	8001e70 <chordSelect+0x148>
				chord++;
 8001d92:	4b42      	ldr	r3, [pc, #264]	; (8001e9c <chordSelect+0x174>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	3301      	adds	r3, #1
 8001d98:	4a40      	ldr	r2, [pc, #256]	; (8001e9c <chordSelect+0x174>)
 8001d9a:	6013      	str	r3, [r2, #0]
				if (chord > 7)
 8001d9c:	4b3f      	ldr	r3, [pc, #252]	; (8001e9c <chordSelect+0x174>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b07      	cmp	r3, #7
 8001da2:	dd02      	ble.n	8001daa <chordSelect+0x82>
					chord = 0;
 8001da4:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <chordSelect+0x174>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
				flag = 1;
 8001daa:	2301      	movs	r3, #1
 8001dac:	71fb      	strb	r3, [r7, #7]
			}

		break;
 8001dae:	e05f      	b.n	8001e70 <chordSelect+0x148>
		case 1:

			if (GETBUTTONSTATUS(IN_UP, buttonFall)){
 8001db0:	4b39      	ldr	r3, [pc, #228]	; (8001e98 <chordSelect+0x170>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d006      	beq.n	8001dca <chordSelect+0xa2>
				chordSelect_cursor--;
 8001dbc:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <chordSelect+0x16c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	4a34      	ldr	r2, [pc, #208]	; (8001e94 <chordSelect+0x16c>)
 8001dc4:	6013      	str	r3, [r2, #0]
				flag = 1;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_DOWN, buttonFall)){
 8001dca:	4b33      	ldr	r3, [pc, #204]	; (8001e98 <chordSelect+0x170>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d006      	beq.n	8001de4 <chordSelect+0xbc>
				chordSelect_cursor++;
 8001dd6:	4b2f      	ldr	r3, [pc, #188]	; (8001e94 <chordSelect+0x16c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	4a2d      	ldr	r2, [pc, #180]	; (8001e94 <chordSelect+0x16c>)
 8001dde:	6013      	str	r3, [r2, #0]
				flag = 1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_LEFT, buttonFall)){
 8001de4:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <chordSelect+0x170>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00d      	beq.n	8001e0c <chordSelect+0xe4>
				chordInv--;
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <chordSelect+0x178>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	4a2a      	ldr	r2, [pc, #168]	; (8001ea0 <chordSelect+0x178>)
 8001df8:	6013      	str	r3, [r2, #0]
				if (chordInv < 0)
 8001dfa:	4b29      	ldr	r3, [pc, #164]	; (8001ea0 <chordSelect+0x178>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da02      	bge.n	8001e08 <chordSelect+0xe0>
					chordInv = 2;
 8001e02:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <chordSelect+0x178>)
 8001e04:	2202      	movs	r2, #2
 8001e06:	601a      	str	r2, [r3, #0]
				flag = 1;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_RIGHT, buttonFall)){
 8001e0c:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <chordSelect+0x170>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d02d      	beq.n	8001e74 <chordSelect+0x14c>
				chordInv++;
 8001e18:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <chordSelect+0x178>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	4a20      	ldr	r2, [pc, #128]	; (8001ea0 <chordSelect+0x178>)
 8001e20:	6013      	str	r3, [r2, #0]
				if (chordInv > 2)
 8001e22:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <chordSelect+0x178>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	dd02      	ble.n	8001e30 <chordSelect+0x108>
					chordInv = 0;
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <chordSelect+0x178>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
				flag = 1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	71fb      	strb	r3, [r7, #7]
			}

		break;
 8001e34:	e01e      	b.n	8001e74 <chordSelect+0x14c>
		case 2:

			if (GETBUTTONSTATUS(IN_UP, buttonFall)){
 8001e36:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <chordSelect+0x170>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d006      	beq.n	8001e50 <chordSelect+0x128>
				chordSelect_cursor--;
 8001e42:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <chordSelect+0x16c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <chordSelect+0x16c>)
 8001e4a:	6013      	str	r3, [r2, #0]
				flag = 1;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	71fb      	strb	r3, [r7, #7]
			}
			if (GETBUTTONSTATUS(IN_RIGHT, buttonFall)){
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <chordSelect+0x170>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0320 	and.w	r3, r3, #32
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00d      	beq.n	8001e78 <chordSelect+0x150>
				footKey = SAVE_CHORD; //
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <chordSelect+0x17c>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
				menu = RECUEST_FOOTKEY_SCREEN;
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <chordSelect+0x180>)
 8001e64:	2207      	movs	r2, #7
 8001e66:	701a      	strb	r2, [r3, #0]
				screenNum = RECUEST_FOOTKEY_SCREEN;
 8001e68:	4b10      	ldr	r3, [pc, #64]	; (8001eac <chordSelect+0x184>)
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	701a      	strb	r2, [r3, #0]
			}

		break;
 8001e6e:	e003      	b.n	8001e78 <chordSelect+0x150>
		break;
 8001e70:	bf00      	nop
 8001e72:	e002      	b.n	8001e7a <chordSelect+0x152>
		break;
 8001e74:	bf00      	nop
 8001e76:	e000      	b.n	8001e7a <chordSelect+0x152>
		break;
 8001e78:	bf00      	nop
	} //fin switch chordSelect_cursor

  if (flag){        ///flag de impresion
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <chordSelect+0x15e>

      screenNum = CHORD_SCREEN;
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <chordSelect+0x184>)
 8001e82:	2204      	movs	r2, #4
 8001e84:	701a      	strb	r2, [r3, #0]
  }
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	200003f4 	.word	0x200003f4
 8001e98:	20000388 	.word	0x20000388
 8001e9c:	200003fc 	.word	0x200003fc
 8001ea0:	20000400 	.word	0x20000400
 8001ea4:	20000399 	.word	0x20000399
 8001ea8:	20000089 	.word	0x20000089
 8001eac:	20000391 	.word	0x20000391

08001eb0 <tunneSelect>:


void tunneSelect(void){
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
	uint8_t flag = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	71fb      	strb	r3, [r7, #7]

	if (GETBUTTONSTATUS(IN_LEFT, buttonFall)){
 8001eba:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <tunneSelect+0x78>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00e      	beq.n	8001ee4 <tunneSelect+0x34>
		firstDoTunning--;
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <tunneSelect+0x7c>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <tunneSelect+0x7c>)
 8001ed0:	701a      	strb	r2, [r3, #0]
		if (firstDoTunning < MIDI_C2)
 8001ed2:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <tunneSelect+0x7c>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b23      	cmp	r3, #35	; 0x23
 8001ed8:	d802      	bhi.n	8001ee0 <tunneSelect+0x30>
			firstDoTunning = MIDI_B2;
 8001eda:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <tunneSelect+0x7c>)
 8001edc:	222f      	movs	r2, #47	; 0x2f
 8001ede:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	71fb      	strb	r3, [r7, #7]
	}
	if (GETBUTTONSTATUS(IN_RIGHT, buttonFall)){
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <tunneSelect+0x78>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0320 	and.w	r3, r3, #32
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00e      	beq.n	8001f0e <tunneSelect+0x5e>
		firstDoTunning++;
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <tunneSelect+0x7c>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <tunneSelect+0x7c>)
 8001efa:	701a      	strb	r2, [r3, #0]
		if (firstDoTunning >MIDI_B2)
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <tunneSelect+0x7c>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b2f      	cmp	r3, #47	; 0x2f
 8001f02:	d902      	bls.n	8001f0a <tunneSelect+0x5a>
			firstDoTunning = MIDI_C2;
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <tunneSelect+0x7c>)
 8001f06:	2224      	movs	r2, #36	; 0x24
 8001f08:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	71fb      	strb	r3, [r7, #7]
	}

	if (flag){
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <tunneSelect+0x6a>
		screenNum = TUNNE_SCREEN;
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <tunneSelect+0x80>)
 8001f16:	2205      	movs	r2, #5
 8001f18:	701a      	strb	r2, [r3, #0]
	}
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20000388 	.word	0x20000388
 8001f2c:	200003f8 	.word	0x200003f8
 8001f30:	20000391 	.word	0x20000391

08001f34 <sendChord>:


void sendChord(unsigned long bnotes, int velocity, int channel){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]

  uint8_t note1;
  uint8_t note2;
  uint8_t note3;

  note1 = (bnotes & 0x7f);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f48:	75fb      	strb	r3, [r7, #23]
  note2 = (bnotes >> 8) & 0x7f;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f54:	75bb      	strb	r3, [r7, #22]
  note3 = (bnotes >> 16) & 0x7f;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f60:	757b      	strb	r3, [r7, #21]

  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001f62:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <sendChord+0xa8>)
 8001f64:	2209      	movs	r2, #9
 8001f66:	701a      	strb	r2, [r3, #0]
  midi_msg[1] = 0x90 | 1;
 8001f68:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <sendChord+0xa8>)
 8001f6a:	2291      	movs	r2, #145	; 0x91
 8001f6c:	705a      	strb	r2, [r3, #1]
  midi_msg[2] = note1;
 8001f6e:	4a1b      	ldr	r2, [pc, #108]	; (8001fdc <sendChord+0xa8>)
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
 8001f72:	7093      	strb	r3, [r2, #2]
  midi_msg[3] = velocity;
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <sendChord+0xa8>)
 8001f7a:	70da      	strb	r2, [r3, #3]
  MIDI_SendBuffer(midi_msg, 4);
 8001f7c:	2104      	movs	r1, #4
 8001f7e:	4817      	ldr	r0, [pc, #92]	; (8001fdc <sendChord+0xa8>)
 8001f80:	f00a fff2 	bl	800cf68 <MIDI_SendBuffer>

  if (note2 && note3){
 8001f84:	7dbb      	ldrb	r3, [r7, #22]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d024      	beq.n	8001fd4 <sendChord+0xa0>
 8001f8a:	7d7b      	ldrb	r3, [r7, #21]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d021      	beq.n	8001fd4 <sendChord+0xa0>

	  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <sendChord+0xa8>)
 8001f92:	2209      	movs	r2, #9
 8001f94:	701a      	strb	r2, [r3, #0]
	  midi_msg[1] = 0x90 | 1;
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <sendChord+0xa8>)
 8001f98:	2291      	movs	r2, #145	; 0x91
 8001f9a:	705a      	strb	r2, [r3, #1]
	  midi_msg[2] = note2;
 8001f9c:	4a0f      	ldr	r2, [pc, #60]	; (8001fdc <sendChord+0xa8>)
 8001f9e:	7dbb      	ldrb	r3, [r7, #22]
 8001fa0:	7093      	strb	r3, [r2, #2]
	  midi_msg[3] = velocity;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <sendChord+0xa8>)
 8001fa8:	70da      	strb	r2, [r3, #3]
	  MIDI_SendBuffer(midi_msg, 4);
 8001faa:	2104      	movs	r1, #4
 8001fac:	480b      	ldr	r0, [pc, #44]	; (8001fdc <sendChord+0xa8>)
 8001fae:	f00a ffdb 	bl	800cf68 <MIDI_SendBuffer>

	  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <sendChord+0xa8>)
 8001fb4:	2209      	movs	r2, #9
 8001fb6:	701a      	strb	r2, [r3, #0]
	  midi_msg[1] = 0x90 | 1;
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <sendChord+0xa8>)
 8001fba:	2291      	movs	r2, #145	; 0x91
 8001fbc:	705a      	strb	r2, [r3, #1]
	  midi_msg[2] = note3;
 8001fbe:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <sendChord+0xa8>)
 8001fc0:	7d7b      	ldrb	r3, [r7, #21]
 8001fc2:	7093      	strb	r3, [r2, #2]
	  midi_msg[3] = velocity;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <sendChord+0xa8>)
 8001fca:	70da      	strb	r2, [r3, #3]
	  MIDI_SendBuffer(midi_msg, 4);
 8001fcc:	2104      	movs	r1, #4
 8001fce:	4803      	ldr	r0, [pc, #12]	; (8001fdc <sendChord+0xa8>)
 8001fd0:	f00a ffca 	bl	800cf68 <MIDI_SendBuffer>
  }
} //fin sendChord()
 8001fd4:	bf00      	nop
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000770 	.word	0x20000770

08001fe0 <showLeds>:


void showLeds(void){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0

	uint16_t demora = 50;
 8001fe6:	2332      	movs	r3, #50	; 0x32
 8001fe8:	82bb      	strh	r3, [r7, #20]
	uint8_t posLed[] = {	LED_OCT_G,
 8001fea:	4a51      	ldr	r2, [pc, #324]	; (8002130 <showLeds+0x150>)
 8001fec:	f107 0308 	add.w	r3, r7, #8
 8001ff0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ff2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
							LED_PS5,
							LED_SUST_P,
							LED_SUST_M,
							LED_CHORD };

	uint16_t indexLed = 0x1 << LED_OCT_G;
 8001ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ffa:	80fb      	strh	r3, [r7, #6]
	indexLed = ~indexLed;
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	b29b      	uxth	r3, r3
 8002002:	80fb      	strh	r3, [r7, #6]
	spi_74HC595_Transmit((uint8_t *)&indexLed, 2/*bytes*/);
 8002004:	1dbb      	adds	r3, r7, #6
 8002006:	2102      	movs	r1, #2
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fae3 	bl	80005d4 <spi_74HC595_Transmit>
	HAL_Delay(demora);
 800200e:	8abb      	ldrh	r3, [r7, #20]
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fe7b 	bl	8002d0c <HAL_Delay>

	indexLed = (0x1 << posLed[0]) | (0x1 << posLed[1]);
 8002016:	7a3b      	ldrb	r3, [r7, #8]
 8002018:	461a      	mov	r2, r3
 800201a:	2301      	movs	r3, #1
 800201c:	4093      	lsls	r3, r2
 800201e:	b21a      	sxth	r2, r3
 8002020:	7a7b      	ldrb	r3, [r7, #9]
 8002022:	4619      	mov	r1, r3
 8002024:	2301      	movs	r3, #1
 8002026:	408b      	lsls	r3, r1
 8002028:	b21b      	sxth	r3, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	b21b      	sxth	r3, r3
 800202e:	b29b      	uxth	r3, r3
 8002030:	80fb      	strh	r3, [r7, #6]
	indexLed = ~indexLed;
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	43db      	mvns	r3, r3
 8002036:	b29b      	uxth	r3, r3
 8002038:	80fb      	strh	r3, [r7, #6]
	spi_74HC595_Transmit((uint8_t *)&indexLed, 2/*bytes*/);
 800203a:	1dbb      	adds	r3, r7, #6
 800203c:	2102      	movs	r1, #2
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fac8 	bl	80005d4 <spi_74HC595_Transmit>
	HAL_Delay(demora);
 8002044:	8abb      	ldrh	r3, [r7, #20]
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fe60 	bl	8002d0c <HAL_Delay>

	for (uint8_t i=0; i<10; i++){
 800204c:	2300      	movs	r3, #0
 800204e:	75fb      	strb	r3, [r7, #23]
 8002050:	e035      	b.n	80020be <showLeds+0xde>
		indexLed = (0x1 << posLed[i]) | (0x1 << posLed[i + 1]) | (0x1 << posLed[i + 2]);
 8002052:	7dfb      	ldrb	r3, [r7, #23]
 8002054:	f107 0218 	add.w	r2, r7, #24
 8002058:	4413      	add	r3, r2
 800205a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800205e:	461a      	mov	r2, r3
 8002060:	2301      	movs	r3, #1
 8002062:	4093      	lsls	r3, r2
 8002064:	b21a      	sxth	r2, r3
 8002066:	7dfb      	ldrb	r3, [r7, #23]
 8002068:	3301      	adds	r3, #1
 800206a:	f107 0118 	add.w	r1, r7, #24
 800206e:	440b      	add	r3, r1
 8002070:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002074:	4619      	mov	r1, r3
 8002076:	2301      	movs	r3, #1
 8002078:	408b      	lsls	r3, r1
 800207a:	b21b      	sxth	r3, r3
 800207c:	4313      	orrs	r3, r2
 800207e:	b21a      	sxth	r2, r3
 8002080:	7dfb      	ldrb	r3, [r7, #23]
 8002082:	3302      	adds	r3, #2
 8002084:	f107 0118 	add.w	r1, r7, #24
 8002088:	440b      	add	r3, r1
 800208a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800208e:	4619      	mov	r1, r3
 8002090:	2301      	movs	r3, #1
 8002092:	408b      	lsls	r3, r1
 8002094:	b21b      	sxth	r3, r3
 8002096:	4313      	orrs	r3, r2
 8002098:	b21b      	sxth	r3, r3
 800209a:	b29b      	uxth	r3, r3
 800209c:	80fb      	strh	r3, [r7, #6]
		indexLed = ~indexLed;
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	80fb      	strh	r3, [r7, #6]
		spi_74HC595_Transmit((uint8_t *)&indexLed, 2/*bytes*/);
 80020a6:	1dbb      	adds	r3, r7, #6
 80020a8:	2102      	movs	r1, #2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fa92 	bl	80005d4 <spi_74HC595_Transmit>
		HAL_Delay(demora);
 80020b0:	8abb      	ldrh	r3, [r7, #20]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 fe2a 	bl	8002d0c <HAL_Delay>
	for (uint8_t i=0; i<10; i++){
 80020b8:	7dfb      	ldrb	r3, [r7, #23]
 80020ba:	3301      	adds	r3, #1
 80020bc:	75fb      	strb	r3, [r7, #23]
 80020be:	7dfb      	ldrb	r3, [r7, #23]
 80020c0:	2b09      	cmp	r3, #9
 80020c2:	d9c6      	bls.n	8002052 <showLeds+0x72>
	}

	indexLed = (0x1 << posLed[10]) | (0x1 << posLed[11]);
 80020c4:	7cbb      	ldrb	r3, [r7, #18]
 80020c6:	461a      	mov	r2, r3
 80020c8:	2301      	movs	r3, #1
 80020ca:	4093      	lsls	r3, r2
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	7cfb      	ldrb	r3, [r7, #19]
 80020d0:	4619      	mov	r1, r3
 80020d2:	2301      	movs	r3, #1
 80020d4:	408b      	lsls	r3, r1
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	4313      	orrs	r3, r2
 80020da:	b21b      	sxth	r3, r3
 80020dc:	b29b      	uxth	r3, r3
 80020de:	80fb      	strh	r3, [r7, #6]
	indexLed = ~indexLed;
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	80fb      	strh	r3, [r7, #6]
	spi_74HC595_Transmit((uint8_t *)&indexLed, 2/*bytes*/);
 80020e8:	1dbb      	adds	r3, r7, #6
 80020ea:	2102      	movs	r1, #2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fa71 	bl	80005d4 <spi_74HC595_Transmit>
	HAL_Delay(demora);
 80020f2:	8abb      	ldrh	r3, [r7, #20]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fe09 	bl	8002d0c <HAL_Delay>

	indexLed = 0x1 << LED_CHORD;
 80020fa:	2308      	movs	r3, #8
 80020fc:	80fb      	strh	r3, [r7, #6]
	indexLed = ~indexLed;
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	43db      	mvns	r3, r3
 8002102:	b29b      	uxth	r3, r3
 8002104:	80fb      	strh	r3, [r7, #6]
	spi_74HC595_Transmit((uint8_t *)&indexLed, 2/*bytes*/);
 8002106:	1dbb      	adds	r3, r7, #6
 8002108:	2102      	movs	r1, #2
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fa62 	bl	80005d4 <spi_74HC595_Transmit>
	HAL_Delay(demora);
 8002110:	8abb      	ldrh	r3, [r7, #20]
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fdfa 	bl	8002d0c <HAL_Delay>

	indexLed = 0xFFFF;
 8002118:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800211c:	80fb      	strh	r3, [r7, #6]
	spi_74HC595_Transmit((uint8_t *)&indexLed, 2/*bytes*/);
 800211e:	1dbb      	adds	r3, r7, #6
 8002120:	2102      	movs	r1, #2
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fa56 	bl	80005d4 <spi_74HC595_Transmit>
}
 8002128:	bf00      	nop
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	0800d9dc 	.word	0x0800d9dc

08002134 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){ // dac
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0a      	ldr	r2, [pc, #40]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d103      	bne.n	800214e <HAL_TIM_PeriodElapsedCallback+0x1a>
		flag_dac = 1;
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
	}else if (htim->Instance == TIM2){ //tick
		flag_tick = 1;
	}

}
 800214c:	e007      	b.n	800215e <HAL_TIM_PeriodElapsedCallback+0x2a>
	}else if (htim->Instance == TIM2){ //tick
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002156:	d102      	bne.n	800215e <HAL_TIM_PeriodElapsedCallback+0x2a>
		flag_tick = 1;
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40000400 	.word	0x40000400
 8002170:	2000039b 	.word	0x2000039b
 8002174:	2000039a 	.word	0x2000039a

08002178 <HAL_I2C_MasterTxCpltCallback>:


void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	_lcd_ISR();
 8002180:	f7ff f882 	bl	8001288 <_lcd_ISR>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	flag_adc = 1;
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000385 	.word	0x20000385

080021ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <osc_dac_init>:
uint32_t ratio_sen = 100;
uint32_t ratio_cuad = 100;
uint32_t ratio_ramp = 100;


void osc_dac_init(DAC_HandleTypeDef *p_hdac, uint32_t ch){
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
	handler_dac = p_hdac;
 80021c6:	4a09      	ldr	r2, [pc, #36]	; (80021ec <osc_dac_init+0x30>)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6013      	str	r3, [r2, #0]
	dac_ch = ch;
 80021cc:	4a08      	ldr	r2, [pc, #32]	; (80021f0 <osc_dac_init+0x34>)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6013      	str	r3, [r2, #0]

	HAL_DAC_Start(handler_dac, dac_ch);
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <osc_dac_init+0x30>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <osc_dac_init+0x34>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4619      	mov	r1, r3
 80021dc:	4610      	mov	r0, r2
 80021de:	f001 fbea 	bl	80039b6 <HAL_DAC_Start>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	2000077c 	.word	0x2000077c
 80021f0:	20000778 	.word	0x20000778

080021f4 <osc_dac_update>:

//must be handled with a 44100 Hz timer.
void osc_dac_update(void){
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0

	if (nota_activa!=-1){
 80021f8:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <osc_dac_update+0xec>)
 80021fa:	f993 3000 	ldrsb.w	r3, [r3]
 80021fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002202:	d04e      	beq.n	80022a2 <osc_dac_update+0xae>
		phase+= nota_incrFase[nota_activa];
 8002204:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <osc_dac_update+0xec>)
 8002206:	f993 3000 	ldrsb.w	r3, [r3]
 800220a:	461a      	mov	r2, r3
 800220c:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <osc_dac_update+0xf0>)
 800220e:	5c9b      	ldrb	r3, [r3, r2]
 8002210:	b29a      	uxth	r2, r3
 8002212:	4b35      	ldr	r3, [pc, #212]	; (80022e8 <osc_dac_update+0xf4>)
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	4413      	add	r3, r2
 8002218:	b29a      	uxth	r2, r3
 800221a:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <osc_dac_update+0xf4>)
 800221c:	801a      	strh	r2, [r3, #0]
		if (phase>OSC_LAST) phase -= OSC_LAST;
 800221e:	4b32      	ldr	r3, [pc, #200]	; (80022e8 <osc_dac_update+0xf4>)
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	f244 520a 	movw	r2, #17674	; 0x450a
 8002226:	4293      	cmp	r3, r2
 8002228:	d907      	bls.n	800223a <osc_dac_update+0x46>
 800222a:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <osc_dac_update+0xf4>)
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	f5a3 438a 	sub.w	r3, r3, #17664	; 0x4500
 8002232:	3b0a      	subs	r3, #10
 8002234:	b29a      	uxth	r2, r3
 8002236:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <osc_dac_update+0xf4>)
 8002238:	801a      	strh	r2, [r3, #0]
		dac_out = ratio_sen*tabla_seno[phase]/100 + ratio_cuad*tabla_cuadrada[phase]/100 + ratio_ramp*tabla_sierra[phase]/100;
 800223a:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <osc_dac_update+0xf4>)
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <osc_dac_update+0xf8>)
 8002242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002246:	4a2a      	ldr	r2, [pc, #168]	; (80022f0 <osc_dac_update+0xfc>)
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	4a29      	ldr	r2, [pc, #164]	; (80022f4 <osc_dac_update+0x100>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	b29a      	uxth	r2, r3
 8002258:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <osc_dac_update+0xf4>)
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	4619      	mov	r1, r3
 800225e:	4b26      	ldr	r3, [pc, #152]	; (80022f8 <osc_dac_update+0x104>)
 8002260:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002264:	4925      	ldr	r1, [pc, #148]	; (80022fc <osc_dac_update+0x108>)
 8002266:	6809      	ldr	r1, [r1, #0]
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	4921      	ldr	r1, [pc, #132]	; (80022f4 <osc_dac_update+0x100>)
 800226e:	fba1 1303 	umull	r1, r3, r1, r3
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	b29b      	uxth	r3, r3
 8002276:	4413      	add	r3, r2
 8002278:	b29a      	uxth	r2, r3
 800227a:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <osc_dac_update+0xf4>)
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	4619      	mov	r1, r3
 8002280:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <osc_dac_update+0x10c>)
 8002282:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002286:	491f      	ldr	r1, [pc, #124]	; (8002304 <osc_dac_update+0x110>)
 8002288:	6809      	ldr	r1, [r1, #0]
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4919      	ldr	r1, [pc, #100]	; (80022f4 <osc_dac_update+0x100>)
 8002290:	fba1 1303 	umull	r1, r3, r1, r3
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	b29b      	uxth	r3, r3
 8002298:	4413      	add	r3, r2
 800229a:	b29a      	uxth	r2, r3
 800229c:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <osc_dac_update+0x114>)
 800229e:	801a      	strh	r2, [r3, #0]
 80022a0:	e005      	b.n	80022ae <osc_dac_update+0xba>
		//HAL_DAC_SetValue(handler_dac, dac_ch, DAC_ALIGN_12B_R, dac_out);
	}else{
		phase = 0;
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <osc_dac_update+0xf4>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	801a      	strh	r2, [r3, #0]
		dac_out = 0;
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <osc_dac_update+0x114>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	801a      	strh	r2, [r3, #0]
	}

	HAL_DAC_SetValue(handler_dac, dac_ch, DAC_ALIGN_12B_R, dac_out);
 80022ae:	4b17      	ldr	r3, [pc, #92]	; (800230c <osc_dac_update+0x118>)
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	4b17      	ldr	r3, [pc, #92]	; (8002310 <osc_dac_update+0x11c>)
 80022b4:	6819      	ldr	r1, [r3, #0]
 80022b6:	4b14      	ldr	r3, [pc, #80]	; (8002308 <osc_dac_update+0x114>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f001 fc2e 	bl	8003b1c <HAL_DAC_SetValue>
	if (dac_out > dac_max){
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <osc_dac_update+0x114>)
 80022c2:	881a      	ldrh	r2, [r3, #0]
 80022c4:	4b13      	ldr	r3, [pc, #76]	; (8002314 <osc_dac_update+0x120>)
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d907      	bls.n	80022dc <osc_dac_update+0xe8>
		dac_max = dac_out;
 80022cc:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <osc_dac_update+0x114>)
 80022ce:	881a      	ldrh	r2, [r3, #0]
 80022d0:	4b10      	ldr	r3, [pc, #64]	; (8002314 <osc_dac_update+0x120>)
 80022d2:	801a      	strh	r2, [r3, #0]
		phase_max = phase;
 80022d4:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <osc_dac_update+0xf4>)
 80022d6:	881a      	ldrh	r2, [r3, #0]
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <osc_dac_update+0x124>)
 80022da:	801a      	strh	r2, [r3, #0]
	}

//	flag_dac = 0;
}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	2000008c 	.word	0x2000008c
 80022e4:	080416e0 	.word	0x080416e0
 80022e8:	200003ae 	.word	0x200003ae
 80022ec:	0800da5c 	.word	0x0800da5c
 80022f0:	2000009c 	.word	0x2000009c
 80022f4:	51eb851f 	.word	0x51eb851f
 80022f8:	0801ee88 	.word	0x0801ee88
 80022fc:	200000a0 	.word	0x200000a0
 8002300:	080302b4 	.word	0x080302b4
 8002304:	200000a4 	.word	0x200000a4
 8002308:	200003b0 	.word	0x200003b0
 800230c:	2000077c 	.word	0x2000077c
 8002310:	20000778 	.word	0x20000778
 8002314:	200003b2 	.word	0x200003b2
 8002318:	200003b4 	.word	0x200003b4

0800231c <osc_setNote>:


int8_t osc_setNote (uint8_t nn){
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]

	if (!nn){
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d104      	bne.n	8002336 <osc_setNote+0x1a>
		nota_activa = -1;
 800232c:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <osc_setNote+0x48>)
 800232e:	22ff      	movs	r2, #255	; 0xff
 8002330:	701a      	strb	r2, [r3, #0]
		return 0;
 8002332:	2300      	movs	r3, #0
 8002334:	e00f      	b.n	8002356 <osc_setNote+0x3a>
	}

	if(nn<24 || nn>60){
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	2b17      	cmp	r3, #23
 800233a:	d902      	bls.n	8002342 <osc_setNote+0x26>
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	2b3c      	cmp	r3, #60	; 0x3c
 8002340:	d902      	bls.n	8002348 <osc_setNote+0x2c>
		return -1;
 8002342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002346:	e006      	b.n	8002356 <osc_setNote+0x3a>
	}

	nota_activa = nn - NOTA_C1;
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	3b18      	subs	r3, #24
 800234c:	b2db      	uxtb	r3, r3
 800234e:	b25a      	sxtb	r2, r3
 8002350:	4b04      	ldr	r3, [pc, #16]	; (8002364 <osc_setNote+0x48>)
 8002352:	701a      	strb	r2, [r3, #0]
	return 0;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	2000008c 	.word	0x2000008c

08002368 <osc_setRatios>:

int8_t osc_setRatios(uint8_t rsen, uint8_t rcuad, uint8_t rsier){
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
 8002372:	460b      	mov	r3, r1
 8002374:	71bb      	strb	r3, [r7, #6]
 8002376:	4613      	mov	r3, r2
 8002378:	717b      	strb	r3, [r7, #5]

	if (rsen > 100 || rcuad > 100 || rsier > 100){
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	2b64      	cmp	r3, #100	; 0x64
 800237e:	d805      	bhi.n	800238c <osc_setRatios+0x24>
 8002380:	79bb      	ldrb	r3, [r7, #6]
 8002382:	2b64      	cmp	r3, #100	; 0x64
 8002384:	d802      	bhi.n	800238c <osc_setRatios+0x24>
 8002386:	797b      	ldrb	r3, [r7, #5]
 8002388:	2b64      	cmp	r3, #100	; 0x64
 800238a:	d902      	bls.n	8002392 <osc_setRatios+0x2a>
		return -1;
 800238c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002390:	e009      	b.n	80023a6 <osc_setRatios+0x3e>
	}

	ratio_sen = rsen; ratio_cuad = rcuad; ratio_ramp = rsier;
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	4a07      	ldr	r2, [pc, #28]	; (80023b4 <osc_setRatios+0x4c>)
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	79bb      	ldrb	r3, [r7, #6]
 800239a:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <osc_setRatios+0x50>)
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	797b      	ldrb	r3, [r7, #5]
 80023a0:	4a06      	ldr	r2, [pc, #24]	; (80023bc <osc_setRatios+0x54>)
 80023a2:	6013      	str	r3, [r2, #0]
	return 0;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	2000009c 	.word	0x2000009c
 80023b8:	200000a0 	.word	0x200000a0
 80023bc:	200000a4 	.word	0x200000a4

080023c0 <adc_potes_init>:

void adc_potes_init (void){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
	HAL_ADC_DeInit(&hadc1);
 80023c4:	481d      	ldr	r0, [pc, #116]	; (800243c <adc_potes_init+0x7c>)
 80023c6:	f000 fd06 	bl	8002dd6 <HAL_ADC_DeInit>

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80023ca:	4b1c      	ldr	r3, [pc, #112]	; (800243c <adc_potes_init+0x7c>)
 80023cc:	4a1c      	ldr	r2, [pc, #112]	; (8002440 <adc_potes_init+0x80>)
 80023ce:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80023d0:	4b1a      	ldr	r3, [pc, #104]	; (800243c <adc_potes_init+0x7c>)
 80023d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023d6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023d8:	4b18      	ldr	r3, [pc, #96]	; (800243c <adc_potes_init+0x7c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 80023de:	4b17      	ldr	r3, [pc, #92]	; (800243c <adc_potes_init+0x7c>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80023e4:	4b15      	ldr	r3, [pc, #84]	; (800243c <adc_potes_init+0x7c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023ea:	4b14      	ldr	r3, [pc, #80]	; (800243c <adc_potes_init+0x7c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <adc_potes_init+0x7c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023f8:	4b10      	ldr	r3, [pc, #64]	; (800243c <adc_potes_init+0x7c>)
 80023fa:	4a12      	ldr	r2, [pc, #72]	; (8002444 <adc_potes_init+0x84>)
 80023fc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023fe:	4b0f      	ldr	r3, [pc, #60]	; (800243c <adc_potes_init+0x7c>)
 8002400:	2200      	movs	r2, #0
 8002402:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8002404:	4b0d      	ldr	r3, [pc, #52]	; (800243c <adc_potes_init+0x7c>)
 8002406:	2201      	movs	r2, #1
 8002408:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800240a:	4b0c      	ldr	r3, [pc, #48]	; (800243c <adc_potes_init+0x7c>)
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <adc_potes_init+0x7c>)
 8002414:	2201      	movs	r2, #1
 8002416:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002418:	4808      	ldr	r0, [pc, #32]	; (800243c <adc_potes_init+0x7c>)
 800241a:	f000 fc99 	bl	8002d50 <HAL_ADC_Init>
	{
		//Error_Handler();
	}

	sConfig.Channel = ADC_CHANNEL_8;
 800241e:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <adc_potes_init+0x88>)
 8002420:	2208      	movs	r2, #8
 8002422:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <adc_potes_init+0x88>)
 8002426:	2201      	movs	r2, #1
 8002428:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <adc_potes_init+0x88>)
 800242c:	2201      	movs	r2, #1
 800242e:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002430:	4905      	ldr	r1, [pc, #20]	; (8002448 <adc_potes_init+0x88>)
 8002432:	4802      	ldr	r0, [pc, #8]	; (800243c <adc_potes_init+0x7c>)
 8002434:	f000 ff34 	bl	80032a0 <HAL_ADC_ConfigChannel>
	{
//		Error_Handler();
	}
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000408 	.word	0x20000408
 8002440:	40012000 	.word	0x40012000
 8002444:	0f000001 	.word	0x0f000001
 8002448:	2000039c 	.word	0x2000039c

0800244c <set_nextPote>:

void set_nextPote (void){
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	//sConfig = NULL;

	switch (pote){
 8002450:	4b48      	ldr	r3, [pc, #288]	; (8002574 <set_nextPote+0x128>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b03      	cmp	r3, #3
 8002456:	f200 8089 	bhi.w	800256c <set_nextPote+0x120>
 800245a:	a201      	add	r2, pc, #4	; (adr r2, 8002460 <set_nextPote+0x14>)
 800245c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002460:	08002471 	.word	0x08002471
 8002464:	0800249f 	.word	0x0800249f
 8002468:	080024cd 	.word	0x080024cd
 800246c:	080024f9 	.word	0x080024f9
		case 0:

			pote_cuad = HAL_ADC_GetValue(&hadc1);
 8002470:	4841      	ldr	r0, [pc, #260]	; (8002578 <set_nextPote+0x12c>)
 8002472:	f000 fef4 	bl	800325e <HAL_ADC_GetValue>
 8002476:	4602      	mov	r2, r0
 8002478:	4b40      	ldr	r3, [pc, #256]	; (800257c <set_nextPote+0x130>)
 800247a:	601a      	str	r2, [r3, #0]

			sConfig.Channel = ADC_CHANNEL_9;
 800247c:	4b40      	ldr	r3, [pc, #256]	; (8002580 <set_nextPote+0x134>)
 800247e:	2209      	movs	r2, #9
 8002480:	601a      	str	r2, [r3, #0]
			sConfig.Rank = 1;
 8002482:	4b3f      	ldr	r3, [pc, #252]	; (8002580 <set_nextPote+0x134>)
 8002484:	2201      	movs	r2, #1
 8002486:	605a      	str	r2, [r3, #4]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002488:	493d      	ldr	r1, [pc, #244]	; (8002580 <set_nextPote+0x134>)
 800248a:	483b      	ldr	r0, [pc, #236]	; (8002578 <set_nextPote+0x12c>)
 800248c:	f000 ff08 	bl	80032a0 <HAL_ADC_ConfigChannel>
			{
//				Error_Handler();
			}
			pote = 1;
 8002490:	4b38      	ldr	r3, [pc, #224]	; (8002574 <set_nextPote+0x128>)
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_IT(&hadc1);
 8002496:	4838      	ldr	r0, [pc, #224]	; (8002578 <set_nextPote+0x12c>)
 8002498:	f000 fcd0 	bl	8002e3c <HAL_ADC_Start_IT>
		break;
 800249c:	e067      	b.n	800256e <set_nextPote+0x122>
		case 1:

			pote_ramp = HAL_ADC_GetValue(&hadc1);
 800249e:	4836      	ldr	r0, [pc, #216]	; (8002578 <set_nextPote+0x12c>)
 80024a0:	f000 fedd 	bl	800325e <HAL_ADC_GetValue>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4b37      	ldr	r3, [pc, #220]	; (8002584 <set_nextPote+0x138>)
 80024a8:	601a      	str	r2, [r3, #0]

			sConfig.Channel = ADC_CHANNEL_11;
 80024aa:	4b35      	ldr	r3, [pc, #212]	; (8002580 <set_nextPote+0x134>)
 80024ac:	220b      	movs	r2, #11
 80024ae:	601a      	str	r2, [r3, #0]
			sConfig.Rank = 1;
 80024b0:	4b33      	ldr	r3, [pc, #204]	; (8002580 <set_nextPote+0x134>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	605a      	str	r2, [r3, #4]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024b6:	4932      	ldr	r1, [pc, #200]	; (8002580 <set_nextPote+0x134>)
 80024b8:	482f      	ldr	r0, [pc, #188]	; (8002578 <set_nextPote+0x12c>)
 80024ba:	f000 fef1 	bl	80032a0 <HAL_ADC_ConfigChannel>
			{
//				Error_Handler();
			}
			pote = 2;
 80024be:	4b2d      	ldr	r3, [pc, #180]	; (8002574 <set_nextPote+0x128>)
 80024c0:	2202      	movs	r2, #2
 80024c2:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_IT(&hadc1);
 80024c4:	482c      	ldr	r0, [pc, #176]	; (8002578 <set_nextPote+0x12c>)
 80024c6:	f000 fcb9 	bl	8002e3c <HAL_ADC_Start_IT>
		break;
 80024ca:	e050      	b.n	800256e <set_nextPote+0x122>
		case 2:

			pote_sen = HAL_ADC_GetValue(&hadc1);
 80024cc:	482a      	ldr	r0, [pc, #168]	; (8002578 <set_nextPote+0x12c>)
 80024ce:	f000 fec6 	bl	800325e <HAL_ADC_GetValue>
 80024d2:	4602      	mov	r2, r0
 80024d4:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <set_nextPote+0x13c>)
 80024d6:	601a      	str	r2, [r3, #0]

			sConfig.Channel = ADC_CHANNEL_8;
 80024d8:	4b29      	ldr	r3, [pc, #164]	; (8002580 <set_nextPote+0x134>)
 80024da:	2208      	movs	r2, #8
 80024dc:	601a      	str	r2, [r3, #0]
			sConfig.Rank = 1;
 80024de:	4b28      	ldr	r3, [pc, #160]	; (8002580 <set_nextPote+0x134>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	605a      	str	r2, [r3, #4]
			sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80024e4:	4b26      	ldr	r3, [pc, #152]	; (8002580 <set_nextPote+0x134>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	609a      	str	r2, [r3, #8]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024ea:	4925      	ldr	r1, [pc, #148]	; (8002580 <set_nextPote+0x134>)
 80024ec:	4822      	ldr	r0, [pc, #136]	; (8002578 <set_nextPote+0x12c>)
 80024ee:	f000 fed7 	bl	80032a0 <HAL_ADC_ConfigChannel>
			{
//				Error_Handler();
			}
			pote = 3;
 80024f2:	4b20      	ldr	r3, [pc, #128]	; (8002574 <set_nextPote+0x128>)
 80024f4:	2203      	movs	r2, #3
 80024f6:	701a      	strb	r2, [r3, #0]
		case 3:

			pote_cuad = (pote_cuad >> 4) & 0xFF;
 80024f8:	4b20      	ldr	r3, [pc, #128]	; (800257c <set_nextPote+0x130>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	4a1e      	ldr	r2, [pc, #120]	; (800257c <set_nextPote+0x130>)
 8002502:	6013      	str	r3, [r2, #0]
			pote_ramp = (pote_ramp >> 4) & 0xFF;
 8002504:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <set_nextPote+0x138>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	b2db      	uxtb	r3, r3
 800250c:	4a1d      	ldr	r2, [pc, #116]	; (8002584 <set_nextPote+0x138>)
 800250e:	6013      	str	r3, [r2, #0]
			pote_sen = (pote_sen >> 4) & 0xFF;
 8002510:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <set_nextPote+0x13c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	b2db      	uxtb	r3, r3
 8002518:	4a1b      	ldr	r2, [pc, #108]	; (8002588 <set_nextPote+0x13c>)
 800251a:	6013      	str	r3, [r2, #0]

			ratio_cuad = pote_cuad * 100 / 255;
 800251c:	4b17      	ldr	r3, [pc, #92]	; (800257c <set_nextPote+0x130>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2264      	movs	r2, #100	; 0x64
 8002522:	fb02 f303 	mul.w	r3, r2, r3
 8002526:	4a19      	ldr	r2, [pc, #100]	; (800258c <set_nextPote+0x140>)
 8002528:	fba2 2303 	umull	r2, r3, r2, r3
 800252c:	09db      	lsrs	r3, r3, #7
 800252e:	4a18      	ldr	r2, [pc, #96]	; (8002590 <set_nextPote+0x144>)
 8002530:	6013      	str	r3, [r2, #0]
			ratio_ramp = pote_ramp * 100 / 255;
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <set_nextPote+0x138>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2264      	movs	r2, #100	; 0x64
 8002538:	fb02 f303 	mul.w	r3, r2, r3
 800253c:	4a13      	ldr	r2, [pc, #76]	; (800258c <set_nextPote+0x140>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	09db      	lsrs	r3, r3, #7
 8002544:	4a13      	ldr	r2, [pc, #76]	; (8002594 <set_nextPote+0x148>)
 8002546:	6013      	str	r3, [r2, #0]
			ratio_sen = pote_sen * 100 / 255;
 8002548:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <set_nextPote+0x13c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2264      	movs	r2, #100	; 0x64
 800254e:	fb02 f303 	mul.w	r3, r2, r3
 8002552:	4a0e      	ldr	r2, [pc, #56]	; (800258c <set_nextPote+0x140>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	09db      	lsrs	r3, r3, #7
 800255a:	4a0f      	ldr	r2, [pc, #60]	; (8002598 <set_nextPote+0x14c>)
 800255c:	6013      	str	r3, [r2, #0]

			//osc_setRatios((uint8_t)ratio_sen, (uint8_t)ratio_cuad, (uint8_t)ratio_ramp);

			pote = 0;
 800255e:	4b05      	ldr	r3, [pc, #20]	; (8002574 <set_nextPote+0x128>)
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_IT(&hadc1);
 8002564:	4804      	ldr	r0, [pc, #16]	; (8002578 <set_nextPote+0x12c>)
 8002566:	f000 fc69 	bl	8002e3c <HAL_ADC_Start_IT>
		break;
 800256a:	e000      	b.n	800256e <set_nextPote+0x122>
		default:
		break;
 800256c:	bf00      	nop
	} //end switch pote
} //end set_nextPote ()
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	200003ac 	.word	0x200003ac
 8002578:	20000408 	.word	0x20000408
 800257c:	20000094 	.word	0x20000094
 8002580:	2000039c 	.word	0x2000039c
 8002584:	20000098 	.word	0x20000098
 8002588:	20000090 	.word	0x20000090
 800258c:	80808081 	.word	0x80808081
 8002590:	200000a0 	.word	0x200000a0
 8002594:	200000a4 	.word	0x200000a4
 8002598:	2000009c 	.word	0x2000009c

0800259c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80025a0:	4b17      	ldr	r3, [pc, #92]	; (8002600 <MX_SPI1_Init+0x64>)
 80025a2:	4a18      	ldr	r2, [pc, #96]	; (8002604 <MX_SPI1_Init+0x68>)
 80025a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025a6:	4b16      	ldr	r3, [pc, #88]	; (8002600 <MX_SPI1_Init+0x64>)
 80025a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025ae:	4b14      	ldr	r3, [pc, #80]	; (8002600 <MX_SPI1_Init+0x64>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025b4:	4b12      	ldr	r3, [pc, #72]	; (8002600 <MX_SPI1_Init+0x64>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ba:	4b11      	ldr	r3, [pc, #68]	; (8002600 <MX_SPI1_Init+0x64>)
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025c0:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <MX_SPI1_Init+0x64>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <MX_SPI1_Init+0x64>)
 80025c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80025ce:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <MX_SPI1_Init+0x64>)
 80025d0:	2220      	movs	r2, #32
 80025d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025d4:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <MX_SPI1_Init+0x64>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025da:	4b09      	ldr	r3, [pc, #36]	; (8002600 <MX_SPI1_Init+0x64>)
 80025dc:	2200      	movs	r2, #0
 80025de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025e0:	4b07      	ldr	r3, [pc, #28]	; (8002600 <MX_SPI1_Init+0x64>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <MX_SPI1_Init+0x64>)
 80025e8:	220a      	movs	r2, #10
 80025ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025ec:	4804      	ldr	r0, [pc, #16]	; (8002600 <MX_SPI1_Init+0x64>)
 80025ee:	f005 fc69 	bl	8007ec4 <HAL_SPI_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80025f8:	f7ff fdd8 	bl	80021ac <Error_Handler>
  }

}
 80025fc:	bf00      	nop
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000780 	.word	0x20000780
 8002604:	40013000 	.word	0x40013000

08002608 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a1d      	ldr	r2, [pc, #116]	; (800269c <HAL_SPI_MspInit+0x94>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d133      	bne.n	8002692 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <HAL_SPI_MspInit+0x98>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	4a1b      	ldr	r2, [pc, #108]	; (80026a0 <HAL_SPI_MspInit+0x98>)
 8002634:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002638:	6453      	str	r3, [r2, #68]	; 0x44
 800263a:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <HAL_SPI_MspInit+0x98>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_SPI_MspInit+0x98>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a14      	ldr	r2, [pc, #80]	; (80026a0 <HAL_SPI_MspInit+0x98>)
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_SPI_MspInit+0x98>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002662:	2338      	movs	r3, #56	; 0x38
 8002664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266e:	2303      	movs	r3, #3
 8002670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002672:	2305      	movs	r3, #5
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002676:	f107 0314 	add.w	r3, r7, #20
 800267a:	4619      	mov	r1, r3
 800267c:	4809      	ldr	r0, [pc, #36]	; (80026a4 <HAL_SPI_MspInit+0x9c>)
 800267e:	f001 faa3 	bl	8003bc8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002682:	2200      	movs	r2, #0
 8002684:	2100      	movs	r1, #0
 8002686:	2023      	movs	r0, #35	; 0x23
 8002688:	f001 f92f 	bl	80038ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800268c:	2023      	movs	r0, #35	; 0x23
 800268e:	f001 f948 	bl	8003922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002692:	bf00      	nop
 8002694:	3728      	adds	r7, #40	; 0x28
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40013000 	.word	0x40013000
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40020400 	.word	0x40020400

080026a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <HAL_MspInit+0x4c>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	4a0f      	ldr	r2, [pc, #60]	; (80026f4 <HAL_MspInit+0x4c>)
 80026b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026bc:	6453      	str	r3, [r2, #68]	; 0x44
 80026be:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <HAL_MspInit+0x4c>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <HAL_MspInit+0x4c>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	4a08      	ldr	r2, [pc, #32]	; (80026f4 <HAL_MspInit+0x4c>)
 80026d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d8:	6413      	str	r3, [r2, #64]	; 0x40
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_MspInit+0x4c>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026e6:	2007      	movs	r0, #7
 80026e8:	f001 f8f4 	bl	80038d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40023800 	.word	0x40023800

080026f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800270a:	e7fe      	b.n	800270a <HardFault_Handler+0x4>

0800270c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002710:	e7fe      	b.n	8002710 <MemManage_Handler+0x4>

08002712 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002716:	e7fe      	b.n	8002716 <BusFault_Handler+0x4>

08002718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800271c:	e7fe      	b.n	800271c <UsageFault_Handler+0x4>

0800271e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800273a:	b480      	push	{r7}
 800273c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800274c:	f000 fabe 	bl	8002ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}

08002754 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002758:	4802      	ldr	r0, [pc, #8]	; (8002764 <ADC_IRQHandler+0x10>)
 800275a:	f000 fc3f 	bl	8002fdc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000408 	.word	0x20000408

08002768 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800276c:	4802      	ldr	r0, [pc, #8]	; (8002778 <TIM2_IRQHandler+0x10>)
 800276e:	f006 fa6c 	bl	8008c4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000818 	.word	0x20000818

0800277c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002780:	4802      	ldr	r0, [pc, #8]	; (800278c <TIM3_IRQHandler+0x10>)
 8002782:	f006 fa62 	bl	8008c4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200007d8 	.word	0x200007d8

08002790 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002794:	4802      	ldr	r0, [pc, #8]	; (80027a0 <I2C1_EV_IRQHandler+0x10>)
 8002796:	f001 ffa1 	bl	80046dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000464 	.word	0x20000464

080027a4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80027a8:	4802      	ldr	r0, [pc, #8]	; (80027b4 <I2C1_ER_IRQHandler+0x10>)
 80027aa:	f002 f8fd 	bl	80049a8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000464 	.word	0x20000464

080027b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <SPI1_IRQHandler+0x10>)
 80027be:	f005 ffc5 	bl	800874c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000780 	.word	0x20000780

080027cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80027d0:	4802      	ldr	r0, [pc, #8]	; (80027dc <OTG_FS_IRQHandler+0x10>)
 80027d2:	f003 fee2 	bl	800659a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000eec 	.word	0x20000eec

080027e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e8:	4a14      	ldr	r2, [pc, #80]	; (800283c <_sbrk+0x5c>)
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <_sbrk+0x60>)
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <_sbrk+0x64>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <_sbrk+0x64>)
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <_sbrk+0x68>)
 8002800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <_sbrk+0x64>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	429a      	cmp	r2, r3
 800280e:	d207      	bcs.n	8002820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002810:	f00a fef2 	bl	800d5f8 <__errno>
 8002814:	4602      	mov	r2, r0
 8002816:	230c      	movs	r3, #12
 8002818:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800281a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800281e:	e009      	b.n	8002834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <_sbrk+0x64>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002826:	4b07      	ldr	r3, [pc, #28]	; (8002844 <_sbrk+0x64>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	4a05      	ldr	r2, [pc, #20]	; (8002844 <_sbrk+0x64>)
 8002830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002832:	68fb      	ldr	r3, [r7, #12]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20020000 	.word	0x20020000
 8002840:	00000400 	.word	0x00000400
 8002844:	200003b8 	.word	0x200003b8
 8002848:	200012f8 	.word	0x200012f8

0800284c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002850:	4b08      	ldr	r3, [pc, #32]	; (8002874 <SystemInit+0x28>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002856:	4a07      	ldr	r2, [pc, #28]	; (8002874 <SystemInit+0x28>)
 8002858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800285c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <SystemInit+0x28>)
 8002862:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002866:	609a      	str	r2, [r3, #8]
#endif
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800287e:	f107 0308 	add.w	r3, r7, #8
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	609a      	str	r2, [r3, #8]
 800288a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800288c:	463b      	mov	r3, r7
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002894:	4b1d      	ldr	r3, [pc, #116]	; (800290c <MX_TIM2_Init+0x94>)
 8002896:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800289a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <MX_TIM2_Init+0x94>)
 800289e:	2263      	movs	r2, #99	; 0x63
 80028a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a2:	4b1a      	ldr	r3, [pc, #104]	; (800290c <MX_TIM2_Init+0x94>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 840-1;
 80028a8:	4b18      	ldr	r3, [pc, #96]	; (800290c <MX_TIM2_Init+0x94>)
 80028aa:	f240 3247 	movw	r2, #839	; 0x347
 80028ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b0:	4b16      	ldr	r3, [pc, #88]	; (800290c <MX_TIM2_Init+0x94>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <MX_TIM2_Init+0x94>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028bc:	4813      	ldr	r0, [pc, #76]	; (800290c <MX_TIM2_Init+0x94>)
 80028be:	f006 f975 	bl	8008bac <HAL_TIM_Base_Init>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80028c8:	f7ff fc70 	bl	80021ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028d2:	f107 0308 	add.w	r3, r7, #8
 80028d6:	4619      	mov	r1, r3
 80028d8:	480c      	ldr	r0, [pc, #48]	; (800290c <MX_TIM2_Init+0x94>)
 80028da:	f006 fabe 	bl	8008e5a <HAL_TIM_ConfigClockSource>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80028e4:	f7ff fc62 	bl	80021ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e8:	2300      	movs	r3, #0
 80028ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028f0:	463b      	mov	r3, r7
 80028f2:	4619      	mov	r1, r3
 80028f4:	4805      	ldr	r0, [pc, #20]	; (800290c <MX_TIM2_Init+0x94>)
 80028f6:	f006 fcc9 	bl	800928c <HAL_TIMEx_MasterConfigSynchronization>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002900:	f7ff fc54 	bl	80021ac <Error_Handler>
  }

}
 8002904:	bf00      	nop
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20000818 	.word	0x20000818

08002910 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002916:	f107 0308 	add.w	r3, r7, #8
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]
 8002920:	609a      	str	r2, [r3, #8]
 8002922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002924:	463b      	mov	r3, r7
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 800292c:	4b1c      	ldr	r3, [pc, #112]	; (80029a0 <MX_TIM3_Init+0x90>)
 800292e:	4a1d      	ldr	r2, [pc, #116]	; (80029a4 <MX_TIM3_Init+0x94>)
 8002930:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 119-1;
 8002932:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <MX_TIM3_Init+0x90>)
 8002934:	2276      	movs	r2, #118	; 0x76
 8002936:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002938:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <MX_TIM3_Init+0x90>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16-1;
 800293e:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <MX_TIM3_Init+0x90>)
 8002940:	220f      	movs	r2, #15
 8002942:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002944:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <MX_TIM3_Init+0x90>)
 8002946:	2200      	movs	r2, #0
 8002948:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <MX_TIM3_Init+0x90>)
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002950:	4813      	ldr	r0, [pc, #76]	; (80029a0 <MX_TIM3_Init+0x90>)
 8002952:	f006 f92b 	bl	8008bac <HAL_TIM_Base_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 800295c:	f7ff fc26 	bl	80021ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002964:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002966:	f107 0308 	add.w	r3, r7, #8
 800296a:	4619      	mov	r1, r3
 800296c:	480c      	ldr	r0, [pc, #48]	; (80029a0 <MX_TIM3_Init+0x90>)
 800296e:	f006 fa74 	bl	8008e5a <HAL_TIM_ConfigClockSource>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002978:	f7ff fc18 	bl	80021ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800297c:	2300      	movs	r3, #0
 800297e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002984:	463b      	mov	r3, r7
 8002986:	4619      	mov	r1, r3
 8002988:	4805      	ldr	r0, [pc, #20]	; (80029a0 <MX_TIM3_Init+0x90>)
 800298a:	f006 fc7f 	bl	800928c <HAL_TIMEx_MasterConfigSynchronization>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002994:	f7ff fc0a 	bl	80021ac <Error_Handler>
  }

}
 8002998:	bf00      	nop
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	200007d8 	.word	0x200007d8
 80029a4:	40000400 	.word	0x40000400

080029a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b8:	d116      	bne.n	80029e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <HAL_TIM_Base_MspInit+0x80>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	4a19      	ldr	r2, [pc, #100]	; (8002a28 <HAL_TIM_Base_MspInit+0x80>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ca:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <HAL_TIM_Base_MspInit+0x80>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029d6:	2200      	movs	r2, #0
 80029d8:	2100      	movs	r1, #0
 80029da:	201c      	movs	r0, #28
 80029dc:	f000 ff85 	bl	80038ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029e0:	201c      	movs	r0, #28
 80029e2:	f000 ff9e 	bl	8003922 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80029e6:	e01a      	b.n	8002a1e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM3)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a0f      	ldr	r2, [pc, #60]	; (8002a2c <HAL_TIM_Base_MspInit+0x84>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d115      	bne.n	8002a1e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <HAL_TIM_Base_MspInit+0x80>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	4a0b      	ldr	r2, [pc, #44]	; (8002a28 <HAL_TIM_Base_MspInit+0x80>)
 80029fc:	f043 0302 	orr.w	r3, r3, #2
 8002a00:	6413      	str	r3, [r2, #64]	; 0x40
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <HAL_TIM_Base_MspInit+0x80>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	201d      	movs	r0, #29
 8002a14:	f000 ff69 	bl	80038ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a18:	201d      	movs	r0, #29
 8002a1a:	f000 ff82 	bl	8003922 <HAL_NVIC_EnableIRQ>
}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40000400 	.word	0x40000400

08002a30 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <MX_USART3_UART_Init+0x4c>)
 8002a36:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <MX_USART3_UART_Init+0x50>)
 8002a38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <MX_USART3_UART_Init+0x4c>)
 8002a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a42:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <MX_USART3_UART_Init+0x4c>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <MX_USART3_UART_Init+0x4c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <MX_USART3_UART_Init+0x4c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a54:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <MX_USART3_UART_Init+0x4c>)
 8002a56:	220c      	movs	r2, #12
 8002a58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <MX_USART3_UART_Init+0x4c>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <MX_USART3_UART_Init+0x4c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a66:	4805      	ldr	r0, [pc, #20]	; (8002a7c <MX_USART3_UART_Init+0x4c>)
 8002a68:	f006 fca0 	bl	80093ac <HAL_UART_Init>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002a72:	f7ff fb9b 	bl	80021ac <Error_Handler>
  }

}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000858 	.word	0x20000858
 8002a80:	40004800 	.word	0x40004800

08002a84 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8002a88:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <MX_USART6_UART_Init+0x4c>)
 8002a8a:	4a12      	ldr	r2, [pc, #72]	; (8002ad4 <MX_USART6_UART_Init+0x50>)
 8002a8c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <MX_USART6_UART_Init+0x4c>)
 8002a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a94:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002a96:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <MX_USART6_UART_Init+0x4c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <MX_USART6_UART_Init+0x4c>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <MX_USART6_UART_Init+0x4c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002aa8:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <MX_USART6_UART_Init+0x4c>)
 8002aaa:	220c      	movs	r2, #12
 8002aac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aae:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <MX_USART6_UART_Init+0x4c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <MX_USART6_UART_Init+0x4c>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002aba:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <MX_USART6_UART_Init+0x4c>)
 8002abc:	f006 fc76 	bl	80093ac <HAL_UART_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002ac6:	f7ff fb71 	bl	80021ac <Error_Handler>
  }

}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000898 	.word	0x20000898
 8002ad4:	40011400 	.word	0x40011400

08002ad8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08c      	sub	sp, #48	; 0x30
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	f107 031c 	add.w	r3, r7, #28
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a32      	ldr	r2, [pc, #200]	; (8002bc0 <HAL_UART_MspInit+0xe8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d12d      	bne.n	8002b56 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
 8002afe:	4b31      	ldr	r3, [pc, #196]	; (8002bc4 <HAL_UART_MspInit+0xec>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	4a30      	ldr	r2, [pc, #192]	; (8002bc4 <HAL_UART_MspInit+0xec>)
 8002b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b08:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0a:	4b2e      	ldr	r3, [pc, #184]	; (8002bc4 <HAL_UART_MspInit+0xec>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b12:	61bb      	str	r3, [r7, #24]
 8002b14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	4b2a      	ldr	r3, [pc, #168]	; (8002bc4 <HAL_UART_MspInit+0xec>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	4a29      	ldr	r2, [pc, #164]	; (8002bc4 <HAL_UART_MspInit+0xec>)
 8002b20:	f043 0302 	orr.w	r3, r3, #2
 8002b24:	6313      	str	r3, [r2, #48]	; 0x30
 8002b26:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <HAL_UART_MspInit+0xec>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b32:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b40:	2303      	movs	r3, #3
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b44:	2307      	movs	r3, #7
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b48:	f107 031c 	add.w	r3, r7, #28
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	481e      	ldr	r0, [pc, #120]	; (8002bc8 <HAL_UART_MspInit+0xf0>)
 8002b50:	f001 f83a 	bl	8003bc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002b54:	e030      	b.n	8002bb8 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a1c      	ldr	r2, [pc, #112]	; (8002bcc <HAL_UART_MspInit+0xf4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d12b      	bne.n	8002bb8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b60:	2300      	movs	r3, #0
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	4b17      	ldr	r3, [pc, #92]	; (8002bc4 <HAL_UART_MspInit+0xec>)
 8002b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b68:	4a16      	ldr	r2, [pc, #88]	; (8002bc4 <HAL_UART_MspInit+0xec>)
 8002b6a:	f043 0320 	orr.w	r3, r3, #32
 8002b6e:	6453      	str	r3, [r2, #68]	; 0x44
 8002b70:	4b14      	ldr	r3, [pc, #80]	; (8002bc4 <HAL_UART_MspInit+0xec>)
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <HAL_UART_MspInit+0xec>)
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	4a0f      	ldr	r2, [pc, #60]	; (8002bc4 <HAL_UART_MspInit+0xec>)
 8002b86:	f043 0304 	orr.w	r3, r3, #4
 8002b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8c:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <HAL_UART_MspInit+0xec>)
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MIDI_TX_Pin|MIDI_RX_Pin;
 8002b98:	23c0      	movs	r3, #192	; 0xc0
 8002b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ba8:	2308      	movs	r3, #8
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bac:	f107 031c 	add.w	r3, r7, #28
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4807      	ldr	r0, [pc, #28]	; (8002bd0 <HAL_UART_MspInit+0xf8>)
 8002bb4:	f001 f808 	bl	8003bc8 <HAL_GPIO_Init>
}
 8002bb8:	bf00      	nop
 8002bba:	3730      	adds	r7, #48	; 0x30
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40004800 	.word	0x40004800
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40020400 	.word	0x40020400
 8002bcc:	40011400 	.word	0x40011400
 8002bd0:	40020800 	.word	0x40020800

08002bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002bd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002bda:	e003      	b.n	8002be4 <LoopCopyDataInit>

08002bdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002bde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002be0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002be2:	3104      	adds	r1, #4

08002be4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002be4:	480b      	ldr	r0, [pc, #44]	; (8002c14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002be6:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002be8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002bea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002bec:	d3f6      	bcc.n	8002bdc <CopyDataInit>
  ldr  r2, =_sbss
 8002bee:	4a0b      	ldr	r2, [pc, #44]	; (8002c1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002bf0:	e002      	b.n	8002bf8 <LoopFillZerobss>

08002bf2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002bf2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002bf4:	f842 3b04 	str.w	r3, [r2], #4

08002bf8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002bf8:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002bfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002bfc:	d3f9      	bcc.n	8002bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bfe:	f7ff fe25 	bl	800284c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c02:	f00a fcff 	bl	800d604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c06:	f7fe fb4b 	bl	80012a0 <main>
  bx  lr    
 8002c0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002c10:	08041738 	.word	0x08041738
  ldr  r0, =_sdata
 8002c14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c18:	200002f0 	.word	0x200002f0
  ldr  r2, =_sbss
 8002c1c:	200002f0 	.word	0x200002f0
  ldr  r3, = _ebss
 8002c20:	200012f8 	.word	0x200012f8

08002c24 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c24:	e7fe      	b.n	8002c24 <CAN1_RX0_IRQHandler>
	...

08002c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c2c:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <HAL_Init+0x40>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0d      	ldr	r2, [pc, #52]	; (8002c68 <HAL_Init+0x40>)
 8002c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_Init+0x40>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <HAL_Init+0x40>)
 8002c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c44:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <HAL_Init+0x40>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a07      	ldr	r2, [pc, #28]	; (8002c68 <HAL_Init+0x40>)
 8002c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c50:	2003      	movs	r0, #3
 8002c52:	f000 fe3f 	bl	80038d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c56:	2000      	movs	r0, #0
 8002c58:	f000 f808 	bl	8002c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c5c:	f7ff fd24 	bl	80026a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40023c00 	.word	0x40023c00

08002c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c74:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <HAL_InitTick+0x54>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <HAL_InitTick+0x58>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fe65 	bl	800395a <HAL_SYSTICK_Config>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e00e      	b.n	8002cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b0f      	cmp	r3, #15
 8002c9e:	d80a      	bhi.n	8002cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ca8:	f000 fe1f 	bl	80038ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cac:	4a06      	ldr	r2, [pc, #24]	; (8002cc8 <HAL_InitTick+0x5c>)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	e000      	b.n	8002cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	200000a8 	.word	0x200000a8
 8002cc4:	200000b0 	.word	0x200000b0
 8002cc8:	200000ac 	.word	0x200000ac

08002ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cd0:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_IncTick+0x20>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_IncTick+0x24>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4413      	add	r3, r2
 8002cdc:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <HAL_IncTick+0x24>)
 8002cde:	6013      	str	r3, [r2, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	200000b0 	.word	0x200000b0
 8002cf0:	200008d8 	.word	0x200008d8

08002cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <HAL_GetTick+0x14>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	200008d8 	.word	0x200008d8

08002d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d14:	f7ff ffee 	bl	8002cf4 <HAL_GetTick>
 8002d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d24:	d005      	beq.n	8002d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d26:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <HAL_Delay+0x40>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4413      	add	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d32:	bf00      	nop
 8002d34:	f7ff ffde 	bl	8002cf4 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d8f7      	bhi.n	8002d34 <HAL_Delay+0x28>
  {
  }
}
 8002d44:	bf00      	nop
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	200000b0 	.word	0x200000b0

08002d50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e033      	b.n	8002dce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fd fea8 	bl	8000ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d118      	bne.n	8002dc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d96:	f023 0302 	bic.w	r3, r3, #2
 8002d9a:	f043 0202 	orr.w	r2, r3, #2
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fb9e 	bl	80034e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f023 0303 	bic.w	r3, r3, #3
 8002db6:	f043 0201 	orr.w	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
 8002dbe:	e001      	b.n	8002dc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e022      	b.n	8002e32 <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	f043 0202 	orr.w	r2, r3, #2
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0201 	bic.w	r2, r2, #1
 8002e06:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d108      	bne.n	8002e28 <HAL_ADC_DeInit+0x52>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fd febc 	bl	8000b94 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_ADC_Start_IT+0x1a>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e0b0      	b.n	8002fb8 <HAL_ADC_Start_IT+0x17c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d018      	beq.n	8002e9e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e7c:	4b51      	ldr	r3, [pc, #324]	; (8002fc4 <HAL_ADC_Start_IT+0x188>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a51      	ldr	r2, [pc, #324]	; (8002fc8 <HAL_ADC_Start_IT+0x18c>)
 8002e82:	fba2 2303 	umull	r2, r3, r2, r3
 8002e86:	0c9a      	lsrs	r2, r3, #18
 8002e88:	4613      	mov	r3, r2
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4413      	add	r3, r2
 8002e8e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e90:	e002      	b.n	8002e98 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	3b01      	subs	r3, #1
 8002e96:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f9      	bne.n	8002e92 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	f040 8084 	bne.w	8002fb6 <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d007      	beq.n	8002ee0 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ed8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eec:	d106      	bne.n	8002efc <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	f023 0206 	bic.w	r2, r3, #6
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	645a      	str	r2, [r3, #68]	; 0x44
 8002efa:	e002      	b.n	8002f02 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f0a:	4b30      	ldr	r3, [pc, #192]	; (8002fcc <HAL_ADC_Start_IT+0x190>)
 8002f0c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f16:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6812      	ldr	r2, [r2, #0]
 8002f22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f26:	f043 0320 	orr.w	r3, r3, #32
 8002f2a:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d12a      	bne.n	8002f8e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a24      	ldr	r2, [pc, #144]	; (8002fd0 <HAL_ADC_Start_IT+0x194>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d015      	beq.n	8002f6e <HAL_ADC_Start_IT+0x132>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a23      	ldr	r2, [pc, #140]	; (8002fd4 <HAL_ADC_Start_IT+0x198>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d105      	bne.n	8002f58 <HAL_ADC_Start_IT+0x11c>
 8002f4c:	4b1f      	ldr	r3, [pc, #124]	; (8002fcc <HAL_ADC_Start_IT+0x190>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00a      	beq.n	8002f6e <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1e      	ldr	r2, [pc, #120]	; (8002fd8 <HAL_ADC_Start_IT+0x19c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d129      	bne.n	8002fb6 <HAL_ADC_Start_IT+0x17a>
 8002f62:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <HAL_ADC_Start_IT+0x190>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	2b0f      	cmp	r3, #15
 8002f6c:	d823      	bhi.n	8002fb6 <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d11c      	bne.n	8002fb6 <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	e013      	b.n	8002fb6 <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a0f      	ldr	r2, [pc, #60]	; (8002fd0 <HAL_ADC_Start_IT+0x194>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d10e      	bne.n	8002fb6 <HAL_ADC_Start_IT+0x17a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d107      	bne.n	8002fb6 <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fb4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	200000a8 	.word	0x200000a8
 8002fc8:	431bde83 	.word	0x431bde83
 8002fcc:	40012300 	.word	0x40012300
 8002fd0:	40012000 	.word	0x40012000
 8002fd4:	40012100 	.word	0x40012100
 8002fd8:	40012200 	.word	0x40012200

08002fdc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	bf0c      	ite	eq
 8002ffa:	2301      	moveq	r3, #1
 8002ffc:	2300      	movne	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b20      	cmp	r3, #32
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d049      	beq.n	80030b2 <HAL_ADC_IRQHandler+0xd6>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d046      	beq.n	80030b2 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b00      	cmp	r3, #0
 800302e:	d105      	bne.n	800303c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d12b      	bne.n	80030a2 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800304e:	2b00      	cmp	r3, #0
 8003050:	d127      	bne.n	80030a2 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800305c:	2b00      	cmp	r3, #0
 800305e:	d006      	beq.n	800306e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800306a:	2b00      	cmp	r3, #0
 800306c:	d119      	bne.n	80030a2 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0220 	bic.w	r2, r2, #32
 800307c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d105      	bne.n	80030a2 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f043 0201 	orr.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff f872 	bl	800218c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0212 	mvn.w	r2, #18
 80030b0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b04      	cmp	r3, #4
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d2:	2b80      	cmp	r3, #128	; 0x80
 80030d4:	bf0c      	ite	eq
 80030d6:	2301      	moveq	r3, #1
 80030d8:	2300      	movne	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d057      	beq.n	8003194 <HAL_ADC_IRQHandler+0x1b8>
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d054      	beq.n	8003194 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d105      	bne.n	8003102 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d139      	bne.n	8003184 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003116:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800311a:	2b00      	cmp	r3, #0
 800311c:	d006      	beq.n	800312c <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003128:	2b00      	cmp	r3, #0
 800312a:	d12b      	bne.n	8003184 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003136:	2b00      	cmp	r3, #0
 8003138:	d124      	bne.n	8003184 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003144:	2b00      	cmp	r3, #0
 8003146:	d11d      	bne.n	8003184 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800314c:	2b00      	cmp	r3, #0
 800314e:	d119      	bne.n	8003184 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800315e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003174:	2b00      	cmp	r3, #0
 8003176:	d105      	bne.n	8003184 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	f043 0201 	orr.w	r2, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 faa9 	bl	80036dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f06f 020c 	mvn.w	r2, #12
 8003192:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b01      	cmp	r3, #1
 80031a0:	bf0c      	ite	eq
 80031a2:	2301      	moveq	r3, #1
 80031a4:	2300      	movne	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b4:	2b40      	cmp	r3, #64	; 0x40
 80031b6:	bf0c      	ite	eq
 80031b8:	2301      	moveq	r3, #1
 80031ba:	2300      	movne	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d017      	beq.n	80031f6 <HAL_ADC_IRQHandler+0x21a>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d014      	beq.n	80031f6 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d10d      	bne.n	80031f6 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f846 	bl	8003278 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0201 	mvn.w	r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b20      	cmp	r3, #32
 8003202:	bf0c      	ite	eq
 8003204:	2301      	moveq	r3, #1
 8003206:	2300      	movne	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003216:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d015      	beq.n	8003256 <HAL_ADC_IRQHandler+0x27a>
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d012      	beq.n	8003256 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003234:	f043 0202 	orr.w	r2, r3, #2
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0220 	mvn.w	r2, #32
 8003244:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f820 	bl	800328c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f06f 0220 	mvn.w	r2, #32
 8003254:	601a      	str	r2, [r3, #0]
  }
}
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800326c:	4618      	mov	r0, r3
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x1c>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e105      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x228>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b09      	cmp	r3, #9
 80032ca:	d925      	bls.n	8003318 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68d9      	ldr	r1, [r3, #12]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	4613      	mov	r3, r2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	4413      	add	r3, r2
 80032e0:	3b1e      	subs	r3, #30
 80032e2:	2207      	movs	r2, #7
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43da      	mvns	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	400a      	ands	r2, r1
 80032f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68d9      	ldr	r1, [r3, #12]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	b29b      	uxth	r3, r3
 8003302:	4618      	mov	r0, r3
 8003304:	4603      	mov	r3, r0
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	4403      	add	r3, r0
 800330a:	3b1e      	subs	r3, #30
 800330c:	409a      	lsls	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	60da      	str	r2, [r3, #12]
 8003316:	e022      	b.n	800335e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6919      	ldr	r1, [r3, #16]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	b29b      	uxth	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	4613      	mov	r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	4413      	add	r3, r2
 800332c:	2207      	movs	r2, #7
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43da      	mvns	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	400a      	ands	r2, r1
 800333a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6919      	ldr	r1, [r3, #16]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	b29b      	uxth	r3, r3
 800334c:	4618      	mov	r0, r3
 800334e:	4603      	mov	r3, r0
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4403      	add	r3, r0
 8003354:	409a      	lsls	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b06      	cmp	r3, #6
 8003364:	d824      	bhi.n	80033b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	3b05      	subs	r3, #5
 8003378:	221f      	movs	r2, #31
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43da      	mvns	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	400a      	ands	r2, r1
 8003386:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	b29b      	uxth	r3, r3
 8003394:	4618      	mov	r0, r3
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	3b05      	subs	r3, #5
 80033a2:	fa00 f203 	lsl.w	r2, r0, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	635a      	str	r2, [r3, #52]	; 0x34
 80033ae:	e04c      	b.n	800344a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b0c      	cmp	r3, #12
 80033b6:	d824      	bhi.n	8003402 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	3b23      	subs	r3, #35	; 0x23
 80033ca:	221f      	movs	r2, #31
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43da      	mvns	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	400a      	ands	r2, r1
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	4618      	mov	r0, r3
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	3b23      	subs	r3, #35	; 0x23
 80033f4:	fa00 f203 	lsl.w	r2, r0, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003400:	e023      	b.n	800344a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	3b41      	subs	r3, #65	; 0x41
 8003414:	221f      	movs	r2, #31
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43da      	mvns	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	400a      	ands	r2, r1
 8003422:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	b29b      	uxth	r3, r3
 8003430:	4618      	mov	r0, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	3b41      	subs	r3, #65	; 0x41
 800343e:	fa00 f203 	lsl.w	r2, r0, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800344a:	4b22      	ldr	r3, [pc, #136]	; (80034d4 <HAL_ADC_ConfigChannel+0x234>)
 800344c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a21      	ldr	r2, [pc, #132]	; (80034d8 <HAL_ADC_ConfigChannel+0x238>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d109      	bne.n	800346c <HAL_ADC_ConfigChannel+0x1cc>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b12      	cmp	r3, #18
 800345e:	d105      	bne.n	800346c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a19      	ldr	r2, [pc, #100]	; (80034d8 <HAL_ADC_ConfigChannel+0x238>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d123      	bne.n	80034be <HAL_ADC_ConfigChannel+0x21e>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b10      	cmp	r3, #16
 800347c:	d003      	beq.n	8003486 <HAL_ADC_ConfigChannel+0x1e6>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b11      	cmp	r3, #17
 8003484:	d11b      	bne.n	80034be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b10      	cmp	r3, #16
 8003498:	d111      	bne.n	80034be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <HAL_ADC_ConfigChannel+0x23c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a10      	ldr	r2, [pc, #64]	; (80034e0 <HAL_ADC_ConfigChannel+0x240>)
 80034a0:	fba2 2303 	umull	r2, r3, r2, r3
 80034a4:	0c9a      	lsrs	r2, r3, #18
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034b0:	e002      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f9      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	40012300 	.word	0x40012300
 80034d8:	40012000 	.word	0x40012000
 80034dc:	200000a8 	.word	0x200000a8
 80034e0:	431bde83 	.word	0x431bde83

080034e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034ec:	4b79      	ldr	r3, [pc, #484]	; (80036d4 <ADC_Init+0x1f0>)
 80034ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	431a      	orrs	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003518:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6859      	ldr	r1, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	021a      	lsls	r2, r3, #8
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800353c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6859      	ldr	r1, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800355e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6899      	ldr	r1, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	4a58      	ldr	r2, [pc, #352]	; (80036d8 <ADC_Init+0x1f4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d022      	beq.n	80035c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800358a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6899      	ldr	r1, [r3, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6899      	ldr	r1, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	e00f      	b.n	80035e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0202 	bic.w	r2, r2, #2
 80035f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6899      	ldr	r1, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	7e1b      	ldrb	r3, [r3, #24]
 80035fc:	005a      	lsls	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01b      	beq.n	8003648 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800361e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800362e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6859      	ldr	r1, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	3b01      	subs	r3, #1
 800363c:	035a      	lsls	r2, r3, #13
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	e007      	b.n	8003658 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003656:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003666:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	3b01      	subs	r3, #1
 8003674:	051a      	lsls	r2, r3, #20
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800368c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6899      	ldr	r1, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800369a:	025a      	lsls	r2, r3, #9
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6899      	ldr	r1, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	029a      	lsls	r2, r3, #10
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	609a      	str	r2, [r3, #8]
}
 80036c8:	bf00      	nop
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	40012300 	.word	0x40012300
 80036d8:	0f000001 	.word	0x0f000001

080036dc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <__NVIC_SetPriorityGrouping+0x44>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800370c:	4013      	ands	r3, r2
 800370e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800371c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003722:	4a04      	ldr	r2, [pc, #16]	; (8003734 <__NVIC_SetPriorityGrouping+0x44>)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	60d3      	str	r3, [r2, #12]
}
 8003728:	bf00      	nop
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800373c:	4b04      	ldr	r3, [pc, #16]	; (8003750 <__NVIC_GetPriorityGrouping+0x18>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	0a1b      	lsrs	r3, r3, #8
 8003742:	f003 0307 	and.w	r3, r3, #7
}
 8003746:	4618      	mov	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	e000ed00 	.word	0xe000ed00

08003754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	2b00      	cmp	r3, #0
 8003764:	db0b      	blt.n	800377e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	f003 021f 	and.w	r2, r3, #31
 800376c:	4907      	ldr	r1, [pc, #28]	; (800378c <__NVIC_EnableIRQ+0x38>)
 800376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	2001      	movs	r0, #1
 8003776:	fa00 f202 	lsl.w	r2, r0, r2
 800377a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	e000e100 	.word	0xe000e100

08003790 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	db10      	blt.n	80037c4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	f003 021f 	and.w	r2, r3, #31
 80037a8:	4909      	ldr	r1, [pc, #36]	; (80037d0 <__NVIC_DisableIRQ+0x40>)
 80037aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	2001      	movs	r0, #1
 80037b2:	fa00 f202 	lsl.w	r2, r0, r2
 80037b6:	3320      	adds	r3, #32
 80037b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80037bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80037c0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	e000e100 	.word	0xe000e100

080037d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	6039      	str	r1, [r7, #0]
 80037de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	db0a      	blt.n	80037fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	490c      	ldr	r1, [pc, #48]	; (8003820 <__NVIC_SetPriority+0x4c>)
 80037ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f2:	0112      	lsls	r2, r2, #4
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	440b      	add	r3, r1
 80037f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037fc:	e00a      	b.n	8003814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	b2da      	uxtb	r2, r3
 8003802:	4908      	ldr	r1, [pc, #32]	; (8003824 <__NVIC_SetPriority+0x50>)
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	3b04      	subs	r3, #4
 800380c:	0112      	lsls	r2, r2, #4
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	440b      	add	r3, r1
 8003812:	761a      	strb	r2, [r3, #24]
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	e000e100 	.word	0xe000e100
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003828:	b480      	push	{r7}
 800382a:	b089      	sub	sp, #36	; 0x24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f1c3 0307 	rsb	r3, r3, #7
 8003842:	2b04      	cmp	r3, #4
 8003844:	bf28      	it	cs
 8003846:	2304      	movcs	r3, #4
 8003848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	3304      	adds	r3, #4
 800384e:	2b06      	cmp	r3, #6
 8003850:	d902      	bls.n	8003858 <NVIC_EncodePriority+0x30>
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	3b03      	subs	r3, #3
 8003856:	e000      	b.n	800385a <NVIC_EncodePriority+0x32>
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800385c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	43da      	mvns	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	401a      	ands	r2, r3
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003870:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	fa01 f303 	lsl.w	r3, r1, r3
 800387a:	43d9      	mvns	r1, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003880:	4313      	orrs	r3, r2
         );
}
 8003882:	4618      	mov	r0, r3
 8003884:	3724      	adds	r7, #36	; 0x24
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3b01      	subs	r3, #1
 800389c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038a0:	d301      	bcc.n	80038a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038a2:	2301      	movs	r3, #1
 80038a4:	e00f      	b.n	80038c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038a6:	4a0a      	ldr	r2, [pc, #40]	; (80038d0 <SysTick_Config+0x40>)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ae:	210f      	movs	r1, #15
 80038b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038b4:	f7ff ff8e 	bl	80037d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <SysTick_Config+0x40>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038be:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <SysTick_Config+0x40>)
 80038c0:	2207      	movs	r2, #7
 80038c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	e000e010 	.word	0xe000e010

080038d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7ff ff07 	bl	80036f0 <__NVIC_SetPriorityGrouping>
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b086      	sub	sp, #24
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	4603      	mov	r3, r0
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	607a      	str	r2, [r7, #4]
 80038f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038fc:	f7ff ff1c 	bl	8003738 <__NVIC_GetPriorityGrouping>
 8003900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	6978      	ldr	r0, [r7, #20]
 8003908:	f7ff ff8e 	bl	8003828 <NVIC_EncodePriority>
 800390c:	4602      	mov	r2, r0
 800390e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003912:	4611      	mov	r1, r2
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff ff5d 	bl	80037d4 <__NVIC_SetPriority>
}
 800391a:	bf00      	nop
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	4603      	mov	r3, r0
 800392a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800392c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff ff0f 	bl	8003754 <__NVIC_EnableIRQ>
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	4603      	mov	r3, r0
 8003946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff ff1f 	bl	8003790 <__NVIC_DisableIRQ>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7ff ff94 	bl	8003890 <SysTick_Config>
 8003968:	4603      	mov	r3, r0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e014      	b.n	80039ae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	791b      	ldrb	r3, [r3, #4]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d105      	bne.n	800399a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7fd f957 	bl	8000c48 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2202      	movs	r2, #2
 800399e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b085      	sub	sp, #20
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	2300      	movs	r3, #0
 80039c6:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	795b      	ldrb	r3, [r3, #5]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_DAC_Start+0x1e>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e050      	b.n	8003a76 <HAL_DAC_Start+0xc0>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2202      	movs	r2, #2
 80039de:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6819      	ldr	r1, [r3, #0]
 80039e6:	2201      	movs	r2, #1
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	409a      	lsls	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d11a      	bne.n	8003a30 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a10:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d127      	bne.n	8003a68 <HAL_DAC_Start+0xb2>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b38      	cmp	r3, #56	; 0x38
 8003a1c:	d124      	bne.n	8003a68 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0201 	orr.w	r2, r2, #1
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	e01b      	b.n	8003a68 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a3a:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8003a46:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a4e:	d10b      	bne.n	8003a68 <HAL_DAC_Start+0xb2>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003a56:	d107      	bne.n	8003a68 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0202 	orr.w	r2, r2, #2
 8003a66:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b087      	sub	sp, #28
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	2300      	movs	r3, #0
 8003a94:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	795b      	ldrb	r3, [r3, #5]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_DAC_ConfigChannel+0x20>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e036      	b.n	8003b10 <HAL_DAC_ConfigChannel+0x8e>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003ab6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6819      	ldr	r1, [r3, #0]
 8003af0:	22c0      	movs	r2, #192	; 0xc0
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	43da      	mvns	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	400a      	ands	r2, r1
 8003b00:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	371c      	adds	r7, #28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d105      	bne.n	8003b46 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4413      	add	r3, r2
 8003b40:	3308      	adds	r3, #8
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	e004      	b.n	8003b50 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3314      	adds	r3, #20
 8003b4e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	461a      	mov	r2, r3
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d004      	beq.n	8003b84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2280      	movs	r2, #128	; 0x80
 8003b7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e00c      	b.n	8003b9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2205      	movs	r2, #5
 8003b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bb8:	b2db      	uxtb	r3, r3
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b089      	sub	sp, #36	; 0x24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	e16b      	b.n	8003ebc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003be4:	2201      	movs	r2, #1
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	f040 815a 	bne.w	8003eb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d00b      	beq.n	8003c22 <HAL_GPIO_Init+0x5a>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d007      	beq.n	8003c22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c16:	2b11      	cmp	r3, #17
 8003c18:	d003      	beq.n	8003c22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b12      	cmp	r3, #18
 8003c20:	d130      	bne.n	8003c84 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	2203      	movs	r2, #3
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4013      	ands	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c58:	2201      	movs	r2, #1
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	f003 0201 	and.w	r2, r3, #1
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	2203      	movs	r2, #3
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d003      	beq.n	8003cc4 <HAL_GPIO_Init+0xfc>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b12      	cmp	r3, #18
 8003cc2:	d123      	bne.n	8003d0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	08da      	lsrs	r2, r3, #3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3208      	adds	r2, #8
 8003ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	220f      	movs	r2, #15
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	08da      	lsrs	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3208      	adds	r2, #8
 8003d06:	69b9      	ldr	r1, [r7, #24]
 8003d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	2203      	movs	r2, #3
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 0203 	and.w	r2, r3, #3
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80b4 	beq.w	8003eb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	4b5f      	ldr	r3, [pc, #380]	; (8003ed0 <HAL_GPIO_Init+0x308>)
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	4a5e      	ldr	r2, [pc, #376]	; (8003ed0 <HAL_GPIO_Init+0x308>)
 8003d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d5e:	4b5c      	ldr	r3, [pc, #368]	; (8003ed0 <HAL_GPIO_Init+0x308>)
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d6a:	4a5a      	ldr	r2, [pc, #360]	; (8003ed4 <HAL_GPIO_Init+0x30c>)
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	089b      	lsrs	r3, r3, #2
 8003d70:	3302      	adds	r3, #2
 8003d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	220f      	movs	r2, #15
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a51      	ldr	r2, [pc, #324]	; (8003ed8 <HAL_GPIO_Init+0x310>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d02b      	beq.n	8003dee <HAL_GPIO_Init+0x226>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a50      	ldr	r2, [pc, #320]	; (8003edc <HAL_GPIO_Init+0x314>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d025      	beq.n	8003dea <HAL_GPIO_Init+0x222>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a4f      	ldr	r2, [pc, #316]	; (8003ee0 <HAL_GPIO_Init+0x318>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d01f      	beq.n	8003de6 <HAL_GPIO_Init+0x21e>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a4e      	ldr	r2, [pc, #312]	; (8003ee4 <HAL_GPIO_Init+0x31c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d019      	beq.n	8003de2 <HAL_GPIO_Init+0x21a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a4d      	ldr	r2, [pc, #308]	; (8003ee8 <HAL_GPIO_Init+0x320>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <HAL_GPIO_Init+0x216>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a4c      	ldr	r2, [pc, #304]	; (8003eec <HAL_GPIO_Init+0x324>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00d      	beq.n	8003dda <HAL_GPIO_Init+0x212>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a4b      	ldr	r2, [pc, #300]	; (8003ef0 <HAL_GPIO_Init+0x328>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d007      	beq.n	8003dd6 <HAL_GPIO_Init+0x20e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a4a      	ldr	r2, [pc, #296]	; (8003ef4 <HAL_GPIO_Init+0x32c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d101      	bne.n	8003dd2 <HAL_GPIO_Init+0x20a>
 8003dce:	2307      	movs	r3, #7
 8003dd0:	e00e      	b.n	8003df0 <HAL_GPIO_Init+0x228>
 8003dd2:	2308      	movs	r3, #8
 8003dd4:	e00c      	b.n	8003df0 <HAL_GPIO_Init+0x228>
 8003dd6:	2306      	movs	r3, #6
 8003dd8:	e00a      	b.n	8003df0 <HAL_GPIO_Init+0x228>
 8003dda:	2305      	movs	r3, #5
 8003ddc:	e008      	b.n	8003df0 <HAL_GPIO_Init+0x228>
 8003dde:	2304      	movs	r3, #4
 8003de0:	e006      	b.n	8003df0 <HAL_GPIO_Init+0x228>
 8003de2:	2303      	movs	r3, #3
 8003de4:	e004      	b.n	8003df0 <HAL_GPIO_Init+0x228>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e002      	b.n	8003df0 <HAL_GPIO_Init+0x228>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <HAL_GPIO_Init+0x228>
 8003dee:	2300      	movs	r3, #0
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	f002 0203 	and.w	r2, r2, #3
 8003df6:	0092      	lsls	r2, r2, #2
 8003df8:	4093      	lsls	r3, r2
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e00:	4934      	ldr	r1, [pc, #208]	; (8003ed4 <HAL_GPIO_Init+0x30c>)
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	089b      	lsrs	r3, r3, #2
 8003e06:	3302      	adds	r3, #2
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e0e:	4b3a      	ldr	r3, [pc, #232]	; (8003ef8 <HAL_GPIO_Init+0x330>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	43db      	mvns	r3, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e32:	4a31      	ldr	r2, [pc, #196]	; (8003ef8 <HAL_GPIO_Init+0x330>)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e38:	4b2f      	ldr	r3, [pc, #188]	; (8003ef8 <HAL_GPIO_Init+0x330>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e5c:	4a26      	ldr	r2, [pc, #152]	; (8003ef8 <HAL_GPIO_Init+0x330>)
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e62:	4b25      	ldr	r3, [pc, #148]	; (8003ef8 <HAL_GPIO_Init+0x330>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e86:	4a1c      	ldr	r2, [pc, #112]	; (8003ef8 <HAL_GPIO_Init+0x330>)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e8c:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <HAL_GPIO_Init+0x330>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	43db      	mvns	r3, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003eb0:	4a11      	ldr	r2, [pc, #68]	; (8003ef8 <HAL_GPIO_Init+0x330>)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	2b0f      	cmp	r3, #15
 8003ec0:	f67f ae90 	bls.w	8003be4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ec4:	bf00      	nop
 8003ec6:	3724      	adds	r7, #36	; 0x24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	40013800 	.word	0x40013800
 8003ed8:	40020000 	.word	0x40020000
 8003edc:	40020400 	.word	0x40020400
 8003ee0:	40020800 	.word	0x40020800
 8003ee4:	40020c00 	.word	0x40020c00
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	40021400 	.word	0x40021400
 8003ef0:	40021800 	.word	0x40021800
 8003ef4:	40021c00 	.word	0x40021c00
 8003ef8:	40013c00 	.word	0x40013c00

08003efc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	e0cd      	b.n	80040b4 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f18:	2201      	movs	r2, #1
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	4013      	ands	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	f040 80bd 	bne.w	80040ae <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003f34:	4a64      	ldr	r2, [pc, #400]	; (80040c8 <HAL_GPIO_DeInit+0x1cc>)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	089b      	lsrs	r3, r3, #2
 8003f3a:	3302      	adds	r3, #2
 8003f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f40:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	220f      	movs	r2, #15
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	4013      	ands	r3, r2
 8003f54:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a5c      	ldr	r2, [pc, #368]	; (80040cc <HAL_GPIO_DeInit+0x1d0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d02b      	beq.n	8003fb6 <HAL_GPIO_DeInit+0xba>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a5b      	ldr	r2, [pc, #364]	; (80040d0 <HAL_GPIO_DeInit+0x1d4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d025      	beq.n	8003fb2 <HAL_GPIO_DeInit+0xb6>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a5a      	ldr	r2, [pc, #360]	; (80040d4 <HAL_GPIO_DeInit+0x1d8>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d01f      	beq.n	8003fae <HAL_GPIO_DeInit+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a59      	ldr	r2, [pc, #356]	; (80040d8 <HAL_GPIO_DeInit+0x1dc>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d019      	beq.n	8003faa <HAL_GPIO_DeInit+0xae>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a58      	ldr	r2, [pc, #352]	; (80040dc <HAL_GPIO_DeInit+0x1e0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d013      	beq.n	8003fa6 <HAL_GPIO_DeInit+0xaa>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a57      	ldr	r2, [pc, #348]	; (80040e0 <HAL_GPIO_DeInit+0x1e4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00d      	beq.n	8003fa2 <HAL_GPIO_DeInit+0xa6>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a56      	ldr	r2, [pc, #344]	; (80040e4 <HAL_GPIO_DeInit+0x1e8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d007      	beq.n	8003f9e <HAL_GPIO_DeInit+0xa2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a55      	ldr	r2, [pc, #340]	; (80040e8 <HAL_GPIO_DeInit+0x1ec>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d101      	bne.n	8003f9a <HAL_GPIO_DeInit+0x9e>
 8003f96:	2307      	movs	r3, #7
 8003f98:	e00e      	b.n	8003fb8 <HAL_GPIO_DeInit+0xbc>
 8003f9a:	2308      	movs	r3, #8
 8003f9c:	e00c      	b.n	8003fb8 <HAL_GPIO_DeInit+0xbc>
 8003f9e:	2306      	movs	r3, #6
 8003fa0:	e00a      	b.n	8003fb8 <HAL_GPIO_DeInit+0xbc>
 8003fa2:	2305      	movs	r3, #5
 8003fa4:	e008      	b.n	8003fb8 <HAL_GPIO_DeInit+0xbc>
 8003fa6:	2304      	movs	r3, #4
 8003fa8:	e006      	b.n	8003fb8 <HAL_GPIO_DeInit+0xbc>
 8003faa:	2303      	movs	r3, #3
 8003fac:	e004      	b.n	8003fb8 <HAL_GPIO_DeInit+0xbc>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e002      	b.n	8003fb8 <HAL_GPIO_DeInit+0xbc>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <HAL_GPIO_DeInit+0xbc>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	f002 0203 	and.w	r2, r2, #3
 8003fbe:	0092      	lsls	r2, r2, #2
 8003fc0:	4093      	lsls	r3, r2
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d132      	bne.n	800402e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003fc8:	4b48      	ldr	r3, [pc, #288]	; (80040ec <HAL_GPIO_DeInit+0x1f0>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	4946      	ldr	r1, [pc, #280]	; (80040ec <HAL_GPIO_DeInit+0x1f0>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003fd6:	4b45      	ldr	r3, [pc, #276]	; (80040ec <HAL_GPIO_DeInit+0x1f0>)
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	4943      	ldr	r1, [pc, #268]	; (80040ec <HAL_GPIO_DeInit+0x1f0>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003fe4:	4b41      	ldr	r3, [pc, #260]	; (80040ec <HAL_GPIO_DeInit+0x1f0>)
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	43db      	mvns	r3, r3
 8003fec:	493f      	ldr	r1, [pc, #252]	; (80040ec <HAL_GPIO_DeInit+0x1f0>)
 8003fee:	4013      	ands	r3, r2
 8003ff0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003ff2:	4b3e      	ldr	r3, [pc, #248]	; (80040ec <HAL_GPIO_DeInit+0x1f0>)
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	493c      	ldr	r1, [pc, #240]	; (80040ec <HAL_GPIO_DeInit+0x1f0>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	220f      	movs	r2, #15
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004010:	4a2d      	ldr	r2, [pc, #180]	; (80040c8 <HAL_GPIO_DeInit+0x1cc>)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	089b      	lsrs	r3, r3, #2
 8004016:	3302      	adds	r3, #2
 8004018:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	43da      	mvns	r2, r3
 8004020:	4829      	ldr	r0, [pc, #164]	; (80040c8 <HAL_GPIO_DeInit+0x1cc>)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	089b      	lsrs	r3, r3, #2
 8004026:	400a      	ands	r2, r1
 8004028:	3302      	adds	r3, #2
 800402a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	2103      	movs	r1, #3
 8004038:	fa01 f303 	lsl.w	r3, r1, r3
 800403c:	43db      	mvns	r3, r3
 800403e:	401a      	ands	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	08da      	lsrs	r2, r3, #3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3208      	adds	r2, #8
 800404c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	220f      	movs	r2, #15
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43db      	mvns	r3, r3
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	08d2      	lsrs	r2, r2, #3
 8004064:	4019      	ands	r1, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	3208      	adds	r2, #8
 800406a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	2103      	movs	r1, #3
 8004078:	fa01 f303 	lsl.w	r3, r1, r3
 800407c:	43db      	mvns	r3, r3
 800407e:	401a      	ands	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	2101      	movs	r1, #1
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	fa01 f303 	lsl.w	r3, r1, r3
 8004090:	43db      	mvns	r3, r3
 8004092:	401a      	ands	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	2103      	movs	r1, #3
 80040a2:	fa01 f303 	lsl.w	r3, r1, r3
 80040a6:	43db      	mvns	r3, r3
 80040a8:	401a      	ands	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	3301      	adds	r3, #1
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2b0f      	cmp	r3, #15
 80040b8:	f67f af2e 	bls.w	8003f18 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	40013800 	.word	0x40013800
 80040cc:	40020000 	.word	0x40020000
 80040d0:	40020400 	.word	0x40020400
 80040d4:	40020800 	.word	0x40020800
 80040d8:	40020c00 	.word	0x40020c00
 80040dc:	40021000 	.word	0x40021000
 80040e0:	40021400 	.word	0x40021400
 80040e4:	40021800 	.word	0x40021800
 80040e8:	40021c00 	.word	0x40021c00
 80040ec:	40013c00 	.word	0x40013c00

080040f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	807b      	strh	r3, [r7, #2]
 80040fc:	4613      	mov	r3, r2
 80040fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004100:	787b      	ldrb	r3, [r7, #1]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004106:	887a      	ldrh	r2, [r7, #2]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800410c:	e003      	b.n	8004116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800410e:	887b      	ldrh	r3, [r7, #2]
 8004110:	041a      	lsls	r2, r3, #16
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	619a      	str	r2, [r3, #24]
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e11f      	b.n	8004376 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fc fe6a 	bl	8000e24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2224      	movs	r2, #36	; 0x24
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0201 	bic.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004176:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004186:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004188:	f003 fe74 	bl	8007e74 <HAL_RCC_GetPCLK1Freq>
 800418c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4a7b      	ldr	r2, [pc, #492]	; (8004380 <HAL_I2C_Init+0x25c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d807      	bhi.n	80041a8 <HAL_I2C_Init+0x84>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4a7a      	ldr	r2, [pc, #488]	; (8004384 <HAL_I2C_Init+0x260>)
 800419c:	4293      	cmp	r3, r2
 800419e:	bf94      	ite	ls
 80041a0:	2301      	movls	r3, #1
 80041a2:	2300      	movhi	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	e006      	b.n	80041b6 <HAL_I2C_Init+0x92>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4a77      	ldr	r2, [pc, #476]	; (8004388 <HAL_I2C_Init+0x264>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	bf94      	ite	ls
 80041b0:	2301      	movls	r3, #1
 80041b2:	2300      	movhi	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e0db      	b.n	8004376 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4a72      	ldr	r2, [pc, #456]	; (800438c <HAL_I2C_Init+0x268>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	0c9b      	lsrs	r3, r3, #18
 80041c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	4a64      	ldr	r2, [pc, #400]	; (8004380 <HAL_I2C_Init+0x25c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d802      	bhi.n	80041f8 <HAL_I2C_Init+0xd4>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	3301      	adds	r3, #1
 80041f6:	e009      	b.n	800420c <HAL_I2C_Init+0xe8>
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041fe:	fb02 f303 	mul.w	r3, r2, r3
 8004202:	4a63      	ldr	r2, [pc, #396]	; (8004390 <HAL_I2C_Init+0x26c>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	099b      	lsrs	r3, r3, #6
 800420a:	3301      	adds	r3, #1
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	430b      	orrs	r3, r1
 8004212:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800421e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	4956      	ldr	r1, [pc, #344]	; (8004380 <HAL_I2C_Init+0x25c>)
 8004228:	428b      	cmp	r3, r1
 800422a:	d80d      	bhi.n	8004248 <HAL_I2C_Init+0x124>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1e59      	subs	r1, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	fbb1 f3f3 	udiv	r3, r1, r3
 800423a:	3301      	adds	r3, #1
 800423c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004240:	2b04      	cmp	r3, #4
 8004242:	bf38      	it	cc
 8004244:	2304      	movcc	r3, #4
 8004246:	e04f      	b.n	80042e8 <HAL_I2C_Init+0x1c4>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d111      	bne.n	8004274 <HAL_I2C_Init+0x150>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1e58      	subs	r0, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6859      	ldr	r1, [r3, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	440b      	add	r3, r1
 800425e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004262:	3301      	adds	r3, #1
 8004264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004268:	2b00      	cmp	r3, #0
 800426a:	bf0c      	ite	eq
 800426c:	2301      	moveq	r3, #1
 800426e:	2300      	movne	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	e012      	b.n	800429a <HAL_I2C_Init+0x176>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	1e58      	subs	r0, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6859      	ldr	r1, [r3, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	0099      	lsls	r1, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	fbb0 f3f3 	udiv	r3, r0, r3
 800428a:	3301      	adds	r3, #1
 800428c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004290:	2b00      	cmp	r3, #0
 8004292:	bf0c      	ite	eq
 8004294:	2301      	moveq	r3, #1
 8004296:	2300      	movne	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <HAL_I2C_Init+0x17e>
 800429e:	2301      	movs	r3, #1
 80042a0:	e022      	b.n	80042e8 <HAL_I2C_Init+0x1c4>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10e      	bne.n	80042c8 <HAL_I2C_Init+0x1a4>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	1e58      	subs	r0, r3, #1
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6859      	ldr	r1, [r3, #4]
 80042b2:	460b      	mov	r3, r1
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	440b      	add	r3, r1
 80042b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80042bc:	3301      	adds	r3, #1
 80042be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c6:	e00f      	b.n	80042e8 <HAL_I2C_Init+0x1c4>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	1e58      	subs	r0, r3, #1
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6859      	ldr	r1, [r3, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	0099      	lsls	r1, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	fbb0 f3f3 	udiv	r3, r0, r3
 80042de:	3301      	adds	r3, #1
 80042e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	6809      	ldr	r1, [r1, #0]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69da      	ldr	r2, [r3, #28]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004316:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6911      	ldr	r1, [r2, #16]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	68d2      	ldr	r2, [r2, #12]
 8004322:	4311      	orrs	r1, r2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	430b      	orrs	r3, r1
 800432a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695a      	ldr	r2, [r3, #20]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	000186a0 	.word	0x000186a0
 8004384:	001e847f 	.word	0x001e847f
 8004388:	003d08ff 	.word	0x003d08ff
 800438c:	431bde83 	.word	0x431bde83
 8004390:	10624dd3 	.word	0x10624dd3

08004394 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af02      	add	r7, sp, #8
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	461a      	mov	r2, r3
 80043a0:	460b      	mov	r3, r1
 80043a2:	817b      	strh	r3, [r7, #10]
 80043a4:	4613      	mov	r3, r2
 80043a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043a8:	f7fe fca4 	bl	8002cf4 <HAL_GetTick>
 80043ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	f040 80e0 	bne.w	800457c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	2319      	movs	r3, #25
 80043c2:	2201      	movs	r2, #1
 80043c4:	4970      	ldr	r1, [pc, #448]	; (8004588 <HAL_I2C_Master_Transmit+0x1f4>)
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f001 fdf5 	bl	8005fb6 <I2C_WaitOnFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80043d2:	2302      	movs	r3, #2
 80043d4:	e0d3      	b.n	800457e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_I2C_Master_Transmit+0x50>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e0cc      	b.n	800457e <HAL_I2C_Master_Transmit+0x1ea>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d007      	beq.n	800440a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0201 	orr.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004418:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2221      	movs	r2, #33	; 0x21
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2210      	movs	r2, #16
 8004426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	893a      	ldrh	r2, [r7, #8]
 800443a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4a50      	ldr	r2, [pc, #320]	; (800458c <HAL_I2C_Master_Transmit+0x1f8>)
 800444a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800444c:	8979      	ldrh	r1, [r7, #10]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	6a3a      	ldr	r2, [r7, #32]
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f001 fcae 	bl	8005db4 <I2C_MasterRequestWrite>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e08d      	b.n	800457e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004462:	2300      	movs	r3, #0
 8004464:	613b      	str	r3, [r7, #16]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004478:	e066      	b.n	8004548 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	6a39      	ldr	r1, [r7, #32]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f001 fe6f 	bl	8006162 <I2C_WaitOnTXEFlagUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00d      	beq.n	80044a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	2b04      	cmp	r3, #4
 8004490:	d107      	bne.n	80044a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e06b      	b.n	800457e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	781a      	ldrb	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d11b      	bne.n	800451c <HAL_I2C_Master_Transmit+0x188>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d017      	beq.n	800451c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	781a      	ldrb	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	6a39      	ldr	r1, [r7, #32]
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f001 fe5f 	bl	80061e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00d      	beq.n	8004548 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	2b04      	cmp	r3, #4
 8004532:	d107      	bne.n	8004544 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004542:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e01a      	b.n	800457e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454c:	2b00      	cmp	r3, #0
 800454e:	d194      	bne.n	800447a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800455e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004578:	2300      	movs	r3, #0
 800457a:	e000      	b.n	800457e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800457c:	2302      	movs	r3, #2
  }
}
 800457e:	4618      	mov	r0, r3
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	00100002 	.word	0x00100002
 800458c:	ffff0000 	.word	0xffff0000

08004590 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	607a      	str	r2, [r7, #4]
 800459a:	461a      	mov	r2, r3
 800459c:	460b      	mov	r3, r1
 800459e:	817b      	strh	r3, [r7, #10]
 80045a0:	4613      	mov	r3, r2
 80045a2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	f040 8085 	bne.w	80046c0 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80045b6:	4b46      	ldr	r3, [pc, #280]	; (80046d0 <HAL_I2C_Master_Transmit_IT+0x140>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	08db      	lsrs	r3, r3, #3
 80045bc:	4a45      	ldr	r2, [pc, #276]	; (80046d4 <HAL_I2C_Master_Transmit_IT+0x144>)
 80045be:	fba2 2303 	umull	r2, r3, r2, r3
 80045c2:	0a1a      	lsrs	r2, r3, #8
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	009a      	lsls	r2, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d116      	bne.n	800460a <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f043 0220 	orr.w	r2, r3, #32
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e05b      	b.n	80046c2 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b02      	cmp	r3, #2
 8004616:	d0db      	beq.n	80045d0 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461e:	2b01      	cmp	r3, #1
 8004620:	d101      	bne.n	8004626 <HAL_I2C_Master_Transmit_IT+0x96>
 8004622:	2302      	movs	r3, #2
 8004624:	e04d      	b.n	80046c2 <HAL_I2C_Master_Transmit_IT+0x132>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	d007      	beq.n	800464c <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800465a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2221      	movs	r2, #33	; 0x21
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2210      	movs	r2, #16
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	893a      	ldrh	r2, [r7, #8]
 800467c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4a13      	ldr	r2, [pc, #76]	; (80046d8 <HAL_I2C_Master_Transmit_IT+0x148>)
 800468c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800468e:	897a      	ldrh	r2, [r7, #10]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046a2:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80046ba:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	e000      	b.n	80046c2 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 80046c0:	2302      	movs	r3, #2
  }
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	200000a8 	.word	0x200000a8
 80046d4:	14f8b589 	.word	0x14f8b589
 80046d8:	ffff0000 	.word	0xffff0000

080046dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046fc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004704:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	2b10      	cmp	r3, #16
 800470a:	d003      	beq.n	8004714 <HAL_I2C_EV_IRQHandler+0x38>
 800470c:	7bfb      	ldrb	r3, [r7, #15]
 800470e:	2b40      	cmp	r3, #64	; 0x40
 8004710:	f040 80b6 	bne.w	8004880 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10d      	bne.n	800474a <HAL_I2C_EV_IRQHandler+0x6e>
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004734:	d003      	beq.n	800473e <HAL_I2C_EV_IRQHandler+0x62>
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800473c:	d101      	bne.n	8004742 <HAL_I2C_EV_IRQHandler+0x66>
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <HAL_I2C_EV_IRQHandler+0x68>
 8004742:	2300      	movs	r3, #0
 8004744:	2b01      	cmp	r3, #1
 8004746:	f000 8127 	beq.w	8004998 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00c      	beq.n	800476e <HAL_I2C_EV_IRQHandler+0x92>
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	0a5b      	lsrs	r3, r3, #9
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d006      	beq.n	800476e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f001 fdaf 	bl	80062c4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fd12 	bl	8005190 <I2C_Master_SB>
 800476c:	e087      	b.n	800487e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	08db      	lsrs	r3, r3, #3
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <HAL_I2C_EV_IRQHandler+0xb2>
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	0a5b      	lsrs	r3, r3, #9
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fd88 	bl	800529c <I2C_Master_ADD10>
 800478c:	e077      	b.n	800487e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	085b      	lsrs	r3, r3, #1
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <HAL_I2C_EV_IRQHandler+0xd2>
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	0a5b      	lsrs	r3, r3, #9
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fda2 	bl	80052f0 <I2C_Master_ADDR>
 80047ac:	e067      	b.n	800487e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	089b      	lsrs	r3, r3, #2
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d030      	beq.n	800481c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047c8:	f000 80e8 	beq.w	800499c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	09db      	lsrs	r3, r3, #7
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00f      	beq.n	80047f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	0a9b      	lsrs	r3, r3, #10
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d009      	beq.n	80047f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	089b      	lsrs	r3, r3, #2
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d103      	bne.n	80047f8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f9de 	bl	8004bb2 <I2C_MasterTransmit_TXE>
 80047f6:	e042      	b.n	800487e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	089b      	lsrs	r3, r3, #2
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80cb 	beq.w	800499c <HAL_I2C_EV_IRQHandler+0x2c0>
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	0a5b      	lsrs	r3, r3, #9
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 80c4 	beq.w	800499c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fa68 	bl	8004cea <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800481a:	e0bf      	b.n	800499c <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800482a:	f000 80b7 	beq.w	800499c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	099b      	lsrs	r3, r3, #6
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00f      	beq.n	800485a <HAL_I2C_EV_IRQHandler+0x17e>
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	0a9b      	lsrs	r3, r3, #10
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <HAL_I2C_EV_IRQHandler+0x17e>
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	089b      	lsrs	r3, r3, #2
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d103      	bne.n	800485a <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fb30 	bl	8004eb8 <I2C_MasterReceive_RXNE>
 8004858:	e011      	b.n	800487e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	089b      	lsrs	r3, r3, #2
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 809a 	beq.w	800499c <HAL_I2C_EV_IRQHandler+0x2c0>
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	0a5b      	lsrs	r3, r3, #9
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 8093 	beq.w	800499c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fba0 	bl	8004fbc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800487c:	e08e      	b.n	800499c <HAL_I2C_EV_IRQHandler+0x2c0>
 800487e:	e08d      	b.n	800499c <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	d004      	beq.n	8004892 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	61fb      	str	r3, [r7, #28]
 8004890:	e007      	b.n	80048a2 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d012      	beq.n	80048d4 <HAL_I2C_EV_IRQHandler+0x1f8>
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	0a5b      	lsrs	r3, r3, #9
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00c      	beq.n	80048d4 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80048ca:	69b9      	ldr	r1, [r7, #24]
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 ff5e 	bl	800578e <I2C_Slave_ADDR>
 80048d2:	e066      	b.n	80049a2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	091b      	lsrs	r3, r3, #4
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d009      	beq.n	80048f4 <HAL_I2C_EV_IRQHandler+0x218>
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	0a5b      	lsrs	r3, r3, #9
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 ff93 	bl	8005818 <I2C_Slave_STOPF>
 80048f2:	e056      	b.n	80049a2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048f4:	7bbb      	ldrb	r3, [r7, #14]
 80048f6:	2b21      	cmp	r3, #33	; 0x21
 80048f8:	d002      	beq.n	8004900 <HAL_I2C_EV_IRQHandler+0x224>
 80048fa:	7bbb      	ldrb	r3, [r7, #14]
 80048fc:	2b29      	cmp	r3, #41	; 0x29
 80048fe:	d125      	bne.n	800494c <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	09db      	lsrs	r3, r3, #7
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00f      	beq.n	800492c <HAL_I2C_EV_IRQHandler+0x250>
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	0a9b      	lsrs	r3, r3, #10
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d009      	beq.n	800492c <HAL_I2C_EV_IRQHandler+0x250>
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	089b      	lsrs	r3, r3, #2
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d103      	bne.n	800492c <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fe74 	bl	8005612 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800492a:	e039      	b.n	80049a0 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	089b      	lsrs	r3, r3, #2
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d033      	beq.n	80049a0 <HAL_I2C_EV_IRQHandler+0x2c4>
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	0a5b      	lsrs	r3, r3, #9
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d02d      	beq.n	80049a0 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 fea1 	bl	800568c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800494a:	e029      	b.n	80049a0 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	099b      	lsrs	r3, r3, #6
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00f      	beq.n	8004978 <HAL_I2C_EV_IRQHandler+0x29c>
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	0a9b      	lsrs	r3, r3, #10
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	d009      	beq.n	8004978 <HAL_I2C_EV_IRQHandler+0x29c>
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	089b      	lsrs	r3, r3, #2
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d103      	bne.n	8004978 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 feac 	bl	80056ce <I2C_SlaveReceive_RXNE>
 8004976:	e014      	b.n	80049a2 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	089b      	lsrs	r3, r3, #2
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00e      	beq.n	80049a2 <HAL_I2C_EV_IRQHandler+0x2c6>
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	0a5b      	lsrs	r3, r3, #9
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 feda 	bl	800574a <I2C_SlaveReceive_BTF>
 8004996:	e004      	b.n	80049a2 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8004998:	bf00      	nop
 800499a:	e002      	b.n	80049a2 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800499c:	bf00      	nop
 800499e:	e000      	b.n	80049a2 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049a0:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80049a2:	3720      	adds	r7, #32
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08a      	sub	sp, #40	; 0x28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80049c0:	2300      	movs	r3, #0
 80049c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ca:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	0a1b      	lsrs	r3, r3, #8
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00e      	beq.n	80049f6 <HAL_I2C_ER_IRQHandler+0x4e>
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	0a1b      	lsrs	r3, r3, #8
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d008      	beq.n	80049f6 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049f4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	0a5b      	lsrs	r3, r3, #9
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00e      	beq.n	8004a20 <HAL_I2C_ER_IRQHandler+0x78>
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	0a1b      	lsrs	r3, r3, #8
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d008      	beq.n	8004a20 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	f043 0302 	orr.w	r3, r3, #2
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004a1e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	0a9b      	lsrs	r3, r3, #10
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d03f      	beq.n	8004aac <HAL_I2C_ER_IRQHandler+0x104>
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	0a1b      	lsrs	r3, r3, #8
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d039      	beq.n	8004aac <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004a38:	7efb      	ldrb	r3, [r7, #27]
 8004a3a:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4a:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a50:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004a52:	7ebb      	ldrb	r3, [r7, #26]
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d112      	bne.n	8004a7e <HAL_I2C_ER_IRQHandler+0xd6>
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10f      	bne.n	8004a7e <HAL_I2C_ER_IRQHandler+0xd6>
 8004a5e:	7cfb      	ldrb	r3, [r7, #19]
 8004a60:	2b21      	cmp	r3, #33	; 0x21
 8004a62:	d008      	beq.n	8004a76 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004a64:	7cfb      	ldrb	r3, [r7, #19]
 8004a66:	2b29      	cmp	r3, #41	; 0x29
 8004a68:	d005      	beq.n	8004a76 <HAL_I2C_ER_IRQHandler+0xce>
 8004a6a:	7cfb      	ldrb	r3, [r7, #19]
 8004a6c:	2b28      	cmp	r3, #40	; 0x28
 8004a6e:	d106      	bne.n	8004a7e <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2b21      	cmp	r3, #33	; 0x21
 8004a74:	d103      	bne.n	8004a7e <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fffe 	bl	8005a78 <I2C_Slave_AF>
 8004a7c:	e016      	b.n	8004aac <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a86:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	f043 0304 	orr.w	r3, r3, #4
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a90:	7efb      	ldrb	r3, [r7, #27]
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d002      	beq.n	8004a9c <HAL_I2C_ER_IRQHandler+0xf4>
 8004a96:	7efb      	ldrb	r3, [r7, #27]
 8004a98:	2b40      	cmp	r3, #64	; 0x40
 8004a9a:	d107      	bne.n	8004aac <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aaa:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	0adb      	lsrs	r3, r3, #11
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00e      	beq.n	8004ad6 <HAL_I2C_ER_IRQHandler+0x12e>
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	0a1b      	lsrs	r3, r3, #8
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d008      	beq.n	8004ad6 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	f043 0308 	orr.w	r3, r3, #8
 8004aca:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004ad4:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f001 f835 	bl	8005b58 <I2C_ITError>
  }
}
 8004aee:	bf00      	nop
 8004af0:	3728      	adds	r7, #40	; 0x28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	70fb      	strb	r3, [r7, #3]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bc8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d150      	bne.n	8004c7a <I2C_MasterTransmit_TXE+0xc8>
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	2b21      	cmp	r3, #33	; 0x21
 8004bdc:	d14d      	bne.n	8004c7a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d01d      	beq.n	8004c20 <I2C_MasterTransmit_TXE+0x6e>
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b20      	cmp	r3, #32
 8004be8:	d01a      	beq.n	8004c20 <I2C_MasterTransmit_TXE+0x6e>
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bf0:	d016      	beq.n	8004c20 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c00:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2211      	movs	r2, #17
 8004c06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7fd faad 	bl	8002178 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c1e:	e060      	b.n	8004ce2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c2e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c3e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b40      	cmp	r3, #64	; 0x40
 8004c58:	d107      	bne.n	8004c6a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7ff ff7d 	bl	8004b62 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c68:	e03b      	b.n	8004ce2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fd fa80 	bl	8002178 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c78:	e033      	b.n	8004ce2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
 8004c7c:	2b21      	cmp	r3, #33	; 0x21
 8004c7e:	d005      	beq.n	8004c8c <I2C_MasterTransmit_TXE+0xda>
 8004c80:	7bbb      	ldrb	r3, [r7, #14]
 8004c82:	2b40      	cmp	r3, #64	; 0x40
 8004c84:	d12d      	bne.n	8004ce2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
 8004c88:	2b22      	cmp	r3, #34	; 0x22
 8004c8a:	d12a      	bne.n	8004ce2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d108      	bne.n	8004ca8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004ca6:	e01c      	b.n	8004ce2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b40      	cmp	r3, #64	; 0x40
 8004cb2:	d103      	bne.n	8004cbc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f898 	bl	8004dea <I2C_MemoryTransmit_TXE_BTF>
}
 8004cba:	e012      	b.n	8004ce2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	781a      	ldrb	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ce0:	e7ff      	b.n	8004ce2 <I2C_MasterTransmit_TXE+0x130>
 8004ce2:	bf00      	nop
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b21      	cmp	r3, #33	; 0x21
 8004d02:	d165      	bne.n	8004dd0 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d012      	beq.n	8004d34 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	781a      	ldrb	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004d32:	e056      	b.n	8004de2 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d01d      	beq.n	8004d76 <I2C_MasterTransmit_BTF+0x8c>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d01a      	beq.n	8004d76 <I2C_MasterTransmit_BTF+0x8c>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d46:	d016      	beq.n	8004d76 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d56:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2211      	movs	r2, #17
 8004d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7fd fa02 	bl	8002178 <HAL_I2C_MasterTxCpltCallback>
}
 8004d74:	e035      	b.n	8004de2 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d84:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d94:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b40      	cmp	r3, #64	; 0x40
 8004dae:	d107      	bne.n	8004dc0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7ff fed2 	bl	8004b62 <HAL_I2C_MemTxCpltCallback>
}
 8004dbe:	e010      	b.n	8004de2 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7fd f9d5 	bl	8002178 <HAL_I2C_MasterTxCpltCallback>
}
 8004dce:	e008      	b.n	8004de2 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	d102      	bne.n	8004de2 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f804 	bl	8004dea <I2C_MemoryTransmit_TXE_BTF>
}
 8004de2:	bf00      	nop
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d11d      	bne.n	8004e36 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d10b      	bne.n	8004e1a <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e12:	1c9a      	adds	r2, r3, #2
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004e18:	e048      	b.n	8004eac <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	121b      	asrs	r3, r3, #8
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e34:	e03a      	b.n	8004eac <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d10b      	bne.n	8004e56 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e54:	e02a      	b.n	8004eac <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d126      	bne.n	8004eac <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b22      	cmp	r3, #34	; 0x22
 8004e68:	d108      	bne.n	8004e7c <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e78:	601a      	str	r2, [r3, #0]
}
 8004e7a:	e017      	b.n	8004eac <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b21      	cmp	r3, #33	; 0x21
 8004e86:	d111      	bne.n	8004eac <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	781a      	ldrb	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b22      	cmp	r3, #34	; 0x22
 8004eca:	d173      	bne.n	8004fb4 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d920      	bls.n	8004f1c <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d154      	bne.n	8004fb4 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f18:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004f1a:	e04b      	b.n	8004fb4 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d047      	beq.n	8004fb4 <I2C_MasterReceive_RXNE+0xfc>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d002      	beq.n	8004f30 <I2C_MasterReceive_RXNE+0x78>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d141      	bne.n	8004fb4 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f3e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f4e:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691a      	ldr	r2, [r3, #16]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b40      	cmp	r3, #64	; 0x40
 8004f88:	d10a      	bne.n	8004fa0 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff fdec 	bl	8004b76 <HAL_I2C_MemRxCpltCallback>
}
 8004f9e:	e009      	b.n	8004fb4 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2212      	movs	r2, #18
 8004fac:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff fda1 	bl	8004af6 <HAL_I2C_MasterRxCpltCallback>
}
 8004fb4:	bf00      	nop
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d11b      	bne.n	800500c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691a      	ldr	r2, [r3, #16]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005000:	b29b      	uxth	r3, r3
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800500a:	e0bd      	b.n	8005188 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005010:	b29b      	uxth	r3, r3
 8005012:	2b03      	cmp	r3, #3
 8005014:	d129      	bne.n	800506a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005024:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b04      	cmp	r3, #4
 800502a:	d00a      	beq.n	8005042 <I2C_MasterReceive_BTF+0x86>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d007      	beq.n	8005042 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005040:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	691a      	ldr	r2, [r3, #16]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505e:	b29b      	uxth	r3, r3
 8005060:	3b01      	subs	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005068:	e08e      	b.n	8005188 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d176      	bne.n	8005162 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d002      	beq.n	8005080 <I2C_MasterReceive_BTF+0xc4>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b10      	cmp	r3, #16
 800507e:	d108      	bne.n	8005092 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	e019      	b.n	80050c6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b04      	cmp	r3, #4
 8005096:	d002      	beq.n	800509e <I2C_MasterReceive_BTF+0xe2>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d108      	bne.n	80050b0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	e00a      	b.n	80050c6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b10      	cmp	r3, #16
 80050b4:	d007      	beq.n	80050c6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	691a      	ldr	r2, [r3, #16]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691a      	ldr	r2, [r3, #16]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005120:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2220      	movs	r2, #32
 8005126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b40      	cmp	r3, #64	; 0x40
 8005134:	d10a      	bne.n	800514c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff fd16 	bl	8004b76 <HAL_I2C_MemRxCpltCallback>
}
 800514a:	e01d      	b.n	8005188 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2212      	movs	r2, #18
 8005158:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7ff fccb 	bl	8004af6 <HAL_I2C_MasterRxCpltCallback>
}
 8005160:	e012      	b.n	8005188 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	691a      	ldr	r2, [r3, #16]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517e:	b29b      	uxth	r3, r3
 8005180:	3b01      	subs	r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005188:	bf00      	nop
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b40      	cmp	r3, #64	; 0x40
 80051a2:	d117      	bne.n	80051d4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d109      	bne.n	80051c0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	461a      	mov	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051bc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80051be:	e067      	b.n	8005290 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	f043 0301 	orr.w	r3, r3, #1
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	611a      	str	r2, [r3, #16]
}
 80051d2:	e05d      	b.n	8005290 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051dc:	d133      	bne.n	8005246 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b21      	cmp	r3, #33	; 0x21
 80051e8:	d109      	bne.n	80051fe <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	461a      	mov	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051fa:	611a      	str	r2, [r3, #16]
 80051fc:	e008      	b.n	8005210 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005202:	b2db      	uxtb	r3, r3
 8005204:	f043 0301 	orr.w	r3, r3, #1
 8005208:	b2da      	uxtb	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005214:	2b00      	cmp	r3, #0
 8005216:	d004      	beq.n	8005222 <I2C_Master_SB+0x92>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d108      	bne.n	8005234 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	2b00      	cmp	r3, #0
 8005228:	d032      	beq.n	8005290 <I2C_Master_SB+0x100>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005230:	2b00      	cmp	r3, #0
 8005232:	d02d      	beq.n	8005290 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005242:	605a      	str	r2, [r3, #4]
}
 8005244:	e024      	b.n	8005290 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10e      	bne.n	800526c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005252:	b29b      	uxth	r3, r3
 8005254:	11db      	asrs	r3, r3, #7
 8005256:	b2db      	uxtb	r3, r3
 8005258:	f003 0306 	and.w	r3, r3, #6
 800525c:	b2db      	uxtb	r3, r3
 800525e:	f063 030f 	orn	r3, r3, #15
 8005262:	b2da      	uxtb	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	611a      	str	r2, [r3, #16]
}
 800526a:	e011      	b.n	8005290 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005270:	2b01      	cmp	r3, #1
 8005272:	d10d      	bne.n	8005290 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005278:	b29b      	uxth	r3, r3
 800527a:	11db      	asrs	r3, r3, #7
 800527c:	b2db      	uxtb	r3, r3
 800527e:	f003 0306 	and.w	r3, r3, #6
 8005282:	b2db      	uxtb	r3, r3
 8005284:	f063 030e 	orn	r3, r3, #14
 8005288:	b2da      	uxtb	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	611a      	str	r2, [r3, #16]
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d103      	bne.n	80052c0 <I2C_Master_ADD10+0x24>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d011      	beq.n	80052e4 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d104      	bne.n	80052d4 <I2C_Master_ADD10+0x38>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d007      	beq.n	80052e4 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052e2:	605a      	str	r2, [r3, #4]
    }
  }
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b091      	sub	sp, #68	; 0x44
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005306:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b22      	cmp	r3, #34	; 0x22
 8005318:	f040 8169 	bne.w	80055ee <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10f      	bne.n	8005344 <I2C_Master_ADDR+0x54>
 8005324:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005328:	2b40      	cmp	r3, #64	; 0x40
 800532a:	d10b      	bne.n	8005344 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800532c:	2300      	movs	r3, #0
 800532e:	633b      	str	r3, [r7, #48]	; 0x30
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	633b      	str	r3, [r7, #48]	; 0x30
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	633b      	str	r3, [r7, #48]	; 0x30
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	e160      	b.n	8005606 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005348:	2b00      	cmp	r3, #0
 800534a:	d11d      	bne.n	8005388 <I2C_Master_ADDR+0x98>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005354:	d118      	bne.n	8005388 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005356:	2300      	movs	r3, #0
 8005358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800536a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800537a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	651a      	str	r2, [r3, #80]	; 0x50
 8005386:	e13e      	b.n	8005606 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d113      	bne.n	80053ba <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005392:	2300      	movs	r3, #0
 8005394:	62bb      	str	r3, [r7, #40]	; 0x28
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	e115      	b.n	80055e6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	f040 808a 	bne.w	80054da <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80053c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053cc:	d137      	bne.n	800543e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053dc:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ec:	d113      	bne.n	8005416 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053fc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053fe:	2300      	movs	r3, #0
 8005400:	627b      	str	r3, [r7, #36]	; 0x24
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	e0e7      	b.n	80055e6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005416:	2300      	movs	r3, #0
 8005418:	623b      	str	r3, [r7, #32]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	623b      	str	r3, [r7, #32]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	623b      	str	r3, [r7, #32]
 800542a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	e0d3      	b.n	80055e6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800543e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005440:	2b08      	cmp	r3, #8
 8005442:	d02e      	beq.n	80054a2 <I2C_Master_ADDR+0x1b2>
 8005444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005446:	2b20      	cmp	r3, #32
 8005448:	d02b      	beq.n	80054a2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800544a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544c:	2b12      	cmp	r3, #18
 800544e:	d102      	bne.n	8005456 <I2C_Master_ADDR+0x166>
 8005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005452:	2b01      	cmp	r3, #1
 8005454:	d125      	bne.n	80054a2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	2b04      	cmp	r3, #4
 800545a:	d00e      	beq.n	800547a <I2C_Master_ADDR+0x18a>
 800545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545e:	2b02      	cmp	r3, #2
 8005460:	d00b      	beq.n	800547a <I2C_Master_ADDR+0x18a>
 8005462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005464:	2b10      	cmp	r3, #16
 8005466:	d008      	beq.n	800547a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	e007      	b.n	800548a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005488:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800548a:	2300      	movs	r3, #0
 800548c:	61fb      	str	r3, [r7, #28]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	61fb      	str	r3, [r7, #28]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	61fb      	str	r3, [r7, #28]
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	e0a1      	b.n	80055e6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054b0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054b2:	2300      	movs	r3, #0
 80054b4:	61bb      	str	r3, [r7, #24]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	61bb      	str	r3, [r7, #24]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	61bb      	str	r3, [r7, #24]
 80054c6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	e085      	b.n	80055e6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054de:	b29b      	uxth	r3, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d14d      	bne.n	8005580 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80054e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d016      	beq.n	8005518 <I2C_Master_ADDR+0x228>
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d013      	beq.n	8005518 <I2C_Master_ADDR+0x228>
 80054f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f2:	2b10      	cmp	r3, #16
 80054f4:	d010      	beq.n	8005518 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005504:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	e007      	b.n	8005528 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005526:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005536:	d117      	bne.n	8005568 <I2C_Master_ADDR+0x278>
 8005538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800553e:	d00b      	beq.n	8005558 <I2C_Master_ADDR+0x268>
 8005540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005542:	2b01      	cmp	r3, #1
 8005544:	d008      	beq.n	8005558 <I2C_Master_ADDR+0x268>
 8005546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005548:	2b08      	cmp	r3, #8
 800554a:	d005      	beq.n	8005558 <I2C_Master_ADDR+0x268>
 800554c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554e:	2b10      	cmp	r3, #16
 8005550:	d002      	beq.n	8005558 <I2C_Master_ADDR+0x268>
 8005552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005554:	2b20      	cmp	r3, #32
 8005556:	d107      	bne.n	8005568 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005566:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005568:	2300      	movs	r3, #0
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	e032      	b.n	80055e6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800558e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800559a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800559e:	d117      	bne.n	80055d0 <I2C_Master_ADDR+0x2e0>
 80055a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055a6:	d00b      	beq.n	80055c0 <I2C_Master_ADDR+0x2d0>
 80055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d008      	beq.n	80055c0 <I2C_Master_ADDR+0x2d0>
 80055ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d005      	beq.n	80055c0 <I2C_Master_ADDR+0x2d0>
 80055b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b6:	2b10      	cmp	r3, #16
 80055b8:	d002      	beq.n	80055c0 <I2C_Master_ADDR+0x2d0>
 80055ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d107      	bne.n	80055d0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055ce:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d0:	2300      	movs	r3, #0
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80055ec:	e00b      	b.n	8005606 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	60fb      	str	r3, [r7, #12]
 8005602:	68fb      	ldr	r3, [r7, #12]
}
 8005604:	e7ff      	b.n	8005606 <I2C_Master_ADDR+0x316>
 8005606:	bf00      	nop
 8005608:	3744      	adds	r7, #68	; 0x44
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b084      	sub	sp, #16
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005620:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005626:	b29b      	uxth	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d02b      	beq.n	8005684 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	781a      	ldrb	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005646:	b29b      	uxth	r3, r3
 8005648:	3b01      	subs	r3, #1
 800564a:	b29a      	uxth	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d114      	bne.n	8005684 <I2C_SlaveTransmit_TXE+0x72>
 800565a:	7bfb      	ldrb	r3, [r7, #15]
 800565c:	2b29      	cmp	r3, #41	; 0x29
 800565e:	d111      	bne.n	8005684 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800566e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2221      	movs	r2, #33	; 0x21
 8005674:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2228      	movs	r2, #40	; 0x28
 800567a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff fa43 	bl	8004b0a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005684:	bf00      	nop
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d011      	beq.n	80056c2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	781a      	ldrb	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80056c2:	bf00      	nop
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056dc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d02c      	beq.n	8005742 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	691a      	ldr	r2, [r3, #16]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	1c5a      	adds	r2, r3, #1
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005704:	b29b      	uxth	r3, r3
 8005706:	3b01      	subs	r3, #1
 8005708:	b29a      	uxth	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005712:	b29b      	uxth	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d114      	bne.n	8005742 <I2C_SlaveReceive_RXNE+0x74>
 8005718:	7bfb      	ldrb	r3, [r7, #15]
 800571a:	2b2a      	cmp	r3, #42	; 0x2a
 800571c:	d111      	bne.n	8005742 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800572c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2222      	movs	r2, #34	; 0x22
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2228      	movs	r2, #40	; 0x28
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7ff f9ee 	bl	8004b1e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005742:	bf00      	nop
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d012      	beq.n	8005782 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691a      	ldr	r2, [r3, #16]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005778:	b29b      	uxth	r3, r3
 800577a:	3b01      	subs	r3, #1
 800577c:	b29a      	uxth	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b084      	sub	sp, #16
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005798:	2300      	movs	r3, #0
 800579a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057a8:	2b28      	cmp	r3, #40	; 0x28
 80057aa:	d127      	bne.n	80057fc <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ba:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	089b      	lsrs	r3, r3, #2
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80057c8:	2301      	movs	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	09db      	lsrs	r3, r3, #7
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d103      	bne.n	80057e0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	81bb      	strh	r3, [r7, #12]
 80057de:	e002      	b.n	80057e6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80057ee:	89ba      	ldrh	r2, [r7, #12]
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	4619      	mov	r1, r3
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff f99c 	bl	8004b32 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80057fa:	e008      	b.n	800580e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f06f 0202 	mvn.w	r2, #2
 8005804:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800580e:	bf00      	nop
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005826:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005836:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005838:	2300      	movs	r3, #0
 800583a:	60bb      	str	r3, [r7, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	60bb      	str	r3, [r7, #8]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005864:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005874:	d172      	bne.n	800595c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005876:	7bfb      	ldrb	r3, [r7, #15]
 8005878:	2b22      	cmp	r3, #34	; 0x22
 800587a:	d002      	beq.n	8005882 <I2C_Slave_STOPF+0x6a>
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	2b2a      	cmp	r3, #42	; 0x2a
 8005880:	d135      	bne.n	80058ee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	b29a      	uxth	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d005      	beq.n	80058a6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	f043 0204 	orr.w	r2, r3, #4
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fe f975 	bl	8003baa <HAL_DMA_GetState>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d049      	beq.n	800595a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ca:	4a69      	ldr	r2, [pc, #420]	; (8005a70 <I2C_Slave_STOPF+0x258>)
 80058cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fe f947 	bl	8003b66 <HAL_DMA_Abort_IT>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d03d      	beq.n	800595a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058e8:	4610      	mov	r0, r2
 80058ea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058ec:	e035      	b.n	800595a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d005      	beq.n	8005912 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	f043 0204 	orr.w	r2, r3, #4
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005920:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005926:	4618      	mov	r0, r3
 8005928:	f7fe f93f 	bl	8003baa <HAL_DMA_GetState>
 800592c:	4603      	mov	r3, r0
 800592e:	2b01      	cmp	r3, #1
 8005930:	d014      	beq.n	800595c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005936:	4a4e      	ldr	r2, [pc, #312]	; (8005a70 <I2C_Slave_STOPF+0x258>)
 8005938:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593e:	4618      	mov	r0, r3
 8005940:	f7fe f911 	bl	8003b66 <HAL_DMA_Abort_IT>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d008      	beq.n	800595c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005954:	4610      	mov	r0, r2
 8005956:	4798      	blx	r3
 8005958:	e000      	b.n	800595c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800595a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d03e      	beq.n	80059e4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b04      	cmp	r3, #4
 8005972:	d112      	bne.n	800599a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	691a      	ldr	r2, [r3, #16]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	b29a      	uxth	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a4:	2b40      	cmp	r3, #64	; 0x40
 80059a6:	d112      	bne.n	80059ce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691a      	ldr	r2, [r3, #16]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	f043 0204 	orr.w	r2, r3, #4
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f8b3 	bl	8005b58 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80059f2:	e039      	b.n	8005a68 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
 80059f6:	2b2a      	cmp	r3, #42	; 0x2a
 80059f8:	d109      	bne.n	8005a0e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2228      	movs	r2, #40	; 0x28
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff f888 	bl	8004b1e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b28      	cmp	r3, #40	; 0x28
 8005a18:	d111      	bne.n	8005a3e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a15      	ldr	r2, [pc, #84]	; (8005a74 <I2C_Slave_STOPF+0x25c>)
 8005a1e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7ff f889 	bl	8004b4e <HAL_I2C_ListenCpltCallback>
}
 8005a3c:	e014      	b.n	8005a68 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	2b22      	cmp	r3, #34	; 0x22
 8005a44:	d002      	beq.n	8005a4c <I2C_Slave_STOPF+0x234>
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
 8005a48:	2b22      	cmp	r3, #34	; 0x22
 8005a4a:	d10d      	bne.n	8005a68 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7ff f85b 	bl	8004b1e <HAL_I2C_SlaveRxCpltCallback>
}
 8005a68:	bf00      	nop
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	08005eb9 	.word	0x08005eb9
 8005a74:	ffff0000 	.word	0xffff0000

08005a78 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a86:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d002      	beq.n	8005a9a <I2C_Slave_AF+0x22>
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b20      	cmp	r3, #32
 8005a98:	d129      	bne.n	8005aee <I2C_Slave_AF+0x76>
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
 8005a9c:	2b28      	cmp	r3, #40	; 0x28
 8005a9e:	d126      	bne.n	8005aee <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a2c      	ldr	r2, [pc, #176]	; (8005b54 <I2C_Slave_AF+0xdc>)
 8005aa4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ab4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005abe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ace:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7ff f831 	bl	8004b4e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005aec:	e02e      	b.n	8005b4c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	2b21      	cmp	r3, #33	; 0x21
 8005af2:	d126      	bne.n	8005b42 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a17      	ldr	r2, [pc, #92]	; (8005b54 <I2C_Slave_AF+0xdc>)
 8005af8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2221      	movs	r2, #33	; 0x21
 8005afe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b1e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b28:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b38:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7fe ffe5 	bl	8004b0a <HAL_I2C_SlaveTxCpltCallback>
}
 8005b40:	e004      	b.n	8005b4c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b4a:	615a      	str	r2, [r3, #20]
}
 8005b4c:	bf00      	nop
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	ffff0000 	.word	0xffff0000

08005b58 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b66:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b10      	cmp	r3, #16
 8005b72:	d10a      	bne.n	8005b8a <I2C_ITError+0x32>
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	2b22      	cmp	r3, #34	; 0x22
 8005b78:	d107      	bne.n	8005b8a <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b88:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b90:	2b28      	cmp	r3, #40	; 0x28
 8005b92:	d107      	bne.n	8005ba4 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2228      	movs	r2, #40	; 0x28
 8005b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ba2:	e015      	b.n	8005bd0 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb2:	d006      	beq.n	8005bc2 <I2C_ITError+0x6a>
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
 8005bb6:	2b60      	cmp	r3, #96	; 0x60
 8005bb8:	d003      	beq.n	8005bc2 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bde:	d162      	bne.n	8005ca6 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d020      	beq.n	8005c40 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c02:	4a6a      	ldr	r2, [pc, #424]	; (8005dac <I2C_ITError+0x254>)
 8005c04:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fd ffab 	bl	8003b66 <HAL_DMA_Abort_IT>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 8089 	beq.w	8005d2a <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0201 	bic.w	r2, r2, #1
 8005c26:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	4798      	blx	r3
 8005c3e:	e074      	b.n	8005d2a <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c44:	4a59      	ldr	r2, [pc, #356]	; (8005dac <I2C_ITError+0x254>)
 8005c46:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fd ff8a 	bl	8003b66 <HAL_DMA_Abort_IT>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d068      	beq.n	8005d2a <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c62:	2b40      	cmp	r3, #64	; 0x40
 8005c64:	d10b      	bne.n	8005c7e <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	691a      	ldr	r2, [r3, #16]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0201 	bic.w	r2, r2, #1
 8005c8c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	4798      	blx	r3
 8005ca4:	e041      	b.n	8005d2a <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b60      	cmp	r3, #96	; 0x60
 8005cb0:	d125      	bne.n	8005cfe <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cca:	2b40      	cmp	r3, #64	; 0x40
 8005ccc:	d10b      	bne.n	8005ce6 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	b2d2      	uxtb	r2, r2
 8005cda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0201 	bic.w	r2, r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fe ff51 	bl	8004b9e <HAL_I2C_AbortCpltCallback>
 8005cfc:	e015      	b.n	8005d2a <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d08:	2b40      	cmp	r3, #64	; 0x40
 8005d0a:	d10b      	bne.n	8005d24 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	691a      	ldr	r2, [r3, #16]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	1c5a      	adds	r2, r3, #1
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7fe ff30 	bl	8004b8a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10e      	bne.n	8005d58 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d109      	bne.n	8005d58 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d104      	bne.n	8005d58 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d007      	beq.n	8005d68 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d66:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d6e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b04      	cmp	r3, #4
 8005d7a:	d113      	bne.n	8005da4 <I2C_ITError+0x24c>
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
 8005d7e:	2b28      	cmp	r3, #40	; 0x28
 8005d80:	d110      	bne.n	8005da4 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a0a      	ldr	r2, [pc, #40]	; (8005db0 <I2C_ITError+0x258>)
 8005d86:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7fe fed5 	bl	8004b4e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005da4:	bf00      	nop
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	08005eb9 	.word	0x08005eb9
 8005db0:	ffff0000 	.word	0xffff0000

08005db4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b088      	sub	sp, #32
 8005db8:	af02      	add	r7, sp, #8
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	607a      	str	r2, [r7, #4]
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d006      	beq.n	8005dde <I2C_MasterRequestWrite+0x2a>
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d003      	beq.n	8005dde <I2C_MasterRequestWrite+0x2a>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ddc:	d108      	bne.n	8005df0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	e00b      	b.n	8005e08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df4:	2b12      	cmp	r3, #18
 8005df6:	d107      	bne.n	8005e08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f8ce 	bl	8005fb6 <I2C_WaitOnFlagUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00c      	beq.n	8005e3a <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e035      	b.n	8005ea6 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e42:	d108      	bne.n	8005e56 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e44:	897b      	ldrh	r3, [r7, #10]
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	461a      	mov	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e52:	611a      	str	r2, [r3, #16]
 8005e54:	e01b      	b.n	8005e8e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005e56:	897b      	ldrh	r3, [r7, #10]
 8005e58:	11db      	asrs	r3, r3, #7
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	f003 0306 	and.w	r3, r3, #6
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	f063 030f 	orn	r3, r3, #15
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	490f      	ldr	r1, [pc, #60]	; (8005eb0 <I2C_MasterRequestWrite+0xfc>)
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 f8f5 	bl	8006064 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e010      	b.n	8005ea6 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e84:	897b      	ldrh	r3, [r7, #10]
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	4908      	ldr	r1, [pc, #32]	; (8005eb4 <I2C_MasterRequestWrite+0x100>)
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 f8e5 	bl	8006064 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e000      	b.n	8005ea6 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	00010008 	.word	0x00010008
 8005eb4:	00010002 	.word	0x00010002

08005eb8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ecc:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eda:	2200      	movs	r2, #0
 8005edc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eea:	2200      	movs	r2, #0
 8005eec:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005efc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f10:	2200      	movs	r2, #0
 8005f12:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f20:	2200      	movs	r2, #0
 8005f22:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0201 	bic.w	r2, r2, #1
 8005f32:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b60      	cmp	r3, #96	; 0x60
 8005f3e:	d10e      	bne.n	8005f5e <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f7fe fe21 	bl	8004b9e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f5c:	e027      	b.n	8005fae <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f5e:	7afb      	ldrb	r3, [r7, #11]
 8005f60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f64:	2b28      	cmp	r3, #40	; 0x28
 8005f66:	d117      	bne.n	8005f98 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0201 	orr.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f86:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2228      	movs	r2, #40	; 0x28
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f96:	e007      	b.n	8005fa8 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7fe fdee 	bl	8004b8a <HAL_I2C_ErrorCallback>
}
 8005fae:	bf00      	nop
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	603b      	str	r3, [r7, #0]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fc6:	e025      	b.n	8006014 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fce:	d021      	beq.n	8006014 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd0:	f7fc fe90 	bl	8002cf4 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d302      	bcc.n	8005fe6 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d116      	bne.n	8006014 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	f043 0220 	orr.w	r2, r3, #32
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e023      	b.n	800605c <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	0c1b      	lsrs	r3, r3, #16
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b01      	cmp	r3, #1
 800601c:	d10d      	bne.n	800603a <I2C_WaitOnFlagUntilTimeout+0x84>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	43da      	mvns	r2, r3
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	4013      	ands	r3, r2
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	bf0c      	ite	eq
 8006030:	2301      	moveq	r3, #1
 8006032:	2300      	movne	r3, #0
 8006034:	b2db      	uxtb	r3, r3
 8006036:	461a      	mov	r2, r3
 8006038:	e00c      	b.n	8006054 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	43da      	mvns	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	4013      	ands	r3, r2
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	bf0c      	ite	eq
 800604c:	2301      	moveq	r3, #1
 800604e:	2300      	movne	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	429a      	cmp	r2, r3
 8006058:	d0b6      	beq.n	8005fc8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
 8006070:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006072:	e051      	b.n	8006118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800607e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006082:	d123      	bne.n	80060cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006092:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800609c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b8:	f043 0204 	orr.w	r2, r3, #4
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e046      	b.n	800615a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060d2:	d021      	beq.n	8006118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060d4:	f7fc fe0e 	bl	8002cf4 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d302      	bcc.n	80060ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d116      	bne.n	8006118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006104:	f043 0220 	orr.w	r2, r3, #32
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e020      	b.n	800615a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	0c1b      	lsrs	r3, r3, #16
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b01      	cmp	r3, #1
 8006120:	d10c      	bne.n	800613c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	43da      	mvns	r2, r3
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	4013      	ands	r3, r2
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	bf14      	ite	ne
 8006134:	2301      	movne	r3, #1
 8006136:	2300      	moveq	r3, #0
 8006138:	b2db      	uxtb	r3, r3
 800613a:	e00b      	b.n	8006154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	43da      	mvns	r2, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	4013      	ands	r3, r2
 8006148:	b29b      	uxth	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	bf14      	ite	ne
 800614e:	2301      	movne	r3, #1
 8006150:	2300      	moveq	r3, #0
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	d18d      	bne.n	8006074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b084      	sub	sp, #16
 8006166:	af00      	add	r7, sp, #0
 8006168:	60f8      	str	r0, [r7, #12]
 800616a:	60b9      	str	r1, [r7, #8]
 800616c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800616e:	e02d      	b.n	80061cc <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 f878 	bl	8006266 <I2C_IsAcknowledgeFailed>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e02d      	b.n	80061dc <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006186:	d021      	beq.n	80061cc <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006188:	f7fc fdb4 	bl	8002cf4 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	429a      	cmp	r2, r3
 8006196:	d302      	bcc.n	800619e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d116      	bne.n	80061cc <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b8:	f043 0220 	orr.w	r2, r3, #32
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e007      	b.n	80061dc <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d6:	2b80      	cmp	r3, #128	; 0x80
 80061d8:	d1ca      	bne.n	8006170 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061f0:	e02d      	b.n	800624e <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 f837 	bl	8006266 <I2C_IsAcknowledgeFailed>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e02d      	b.n	800625e <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006208:	d021      	beq.n	800624e <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800620a:	f7fc fd73 	bl	8002cf4 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	429a      	cmp	r2, r3
 8006218:	d302      	bcc.n	8006220 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d116      	bne.n	800624e <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2220      	movs	r2, #32
 800622a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	f043 0220 	orr.w	r2, r3, #32
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e007      	b.n	800625e <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	2b04      	cmp	r3, #4
 800625a:	d1ca      	bne.n	80061f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800627c:	d11b      	bne.n	80062b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006286:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	f043 0204 	orr.w	r2, r3, #4
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e000      	b.n	80062b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80062d4:	d103      	bne.n	80062de <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80062dc:	e007      	b.n	80062ee <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80062e6:	d102      	bne.n	80062ee <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2208      	movs	r2, #8
 80062ec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80062fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062fc:	b08f      	sub	sp, #60	; 0x3c
 80062fe:	af0a      	add	r7, sp, #40	; 0x28
 8006300:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e10f      	b.n	800652c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d106      	bne.n	800632c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f006 fe6a 	bl	800d000 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2203      	movs	r2, #3
 8006330:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800633c:	2b00      	cmp	r3, #0
 800633e:	d102      	bne.n	8006346 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4618      	mov	r0, r3
 800634c:	f003 fd0d 	bl	8009d6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	603b      	str	r3, [r7, #0]
 8006356:	687e      	ldr	r6, [r7, #4]
 8006358:	466d      	mov	r5, sp
 800635a:	f106 0410 	add.w	r4, r6, #16
 800635e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006366:	e894 0003 	ldmia.w	r4, {r0, r1}
 800636a:	e885 0003 	stmia.w	r5, {r0, r1}
 800636e:	1d33      	adds	r3, r6, #4
 8006370:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006372:	6838      	ldr	r0, [r7, #0]
 8006374:	f003 fbe4 	bl	8009b40 <USB_CoreInit>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d005      	beq.n	800638a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2202      	movs	r2, #2
 8006382:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e0d0      	b.n	800652c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2100      	movs	r1, #0
 8006390:	4618      	mov	r0, r3
 8006392:	f003 fcfb 	bl	8009d8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006396:	2300      	movs	r3, #0
 8006398:	73fb      	strb	r3, [r7, #15]
 800639a:	e04a      	b.n	8006432 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800639c:	7bfa      	ldrb	r2, [r7, #15]
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	4613      	mov	r3, r2
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	1a9b      	subs	r3, r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	440b      	add	r3, r1
 80063aa:	333d      	adds	r3, #61	; 0x3d
 80063ac:	2201      	movs	r2, #1
 80063ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80063b0:	7bfa      	ldrb	r2, [r7, #15]
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	4613      	mov	r3, r2
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	1a9b      	subs	r3, r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	440b      	add	r3, r1
 80063be:	333c      	adds	r3, #60	; 0x3c
 80063c0:	7bfa      	ldrb	r2, [r7, #15]
 80063c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80063c4:	7bfa      	ldrb	r2, [r7, #15]
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	b298      	uxth	r0, r3
 80063ca:	6879      	ldr	r1, [r7, #4]
 80063cc:	4613      	mov	r3, r2
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	1a9b      	subs	r3, r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	440b      	add	r3, r1
 80063d6:	3342      	adds	r3, #66	; 0x42
 80063d8:	4602      	mov	r2, r0
 80063da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80063dc:	7bfa      	ldrb	r2, [r7, #15]
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	4613      	mov	r3, r2
 80063e2:	00db      	lsls	r3, r3, #3
 80063e4:	1a9b      	subs	r3, r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	440b      	add	r3, r1
 80063ea:	333f      	adds	r3, #63	; 0x3f
 80063ec:	2200      	movs	r2, #0
 80063ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80063f0:	7bfa      	ldrb	r2, [r7, #15]
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	4613      	mov	r3, r2
 80063f6:	00db      	lsls	r3, r3, #3
 80063f8:	1a9b      	subs	r3, r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	440b      	add	r3, r1
 80063fe:	3344      	adds	r3, #68	; 0x44
 8006400:	2200      	movs	r2, #0
 8006402:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006404:	7bfa      	ldrb	r2, [r7, #15]
 8006406:	6879      	ldr	r1, [r7, #4]
 8006408:	4613      	mov	r3, r2
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	1a9b      	subs	r3, r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	440b      	add	r3, r1
 8006412:	3348      	adds	r3, #72	; 0x48
 8006414:	2200      	movs	r2, #0
 8006416:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006418:	7bfa      	ldrb	r2, [r7, #15]
 800641a:	6879      	ldr	r1, [r7, #4]
 800641c:	4613      	mov	r3, r2
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	1a9b      	subs	r3, r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	440b      	add	r3, r1
 8006426:	3350      	adds	r3, #80	; 0x50
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	3301      	adds	r3, #1
 8006430:	73fb      	strb	r3, [r7, #15]
 8006432:	7bfa      	ldrb	r2, [r7, #15]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	429a      	cmp	r2, r3
 800643a:	d3af      	bcc.n	800639c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800643c:	2300      	movs	r3, #0
 800643e:	73fb      	strb	r3, [r7, #15]
 8006440:	e044      	b.n	80064cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006442:	7bfa      	ldrb	r2, [r7, #15]
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	4613      	mov	r3, r2
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	1a9b      	subs	r3, r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	440b      	add	r3, r1
 8006450:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006454:	2200      	movs	r2, #0
 8006456:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006458:	7bfa      	ldrb	r2, [r7, #15]
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	4613      	mov	r3, r2
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	1a9b      	subs	r3, r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	440b      	add	r3, r1
 8006466:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800646a:	7bfa      	ldrb	r2, [r7, #15]
 800646c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800646e:	7bfa      	ldrb	r2, [r7, #15]
 8006470:	6879      	ldr	r1, [r7, #4]
 8006472:	4613      	mov	r3, r2
 8006474:	00db      	lsls	r3, r3, #3
 8006476:	1a9b      	subs	r3, r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	440b      	add	r3, r1
 800647c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006480:	2200      	movs	r2, #0
 8006482:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006484:	7bfa      	ldrb	r2, [r7, #15]
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	4613      	mov	r3, r2
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	1a9b      	subs	r3, r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	440b      	add	r3, r1
 8006492:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006496:	2200      	movs	r2, #0
 8006498:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800649a:	7bfa      	ldrb	r2, [r7, #15]
 800649c:	6879      	ldr	r1, [r7, #4]
 800649e:	4613      	mov	r3, r2
 80064a0:	00db      	lsls	r3, r3, #3
 80064a2:	1a9b      	subs	r3, r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	440b      	add	r3, r1
 80064a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80064b0:	7bfa      	ldrb	r2, [r7, #15]
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	4613      	mov	r3, r2
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	1a9b      	subs	r3, r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	440b      	add	r3, r1
 80064be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064c6:	7bfb      	ldrb	r3, [r7, #15]
 80064c8:	3301      	adds	r3, #1
 80064ca:	73fb      	strb	r3, [r7, #15]
 80064cc:	7bfa      	ldrb	r2, [r7, #15]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d3b5      	bcc.n	8006442 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	603b      	str	r3, [r7, #0]
 80064dc:	687e      	ldr	r6, [r7, #4]
 80064de:	466d      	mov	r5, sp
 80064e0:	f106 0410 	add.w	r4, r6, #16
 80064e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80064f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80064f4:	1d33      	adds	r3, r6, #4
 80064f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064f8:	6838      	ldr	r0, [r7, #0]
 80064fa:	f003 fc71 	bl	8009de0 <USB_DevInit>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d005      	beq.n	8006510 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2202      	movs	r2, #2
 8006508:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e00d      	b.n	800652c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4618      	mov	r0, r3
 8006526:	f004 fcb0 	bl	800ae8a <USB_DevDisconnect>

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006534 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006548:	2b01      	cmp	r3, #1
 800654a:	d101      	bne.n	8006550 <HAL_PCD_Start+0x1c>
 800654c:	2302      	movs	r3, #2
 800654e:	e020      	b.n	8006592 <HAL_PCD_Start+0x5e>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655c:	2b01      	cmp	r3, #1
 800655e:	d109      	bne.n	8006574 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006564:	2b01      	cmp	r3, #1
 8006566:	d005      	beq.n	8006574 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4618      	mov	r0, r3
 800657a:	f004 fc6e 	bl	800ae5a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4618      	mov	r0, r3
 8006584:	f003 fbe0 	bl	8009d48 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800659a:	b590      	push	{r4, r7, lr}
 800659c:	b08d      	sub	sp, #52	; 0x34
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f004 fd15 	bl	800afe0 <USB_GetMode>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f040 839d 	bne.w	8006cf8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f004 fc79 	bl	800aeba <USB_ReadInterrupts>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 8393 	beq.w	8006cf6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f004 fc70 	bl	800aeba <USB_ReadInterrupts>
 80065da:	4603      	mov	r3, r0
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d107      	bne.n	80065f4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695a      	ldr	r2, [r3, #20]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f002 0202 	and.w	r2, r2, #2
 80065f2:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f004 fc5e 	bl	800aeba <USB_ReadInterrupts>
 80065fe:	4603      	mov	r3, r0
 8006600:	f003 0310 	and.w	r3, r3, #16
 8006604:	2b10      	cmp	r3, #16
 8006606:	d161      	bne.n	80066cc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	699a      	ldr	r2, [r3, #24]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0210 	bic.w	r2, r2, #16
 8006616:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	f003 020f 	and.w	r2, r3, #15
 8006624:	4613      	mov	r3, r2
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	1a9b      	subs	r3, r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	4413      	add	r3, r2
 8006634:	3304      	adds	r3, #4
 8006636:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	0c5b      	lsrs	r3, r3, #17
 800663c:	f003 030f 	and.w	r3, r3, #15
 8006640:	2b02      	cmp	r3, #2
 8006642:	d124      	bne.n	800668e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800664a:	4013      	ands	r3, r2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d035      	beq.n	80066bc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	091b      	lsrs	r3, r3, #4
 8006658:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800665a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800665e:	b29b      	uxth	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	6a38      	ldr	r0, [r7, #32]
 8006664:	f004 fad6 	bl	800ac14 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	68da      	ldr	r2, [r3, #12]
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	091b      	lsrs	r3, r3, #4
 8006670:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006674:	441a      	add	r2, r3
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	699a      	ldr	r2, [r3, #24]
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	091b      	lsrs	r3, r3, #4
 8006682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006686:	441a      	add	r2, r3
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	619a      	str	r2, [r3, #24]
 800668c:	e016      	b.n	80066bc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	0c5b      	lsrs	r3, r3, #17
 8006692:	f003 030f 	and.w	r3, r3, #15
 8006696:	2b06      	cmp	r3, #6
 8006698:	d110      	bne.n	80066bc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80066a0:	2208      	movs	r2, #8
 80066a2:	4619      	mov	r1, r3
 80066a4:	6a38      	ldr	r0, [r7, #32]
 80066a6:	f004 fab5 	bl	800ac14 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	699a      	ldr	r2, [r3, #24]
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	091b      	lsrs	r3, r3, #4
 80066b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066b6:	441a      	add	r2, r3
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	699a      	ldr	r2, [r3, #24]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0210 	orr.w	r2, r2, #16
 80066ca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f004 fbf2 	bl	800aeba <USB_ReadInterrupts>
 80066d6:	4603      	mov	r3, r0
 80066d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80066e0:	d16e      	bne.n	80067c0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f004 fbf8 	bl	800aee0 <USB_ReadDevAllOutEpInterrupt>
 80066f0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80066f2:	e062      	b.n	80067ba <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80066f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d057      	beq.n	80067ae <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	4611      	mov	r1, r2
 8006708:	4618      	mov	r0, r3
 800670a:	f004 fc1d 	bl	800af48 <USB_ReadDevOutEPInterrupt>
 800670e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00c      	beq.n	8006734 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	4413      	add	r3, r2
 8006722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006726:	461a      	mov	r2, r3
 8006728:	2301      	movs	r3, #1
 800672a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800672c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fdb0 	bl	8007294 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f003 0308 	and.w	r3, r3, #8
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00c      	beq.n	8006758 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674a:	461a      	mov	r2, r3
 800674c:	2308      	movs	r3, #8
 800674e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006750:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 feaa 	bl	80074ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	f003 0310 	and.w	r3, r3, #16
 800675e:	2b00      	cmp	r3, #0
 8006760:	d008      	beq.n	8006774 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	4413      	add	r3, r2
 800676a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676e:	461a      	mov	r2, r3
 8006770:	2310      	movs	r3, #16
 8006772:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	f003 0320 	and.w	r3, r3, #32
 800677a:	2b00      	cmp	r3, #0
 800677c:	d008      	beq.n	8006790 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	4413      	add	r3, r2
 8006786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678a:	461a      	mov	r2, r3
 800678c:	2320      	movs	r3, #32
 800678e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d009      	beq.n	80067ae <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a6:	461a      	mov	r2, r3
 80067a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	3301      	adds	r3, #1
 80067b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80067ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d199      	bne.n	80066f4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f004 fb78 	bl	800aeba <USB_ReadInterrupts>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067d4:	f040 80c0 	bne.w	8006958 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4618      	mov	r0, r3
 80067de:	f004 fb99 	bl	800af14 <USB_ReadDevAllInEpInterrupt>
 80067e2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80067e8:	e0b2      	b.n	8006950 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80067ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 80a7 	beq.w	8006944 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067fc:	b2d2      	uxtb	r2, r2
 80067fe:	4611      	mov	r1, r2
 8006800:	4618      	mov	r0, r3
 8006802:	f004 fbbf 	bl	800af84 <USB_ReadDevInEPInterrupt>
 8006806:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d057      	beq.n	80068c2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	f003 030f 	and.w	r3, r3, #15
 8006818:	2201      	movs	r2, #1
 800681a:	fa02 f303 	lsl.w	r3, r2, r3
 800681e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	43db      	mvns	r3, r3
 800682c:	69f9      	ldr	r1, [r7, #28]
 800682e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006832:	4013      	ands	r3, r2
 8006834:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006842:	461a      	mov	r2, r3
 8006844:	2301      	movs	r3, #1
 8006846:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d132      	bne.n	80068b6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006854:	4613      	mov	r3, r2
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	1a9b      	subs	r3, r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	3348      	adds	r3, #72	; 0x48
 8006860:	6819      	ldr	r1, [r3, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006866:	4613      	mov	r3, r2
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	1a9b      	subs	r3, r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4403      	add	r3, r0
 8006870:	3344      	adds	r3, #68	; 0x44
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4419      	add	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687a:	4613      	mov	r3, r2
 800687c:	00db      	lsls	r3, r3, #3
 800687e:	1a9b      	subs	r3, r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4403      	add	r3, r0
 8006884:	3348      	adds	r3, #72	; 0x48
 8006886:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	2b00      	cmp	r3, #0
 800688c:	d113      	bne.n	80068b6 <HAL_PCD_IRQHandler+0x31c>
 800688e:	6879      	ldr	r1, [r7, #4]
 8006890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006892:	4613      	mov	r3, r2
 8006894:	00db      	lsls	r3, r3, #3
 8006896:	1a9b      	subs	r3, r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	440b      	add	r3, r1
 800689c:	3350      	adds	r3, #80	; 0x50
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d108      	bne.n	80068b6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6818      	ldr	r0, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80068ae:	461a      	mov	r2, r3
 80068b0:	2101      	movs	r1, #1
 80068b2:	f004 fbc7 	bl	800b044 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f006 fc20 	bl	800d102 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f003 0308 	and.w	r3, r3, #8
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d008      	beq.n	80068de <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d8:	461a      	mov	r2, r3
 80068da:	2308      	movs	r3, #8
 80068dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f003 0310 	and.w	r3, r3, #16
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d008      	beq.n	80068fa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f4:	461a      	mov	r2, r3
 80068f6:	2310      	movs	r3, #16
 80068f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006900:	2b00      	cmp	r3, #0
 8006902:	d008      	beq.n	8006916 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006910:	461a      	mov	r2, r3
 8006912:	2340      	movs	r3, #64	; 0x40
 8006914:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d008      	beq.n	8006932 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692c:	461a      	mov	r2, r3
 800692e:	2302      	movs	r3, #2
 8006930:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800693c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fc1b 	bl	800717a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	3301      	adds	r3, #1
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694c:	085b      	lsrs	r3, r3, #1
 800694e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006952:	2b00      	cmp	r3, #0
 8006954:	f47f af49 	bne.w	80067ea <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4618      	mov	r0, r3
 800695e:	f004 faac 	bl	800aeba <USB_ReadInterrupts>
 8006962:	4603      	mov	r3, r0
 8006964:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800696c:	d122      	bne.n	80069b4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	69fa      	ldr	r2, [r7, #28]
 8006978:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800697c:	f023 0301 	bic.w	r3, r3, #1
 8006980:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006988:	2b01      	cmp	r3, #1
 800698a:	d108      	bne.n	800699e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006994:	2100      	movs	r1, #0
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fe26 	bl	80075e8 <HAL_PCDEx_LPM_Callback>
 800699c:	e002      	b.n	80069a4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f006 fc26 	bl	800d1f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695a      	ldr	r2, [r3, #20]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80069b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4618      	mov	r0, r3
 80069ba:	f004 fa7e 	bl	800aeba <USB_ReadInterrupts>
 80069be:	4603      	mov	r3, r0
 80069c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069c8:	d112      	bne.n	80069f0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d102      	bne.n	80069e0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f006 fbe2 	bl	800d1a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	695a      	ldr	r2, [r3, #20]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80069ee:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f004 fa60 	bl	800aeba <USB_ReadInterrupts>
 80069fa:	4603      	mov	r3, r0
 80069fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a04:	f040 80c7 	bne.w	8006b96 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	69fa      	ldr	r2, [r7, #28]
 8006a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a16:	f023 0301 	bic.w	r3, r3, #1
 8006a1a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2110      	movs	r1, #16
 8006a22:	4618      	mov	r0, r3
 8006a24:	f003 fb40 	bl	800a0a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a28:	2300      	movs	r3, #0
 8006a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a2c:	e056      	b.n	8006adc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a40:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a52:	0151      	lsls	r1, r2, #5
 8006a54:	69fa      	ldr	r2, [r7, #28]
 8006a56:	440a      	add	r2, r1
 8006a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a60:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a72:	0151      	lsls	r1, r2, #5
 8006a74:	69fa      	ldr	r2, [r7, #28]
 8006a76:	440a      	add	r2, r1
 8006a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a94:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aa6:	0151      	lsls	r1, r2, #5
 8006aa8:	69fa      	ldr	r2, [r7, #28]
 8006aaa:	440a      	add	r2, r1
 8006aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ab4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ac6:	0151      	lsls	r1, r2, #5
 8006ac8:	69fa      	ldr	r2, [r7, #28]
 8006aca:	440a      	add	r2, r1
 8006acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ad4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad8:	3301      	adds	r3, #1
 8006ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d3a3      	bcc.n	8006a2e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006af4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006af8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d016      	beq.n	8006b30 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b0c:	69fa      	ldr	r2, [r7, #28]
 8006b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b12:	f043 030b 	orr.w	r3, r3, #11
 8006b16:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b22:	69fa      	ldr	r2, [r7, #28]
 8006b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b28:	f043 030b 	orr.w	r3, r3, #11
 8006b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8006b2e:	e015      	b.n	8006b5c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	69fa      	ldr	r2, [r7, #28]
 8006b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b42:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006b46:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	69fa      	ldr	r2, [r7, #28]
 8006b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b56:	f043 030b 	orr.w	r3, r3, #11
 8006b5a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	69fa      	ldr	r2, [r7, #28]
 8006b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006b6e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6818      	ldr	r0, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006b80:	461a      	mov	r2, r3
 8006b82:	f004 fa5f 	bl	800b044 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	695a      	ldr	r2, [r3, #20]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006b94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f004 f98d 	bl	800aeba <USB_ReadInterrupts>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006baa:	d124      	bne.n	8006bf6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f004 fa23 	bl	800affc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f003 fad5 	bl	800a16a <USB_GetDevSpeed>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681c      	ldr	r4, [r3, #0]
 8006bcc:	f001 f946 	bl	8007e5c <HAL_RCC_GetHCLKFreq>
 8006bd0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	461a      	mov	r2, r3
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f003 f812 	bl	8009c04 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f006 fab6 	bl	800d152 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	695a      	ldr	r2, [r3, #20]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006bf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f004 f95d 	bl	800aeba <USB_ReadInterrupts>
 8006c00:	4603      	mov	r3, r0
 8006c02:	f003 0308 	and.w	r3, r3, #8
 8006c06:	2b08      	cmp	r3, #8
 8006c08:	d10a      	bne.n	8006c20 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f006 fa93 	bl	800d136 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	695a      	ldr	r2, [r3, #20]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f002 0208 	and.w	r2, r2, #8
 8006c1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f004 f948 	bl	800aeba <USB_ReadInterrupts>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c34:	d10f      	bne.n	8006c56 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f006 faf5 	bl	800d230 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	695a      	ldr	r2, [r3, #20]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f004 f92d 	bl	800aeba <USB_ReadInterrupts>
 8006c60:	4603      	mov	r3, r0
 8006c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c6a:	d10f      	bne.n	8006c8c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f006 fac8 	bl	800d20c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	695a      	ldr	r2, [r3, #20]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006c8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f004 f912 	bl	800aeba <USB_ReadInterrupts>
 8006c96:	4603      	mov	r3, r0
 8006c98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca0:	d10a      	bne.n	8006cb8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f006 fad6 	bl	800d254 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	695a      	ldr	r2, [r3, #20]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006cb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f004 f8fc 	bl	800aeba <USB_ReadInterrupts>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b04      	cmp	r3, #4
 8006cca:	d115      	bne.n	8006cf8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	f003 0304 	and.w	r3, r3, #4
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f006 fac6 	bl	800d270 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6859      	ldr	r1, [r3, #4]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	605a      	str	r2, [r3, #4]
 8006cf4:	e000      	b.n	8006cf8 <HAL_PCD_IRQHandler+0x75e>
      return;
 8006cf6:	bf00      	nop
    }
  }
}
 8006cf8:	3734      	adds	r7, #52	; 0x34
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd90      	pop	{r4, r7, pc}

08006cfe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b082      	sub	sp, #8
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	460b      	mov	r3, r1
 8006d08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d101      	bne.n	8006d18 <HAL_PCD_SetAddress+0x1a>
 8006d14:	2302      	movs	r3, #2
 8006d16:	e013      	b.n	8006d40 <HAL_PCD_SetAddress+0x42>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	78fa      	ldrb	r2, [r7, #3]
 8006d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	78fa      	ldrb	r2, [r7, #3]
 8006d2e:	4611      	mov	r1, r2
 8006d30:	4618      	mov	r0, r3
 8006d32:	f004 f86c 	bl	800ae0e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	4608      	mov	r0, r1
 8006d52:	4611      	mov	r1, r2
 8006d54:	461a      	mov	r2, r3
 8006d56:	4603      	mov	r3, r0
 8006d58:	70fb      	strb	r3, [r7, #3]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	803b      	strh	r3, [r7, #0]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006d66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	da0f      	bge.n	8006d8e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d6e:	78fb      	ldrb	r3, [r7, #3]
 8006d70:	f003 020f 	and.w	r2, r3, #15
 8006d74:	4613      	mov	r3, r2
 8006d76:	00db      	lsls	r3, r3, #3
 8006d78:	1a9b      	subs	r3, r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	3338      	adds	r3, #56	; 0x38
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	4413      	add	r3, r2
 8006d82:	3304      	adds	r3, #4
 8006d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	705a      	strb	r2, [r3, #1]
 8006d8c:	e00f      	b.n	8006dae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d8e:	78fb      	ldrb	r3, [r7, #3]
 8006d90:	f003 020f 	and.w	r2, r3, #15
 8006d94:	4613      	mov	r3, r2
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	1a9b      	subs	r3, r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	4413      	add	r3, r2
 8006da4:	3304      	adds	r3, #4
 8006da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006dae:	78fb      	ldrb	r3, [r7, #3]
 8006db0:	f003 030f 	and.w	r3, r3, #15
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006dba:	883a      	ldrh	r2, [r7, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	78ba      	ldrb	r2, [r7, #2]
 8006dc4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	785b      	ldrb	r3, [r3, #1]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d004      	beq.n	8006dd8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006dd8:	78bb      	ldrb	r3, [r7, #2]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d102      	bne.n	8006de4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d101      	bne.n	8006df2 <HAL_PCD_EP_Open+0xaa>
 8006dee:	2302      	movs	r3, #2
 8006df0:	e00e      	b.n	8006e10 <HAL_PCD_EP_Open+0xc8>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68f9      	ldr	r1, [r7, #12]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f003 f9d7 	bl	800a1b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006e0e:	7afb      	ldrb	r3, [r7, #11]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	da0f      	bge.n	8006e4c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e2c:	78fb      	ldrb	r3, [r7, #3]
 8006e2e:	f003 020f 	and.w	r2, r3, #15
 8006e32:	4613      	mov	r3, r2
 8006e34:	00db      	lsls	r3, r3, #3
 8006e36:	1a9b      	subs	r3, r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	3338      	adds	r3, #56	; 0x38
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	4413      	add	r3, r2
 8006e40:	3304      	adds	r3, #4
 8006e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2201      	movs	r2, #1
 8006e48:	705a      	strb	r2, [r3, #1]
 8006e4a:	e00f      	b.n	8006e6c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e4c:	78fb      	ldrb	r3, [r7, #3]
 8006e4e:	f003 020f 	and.w	r2, r3, #15
 8006e52:	4613      	mov	r3, r2
 8006e54:	00db      	lsls	r3, r3, #3
 8006e56:	1a9b      	subs	r3, r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	4413      	add	r3, r2
 8006e62:	3304      	adds	r3, #4
 8006e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006e6c:	78fb      	ldrb	r3, [r7, #3]
 8006e6e:	f003 030f 	and.w	r3, r3, #15
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d101      	bne.n	8006e86 <HAL_PCD_EP_Close+0x6e>
 8006e82:	2302      	movs	r3, #2
 8006e84:	e00e      	b.n	8006ea4 <HAL_PCD_EP_Close+0x8c>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68f9      	ldr	r1, [r7, #12]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f003 fa15 	bl	800a2c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	607a      	str	r2, [r7, #4]
 8006eb6:	603b      	str	r3, [r7, #0]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ebc:	7afb      	ldrb	r3, [r7, #11]
 8006ebe:	f003 020f 	and.w	r2, r3, #15
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	00db      	lsls	r3, r3, #3
 8006ec6:	1a9b      	subs	r3, r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	2200      	movs	r2, #0
 8006eec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006eee:	7afb      	ldrb	r3, [r7, #11]
 8006ef0:	f003 030f 	and.w	r3, r3, #15
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d102      	bne.n	8006f08 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006f08:	7afb      	ldrb	r3, [r7, #11]
 8006f0a:	f003 030f 	and.w	r3, r3, #15
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d109      	bne.n	8006f26 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6818      	ldr	r0, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	6979      	ldr	r1, [r7, #20]
 8006f20:	f003 fcf0 	bl	800a904 <USB_EP0StartXfer>
 8006f24:	e008      	b.n	8006f38 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6818      	ldr	r0, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	461a      	mov	r2, r3
 8006f32:	6979      	ldr	r1, [r7, #20]
 8006f34:	f003 faa2 	bl	800a47c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3718      	adds	r7, #24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b083      	sub	sp, #12
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006f4e:	78fb      	ldrb	r3, [r7, #3]
 8006f50:	f003 020f 	and.w	r2, r3, #15
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	4613      	mov	r3, r2
 8006f58:	00db      	lsls	r3, r3, #3
 8006f5a:	1a9b      	subs	r3, r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	440b      	add	r3, r1
 8006f60:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006f64:	681b      	ldr	r3, [r3, #0]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b086      	sub	sp, #24
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	607a      	str	r2, [r7, #4]
 8006f7c:	603b      	str	r3, [r7, #0]
 8006f7e:	460b      	mov	r3, r1
 8006f80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f82:	7afb      	ldrb	r3, [r7, #11]
 8006f84:	f003 020f 	and.w	r2, r3, #15
 8006f88:	4613      	mov	r3, r2
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	1a9b      	subs	r3, r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	3338      	adds	r3, #56	; 0x38
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	4413      	add	r3, r2
 8006f96:	3304      	adds	r3, #4
 8006f98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006fb2:	7afb      	ldrb	r3, [r7, #11]
 8006fb4:	f003 030f 	and.w	r3, r3, #15
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d102      	bne.n	8006fcc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006fcc:	7afb      	ldrb	r3, [r7, #11]
 8006fce:	f003 030f 	and.w	r3, r3, #15
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d109      	bne.n	8006fea <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	6979      	ldr	r1, [r7, #20]
 8006fe4:	f003 fc8e 	bl	800a904 <USB_EP0StartXfer>
 8006fe8:	e008      	b.n	8006ffc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6818      	ldr	r0, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	6979      	ldr	r1, [r7, #20]
 8006ff8:	f003 fa40 	bl	800a47c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b084      	sub	sp, #16
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	460b      	mov	r3, r1
 8007010:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007012:	78fb      	ldrb	r3, [r7, #3]
 8007014:	f003 020f 	and.w	r2, r3, #15
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	429a      	cmp	r2, r3
 800701e:	d901      	bls.n	8007024 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e050      	b.n	80070c6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007028:	2b00      	cmp	r3, #0
 800702a:	da0f      	bge.n	800704c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800702c:	78fb      	ldrb	r3, [r7, #3]
 800702e:	f003 020f 	and.w	r2, r3, #15
 8007032:	4613      	mov	r3, r2
 8007034:	00db      	lsls	r3, r3, #3
 8007036:	1a9b      	subs	r3, r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	3338      	adds	r3, #56	; 0x38
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	4413      	add	r3, r2
 8007040:	3304      	adds	r3, #4
 8007042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2201      	movs	r2, #1
 8007048:	705a      	strb	r2, [r3, #1]
 800704a:	e00d      	b.n	8007068 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800704c:	78fa      	ldrb	r2, [r7, #3]
 800704e:	4613      	mov	r3, r2
 8007050:	00db      	lsls	r3, r3, #3
 8007052:	1a9b      	subs	r3, r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	4413      	add	r3, r2
 800705e:	3304      	adds	r3, #4
 8007060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2201      	movs	r2, #1
 800706c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800706e:	78fb      	ldrb	r3, [r7, #3]
 8007070:	f003 030f 	and.w	r3, r3, #15
 8007074:	b2da      	uxtb	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007080:	2b01      	cmp	r3, #1
 8007082:	d101      	bne.n	8007088 <HAL_PCD_EP_SetStall+0x82>
 8007084:	2302      	movs	r3, #2
 8007086:	e01e      	b.n	80070c6 <HAL_PCD_EP_SetStall+0xc0>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68f9      	ldr	r1, [r7, #12]
 8007096:	4618      	mov	r0, r3
 8007098:	f003 fde5 	bl	800ac66 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800709c:	78fb      	ldrb	r3, [r7, #3]
 800709e:	f003 030f 	and.w	r3, r3, #15
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10a      	bne.n	80070bc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6818      	ldr	r0, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	b2d9      	uxtb	r1, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070b6:	461a      	mov	r2, r3
 80070b8:	f003 ffc4 	bl	800b044 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b084      	sub	sp, #16
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	460b      	mov	r3, r1
 80070d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80070da:	78fb      	ldrb	r3, [r7, #3]
 80070dc:	f003 020f 	and.w	r2, r3, #15
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d901      	bls.n	80070ec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e042      	b.n	8007172 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80070ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	da0f      	bge.n	8007114 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	f003 020f 	and.w	r2, r3, #15
 80070fa:	4613      	mov	r3, r2
 80070fc:	00db      	lsls	r3, r3, #3
 80070fe:	1a9b      	subs	r3, r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	3338      	adds	r3, #56	; 0x38
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	4413      	add	r3, r2
 8007108:	3304      	adds	r3, #4
 800710a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2201      	movs	r2, #1
 8007110:	705a      	strb	r2, [r3, #1]
 8007112:	e00f      	b.n	8007134 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007114:	78fb      	ldrb	r3, [r7, #3]
 8007116:	f003 020f 	and.w	r2, r3, #15
 800711a:	4613      	mov	r3, r2
 800711c:	00db      	lsls	r3, r3, #3
 800711e:	1a9b      	subs	r3, r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	4413      	add	r3, r2
 800712a:	3304      	adds	r3, #4
 800712c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800713a:	78fb      	ldrb	r3, [r7, #3]
 800713c:	f003 030f 	and.w	r3, r3, #15
 8007140:	b2da      	uxtb	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800714c:	2b01      	cmp	r3, #1
 800714e:	d101      	bne.n	8007154 <HAL_PCD_EP_ClrStall+0x86>
 8007150:	2302      	movs	r3, #2
 8007152:	e00e      	b.n	8007172 <HAL_PCD_EP_ClrStall+0xa4>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68f9      	ldr	r1, [r7, #12]
 8007162:	4618      	mov	r0, r3
 8007164:	f003 fded 	bl	800ad42 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b08a      	sub	sp, #40	; 0x28
 800717e:	af02      	add	r7, sp, #8
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	4613      	mov	r3, r2
 8007192:	00db      	lsls	r3, r3, #3
 8007194:	1a9b      	subs	r3, r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	3338      	adds	r3, #56	; 0x38
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	4413      	add	r3, r2
 800719e:	3304      	adds	r3, #4
 80071a0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	699a      	ldr	r2, [r3, #24]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d901      	bls.n	80071b2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e06c      	b.n	800728c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	695a      	ldr	r2, [r3, #20]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	69fa      	ldr	r2, [r7, #28]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d902      	bls.n	80071ce <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	3303      	adds	r3, #3
 80071d2:	089b      	lsrs	r3, r3, #2
 80071d4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80071d6:	e02b      	b.n	8007230 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	695a      	ldr	r2, [r3, #20]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	69fa      	ldr	r2, [r7, #28]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d902      	bls.n	80071f4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	3303      	adds	r3, #3
 80071f8:	089b      	lsrs	r3, r3, #2
 80071fa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	68d9      	ldr	r1, [r3, #12]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	b2da      	uxtb	r2, r3
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800720c:	b2db      	uxtb	r3, r3
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	4603      	mov	r3, r0
 8007212:	6978      	ldr	r0, [r7, #20]
 8007214:	f003 fcc9 	bl	800abaa <USB_WritePacket>

    ep->xfer_buff  += len;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	441a      	add	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	699a      	ldr	r2, [r3, #24]
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	441a      	add	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	4413      	add	r3, r2
 8007238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	b29b      	uxth	r3, r3
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	429a      	cmp	r2, r3
 8007244:	d809      	bhi.n	800725a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	699a      	ldr	r2, [r3, #24]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800724e:	429a      	cmp	r2, r3
 8007250:	d203      	bcs.n	800725a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1be      	bne.n	80071d8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	695a      	ldr	r2, [r3, #20]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	429a      	cmp	r2, r3
 8007264:	d811      	bhi.n	800728a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	f003 030f 	and.w	r3, r3, #15
 800726c:	2201      	movs	r2, #1
 800726e:	fa02 f303 	lsl.w	r3, r2, r3
 8007272:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800727a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	43db      	mvns	r3, r3
 8007280:	6939      	ldr	r1, [r7, #16]
 8007282:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007286:	4013      	ands	r3, r2
 8007288:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3720      	adds	r7, #32
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	333c      	adds	r3, #60	; 0x3c
 80072ac:	3304      	adds	r3, #4
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	f040 80a0 	bne.w	800740c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f003 0308 	and.w	r3, r3, #8
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d015      	beq.n	8007302 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4a72      	ldr	r2, [pc, #456]	; (80074a4 <PCD_EP_OutXfrComplete_int+0x210>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	f240 80dd 	bls.w	800749a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 80d7 	beq.w	800749a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f8:	461a      	mov	r2, r3
 80072fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072fe:	6093      	str	r3, [r2, #8]
 8007300:	e0cb      	b.n	800749a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f003 0320 	and.w	r3, r3, #32
 8007308:	2b00      	cmp	r3, #0
 800730a:	d009      	beq.n	8007320 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007318:	461a      	mov	r2, r3
 800731a:	2320      	movs	r3, #32
 800731c:	6093      	str	r3, [r2, #8]
 800731e:	e0bc      	b.n	800749a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007326:	2b00      	cmp	r3, #0
 8007328:	f040 80b7 	bne.w	800749a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4a5d      	ldr	r2, [pc, #372]	; (80074a4 <PCD_EP_OutXfrComplete_int+0x210>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d90f      	bls.n	8007354 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	015a      	lsls	r2, r3, #5
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	4413      	add	r3, r2
 8007346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734a:	461a      	mov	r2, r3
 800734c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007350:	6093      	str	r3, [r2, #8]
 8007352:	e0a2      	b.n	800749a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007354:	6879      	ldr	r1, [r7, #4]
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	4613      	mov	r3, r2
 800735a:	00db      	lsls	r3, r3, #3
 800735c:	1a9b      	subs	r3, r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	440b      	add	r3, r1
 8007362:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007366:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	0159      	lsls	r1, r3, #5
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	440b      	add	r3, r1
 8007370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800737a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	4613      	mov	r3, r2
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	1a9b      	subs	r3, r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4403      	add	r3, r0
 800738a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800738e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007390:	6879      	ldr	r1, [r7, #4]
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	4613      	mov	r3, r2
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	1a9b      	subs	r3, r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	440b      	add	r3, r1
 800739e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80073a2:	6819      	ldr	r1, [r3, #0]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	4613      	mov	r3, r2
 80073aa:	00db      	lsls	r3, r3, #3
 80073ac:	1a9b      	subs	r3, r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4403      	add	r3, r0
 80073b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4419      	add	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	4613      	mov	r3, r2
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	1a9b      	subs	r3, r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4403      	add	r3, r0
 80073c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80073cc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d114      	bne.n	80073fe <PCD_EP_OutXfrComplete_int+0x16a>
 80073d4:	6879      	ldr	r1, [r7, #4]
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	4613      	mov	r3, r2
 80073da:	00db      	lsls	r3, r3, #3
 80073dc:	1a9b      	subs	r3, r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	440b      	add	r3, r1
 80073e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d108      	bne.n	80073fe <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6818      	ldr	r0, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80073f6:	461a      	mov	r2, r3
 80073f8:	2101      	movs	r1, #1
 80073fa:	f003 fe23 	bl	800b044 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	b2db      	uxtb	r3, r3
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f005 fe61 	bl	800d0cc <HAL_PCD_DataOutStageCallback>
 800740a:	e046      	b.n	800749a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4a26      	ldr	r2, [pc, #152]	; (80074a8 <PCD_EP_OutXfrComplete_int+0x214>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d124      	bne.n	800745e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00a      	beq.n	8007434 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	015a      	lsls	r2, r3, #5
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	4413      	add	r3, r2
 8007426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800742a:	461a      	mov	r2, r3
 800742c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007430:	6093      	str	r3, [r2, #8]
 8007432:	e032      	b.n	800749a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	f003 0320 	and.w	r3, r3, #32
 800743a:	2b00      	cmp	r3, #0
 800743c:	d008      	beq.n	8007450 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744a:	461a      	mov	r2, r3
 800744c:	2320      	movs	r3, #32
 800744e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	b2db      	uxtb	r3, r3
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f005 fe38 	bl	800d0cc <HAL_PCD_DataOutStageCallback>
 800745c:	e01d      	b.n	800749a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d114      	bne.n	800748e <PCD_EP_OutXfrComplete_int+0x1fa>
 8007464:	6879      	ldr	r1, [r7, #4]
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	4613      	mov	r3, r2
 800746a:	00db      	lsls	r3, r3, #3
 800746c:	1a9b      	subs	r3, r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	440b      	add	r3, r1
 8007472:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d108      	bne.n	800748e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6818      	ldr	r0, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007486:	461a      	mov	r2, r3
 8007488:	2100      	movs	r1, #0
 800748a:	f003 fddb 	bl	800b044 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	b2db      	uxtb	r3, r3
 8007492:	4619      	mov	r1, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f005 fe19 	bl	800d0cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	4f54300a 	.word	0x4f54300a
 80074a8:	4f54310a 	.word	0x4f54310a

080074ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	333c      	adds	r3, #60	; 0x3c
 80074c4:	3304      	adds	r3, #4
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	4a15      	ldr	r2, [pc, #84]	; (8007534 <PCD_EP_OutSetupPacket_int+0x88>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d90e      	bls.n	8007500 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d009      	beq.n	8007500 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f8:	461a      	mov	r2, r3
 80074fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f005 fdd1 	bl	800d0a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	4a0a      	ldr	r2, [pc, #40]	; (8007534 <PCD_EP_OutSetupPacket_int+0x88>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d90c      	bls.n	8007528 <PCD_EP_OutSetupPacket_int+0x7c>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d108      	bne.n	8007528 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6818      	ldr	r0, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007520:	461a      	mov	r2, r3
 8007522:	2101      	movs	r1, #1
 8007524:	f003 fd8e 	bl	800b044 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3718      	adds	r7, #24
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	4f54300a 	.word	0x4f54300a

08007538 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	460b      	mov	r3, r1
 8007542:	70fb      	strb	r3, [r7, #3]
 8007544:	4613      	mov	r3, r2
 8007546:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007550:	78fb      	ldrb	r3, [r7, #3]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d107      	bne.n	8007566 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007556:	883b      	ldrh	r3, [r7, #0]
 8007558:	0419      	lsls	r1, r3, #16
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	430a      	orrs	r2, r1
 8007562:	629a      	str	r2, [r3, #40]	; 0x28
 8007564:	e028      	b.n	80075b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756c:	0c1b      	lsrs	r3, r3, #16
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	4413      	add	r3, r2
 8007572:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007574:	2300      	movs	r3, #0
 8007576:	73fb      	strb	r3, [r7, #15]
 8007578:	e00d      	b.n	8007596 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	7bfb      	ldrb	r3, [r7, #15]
 8007580:	3340      	adds	r3, #64	; 0x40
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	0c1b      	lsrs	r3, r3, #16
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	4413      	add	r3, r2
 800758e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007590:	7bfb      	ldrb	r3, [r7, #15]
 8007592:	3301      	adds	r3, #1
 8007594:	73fb      	strb	r3, [r7, #15]
 8007596:	7bfa      	ldrb	r2, [r7, #15]
 8007598:	78fb      	ldrb	r3, [r7, #3]
 800759a:	3b01      	subs	r3, #1
 800759c:	429a      	cmp	r2, r3
 800759e:	d3ec      	bcc.n	800757a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80075a0:	883b      	ldrh	r3, [r7, #0]
 80075a2:	0418      	lsls	r0, r3, #16
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6819      	ldr	r1, [r3, #0]
 80075a8:	78fb      	ldrb	r3, [r7, #3]
 80075aa:	3b01      	subs	r3, #1
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	4302      	orrs	r2, r0
 80075b0:	3340      	adds	r3, #64	; 0x40
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	440b      	add	r3, r1
 80075b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b083      	sub	sp, #12
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	460b      	mov	r3, r1
 80075d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	887a      	ldrh	r2, [r7, #2]
 80075d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	460b      	mov	r3, r1
 80075f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e25b      	b.n	8007aca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d075      	beq.n	800770a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800761e:	4ba3      	ldr	r3, [pc, #652]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f003 030c 	and.w	r3, r3, #12
 8007626:	2b04      	cmp	r3, #4
 8007628:	d00c      	beq.n	8007644 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800762a:	4ba0      	ldr	r3, [pc, #640]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007632:	2b08      	cmp	r3, #8
 8007634:	d112      	bne.n	800765c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007636:	4b9d      	ldr	r3, [pc, #628]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800763e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007642:	d10b      	bne.n	800765c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007644:	4b99      	ldr	r3, [pc, #612]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d05b      	beq.n	8007708 <HAL_RCC_OscConfig+0x108>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d157      	bne.n	8007708 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e236      	b.n	8007aca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007664:	d106      	bne.n	8007674 <HAL_RCC_OscConfig+0x74>
 8007666:	4b91      	ldr	r3, [pc, #580]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a90      	ldr	r2, [pc, #576]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 800766c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	e01d      	b.n	80076b0 <HAL_RCC_OscConfig+0xb0>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800767c:	d10c      	bne.n	8007698 <HAL_RCC_OscConfig+0x98>
 800767e:	4b8b      	ldr	r3, [pc, #556]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a8a      	ldr	r2, [pc, #552]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 8007684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007688:	6013      	str	r3, [r2, #0]
 800768a:	4b88      	ldr	r3, [pc, #544]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a87      	ldr	r2, [pc, #540]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 8007690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007694:	6013      	str	r3, [r2, #0]
 8007696:	e00b      	b.n	80076b0 <HAL_RCC_OscConfig+0xb0>
 8007698:	4b84      	ldr	r3, [pc, #528]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a83      	ldr	r2, [pc, #524]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 800769e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076a2:	6013      	str	r3, [r2, #0]
 80076a4:	4b81      	ldr	r3, [pc, #516]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a80      	ldr	r2, [pc, #512]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 80076aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d013      	beq.n	80076e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076b8:	f7fb fb1c 	bl	8002cf4 <HAL_GetTick>
 80076bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076be:	e008      	b.n	80076d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076c0:	f7fb fb18 	bl	8002cf4 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	2b64      	cmp	r3, #100	; 0x64
 80076cc:	d901      	bls.n	80076d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e1fb      	b.n	8007aca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076d2:	4b76      	ldr	r3, [pc, #472]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d0f0      	beq.n	80076c0 <HAL_RCC_OscConfig+0xc0>
 80076de:	e014      	b.n	800770a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076e0:	f7fb fb08 	bl	8002cf4 <HAL_GetTick>
 80076e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076e6:	e008      	b.n	80076fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076e8:	f7fb fb04 	bl	8002cf4 <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	2b64      	cmp	r3, #100	; 0x64
 80076f4:	d901      	bls.n	80076fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e1e7      	b.n	8007aca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076fa:	4b6c      	ldr	r3, [pc, #432]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1f0      	bne.n	80076e8 <HAL_RCC_OscConfig+0xe8>
 8007706:	e000      	b.n	800770a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d063      	beq.n	80077de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007716:	4b65      	ldr	r3, [pc, #404]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f003 030c 	and.w	r3, r3, #12
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00b      	beq.n	800773a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007722:	4b62      	ldr	r3, [pc, #392]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800772a:	2b08      	cmp	r3, #8
 800772c:	d11c      	bne.n	8007768 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800772e:	4b5f      	ldr	r3, [pc, #380]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d116      	bne.n	8007768 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800773a:	4b5c      	ldr	r3, [pc, #368]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0302 	and.w	r3, r3, #2
 8007742:	2b00      	cmp	r3, #0
 8007744:	d005      	beq.n	8007752 <HAL_RCC_OscConfig+0x152>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d001      	beq.n	8007752 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e1bb      	b.n	8007aca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007752:	4b56      	ldr	r3, [pc, #344]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	4952      	ldr	r1, [pc, #328]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 8007762:	4313      	orrs	r3, r2
 8007764:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007766:	e03a      	b.n	80077de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d020      	beq.n	80077b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007770:	4b4f      	ldr	r3, [pc, #316]	; (80078b0 <HAL_RCC_OscConfig+0x2b0>)
 8007772:	2201      	movs	r2, #1
 8007774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007776:	f7fb fabd 	bl	8002cf4 <HAL_GetTick>
 800777a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800777c:	e008      	b.n	8007790 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800777e:	f7fb fab9 	bl	8002cf4 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	2b02      	cmp	r3, #2
 800778a:	d901      	bls.n	8007790 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e19c      	b.n	8007aca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007790:	4b46      	ldr	r3, [pc, #280]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d0f0      	beq.n	800777e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800779c:	4b43      	ldr	r3, [pc, #268]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	4940      	ldr	r1, [pc, #256]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	600b      	str	r3, [r1, #0]
 80077b0:	e015      	b.n	80077de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077b2:	4b3f      	ldr	r3, [pc, #252]	; (80078b0 <HAL_RCC_OscConfig+0x2b0>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077b8:	f7fb fa9c 	bl	8002cf4 <HAL_GetTick>
 80077bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077be:	e008      	b.n	80077d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077c0:	f7fb fa98 	bl	8002cf4 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d901      	bls.n	80077d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e17b      	b.n	8007aca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077d2:	4b36      	ldr	r3, [pc, #216]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1f0      	bne.n	80077c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0308 	and.w	r3, r3, #8
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d030      	beq.n	800784c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d016      	beq.n	8007820 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077f2:	4b30      	ldr	r3, [pc, #192]	; (80078b4 <HAL_RCC_OscConfig+0x2b4>)
 80077f4:	2201      	movs	r2, #1
 80077f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077f8:	f7fb fa7c 	bl	8002cf4 <HAL_GetTick>
 80077fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077fe:	e008      	b.n	8007812 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007800:	f7fb fa78 	bl	8002cf4 <HAL_GetTick>
 8007804:	4602      	mov	r2, r0
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	2b02      	cmp	r3, #2
 800780c:	d901      	bls.n	8007812 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e15b      	b.n	8007aca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007812:	4b26      	ldr	r3, [pc, #152]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 8007814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	2b00      	cmp	r3, #0
 800781c:	d0f0      	beq.n	8007800 <HAL_RCC_OscConfig+0x200>
 800781e:	e015      	b.n	800784c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007820:	4b24      	ldr	r3, [pc, #144]	; (80078b4 <HAL_RCC_OscConfig+0x2b4>)
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007826:	f7fb fa65 	bl	8002cf4 <HAL_GetTick>
 800782a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800782c:	e008      	b.n	8007840 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800782e:	f7fb fa61 	bl	8002cf4 <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	2b02      	cmp	r3, #2
 800783a:	d901      	bls.n	8007840 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e144      	b.n	8007aca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007840:	4b1a      	ldr	r3, [pc, #104]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 8007842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1f0      	bne.n	800782e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0304 	and.w	r3, r3, #4
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 80a0 	beq.w	800799a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800785a:	2300      	movs	r3, #0
 800785c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800785e:	4b13      	ldr	r3, [pc, #76]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10f      	bne.n	800788a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800786a:	2300      	movs	r3, #0
 800786c:	60bb      	str	r3, [r7, #8]
 800786e:	4b0f      	ldr	r3, [pc, #60]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	4a0e      	ldr	r2, [pc, #56]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 8007874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007878:	6413      	str	r3, [r2, #64]	; 0x40
 800787a:	4b0c      	ldr	r3, [pc, #48]	; (80078ac <HAL_RCC_OscConfig+0x2ac>)
 800787c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007882:	60bb      	str	r3, [r7, #8]
 8007884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007886:	2301      	movs	r3, #1
 8007888:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800788a:	4b0b      	ldr	r3, [pc, #44]	; (80078b8 <HAL_RCC_OscConfig+0x2b8>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007892:	2b00      	cmp	r3, #0
 8007894:	d121      	bne.n	80078da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007896:	4b08      	ldr	r3, [pc, #32]	; (80078b8 <HAL_RCC_OscConfig+0x2b8>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a07      	ldr	r2, [pc, #28]	; (80078b8 <HAL_RCC_OscConfig+0x2b8>)
 800789c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078a2:	f7fb fa27 	bl	8002cf4 <HAL_GetTick>
 80078a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078a8:	e011      	b.n	80078ce <HAL_RCC_OscConfig+0x2ce>
 80078aa:	bf00      	nop
 80078ac:	40023800 	.word	0x40023800
 80078b0:	42470000 	.word	0x42470000
 80078b4:	42470e80 	.word	0x42470e80
 80078b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078bc:	f7fb fa1a 	bl	8002cf4 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d901      	bls.n	80078ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e0fd      	b.n	8007aca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078ce:	4b81      	ldr	r3, [pc, #516]	; (8007ad4 <HAL_RCC_OscConfig+0x4d4>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0f0      	beq.n	80078bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d106      	bne.n	80078f0 <HAL_RCC_OscConfig+0x2f0>
 80078e2:	4b7d      	ldr	r3, [pc, #500]	; (8007ad8 <HAL_RCC_OscConfig+0x4d8>)
 80078e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e6:	4a7c      	ldr	r2, [pc, #496]	; (8007ad8 <HAL_RCC_OscConfig+0x4d8>)
 80078e8:	f043 0301 	orr.w	r3, r3, #1
 80078ec:	6713      	str	r3, [r2, #112]	; 0x70
 80078ee:	e01c      	b.n	800792a <HAL_RCC_OscConfig+0x32a>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	2b05      	cmp	r3, #5
 80078f6:	d10c      	bne.n	8007912 <HAL_RCC_OscConfig+0x312>
 80078f8:	4b77      	ldr	r3, [pc, #476]	; (8007ad8 <HAL_RCC_OscConfig+0x4d8>)
 80078fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078fc:	4a76      	ldr	r2, [pc, #472]	; (8007ad8 <HAL_RCC_OscConfig+0x4d8>)
 80078fe:	f043 0304 	orr.w	r3, r3, #4
 8007902:	6713      	str	r3, [r2, #112]	; 0x70
 8007904:	4b74      	ldr	r3, [pc, #464]	; (8007ad8 <HAL_RCC_OscConfig+0x4d8>)
 8007906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007908:	4a73      	ldr	r2, [pc, #460]	; (8007ad8 <HAL_RCC_OscConfig+0x4d8>)
 800790a:	f043 0301 	orr.w	r3, r3, #1
 800790e:	6713      	str	r3, [r2, #112]	; 0x70
 8007910:	e00b      	b.n	800792a <HAL_RCC_OscConfig+0x32a>
 8007912:	4b71      	ldr	r3, [pc, #452]	; (8007ad8 <HAL_RCC_OscConfig+0x4d8>)
 8007914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007916:	4a70      	ldr	r2, [pc, #448]	; (8007ad8 <HAL_RCC_OscConfig+0x4d8>)
 8007918:	f023 0301 	bic.w	r3, r3, #1
 800791c:	6713      	str	r3, [r2, #112]	; 0x70
 800791e:	4b6e      	ldr	r3, [pc, #440]	; (8007ad8 <HAL_RCC_OscConfig+0x4d8>)
 8007920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007922:	4a6d      	ldr	r2, [pc, #436]	; (8007ad8 <HAL_RCC_OscConfig+0x4d8>)
 8007924:	f023 0304 	bic.w	r3, r3, #4
 8007928:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d015      	beq.n	800795e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007932:	f7fb f9df 	bl	8002cf4 <HAL_GetTick>
 8007936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007938:	e00a      	b.n	8007950 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800793a:	f7fb f9db 	bl	8002cf4 <HAL_GetTick>
 800793e:	4602      	mov	r2, r0
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	f241 3288 	movw	r2, #5000	; 0x1388
 8007948:	4293      	cmp	r3, r2
 800794a:	d901      	bls.n	8007950 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e0bc      	b.n	8007aca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007950:	4b61      	ldr	r3, [pc, #388]	; (8007ad8 <HAL_RCC_OscConfig+0x4d8>)
 8007952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007954:	f003 0302 	and.w	r3, r3, #2
 8007958:	2b00      	cmp	r3, #0
 800795a:	d0ee      	beq.n	800793a <HAL_RCC_OscConfig+0x33a>
 800795c:	e014      	b.n	8007988 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800795e:	f7fb f9c9 	bl	8002cf4 <HAL_GetTick>
 8007962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007964:	e00a      	b.n	800797c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007966:	f7fb f9c5 	bl	8002cf4 <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	f241 3288 	movw	r2, #5000	; 0x1388
 8007974:	4293      	cmp	r3, r2
 8007976:	d901      	bls.n	800797c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e0a6      	b.n	8007aca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800797c:	4b56      	ldr	r3, [pc, #344]	; (8007ad8 <HAL_RCC_OscConfig+0x4d8>)
 800797e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007980:	f003 0302 	and.w	r3, r3, #2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1ee      	bne.n	8007966 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007988:	7dfb      	ldrb	r3, [r7, #23]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d105      	bne.n	800799a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800798e:	4b52      	ldr	r3, [pc, #328]	; (8007ad8 <HAL_RCC_OscConfig+0x4d8>)
 8007990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007992:	4a51      	ldr	r2, [pc, #324]	; (8007ad8 <HAL_RCC_OscConfig+0x4d8>)
 8007994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007998:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 8092 	beq.w	8007ac8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079a4:	4b4c      	ldr	r3, [pc, #304]	; (8007ad8 <HAL_RCC_OscConfig+0x4d8>)
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f003 030c 	and.w	r3, r3, #12
 80079ac:	2b08      	cmp	r3, #8
 80079ae:	d05c      	beq.n	8007a6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d141      	bne.n	8007a3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079b8:	4b48      	ldr	r3, [pc, #288]	; (8007adc <HAL_RCC_OscConfig+0x4dc>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079be:	f7fb f999 	bl	8002cf4 <HAL_GetTick>
 80079c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079c4:	e008      	b.n	80079d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079c6:	f7fb f995 	bl	8002cf4 <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d901      	bls.n	80079d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e078      	b.n	8007aca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079d8:	4b3f      	ldr	r3, [pc, #252]	; (8007ad8 <HAL_RCC_OscConfig+0x4d8>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1f0      	bne.n	80079c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	69da      	ldr	r2, [r3, #28]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a1b      	ldr	r3, [r3, #32]
 80079ec:	431a      	orrs	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f2:	019b      	lsls	r3, r3, #6
 80079f4:	431a      	orrs	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fa:	085b      	lsrs	r3, r3, #1
 80079fc:	3b01      	subs	r3, #1
 80079fe:	041b      	lsls	r3, r3, #16
 8007a00:	431a      	orrs	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a06:	061b      	lsls	r3, r3, #24
 8007a08:	4933      	ldr	r1, [pc, #204]	; (8007ad8 <HAL_RCC_OscConfig+0x4d8>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a0e:	4b33      	ldr	r3, [pc, #204]	; (8007adc <HAL_RCC_OscConfig+0x4dc>)
 8007a10:	2201      	movs	r2, #1
 8007a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a14:	f7fb f96e 	bl	8002cf4 <HAL_GetTick>
 8007a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a1a:	e008      	b.n	8007a2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a1c:	f7fb f96a 	bl	8002cf4 <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d901      	bls.n	8007a2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e04d      	b.n	8007aca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a2e:	4b2a      	ldr	r3, [pc, #168]	; (8007ad8 <HAL_RCC_OscConfig+0x4d8>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d0f0      	beq.n	8007a1c <HAL_RCC_OscConfig+0x41c>
 8007a3a:	e045      	b.n	8007ac8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a3c:	4b27      	ldr	r3, [pc, #156]	; (8007adc <HAL_RCC_OscConfig+0x4dc>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a42:	f7fb f957 	bl	8002cf4 <HAL_GetTick>
 8007a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a48:	e008      	b.n	8007a5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a4a:	f7fb f953 	bl	8002cf4 <HAL_GetTick>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d901      	bls.n	8007a5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e036      	b.n	8007aca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a5c:	4b1e      	ldr	r3, [pc, #120]	; (8007ad8 <HAL_RCC_OscConfig+0x4d8>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1f0      	bne.n	8007a4a <HAL_RCC_OscConfig+0x44a>
 8007a68:	e02e      	b.n	8007ac8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d101      	bne.n	8007a76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e029      	b.n	8007aca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a76:	4b18      	ldr	r3, [pc, #96]	; (8007ad8 <HAL_RCC_OscConfig+0x4d8>)
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d11c      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d115      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d10d      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d106      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d001      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e000      	b.n	8007aca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	40007000 	.word	0x40007000
 8007ad8:	40023800 	.word	0x40023800
 8007adc:	42470060 	.word	0x42470060

08007ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d101      	bne.n	8007af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e0cc      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007af4:	4b68      	ldr	r3, [pc, #416]	; (8007c98 <HAL_RCC_ClockConfig+0x1b8>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 030f 	and.w	r3, r3, #15
 8007afc:	683a      	ldr	r2, [r7, #0]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d90c      	bls.n	8007b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b02:	4b65      	ldr	r3, [pc, #404]	; (8007c98 <HAL_RCC_ClockConfig+0x1b8>)
 8007b04:	683a      	ldr	r2, [r7, #0]
 8007b06:	b2d2      	uxtb	r2, r2
 8007b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b0a:	4b63      	ldr	r3, [pc, #396]	; (8007c98 <HAL_RCC_ClockConfig+0x1b8>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 030f 	and.w	r3, r3, #15
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d001      	beq.n	8007b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e0b8      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0302 	and.w	r3, r3, #2
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d020      	beq.n	8007b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0304 	and.w	r3, r3, #4
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d005      	beq.n	8007b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b34:	4b59      	ldr	r3, [pc, #356]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	4a58      	ldr	r2, [pc, #352]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0308 	and.w	r3, r3, #8
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d005      	beq.n	8007b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b4c:	4b53      	ldr	r3, [pc, #332]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	4a52      	ldr	r2, [pc, #328]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b58:	4b50      	ldr	r3, [pc, #320]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	494d      	ldr	r1, [pc, #308]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d044      	beq.n	8007c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d107      	bne.n	8007b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b7e:	4b47      	ldr	r3, [pc, #284]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d119      	bne.n	8007bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e07f      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d003      	beq.n	8007b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d107      	bne.n	8007bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b9e:	4b3f      	ldr	r3, [pc, #252]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d109      	bne.n	8007bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e06f      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bae:	4b3b      	ldr	r3, [pc, #236]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e067      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bbe:	4b37      	ldr	r3, [pc, #220]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f023 0203 	bic.w	r2, r3, #3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	4934      	ldr	r1, [pc, #208]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007bd0:	f7fb f890 	bl	8002cf4 <HAL_GetTick>
 8007bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bd6:	e00a      	b.n	8007bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bd8:	f7fb f88c 	bl	8002cf4 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d901      	bls.n	8007bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e04f      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bee:	4b2b      	ldr	r3, [pc, #172]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f003 020c 	and.w	r2, r3, #12
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d1eb      	bne.n	8007bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c00:	4b25      	ldr	r3, [pc, #148]	; (8007c98 <HAL_RCC_ClockConfig+0x1b8>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 030f 	and.w	r3, r3, #15
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d20c      	bcs.n	8007c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c0e:	4b22      	ldr	r3, [pc, #136]	; (8007c98 <HAL_RCC_ClockConfig+0x1b8>)
 8007c10:	683a      	ldr	r2, [r7, #0]
 8007c12:	b2d2      	uxtb	r2, r2
 8007c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c16:	4b20      	ldr	r3, [pc, #128]	; (8007c98 <HAL_RCC_ClockConfig+0x1b8>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 030f 	and.w	r3, r3, #15
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d001      	beq.n	8007c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e032      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0304 	and.w	r3, r3, #4
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d008      	beq.n	8007c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c34:	4b19      	ldr	r3, [pc, #100]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	4916      	ldr	r1, [pc, #88]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007c42:	4313      	orrs	r3, r2
 8007c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 0308 	and.w	r3, r3, #8
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d009      	beq.n	8007c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c52:	4b12      	ldr	r3, [pc, #72]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	490e      	ldr	r1, [pc, #56]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007c66:	f000 f821 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 8007c6a:	4601      	mov	r1, r0
 8007c6c:	4b0b      	ldr	r3, [pc, #44]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	091b      	lsrs	r3, r3, #4
 8007c72:	f003 030f 	and.w	r3, r3, #15
 8007c76:	4a0a      	ldr	r2, [pc, #40]	; (8007ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8007c78:	5cd3      	ldrb	r3, [r2, r3]
 8007c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8007c7e:	4a09      	ldr	r2, [pc, #36]	; (8007ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c82:	4b09      	ldr	r3, [pc, #36]	; (8007ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fa fff0 	bl	8002c6c <HAL_InitTick>

  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	40023c00 	.word	0x40023c00
 8007c9c:	40023800 	.word	0x40023800
 8007ca0:	08041710 	.word	0x08041710
 8007ca4:	200000a8 	.word	0x200000a8
 8007ca8:	200000ac 	.word	0x200000ac

08007cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	607b      	str	r3, [r7, #4]
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	60fb      	str	r3, [r7, #12]
 8007cba:	2300      	movs	r3, #0
 8007cbc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cc2:	4b63      	ldr	r3, [pc, #396]	; (8007e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f003 030c 	and.w	r3, r3, #12
 8007cca:	2b04      	cmp	r3, #4
 8007ccc:	d007      	beq.n	8007cde <HAL_RCC_GetSysClockFreq+0x32>
 8007cce:	2b08      	cmp	r3, #8
 8007cd0:	d008      	beq.n	8007ce4 <HAL_RCC_GetSysClockFreq+0x38>
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f040 80b4 	bne.w	8007e40 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007cd8:	4b5e      	ldr	r3, [pc, #376]	; (8007e54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007cda:	60bb      	str	r3, [r7, #8]
       break;
 8007cdc:	e0b3      	b.n	8007e46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007cde:	4b5e      	ldr	r3, [pc, #376]	; (8007e58 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007ce0:	60bb      	str	r3, [r7, #8]
      break;
 8007ce2:	e0b0      	b.n	8007e46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ce4:	4b5a      	ldr	r3, [pc, #360]	; (8007e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007cee:	4b58      	ldr	r3, [pc, #352]	; (8007e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d04a      	beq.n	8007d90 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cfa:	4b55      	ldr	r3, [pc, #340]	; (8007e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	099b      	lsrs	r3, r3, #6
 8007d00:	f04f 0400 	mov.w	r4, #0
 8007d04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007d08:	f04f 0200 	mov.w	r2, #0
 8007d0c:	ea03 0501 	and.w	r5, r3, r1
 8007d10:	ea04 0602 	and.w	r6, r4, r2
 8007d14:	4629      	mov	r1, r5
 8007d16:	4632      	mov	r2, r6
 8007d18:	f04f 0300 	mov.w	r3, #0
 8007d1c:	f04f 0400 	mov.w	r4, #0
 8007d20:	0154      	lsls	r4, r2, #5
 8007d22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007d26:	014b      	lsls	r3, r1, #5
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4622      	mov	r2, r4
 8007d2c:	1b49      	subs	r1, r1, r5
 8007d2e:	eb62 0206 	sbc.w	r2, r2, r6
 8007d32:	f04f 0300 	mov.w	r3, #0
 8007d36:	f04f 0400 	mov.w	r4, #0
 8007d3a:	0194      	lsls	r4, r2, #6
 8007d3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007d40:	018b      	lsls	r3, r1, #6
 8007d42:	1a5b      	subs	r3, r3, r1
 8007d44:	eb64 0402 	sbc.w	r4, r4, r2
 8007d48:	f04f 0100 	mov.w	r1, #0
 8007d4c:	f04f 0200 	mov.w	r2, #0
 8007d50:	00e2      	lsls	r2, r4, #3
 8007d52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007d56:	00d9      	lsls	r1, r3, #3
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4614      	mov	r4, r2
 8007d5c:	195b      	adds	r3, r3, r5
 8007d5e:	eb44 0406 	adc.w	r4, r4, r6
 8007d62:	f04f 0100 	mov.w	r1, #0
 8007d66:	f04f 0200 	mov.w	r2, #0
 8007d6a:	0262      	lsls	r2, r4, #9
 8007d6c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007d70:	0259      	lsls	r1, r3, #9
 8007d72:	460b      	mov	r3, r1
 8007d74:	4614      	mov	r4, r2
 8007d76:	4618      	mov	r0, r3
 8007d78:	4621      	mov	r1, r4
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f04f 0400 	mov.w	r4, #0
 8007d80:	461a      	mov	r2, r3
 8007d82:	4623      	mov	r3, r4
 8007d84:	f7f8 fa20 	bl	80001c8 <__aeabi_uldivmod>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	460c      	mov	r4, r1
 8007d8c:	60fb      	str	r3, [r7, #12]
 8007d8e:	e049      	b.n	8007e24 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d90:	4b2f      	ldr	r3, [pc, #188]	; (8007e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	099b      	lsrs	r3, r3, #6
 8007d96:	f04f 0400 	mov.w	r4, #0
 8007d9a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007d9e:	f04f 0200 	mov.w	r2, #0
 8007da2:	ea03 0501 	and.w	r5, r3, r1
 8007da6:	ea04 0602 	and.w	r6, r4, r2
 8007daa:	4629      	mov	r1, r5
 8007dac:	4632      	mov	r2, r6
 8007dae:	f04f 0300 	mov.w	r3, #0
 8007db2:	f04f 0400 	mov.w	r4, #0
 8007db6:	0154      	lsls	r4, r2, #5
 8007db8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007dbc:	014b      	lsls	r3, r1, #5
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	4622      	mov	r2, r4
 8007dc2:	1b49      	subs	r1, r1, r5
 8007dc4:	eb62 0206 	sbc.w	r2, r2, r6
 8007dc8:	f04f 0300 	mov.w	r3, #0
 8007dcc:	f04f 0400 	mov.w	r4, #0
 8007dd0:	0194      	lsls	r4, r2, #6
 8007dd2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007dd6:	018b      	lsls	r3, r1, #6
 8007dd8:	1a5b      	subs	r3, r3, r1
 8007dda:	eb64 0402 	sbc.w	r4, r4, r2
 8007dde:	f04f 0100 	mov.w	r1, #0
 8007de2:	f04f 0200 	mov.w	r2, #0
 8007de6:	00e2      	lsls	r2, r4, #3
 8007de8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007dec:	00d9      	lsls	r1, r3, #3
 8007dee:	460b      	mov	r3, r1
 8007df0:	4614      	mov	r4, r2
 8007df2:	195b      	adds	r3, r3, r5
 8007df4:	eb44 0406 	adc.w	r4, r4, r6
 8007df8:	f04f 0100 	mov.w	r1, #0
 8007dfc:	f04f 0200 	mov.w	r2, #0
 8007e00:	02a2      	lsls	r2, r4, #10
 8007e02:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007e06:	0299      	lsls	r1, r3, #10
 8007e08:	460b      	mov	r3, r1
 8007e0a:	4614      	mov	r4, r2
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	4621      	mov	r1, r4
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f04f 0400 	mov.w	r4, #0
 8007e16:	461a      	mov	r2, r3
 8007e18:	4623      	mov	r3, r4
 8007e1a:	f7f8 f9d5 	bl	80001c8 <__aeabi_uldivmod>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	460c      	mov	r4, r1
 8007e22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e24:	4b0a      	ldr	r3, [pc, #40]	; (8007e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	0c1b      	lsrs	r3, r3, #16
 8007e2a:	f003 0303 	and.w	r3, r3, #3
 8007e2e:	3301      	adds	r3, #1
 8007e30:	005b      	lsls	r3, r3, #1
 8007e32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e3c:	60bb      	str	r3, [r7, #8]
      break;
 8007e3e:	e002      	b.n	8007e46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e40:	4b04      	ldr	r3, [pc, #16]	; (8007e54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007e42:	60bb      	str	r3, [r7, #8]
      break;
 8007e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e46:	68bb      	ldr	r3, [r7, #8]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3714      	adds	r7, #20
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e50:	40023800 	.word	0x40023800
 8007e54:	00f42400 	.word	0x00f42400
 8007e58:	007a1200 	.word	0x007a1200

08007e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e60:	4b03      	ldr	r3, [pc, #12]	; (8007e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e62:	681b      	ldr	r3, [r3, #0]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	200000a8 	.word	0x200000a8

08007e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e78:	f7ff fff0 	bl	8007e5c <HAL_RCC_GetHCLKFreq>
 8007e7c:	4601      	mov	r1, r0
 8007e7e:	4b05      	ldr	r3, [pc, #20]	; (8007e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	0a9b      	lsrs	r3, r3, #10
 8007e84:	f003 0307 	and.w	r3, r3, #7
 8007e88:	4a03      	ldr	r2, [pc, #12]	; (8007e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e8a:	5cd3      	ldrb	r3, [r2, r3]
 8007e8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	40023800 	.word	0x40023800
 8007e98:	08041720 	.word	0x08041720

08007e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ea0:	f7ff ffdc 	bl	8007e5c <HAL_RCC_GetHCLKFreq>
 8007ea4:	4601      	mov	r1, r0
 8007ea6:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	0b5b      	lsrs	r3, r3, #13
 8007eac:	f003 0307 	and.w	r3, r3, #7
 8007eb0:	4a03      	ldr	r2, [pc, #12]	; (8007ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007eb2:	5cd3      	ldrb	r3, [r2, r3]
 8007eb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	40023800 	.word	0x40023800
 8007ec0:	08041720 	.word	0x08041720

08007ec4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d101      	bne.n	8007ed6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e056      	b.n	8007f84 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d106      	bne.n	8007ef6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7fa fb89 	bl	8002608 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2202      	movs	r2, #2
 8007efa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f0c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	431a      	orrs	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	431a      	orrs	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	431a      	orrs	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	695b      	ldr	r3, [r3, #20]
 8007f28:	431a      	orrs	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	699b      	ldr	r3, [r3, #24]
 8007f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f32:	431a      	orrs	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	431a      	orrs	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	ea42 0103 	orr.w	r1, r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	0c1b      	lsrs	r3, r3, #16
 8007f54:	f003 0104 	and.w	r1, r3, #4
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	69da      	ldr	r2, [r3, #28]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b088      	sub	sp, #32
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	603b      	str	r3, [r7, #0]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d101      	bne.n	8007fae <HAL_SPI_Transmit+0x22>
 8007faa:	2302      	movs	r3, #2
 8007fac:	e11e      	b.n	80081ec <HAL_SPI_Transmit+0x260>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fb6:	f7fa fe9d 	bl	8002cf4 <HAL_GetTick>
 8007fba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007fbc:	88fb      	ldrh	r3, [r7, #6]
 8007fbe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d002      	beq.n	8007fd2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007fcc:	2302      	movs	r3, #2
 8007fce:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fd0:	e103      	b.n	80081da <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <HAL_SPI_Transmit+0x52>
 8007fd8:	88fb      	ldrh	r3, [r7, #6]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d102      	bne.n	8007fe4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fe2:	e0fa      	b.n	80081da <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2203      	movs	r2, #3
 8007fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	88fa      	ldrh	r2, [r7, #6]
 8007ffc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	88fa      	ldrh	r2, [r7, #6]
 8008002:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800802a:	d107      	bne.n	800803c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800803a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008046:	2b40      	cmp	r3, #64	; 0x40
 8008048:	d007      	beq.n	800805a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008058:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008062:	d14b      	bne.n	80080fc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d002      	beq.n	8008072 <HAL_SPI_Transmit+0xe6>
 800806c:	8afb      	ldrh	r3, [r7, #22]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d13e      	bne.n	80080f0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008076:	881a      	ldrh	r2, [r3, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008082:	1c9a      	adds	r2, r3, #2
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800808c:	b29b      	uxth	r3, r3
 800808e:	3b01      	subs	r3, #1
 8008090:	b29a      	uxth	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008096:	e02b      	b.n	80080f0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f003 0302 	and.w	r3, r3, #2
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d112      	bne.n	80080cc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080aa:	881a      	ldrh	r2, [r3, #0]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b6:	1c9a      	adds	r2, r3, #2
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	3b01      	subs	r3, #1
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80080ca:	e011      	b.n	80080f0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080cc:	f7fa fe12 	bl	8002cf4 <HAL_GetTick>
 80080d0:	4602      	mov	r2, r0
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d803      	bhi.n	80080e4 <HAL_SPI_Transmit+0x158>
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080e2:	d102      	bne.n	80080ea <HAL_SPI_Transmit+0x15e>
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d102      	bne.n	80080f0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80080ee:	e074      	b.n	80081da <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1ce      	bne.n	8008098 <HAL_SPI_Transmit+0x10c>
 80080fa:	e04c      	b.n	8008196 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d002      	beq.n	800810a <HAL_SPI_Transmit+0x17e>
 8008104:	8afb      	ldrh	r3, [r7, #22]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d140      	bne.n	800818c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	330c      	adds	r3, #12
 8008114:	7812      	ldrb	r2, [r2, #0]
 8008116:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811c:	1c5a      	adds	r2, r3, #1
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008126:	b29b      	uxth	r3, r3
 8008128:	3b01      	subs	r3, #1
 800812a:	b29a      	uxth	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008130:	e02c      	b.n	800818c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f003 0302 	and.w	r3, r3, #2
 800813c:	2b02      	cmp	r3, #2
 800813e:	d113      	bne.n	8008168 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	330c      	adds	r3, #12
 800814a:	7812      	ldrb	r2, [r2, #0]
 800814c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008152:	1c5a      	adds	r2, r3, #1
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800815c:	b29b      	uxth	r3, r3
 800815e:	3b01      	subs	r3, #1
 8008160:	b29a      	uxth	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	86da      	strh	r2, [r3, #54]	; 0x36
 8008166:	e011      	b.n	800818c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008168:	f7fa fdc4 	bl	8002cf4 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	429a      	cmp	r2, r3
 8008176:	d803      	bhi.n	8008180 <HAL_SPI_Transmit+0x1f4>
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800817e:	d102      	bne.n	8008186 <HAL_SPI_Transmit+0x1fa>
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d102      	bne.n	800818c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	77fb      	strb	r3, [r7, #31]
          goto error;
 800818a:	e026      	b.n	80081da <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008190:	b29b      	uxth	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1cd      	bne.n	8008132 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008196:	69ba      	ldr	r2, [r7, #24]
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f000 fcc4 	bl	8008b28 <SPI_EndRxTxTransaction>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d002      	beq.n	80081ac <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2220      	movs	r2, #32
 80081aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10a      	bne.n	80081ca <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081b4:	2300      	movs	r3, #0
 80081b6:	613b      	str	r3, [r7, #16]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	613b      	str	r3, [r7, #16]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	613b      	str	r3, [r7, #16]
 80081c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d002      	beq.n	80081d8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	77fb      	strb	r3, [r7, #31]
 80081d6:	e000      	b.n	80081da <HAL_SPI_Transmit+0x24e>
  }

error:
 80081d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80081ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3720      	adds	r7, #32
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b088      	sub	sp, #32
 80081f8:	af02      	add	r7, sp, #8
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	603b      	str	r3, [r7, #0]
 8008200:	4613      	mov	r3, r2
 8008202:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008210:	d112      	bne.n	8008238 <HAL_SPI_Receive+0x44>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10e      	bne.n	8008238 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2204      	movs	r2, #4
 800821e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008222:	88fa      	ldrh	r2, [r7, #6]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	4613      	mov	r3, r2
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	68b9      	ldr	r1, [r7, #8]
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f000 f8e9 	bl	8008406 <HAL_SPI_TransmitReceive>
 8008234:	4603      	mov	r3, r0
 8008236:	e0e2      	b.n	80083fe <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800823e:	2b01      	cmp	r3, #1
 8008240:	d101      	bne.n	8008246 <HAL_SPI_Receive+0x52>
 8008242:	2302      	movs	r3, #2
 8008244:	e0db      	b.n	80083fe <HAL_SPI_Receive+0x20a>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800824e:	f7fa fd51 	bl	8002cf4 <HAL_GetTick>
 8008252:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b01      	cmp	r3, #1
 800825e:	d002      	beq.n	8008266 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008260:	2302      	movs	r3, #2
 8008262:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008264:	e0c2      	b.n	80083ec <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d002      	beq.n	8008272 <HAL_SPI_Receive+0x7e>
 800826c:	88fb      	ldrh	r3, [r7, #6]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d102      	bne.n	8008278 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008276:	e0b9      	b.n	80083ec <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2204      	movs	r2, #4
 800827c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	88fa      	ldrh	r2, [r7, #6]
 8008290:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	88fa      	ldrh	r2, [r7, #6]
 8008296:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082be:	d107      	bne.n	80082d0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80082ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082da:	2b40      	cmp	r3, #64	; 0x40
 80082dc:	d007      	beq.n	80082ee <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d162      	bne.n	80083bc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80082f6:	e02e      	b.n	8008356 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	f003 0301 	and.w	r3, r3, #1
 8008302:	2b01      	cmp	r3, #1
 8008304:	d115      	bne.n	8008332 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f103 020c 	add.w	r2, r3, #12
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008312:	7812      	ldrb	r2, [r2, #0]
 8008314:	b2d2      	uxtb	r2, r2
 8008316:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831c:	1c5a      	adds	r2, r3, #1
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008326:	b29b      	uxth	r3, r3
 8008328:	3b01      	subs	r3, #1
 800832a:	b29a      	uxth	r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008330:	e011      	b.n	8008356 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008332:	f7fa fcdf 	bl	8002cf4 <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	683a      	ldr	r2, [r7, #0]
 800833e:	429a      	cmp	r2, r3
 8008340:	d803      	bhi.n	800834a <HAL_SPI_Receive+0x156>
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008348:	d102      	bne.n	8008350 <HAL_SPI_Receive+0x15c>
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d102      	bne.n	8008356 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008354:	e04a      	b.n	80083ec <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800835a:	b29b      	uxth	r3, r3
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1cb      	bne.n	80082f8 <HAL_SPI_Receive+0x104>
 8008360:	e031      	b.n	80083c6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	2b01      	cmp	r3, #1
 800836e:	d113      	bne.n	8008398 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68da      	ldr	r2, [r3, #12]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837a:	b292      	uxth	r2, r2
 800837c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008382:	1c9a      	adds	r2, r3, #2
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800838c:	b29b      	uxth	r3, r3
 800838e:	3b01      	subs	r3, #1
 8008390:	b29a      	uxth	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008396:	e011      	b.n	80083bc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008398:	f7fa fcac 	bl	8002cf4 <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d803      	bhi.n	80083b0 <HAL_SPI_Receive+0x1bc>
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083ae:	d102      	bne.n	80083b6 <HAL_SPI_Receive+0x1c2>
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d102      	bne.n	80083bc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80083ba:	e017      	b.n	80083ec <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1cd      	bne.n	8008362 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083c6:	693a      	ldr	r2, [r7, #16]
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f000 fb46 	bl	8008a5c <SPI_EndRxTransaction>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d002      	beq.n	80083dc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2220      	movs	r2, #32
 80083da:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d002      	beq.n	80083ea <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	75fb      	strb	r3, [r7, #23]
 80083e8:	e000      	b.n	80083ec <HAL_SPI_Receive+0x1f8>
  }

error :
 80083ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80083fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b08c      	sub	sp, #48	; 0x30
 800840a:	af00      	add	r7, sp, #0
 800840c:	60f8      	str	r0, [r7, #12]
 800840e:	60b9      	str	r1, [r7, #8]
 8008410:	607a      	str	r2, [r7, #4]
 8008412:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008414:	2301      	movs	r3, #1
 8008416:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008424:	2b01      	cmp	r3, #1
 8008426:	d101      	bne.n	800842c <HAL_SPI_TransmitReceive+0x26>
 8008428:	2302      	movs	r3, #2
 800842a:	e18a      	b.n	8008742 <HAL_SPI_TransmitReceive+0x33c>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008434:	f7fa fc5e 	bl	8002cf4 <HAL_GetTick>
 8008438:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008440:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800844a:	887b      	ldrh	r3, [r7, #2]
 800844c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800844e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008452:	2b01      	cmp	r3, #1
 8008454:	d00f      	beq.n	8008476 <HAL_SPI_TransmitReceive+0x70>
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800845c:	d107      	bne.n	800846e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d103      	bne.n	800846e <HAL_SPI_TransmitReceive+0x68>
 8008466:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800846a:	2b04      	cmp	r3, #4
 800846c:	d003      	beq.n	8008476 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800846e:	2302      	movs	r3, #2
 8008470:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008474:	e15b      	b.n	800872e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d005      	beq.n	8008488 <HAL_SPI_TransmitReceive+0x82>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d002      	beq.n	8008488 <HAL_SPI_TransmitReceive+0x82>
 8008482:	887b      	ldrh	r3, [r7, #2]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d103      	bne.n	8008490 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800848e:	e14e      	b.n	800872e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b04      	cmp	r3, #4
 800849a:	d003      	beq.n	80084a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2205      	movs	r2, #5
 80084a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	887a      	ldrh	r2, [r7, #2]
 80084b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	887a      	ldrh	r2, [r7, #2]
 80084ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	887a      	ldrh	r2, [r7, #2]
 80084c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	887a      	ldrh	r2, [r7, #2]
 80084cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e4:	2b40      	cmp	r3, #64	; 0x40
 80084e6:	d007      	beq.n	80084f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008500:	d178      	bne.n	80085f4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d002      	beq.n	8008510 <HAL_SPI_TransmitReceive+0x10a>
 800850a:	8b7b      	ldrh	r3, [r7, #26]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d166      	bne.n	80085de <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008514:	881a      	ldrh	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008520:	1c9a      	adds	r2, r3, #2
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800852a:	b29b      	uxth	r3, r3
 800852c:	3b01      	subs	r3, #1
 800852e:	b29a      	uxth	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008534:	e053      	b.n	80085de <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f003 0302 	and.w	r3, r3, #2
 8008540:	2b02      	cmp	r3, #2
 8008542:	d11b      	bne.n	800857c <HAL_SPI_TransmitReceive+0x176>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008548:	b29b      	uxth	r3, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	d016      	beq.n	800857c <HAL_SPI_TransmitReceive+0x176>
 800854e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008550:	2b01      	cmp	r3, #1
 8008552:	d113      	bne.n	800857c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008558:	881a      	ldrh	r2, [r3, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008564:	1c9a      	adds	r2, r3, #2
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800856e:	b29b      	uxth	r3, r3
 8008570:	3b01      	subs	r3, #1
 8008572:	b29a      	uxth	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008578:	2300      	movs	r3, #0
 800857a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	f003 0301 	and.w	r3, r3, #1
 8008586:	2b01      	cmp	r3, #1
 8008588:	d119      	bne.n	80085be <HAL_SPI_TransmitReceive+0x1b8>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800858e:	b29b      	uxth	r3, r3
 8008590:	2b00      	cmp	r3, #0
 8008592:	d014      	beq.n	80085be <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68da      	ldr	r2, [r3, #12]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859e:	b292      	uxth	r2, r2
 80085a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a6:	1c9a      	adds	r2, r3, #2
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	3b01      	subs	r3, #1
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80085ba:	2301      	movs	r3, #1
 80085bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80085be:	f7fa fb99 	bl	8002cf4 <HAL_GetTick>
 80085c2:	4602      	mov	r2, r0
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d807      	bhi.n	80085de <HAL_SPI_TransmitReceive+0x1d8>
 80085ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085d4:	d003      	beq.n	80085de <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80085dc:	e0a7      	b.n	800872e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1a6      	bne.n	8008536 <HAL_SPI_TransmitReceive+0x130>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1a1      	bne.n	8008536 <HAL_SPI_TransmitReceive+0x130>
 80085f2:	e07c      	b.n	80086ee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d002      	beq.n	8008602 <HAL_SPI_TransmitReceive+0x1fc>
 80085fc:	8b7b      	ldrh	r3, [r7, #26]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d16b      	bne.n	80086da <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	330c      	adds	r3, #12
 800860c:	7812      	ldrb	r2, [r2, #0]
 800860e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008614:	1c5a      	adds	r2, r3, #1
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800861e:	b29b      	uxth	r3, r3
 8008620:	3b01      	subs	r3, #1
 8008622:	b29a      	uxth	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008628:	e057      	b.n	80086da <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f003 0302 	and.w	r3, r3, #2
 8008634:	2b02      	cmp	r3, #2
 8008636:	d11c      	bne.n	8008672 <HAL_SPI_TransmitReceive+0x26c>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800863c:	b29b      	uxth	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	d017      	beq.n	8008672 <HAL_SPI_TransmitReceive+0x26c>
 8008642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008644:	2b01      	cmp	r3, #1
 8008646:	d114      	bne.n	8008672 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	330c      	adds	r3, #12
 8008652:	7812      	ldrb	r2, [r2, #0]
 8008654:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008664:	b29b      	uxth	r3, r3
 8008666:	3b01      	subs	r3, #1
 8008668:	b29a      	uxth	r2, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800866e:	2300      	movs	r3, #0
 8008670:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f003 0301 	and.w	r3, r3, #1
 800867c:	2b01      	cmp	r3, #1
 800867e:	d119      	bne.n	80086b4 <HAL_SPI_TransmitReceive+0x2ae>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008684:	b29b      	uxth	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d014      	beq.n	80086b4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68da      	ldr	r2, [r3, #12]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008694:	b2d2      	uxtb	r2, r2
 8008696:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869c:	1c5a      	adds	r2, r3, #1
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	3b01      	subs	r3, #1
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80086b0:	2301      	movs	r3, #1
 80086b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80086b4:	f7fa fb1e 	bl	8002cf4 <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d803      	bhi.n	80086cc <HAL_SPI_TransmitReceive+0x2c6>
 80086c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086ca:	d102      	bne.n	80086d2 <HAL_SPI_TransmitReceive+0x2cc>
 80086cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d103      	bne.n	80086da <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80086d8:	e029      	b.n	800872e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086de:	b29b      	uxth	r3, r3
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1a2      	bne.n	800862a <HAL_SPI_TransmitReceive+0x224>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d19d      	bne.n	800862a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f000 fa18 	bl	8008b28 <SPI_EndRxTxTransaction>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d006      	beq.n	800870c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2220      	movs	r2, #32
 8008708:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800870a:	e010      	b.n	800872e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10b      	bne.n	800872c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008714:	2300      	movs	r3, #0
 8008716:	617b      	str	r3, [r7, #20]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	617b      	str	r3, [r7, #20]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	617b      	str	r3, [r7, #20]
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	e000      	b.n	800872e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800872c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800873e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008742:	4618      	mov	r0, r3
 8008744:	3730      	adds	r7, #48	; 0x30
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
	...

0800874c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b088      	sub	sp, #32
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	099b      	lsrs	r3, r3, #6
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10f      	bne.n	8008790 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00a      	beq.n	8008790 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	099b      	lsrs	r3, r3, #6
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	2b00      	cmp	r3, #0
 8008784:	d004      	beq.n	8008790 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	4798      	blx	r3
    return;
 800878e:	e0d8      	b.n	8008942 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	085b      	lsrs	r3, r3, #1
 8008794:	f003 0301 	and.w	r3, r3, #1
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00a      	beq.n	80087b2 <HAL_SPI_IRQHandler+0x66>
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	09db      	lsrs	r3, r3, #7
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d004      	beq.n	80087b2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	4798      	blx	r3
    return;
 80087b0:	e0c7      	b.n	8008942 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	095b      	lsrs	r3, r3, #5
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10c      	bne.n	80087d8 <HAL_SPI_IRQHandler+0x8c>
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	099b      	lsrs	r3, r3, #6
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d106      	bne.n	80087d8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	0a1b      	lsrs	r3, r3, #8
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 80b5 	beq.w	8008942 <HAL_SPI_IRQHandler+0x1f6>
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	095b      	lsrs	r3, r3, #5
 80087dc:	f003 0301 	and.w	r3, r3, #1
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 80ae 	beq.w	8008942 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	099b      	lsrs	r3, r3, #6
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d023      	beq.n	800883a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b03      	cmp	r3, #3
 80087fc:	d011      	beq.n	8008822 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008802:	f043 0204 	orr.w	r2, r3, #4
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800880a:	2300      	movs	r3, #0
 800880c:	617b      	str	r3, [r7, #20]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	617b      	str	r3, [r7, #20]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	617b      	str	r3, [r7, #20]
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	e00b      	b.n	800883a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008822:	2300      	movs	r3, #0
 8008824:	613b      	str	r3, [r7, #16]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	613b      	str	r3, [r7, #16]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	613b      	str	r3, [r7, #16]
 8008836:	693b      	ldr	r3, [r7, #16]
        return;
 8008838:	e083      	b.n	8008942 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	095b      	lsrs	r3, r3, #5
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	2b00      	cmp	r3, #0
 8008844:	d014      	beq.n	8008870 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800884a:	f043 0201 	orr.w	r2, r3, #1
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008852:	2300      	movs	r3, #0
 8008854:	60fb      	str	r3, [r7, #12]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	60fb      	str	r3, [r7, #12]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800886c:	601a      	str	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	0a1b      	lsrs	r3, r3, #8
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00c      	beq.n	8008896 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008880:	f043 0208 	orr.w	r2, r3, #8
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008888:	2300      	movs	r3, #0
 800888a:	60bb      	str	r3, [r7, #8]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	60bb      	str	r3, [r7, #8]
 8008894:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889a:	2b00      	cmp	r3, #0
 800889c:	d050      	beq.n	8008940 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	685a      	ldr	r2, [r3, #4]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80088ac:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	f003 0302 	and.w	r3, r3, #2
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d104      	bne.n	80088ca <HAL_SPI_IRQHandler+0x17e>
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	f003 0301 	and.w	r3, r3, #1
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d034      	beq.n	8008934 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	685a      	ldr	r2, [r3, #4]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f022 0203 	bic.w	r2, r2, #3
 80088d8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d011      	beq.n	8008906 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088e6:	4a18      	ldr	r2, [pc, #96]	; (8008948 <HAL_SPI_IRQHandler+0x1fc>)
 80088e8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fb f939 	bl	8003b66 <HAL_DMA_Abort_IT>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d005      	beq.n	8008906 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800890a:	2b00      	cmp	r3, #0
 800890c:	d016      	beq.n	800893c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008912:	4a0d      	ldr	r2, [pc, #52]	; (8008948 <HAL_SPI_IRQHandler+0x1fc>)
 8008914:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800891a:	4618      	mov	r0, r3
 800891c:	f7fb f923 	bl	8003b66 <HAL_DMA_Abort_IT>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00a      	beq.n	800893c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800892a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008932:	e003      	b.n	800893c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f809 	bl	800894c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800893a:	e000      	b.n	800893e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800893c:	bf00      	nop
    return;
 800893e:	bf00      	nop
 8008940:	bf00      	nop
  }
}
 8008942:	3720      	adds	r7, #32
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	08008961 	.word	0x08008961

0800894c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f7ff ffe6 	bl	800894c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008980:	bf00      	nop
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	603b      	str	r3, [r7, #0]
 8008994:	4613      	mov	r3, r2
 8008996:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008998:	e04c      	b.n	8008a34 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089a0:	d048      	beq.n	8008a34 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80089a2:	f7fa f9a7 	bl	8002cf4 <HAL_GetTick>
 80089a6:	4602      	mov	r2, r0
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d902      	bls.n	80089b8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d13d      	bne.n	8008a34 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80089c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089d0:	d111      	bne.n	80089f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089da:	d004      	beq.n	80089e6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089e4:	d107      	bne.n	80089f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089fe:	d10f      	bne.n	8008a20 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a0e:	601a      	str	r2, [r3, #0]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e00f      	b.n	8008a54 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	689a      	ldr	r2, [r3, #8]
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	bf0c      	ite	eq
 8008a44:	2301      	moveq	r3, #1
 8008a46:	2300      	movne	r3, #0
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	79fb      	ldrb	r3, [r7, #7]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d1a3      	bne.n	800899a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af02      	add	r7, sp, #8
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a70:	d111      	bne.n	8008a96 <SPI_EndRxTransaction+0x3a>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a7a:	d004      	beq.n	8008a86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a84:	d107      	bne.n	8008a96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a94:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a9e:	d12a      	bne.n	8008af6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aa8:	d012      	beq.n	8008ad0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2180      	movs	r1, #128	; 0x80
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f7ff ff67 	bl	8008988 <SPI_WaitFlagStateUntilTimeout>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d02d      	beq.n	8008b1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac4:	f043 0220 	orr.w	r2, r3, #32
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e026      	b.n	8008b1e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2101      	movs	r1, #1
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f7ff ff54 	bl	8008988 <SPI_WaitFlagStateUntilTimeout>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d01a      	beq.n	8008b1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aea:	f043 0220 	orr.w	r2, r3, #32
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e013      	b.n	8008b1e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	2200      	movs	r2, #0
 8008afe:	2101      	movs	r1, #1
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f7ff ff41 	bl	8008988 <SPI_WaitFlagStateUntilTimeout>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d007      	beq.n	8008b1c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b10:	f043 0220 	orr.w	r2, r3, #32
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	e000      	b.n	8008b1e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
	...

08008b28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b088      	sub	sp, #32
 8008b2c:	af02      	add	r7, sp, #8
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008b34:	4b1b      	ldr	r3, [pc, #108]	; (8008ba4 <SPI_EndRxTxTransaction+0x7c>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a1b      	ldr	r2, [pc, #108]	; (8008ba8 <SPI_EndRxTxTransaction+0x80>)
 8008b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3e:	0d5b      	lsrs	r3, r3, #21
 8008b40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b44:	fb02 f303 	mul.w	r3, r2, r3
 8008b48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b52:	d112      	bne.n	8008b7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	2180      	movs	r1, #128	; 0x80
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f7ff ff12 	bl	8008988 <SPI_WaitFlagStateUntilTimeout>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d016      	beq.n	8008b98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b6e:	f043 0220 	orr.w	r2, r3, #32
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e00f      	b.n	8008b9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00a      	beq.n	8008b96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	3b01      	subs	r3, #1
 8008b84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b90:	2b80      	cmp	r3, #128	; 0x80
 8008b92:	d0f2      	beq.n	8008b7a <SPI_EndRxTxTransaction+0x52>
 8008b94:	e000      	b.n	8008b98 <SPI_EndRxTxTransaction+0x70>
        break;
 8008b96:	bf00      	nop
  }

  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3718      	adds	r7, #24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	200000a8 	.word	0x200000a8
 8008ba8:	165e9f81 	.word	0x165e9f81

08008bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e01d      	b.n	8008bfa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d106      	bne.n	8008bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7f9 fee8 	bl	80029a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	3304      	adds	r3, #4
 8008be8:	4619      	mov	r1, r3
 8008bea:	4610      	mov	r0, r2
 8008bec:	f000 fa14 	bl	8009018 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b085      	sub	sp, #20
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68da      	ldr	r2, [r3, #12]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f042 0201 	orr.w	r2, r2, #1
 8008c18:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	f003 0307 	and.w	r3, r3, #7
 8008c24:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2b06      	cmp	r3, #6
 8008c2a:	d007      	beq.n	8008c3c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f042 0201 	orr.w	r2, r2, #1
 8008c3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b082      	sub	sp, #8
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	f003 0302 	and.w	r3, r3, #2
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d122      	bne.n	8008ca6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	f003 0302 	and.w	r3, r3, #2
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d11b      	bne.n	8008ca6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f06f 0202 	mvn.w	r2, #2
 8008c76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	f003 0303 	and.w	r3, r3, #3
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d003      	beq.n	8008c94 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f9a5 	bl	8008fdc <HAL_TIM_IC_CaptureCallback>
 8008c92:	e005      	b.n	8008ca0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f997 	bl	8008fc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f9a8 	bl	8008ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	f003 0304 	and.w	r3, r3, #4
 8008cb0:	2b04      	cmp	r3, #4
 8008cb2:	d122      	bne.n	8008cfa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	f003 0304 	and.w	r3, r3, #4
 8008cbe:	2b04      	cmp	r3, #4
 8008cc0:	d11b      	bne.n	8008cfa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f06f 0204 	mvn.w	r2, #4
 8008cca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2202      	movs	r2, #2
 8008cd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d003      	beq.n	8008ce8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f97b 	bl	8008fdc <HAL_TIM_IC_CaptureCallback>
 8008ce6:	e005      	b.n	8008cf4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f96d 	bl	8008fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f97e 	bl	8008ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	f003 0308 	and.w	r3, r3, #8
 8008d04:	2b08      	cmp	r3, #8
 8008d06:	d122      	bne.n	8008d4e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	f003 0308 	and.w	r3, r3, #8
 8008d12:	2b08      	cmp	r3, #8
 8008d14:	d11b      	bne.n	8008d4e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f06f 0208 	mvn.w	r2, #8
 8008d1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2204      	movs	r2, #4
 8008d24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	69db      	ldr	r3, [r3, #28]
 8008d2c:	f003 0303 	and.w	r3, r3, #3
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d003      	beq.n	8008d3c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f951 	bl	8008fdc <HAL_TIM_IC_CaptureCallback>
 8008d3a:	e005      	b.n	8008d48 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f943 	bl	8008fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f954 	bl	8008ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	f003 0310 	and.w	r3, r3, #16
 8008d58:	2b10      	cmp	r3, #16
 8008d5a:	d122      	bne.n	8008da2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	f003 0310 	and.w	r3, r3, #16
 8008d66:	2b10      	cmp	r3, #16
 8008d68:	d11b      	bne.n	8008da2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f06f 0210 	mvn.w	r2, #16
 8008d72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2208      	movs	r2, #8
 8008d78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	69db      	ldr	r3, [r3, #28]
 8008d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d003      	beq.n	8008d90 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f927 	bl	8008fdc <HAL_TIM_IC_CaptureCallback>
 8008d8e:	e005      	b.n	8008d9c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f919 	bl	8008fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f92a 	bl	8008ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	f003 0301 	and.w	r3, r3, #1
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d10e      	bne.n	8008dce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d107      	bne.n	8008dce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f06f 0201 	mvn.w	r2, #1
 8008dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7f9 f9b3 	bl	8002134 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd8:	2b80      	cmp	r3, #128	; 0x80
 8008dda:	d10e      	bne.n	8008dfa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008de6:	2b80      	cmp	r3, #128	; 0x80
 8008de8:	d107      	bne.n	8008dfa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 facf 	bl	8009398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e04:	2b40      	cmp	r3, #64	; 0x40
 8008e06:	d10e      	bne.n	8008e26 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e12:	2b40      	cmp	r3, #64	; 0x40
 8008e14:	d107      	bne.n	8008e26 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f8ef 	bl	8009004 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	f003 0320 	and.w	r3, r3, #32
 8008e30:	2b20      	cmp	r3, #32
 8008e32:	d10e      	bne.n	8008e52 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	f003 0320 	and.w	r3, r3, #32
 8008e3e:	2b20      	cmp	r3, #32
 8008e40:	d107      	bne.n	8008e52 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f06f 0220 	mvn.w	r2, #32
 8008e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fa99 	bl	8009384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e52:	bf00      	nop
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b084      	sub	sp, #16
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d101      	bne.n	8008e72 <HAL_TIM_ConfigClockSource+0x18>
 8008e6e:	2302      	movs	r3, #2
 8008e70:	e0a6      	b.n	8008fc0 <HAL_TIM_ConfigClockSource+0x166>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008e90:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e98:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2b40      	cmp	r3, #64	; 0x40
 8008ea8:	d067      	beq.n	8008f7a <HAL_TIM_ConfigClockSource+0x120>
 8008eaa:	2b40      	cmp	r3, #64	; 0x40
 8008eac:	d80b      	bhi.n	8008ec6 <HAL_TIM_ConfigClockSource+0x6c>
 8008eae:	2b10      	cmp	r3, #16
 8008eb0:	d073      	beq.n	8008f9a <HAL_TIM_ConfigClockSource+0x140>
 8008eb2:	2b10      	cmp	r3, #16
 8008eb4:	d802      	bhi.n	8008ebc <HAL_TIM_ConfigClockSource+0x62>
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d06f      	beq.n	8008f9a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008eba:	e078      	b.n	8008fae <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008ebc:	2b20      	cmp	r3, #32
 8008ebe:	d06c      	beq.n	8008f9a <HAL_TIM_ConfigClockSource+0x140>
 8008ec0:	2b30      	cmp	r3, #48	; 0x30
 8008ec2:	d06a      	beq.n	8008f9a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008ec4:	e073      	b.n	8008fae <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008ec6:	2b70      	cmp	r3, #112	; 0x70
 8008ec8:	d00d      	beq.n	8008ee6 <HAL_TIM_ConfigClockSource+0x8c>
 8008eca:	2b70      	cmp	r3, #112	; 0x70
 8008ecc:	d804      	bhi.n	8008ed8 <HAL_TIM_ConfigClockSource+0x7e>
 8008ece:	2b50      	cmp	r3, #80	; 0x50
 8008ed0:	d033      	beq.n	8008f3a <HAL_TIM_ConfigClockSource+0xe0>
 8008ed2:	2b60      	cmp	r3, #96	; 0x60
 8008ed4:	d041      	beq.n	8008f5a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008ed6:	e06a      	b.n	8008fae <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008edc:	d066      	beq.n	8008fac <HAL_TIM_ConfigClockSource+0x152>
 8008ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ee2:	d017      	beq.n	8008f14 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008ee4:	e063      	b.n	8008fae <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6818      	ldr	r0, [r3, #0]
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	6899      	ldr	r1, [r3, #8]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	f000 f9a9 	bl	800924c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008f08:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	609a      	str	r2, [r3, #8]
      break;
 8008f12:	e04c      	b.n	8008fae <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6818      	ldr	r0, [r3, #0]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	6899      	ldr	r1, [r3, #8]
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	f000 f992 	bl	800924c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	689a      	ldr	r2, [r3, #8]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f36:	609a      	str	r2, [r3, #8]
      break;
 8008f38:	e039      	b.n	8008fae <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6818      	ldr	r0, [r3, #0]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	6859      	ldr	r1, [r3, #4]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	461a      	mov	r2, r3
 8008f48:	f000 f906 	bl	8009158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2150      	movs	r1, #80	; 0x50
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 f95f 	bl	8009216 <TIM_ITRx_SetConfig>
      break;
 8008f58:	e029      	b.n	8008fae <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6818      	ldr	r0, [r3, #0]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	6859      	ldr	r1, [r3, #4]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	461a      	mov	r2, r3
 8008f68:	f000 f925 	bl	80091b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2160      	movs	r1, #96	; 0x60
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 f94f 	bl	8009216 <TIM_ITRx_SetConfig>
      break;
 8008f78:	e019      	b.n	8008fae <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6818      	ldr	r0, [r3, #0]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	6859      	ldr	r1, [r3, #4]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	461a      	mov	r2, r3
 8008f88:	f000 f8e6 	bl	8009158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2140      	movs	r1, #64	; 0x40
 8008f92:	4618      	mov	r0, r3
 8008f94:	f000 f93f 	bl	8009216 <TIM_ITRx_SetConfig>
      break;
 8008f98:	e009      	b.n	8008fae <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	f000 f936 	bl	8009216 <TIM_ITRx_SetConfig>
      break;
 8008faa:	e000      	b.n	8008fae <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008fac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008fd0:	bf00      	nop
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800900c:	bf00      	nop
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a40      	ldr	r2, [pc, #256]	; (800912c <TIM_Base_SetConfig+0x114>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d013      	beq.n	8009058 <TIM_Base_SetConfig+0x40>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009036:	d00f      	beq.n	8009058 <TIM_Base_SetConfig+0x40>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a3d      	ldr	r2, [pc, #244]	; (8009130 <TIM_Base_SetConfig+0x118>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d00b      	beq.n	8009058 <TIM_Base_SetConfig+0x40>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a3c      	ldr	r2, [pc, #240]	; (8009134 <TIM_Base_SetConfig+0x11c>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d007      	beq.n	8009058 <TIM_Base_SetConfig+0x40>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a3b      	ldr	r2, [pc, #236]	; (8009138 <TIM_Base_SetConfig+0x120>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d003      	beq.n	8009058 <TIM_Base_SetConfig+0x40>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a3a      	ldr	r2, [pc, #232]	; (800913c <TIM_Base_SetConfig+0x124>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d108      	bne.n	800906a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800905e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	4313      	orrs	r3, r2
 8009068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a2f      	ldr	r2, [pc, #188]	; (800912c <TIM_Base_SetConfig+0x114>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d02b      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009078:	d027      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a2c      	ldr	r2, [pc, #176]	; (8009130 <TIM_Base_SetConfig+0x118>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d023      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a2b      	ldr	r2, [pc, #172]	; (8009134 <TIM_Base_SetConfig+0x11c>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d01f      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a2a      	ldr	r2, [pc, #168]	; (8009138 <TIM_Base_SetConfig+0x120>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d01b      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a29      	ldr	r2, [pc, #164]	; (800913c <TIM_Base_SetConfig+0x124>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d017      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a28      	ldr	r2, [pc, #160]	; (8009140 <TIM_Base_SetConfig+0x128>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d013      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a27      	ldr	r2, [pc, #156]	; (8009144 <TIM_Base_SetConfig+0x12c>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d00f      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a26      	ldr	r2, [pc, #152]	; (8009148 <TIM_Base_SetConfig+0x130>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d00b      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a25      	ldr	r2, [pc, #148]	; (800914c <TIM_Base_SetConfig+0x134>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d007      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a24      	ldr	r2, [pc, #144]	; (8009150 <TIM_Base_SetConfig+0x138>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d003      	beq.n	80090ca <TIM_Base_SetConfig+0xb2>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a23      	ldr	r2, [pc, #140]	; (8009154 <TIM_Base_SetConfig+0x13c>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d108      	bne.n	80090dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	4313      	orrs	r3, r2
 80090da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	689a      	ldr	r2, [r3, #8]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a0a      	ldr	r2, [pc, #40]	; (800912c <TIM_Base_SetConfig+0x114>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d003      	beq.n	8009110 <TIM_Base_SetConfig+0xf8>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a0c      	ldr	r2, [pc, #48]	; (800913c <TIM_Base_SetConfig+0x124>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d103      	bne.n	8009118 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	691a      	ldr	r2, [r3, #16]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	615a      	str	r2, [r3, #20]
}
 800911e:	bf00      	nop
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	40010000 	.word	0x40010000
 8009130:	40000400 	.word	0x40000400
 8009134:	40000800 	.word	0x40000800
 8009138:	40000c00 	.word	0x40000c00
 800913c:	40010400 	.word	0x40010400
 8009140:	40014000 	.word	0x40014000
 8009144:	40014400 	.word	0x40014400
 8009148:	40014800 	.word	0x40014800
 800914c:	40001800 	.word	0x40001800
 8009150:	40001c00 	.word	0x40001c00
 8009154:	40002000 	.word	0x40002000

08009158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009158:	b480      	push	{r7}
 800915a:	b087      	sub	sp, #28
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6a1b      	ldr	r3, [r3, #32]
 8009168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6a1b      	ldr	r3, [r3, #32]
 800916e:	f023 0201 	bic.w	r2, r3, #1
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	699b      	ldr	r3, [r3, #24]
 800917a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	011b      	lsls	r3, r3, #4
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	4313      	orrs	r3, r2
 800918c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f023 030a 	bic.w	r3, r3, #10
 8009194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	4313      	orrs	r3, r2
 800919c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	693a      	ldr	r2, [r7, #16]
 80091a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	621a      	str	r2, [r3, #32]
}
 80091aa:	bf00      	nop
 80091ac:	371c      	adds	r7, #28
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b087      	sub	sp, #28
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	60f8      	str	r0, [r7, #12]
 80091be:	60b9      	str	r1, [r7, #8]
 80091c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6a1b      	ldr	r3, [r3, #32]
 80091c6:	f023 0210 	bic.w	r2, r3, #16
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	699b      	ldr	r3, [r3, #24]
 80091d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6a1b      	ldr	r3, [r3, #32]
 80091d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	031b      	lsls	r3, r3, #12
 80091e6:	697a      	ldr	r2, [r7, #20]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80091f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	011b      	lsls	r3, r3, #4
 80091f8:	693a      	ldr	r2, [r7, #16]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	693a      	ldr	r2, [r7, #16]
 8009208:	621a      	str	r2, [r3, #32]
}
 800920a:	bf00      	nop
 800920c:	371c      	adds	r7, #28
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009216:	b480      	push	{r7}
 8009218:	b085      	sub	sp, #20
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
 800921e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800922c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	4313      	orrs	r3, r2
 8009234:	f043 0307 	orr.w	r3, r3, #7
 8009238:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	609a      	str	r2, [r3, #8]
}
 8009240:	bf00      	nop
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800924c:	b480      	push	{r7}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	607a      	str	r2, [r7, #4]
 8009258:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009266:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	021a      	lsls	r2, r3, #8
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	431a      	orrs	r2, r3
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	4313      	orrs	r3, r2
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	4313      	orrs	r3, r2
 8009278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	697a      	ldr	r2, [r7, #20]
 800927e:	609a      	str	r2, [r3, #8]
}
 8009280:	bf00      	nop
 8009282:	371c      	adds	r7, #28
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800929c:	2b01      	cmp	r3, #1
 800929e:	d101      	bne.n	80092a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092a0:	2302      	movs	r3, #2
 80092a2:	e05a      	b.n	800935a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2202      	movs	r2, #2
 80092b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a21      	ldr	r2, [pc, #132]	; (8009368 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d022      	beq.n	800932e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092f0:	d01d      	beq.n	800932e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a1d      	ldr	r2, [pc, #116]	; (800936c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d018      	beq.n	800932e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a1b      	ldr	r2, [pc, #108]	; (8009370 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d013      	beq.n	800932e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a1a      	ldr	r2, [pc, #104]	; (8009374 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d00e      	beq.n	800932e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a18      	ldr	r2, [pc, #96]	; (8009378 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d009      	beq.n	800932e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a17      	ldr	r2, [pc, #92]	; (800937c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d004      	beq.n	800932e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a15      	ldr	r2, [pc, #84]	; (8009380 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d10c      	bne.n	8009348 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009334:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	4313      	orrs	r3, r2
 800933e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68ba      	ldr	r2, [r7, #8]
 8009346:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3714      	adds	r7, #20
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	40010000 	.word	0x40010000
 800936c:	40000400 	.word	0x40000400
 8009370:	40000800 	.word	0x40000800
 8009374:	40000c00 	.word	0x40000c00
 8009378:	40010400 	.word	0x40010400
 800937c:	40014000 	.word	0x40014000
 8009380:	40001800 	.word	0x40001800

08009384 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800938c:	bf00      	nop
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093a0:	bf00      	nop
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d101      	bne.n	80093be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e03f      	b.n	800943e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d106      	bne.n	80093d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7f9 fb80 	bl	8002ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2224      	movs	r2, #36	; 0x24
 80093dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68da      	ldr	r2, [r3, #12]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f829 	bl	8009448 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	691a      	ldr	r2, [r3, #16]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009404:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	695a      	ldr	r2, [r3, #20]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009414:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68da      	ldr	r2, [r3, #12]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009424:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2220      	movs	r2, #32
 8009430:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2220      	movs	r2, #32
 8009438:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
	...

08009448 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944c:	b085      	sub	sp, #20
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	68da      	ldr	r2, [r3, #12]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	430a      	orrs	r2, r1
 8009466:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	689a      	ldr	r2, [r3, #8]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	431a      	orrs	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	431a      	orrs	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	69db      	ldr	r3, [r3, #28]
 800947c:	4313      	orrs	r3, r2
 800947e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800948a:	f023 030c 	bic.w	r3, r3, #12
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	6812      	ldr	r2, [r2, #0]
 8009492:	68f9      	ldr	r1, [r7, #12]
 8009494:	430b      	orrs	r3, r1
 8009496:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	695b      	ldr	r3, [r3, #20]
 800949e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	699a      	ldr	r2, [r3, #24]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	430a      	orrs	r2, r1
 80094ac:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094b6:	f040 818b 	bne.w	80097d0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4ac1      	ldr	r2, [pc, #772]	; (80097c4 <UART_SetConfig+0x37c>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d005      	beq.n	80094d0 <UART_SetConfig+0x88>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4abf      	ldr	r2, [pc, #764]	; (80097c8 <UART_SetConfig+0x380>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	f040 80bd 	bne.w	800964a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80094d0:	f7fe fce4 	bl	8007e9c <HAL_RCC_GetPCLK2Freq>
 80094d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	461d      	mov	r5, r3
 80094da:	f04f 0600 	mov.w	r6, #0
 80094de:	46a8      	mov	r8, r5
 80094e0:	46b1      	mov	r9, r6
 80094e2:	eb18 0308 	adds.w	r3, r8, r8
 80094e6:	eb49 0409 	adc.w	r4, r9, r9
 80094ea:	4698      	mov	r8, r3
 80094ec:	46a1      	mov	r9, r4
 80094ee:	eb18 0805 	adds.w	r8, r8, r5
 80094f2:	eb49 0906 	adc.w	r9, r9, r6
 80094f6:	f04f 0100 	mov.w	r1, #0
 80094fa:	f04f 0200 	mov.w	r2, #0
 80094fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009502:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009506:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800950a:	4688      	mov	r8, r1
 800950c:	4691      	mov	r9, r2
 800950e:	eb18 0005 	adds.w	r0, r8, r5
 8009512:	eb49 0106 	adc.w	r1, r9, r6
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	461d      	mov	r5, r3
 800951c:	f04f 0600 	mov.w	r6, #0
 8009520:	196b      	adds	r3, r5, r5
 8009522:	eb46 0406 	adc.w	r4, r6, r6
 8009526:	461a      	mov	r2, r3
 8009528:	4623      	mov	r3, r4
 800952a:	f7f6 fe4d 	bl	80001c8 <__aeabi_uldivmod>
 800952e:	4603      	mov	r3, r0
 8009530:	460c      	mov	r4, r1
 8009532:	461a      	mov	r2, r3
 8009534:	4ba5      	ldr	r3, [pc, #660]	; (80097cc <UART_SetConfig+0x384>)
 8009536:	fba3 2302 	umull	r2, r3, r3, r2
 800953a:	095b      	lsrs	r3, r3, #5
 800953c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	461d      	mov	r5, r3
 8009544:	f04f 0600 	mov.w	r6, #0
 8009548:	46a9      	mov	r9, r5
 800954a:	46b2      	mov	sl, r6
 800954c:	eb19 0309 	adds.w	r3, r9, r9
 8009550:	eb4a 040a 	adc.w	r4, sl, sl
 8009554:	4699      	mov	r9, r3
 8009556:	46a2      	mov	sl, r4
 8009558:	eb19 0905 	adds.w	r9, r9, r5
 800955c:	eb4a 0a06 	adc.w	sl, sl, r6
 8009560:	f04f 0100 	mov.w	r1, #0
 8009564:	f04f 0200 	mov.w	r2, #0
 8009568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800956c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009570:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009574:	4689      	mov	r9, r1
 8009576:	4692      	mov	sl, r2
 8009578:	eb19 0005 	adds.w	r0, r9, r5
 800957c:	eb4a 0106 	adc.w	r1, sl, r6
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	461d      	mov	r5, r3
 8009586:	f04f 0600 	mov.w	r6, #0
 800958a:	196b      	adds	r3, r5, r5
 800958c:	eb46 0406 	adc.w	r4, r6, r6
 8009590:	461a      	mov	r2, r3
 8009592:	4623      	mov	r3, r4
 8009594:	f7f6 fe18 	bl	80001c8 <__aeabi_uldivmod>
 8009598:	4603      	mov	r3, r0
 800959a:	460c      	mov	r4, r1
 800959c:	461a      	mov	r2, r3
 800959e:	4b8b      	ldr	r3, [pc, #556]	; (80097cc <UART_SetConfig+0x384>)
 80095a0:	fba3 1302 	umull	r1, r3, r3, r2
 80095a4:	095b      	lsrs	r3, r3, #5
 80095a6:	2164      	movs	r1, #100	; 0x64
 80095a8:	fb01 f303 	mul.w	r3, r1, r3
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	00db      	lsls	r3, r3, #3
 80095b0:	3332      	adds	r3, #50	; 0x32
 80095b2:	4a86      	ldr	r2, [pc, #536]	; (80097cc <UART_SetConfig+0x384>)
 80095b4:	fba2 2303 	umull	r2, r3, r2, r3
 80095b8:	095b      	lsrs	r3, r3, #5
 80095ba:	005b      	lsls	r3, r3, #1
 80095bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80095c0:	4498      	add	r8, r3
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	461d      	mov	r5, r3
 80095c6:	f04f 0600 	mov.w	r6, #0
 80095ca:	46a9      	mov	r9, r5
 80095cc:	46b2      	mov	sl, r6
 80095ce:	eb19 0309 	adds.w	r3, r9, r9
 80095d2:	eb4a 040a 	adc.w	r4, sl, sl
 80095d6:	4699      	mov	r9, r3
 80095d8:	46a2      	mov	sl, r4
 80095da:	eb19 0905 	adds.w	r9, r9, r5
 80095de:	eb4a 0a06 	adc.w	sl, sl, r6
 80095e2:	f04f 0100 	mov.w	r1, #0
 80095e6:	f04f 0200 	mov.w	r2, #0
 80095ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80095f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80095f6:	4689      	mov	r9, r1
 80095f8:	4692      	mov	sl, r2
 80095fa:	eb19 0005 	adds.w	r0, r9, r5
 80095fe:	eb4a 0106 	adc.w	r1, sl, r6
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	461d      	mov	r5, r3
 8009608:	f04f 0600 	mov.w	r6, #0
 800960c:	196b      	adds	r3, r5, r5
 800960e:	eb46 0406 	adc.w	r4, r6, r6
 8009612:	461a      	mov	r2, r3
 8009614:	4623      	mov	r3, r4
 8009616:	f7f6 fdd7 	bl	80001c8 <__aeabi_uldivmod>
 800961a:	4603      	mov	r3, r0
 800961c:	460c      	mov	r4, r1
 800961e:	461a      	mov	r2, r3
 8009620:	4b6a      	ldr	r3, [pc, #424]	; (80097cc <UART_SetConfig+0x384>)
 8009622:	fba3 1302 	umull	r1, r3, r3, r2
 8009626:	095b      	lsrs	r3, r3, #5
 8009628:	2164      	movs	r1, #100	; 0x64
 800962a:	fb01 f303 	mul.w	r3, r1, r3
 800962e:	1ad3      	subs	r3, r2, r3
 8009630:	00db      	lsls	r3, r3, #3
 8009632:	3332      	adds	r3, #50	; 0x32
 8009634:	4a65      	ldr	r2, [pc, #404]	; (80097cc <UART_SetConfig+0x384>)
 8009636:	fba2 2303 	umull	r2, r3, r2, r3
 800963a:	095b      	lsrs	r3, r3, #5
 800963c:	f003 0207 	and.w	r2, r3, #7
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4442      	add	r2, r8
 8009646:	609a      	str	r2, [r3, #8]
 8009648:	e26f      	b.n	8009b2a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800964a:	f7fe fc13 	bl	8007e74 <HAL_RCC_GetPCLK1Freq>
 800964e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	461d      	mov	r5, r3
 8009654:	f04f 0600 	mov.w	r6, #0
 8009658:	46a8      	mov	r8, r5
 800965a:	46b1      	mov	r9, r6
 800965c:	eb18 0308 	adds.w	r3, r8, r8
 8009660:	eb49 0409 	adc.w	r4, r9, r9
 8009664:	4698      	mov	r8, r3
 8009666:	46a1      	mov	r9, r4
 8009668:	eb18 0805 	adds.w	r8, r8, r5
 800966c:	eb49 0906 	adc.w	r9, r9, r6
 8009670:	f04f 0100 	mov.w	r1, #0
 8009674:	f04f 0200 	mov.w	r2, #0
 8009678:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800967c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009680:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009684:	4688      	mov	r8, r1
 8009686:	4691      	mov	r9, r2
 8009688:	eb18 0005 	adds.w	r0, r8, r5
 800968c:	eb49 0106 	adc.w	r1, r9, r6
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	461d      	mov	r5, r3
 8009696:	f04f 0600 	mov.w	r6, #0
 800969a:	196b      	adds	r3, r5, r5
 800969c:	eb46 0406 	adc.w	r4, r6, r6
 80096a0:	461a      	mov	r2, r3
 80096a2:	4623      	mov	r3, r4
 80096a4:	f7f6 fd90 	bl	80001c8 <__aeabi_uldivmod>
 80096a8:	4603      	mov	r3, r0
 80096aa:	460c      	mov	r4, r1
 80096ac:	461a      	mov	r2, r3
 80096ae:	4b47      	ldr	r3, [pc, #284]	; (80097cc <UART_SetConfig+0x384>)
 80096b0:	fba3 2302 	umull	r2, r3, r3, r2
 80096b4:	095b      	lsrs	r3, r3, #5
 80096b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	461d      	mov	r5, r3
 80096be:	f04f 0600 	mov.w	r6, #0
 80096c2:	46a9      	mov	r9, r5
 80096c4:	46b2      	mov	sl, r6
 80096c6:	eb19 0309 	adds.w	r3, r9, r9
 80096ca:	eb4a 040a 	adc.w	r4, sl, sl
 80096ce:	4699      	mov	r9, r3
 80096d0:	46a2      	mov	sl, r4
 80096d2:	eb19 0905 	adds.w	r9, r9, r5
 80096d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80096da:	f04f 0100 	mov.w	r1, #0
 80096de:	f04f 0200 	mov.w	r2, #0
 80096e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80096ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80096ee:	4689      	mov	r9, r1
 80096f0:	4692      	mov	sl, r2
 80096f2:	eb19 0005 	adds.w	r0, r9, r5
 80096f6:	eb4a 0106 	adc.w	r1, sl, r6
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	461d      	mov	r5, r3
 8009700:	f04f 0600 	mov.w	r6, #0
 8009704:	196b      	adds	r3, r5, r5
 8009706:	eb46 0406 	adc.w	r4, r6, r6
 800970a:	461a      	mov	r2, r3
 800970c:	4623      	mov	r3, r4
 800970e:	f7f6 fd5b 	bl	80001c8 <__aeabi_uldivmod>
 8009712:	4603      	mov	r3, r0
 8009714:	460c      	mov	r4, r1
 8009716:	461a      	mov	r2, r3
 8009718:	4b2c      	ldr	r3, [pc, #176]	; (80097cc <UART_SetConfig+0x384>)
 800971a:	fba3 1302 	umull	r1, r3, r3, r2
 800971e:	095b      	lsrs	r3, r3, #5
 8009720:	2164      	movs	r1, #100	; 0x64
 8009722:	fb01 f303 	mul.w	r3, r1, r3
 8009726:	1ad3      	subs	r3, r2, r3
 8009728:	00db      	lsls	r3, r3, #3
 800972a:	3332      	adds	r3, #50	; 0x32
 800972c:	4a27      	ldr	r2, [pc, #156]	; (80097cc <UART_SetConfig+0x384>)
 800972e:	fba2 2303 	umull	r2, r3, r2, r3
 8009732:	095b      	lsrs	r3, r3, #5
 8009734:	005b      	lsls	r3, r3, #1
 8009736:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800973a:	4498      	add	r8, r3
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	461d      	mov	r5, r3
 8009740:	f04f 0600 	mov.w	r6, #0
 8009744:	46a9      	mov	r9, r5
 8009746:	46b2      	mov	sl, r6
 8009748:	eb19 0309 	adds.w	r3, r9, r9
 800974c:	eb4a 040a 	adc.w	r4, sl, sl
 8009750:	4699      	mov	r9, r3
 8009752:	46a2      	mov	sl, r4
 8009754:	eb19 0905 	adds.w	r9, r9, r5
 8009758:	eb4a 0a06 	adc.w	sl, sl, r6
 800975c:	f04f 0100 	mov.w	r1, #0
 8009760:	f04f 0200 	mov.w	r2, #0
 8009764:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009768:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800976c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009770:	4689      	mov	r9, r1
 8009772:	4692      	mov	sl, r2
 8009774:	eb19 0005 	adds.w	r0, r9, r5
 8009778:	eb4a 0106 	adc.w	r1, sl, r6
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	461d      	mov	r5, r3
 8009782:	f04f 0600 	mov.w	r6, #0
 8009786:	196b      	adds	r3, r5, r5
 8009788:	eb46 0406 	adc.w	r4, r6, r6
 800978c:	461a      	mov	r2, r3
 800978e:	4623      	mov	r3, r4
 8009790:	f7f6 fd1a 	bl	80001c8 <__aeabi_uldivmod>
 8009794:	4603      	mov	r3, r0
 8009796:	460c      	mov	r4, r1
 8009798:	461a      	mov	r2, r3
 800979a:	4b0c      	ldr	r3, [pc, #48]	; (80097cc <UART_SetConfig+0x384>)
 800979c:	fba3 1302 	umull	r1, r3, r3, r2
 80097a0:	095b      	lsrs	r3, r3, #5
 80097a2:	2164      	movs	r1, #100	; 0x64
 80097a4:	fb01 f303 	mul.w	r3, r1, r3
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	00db      	lsls	r3, r3, #3
 80097ac:	3332      	adds	r3, #50	; 0x32
 80097ae:	4a07      	ldr	r2, [pc, #28]	; (80097cc <UART_SetConfig+0x384>)
 80097b0:	fba2 2303 	umull	r2, r3, r2, r3
 80097b4:	095b      	lsrs	r3, r3, #5
 80097b6:	f003 0207 	and.w	r2, r3, #7
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4442      	add	r2, r8
 80097c0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80097c2:	e1b2      	b.n	8009b2a <UART_SetConfig+0x6e2>
 80097c4:	40011000 	.word	0x40011000
 80097c8:	40011400 	.word	0x40011400
 80097cc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4ad7      	ldr	r2, [pc, #860]	; (8009b34 <UART_SetConfig+0x6ec>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d005      	beq.n	80097e6 <UART_SetConfig+0x39e>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4ad6      	ldr	r2, [pc, #856]	; (8009b38 <UART_SetConfig+0x6f0>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	f040 80d1 	bne.w	8009988 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80097e6:	f7fe fb59 	bl	8007e9c <HAL_RCC_GetPCLK2Freq>
 80097ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	469a      	mov	sl, r3
 80097f0:	f04f 0b00 	mov.w	fp, #0
 80097f4:	46d0      	mov	r8, sl
 80097f6:	46d9      	mov	r9, fp
 80097f8:	eb18 0308 	adds.w	r3, r8, r8
 80097fc:	eb49 0409 	adc.w	r4, r9, r9
 8009800:	4698      	mov	r8, r3
 8009802:	46a1      	mov	r9, r4
 8009804:	eb18 080a 	adds.w	r8, r8, sl
 8009808:	eb49 090b 	adc.w	r9, r9, fp
 800980c:	f04f 0100 	mov.w	r1, #0
 8009810:	f04f 0200 	mov.w	r2, #0
 8009814:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009818:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800981c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009820:	4688      	mov	r8, r1
 8009822:	4691      	mov	r9, r2
 8009824:	eb1a 0508 	adds.w	r5, sl, r8
 8009828:	eb4b 0609 	adc.w	r6, fp, r9
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	4619      	mov	r1, r3
 8009832:	f04f 0200 	mov.w	r2, #0
 8009836:	f04f 0300 	mov.w	r3, #0
 800983a:	f04f 0400 	mov.w	r4, #0
 800983e:	0094      	lsls	r4, r2, #2
 8009840:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009844:	008b      	lsls	r3, r1, #2
 8009846:	461a      	mov	r2, r3
 8009848:	4623      	mov	r3, r4
 800984a:	4628      	mov	r0, r5
 800984c:	4631      	mov	r1, r6
 800984e:	f7f6 fcbb 	bl	80001c8 <__aeabi_uldivmod>
 8009852:	4603      	mov	r3, r0
 8009854:	460c      	mov	r4, r1
 8009856:	461a      	mov	r2, r3
 8009858:	4bb8      	ldr	r3, [pc, #736]	; (8009b3c <UART_SetConfig+0x6f4>)
 800985a:	fba3 2302 	umull	r2, r3, r3, r2
 800985e:	095b      	lsrs	r3, r3, #5
 8009860:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	469b      	mov	fp, r3
 8009868:	f04f 0c00 	mov.w	ip, #0
 800986c:	46d9      	mov	r9, fp
 800986e:	46e2      	mov	sl, ip
 8009870:	eb19 0309 	adds.w	r3, r9, r9
 8009874:	eb4a 040a 	adc.w	r4, sl, sl
 8009878:	4699      	mov	r9, r3
 800987a:	46a2      	mov	sl, r4
 800987c:	eb19 090b 	adds.w	r9, r9, fp
 8009880:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009884:	f04f 0100 	mov.w	r1, #0
 8009888:	f04f 0200 	mov.w	r2, #0
 800988c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009890:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009894:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009898:	4689      	mov	r9, r1
 800989a:	4692      	mov	sl, r2
 800989c:	eb1b 0509 	adds.w	r5, fp, r9
 80098a0:	eb4c 060a 	adc.w	r6, ip, sl
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	4619      	mov	r1, r3
 80098aa:	f04f 0200 	mov.w	r2, #0
 80098ae:	f04f 0300 	mov.w	r3, #0
 80098b2:	f04f 0400 	mov.w	r4, #0
 80098b6:	0094      	lsls	r4, r2, #2
 80098b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80098bc:	008b      	lsls	r3, r1, #2
 80098be:	461a      	mov	r2, r3
 80098c0:	4623      	mov	r3, r4
 80098c2:	4628      	mov	r0, r5
 80098c4:	4631      	mov	r1, r6
 80098c6:	f7f6 fc7f 	bl	80001c8 <__aeabi_uldivmod>
 80098ca:	4603      	mov	r3, r0
 80098cc:	460c      	mov	r4, r1
 80098ce:	461a      	mov	r2, r3
 80098d0:	4b9a      	ldr	r3, [pc, #616]	; (8009b3c <UART_SetConfig+0x6f4>)
 80098d2:	fba3 1302 	umull	r1, r3, r3, r2
 80098d6:	095b      	lsrs	r3, r3, #5
 80098d8:	2164      	movs	r1, #100	; 0x64
 80098da:	fb01 f303 	mul.w	r3, r1, r3
 80098de:	1ad3      	subs	r3, r2, r3
 80098e0:	011b      	lsls	r3, r3, #4
 80098e2:	3332      	adds	r3, #50	; 0x32
 80098e4:	4a95      	ldr	r2, [pc, #596]	; (8009b3c <UART_SetConfig+0x6f4>)
 80098e6:	fba2 2303 	umull	r2, r3, r2, r3
 80098ea:	095b      	lsrs	r3, r3, #5
 80098ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098f0:	4498      	add	r8, r3
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	469b      	mov	fp, r3
 80098f6:	f04f 0c00 	mov.w	ip, #0
 80098fa:	46d9      	mov	r9, fp
 80098fc:	46e2      	mov	sl, ip
 80098fe:	eb19 0309 	adds.w	r3, r9, r9
 8009902:	eb4a 040a 	adc.w	r4, sl, sl
 8009906:	4699      	mov	r9, r3
 8009908:	46a2      	mov	sl, r4
 800990a:	eb19 090b 	adds.w	r9, r9, fp
 800990e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009912:	f04f 0100 	mov.w	r1, #0
 8009916:	f04f 0200 	mov.w	r2, #0
 800991a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800991e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009922:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009926:	4689      	mov	r9, r1
 8009928:	4692      	mov	sl, r2
 800992a:	eb1b 0509 	adds.w	r5, fp, r9
 800992e:	eb4c 060a 	adc.w	r6, ip, sl
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	4619      	mov	r1, r3
 8009938:	f04f 0200 	mov.w	r2, #0
 800993c:	f04f 0300 	mov.w	r3, #0
 8009940:	f04f 0400 	mov.w	r4, #0
 8009944:	0094      	lsls	r4, r2, #2
 8009946:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800994a:	008b      	lsls	r3, r1, #2
 800994c:	461a      	mov	r2, r3
 800994e:	4623      	mov	r3, r4
 8009950:	4628      	mov	r0, r5
 8009952:	4631      	mov	r1, r6
 8009954:	f7f6 fc38 	bl	80001c8 <__aeabi_uldivmod>
 8009958:	4603      	mov	r3, r0
 800995a:	460c      	mov	r4, r1
 800995c:	461a      	mov	r2, r3
 800995e:	4b77      	ldr	r3, [pc, #476]	; (8009b3c <UART_SetConfig+0x6f4>)
 8009960:	fba3 1302 	umull	r1, r3, r3, r2
 8009964:	095b      	lsrs	r3, r3, #5
 8009966:	2164      	movs	r1, #100	; 0x64
 8009968:	fb01 f303 	mul.w	r3, r1, r3
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	011b      	lsls	r3, r3, #4
 8009970:	3332      	adds	r3, #50	; 0x32
 8009972:	4a72      	ldr	r2, [pc, #456]	; (8009b3c <UART_SetConfig+0x6f4>)
 8009974:	fba2 2303 	umull	r2, r3, r2, r3
 8009978:	095b      	lsrs	r3, r3, #5
 800997a:	f003 020f 	and.w	r2, r3, #15
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4442      	add	r2, r8
 8009984:	609a      	str	r2, [r3, #8]
 8009986:	e0d0      	b.n	8009b2a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009988:	f7fe fa74 	bl	8007e74 <HAL_RCC_GetPCLK1Freq>
 800998c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	469a      	mov	sl, r3
 8009992:	f04f 0b00 	mov.w	fp, #0
 8009996:	46d0      	mov	r8, sl
 8009998:	46d9      	mov	r9, fp
 800999a:	eb18 0308 	adds.w	r3, r8, r8
 800999e:	eb49 0409 	adc.w	r4, r9, r9
 80099a2:	4698      	mov	r8, r3
 80099a4:	46a1      	mov	r9, r4
 80099a6:	eb18 080a 	adds.w	r8, r8, sl
 80099aa:	eb49 090b 	adc.w	r9, r9, fp
 80099ae:	f04f 0100 	mov.w	r1, #0
 80099b2:	f04f 0200 	mov.w	r2, #0
 80099b6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80099ba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80099be:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80099c2:	4688      	mov	r8, r1
 80099c4:	4691      	mov	r9, r2
 80099c6:	eb1a 0508 	adds.w	r5, sl, r8
 80099ca:	eb4b 0609 	adc.w	r6, fp, r9
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	4619      	mov	r1, r3
 80099d4:	f04f 0200 	mov.w	r2, #0
 80099d8:	f04f 0300 	mov.w	r3, #0
 80099dc:	f04f 0400 	mov.w	r4, #0
 80099e0:	0094      	lsls	r4, r2, #2
 80099e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80099e6:	008b      	lsls	r3, r1, #2
 80099e8:	461a      	mov	r2, r3
 80099ea:	4623      	mov	r3, r4
 80099ec:	4628      	mov	r0, r5
 80099ee:	4631      	mov	r1, r6
 80099f0:	f7f6 fbea 	bl	80001c8 <__aeabi_uldivmod>
 80099f4:	4603      	mov	r3, r0
 80099f6:	460c      	mov	r4, r1
 80099f8:	461a      	mov	r2, r3
 80099fa:	4b50      	ldr	r3, [pc, #320]	; (8009b3c <UART_SetConfig+0x6f4>)
 80099fc:	fba3 2302 	umull	r2, r3, r3, r2
 8009a00:	095b      	lsrs	r3, r3, #5
 8009a02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	469b      	mov	fp, r3
 8009a0a:	f04f 0c00 	mov.w	ip, #0
 8009a0e:	46d9      	mov	r9, fp
 8009a10:	46e2      	mov	sl, ip
 8009a12:	eb19 0309 	adds.w	r3, r9, r9
 8009a16:	eb4a 040a 	adc.w	r4, sl, sl
 8009a1a:	4699      	mov	r9, r3
 8009a1c:	46a2      	mov	sl, r4
 8009a1e:	eb19 090b 	adds.w	r9, r9, fp
 8009a22:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009a26:	f04f 0100 	mov.w	r1, #0
 8009a2a:	f04f 0200 	mov.w	r2, #0
 8009a2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009a36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009a3a:	4689      	mov	r9, r1
 8009a3c:	4692      	mov	sl, r2
 8009a3e:	eb1b 0509 	adds.w	r5, fp, r9
 8009a42:	eb4c 060a 	adc.w	r6, ip, sl
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	f04f 0200 	mov.w	r2, #0
 8009a50:	f04f 0300 	mov.w	r3, #0
 8009a54:	f04f 0400 	mov.w	r4, #0
 8009a58:	0094      	lsls	r4, r2, #2
 8009a5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009a5e:	008b      	lsls	r3, r1, #2
 8009a60:	461a      	mov	r2, r3
 8009a62:	4623      	mov	r3, r4
 8009a64:	4628      	mov	r0, r5
 8009a66:	4631      	mov	r1, r6
 8009a68:	f7f6 fbae 	bl	80001c8 <__aeabi_uldivmod>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	460c      	mov	r4, r1
 8009a70:	461a      	mov	r2, r3
 8009a72:	4b32      	ldr	r3, [pc, #200]	; (8009b3c <UART_SetConfig+0x6f4>)
 8009a74:	fba3 1302 	umull	r1, r3, r3, r2
 8009a78:	095b      	lsrs	r3, r3, #5
 8009a7a:	2164      	movs	r1, #100	; 0x64
 8009a7c:	fb01 f303 	mul.w	r3, r1, r3
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	011b      	lsls	r3, r3, #4
 8009a84:	3332      	adds	r3, #50	; 0x32
 8009a86:	4a2d      	ldr	r2, [pc, #180]	; (8009b3c <UART_SetConfig+0x6f4>)
 8009a88:	fba2 2303 	umull	r2, r3, r2, r3
 8009a8c:	095b      	lsrs	r3, r3, #5
 8009a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a92:	4498      	add	r8, r3
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	469b      	mov	fp, r3
 8009a98:	f04f 0c00 	mov.w	ip, #0
 8009a9c:	46d9      	mov	r9, fp
 8009a9e:	46e2      	mov	sl, ip
 8009aa0:	eb19 0309 	adds.w	r3, r9, r9
 8009aa4:	eb4a 040a 	adc.w	r4, sl, sl
 8009aa8:	4699      	mov	r9, r3
 8009aaa:	46a2      	mov	sl, r4
 8009aac:	eb19 090b 	adds.w	r9, r9, fp
 8009ab0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009ab4:	f04f 0100 	mov.w	r1, #0
 8009ab8:	f04f 0200 	mov.w	r2, #0
 8009abc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ac0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009ac4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009ac8:	4689      	mov	r9, r1
 8009aca:	4692      	mov	sl, r2
 8009acc:	eb1b 0509 	adds.w	r5, fp, r9
 8009ad0:	eb4c 060a 	adc.w	r6, ip, sl
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	4619      	mov	r1, r3
 8009ada:	f04f 0200 	mov.w	r2, #0
 8009ade:	f04f 0300 	mov.w	r3, #0
 8009ae2:	f04f 0400 	mov.w	r4, #0
 8009ae6:	0094      	lsls	r4, r2, #2
 8009ae8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009aec:	008b      	lsls	r3, r1, #2
 8009aee:	461a      	mov	r2, r3
 8009af0:	4623      	mov	r3, r4
 8009af2:	4628      	mov	r0, r5
 8009af4:	4631      	mov	r1, r6
 8009af6:	f7f6 fb67 	bl	80001c8 <__aeabi_uldivmod>
 8009afa:	4603      	mov	r3, r0
 8009afc:	460c      	mov	r4, r1
 8009afe:	461a      	mov	r2, r3
 8009b00:	4b0e      	ldr	r3, [pc, #56]	; (8009b3c <UART_SetConfig+0x6f4>)
 8009b02:	fba3 1302 	umull	r1, r3, r3, r2
 8009b06:	095b      	lsrs	r3, r3, #5
 8009b08:	2164      	movs	r1, #100	; 0x64
 8009b0a:	fb01 f303 	mul.w	r3, r1, r3
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	011b      	lsls	r3, r3, #4
 8009b12:	3332      	adds	r3, #50	; 0x32
 8009b14:	4a09      	ldr	r2, [pc, #36]	; (8009b3c <UART_SetConfig+0x6f4>)
 8009b16:	fba2 2303 	umull	r2, r3, r2, r3
 8009b1a:	095b      	lsrs	r3, r3, #5
 8009b1c:	f003 020f 	and.w	r2, r3, #15
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4442      	add	r2, r8
 8009b26:	609a      	str	r2, [r3, #8]
}
 8009b28:	e7ff      	b.n	8009b2a <UART_SetConfig+0x6e2>
 8009b2a:	bf00      	nop
 8009b2c:	3714      	adds	r7, #20
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b34:	40011000 	.word	0x40011000
 8009b38:	40011400 	.word	0x40011400
 8009b3c:	51eb851f 	.word	0x51eb851f

08009b40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b40:	b084      	sub	sp, #16
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b084      	sub	sp, #16
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	f107 001c 	add.w	r0, r7, #28
 8009b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d122      	bne.n	8009b9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009b6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d105      	bne.n	8009b92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f001 fab4 	bl	800b100 <USB_CoreReset>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	73fb      	strb	r3, [r7, #15]
 8009b9c:	e01a      	b.n	8009bd4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f001 faa8 	bl	800b100 <USB_CoreReset>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d106      	bne.n	8009bc8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	639a      	str	r2, [r3, #56]	; 0x38
 8009bc6:	e005      	b.n	8009bd4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d10b      	bne.n	8009bf2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	f043 0206 	orr.w	r2, r3, #6
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	f043 0220 	orr.w	r2, r3, #32
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009bfe:	b004      	add	sp, #16
 8009c00:	4770      	bx	lr
	...

08009c04 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b087      	sub	sp, #28
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	4613      	mov	r3, r2
 8009c10:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009c12:	79fb      	ldrb	r3, [r7, #7]
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d165      	bne.n	8009ce4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	4a41      	ldr	r2, [pc, #260]	; (8009d20 <USB_SetTurnaroundTime+0x11c>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d906      	bls.n	8009c2e <USB_SetTurnaroundTime+0x2a>
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	4a40      	ldr	r2, [pc, #256]	; (8009d24 <USB_SetTurnaroundTime+0x120>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d802      	bhi.n	8009c2e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009c28:	230f      	movs	r3, #15
 8009c2a:	617b      	str	r3, [r7, #20]
 8009c2c:	e062      	b.n	8009cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	4a3c      	ldr	r2, [pc, #240]	; (8009d24 <USB_SetTurnaroundTime+0x120>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d906      	bls.n	8009c44 <USB_SetTurnaroundTime+0x40>
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	4a3b      	ldr	r2, [pc, #236]	; (8009d28 <USB_SetTurnaroundTime+0x124>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d802      	bhi.n	8009c44 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009c3e:	230e      	movs	r3, #14
 8009c40:	617b      	str	r3, [r7, #20]
 8009c42:	e057      	b.n	8009cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	4a38      	ldr	r2, [pc, #224]	; (8009d28 <USB_SetTurnaroundTime+0x124>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d906      	bls.n	8009c5a <USB_SetTurnaroundTime+0x56>
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	4a37      	ldr	r2, [pc, #220]	; (8009d2c <USB_SetTurnaroundTime+0x128>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d802      	bhi.n	8009c5a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009c54:	230d      	movs	r3, #13
 8009c56:	617b      	str	r3, [r7, #20]
 8009c58:	e04c      	b.n	8009cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	4a33      	ldr	r2, [pc, #204]	; (8009d2c <USB_SetTurnaroundTime+0x128>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d906      	bls.n	8009c70 <USB_SetTurnaroundTime+0x6c>
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	4a32      	ldr	r2, [pc, #200]	; (8009d30 <USB_SetTurnaroundTime+0x12c>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d802      	bhi.n	8009c70 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009c6a:	230c      	movs	r3, #12
 8009c6c:	617b      	str	r3, [r7, #20]
 8009c6e:	e041      	b.n	8009cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	4a2f      	ldr	r2, [pc, #188]	; (8009d30 <USB_SetTurnaroundTime+0x12c>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d906      	bls.n	8009c86 <USB_SetTurnaroundTime+0x82>
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	4a2e      	ldr	r2, [pc, #184]	; (8009d34 <USB_SetTurnaroundTime+0x130>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d802      	bhi.n	8009c86 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009c80:	230b      	movs	r3, #11
 8009c82:	617b      	str	r3, [r7, #20]
 8009c84:	e036      	b.n	8009cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	4a2a      	ldr	r2, [pc, #168]	; (8009d34 <USB_SetTurnaroundTime+0x130>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d906      	bls.n	8009c9c <USB_SetTurnaroundTime+0x98>
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	4a29      	ldr	r2, [pc, #164]	; (8009d38 <USB_SetTurnaroundTime+0x134>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d802      	bhi.n	8009c9c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009c96:	230a      	movs	r3, #10
 8009c98:	617b      	str	r3, [r7, #20]
 8009c9a:	e02b      	b.n	8009cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	4a26      	ldr	r2, [pc, #152]	; (8009d38 <USB_SetTurnaroundTime+0x134>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d906      	bls.n	8009cb2 <USB_SetTurnaroundTime+0xae>
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	4a25      	ldr	r2, [pc, #148]	; (8009d3c <USB_SetTurnaroundTime+0x138>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d802      	bhi.n	8009cb2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009cac:	2309      	movs	r3, #9
 8009cae:	617b      	str	r3, [r7, #20]
 8009cb0:	e020      	b.n	8009cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	4a21      	ldr	r2, [pc, #132]	; (8009d3c <USB_SetTurnaroundTime+0x138>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d906      	bls.n	8009cc8 <USB_SetTurnaroundTime+0xc4>
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	4a20      	ldr	r2, [pc, #128]	; (8009d40 <USB_SetTurnaroundTime+0x13c>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d802      	bhi.n	8009cc8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009cc2:	2308      	movs	r3, #8
 8009cc4:	617b      	str	r3, [r7, #20]
 8009cc6:	e015      	b.n	8009cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	4a1d      	ldr	r2, [pc, #116]	; (8009d40 <USB_SetTurnaroundTime+0x13c>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d906      	bls.n	8009cde <USB_SetTurnaroundTime+0xda>
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	4a1c      	ldr	r2, [pc, #112]	; (8009d44 <USB_SetTurnaroundTime+0x140>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d802      	bhi.n	8009cde <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009cd8:	2307      	movs	r3, #7
 8009cda:	617b      	str	r3, [r7, #20]
 8009cdc:	e00a      	b.n	8009cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009cde:	2306      	movs	r3, #6
 8009ce0:	617b      	str	r3, [r7, #20]
 8009ce2:	e007      	b.n	8009cf4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009ce4:	79fb      	ldrb	r3, [r7, #7]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d102      	bne.n	8009cf0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009cea:	2309      	movs	r3, #9
 8009cec:	617b      	str	r3, [r7, #20]
 8009cee:	e001      	b.n	8009cf4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009cf0:	2309      	movs	r3, #9
 8009cf2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	68da      	ldr	r2, [r3, #12]
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	029b      	lsls	r3, r3, #10
 8009d08:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009d0c:	431a      	orrs	r2, r3
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	371c      	adds	r7, #28
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr
 8009d20:	00d8acbf 	.word	0x00d8acbf
 8009d24:	00e4e1bf 	.word	0x00e4e1bf
 8009d28:	00f423ff 	.word	0x00f423ff
 8009d2c:	0106737f 	.word	0x0106737f
 8009d30:	011a499f 	.word	0x011a499f
 8009d34:	01312cff 	.word	0x01312cff
 8009d38:	014ca43f 	.word	0x014ca43f
 8009d3c:	016e35ff 	.word	0x016e35ff
 8009d40:	01a6ab1f 	.word	0x01a6ab1f
 8009d44:	01e847ff 	.word	0x01e847ff

08009d48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	f043 0201 	orr.w	r2, r3, #1
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	370c      	adds	r7, #12
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr

08009d6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	b083      	sub	sp, #12
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	f023 0201 	bic.w	r2, r3, #1
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	460b      	mov	r3, r1
 8009d96:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009da4:	78fb      	ldrb	r3, [r7, #3]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d106      	bne.n	8009db8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	60da      	str	r2, [r3, #12]
 8009db6:	e00b      	b.n	8009dd0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009db8:	78fb      	ldrb	r3, [r7, #3]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d106      	bne.n	8009dcc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	60da      	str	r2, [r3, #12]
 8009dca:	e001      	b.n	8009dd0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e003      	b.n	8009dd8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009dd0:	2032      	movs	r0, #50	; 0x32
 8009dd2:	f7f8 ff9b 	bl	8002d0c <HAL_Delay>

  return HAL_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009de0:	b084      	sub	sp, #16
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b086      	sub	sp, #24
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
 8009dea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009dee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	613b      	str	r3, [r7, #16]
 8009dfe:	e009      	b.n	8009e14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	3340      	adds	r3, #64	; 0x40
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	3301      	adds	r3, #1
 8009e12:	613b      	str	r3, [r7, #16]
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	2b0e      	cmp	r3, #14
 8009e18:	d9f2      	bls.n	8009e00 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d11c      	bne.n	8009e5a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e2e:	f043 0302 	orr.w	r3, r3, #2
 8009e32:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e38:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e44:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e50:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	639a      	str	r2, [r3, #56]	; 0x38
 8009e58:	e00b      	b.n	8009e72 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e78:	461a      	mov	r2, r3
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e84:	4619      	mov	r1, r3
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	680b      	ldr	r3, [r1, #0]
 8009e90:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d10c      	bne.n	8009eb2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d104      	bne.n	8009ea8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 f949 	bl	800a138 <USB_SetDevSpeed>
 8009ea6:	e008      	b.n	8009eba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f944 	bl	800a138 <USB_SetDevSpeed>
 8009eb0:	e003      	b.n	8009eba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009eb2:	2103      	movs	r1, #3
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 f93f 	bl	800a138 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009eba:	2110      	movs	r1, #16
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f8f3 	bl	800a0a8 <USB_FlushTxFifo>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d001      	beq.n	8009ecc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 f911 	bl	800a0f4 <USB_FlushRxFifo>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d001      	beq.n	8009edc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eee:	461a      	mov	r2, r3
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009efa:	461a      	mov	r2, r3
 8009efc:	2300      	movs	r3, #0
 8009efe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f00:	2300      	movs	r3, #0
 8009f02:	613b      	str	r3, [r7, #16]
 8009f04:	e043      	b.n	8009f8e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	015a      	lsls	r2, r3, #5
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f1c:	d118      	bne.n	8009f50 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10a      	bne.n	8009f3a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	015a      	lsls	r2, r3, #5
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f30:	461a      	mov	r2, r3
 8009f32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009f36:	6013      	str	r3, [r2, #0]
 8009f38:	e013      	b.n	8009f62 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	015a      	lsls	r2, r3, #5
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	4413      	add	r3, r2
 8009f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f46:	461a      	mov	r2, r3
 8009f48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009f4c:	6013      	str	r3, [r2, #0]
 8009f4e:	e008      	b.n	8009f62 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	015a      	lsls	r2, r3, #5
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	4413      	add	r3, r2
 8009f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	2300      	movs	r3, #0
 8009f60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	015a      	lsls	r2, r3, #5
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	4413      	add	r3, r2
 8009f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f6e:	461a      	mov	r2, r3
 8009f70:	2300      	movs	r3, #0
 8009f72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	015a      	lsls	r2, r3, #5
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f80:	461a      	mov	r2, r3
 8009f82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009f86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	613b      	str	r3, [r7, #16]
 8009f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d3b7      	bcc.n	8009f06 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f96:	2300      	movs	r3, #0
 8009f98:	613b      	str	r3, [r7, #16]
 8009f9a:	e043      	b.n	800a024 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	015a      	lsls	r2, r3, #5
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fb2:	d118      	bne.n	8009fe6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d10a      	bne.n	8009fd0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	015a      	lsls	r2, r3, #5
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009fcc:	6013      	str	r3, [r2, #0]
 8009fce:	e013      	b.n	8009ff8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	015a      	lsls	r2, r3, #5
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fdc:	461a      	mov	r2, r3
 8009fde:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009fe2:	6013      	str	r3, [r2, #0]
 8009fe4:	e008      	b.n	8009ff8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	015a      	lsls	r2, r3, #5
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	4413      	add	r3, r2
 8009fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	015a      	lsls	r2, r3, #5
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	4413      	add	r3, r2
 800a000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a004:	461a      	mov	r2, r3
 800a006:	2300      	movs	r3, #0
 800a008:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	015a      	lsls	r2, r3, #5
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	4413      	add	r3, r2
 800a012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a016:	461a      	mov	r2, r3
 800a018:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a01c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	3301      	adds	r3, #1
 800a022:	613b      	str	r3, [r7, #16]
 800a024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d3b7      	bcc.n	8009f9c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a03a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a03e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a04c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a050:	2b00      	cmp	r3, #0
 800a052:	d105      	bne.n	800a060 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	699b      	ldr	r3, [r3, #24]
 800a058:	f043 0210 	orr.w	r2, r3, #16
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	699a      	ldr	r2, [r3, #24]
 800a064:	4b0f      	ldr	r3, [pc, #60]	; (800a0a4 <USB_DevInit+0x2c4>)
 800a066:	4313      	orrs	r3, r2
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a06c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d005      	beq.n	800a07e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	699b      	ldr	r3, [r3, #24]
 800a076:	f043 0208 	orr.w	r2, r3, #8
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a07e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a080:	2b01      	cmp	r3, #1
 800a082:	d107      	bne.n	800a094 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a08c:	f043 0304 	orr.w	r3, r3, #4
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a094:	7dfb      	ldrb	r3, [r7, #23]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3718      	adds	r7, #24
 800a09a:	46bd      	mov	sp, r7
 800a09c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a0a0:	b004      	add	sp, #16
 800a0a2:	4770      	bx	lr
 800a0a4:	803c3800 	.word	0x803c3800

0800a0a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	019b      	lsls	r3, r3, #6
 800a0ba:	f043 0220 	orr.w	r2, r3, #32
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	60fb      	str	r3, [r7, #12]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	4a09      	ldr	r2, [pc, #36]	; (800a0f0 <USB_FlushTxFifo+0x48>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d901      	bls.n	800a0d4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	e006      	b.n	800a0e2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	f003 0320 	and.w	r3, r3, #32
 800a0dc:	2b20      	cmp	r3, #32
 800a0de:	d0f0      	beq.n	800a0c2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3714      	adds	r7, #20
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	00030d40 	.word	0x00030d40

0800a0f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2210      	movs	r2, #16
 800a104:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	3301      	adds	r3, #1
 800a10a:	60fb      	str	r3, [r7, #12]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	4a09      	ldr	r2, [pc, #36]	; (800a134 <USB_FlushRxFifo+0x40>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d901      	bls.n	800a118 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a114:	2303      	movs	r3, #3
 800a116:	e006      	b.n	800a126 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	f003 0310 	and.w	r3, r3, #16
 800a120:	2b10      	cmp	r3, #16
 800a122:	d0f0      	beq.n	800a106 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3714      	adds	r7, #20
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	00030d40 	.word	0x00030d40

0800a138 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	460b      	mov	r3, r1
 800a142:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	78fb      	ldrb	r3, [r7, #3]
 800a152:	68f9      	ldr	r1, [r7, #12]
 800a154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a158:	4313      	orrs	r3, r2
 800a15a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3714      	adds	r7, #20
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr

0800a16a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a16a:	b480      	push	{r7}
 800a16c:	b087      	sub	sp, #28
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	f003 0306 	and.w	r3, r3, #6
 800a182:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d102      	bne.n	800a190 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a18a:	2300      	movs	r3, #0
 800a18c:	75fb      	strb	r3, [r7, #23]
 800a18e:	e00a      	b.n	800a1a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2b02      	cmp	r3, #2
 800a194:	d002      	beq.n	800a19c <USB_GetDevSpeed+0x32>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2b06      	cmp	r3, #6
 800a19a:	d102      	bne.n	800a1a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a19c:	2302      	movs	r3, #2
 800a19e:	75fb      	strb	r3, [r7, #23]
 800a1a0:	e001      	b.n	800a1a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a1a2:	230f      	movs	r3, #15
 800a1a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a1a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	371c      	adds	r7, #28
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	785b      	ldrb	r3, [r3, #1]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d13a      	bne.n	800a246 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1d6:	69da      	ldr	r2, [r3, #28]
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	f003 030f 	and.w	r3, r3, #15
 800a1e0:	2101      	movs	r1, #1
 800a1e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	68f9      	ldr	r1, [r7, #12]
 800a1ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	015a      	lsls	r2, r3, #5
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a204:	2b00      	cmp	r3, #0
 800a206:	d155      	bne.n	800a2b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	015a      	lsls	r2, r3, #5
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	4413      	add	r3, r2
 800a210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	78db      	ldrb	r3, [r3, #3]
 800a222:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a224:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	059b      	lsls	r3, r3, #22
 800a22a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a22c:	4313      	orrs	r3, r2
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	0151      	lsls	r1, r2, #5
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	440a      	add	r2, r1
 800a236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a23a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a23e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a242:	6013      	str	r3, [r2, #0]
 800a244:	e036      	b.n	800a2b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a24c:	69da      	ldr	r2, [r3, #28]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	f003 030f 	and.w	r3, r3, #15
 800a256:	2101      	movs	r1, #1
 800a258:	fa01 f303 	lsl.w	r3, r1, r3
 800a25c:	041b      	lsls	r3, r3, #16
 800a25e:	68f9      	ldr	r1, [r7, #12]
 800a260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a264:	4313      	orrs	r3, r2
 800a266:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	015a      	lsls	r2, r3, #5
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	4413      	add	r3, r2
 800a270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d11a      	bne.n	800a2b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	015a      	lsls	r2, r3, #5
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	4413      	add	r3, r2
 800a286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	78db      	ldrb	r3, [r3, #3]
 800a298:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a29a:	430b      	orrs	r3, r1
 800a29c:	4313      	orrs	r3, r2
 800a29e:	68ba      	ldr	r2, [r7, #8]
 800a2a0:	0151      	lsls	r1, r2, #5
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	440a      	add	r2, r1
 800a2a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
	...

0800a2c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	785b      	ldrb	r3, [r3, #1]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d161      	bne.n	800a3a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	015a      	lsls	r2, r3, #5
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	4413      	add	r3, r2
 800a2e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2f6:	d11f      	bne.n	800a338 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	015a      	lsls	r2, r3, #5
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	4413      	add	r3, r2
 800a300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	68ba      	ldr	r2, [r7, #8]
 800a308:	0151      	lsls	r1, r2, #5
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	440a      	add	r2, r1
 800a30e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a312:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a316:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	015a      	lsls	r2, r3, #5
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	4413      	add	r3, r2
 800a320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	0151      	lsls	r1, r2, #5
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	440a      	add	r2, r1
 800a32e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a332:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a336:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a33e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	f003 030f 	and.w	r3, r3, #15
 800a348:	2101      	movs	r1, #1
 800a34a:	fa01 f303 	lsl.w	r3, r1, r3
 800a34e:	b29b      	uxth	r3, r3
 800a350:	43db      	mvns	r3, r3
 800a352:	68f9      	ldr	r1, [r7, #12]
 800a354:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a358:	4013      	ands	r3, r2
 800a35a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a362:	69da      	ldr	r2, [r3, #28]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	f003 030f 	and.w	r3, r3, #15
 800a36c:	2101      	movs	r1, #1
 800a36e:	fa01 f303 	lsl.w	r3, r1, r3
 800a372:	b29b      	uxth	r3, r3
 800a374:	43db      	mvns	r3, r3
 800a376:	68f9      	ldr	r1, [r7, #12]
 800a378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a37c:	4013      	ands	r3, r2
 800a37e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	015a      	lsls	r2, r3, #5
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	4413      	add	r3, r2
 800a388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	0159      	lsls	r1, r3, #5
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	440b      	add	r3, r1
 800a396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a39a:	4619      	mov	r1, r3
 800a39c:	4b35      	ldr	r3, [pc, #212]	; (800a474 <USB_DeactivateEndpoint+0x1b0>)
 800a39e:	4013      	ands	r3, r2
 800a3a0:	600b      	str	r3, [r1, #0]
 800a3a2:	e060      	b.n	800a466 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	015a      	lsls	r2, r3, #5
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3ba:	d11f      	bne.n	800a3fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	015a      	lsls	r2, r3, #5
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68ba      	ldr	r2, [r7, #8]
 800a3cc:	0151      	lsls	r1, r2, #5
 800a3ce:	68fa      	ldr	r2, [r7, #12]
 800a3d0:	440a      	add	r2, r1
 800a3d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a3da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	015a      	lsls	r2, r3, #5
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68ba      	ldr	r2, [r7, #8]
 800a3ec:	0151      	lsls	r1, r2, #5
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	440a      	add	r2, r1
 800a3f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	f003 030f 	and.w	r3, r3, #15
 800a40c:	2101      	movs	r1, #1
 800a40e:	fa01 f303 	lsl.w	r3, r1, r3
 800a412:	041b      	lsls	r3, r3, #16
 800a414:	43db      	mvns	r3, r3
 800a416:	68f9      	ldr	r1, [r7, #12]
 800a418:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a41c:	4013      	ands	r3, r2
 800a41e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a426:	69da      	ldr	r2, [r3, #28]
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	f003 030f 	and.w	r3, r3, #15
 800a430:	2101      	movs	r1, #1
 800a432:	fa01 f303 	lsl.w	r3, r1, r3
 800a436:	041b      	lsls	r3, r3, #16
 800a438:	43db      	mvns	r3, r3
 800a43a:	68f9      	ldr	r1, [r7, #12]
 800a43c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a440:	4013      	ands	r3, r2
 800a442:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	015a      	lsls	r2, r3, #5
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	4413      	add	r3, r2
 800a44c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	0159      	lsls	r1, r3, #5
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	440b      	add	r3, r1
 800a45a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a45e:	4619      	mov	r1, r3
 800a460:	4b05      	ldr	r3, [pc, #20]	; (800a478 <USB_DeactivateEndpoint+0x1b4>)
 800a462:	4013      	ands	r3, r2
 800a464:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr
 800a474:	ec337800 	.word	0xec337800
 800a478:	eff37800 	.word	0xeff37800

0800a47c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b08a      	sub	sp, #40	; 0x28
 800a480:	af02      	add	r7, sp, #8
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	4613      	mov	r3, r2
 800a488:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	785b      	ldrb	r3, [r3, #1]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	f040 815c 	bne.w	800a756 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	695b      	ldr	r3, [r3, #20]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d132      	bne.n	800a50c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	015a      	lsls	r2, r3, #5
 800a4aa:	69fb      	ldr	r3, [r7, #28]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	0151      	lsls	r1, r2, #5
 800a4b8:	69fa      	ldr	r2, [r7, #28]
 800a4ba:	440a      	add	r2, r1
 800a4bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a4c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a4c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	015a      	lsls	r2, r3, #5
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4d6:	691b      	ldr	r3, [r3, #16]
 800a4d8:	69ba      	ldr	r2, [r7, #24]
 800a4da:	0151      	lsls	r1, r2, #5
 800a4dc:	69fa      	ldr	r2, [r7, #28]
 800a4de:	440a      	add	r2, r1
 800a4e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	015a      	lsls	r2, r3, #5
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4f6:	691b      	ldr	r3, [r3, #16]
 800a4f8:	69ba      	ldr	r2, [r7, #24]
 800a4fa:	0151      	lsls	r1, r2, #5
 800a4fc:	69fa      	ldr	r2, [r7, #28]
 800a4fe:	440a      	add	r2, r1
 800a500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a504:	0cdb      	lsrs	r3, r3, #19
 800a506:	04db      	lsls	r3, r3, #19
 800a508:	6113      	str	r3, [r2, #16]
 800a50a:	e074      	b.n	800a5f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	015a      	lsls	r2, r3, #5
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	4413      	add	r3, r2
 800a514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	69ba      	ldr	r2, [r7, #24]
 800a51c:	0151      	lsls	r1, r2, #5
 800a51e:	69fa      	ldr	r2, [r7, #28]
 800a520:	440a      	add	r2, r1
 800a522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a526:	0cdb      	lsrs	r3, r3, #19
 800a528:	04db      	lsls	r3, r3, #19
 800a52a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	015a      	lsls	r2, r3, #5
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	4413      	add	r3, r2
 800a534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	69ba      	ldr	r2, [r7, #24]
 800a53c:	0151      	lsls	r1, r2, #5
 800a53e:	69fa      	ldr	r2, [r7, #28]
 800a540:	440a      	add	r2, r1
 800a542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a546:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a54a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a54e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	015a      	lsls	r2, r3, #5
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	4413      	add	r3, r2
 800a558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a55c:	691a      	ldr	r2, [r3, #16]
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	6959      	ldr	r1, [r3, #20]
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	440b      	add	r3, r1
 800a568:	1e59      	subs	r1, r3, #1
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a572:	04d9      	lsls	r1, r3, #19
 800a574:	4b9d      	ldr	r3, [pc, #628]	; (800a7ec <USB_EPStartXfer+0x370>)
 800a576:	400b      	ands	r3, r1
 800a578:	69b9      	ldr	r1, [r7, #24]
 800a57a:	0148      	lsls	r0, r1, #5
 800a57c:	69f9      	ldr	r1, [r7, #28]
 800a57e:	4401      	add	r1, r0
 800a580:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a584:	4313      	orrs	r3, r2
 800a586:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	015a      	lsls	r2, r3, #5
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	4413      	add	r3, r2
 800a590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a594:	691a      	ldr	r2, [r3, #16]
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	695b      	ldr	r3, [r3, #20]
 800a59a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a59e:	69b9      	ldr	r1, [r7, #24]
 800a5a0:	0148      	lsls	r0, r1, #5
 800a5a2:	69f9      	ldr	r1, [r7, #28]
 800a5a4:	4401      	add	r1, r0
 800a5a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	78db      	ldrb	r3, [r3, #3]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d11f      	bne.n	800a5f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	015a      	lsls	r2, r3, #5
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	4413      	add	r3, r2
 800a5be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5c2:	691b      	ldr	r3, [r3, #16]
 800a5c4:	69ba      	ldr	r2, [r7, #24]
 800a5c6:	0151      	lsls	r1, r2, #5
 800a5c8:	69fa      	ldr	r2, [r7, #28]
 800a5ca:	440a      	add	r2, r1
 800a5cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a5d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	015a      	lsls	r2, r3, #5
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	4413      	add	r3, r2
 800a5de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	69ba      	ldr	r2, [r7, #24]
 800a5e6:	0151      	lsls	r1, r2, #5
 800a5e8:	69fa      	ldr	r2, [r7, #28]
 800a5ea:	440a      	add	r2, r1
 800a5ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a5f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a5f6:	79fb      	ldrb	r3, [r7, #7]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d14b      	bne.n	800a694 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d009      	beq.n	800a618 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	015a      	lsls	r2, r3, #5
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	4413      	add	r3, r2
 800a60c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a610:	461a      	mov	r2, r3
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	78db      	ldrb	r3, [r3, #3]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d128      	bne.n	800a672 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d110      	bne.n	800a652 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	015a      	lsls	r2, r3, #5
 800a634:	69fb      	ldr	r3, [r7, #28]
 800a636:	4413      	add	r3, r2
 800a638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	69ba      	ldr	r2, [r7, #24]
 800a640:	0151      	lsls	r1, r2, #5
 800a642:	69fa      	ldr	r2, [r7, #28]
 800a644:	440a      	add	r2, r1
 800a646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a64a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a64e:	6013      	str	r3, [r2, #0]
 800a650:	e00f      	b.n	800a672 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	015a      	lsls	r2, r3, #5
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	4413      	add	r3, r2
 800a65a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	69ba      	ldr	r2, [r7, #24]
 800a662:	0151      	lsls	r1, r2, #5
 800a664:	69fa      	ldr	r2, [r7, #28]
 800a666:	440a      	add	r2, r1
 800a668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a66c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a670:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	015a      	lsls	r2, r3, #5
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	4413      	add	r3, r2
 800a67a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	69ba      	ldr	r2, [r7, #24]
 800a682:	0151      	lsls	r1, r2, #5
 800a684:	69fa      	ldr	r2, [r7, #28]
 800a686:	440a      	add	r2, r1
 800a688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a68c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a690:	6013      	str	r3, [r2, #0]
 800a692:	e12f      	b.n	800a8f4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	015a      	lsls	r2, r3, #5
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	4413      	add	r3, r2
 800a69c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	69ba      	ldr	r2, [r7, #24]
 800a6a4:	0151      	lsls	r1, r2, #5
 800a6a6:	69fa      	ldr	r2, [r7, #28]
 800a6a8:	440a      	add	r2, r1
 800a6aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a6b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	78db      	ldrb	r3, [r3, #3]
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d015      	beq.n	800a6e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	695b      	ldr	r3, [r3, #20]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f000 8117 	beq.w	800a8f4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	f003 030f 	and.w	r3, r3, #15
 800a6d6:	2101      	movs	r1, #1
 800a6d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a6dc:	69f9      	ldr	r1, [r7, #28]
 800a6de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	634b      	str	r3, [r1, #52]	; 0x34
 800a6e6:	e105      	b.n	800a8f4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d110      	bne.n	800a71a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	015a      	lsls	r2, r3, #5
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	4413      	add	r3, r2
 800a700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	69ba      	ldr	r2, [r7, #24]
 800a708:	0151      	lsls	r1, r2, #5
 800a70a:	69fa      	ldr	r2, [r7, #28]
 800a70c:	440a      	add	r2, r1
 800a70e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a712:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a716:	6013      	str	r3, [r2, #0]
 800a718:	e00f      	b.n	800a73a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	015a      	lsls	r2, r3, #5
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	4413      	add	r3, r2
 800a722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	69ba      	ldr	r2, [r7, #24]
 800a72a:	0151      	lsls	r1, r2, #5
 800a72c:	69fa      	ldr	r2, [r7, #28]
 800a72e:	440a      	add	r2, r1
 800a730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a738:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	68d9      	ldr	r1, [r3, #12]
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	781a      	ldrb	r2, [r3, #0]
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	b298      	uxth	r0, r3
 800a748:	79fb      	ldrb	r3, [r7, #7]
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	4603      	mov	r3, r0
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f000 fa2b 	bl	800abaa <USB_WritePacket>
 800a754:	e0ce      	b.n	800a8f4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	015a      	lsls	r2, r3, #5
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	4413      	add	r3, r2
 800a75e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a762:	691b      	ldr	r3, [r3, #16]
 800a764:	69ba      	ldr	r2, [r7, #24]
 800a766:	0151      	lsls	r1, r2, #5
 800a768:	69fa      	ldr	r2, [r7, #28]
 800a76a:	440a      	add	r2, r1
 800a76c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a770:	0cdb      	lsrs	r3, r3, #19
 800a772:	04db      	lsls	r3, r3, #19
 800a774:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	015a      	lsls	r2, r3, #5
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	4413      	add	r3, r2
 800a77e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	69ba      	ldr	r2, [r7, #24]
 800a786:	0151      	lsls	r1, r2, #5
 800a788:	69fa      	ldr	r2, [r7, #28]
 800a78a:	440a      	add	r2, r1
 800a78c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a790:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a794:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a798:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	695b      	ldr	r3, [r3, #20]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d126      	bne.n	800a7f0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	015a      	lsls	r2, r3, #5
 800a7a6:	69fb      	ldr	r3, [r7, #28]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ae:	691a      	ldr	r2, [r3, #16]
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7b8:	69b9      	ldr	r1, [r7, #24]
 800a7ba:	0148      	lsls	r0, r1, #5
 800a7bc:	69f9      	ldr	r1, [r7, #28]
 800a7be:	4401      	add	r1, r0
 800a7c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	015a      	lsls	r2, r3, #5
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	69ba      	ldr	r2, [r7, #24]
 800a7d8:	0151      	lsls	r1, r2, #5
 800a7da:	69fa      	ldr	r2, [r7, #28]
 800a7dc:	440a      	add	r2, r1
 800a7de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7e6:	6113      	str	r3, [r2, #16]
 800a7e8:	e036      	b.n	800a858 <USB_EPStartXfer+0x3dc>
 800a7ea:	bf00      	nop
 800a7ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	695a      	ldr	r2, [r3, #20]
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	1e5a      	subs	r2, r3, #1
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	fbb2 f3f3 	udiv	r3, r2, r3
 800a804:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	015a      	lsls	r2, r3, #5
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	4413      	add	r3, r2
 800a80e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a812:	691a      	ldr	r2, [r3, #16]
 800a814:	8afb      	ldrh	r3, [r7, #22]
 800a816:	04d9      	lsls	r1, r3, #19
 800a818:	4b39      	ldr	r3, [pc, #228]	; (800a900 <USB_EPStartXfer+0x484>)
 800a81a:	400b      	ands	r3, r1
 800a81c:	69b9      	ldr	r1, [r7, #24]
 800a81e:	0148      	lsls	r0, r1, #5
 800a820:	69f9      	ldr	r1, [r7, #28]
 800a822:	4401      	add	r1, r0
 800a824:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a828:	4313      	orrs	r3, r2
 800a82a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	015a      	lsls	r2, r3, #5
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	4413      	add	r3, r2
 800a834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a838:	691a      	ldr	r2, [r3, #16]
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	8af9      	ldrh	r1, [r7, #22]
 800a840:	fb01 f303 	mul.w	r3, r1, r3
 800a844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a848:	69b9      	ldr	r1, [r7, #24]
 800a84a:	0148      	lsls	r0, r1, #5
 800a84c:	69f9      	ldr	r1, [r7, #28]
 800a84e:	4401      	add	r1, r0
 800a850:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a854:	4313      	orrs	r3, r2
 800a856:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a858:	79fb      	ldrb	r3, [r7, #7]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d10d      	bne.n	800a87a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d009      	beq.n	800a87a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	68d9      	ldr	r1, [r3, #12]
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	015a      	lsls	r2, r3, #5
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	4413      	add	r3, r2
 800a872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a876:	460a      	mov	r2, r1
 800a878:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	78db      	ldrb	r3, [r3, #3]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d128      	bne.n	800a8d4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d110      	bne.n	800a8b4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	015a      	lsls	r2, r3, #5
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	4413      	add	r3, r2
 800a89a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	69ba      	ldr	r2, [r7, #24]
 800a8a2:	0151      	lsls	r1, r2, #5
 800a8a4:	69fa      	ldr	r2, [r7, #28]
 800a8a6:	440a      	add	r2, r1
 800a8a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a8b0:	6013      	str	r3, [r2, #0]
 800a8b2:	e00f      	b.n	800a8d4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a8b4:	69bb      	ldr	r3, [r7, #24]
 800a8b6:	015a      	lsls	r2, r3, #5
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	69ba      	ldr	r2, [r7, #24]
 800a8c4:	0151      	lsls	r1, r2, #5
 800a8c6:	69fa      	ldr	r2, [r7, #28]
 800a8c8:	440a      	add	r2, r1
 800a8ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	015a      	lsls	r2, r3, #5
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	4413      	add	r3, r2
 800a8dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	69ba      	ldr	r2, [r7, #24]
 800a8e4:	0151      	lsls	r1, r2, #5
 800a8e6:	69fa      	ldr	r2, [r7, #28]
 800a8e8:	440a      	add	r2, r1
 800a8ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a8f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3720      	adds	r7, #32
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	1ff80000 	.word	0x1ff80000

0800a904 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a904:	b480      	push	{r7}
 800a906:	b087      	sub	sp, #28
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	4613      	mov	r3, r2
 800a910:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	785b      	ldrb	r3, [r3, #1]
 800a920:	2b01      	cmp	r3, #1
 800a922:	f040 80cd 	bne.w	800aac0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	695b      	ldr	r3, [r3, #20]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d132      	bne.n	800a994 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	015a      	lsls	r2, r3, #5
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	4413      	add	r3, r2
 800a936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	693a      	ldr	r2, [r7, #16]
 800a93e:	0151      	lsls	r1, r2, #5
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	440a      	add	r2, r1
 800a944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a948:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a94c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a950:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	015a      	lsls	r2, r3, #5
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	4413      	add	r3, r2
 800a95a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a95e:	691b      	ldr	r3, [r3, #16]
 800a960:	693a      	ldr	r2, [r7, #16]
 800a962:	0151      	lsls	r1, r2, #5
 800a964:	697a      	ldr	r2, [r7, #20]
 800a966:	440a      	add	r2, r1
 800a968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a96c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a970:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	015a      	lsls	r2, r3, #5
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	4413      	add	r3, r2
 800a97a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	693a      	ldr	r2, [r7, #16]
 800a982:	0151      	lsls	r1, r2, #5
 800a984:	697a      	ldr	r2, [r7, #20]
 800a986:	440a      	add	r2, r1
 800a988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a98c:	0cdb      	lsrs	r3, r3, #19
 800a98e:	04db      	lsls	r3, r3, #19
 800a990:	6113      	str	r3, [r2, #16]
 800a992:	e04e      	b.n	800aa32 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	015a      	lsls	r2, r3, #5
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	4413      	add	r3, r2
 800a99c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	693a      	ldr	r2, [r7, #16]
 800a9a4:	0151      	lsls	r1, r2, #5
 800a9a6:	697a      	ldr	r2, [r7, #20]
 800a9a8:	440a      	add	r2, r1
 800a9aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9ae:	0cdb      	lsrs	r3, r3, #19
 800a9b0:	04db      	lsls	r3, r3, #19
 800a9b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	015a      	lsls	r2, r3, #5
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	693a      	ldr	r2, [r7, #16]
 800a9c4:	0151      	lsls	r1, r2, #5
 800a9c6:	697a      	ldr	r2, [r7, #20]
 800a9c8:	440a      	add	r2, r1
 800a9ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a9d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a9d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	695a      	ldr	r2, [r3, #20]
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d903      	bls.n	800a9ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	689a      	ldr	r2, [r3, #8]
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	015a      	lsls	r2, r3, #5
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f8:	691b      	ldr	r3, [r3, #16]
 800a9fa:	693a      	ldr	r2, [r7, #16]
 800a9fc:	0151      	lsls	r1, r2, #5
 800a9fe:	697a      	ldr	r2, [r7, #20]
 800aa00:	440a      	add	r2, r1
 800aa02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	015a      	lsls	r2, r3, #5
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	4413      	add	r3, r2
 800aa14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa18:	691a      	ldr	r2, [r3, #16]
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	695b      	ldr	r3, [r3, #20]
 800aa1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa22:	6939      	ldr	r1, [r7, #16]
 800aa24:	0148      	lsls	r0, r1, #5
 800aa26:	6979      	ldr	r1, [r7, #20]
 800aa28:	4401      	add	r1, r0
 800aa2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aa32:	79fb      	ldrb	r3, [r7, #7]
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d11e      	bne.n	800aa76 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d009      	beq.n	800aa54 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	015a      	lsls	r2, r3, #5
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	4413      	add	r3, r2
 800aa48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	015a      	lsls	r2, r3, #5
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	693a      	ldr	r2, [r7, #16]
 800aa64:	0151      	lsls	r1, r2, #5
 800aa66:	697a      	ldr	r2, [r7, #20]
 800aa68:	440a      	add	r2, r1
 800aa6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa72:	6013      	str	r3, [r2, #0]
 800aa74:	e092      	b.n	800ab9c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	015a      	lsls	r2, r3, #5
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	0151      	lsls	r1, r2, #5
 800aa88:	697a      	ldr	r2, [r7, #20]
 800aa8a:	440a      	add	r2, r1
 800aa8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa94:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	695b      	ldr	r3, [r3, #20]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d07e      	beq.n	800ab9c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	f003 030f 	and.w	r3, r3, #15
 800aaae:	2101      	movs	r1, #1
 800aab0:	fa01 f303 	lsl.w	r3, r1, r3
 800aab4:	6979      	ldr	r1, [r7, #20]
 800aab6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aaba:	4313      	orrs	r3, r2
 800aabc:	634b      	str	r3, [r1, #52]	; 0x34
 800aabe:	e06d      	b.n	800ab9c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	015a      	lsls	r2, r3, #5
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	4413      	add	r3, r2
 800aac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	0151      	lsls	r1, r2, #5
 800aad2:	697a      	ldr	r2, [r7, #20]
 800aad4:	440a      	add	r2, r1
 800aad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aada:	0cdb      	lsrs	r3, r3, #19
 800aadc:	04db      	lsls	r3, r3, #19
 800aade:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	015a      	lsls	r2, r3, #5
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	4413      	add	r3, r2
 800aae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	693a      	ldr	r2, [r7, #16]
 800aaf0:	0151      	lsls	r1, r2, #5
 800aaf2:	697a      	ldr	r2, [r7, #20]
 800aaf4:	440a      	add	r2, r1
 800aaf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aafa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aafe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab02:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	695b      	ldr	r3, [r3, #20]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d003      	beq.n	800ab14 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	689a      	ldr	r2, [r3, #8]
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	015a      	lsls	r2, r3, #5
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	693a      	ldr	r2, [r7, #16]
 800ab24:	0151      	lsls	r1, r2, #5
 800ab26:	697a      	ldr	r2, [r7, #20]
 800ab28:	440a      	add	r2, r1
 800ab2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab32:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	015a      	lsls	r2, r3, #5
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab40:	691a      	ldr	r2, [r3, #16]
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab4a:	6939      	ldr	r1, [r7, #16]
 800ab4c:	0148      	lsls	r0, r1, #5
 800ab4e:	6979      	ldr	r1, [r7, #20]
 800ab50:	4401      	add	r1, r0
 800ab52:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ab56:	4313      	orrs	r3, r2
 800ab58:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ab5a:	79fb      	ldrb	r3, [r7, #7]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d10d      	bne.n	800ab7c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	68db      	ldr	r3, [r3, #12]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d009      	beq.n	800ab7c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	68d9      	ldr	r1, [r3, #12]
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	015a      	lsls	r2, r3, #5
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	4413      	add	r3, r2
 800ab74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab78:	460a      	mov	r2, r1
 800ab7a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	015a      	lsls	r2, r3, #5
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	4413      	add	r3, r2
 800ab84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	693a      	ldr	r2, [r7, #16]
 800ab8c:	0151      	lsls	r1, r2, #5
 800ab8e:	697a      	ldr	r2, [r7, #20]
 800ab90:	440a      	add	r2, r1
 800ab92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	371c      	adds	r7, #28
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr

0800abaa <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800abaa:	b480      	push	{r7}
 800abac:	b089      	sub	sp, #36	; 0x24
 800abae:	af00      	add	r7, sp, #0
 800abb0:	60f8      	str	r0, [r7, #12]
 800abb2:	60b9      	str	r1, [r7, #8]
 800abb4:	4611      	mov	r1, r2
 800abb6:	461a      	mov	r2, r3
 800abb8:	460b      	mov	r3, r1
 800abba:	71fb      	strb	r3, [r7, #7]
 800abbc:	4613      	mov	r3, r2
 800abbe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800abc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d11a      	bne.n	800ac06 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800abd0:	88bb      	ldrh	r3, [r7, #4]
 800abd2:	3303      	adds	r3, #3
 800abd4:	089b      	lsrs	r3, r3, #2
 800abd6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800abd8:	2300      	movs	r3, #0
 800abda:	61bb      	str	r3, [r7, #24]
 800abdc:	e00f      	b.n	800abfe <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800abde:	79fb      	ldrb	r3, [r7, #7]
 800abe0:	031a      	lsls	r2, r3, #12
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	4413      	add	r3, r2
 800abe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abea:	461a      	mov	r2, r3
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	3304      	adds	r3, #4
 800abf6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	3301      	adds	r3, #1
 800abfc:	61bb      	str	r3, [r7, #24]
 800abfe:	69ba      	ldr	r2, [r7, #24]
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d3eb      	bcc.n	800abde <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3724      	adds	r7, #36	; 0x24
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b089      	sub	sp, #36	; 0x24
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	4613      	mov	r3, r2
 800ac20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ac2a:	88fb      	ldrh	r3, [r7, #6]
 800ac2c:	3303      	adds	r3, #3
 800ac2e:	089b      	lsrs	r3, r3, #2
 800ac30:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ac32:	2300      	movs	r3, #0
 800ac34:	61bb      	str	r3, [r7, #24]
 800ac36:	e00b      	b.n	800ac50 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	601a      	str	r2, [r3, #0]
    pDest++;
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	3304      	adds	r3, #4
 800ac48:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	61bb      	str	r3, [r7, #24]
 800ac50:	69ba      	ldr	r2, [r7, #24]
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d3ef      	bcc.n	800ac38 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ac58:	69fb      	ldr	r3, [r7, #28]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3724      	adds	r7, #36	; 0x24
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr

0800ac66 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac66:	b480      	push	{r7}
 800ac68:	b085      	sub	sp, #20
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
 800ac6e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	785b      	ldrb	r3, [r3, #1]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d12c      	bne.n	800acdc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	015a      	lsls	r2, r3, #5
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	4413      	add	r3, r2
 800ac8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	db12      	blt.n	800acba <USB_EPSetStall+0x54>
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d00f      	beq.n	800acba <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	015a      	lsls	r2, r3, #5
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	4413      	add	r3, r2
 800aca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	68ba      	ldr	r2, [r7, #8]
 800acaa:	0151      	lsls	r1, r2, #5
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	440a      	add	r2, r1
 800acb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800acb8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	015a      	lsls	r2, r3, #5
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	4413      	add	r3, r2
 800acc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	68ba      	ldr	r2, [r7, #8]
 800acca:	0151      	lsls	r1, r2, #5
 800accc:	68fa      	ldr	r2, [r7, #12]
 800acce:	440a      	add	r2, r1
 800acd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800acd8:	6013      	str	r3, [r2, #0]
 800acda:	e02b      	b.n	800ad34 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	015a      	lsls	r2, r3, #5
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	4413      	add	r3, r2
 800ace4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	db12      	blt.n	800ad14 <USB_EPSetStall+0xae>
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d00f      	beq.n	800ad14 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	015a      	lsls	r2, r3, #5
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	4413      	add	r3, r2
 800acfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	68ba      	ldr	r2, [r7, #8]
 800ad04:	0151      	lsls	r1, r2, #5
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	440a      	add	r2, r1
 800ad0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ad12:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	015a      	lsls	r2, r3, #5
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	68ba      	ldr	r2, [r7, #8]
 800ad24:	0151      	lsls	r1, r2, #5
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	440a      	add	r2, r1
 800ad2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ad32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad34:	2300      	movs	r3, #0
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3714      	adds	r7, #20
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad42:	b480      	push	{r7}
 800ad44:	b085      	sub	sp, #20
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
 800ad4a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	785b      	ldrb	r3, [r3, #1]
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d128      	bne.n	800adb0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	015a      	lsls	r2, r3, #5
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	4413      	add	r3, r2
 800ad66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	68ba      	ldr	r2, [r7, #8]
 800ad6e:	0151      	lsls	r1, r2, #5
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	440a      	add	r2, r1
 800ad74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ad7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	78db      	ldrb	r3, [r3, #3]
 800ad82:	2b03      	cmp	r3, #3
 800ad84:	d003      	beq.n	800ad8e <USB_EPClearStall+0x4c>
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	78db      	ldrb	r3, [r3, #3]
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d138      	bne.n	800ae00 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	015a      	lsls	r2, r3, #5
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	4413      	add	r3, r2
 800ad96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	68ba      	ldr	r2, [r7, #8]
 800ad9e:	0151      	lsls	r1, r2, #5
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	440a      	add	r2, r1
 800ada4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ada8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adac:	6013      	str	r3, [r2, #0]
 800adae:	e027      	b.n	800ae00 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	015a      	lsls	r2, r3, #5
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	4413      	add	r3, r2
 800adb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	68ba      	ldr	r2, [r7, #8]
 800adc0:	0151      	lsls	r1, r2, #5
 800adc2:	68fa      	ldr	r2, [r7, #12]
 800adc4:	440a      	add	r2, r1
 800adc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800adce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	78db      	ldrb	r3, [r3, #3]
 800add4:	2b03      	cmp	r3, #3
 800add6:	d003      	beq.n	800ade0 <USB_EPClearStall+0x9e>
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	78db      	ldrb	r3, [r3, #3]
 800addc:	2b02      	cmp	r3, #2
 800adde:	d10f      	bne.n	800ae00 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	015a      	lsls	r2, r3, #5
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	4413      	add	r3, r2
 800ade8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	68ba      	ldr	r2, [r7, #8]
 800adf0:	0151      	lsls	r1, r2, #5
 800adf2:	68fa      	ldr	r2, [r7, #12]
 800adf4:	440a      	add	r2, r1
 800adf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adfe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3714      	adds	r7, #20
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr

0800ae0e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ae0e:	b480      	push	{r7}
 800ae10:	b085      	sub	sp, #20
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
 800ae16:	460b      	mov	r3, r1
 800ae18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae2c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ae30:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	78fb      	ldrb	r3, [r7, #3]
 800ae3c:	011b      	lsls	r3, r3, #4
 800ae3e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ae42:	68f9      	ldr	r1, [r7, #12]
 800ae44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3714      	adds	r7, #20
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr

0800ae5a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b084      	sub	sp, #16
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	68fa      	ldr	r2, [r7, #12]
 800ae70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae74:	f023 0302 	bic.w	r3, r3, #2
 800ae78:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ae7a:	2003      	movs	r0, #3
 800ae7c:	f7f7 ff46 	bl	8002d0c <HAL_Delay>

  return HAL_OK;
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b084      	sub	sp, #16
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	68fa      	ldr	r2, [r7, #12]
 800aea0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aea4:	f043 0302 	orr.w	r3, r3, #2
 800aea8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800aeaa:	2003      	movs	r0, #3
 800aeac:	f7f7 ff2e 	bl	8002d0c <HAL_Delay>

  return HAL_OK;
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3710      	adds	r7, #16
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800aeba:	b480      	push	{r7}
 800aebc:	b085      	sub	sp, #20
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	695b      	ldr	r3, [r3, #20]
 800aec6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	699b      	ldr	r3, [r3, #24]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	4013      	ands	r3, r2
 800aed0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aed2:	68fb      	ldr	r3, [r7, #12]
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3714      	adds	r7, #20
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aef2:	699b      	ldr	r3, [r3, #24]
 800aef4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aefc:	69db      	ldr	r3, [r3, #28]
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	4013      	ands	r3, r2
 800af02:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	0c1b      	lsrs	r3, r3, #16
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3714      	adds	r7, #20
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800af14:	b480      	push	{r7}
 800af16:	b085      	sub	sp, #20
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af26:	699b      	ldr	r3, [r3, #24]
 800af28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af30:	69db      	ldr	r3, [r3, #28]
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	4013      	ands	r3, r2
 800af36:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	b29b      	uxth	r3, r3
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3714      	adds	r7, #20
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	460b      	mov	r3, r1
 800af52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800af58:	78fb      	ldrb	r3, [r7, #3]
 800af5a:	015a      	lsls	r2, r3, #5
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	4413      	add	r3, r2
 800af60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af6e:	695b      	ldr	r3, [r3, #20]
 800af70:	68ba      	ldr	r2, [r7, #8]
 800af72:	4013      	ands	r3, r2
 800af74:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800af76:	68bb      	ldr	r3, [r7, #8]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3714      	adds	r7, #20
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800af84:	b480      	push	{r7}
 800af86:	b087      	sub	sp, #28
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	460b      	mov	r3, r1
 800af8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af9a:	691b      	ldr	r3, [r3, #16]
 800af9c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afa6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800afa8:	78fb      	ldrb	r3, [r7, #3]
 800afaa:	f003 030f 	and.w	r3, r3, #15
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	fa22 f303 	lsr.w	r3, r2, r3
 800afb4:	01db      	lsls	r3, r3, #7
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	693a      	ldr	r2, [r7, #16]
 800afba:	4313      	orrs	r3, r2
 800afbc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800afbe:	78fb      	ldrb	r3, [r7, #3]
 800afc0:	015a      	lsls	r2, r3, #5
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	4413      	add	r3, r2
 800afc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	693a      	ldr	r2, [r7, #16]
 800afce:	4013      	ands	r3, r2
 800afd0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800afd2:	68bb      	ldr	r3, [r7, #8]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	371c      	adds	r7, #28
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b083      	sub	sp, #12
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	695b      	ldr	r3, [r3, #20]
 800afec:	f003 0301 	and.w	r3, r3, #1
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800affc:	b480      	push	{r7}
 800affe:	b085      	sub	sp, #20
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	68fa      	ldr	r2, [r7, #12]
 800b012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b016:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b01a:	f023 0307 	bic.w	r3, r3, #7
 800b01e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	68fa      	ldr	r2, [r7, #12]
 800b02a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b02e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b032:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b034:	2300      	movs	r3, #0
}
 800b036:	4618      	mov	r0, r3
 800b038:	3714      	adds	r7, #20
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
	...

0800b044 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b044:	b480      	push	{r7}
 800b046:	b087      	sub	sp, #28
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	460b      	mov	r3, r1
 800b04e:	607a      	str	r2, [r7, #4]
 800b050:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	333c      	adds	r3, #60	; 0x3c
 800b05a:	3304      	adds	r3, #4
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	4a26      	ldr	r2, [pc, #152]	; (800b0fc <USB_EP0_OutStart+0xb8>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d90a      	bls.n	800b07e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b074:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b078:	d101      	bne.n	800b07e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b07a:	2300      	movs	r3, #0
 800b07c:	e037      	b.n	800b0ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b084:	461a      	mov	r2, r3
 800b086:	2300      	movs	r3, #0
 800b088:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	697a      	ldr	r2, [r7, #20]
 800b094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b098:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b09c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0a4:	691b      	ldr	r3, [r3, #16]
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0ac:	f043 0318 	orr.w	r3, r3, #24
 800b0b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	697a      	ldr	r2, [r7, #20]
 800b0bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b0c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b0c6:	7afb      	ldrb	r3, [r7, #11]
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d10f      	bne.n	800b0ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	697a      	ldr	r2, [r7, #20]
 800b0e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b0ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	371c      	adds	r7, #28
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	4f54300a 	.word	0x4f54300a

0800b100 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b100:	b480      	push	{r7}
 800b102:	b085      	sub	sp, #20
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b108:	2300      	movs	r3, #0
 800b10a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	3301      	adds	r3, #1
 800b110:	60fb      	str	r3, [r7, #12]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	4a13      	ldr	r2, [pc, #76]	; (800b164 <USB_CoreReset+0x64>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d901      	bls.n	800b11e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b11a:	2303      	movs	r3, #3
 800b11c:	e01b      	b.n	800b156 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	2b00      	cmp	r3, #0
 800b124:	daf2      	bge.n	800b10c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b126:	2300      	movs	r3, #0
 800b128:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	691b      	ldr	r3, [r3, #16]
 800b12e:	f043 0201 	orr.w	r2, r3, #1
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	3301      	adds	r3, #1
 800b13a:	60fb      	str	r3, [r7, #12]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	4a09      	ldr	r2, [pc, #36]	; (800b164 <USB_CoreReset+0x64>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d901      	bls.n	800b148 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b144:	2303      	movs	r3, #3
 800b146:	e006      	b.n	800b156 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	f003 0301 	and.w	r3, r3, #1
 800b150:	2b01      	cmp	r3, #1
 800b152:	d0f0      	beq.n	800b136 <USB_CoreReset+0x36>

  return HAL_OK;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3714      	adds	r7, #20
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	00030d40 	.word	0x00030d40

0800b168 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	460b      	mov	r3, r1
 800b172:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

    /* Allocate Audio structure */
  haudio = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 800b174:	f641 30d0 	movw	r0, #7120	; 0x1bd0
 800b178:	f002 fa68 	bl	800d64c <malloc>
 800b17c:	4603      	mov	r3, r0
 800b17e:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d105      	bne.n	800b192 <USBD_AUDIO_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b18e:	2302      	movs	r3, #2
 800b190:	e04b      	b.n	800b22a <USBD_AUDIO_Init+0xc2>
  }

  pdev->pClassData = (void *)haudio;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	7c1b      	ldrb	r3, [r3, #16]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d104      	bne.n	800b1ac <USBD_AUDIO_Init+0x44>
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 800b1aa:	e003      	b.n	800b1b4 <USBD_AUDIO_Init+0x4c>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800b1b4:	2358      	movs	r3, #88	; 0x58
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	2101      	movs	r1, #1
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f002 f8cd 	bl	800d35a <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  haudio->alt_setting = 0U;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b1d4:	3304      	adds	r3, #4
 800b1d6:	2203      	movs	r2, #3
 800b1d8:	701a      	strb	r2, [r3, #0]
  haudio->wr_ptr = 0U;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b1e0:	3308      	adds	r3, #8
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	801a      	strh	r2, [r3, #0]
  haudio->rd_ptr = 0U;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b1ec:	3306      	adds	r3, #6
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	801a      	strh	r2, [r3, #0]
  haudio->rd_enable = 0U;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b1f8:	3305      	adds	r3, #5
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	701a      	strb	r2, [r3, #0]

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2200      	movs	r2, #0
 800b208:	2146      	movs	r1, #70	; 0x46
 800b20a:	f245 6054 	movw	r0, #22100	; 0x5654
 800b20e:	4798      	blx	r3
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d001      	beq.n	800b21a <USBD_AUDIO_Init+0xb2>
                                                       AUDIO_DEFAULT_VOLUME,
                                                       0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 800b216:	2303      	movs	r3, #3
 800b218:	e007      	b.n	800b22a <USBD_AUDIO_Init+0xc2>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	1d1a      	adds	r2, r3, #4
 800b21e:	2358      	movs	r3, #88	; 0x58
 800b220:	2101      	movs	r1, #1
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f002 f988 	bl	800d538 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800b228:	2300      	movs	r3, #0
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b082      	sub	sp, #8
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
 800b23a:	460b      	mov	r3, r1
 800b23c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 800b23e:	2101      	movs	r1, #1
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f002 f8b0 	bl	800d3a6 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = 0U;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d00f      	beq.n	800b280 <USBD_AUDIO_DeInit+0x4e>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	2000      	movs	r0, #0
 800b26a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b272:	4618      	mov	r0, r3
 800b274:	f002 f9f2 	bl	800d65c <free>
    pdev->pClassData = NULL;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3708      	adds	r7, #8
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
	...

0800b28c <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b086      	sub	sp, #24
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800b296:	2300      	movs	r3, #0
 800b298:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800b29a:	2300      	movs	r3, #0
 800b29c:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2a4:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d01a      	beq.n	800b2e8 <USBD_AUDIO_Setup+0x5c>
 800b2b2:	2b20      	cmp	r3, #32
 800b2b4:	f040 809e 	bne.w	800b3f4 <USBD_AUDIO_Setup+0x168>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	785b      	ldrb	r3, [r3, #1]
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d006      	beq.n	800b2ce <USBD_AUDIO_Setup+0x42>
 800b2c0:	2b81      	cmp	r3, #129	; 0x81
 800b2c2:	d109      	bne.n	800b2d8 <USBD_AUDIO_Setup+0x4c>
    {
    case AUDIO_REQ_GET_CUR:
      AUDIO_REQ_GetCurrent(pdev, req);
 800b2c4:	6839      	ldr	r1, [r7, #0]
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 f9a0 	bl	800b60c <AUDIO_REQ_GetCurrent>
      break;
 800b2cc:	e00b      	b.n	800b2e6 <USBD_AUDIO_Setup+0x5a>

    case AUDIO_REQ_SET_CUR:
      AUDIO_REQ_SetCurrent(pdev, req);
 800b2ce:	6839      	ldr	r1, [r7, #0]
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 f9bb 	bl	800b64c <AUDIO_REQ_SetCurrent>
      break;
 800b2d6:	e006      	b.n	800b2e6 <USBD_AUDIO_Setup+0x5a>

    default:
      USBD_CtlError(pdev, req);
 800b2d8:	6839      	ldr	r1, [r7, #0]
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f001 fb36 	bl	800c94c <USBD_CtlError>
      ret = USBD_FAIL;
 800b2e0:	2303      	movs	r3, #3
 800b2e2:	75fb      	strb	r3, [r7, #23]
      break;
 800b2e4:	bf00      	nop
    }
    break;
 800b2e6:	e08c      	b.n	800b402 <USBD_AUDIO_Setup+0x176>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	785b      	ldrb	r3, [r3, #1]
 800b2ec:	2b0b      	cmp	r3, #11
 800b2ee:	d876      	bhi.n	800b3de <USBD_AUDIO_Setup+0x152>
 800b2f0:	a201      	add	r2, pc, #4	; (adr r2, 800b2f8 <USBD_AUDIO_Setup+0x6c>)
 800b2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f6:	bf00      	nop
 800b2f8:	0800b329 	.word	0x0800b329
 800b2fc:	0800b3ed 	.word	0x0800b3ed
 800b300:	0800b3df 	.word	0x0800b3df
 800b304:	0800b3df 	.word	0x0800b3df
 800b308:	0800b3df 	.word	0x0800b3df
 800b30c:	0800b3df 	.word	0x0800b3df
 800b310:	0800b351 	.word	0x0800b351
 800b314:	0800b3df 	.word	0x0800b3df
 800b318:	0800b3df 	.word	0x0800b3df
 800b31c:	0800b3df 	.word	0x0800b3df
 800b320:	0800b37b 	.word	0x0800b37b
 800b324:	0800b3a1 	.word	0x0800b3a1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b32e:	2b03      	cmp	r3, #3
 800b330:	d107      	bne.n	800b342 <USBD_AUDIO_Setup+0xb6>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b332:	f107 0308 	add.w	r3, r7, #8
 800b336:	2202      	movs	r2, #2
 800b338:	4619      	mov	r1, r3
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f001 fb77 	bl	800ca2e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b340:	e057      	b.n	800b3f2 <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 800b342:	6839      	ldr	r1, [r7, #0]
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f001 fb01 	bl	800c94c <USBD_CtlError>
        ret = USBD_FAIL;
 800b34a:	2303      	movs	r3, #3
 800b34c:	75fb      	strb	r3, [r7, #23]
      break;
 800b34e:	e050      	b.n	800b3f2 <USBD_AUDIO_Setup+0x166>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	885b      	ldrh	r3, [r3, #2]
 800b354:	0a1b      	lsrs	r3, r3, #8
 800b356:	b29b      	uxth	r3, r3
 800b358:	2b21      	cmp	r3, #33	; 0x21
 800b35a:	d149      	bne.n	800b3f0 <USBD_AUDIO_Setup+0x164>
      {
        pbuf = USBD_AUDIO_CfgDesc + 18;
 800b35c:	4b2b      	ldr	r3, [pc, #172]	; (800b40c <USBD_AUDIO_Setup+0x180>)
 800b35e:	60fb      	str	r3, [r7, #12]
        len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	88db      	ldrh	r3, [r3, #6]
 800b364:	2b09      	cmp	r3, #9
 800b366:	bf28      	it	cs
 800b368:	2309      	movcs	r3, #9
 800b36a:	817b      	strh	r3, [r7, #10]

        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b36c:	897b      	ldrh	r3, [r7, #10]
 800b36e:	461a      	mov	r2, r3
 800b370:	68f9      	ldr	r1, [r7, #12]
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f001 fb5b 	bl	800ca2e <USBD_CtlSendData>
      }
      break;
 800b378:	e03a      	b.n	800b3f0 <USBD_AUDIO_Setup+0x164>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b380:	2b03      	cmp	r3, #3
 800b382:	d106      	bne.n	800b392 <USBD_AUDIO_Setup+0x106>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	2201      	movs	r2, #1
 800b388:	4619      	mov	r1, r3
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f001 fb4f 	bl	800ca2e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b390:	e02f      	b.n	800b3f2 <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 800b392:	6839      	ldr	r1, [r7, #0]
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f001 fad9 	bl	800c94c <USBD_CtlError>
        ret = USBD_FAIL;
 800b39a:	2303      	movs	r3, #3
 800b39c:	75fb      	strb	r3, [r7, #23]
      break;
 800b39e:	e028      	b.n	800b3f2 <USBD_AUDIO_Setup+0x166>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3a6:	2b03      	cmp	r3, #3
 800b3a8:	d112      	bne.n	800b3d0 <USBD_AUDIO_Setup+0x144>
      {
        if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	885b      	ldrh	r3, [r3, #2]
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	2b02      	cmp	r3, #2
 800b3b2:	d806      	bhi.n	800b3c2 <USBD_AUDIO_Setup+0x136>
        {
          haudio->alt_setting = (uint8_t)(req->wValue);
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	885b      	ldrh	r3, [r3, #2]
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	601a      	str	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b3c0:	e017      	b.n	800b3f2 <USBD_AUDIO_Setup+0x166>
          USBD_CtlError(pdev, req);
 800b3c2:	6839      	ldr	r1, [r7, #0]
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f001 fac1 	bl	800c94c <USBD_CtlError>
          ret = USBD_FAIL;
 800b3ca:	2303      	movs	r3, #3
 800b3cc:	75fb      	strb	r3, [r7, #23]
      break;
 800b3ce:	e010      	b.n	800b3f2 <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 800b3d0:	6839      	ldr	r1, [r7, #0]
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f001 faba 	bl	800c94c <USBD_CtlError>
        ret = USBD_FAIL;
 800b3d8:	2303      	movs	r3, #3
 800b3da:	75fb      	strb	r3, [r7, #23]
      break;
 800b3dc:	e009      	b.n	800b3f2 <USBD_AUDIO_Setup+0x166>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b3de:	6839      	ldr	r1, [r7, #0]
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f001 fab3 	bl	800c94c <USBD_CtlError>
      ret = USBD_FAIL;
 800b3e6:	2303      	movs	r3, #3
 800b3e8:	75fb      	strb	r3, [r7, #23]
      break;
 800b3ea:	e002      	b.n	800b3f2 <USBD_AUDIO_Setup+0x166>
      break;
 800b3ec:	bf00      	nop
 800b3ee:	e008      	b.n	800b402 <USBD_AUDIO_Setup+0x176>
      break;
 800b3f0:	bf00      	nop
    }
    break;
 800b3f2:	e006      	b.n	800b402 <USBD_AUDIO_Setup+0x176>
  default:
    USBD_CtlError(pdev, req);
 800b3f4:	6839      	ldr	r1, [r7, #0]
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f001 faa8 	bl	800c94c <USBD_CtlError>
    ret = USBD_FAIL;
 800b3fc:	2303      	movs	r3, #3
 800b3fe:	75fb      	strb	r3, [r7, #23]
    break;
 800b400:	bf00      	nop
  }

  return (uint8_t)ret;
 800b402:	7dfb      	ldrb	r3, [r7, #23]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3718      	adds	r7, #24
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	200000fe 	.word	0x200000fe

0800b410 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	226d      	movs	r2, #109	; 0x6d
 800b41c:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 800b41e:	4b03      	ldr	r3, [pc, #12]	; (800b42c <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 800b420:	4618      	mov	r0, r3
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr
 800b42c:	200000ec 	.word	0x200000ec

0800b430 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	460b      	mov	r3, r1
 800b43a:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 800b43c:	2300      	movs	r3, #0
}
 800b43e:	4618      	mov	r0, r3
 800b440:	370c      	adds	r7, #12
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr

0800b44a <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b084      	sub	sp, #16
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b458:	60fb      	str	r3, [r7, #12]

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b460:	330a      	adds	r3, #10
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	2b01      	cmp	r3, #1
 800b466:	d11d      	bne.n	800b4a4 <USBD_AUDIO_EP0_RxReady+0x5a>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800b46e:	330c      	adds	r3, #12
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	2b02      	cmp	r3, #2
 800b474:	d116      	bne.n	800b4a4 <USBD_AUDIO_EP0_RxReady+0x5a>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b47c:	691a      	ldr	r2, [r3, #16]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b484:	330b      	adds	r3, #11
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	4618      	mov	r0, r3
 800b48a:	4790      	blx	r2
      haudio->control.cmd = 0U;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b492:	330a      	adds	r3, #10
 800b494:	2200      	movs	r2, #0
 800b496:	701a      	strb	r2, [r3, #0]
      haudio->control.len = 0U;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800b49e:	330b      	adds	r3, #11
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	701a      	strb	r2, [r3, #0]
    }
  }

  return (uint8_t)USBD_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800b4ae:	b480      	push	{r7}
 800b4b0:	b083      	sub	sp, #12
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	370c      	adds	r7, #12
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800b4cc:	2300      	movs	r3, #0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	370c      	adds	r7, #12
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr

0800b4da <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4da:	b480      	push	{r7}
 800b4dc:	b083      	sub	sp, #12
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800b4e6:	2300      	movs	r3, #0
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	370c      	adds	r7, #12
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr

0800b50e <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b50e:	b590      	push	{r4, r7, lr}
 800b510:	b085      	sub	sp, #20
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	460b      	mov	r3, r1
 800b518:	70fb      	strb	r3, [r7, #3]
  uint16_t PacketSize;
  USBD_AUDIO_HandleTypeDef *haudio;

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b520:	60fb      	str	r3, [r7, #12]

  if (epnum == AUDIO_OUT_EP)
 800b522:	78fb      	ldrb	r3, [r7, #3]
 800b524:	2b01      	cmp	r3, #1
 800b526:	d16c      	bne.n	800b602 <USBD_AUDIO_DataOut+0xf4>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 800b528:	78fb      	ldrb	r3, [r7, #3]
 800b52a:	4619      	mov	r1, r3
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f002 f824 	bl	800d57a <USBD_LL_GetRxDataSize>
 800b532:	4603      	mov	r3, r0
 800b534:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b53c:	695c      	ldr	r4, [r3, #20]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b544:	3308      	adds	r3, #8
 800b546:	881b      	ldrh	r3, [r3, #0]
 800b548:	461a      	mov	r2, r3
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	4413      	add	r3, r2
 800b54e:	3304      	adds	r3, #4
 800b550:	8979      	ldrh	r1, [r7, #10]
 800b552:	2201      	movs	r2, #1
 800b554:	4618      	mov	r0, r3
 800b556:	47a0      	blx	r4
                                                           PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b55e:	3308      	adds	r3, #8
 800b560:	881a      	ldrh	r2, [r3, #0]
 800b562:	897b      	ldrh	r3, [r7, #10]
 800b564:	4413      	add	r3, r2
 800b566:	b29a      	uxth	r2, r3
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b56e:	3308      	adds	r3, #8
 800b570:	801a      	strh	r2, [r3, #0]

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b578:	3308      	adds	r3, #8
 800b57a:	881b      	ldrh	r3, [r3, #0]
 800b57c:	f5b3 5fdc 	cmp.w	r3, #7040	; 0x1b80
 800b580:	d11c      	bne.n	800b5bc <USBD_AUDIO_DataOut+0xae>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b588:	3308      	adds	r3, #8
 800b58a:	2200      	movs	r2, #0
 800b58c:	801a      	strh	r2, [r3, #0]

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b594:	3304      	adds	r3, #4
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	2b03      	cmp	r3, #3
 800b59a:	d10f      	bne.n	800b5bc <USBD_AUDIO_DataOut+0xae>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	1d10      	adds	r0, r2, #4
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 800b5ae:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b5b6:	3304      	adds	r3, #4
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	701a      	strb	r2, [r3, #0]
      }
    }

    if (haudio->rd_enable == 0U)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b5c2:	3305      	adds	r3, #5
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d10d      	bne.n	800b5e6 <USBD_AUDIO_DataOut+0xd8>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b5d0:	3308      	adds	r3, #8
 800b5d2:	881b      	ldrh	r3, [r3, #0]
 800b5d4:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 800b5d8:	d105      	bne.n	800b5e6 <USBD_AUDIO_DataOut+0xd8>
      {
        haudio->rd_enable = 1U;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b5e0:	3305      	adds	r3, #5
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
                                 &haudio->buffer[haudio->wr_ptr],
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b5ec:	3308      	adds	r3, #8
 800b5ee:	881b      	ldrh	r3, [r3, #0]
 800b5f0:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	1d1a      	adds	r2, r3, #4
 800b5f8:	2358      	movs	r3, #88	; 0x58
 800b5fa:	2101      	movs	r1, #1
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f001 ff9b 	bl	800d538 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 800b602:	2300      	movs	r3, #0
}
 800b604:	4618      	mov	r0, r3
 800b606:	3714      	adds	r7, #20
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd90      	pop	{r4, r7, pc}

0800b60c <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b61c:	60fb      	str	r3, [r7, #12]

  (void)USBD_memset(haudio->control.data, 0, 64U);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b624:	330b      	adds	r3, #11
 800b626:	2240      	movs	r2, #64	; 0x40
 800b628:	2100      	movs	r1, #0
 800b62a:	4618      	mov	r0, r3
 800b62c:	f002 f81e 	bl	800d66c <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b636:	330b      	adds	r3, #11
 800b638:	683a      	ldr	r2, [r7, #0]
 800b63a:	88d2      	ldrh	r2, [r2, #6]
 800b63c:	4619      	mov	r1, r3
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f001 f9f5 	bl	800ca2e <USBD_CtlSendData>
}
 800b644:	bf00      	nop
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b65c:	60fb      	str	r3, [r7, #12]

  if (req->wLength != 0U)
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	88db      	ldrh	r3, [r3, #6]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d021      	beq.n	800b6aa <AUDIO_REQ_SetCurrent+0x5e>
  {
    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b66c:	330b      	adds	r3, #11
 800b66e:	683a      	ldr	r2, [r7, #0]
 800b670:	88d2      	ldrh	r2, [r2, #6]
 800b672:	4619      	mov	r1, r3
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f001 fa06 	bl	800ca86 <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800b680:	330a      	adds	r3, #10
 800b682:	2201      	movs	r2, #1
 800b684:	701a      	strb	r2, [r3, #0]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	88db      	ldrh	r3, [r3, #6]
 800b68a:	b2da      	uxtb	r2, r3
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800b692:	330b      	adds	r3, #11
 800b694:	701a      	strb	r2, [r3, #0]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	889b      	ldrh	r3, [r3, #4]
 800b69a:	0a1b      	lsrs	r3, r3, #8
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	b2da      	uxtb	r2, r3
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800b6a6:	330c      	adds	r3, #12
 800b6a8:	701a      	strb	r2, [r3, #0]
  }
}
 800b6aa:	bf00      	nop
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
	...

0800b6b4 <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	220a      	movs	r2, #10
 800b6c0:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 800b6c2:	4b03      	ldr	r3, [pc, #12]	; (800b6d0 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr
 800b6d0:	2000015c 	.word	0x2000015c

0800b6d4 <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d101      	bne.n	800b6e8 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b6e4:	2303      	movs	r3, #3
 800b6e6:	e004      	b.n	800b6f2 <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	683a      	ldr	r2, [r7, #0]
 800b6ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b6f0:	2300      	movs	r3, #0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	370c      	adds	r7, #12
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
	...

0800b700 <USBD_MIDI_Init>:
  // IN endpoint descriptor
  0x09, 0x05, MIDI_IN_EP, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x25, 0x01, 0x01, 0x03,
};

static uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	460b      	mov	r3, r1
 800b70a:	70fb      	strb	r3, [r7, #3]
  pInstance = pdev;
 800b70c:	4a0c      	ldr	r2, [pc, #48]	; (800b740 <USBD_MIDI_Init+0x40>)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6013      	str	r3, [r2, #0]
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 800b712:	2340      	movs	r3, #64	; 0x40
 800b714:	2202      	movs	r2, #2
 800b716:	2181      	movs	r1, #129	; 0x81
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f001 fe1e 	bl	800d35a <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 800b71e:	2340      	movs	r3, #64	; 0x40
 800b720:	2202      	movs	r2, #2
 800b722:	2101      	movs	r1, #1
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f001 fe18 	bl	800d35a <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 800b72a:	2340      	movs	r3, #64	; 0x40
 800b72c:	4a05      	ldr	r2, [pc, #20]	; (800b744 <USBD_MIDI_Init+0x44>)
 800b72e:	2101      	movs	r1, #1
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f001 ff01 	bl	800d538 <USBD_LL_PrepareReceive>
  return 0;
 800b736:	2300      	movs	r3, #0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3708      	adds	r7, #8
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	200003bc 	.word	0x200003bc
 800b744:	200008dc 	.word	0x200008dc

0800b748 <USBD_MIDI_DeInit>:

static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	460b      	mov	r3, r1
 800b752:	70fb      	strb	r3, [r7, #3]
  pInstance = NULL;
 800b754:	4b07      	ldr	r3, [pc, #28]	; (800b774 <USBD_MIDI_DeInit+0x2c>)
 800b756:	2200      	movs	r2, #0
 800b758:	601a      	str	r2, [r3, #0]
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 800b75a:	2181      	movs	r1, #129	; 0x81
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f001 fe22 	bl	800d3a6 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,MIDI_OUT_EP);
 800b762:	2101      	movs	r1, #1
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f001 fe1e 	bl	800d3a6 <USBD_LL_CloseEP>
  return 0;
 800b76a:	2300      	movs	r3, #0
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3708      	adds	r7, #8
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	200003bc 	.word	0x200003bc

0800b778 <USBD_MIDI_DataIn>:

//midi data incoming to host
static uint8_t USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum){
 800b778:	b480      	push	{r7}
 800b77a:	b083      	sub	sp, #12
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	460b      	mov	r3, r1
 800b782:	70fb      	strb	r3, [r7, #3]

  if (USB_Tx_State == 1){
 800b784:	4b06      	ldr	r3, [pc, #24]	; (800b7a0 <USBD_MIDI_DataIn+0x28>)
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d102      	bne.n	800b792 <USBD_MIDI_DataIn+0x1a>
    USB_Tx_State = 0;
 800b78c:	4b04      	ldr	r3, [pc, #16]	; (800b7a0 <USBD_MIDI_DataIn+0x28>)
 800b78e:	2200      	movs	r2, #0
 800b790:	701a      	strb	r2, [r3, #0]
  }

  return USBD_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	370c      	adds	r7, #12
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr
 800b7a0:	200003cc 	.word	0x200003cc

0800b7a4 <USBD_MIDI_DataOut>:

//midi data outcoming from host
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;

  USBD_MIDI_ItfTypeDef *pmidi;
  pmidi = (USBD_MIDI_ItfTypeDef *)(pdev->pUserData);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7b6:	60fb      	str	r3, [r7, #12]

  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
 800b7be:	78fa      	ldrb	r2, [r7, #3]
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	00db      	lsls	r3, r3, #3
 800b7c4:	1a9b      	subs	r3, r3, r2
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	440b      	add	r3, r1
 800b7ca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	817b      	strh	r3, [r7, #10]

  pmidi->pIf_MidiRx((uint8_t *)&USB_Rx_Buffer, USB_Rx_Cnt);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	897a      	ldrh	r2, [r7, #10]
 800b7d8:	4611      	mov	r1, r2
 800b7da:	4806      	ldr	r0, [pc, #24]	; (800b7f4 <USBD_MIDI_DataOut+0x50>)
 800b7dc:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 800b7de:	2340      	movs	r3, #64	; 0x40
 800b7e0:	4a04      	ldr	r2, [pc, #16]	; (800b7f4 <USBD_MIDI_DataOut+0x50>)
 800b7e2:	2101      	movs	r1, #1
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f001 fea7 	bl	800d538 <USBD_LL_PrepareReceive>
  return USBD_OK;
 800b7ea:	2300      	movs	r3, #0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3710      	adds	r7, #16
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	200008dc 	.word	0x200008dc

0800b7f8 <USBD_MIDI_SendPacket>:

void USBD_MIDI_SendPacket (){
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if(USB_Tx_State != 1){
 800b7fe:	4b30      	ldr	r3, [pc, #192]	; (800b8c0 <USBD_MIDI_SendPacket+0xc8>)
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	2b01      	cmp	r3, #1
 800b804:	d059      	beq.n	800b8ba <USBD_MIDI_SendPacket+0xc2>
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE){
 800b806:	4b2f      	ldr	r3, [pc, #188]	; (800b8c4 <USBD_MIDI_SendPacket+0xcc>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b80e:	d102      	bne.n	800b816 <USBD_MIDI_SendPacket+0x1e>
      APP_Rx_ptr_out = 0;
 800b810:	4b2c      	ldr	r3, [pc, #176]	; (800b8c4 <USBD_MIDI_SendPacket+0xcc>)
 800b812:	2200      	movs	r2, #0
 800b814:	601a      	str	r2, [r3, #0]
    }

    if(APP_Rx_ptr_out == APP_Rx_ptr_in){
 800b816:	4b2b      	ldr	r3, [pc, #172]	; (800b8c4 <USBD_MIDI_SendPacket+0xcc>)
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	4b2b      	ldr	r3, [pc, #172]	; (800b8c8 <USBD_MIDI_SendPacket+0xd0>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d103      	bne.n	800b82a <USBD_MIDI_SendPacket+0x32>
      USB_Tx_State = 0;
 800b822:	4b27      	ldr	r3, [pc, #156]	; (800b8c0 <USBD_MIDI_SendPacket+0xc8>)
 800b824:	2200      	movs	r2, #0
 800b826:	701a      	strb	r2, [r3, #0]
      return;
 800b828:	e047      	b.n	800b8ba <USBD_MIDI_SendPacket+0xc2>
    }

    if(APP_Rx_ptr_out > APP_Rx_ptr_in){
 800b82a:	4b26      	ldr	r3, [pc, #152]	; (800b8c4 <USBD_MIDI_SendPacket+0xcc>)
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	4b26      	ldr	r3, [pc, #152]	; (800b8c8 <USBD_MIDI_SendPacket+0xd0>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	429a      	cmp	r2, r3
 800b834:	d906      	bls.n	800b844 <USBD_MIDI_SendPacket+0x4c>
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 800b836:	4b23      	ldr	r3, [pc, #140]	; (800b8c4 <USBD_MIDI_SendPacket+0xcc>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b83e:	4a23      	ldr	r2, [pc, #140]	; (800b8cc <USBD_MIDI_SendPacket+0xd4>)
 800b840:	6013      	str	r3, [r2, #0]
 800b842:	e006      	b.n	800b852 <USBD_MIDI_SendPacket+0x5a>
    }else{
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 800b844:	4b20      	ldr	r3, [pc, #128]	; (800b8c8 <USBD_MIDI_SendPacket+0xd0>)
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	4b1e      	ldr	r3, [pc, #120]	; (800b8c4 <USBD_MIDI_SendPacket+0xcc>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	1ad3      	subs	r3, r2, r3
 800b84e:	4a1f      	ldr	r2, [pc, #124]	; (800b8cc <USBD_MIDI_SendPacket+0xd4>)
 800b850:	6013      	str	r3, [r2, #0]
    }

    if (APP_Rx_length > MIDI_DATA_IN_PACKET_SIZE){
 800b852:	4b1e      	ldr	r3, [pc, #120]	; (800b8cc <USBD_MIDI_SendPacket+0xd4>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	2b40      	cmp	r3, #64	; 0x40
 800b858:	d90f      	bls.n	800b87a <USBD_MIDI_SendPacket+0x82>
      USB_Tx_ptr = APP_Rx_ptr_out;
 800b85a:	4b1a      	ldr	r3, [pc, #104]	; (800b8c4 <USBD_MIDI_SendPacket+0xcc>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = MIDI_DATA_IN_PACKET_SIZE;
 800b860:	2340      	movs	r3, #64	; 0x40
 800b862:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += MIDI_DATA_IN_PACKET_SIZE;
 800b864:	4b17      	ldr	r3, [pc, #92]	; (800b8c4 <USBD_MIDI_SendPacket+0xcc>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	3340      	adds	r3, #64	; 0x40
 800b86a:	4a16      	ldr	r2, [pc, #88]	; (800b8c4 <USBD_MIDI_SendPacket+0xcc>)
 800b86c:	6013      	str	r3, [r2, #0]
      APP_Rx_length -= MIDI_DATA_IN_PACKET_SIZE;
 800b86e:	4b17      	ldr	r3, [pc, #92]	; (800b8cc <USBD_MIDI_SendPacket+0xd4>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	3b40      	subs	r3, #64	; 0x40
 800b874:	4a15      	ldr	r2, [pc, #84]	; (800b8cc <USBD_MIDI_SendPacket+0xd4>)
 800b876:	6013      	str	r3, [r2, #0]
 800b878:	e00f      	b.n	800b89a <USBD_MIDI_SendPacket+0xa2>
    }else{
      USB_Tx_ptr = APP_Rx_ptr_out;
 800b87a:	4b12      	ldr	r3, [pc, #72]	; (800b8c4 <USBD_MIDI_SendPacket+0xcc>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = APP_Rx_length;
 800b880:	4b12      	ldr	r3, [pc, #72]	; (800b8cc <USBD_MIDI_SendPacket+0xd4>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += APP_Rx_length;
 800b886:	4b0f      	ldr	r3, [pc, #60]	; (800b8c4 <USBD_MIDI_SendPacket+0xcc>)
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	4b10      	ldr	r3, [pc, #64]	; (800b8cc <USBD_MIDI_SendPacket+0xd4>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4413      	add	r3, r2
 800b890:	4a0c      	ldr	r2, [pc, #48]	; (800b8c4 <USBD_MIDI_SendPacket+0xcc>)
 800b892:	6013      	str	r3, [r2, #0]
      APP_Rx_length = 0;
 800b894:	4b0d      	ldr	r3, [pc, #52]	; (800b8cc <USBD_MIDI_SendPacket+0xd4>)
 800b896:	2200      	movs	r2, #0
 800b898:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1;
 800b89a:	4b09      	ldr	r3, [pc, #36]	; (800b8c0 <USBD_MIDI_SendPacket+0xc8>)
 800b89c:	2201      	movs	r2, #1
 800b89e:	701a      	strb	r2, [r3, #0]
    while(USBD_LL_Transmit(pInstance,
 800b8a0:	bf00      	nop
 800b8a2:	4b0b      	ldr	r3, [pc, #44]	; (800b8d0 <USBD_MIDI_SendPacket+0xd8>)
 800b8a4:	6818      	ldr	r0, [r3, #0]
    		MIDI_IN_EP,(uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],USB_Tx_length) != USBD_OK);
 800b8a6:	88fb      	ldrh	r3, [r7, #6]
    while(USBD_LL_Transmit(pInstance,
 800b8a8:	4a0a      	ldr	r2, [pc, #40]	; (800b8d4 <USBD_MIDI_SendPacket+0xdc>)
 800b8aa:	441a      	add	r2, r3
 800b8ac:	88bb      	ldrh	r3, [r7, #4]
 800b8ae:	2181      	movs	r1, #129	; 0x81
 800b8b0:	f001 fe21 	bl	800d4f6 <USBD_LL_Transmit>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d1f3      	bne.n	800b8a2 <USBD_MIDI_SendPacket+0xaa>
  }
}
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	200003cc 	.word	0x200003cc
 800b8c4:	200003c4 	.word	0x200003c4
 800b8c8:	200003c0 	.word	0x200003c0
 800b8cc:	200003c8 	.word	0x200003c8
 800b8d0:	200003bc 	.word	0x200003bc
 800b8d4:	2000091c 	.word	0x2000091c

0800b8d8 <USBD_MIDI_GetCfgDesc>:

static uint8_t *USBD_MIDI_GetCfgDesc (uint16_t *length){
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2265      	movs	r2, #101	; 0x65
 800b8e4:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 800b8e6:	4b03      	ldr	r3, [pc, #12]	; (800b8f4 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	370c      	adds	r7, #12
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr
 800b8f4:	200001a0 	.word	0x200001a0

0800b8f8 <USBD_MIDI_RegisterInterface>:
//  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
//  return USBD_MIDI_DeviceQualifierDesc;
//}

uint8_t USBD_MIDI_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_MIDI_ItfTypeDef *fops)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
  uint8_t ret = USBD_FAIL;
 800b902:	2303      	movs	r3, #3
 800b904:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL){
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d005      	beq.n	800b918 <USBD_MIDI_RegisterInterface+0x20>
    pdev->pUserData= fops;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	683a      	ldr	r2, [r7, #0]
 800b910:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;    
 800b914:	2300      	movs	r3, #0
 800b916:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800b918:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3714      	adds	r7, #20
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr

0800b926 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b086      	sub	sp, #24
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	60f8      	str	r0, [r7, #12]
 800b92e:	60b9      	str	r1, [r7, #8]
 800b930:	4613      	mov	r3, r2
 800b932:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d101      	bne.n	800b93e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b93a:	2303      	movs	r3, #3
 800b93c:	e025      	b.n	800b98a <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b944:	2b00      	cmp	r3, #0
 800b946:	d003      	beq.n	800b950 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2200      	movs	r2, #0
 800b94c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800b956:	2b00      	cmp	r3, #0
 800b958:	d003      	beq.n	800b962 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2200      	movs	r2, #0
 800b95e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d003      	beq.n	800b970 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	68ba      	ldr	r2, [r7, #8]
 800b96c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2201      	movs	r2, #1
 800b974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	79fa      	ldrb	r2, [r7, #7]
 800b97c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f001 fc84 	bl	800d28c <USBD_LL_Init>
 800b984:	4603      	mov	r3, r0
 800b986:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b988:	7dfb      	ldrb	r3, [r7, #23]
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3718      	adds	r7, #24
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b084      	sub	sp, #16
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
 800b99a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b99c:	2300      	movs	r3, #0
 800b99e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d101      	bne.n	800b9aa <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b9a6:	2303      	movs	r3, #3
 800b9a8:	e010      	b.n	800b9cc <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	683a      	ldr	r2, [r7, #0]
 800b9ae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ba:	f107 020e 	add.w	r2, r7, #14
 800b9be:	4610      	mov	r0, r2
 800b9c0:	4798      	blx	r3
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
#endif /* USE_USB_FS */


  return USBD_OK;
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3710      	adds	r7, #16
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f001 fca1 	bl	800d324 <USBD_LL_Start>
 800b9e2:	4603      	mov	r3, r0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3708      	adds	r7, #8
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	370c      	adds	r7, #12
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr

0800ba02 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b084      	sub	sp, #16
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ba0e:	2303      	movs	r3, #3
 800ba10:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d009      	beq.n	800ba30 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	78fa      	ldrb	r2, [r7, #3]
 800ba26:	4611      	mov	r1, r2
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	4798      	blx	r3
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ba30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b082      	sub	sp, #8
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
 800ba42:	460b      	mov	r3, r1
 800ba44:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d007      	beq.n	800ba60 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	78fa      	ldrb	r2, [r7, #3]
 800ba5a:	4611      	mov	r1, r2
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	4798      	blx	r3
  }

  return USBD_OK;
 800ba60:	2300      	movs	r3, #0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3708      	adds	r7, #8
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b084      	sub	sp, #16
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
 800ba72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba7a:	6839      	ldr	r1, [r7, #0]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f000 ff2b 	bl	800c8d8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2201      	movs	r2, #1
 800ba86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ba90:	461a      	mov	r2, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ba9e:	f003 031f 	and.w	r3, r3, #31
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	d00e      	beq.n	800bac4 <USBD_LL_SetupStage+0x5a>
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d302      	bcc.n	800bab0 <USBD_LL_SetupStage+0x46>
 800baaa:	2b02      	cmp	r3, #2
 800baac:	d014      	beq.n	800bad8 <USBD_LL_SetupStage+0x6e>
 800baae:	e01d      	b.n	800baec <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bab6:	4619      	mov	r1, r3
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 fa17 	bl	800beec <USBD_StdDevReq>
 800babe:	4603      	mov	r3, r0
 800bac0:	73fb      	strb	r3, [r7, #15]
      break;
 800bac2:	e020      	b.n	800bb06 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800baca:	4619      	mov	r1, r3
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 fa7b 	bl	800bfc8 <USBD_StdItfReq>
 800bad2:	4603      	mov	r3, r0
 800bad4:	73fb      	strb	r3, [r7, #15]
      break;
 800bad6:	e016      	b.n	800bb06 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bade:	4619      	mov	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 fab7 	bl	800c054 <USBD_StdEPReq>
 800bae6:	4603      	mov	r3, r0
 800bae8:	73fb      	strb	r3, [r7, #15]
      break;
 800baea:	e00c      	b.n	800bb06 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800baf2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	4619      	mov	r1, r3
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f001 fc72 	bl	800d3e4 <USBD_LL_StallEP>
 800bb00:	4603      	mov	r3, r0
 800bb02:	73fb      	strb	r3, [r7, #15]
      break;
 800bb04:	bf00      	nop
  }

  return ret;
 800bb06:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3710      	adds	r7, #16
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b086      	sub	sp, #24
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	607a      	str	r2, [r7, #4]
 800bb1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bb1e:	7afb      	ldrb	r3, [r7, #11]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d137      	bne.n	800bb94 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bb2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb32:	2b03      	cmp	r3, #3
 800bb34:	d14a      	bne.n	800bbcc <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	689a      	ldr	r2, [r3, #8]
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	68db      	ldr	r3, [r3, #12]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d913      	bls.n	800bb6a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	689a      	ldr	r2, [r3, #8]
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	1ad2      	subs	r2, r2, r3
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	68da      	ldr	r2, [r3, #12]
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	bf28      	it	cs
 800bb5c:	4613      	movcs	r3, r2
 800bb5e:	461a      	mov	r2, r3
 800bb60:	6879      	ldr	r1, [r7, #4]
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f000 ffac 	bl	800cac0 <USBD_CtlContinueRx>
 800bb68:	e030      	b.n	800bbcc <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d00a      	beq.n	800bb8c <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bb7c:	2b03      	cmp	r3, #3
 800bb7e:	d105      	bne.n	800bb8c <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb86:	691b      	ldr	r3, [r3, #16]
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800bb8c:	68f8      	ldr	r0, [r7, #12]
 800bb8e:	f000 ffa8 	bl	800cae2 <USBD_CtlSendStatus>
 800bb92:	e01b      	b.n	800bbcc <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb9a:	699b      	ldr	r3, [r3, #24]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d013      	beq.n	800bbc8 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bba6:	2b03      	cmp	r3, #3
 800bba8:	d10e      	bne.n	800bbc8 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbb0:	699b      	ldr	r3, [r3, #24]
 800bbb2:	7afa      	ldrb	r2, [r7, #11]
 800bbb4:	4611      	mov	r1, r2
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	4798      	blx	r3
 800bbba:	4603      	mov	r3, r0
 800bbbc:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bbbe:	7dfb      	ldrb	r3, [r7, #23]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d003      	beq.n	800bbcc <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800bbc4:	7dfb      	ldrb	r3, [r7, #23]
 800bbc6:	e002      	b.n	800bbce <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bbc8:	2303      	movs	r3, #3
 800bbca:	e000      	b.n	800bbce <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800bbcc:	2300      	movs	r3, #0
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3718      	adds	r7, #24
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bbd6:	b580      	push	{r7, lr}
 800bbd8:	b086      	sub	sp, #24
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	60f8      	str	r0, [r7, #12]
 800bbde:	460b      	mov	r3, r1
 800bbe0:	607a      	str	r2, [r7, #4]
 800bbe2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bbe4:	7afb      	ldrb	r3, [r7, #11]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d16a      	bne.n	800bcc0 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	3314      	adds	r3, #20
 800bbee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bbf6:	2b02      	cmp	r3, #2
 800bbf8:	d155      	bne.n	800bca6 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	689a      	ldr	r2, [r3, #8]
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d914      	bls.n	800bc30 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	689a      	ldr	r2, [r3, #8]
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	68db      	ldr	r3, [r3, #12]
 800bc0e:	1ad2      	subs	r2, r2, r3
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	461a      	mov	r2, r3
 800bc1a:	6879      	ldr	r1, [r7, #4]
 800bc1c:	68f8      	ldr	r0, [r7, #12]
 800bc1e:	f000 ff21 	bl	800ca64 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc22:	2300      	movs	r3, #0
 800bc24:	2200      	movs	r2, #0
 800bc26:	2100      	movs	r1, #0
 800bc28:	68f8      	ldr	r0, [r7, #12]
 800bc2a:	f001 fc85 	bl	800d538 <USBD_LL_PrepareReceive>
 800bc2e:	e03a      	b.n	800bca6 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	68da      	ldr	r2, [r3, #12]
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d11c      	bne.n	800bc76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	685a      	ldr	r2, [r3, #4]
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d316      	bcc.n	800bc76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	685a      	ldr	r2, [r3, #4]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d20f      	bcs.n	800bc76 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bc56:	2200      	movs	r2, #0
 800bc58:	2100      	movs	r1, #0
 800bc5a:	68f8      	ldr	r0, [r7, #12]
 800bc5c:	f000 ff02 	bl	800ca64 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2200      	movs	r2, #0
 800bc64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc68:	2300      	movs	r3, #0
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	2100      	movs	r1, #0
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	f001 fc62 	bl	800d538 <USBD_LL_PrepareReceive>
 800bc74:	e017      	b.n	800bca6 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d00a      	beq.n	800bc98 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bc88:	2b03      	cmp	r3, #3
 800bc8a:	d105      	bne.n	800bc98 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc92:	68db      	ldr	r3, [r3, #12]
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc98:	2180      	movs	r1, #128	; 0x80
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f001 fba2 	bl	800d3e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bca0:	68f8      	ldr	r0, [r7, #12]
 800bca2:	f000 ff31 	bl	800cb08 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d123      	bne.n	800bcf8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bcb0:	68f8      	ldr	r0, [r7, #12]
 800bcb2:	f7ff fe9b 	bl	800b9ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bcbe:	e01b      	b.n	800bcf8 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcc6:	695b      	ldr	r3, [r3, #20]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d013      	beq.n	800bcf4 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bcd2:	2b03      	cmp	r3, #3
 800bcd4:	d10e      	bne.n	800bcf4 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcdc:	695b      	ldr	r3, [r3, #20]
 800bcde:	7afa      	ldrb	r2, [r7, #11]
 800bce0:	4611      	mov	r1, r2
 800bce2:	68f8      	ldr	r0, [r7, #12]
 800bce4:	4798      	blx	r3
 800bce6:	4603      	mov	r3, r0
 800bce8:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bcea:	7dfb      	ldrb	r3, [r7, #23]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d003      	beq.n	800bcf8 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800bcf0:	7dfb      	ldrb	r3, [r7, #23]
 800bcf2:	e002      	b.n	800bcfa <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bcf4:	2303      	movs	r3, #3
 800bcf6:	e000      	b.n	800bcfa <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800bcf8:	2300      	movs	r3, #0
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3718      	adds	r7, #24
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b082      	sub	sp, #8
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2200      	movs	r2, #0
 800bd16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d009      	beq.n	800bd46 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	6852      	ldr	r2, [r2, #4]
 800bd3e:	b2d2      	uxtb	r2, r2
 800bd40:	4611      	mov	r1, r2
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd46:	2340      	movs	r3, #64	; 0x40
 800bd48:	2200      	movs	r2, #0
 800bd4a:	2100      	movs	r1, #0
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f001 fb04 	bl	800d35a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2201      	movs	r2, #1
 800bd56:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2240      	movs	r2, #64	; 0x40
 800bd5e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd62:	2340      	movs	r3, #64	; 0x40
 800bd64:	2200      	movs	r2, #0
 800bd66:	2180      	movs	r1, #128	; 0x80
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f001 faf6 	bl	800d35a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2201      	movs	r2, #1
 800bd72:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2240      	movs	r2, #64	; 0x40
 800bd78:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3708      	adds	r7, #8
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	78fa      	ldrb	r2, [r7, #3]
 800bd94:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bd96:	2300      	movs	r3, #0
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	370c      	adds	r7, #12
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr

0800bda4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2204      	movs	r2, #4
 800bdbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	370c      	adds	r7, #12
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr

0800bdce <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bdce:	b480      	push	{r7}
 800bdd0:	b083      	sub	sp, #12
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bddc:	2b04      	cmp	r3, #4
 800bdde:	d105      	bne.n	800bdec <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bdec:	2300      	movs	r3, #0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	370c      	adds	r7, #12
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr

0800bdfa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b082      	sub	sp, #8
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be08:	2b03      	cmp	r3, #3
 800be0a:	d10b      	bne.n	800be24 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be12:	69db      	ldr	r3, [r3, #28]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d005      	beq.n	800be24 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be1e:	69db      	ldr	r3, [r3, #28]
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800be24:	2300      	movs	r3, #0
}
 800be26:	4618      	mov	r0, r3
 800be28:	3708      	adds	r7, #8
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800be2e:	b480      	push	{r7}
 800be30:	b083      	sub	sp, #12
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
 800be36:	460b      	mov	r3, r1
 800be38:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800be3a:	2300      	movs	r3, #0
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	460b      	mov	r3, r1
 800be52:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800be54:	2300      	movs	r3, #0
}
 800be56:	4618      	mov	r0, r3
 800be58:	370c      	adds	r7, #12
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr

0800be62 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800be62:	b480      	push	{r7}
 800be64:	b083      	sub	sp, #12
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2201      	movs	r2, #1
 800be84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d009      	beq.n	800bea6 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	6852      	ldr	r2, [r2, #4]
 800be9e:	b2d2      	uxtb	r2, r2
 800bea0:	4611      	mov	r1, r2
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	4798      	blx	r3
  }

  return USBD_OK;
 800bea6:	2300      	movs	r3, #0
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b087      	sub	sp, #28
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	3301      	adds	r3, #1
 800bec6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bece:	8a3b      	ldrh	r3, [r7, #16]
 800bed0:	021b      	lsls	r3, r3, #8
 800bed2:	b21a      	sxth	r2, r3
 800bed4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bed8:	4313      	orrs	r3, r2
 800beda:	b21b      	sxth	r3, r3
 800bedc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bede:	89fb      	ldrh	r3, [r7, #14]
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	371c      	adds	r7, #28
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bef6:	2300      	movs	r3, #0
 800bef8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf02:	2b20      	cmp	r3, #32
 800bf04:	d004      	beq.n	800bf10 <USBD_StdDevReq+0x24>
 800bf06:	2b40      	cmp	r3, #64	; 0x40
 800bf08:	d002      	beq.n	800bf10 <USBD_StdDevReq+0x24>
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00a      	beq.n	800bf24 <USBD_StdDevReq+0x38>
 800bf0e:	e050      	b.n	800bfb2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	6839      	ldr	r1, [r7, #0]
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	4798      	blx	r3
 800bf1e:	4603      	mov	r3, r0
 800bf20:	73fb      	strb	r3, [r7, #15]
    break;
 800bf22:	e04b      	b.n	800bfbc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	785b      	ldrb	r3, [r3, #1]
 800bf28:	2b09      	cmp	r3, #9
 800bf2a:	d83c      	bhi.n	800bfa6 <USBD_StdDevReq+0xba>
 800bf2c:	a201      	add	r2, pc, #4	; (adr r2, 800bf34 <USBD_StdDevReq+0x48>)
 800bf2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf32:	bf00      	nop
 800bf34:	0800bf89 	.word	0x0800bf89
 800bf38:	0800bf9d 	.word	0x0800bf9d
 800bf3c:	0800bfa7 	.word	0x0800bfa7
 800bf40:	0800bf93 	.word	0x0800bf93
 800bf44:	0800bfa7 	.word	0x0800bfa7
 800bf48:	0800bf67 	.word	0x0800bf67
 800bf4c:	0800bf5d 	.word	0x0800bf5d
 800bf50:	0800bfa7 	.word	0x0800bfa7
 800bf54:	0800bf7f 	.word	0x0800bf7f
 800bf58:	0800bf71 	.word	0x0800bf71
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800bf5c:	6839      	ldr	r1, [r7, #0]
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f9ce 	bl	800c300 <USBD_GetDescriptor>
      break;
 800bf64:	e024      	b.n	800bfb0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800bf66:	6839      	ldr	r1, [r7, #0]
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 fb33 	bl	800c5d4 <USBD_SetAddress>
      break;
 800bf6e:	e01f      	b.n	800bfb0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800bf70:	6839      	ldr	r1, [r7, #0]
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 fb70 	bl	800c658 <USBD_SetConfig>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	73fb      	strb	r3, [r7, #15]
      break;
 800bf7c:	e018      	b.n	800bfb0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800bf7e:	6839      	ldr	r1, [r7, #0]
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 fc0d 	bl	800c7a0 <USBD_GetConfig>
      break;
 800bf86:	e013      	b.n	800bfb0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800bf88:	6839      	ldr	r1, [r7, #0]
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fc3c 	bl	800c808 <USBD_GetStatus>
      break;
 800bf90:	e00e      	b.n	800bfb0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800bf92:	6839      	ldr	r1, [r7, #0]
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 fc6a 	bl	800c86e <USBD_SetFeature>
      break;
 800bf9a:	e009      	b.n	800bfb0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800bf9c:	6839      	ldr	r1, [r7, #0]
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 fc79 	bl	800c896 <USBD_ClrFeature>
      break;
 800bfa4:	e004      	b.n	800bfb0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 fccf 	bl	800c94c <USBD_CtlError>
      break;
 800bfae:	bf00      	nop
    }
    break;
 800bfb0:	e004      	b.n	800bfbc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800bfb2:	6839      	ldr	r1, [r7, #0]
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 fcc9 	bl	800c94c <USBD_CtlError>
    break;
 800bfba:	bf00      	nop
  }

  return ret;
 800bfbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3710      	adds	r7, #16
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop

0800bfc8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfde:	2b20      	cmp	r3, #32
 800bfe0:	d003      	beq.n	800bfea <USBD_StdItfReq+0x22>
 800bfe2:	2b40      	cmp	r3, #64	; 0x40
 800bfe4:	d001      	beq.n	800bfea <USBD_StdItfReq+0x22>
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d12a      	bne.n	800c040 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bff0:	3b01      	subs	r3, #1
 800bff2:	2b02      	cmp	r3, #2
 800bff4:	d81d      	bhi.n	800c032 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	889b      	ldrh	r3, [r3, #4]
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	2b02      	cmp	r3, #2
 800bffe:	d813      	bhi.n	800c028 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c006:	689b      	ldr	r3, [r3, #8]
 800c008:	6839      	ldr	r1, [r7, #0]
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	4798      	blx	r3
 800c00e:	4603      	mov	r3, r0
 800c010:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	88db      	ldrh	r3, [r3, #6]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d110      	bne.n	800c03c <USBD_StdItfReq+0x74>
 800c01a:	7bfb      	ldrb	r3, [r7, #15]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d10d      	bne.n	800c03c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 fd5e 	bl	800cae2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c026:	e009      	b.n	800c03c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c028:	6839      	ldr	r1, [r7, #0]
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 fc8e 	bl	800c94c <USBD_CtlError>
      break;
 800c030:	e004      	b.n	800c03c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c032:	6839      	ldr	r1, [r7, #0]
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 fc89 	bl	800c94c <USBD_CtlError>
      break;
 800c03a:	e000      	b.n	800c03e <USBD_StdItfReq+0x76>
      break;
 800c03c:	bf00      	nop
    }
    break;
 800c03e:	e004      	b.n	800c04a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c040:	6839      	ldr	r1, [r7, #0]
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 fc82 	bl	800c94c <USBD_CtlError>
    break;
 800c048:	bf00      	nop
  }

  return ret;
 800c04a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3710      	adds	r7, #16
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c05e:	2300      	movs	r3, #0
 800c060:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	889b      	ldrh	r3, [r3, #4]
 800c066:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c070:	2b20      	cmp	r3, #32
 800c072:	d004      	beq.n	800c07e <USBD_StdEPReq+0x2a>
 800c074:	2b40      	cmp	r3, #64	; 0x40
 800c076:	d002      	beq.n	800c07e <USBD_StdEPReq+0x2a>
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d00a      	beq.n	800c092 <USBD_StdEPReq+0x3e>
 800c07c:	e135      	b.n	800c2ea <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	6839      	ldr	r1, [r7, #0]
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	4798      	blx	r3
 800c08c:	4603      	mov	r3, r0
 800c08e:	73fb      	strb	r3, [r7, #15]
    break;
 800c090:	e130      	b.n	800c2f4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	785b      	ldrb	r3, [r3, #1]
 800c096:	2b01      	cmp	r3, #1
 800c098:	d03e      	beq.n	800c118 <USBD_StdEPReq+0xc4>
 800c09a:	2b03      	cmp	r3, #3
 800c09c:	d002      	beq.n	800c0a4 <USBD_StdEPReq+0x50>
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d077      	beq.n	800c192 <USBD_StdEPReq+0x13e>
 800c0a2:	e11c      	b.n	800c2de <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0aa:	2b02      	cmp	r3, #2
 800c0ac:	d002      	beq.n	800c0b4 <USBD_StdEPReq+0x60>
 800c0ae:	2b03      	cmp	r3, #3
 800c0b0:	d015      	beq.n	800c0de <USBD_StdEPReq+0x8a>
 800c0b2:	e02b      	b.n	800c10c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0b4:	7bbb      	ldrb	r3, [r7, #14]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00c      	beq.n	800c0d4 <USBD_StdEPReq+0x80>
 800c0ba:	7bbb      	ldrb	r3, [r7, #14]
 800c0bc:	2b80      	cmp	r3, #128	; 0x80
 800c0be:	d009      	beq.n	800c0d4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0c0:	7bbb      	ldrb	r3, [r7, #14]
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f001 f98d 	bl	800d3e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0ca:	2180      	movs	r1, #128	; 0x80
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f001 f989 	bl	800d3e4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c0d2:	e020      	b.n	800c116 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c0d4:	6839      	ldr	r1, [r7, #0]
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 fc38 	bl	800c94c <USBD_CtlError>
        break;
 800c0dc:	e01b      	b.n	800c116 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	885b      	ldrh	r3, [r3, #2]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d10e      	bne.n	800c104 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c0e6:	7bbb      	ldrb	r3, [r7, #14]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d00b      	beq.n	800c104 <USBD_StdEPReq+0xb0>
 800c0ec:	7bbb      	ldrb	r3, [r7, #14]
 800c0ee:	2b80      	cmp	r3, #128	; 0x80
 800c0f0:	d008      	beq.n	800c104 <USBD_StdEPReq+0xb0>
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	88db      	ldrh	r3, [r3, #6]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d104      	bne.n	800c104 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0fa:	7bbb      	ldrb	r3, [r7, #14]
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f001 f970 	bl	800d3e4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fcec 	bl	800cae2 <USBD_CtlSendStatus>

        break;
 800c10a:	e004      	b.n	800c116 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c10c:	6839      	ldr	r1, [r7, #0]
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 fc1c 	bl	800c94c <USBD_CtlError>
        break;
 800c114:	bf00      	nop
      }
      break;
 800c116:	e0e7      	b.n	800c2e8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c11e:	2b02      	cmp	r3, #2
 800c120:	d002      	beq.n	800c128 <USBD_StdEPReq+0xd4>
 800c122:	2b03      	cmp	r3, #3
 800c124:	d015      	beq.n	800c152 <USBD_StdEPReq+0xfe>
 800c126:	e02d      	b.n	800c184 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c128:	7bbb      	ldrb	r3, [r7, #14]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00c      	beq.n	800c148 <USBD_StdEPReq+0xf4>
 800c12e:	7bbb      	ldrb	r3, [r7, #14]
 800c130:	2b80      	cmp	r3, #128	; 0x80
 800c132:	d009      	beq.n	800c148 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c134:	7bbb      	ldrb	r3, [r7, #14]
 800c136:	4619      	mov	r1, r3
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f001 f953 	bl	800d3e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c13e:	2180      	movs	r1, #128	; 0x80
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f001 f94f 	bl	800d3e4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c146:	e023      	b.n	800c190 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c148:	6839      	ldr	r1, [r7, #0]
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 fbfe 	bl	800c94c <USBD_CtlError>
        break;
 800c150:	e01e      	b.n	800c190 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	885b      	ldrh	r3, [r3, #2]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d119      	bne.n	800c18e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c15a:	7bbb      	ldrb	r3, [r7, #14]
 800c15c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c160:	2b00      	cmp	r3, #0
 800c162:	d004      	beq.n	800c16e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c164:	7bbb      	ldrb	r3, [r7, #14]
 800c166:	4619      	mov	r1, r3
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f001 f95a 	bl	800d422 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 fcb7 	bl	800cae2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	6839      	ldr	r1, [r7, #0]
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	4798      	blx	r3
        }
        break;
 800c182:	e004      	b.n	800c18e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c184:	6839      	ldr	r1, [r7, #0]
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 fbe0 	bl	800c94c <USBD_CtlError>
        break;
 800c18c:	e000      	b.n	800c190 <USBD_StdEPReq+0x13c>
        break;
 800c18e:	bf00      	nop
      }
      break;
 800c190:	e0aa      	b.n	800c2e8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c198:	2b02      	cmp	r3, #2
 800c19a:	d002      	beq.n	800c1a2 <USBD_StdEPReq+0x14e>
 800c19c:	2b03      	cmp	r3, #3
 800c19e:	d032      	beq.n	800c206 <USBD_StdEPReq+0x1b2>
 800c1a0:	e097      	b.n	800c2d2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1a2:	7bbb      	ldrb	r3, [r7, #14]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d007      	beq.n	800c1b8 <USBD_StdEPReq+0x164>
 800c1a8:	7bbb      	ldrb	r3, [r7, #14]
 800c1aa:	2b80      	cmp	r3, #128	; 0x80
 800c1ac:	d004      	beq.n	800c1b8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c1ae:	6839      	ldr	r1, [r7, #0]
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 fbcb 	bl	800c94c <USBD_CtlError>
          break;
 800c1b6:	e091      	b.n	800c2dc <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	da0b      	bge.n	800c1d8 <USBD_StdEPReq+0x184>
 800c1c0:	7bbb      	ldrb	r3, [r7, #14]
 800c1c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1c6:	4613      	mov	r3, r2
 800c1c8:	009b      	lsls	r3, r3, #2
 800c1ca:	4413      	add	r3, r2
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	3310      	adds	r3, #16
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	4413      	add	r3, r2
 800c1d4:	3304      	adds	r3, #4
 800c1d6:	e00b      	b.n	800c1f0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c1d8:	7bbb      	ldrb	r3, [r7, #14]
 800c1da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1de:	4613      	mov	r3, r2
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	4413      	add	r3, r2
 800c1e4:	009b      	lsls	r3, r3, #2
 800c1e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	3304      	adds	r3, #4
 800c1f0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	2202      	movs	r2, #2
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 fc15 	bl	800ca2e <USBD_CtlSendData>
        break;
 800c204:	e06a      	b.n	800c2dc <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c206:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	da11      	bge.n	800c232 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c20e:	7bbb      	ldrb	r3, [r7, #14]
 800c210:	f003 020f 	and.w	r2, r3, #15
 800c214:	6879      	ldr	r1, [r7, #4]
 800c216:	4613      	mov	r3, r2
 800c218:	009b      	lsls	r3, r3, #2
 800c21a:	4413      	add	r3, r2
 800c21c:	009b      	lsls	r3, r3, #2
 800c21e:	440b      	add	r3, r1
 800c220:	3324      	adds	r3, #36	; 0x24
 800c222:	881b      	ldrh	r3, [r3, #0]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d117      	bne.n	800c258 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c228:	6839      	ldr	r1, [r7, #0]
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 fb8e 	bl	800c94c <USBD_CtlError>
            break;
 800c230:	e054      	b.n	800c2dc <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c232:	7bbb      	ldrb	r3, [r7, #14]
 800c234:	f003 020f 	and.w	r2, r3, #15
 800c238:	6879      	ldr	r1, [r7, #4]
 800c23a:	4613      	mov	r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	4413      	add	r3, r2
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	440b      	add	r3, r1
 800c244:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c248:	881b      	ldrh	r3, [r3, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d104      	bne.n	800c258 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c24e:	6839      	ldr	r1, [r7, #0]
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 fb7b 	bl	800c94c <USBD_CtlError>
            break;
 800c256:	e041      	b.n	800c2dc <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c258:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	da0b      	bge.n	800c278 <USBD_StdEPReq+0x224>
 800c260:	7bbb      	ldrb	r3, [r7, #14]
 800c262:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c266:	4613      	mov	r3, r2
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	4413      	add	r3, r2
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	3310      	adds	r3, #16
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	4413      	add	r3, r2
 800c274:	3304      	adds	r3, #4
 800c276:	e00b      	b.n	800c290 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c278:	7bbb      	ldrb	r3, [r7, #14]
 800c27a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c27e:	4613      	mov	r3, r2
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	4413      	add	r3, r2
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	4413      	add	r3, r2
 800c28e:	3304      	adds	r3, #4
 800c290:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c292:	7bbb      	ldrb	r3, [r7, #14]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d002      	beq.n	800c29e <USBD_StdEPReq+0x24a>
 800c298:	7bbb      	ldrb	r3, [r7, #14]
 800c29a:	2b80      	cmp	r3, #128	; 0x80
 800c29c:	d103      	bne.n	800c2a6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	601a      	str	r2, [r3, #0]
 800c2a4:	e00e      	b.n	800c2c4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c2a6:	7bbb      	ldrb	r3, [r7, #14]
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f001 f8d8 	bl	800d460 <USBD_LL_IsStallEP>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d003      	beq.n	800c2be <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	601a      	str	r2, [r3, #0]
 800c2bc:	e002      	b.n	800c2c4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	2202      	movs	r2, #2
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 fbaf 	bl	800ca2e <USBD_CtlSendData>
          break;
 800c2d0:	e004      	b.n	800c2dc <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800c2d2:	6839      	ldr	r1, [r7, #0]
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 fb39 	bl	800c94c <USBD_CtlError>
        break;
 800c2da:	bf00      	nop
      }
      break;
 800c2dc:	e004      	b.n	800c2e8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800c2de:	6839      	ldr	r1, [r7, #0]
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 fb33 	bl	800c94c <USBD_CtlError>
      break;
 800c2e6:	bf00      	nop
    }
    break;
 800c2e8:	e004      	b.n	800c2f4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800c2ea:	6839      	ldr	r1, [r7, #0]
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 fb2d 	bl	800c94c <USBD_CtlError>
    break;
 800c2f2:	bf00      	nop
  }

  return ret;
 800c2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3710      	adds	r7, #16
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
	...

0800c300 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c30a:	2300      	movs	r3, #0
 800c30c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c30e:	2300      	movs	r3, #0
 800c310:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c312:	2300      	movs	r3, #0
 800c314:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	885b      	ldrh	r3, [r3, #2]
 800c31a:	0a1b      	lsrs	r3, r3, #8
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	3b01      	subs	r3, #1
 800c320:	2b06      	cmp	r3, #6
 800c322:	f200 8128 	bhi.w	800c576 <USBD_GetDescriptor+0x276>
 800c326:	a201      	add	r2, pc, #4	; (adr r2, 800c32c <USBD_GetDescriptor+0x2c>)
 800c328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c32c:	0800c349 	.word	0x0800c349
 800c330:	0800c361 	.word	0x0800c361
 800c334:	0800c3a1 	.word	0x0800c3a1
 800c338:	0800c577 	.word	0x0800c577
 800c33c:	0800c577 	.word	0x0800c577
 800c340:	0800c517 	.word	0x0800c517
 800c344:	0800c543 	.word	0x0800c543
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	7c12      	ldrb	r2, [r2, #16]
 800c354:	f107 0108 	add.w	r1, r7, #8
 800c358:	4610      	mov	r0, r2
 800c35a:	4798      	blx	r3
 800c35c:	60f8      	str	r0, [r7, #12]
    break;
 800c35e:	e112      	b.n	800c586 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	7c1b      	ldrb	r3, [r3, #16]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d10d      	bne.n	800c384 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c370:	f107 0208 	add.w	r2, r7, #8
 800c374:	4610      	mov	r0, r2
 800c376:	4798      	blx	r3
 800c378:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	3301      	adds	r3, #1
 800c37e:	2202      	movs	r2, #2
 800c380:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c382:	e100      	b.n	800c586 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c38c:	f107 0208 	add.w	r2, r7, #8
 800c390:	4610      	mov	r0, r2
 800c392:	4798      	blx	r3
 800c394:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	3301      	adds	r3, #1
 800c39a:	2202      	movs	r2, #2
 800c39c:	701a      	strb	r2, [r3, #0]
    break;
 800c39e:	e0f2      	b.n	800c586 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	885b      	ldrh	r3, [r3, #2]
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	2b05      	cmp	r3, #5
 800c3a8:	f200 80ac 	bhi.w	800c504 <USBD_GetDescriptor+0x204>
 800c3ac:	a201      	add	r2, pc, #4	; (adr r2, 800c3b4 <USBD_GetDescriptor+0xb4>)
 800c3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b2:	bf00      	nop
 800c3b4:	0800c3cd 	.word	0x0800c3cd
 800c3b8:	0800c401 	.word	0x0800c401
 800c3bc:	0800c435 	.word	0x0800c435
 800c3c0:	0800c469 	.word	0x0800c469
 800c3c4:	0800c49d 	.word	0x0800c49d
 800c3c8:	0800c4d1 	.word	0x0800c4d1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00b      	beq.n	800c3f0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	7c12      	ldrb	r2, [r2, #16]
 800c3e4:	f107 0108 	add.w	r1, r7, #8
 800c3e8:	4610      	mov	r0, r2
 800c3ea:	4798      	blx	r3
 800c3ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3ee:	e091      	b.n	800c514 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c3f0:	6839      	ldr	r1, [r7, #0]
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 faaa 	bl	800c94c <USBD_CtlError>
        err++;
 800c3f8:	7afb      	ldrb	r3, [r7, #11]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	72fb      	strb	r3, [r7, #11]
      break;
 800c3fe:	e089      	b.n	800c514 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d00b      	beq.n	800c424 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	7c12      	ldrb	r2, [r2, #16]
 800c418:	f107 0108 	add.w	r1, r7, #8
 800c41c:	4610      	mov	r0, r2
 800c41e:	4798      	blx	r3
 800c420:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c422:	e077      	b.n	800c514 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c424:	6839      	ldr	r1, [r7, #0]
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 fa90 	bl	800c94c <USBD_CtlError>
        err++;
 800c42c:	7afb      	ldrb	r3, [r7, #11]
 800c42e:	3301      	adds	r3, #1
 800c430:	72fb      	strb	r3, [r7, #11]
      break;
 800c432:	e06f      	b.n	800c514 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c43a:	68db      	ldr	r3, [r3, #12]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d00b      	beq.n	800c458 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c446:	68db      	ldr	r3, [r3, #12]
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	7c12      	ldrb	r2, [r2, #16]
 800c44c:	f107 0108 	add.w	r1, r7, #8
 800c450:	4610      	mov	r0, r2
 800c452:	4798      	blx	r3
 800c454:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c456:	e05d      	b.n	800c514 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c458:	6839      	ldr	r1, [r7, #0]
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 fa76 	bl	800c94c <USBD_CtlError>
        err++;
 800c460:	7afb      	ldrb	r3, [r7, #11]
 800c462:	3301      	adds	r3, #1
 800c464:	72fb      	strb	r3, [r7, #11]
      break;
 800c466:	e055      	b.n	800c514 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c46e:	691b      	ldr	r3, [r3, #16]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00b      	beq.n	800c48c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c47a:	691b      	ldr	r3, [r3, #16]
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	7c12      	ldrb	r2, [r2, #16]
 800c480:	f107 0108 	add.w	r1, r7, #8
 800c484:	4610      	mov	r0, r2
 800c486:	4798      	blx	r3
 800c488:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c48a:	e043      	b.n	800c514 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c48c:	6839      	ldr	r1, [r7, #0]
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 fa5c 	bl	800c94c <USBD_CtlError>
        err++;
 800c494:	7afb      	ldrb	r3, [r7, #11]
 800c496:	3301      	adds	r3, #1
 800c498:	72fb      	strb	r3, [r7, #11]
      break;
 800c49a:	e03b      	b.n	800c514 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4a2:	695b      	ldr	r3, [r3, #20]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00b      	beq.n	800c4c0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ae:	695b      	ldr	r3, [r3, #20]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	7c12      	ldrb	r2, [r2, #16]
 800c4b4:	f107 0108 	add.w	r1, r7, #8
 800c4b8:	4610      	mov	r0, r2
 800c4ba:	4798      	blx	r3
 800c4bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4be:	e029      	b.n	800c514 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c4c0:	6839      	ldr	r1, [r7, #0]
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 fa42 	bl	800c94c <USBD_CtlError>
        err++;
 800c4c8:	7afb      	ldrb	r3, [r7, #11]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	72fb      	strb	r3, [r7, #11]
      break;
 800c4ce:	e021      	b.n	800c514 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4d6:	699b      	ldr	r3, [r3, #24]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d00b      	beq.n	800c4f4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4e2:	699b      	ldr	r3, [r3, #24]
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	7c12      	ldrb	r2, [r2, #16]
 800c4e8:	f107 0108 	add.w	r1, r7, #8
 800c4ec:	4610      	mov	r0, r2
 800c4ee:	4798      	blx	r3
 800c4f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4f2:	e00f      	b.n	800c514 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c4f4:	6839      	ldr	r1, [r7, #0]
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 fa28 	bl	800c94c <USBD_CtlError>
        err++;
 800c4fc:	7afb      	ldrb	r3, [r7, #11]
 800c4fe:	3301      	adds	r3, #1
 800c500:	72fb      	strb	r3, [r7, #11]
      break;
 800c502:	e007      	b.n	800c514 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c504:	6839      	ldr	r1, [r7, #0]
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 fa20 	bl	800c94c <USBD_CtlError>
      err++;
 800c50c:	7afb      	ldrb	r3, [r7, #11]
 800c50e:	3301      	adds	r3, #1
 800c510:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c512:	bf00      	nop
    }
    break;
 800c514:	e037      	b.n	800c586 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	7c1b      	ldrb	r3, [r3, #16]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d109      	bne.n	800c532 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c526:	f107 0208 	add.w	r2, r7, #8
 800c52a:	4610      	mov	r0, r2
 800c52c:	4798      	blx	r3
 800c52e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c530:	e029      	b.n	800c586 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 fa09 	bl	800c94c <USBD_CtlError>
      err++;
 800c53a:	7afb      	ldrb	r3, [r7, #11]
 800c53c:	3301      	adds	r3, #1
 800c53e:	72fb      	strb	r3, [r7, #11]
    break;
 800c540:	e021      	b.n	800c586 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	7c1b      	ldrb	r3, [r3, #16]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d10d      	bne.n	800c566 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c552:	f107 0208 	add.w	r2, r7, #8
 800c556:	4610      	mov	r0, r2
 800c558:	4798      	blx	r3
 800c55a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	3301      	adds	r3, #1
 800c560:	2207      	movs	r2, #7
 800c562:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c564:	e00f      	b.n	800c586 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c566:	6839      	ldr	r1, [r7, #0]
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 f9ef 	bl	800c94c <USBD_CtlError>
      err++;
 800c56e:	7afb      	ldrb	r3, [r7, #11]
 800c570:	3301      	adds	r3, #1
 800c572:	72fb      	strb	r3, [r7, #11]
    break;
 800c574:	e007      	b.n	800c586 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800c576:	6839      	ldr	r1, [r7, #0]
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f000 f9e7 	bl	800c94c <USBD_CtlError>
    err++;
 800c57e:	7afb      	ldrb	r3, [r7, #11]
 800c580:	3301      	adds	r3, #1
 800c582:	72fb      	strb	r3, [r7, #11]
    break;
 800c584:	bf00      	nop
  }

  if (err != 0U)
 800c586:	7afb      	ldrb	r3, [r7, #11]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d11e      	bne.n	800c5ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	88db      	ldrh	r3, [r3, #6]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d016      	beq.n	800c5c2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800c594:	893b      	ldrh	r3, [r7, #8]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d00e      	beq.n	800c5b8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	88da      	ldrh	r2, [r3, #6]
 800c59e:	893b      	ldrh	r3, [r7, #8]
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	bf28      	it	cs
 800c5a4:	4613      	movcs	r3, r2
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5aa:	893b      	ldrh	r3, [r7, #8]
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	68f9      	ldr	r1, [r7, #12]
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f000 fa3c 	bl	800ca2e <USBD_CtlSendData>
 800c5b6:	e009      	b.n	800c5cc <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c5b8:	6839      	ldr	r1, [r7, #0]
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 f9c6 	bl	800c94c <USBD_CtlError>
 800c5c0:	e004      	b.n	800c5cc <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 fa8d 	bl	800cae2 <USBD_CtlSendStatus>
 800c5c8:	e000      	b.n	800c5cc <USBD_GetDescriptor+0x2cc>
    return;
 800c5ca:	bf00      	nop
    }
  }
}
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop

0800c5d4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	889b      	ldrh	r3, [r3, #4]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d130      	bne.n	800c648 <USBD_SetAddress+0x74>
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	88db      	ldrh	r3, [r3, #6]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d12c      	bne.n	800c648 <USBD_SetAddress+0x74>
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	885b      	ldrh	r3, [r3, #2]
 800c5f2:	2b7f      	cmp	r3, #127	; 0x7f
 800c5f4:	d828      	bhi.n	800c648 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	885b      	ldrh	r3, [r3, #2]
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c600:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c608:	2b03      	cmp	r3, #3
 800c60a:	d104      	bne.n	800c616 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c60c:	6839      	ldr	r1, [r7, #0]
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 f99c 	bl	800c94c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c614:	e01c      	b.n	800c650 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	7bfa      	ldrb	r2, [r7, #15]
 800c61a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c61e:	7bfb      	ldrb	r3, [r7, #15]
 800c620:	4619      	mov	r1, r3
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 ff48 	bl	800d4b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 fa5a 	bl	800cae2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c62e:	7bfb      	ldrb	r3, [r7, #15]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d004      	beq.n	800c63e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2202      	movs	r2, #2
 800c638:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c63c:	e008      	b.n	800c650 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2201      	movs	r2, #1
 800c642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c646:	e003      	b.n	800c650 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c648:	6839      	ldr	r1, [r7, #0]
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 f97e 	bl	800c94c <USBD_CtlError>
  }
}
 800c650:	bf00      	nop
 800c652:	3710      	adds	r7, #16
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c662:	2300      	movs	r3, #0
 800c664:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	885b      	ldrh	r3, [r3, #2]
 800c66a:	b2da      	uxtb	r2, r3
 800c66c:	4b4b      	ldr	r3, [pc, #300]	; (800c79c <USBD_SetConfig+0x144>)
 800c66e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c670:	4b4a      	ldr	r3, [pc, #296]	; (800c79c <USBD_SetConfig+0x144>)
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	2b01      	cmp	r3, #1
 800c676:	d905      	bls.n	800c684 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c678:	6839      	ldr	r1, [r7, #0]
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f000 f966 	bl	800c94c <USBD_CtlError>
    return USBD_FAIL;
 800c680:	2303      	movs	r3, #3
 800c682:	e087      	b.n	800c794 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c68a:	2b02      	cmp	r3, #2
 800c68c:	d002      	beq.n	800c694 <USBD_SetConfig+0x3c>
 800c68e:	2b03      	cmp	r3, #3
 800c690:	d025      	beq.n	800c6de <USBD_SetConfig+0x86>
 800c692:	e071      	b.n	800c778 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c694:	4b41      	ldr	r3, [pc, #260]	; (800c79c <USBD_SetConfig+0x144>)
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d01c      	beq.n	800c6d6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c69c:	4b3f      	ldr	r3, [pc, #252]	; (800c79c <USBD_SetConfig+0x144>)
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6a6:	4b3d      	ldr	r3, [pc, #244]	; (800c79c <USBD_SetConfig+0x144>)
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f7ff f9a8 	bl	800ba02 <USBD_SetClassConfig>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c6b6:	7bfb      	ldrb	r3, [r7, #15]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d004      	beq.n	800c6c6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c6bc:	6839      	ldr	r1, [r7, #0]
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 f944 	bl	800c94c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c6c4:	e065      	b.n	800c792 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 fa0b 	bl	800cae2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2203      	movs	r2, #3
 800c6d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c6d4:	e05d      	b.n	800c792 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 fa03 	bl	800cae2 <USBD_CtlSendStatus>
    break;
 800c6dc:	e059      	b.n	800c792 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c6de:	4b2f      	ldr	r3, [pc, #188]	; (800c79c <USBD_SetConfig+0x144>)
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d112      	bne.n	800c70c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2202      	movs	r2, #2
 800c6ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c6ee:	4b2b      	ldr	r3, [pc, #172]	; (800c79c <USBD_SetConfig+0x144>)
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c6f8:	4b28      	ldr	r3, [pc, #160]	; (800c79c <USBD_SetConfig+0x144>)
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f7ff f99b 	bl	800ba3a <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 f9ec 	bl	800cae2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c70a:	e042      	b.n	800c792 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c70c:	4b23      	ldr	r3, [pc, #140]	; (800c79c <USBD_SetConfig+0x144>)
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	461a      	mov	r2, r3
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	429a      	cmp	r2, r3
 800c718:	d02a      	beq.n	800c770 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	4619      	mov	r1, r3
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f7ff f989 	bl	800ba3a <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c728:	4b1c      	ldr	r3, [pc, #112]	; (800c79c <USBD_SetConfig+0x144>)
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	461a      	mov	r2, r3
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c732:	4b1a      	ldr	r3, [pc, #104]	; (800c79c <USBD_SetConfig+0x144>)
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	4619      	mov	r1, r3
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f7ff f962 	bl	800ba02 <USBD_SetClassConfig>
 800c73e:	4603      	mov	r3, r0
 800c740:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800c742:	7bfb      	ldrb	r3, [r7, #15]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d00f      	beq.n	800c768 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800c748:	6839      	ldr	r1, [r7, #0]
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 f8fe 	bl	800c94c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	b2db      	uxtb	r3, r3
 800c756:	4619      	mov	r1, r3
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f7ff f96e 	bl	800ba3a <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2202      	movs	r2, #2
 800c762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c766:	e014      	b.n	800c792 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 f9ba 	bl	800cae2 <USBD_CtlSendStatus>
    break;
 800c76e:	e010      	b.n	800c792 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 f9b6 	bl	800cae2 <USBD_CtlSendStatus>
    break;
 800c776:	e00c      	b.n	800c792 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800c778:	6839      	ldr	r1, [r7, #0]
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 f8e6 	bl	800c94c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c780:	4b06      	ldr	r3, [pc, #24]	; (800c79c <USBD_SetConfig+0x144>)
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	4619      	mov	r1, r3
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f7ff f957 	bl	800ba3a <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800c78c:	2303      	movs	r3, #3
 800c78e:	73fb      	strb	r3, [r7, #15]
    break;
 800c790:	bf00      	nop
  }

  return ret;
 800c792:	7bfb      	ldrb	r3, [r7, #15]
}
 800c794:	4618      	mov	r0, r3
 800c796:	3710      	adds	r7, #16
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	200003cd 	.word	0x200003cd

0800c7a0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	88db      	ldrh	r3, [r3, #6]
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d004      	beq.n	800c7bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7b2:	6839      	ldr	r1, [r7, #0]
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 f8c9 	bl	800c94c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c7ba:	e021      	b.n	800c800 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	db17      	blt.n	800c7f6 <USBD_GetConfig+0x56>
 800c7c6:	2b02      	cmp	r3, #2
 800c7c8:	dd02      	ble.n	800c7d0 <USBD_GetConfig+0x30>
 800c7ca:	2b03      	cmp	r3, #3
 800c7cc:	d00b      	beq.n	800c7e6 <USBD_GetConfig+0x46>
 800c7ce:	e012      	b.n	800c7f6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	3308      	adds	r3, #8
 800c7da:	2201      	movs	r2, #1
 800c7dc:	4619      	mov	r1, r3
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 f925 	bl	800ca2e <USBD_CtlSendData>
      break;
 800c7e4:	e00c      	b.n	800c800 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	3304      	adds	r3, #4
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 f91d 	bl	800ca2e <USBD_CtlSendData>
      break;
 800c7f4:	e004      	b.n	800c800 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800c7f6:	6839      	ldr	r1, [r7, #0]
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f8a7 	bl	800c94c <USBD_CtlError>
      break;
 800c7fe:	bf00      	nop
}
 800c800:	bf00      	nop
 800c802:	3708      	adds	r7, #8
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c818:	3b01      	subs	r3, #1
 800c81a:	2b02      	cmp	r3, #2
 800c81c:	d81e      	bhi.n	800c85c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	88db      	ldrh	r3, [r3, #6]
 800c822:	2b02      	cmp	r3, #2
 800c824:	d004      	beq.n	800c830 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c826:	6839      	ldr	r1, [r7, #0]
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 f88f 	bl	800c94c <USBD_CtlError>
      break;
 800c82e:	e01a      	b.n	800c866 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2201      	movs	r2, #1
 800c834:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d005      	beq.n	800c84c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	f043 0202 	orr.w	r2, r3, #2
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	330c      	adds	r3, #12
 800c850:	2202      	movs	r2, #2
 800c852:	4619      	mov	r1, r3
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 f8ea 	bl	800ca2e <USBD_CtlSendData>
    break;
 800c85a:	e004      	b.n	800c866 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c85c:	6839      	ldr	r1, [r7, #0]
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 f874 	bl	800c94c <USBD_CtlError>
    break;
 800c864:	bf00      	nop
  }
}
 800c866:	bf00      	nop
 800c868:	3708      	adds	r7, #8
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b082      	sub	sp, #8
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	885b      	ldrh	r3, [r3, #2]
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d106      	bne.n	800c88e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2201      	movs	r2, #1
 800c884:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 f92a 	bl	800cae2 <USBD_CtlSendStatus>
  }
}
 800c88e:	bf00      	nop
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c896:	b580      	push	{r7, lr}
 800c898:	b082      	sub	sp, #8
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
 800c89e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8a6:	3b01      	subs	r3, #1
 800c8a8:	2b02      	cmp	r3, #2
 800c8aa:	d80b      	bhi.n	800c8c4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	885b      	ldrh	r3, [r3, #2]
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d10c      	bne.n	800c8ce <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 f910 	bl	800cae2 <USBD_CtlSendStatus>
      }
      break;
 800c8c2:	e004      	b.n	800c8ce <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c8c4:	6839      	ldr	r1, [r7, #0]
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 f840 	bl	800c94c <USBD_CtlError>
      break;
 800c8cc:	e000      	b.n	800c8d0 <USBD_ClrFeature+0x3a>
      break;
 800c8ce:	bf00      	nop
  }
}
 800c8d0:	bf00      	nop
 800c8d2:	3708      	adds	r7, #8
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b084      	sub	sp, #16
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	781a      	ldrb	r2, [r3, #0]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	781a      	ldrb	r2, [r3, #0]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	3301      	adds	r3, #1
 800c900:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c902:	68f8      	ldr	r0, [r7, #12]
 800c904:	f7ff fad4 	bl	800beb0 <SWAPBYTE>
 800c908:	4603      	mov	r3, r0
 800c90a:	461a      	mov	r2, r3
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	3301      	adds	r3, #1
 800c914:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	3301      	adds	r3, #1
 800c91a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c91c:	68f8      	ldr	r0, [r7, #12]
 800c91e:	f7ff fac7 	bl	800beb0 <SWAPBYTE>
 800c922:	4603      	mov	r3, r0
 800c924:	461a      	mov	r2, r3
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	3301      	adds	r3, #1
 800c92e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	3301      	adds	r3, #1
 800c934:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c936:	68f8      	ldr	r0, [r7, #12]
 800c938:	f7ff faba 	bl	800beb0 <SWAPBYTE>
 800c93c:	4603      	mov	r3, r0
 800c93e:	461a      	mov	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	80da      	strh	r2, [r3, #6]
}
 800c944:	bf00      	nop
 800c946:	3710      	adds	r7, #16
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c956:	2180      	movs	r1, #128	; 0x80
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 fd43 	bl	800d3e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c95e:	2100      	movs	r1, #0
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 fd3f 	bl	800d3e4 <USBD_LL_StallEP>
}
 800c966:	bf00      	nop
 800c968:	3708      	adds	r7, #8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c96e:	b580      	push	{r7, lr}
 800c970:	b086      	sub	sp, #24
 800c972:	af00      	add	r7, sp, #0
 800c974:	60f8      	str	r0, [r7, #12]
 800c976:	60b9      	str	r1, [r7, #8]
 800c978:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c97a:	2300      	movs	r3, #0
 800c97c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d036      	beq.n	800c9f2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c988:	6938      	ldr	r0, [r7, #16]
 800c98a:	f000 f836 	bl	800c9fa <USBD_GetLen>
 800c98e:	4603      	mov	r3, r0
 800c990:	3301      	adds	r3, #1
 800c992:	b29b      	uxth	r3, r3
 800c994:	005b      	lsls	r3, r3, #1
 800c996:	b29a      	uxth	r2, r3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c99c:	7dfb      	ldrb	r3, [r7, #23]
 800c99e:	68ba      	ldr	r2, [r7, #8]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	7812      	ldrb	r2, [r2, #0]
 800c9a6:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9a8:	7dfb      	ldrb	r3, [r7, #23]
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c9ae:	7dfb      	ldrb	r3, [r7, #23]
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	4413      	add	r3, r2
 800c9b4:	2203      	movs	r2, #3
 800c9b6:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9b8:	7dfb      	ldrb	r3, [r7, #23]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c9be:	e013      	b.n	800c9e8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c9c0:	7dfb      	ldrb	r3, [r7, #23]
 800c9c2:	68ba      	ldr	r2, [r7, #8]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	693a      	ldr	r2, [r7, #16]
 800c9c8:	7812      	ldrb	r2, [r2, #0]
 800c9ca:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	613b      	str	r3, [r7, #16]
    idx++;
 800c9d2:	7dfb      	ldrb	r3, [r7, #23]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c9d8:	7dfb      	ldrb	r3, [r7, #23]
 800c9da:	68ba      	ldr	r2, [r7, #8]
 800c9dc:	4413      	add	r3, r2
 800c9de:	2200      	movs	r2, #0
 800c9e0:	701a      	strb	r2, [r3, #0]
    idx++;
 800c9e2:	7dfb      	ldrb	r3, [r7, #23]
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d1e7      	bne.n	800c9c0 <USBD_GetString+0x52>
 800c9f0:	e000      	b.n	800c9f4 <USBD_GetString+0x86>
    return;
 800c9f2:	bf00      	nop
  }
}
 800c9f4:	3718      	adds	r7, #24
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}

0800c9fa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c9fa:	b480      	push	{r7}
 800c9fc:	b085      	sub	sp, #20
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca02:	2300      	movs	r3, #0
 800ca04:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca0a:	e005      	b.n	800ca18 <USBD_GetLen+0x1e>
  {
    len++;
 800ca0c:	7bfb      	ldrb	r3, [r7, #15]
 800ca0e:	3301      	adds	r3, #1
 800ca10:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	3301      	adds	r3, #1
 800ca16:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d1f5      	bne.n	800ca0c <USBD_GetLen+0x12>
  }

  return len;
 800ca20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3714      	adds	r7, #20
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr

0800ca2e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca2e:	b580      	push	{r7, lr}
 800ca30:	b084      	sub	sp, #16
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	60f8      	str	r0, [r7, #12]
 800ca36:	60b9      	str	r1, [r7, #8]
 800ca38:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2202      	movs	r2, #2
 800ca3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	68ba      	ldr	r2, [r7, #8]
 800ca52:	2100      	movs	r1, #0
 800ca54:	68f8      	ldr	r0, [r7, #12]
 800ca56:	f000 fd4e 	bl	800d4f6 <USBD_LL_Transmit>

  return USBD_OK;
 800ca5a:	2300      	movs	r3, #0
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3710      	adds	r7, #16
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	68ba      	ldr	r2, [r7, #8]
 800ca74:	2100      	movs	r1, #0
 800ca76:	68f8      	ldr	r0, [r7, #12]
 800ca78:	f000 fd3d 	bl	800d4f6 <USBD_LL_Transmit>

  return USBD_OK;
 800ca7c:	2300      	movs	r3, #0
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3710      	adds	r7, #16
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b084      	sub	sp, #16
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	60f8      	str	r0, [r7, #12]
 800ca8e:	60b9      	str	r1, [r7, #8]
 800ca90:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2203      	movs	r2, #3
 800ca96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	68ba      	ldr	r2, [r7, #8]
 800caae:	2100      	movs	r1, #0
 800cab0:	68f8      	ldr	r0, [r7, #12]
 800cab2:	f000 fd41 	bl	800d538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cab6:	2300      	movs	r3, #0
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3710      	adds	r7, #16
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	68ba      	ldr	r2, [r7, #8]
 800cad0:	2100      	movs	r1, #0
 800cad2:	68f8      	ldr	r0, [r7, #12]
 800cad4:	f000 fd30 	bl	800d538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cad8:	2300      	movs	r3, #0
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3710      	adds	r7, #16
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b082      	sub	sp, #8
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2204      	movs	r2, #4
 800caee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800caf2:	2300      	movs	r3, #0
 800caf4:	2200      	movs	r2, #0
 800caf6:	2100      	movs	r1, #0
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 fcfc 	bl	800d4f6 <USBD_LL_Transmit>

  return USBD_OK;
 800cafe:	2300      	movs	r3, #0
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3708      	adds	r7, #8
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2205      	movs	r2, #5
 800cb14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb18:	2300      	movs	r3, #0
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	2100      	movs	r1, #0
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 fd0a 	bl	800d538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb24:	2300      	movs	r3, #0
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3708      	adds	r7, #8
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
	...

0800cb30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cb34:	2200      	movs	r2, #0
 800cb36:	4918      	ldr	r1, [pc, #96]	; (800cb98 <MX_USB_DEVICE_Init+0x68>)
 800cb38:	4818      	ldr	r0, [pc, #96]	; (800cb9c <MX_USB_DEVICE_Init+0x6c>)
 800cb3a:	f7fe fef4 	bl	800b926 <USBD_Init>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d001      	beq.n	800cb48 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cb44:	f7f5 fb32 	bl	80021ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800cb48:	4915      	ldr	r1, [pc, #84]	; (800cba0 <MX_USB_DEVICE_Init+0x70>)
 800cb4a:	4814      	ldr	r0, [pc, #80]	; (800cb9c <MX_USB_DEVICE_Init+0x6c>)
 800cb4c:	f7fe ff21 	bl	800b992 <USBD_RegisterClass>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d001      	beq.n	800cb5a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cb56:	f7f5 fb29 	bl	80021ac <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800cb5a:	4912      	ldr	r1, [pc, #72]	; (800cba4 <MX_USB_DEVICE_Init+0x74>)
 800cb5c:	480f      	ldr	r0, [pc, #60]	; (800cb9c <MX_USB_DEVICE_Init+0x6c>)
 800cb5e:	f7fe fdb9 	bl	800b6d4 <USBD_AUDIO_RegisterInterface>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d001      	beq.n	800cb6c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cb68:	f7f5 fb20 	bl	80021ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cb6c:	480b      	ldr	r0, [pc, #44]	; (800cb9c <MX_USB_DEVICE_Init+0x6c>)
 800cb6e:	f7fe ff31 	bl	800b9d4 <USBD_Start>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d001      	beq.n	800cb7c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cb78:	f7f5 fb18 	bl	80021ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI);
 800cb7c:	490a      	ldr	r1, [pc, #40]	; (800cba8 <MX_USB_DEVICE_Init+0x78>)
 800cb7e:	4807      	ldr	r0, [pc, #28]	; (800cb9c <MX_USB_DEVICE_Init+0x6c>)
 800cb80:	f7fe ff07 	bl	800b992 <USBD_RegisterClass>

	USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800cb84:	4909      	ldr	r1, [pc, #36]	; (800cbac <MX_USB_DEVICE_Init+0x7c>)
 800cb86:	4805      	ldr	r0, [pc, #20]	; (800cb9c <MX_USB_DEVICE_Init+0x6c>)
 800cb88:	f7fe feb6 	bl	800b8f8 <USBD_MIDI_RegisterInterface>

	USBD_Start(&hUsbDeviceFS);
 800cb8c:	4803      	ldr	r0, [pc, #12]	; (800cb9c <MX_USB_DEVICE_Init+0x6c>)
 800cb8e:	f7fe ff21 	bl	800b9d4 <USBD_Start>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cb92:	bf00      	nop
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	20000224 	.word	0x20000224
 800cb9c:	20000a1c 	.word	0x20000a1c
 800cba0:	200000b4 	.word	0x200000b4
 800cba4:	20000208 	.word	0x20000208
 800cba8:	20000168 	.word	0x20000168
 800cbac:	20000284 	.word	0x20000284

0800cbb0 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b085      	sub	sp, #20
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	60f8      	str	r0, [r7, #12]
 800cbb8:	60b9      	str	r1, [r7, #8]
 800cbba:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 800cbbc:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3714      	adds	r7, #20
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr

0800cbca <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800cbca:	b480      	push	{r7}
 800cbcc:	b083      	sub	sp, #12
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 800cbd2:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	370c      	adds	r7, #12
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b085      	sub	sp, #20
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	4613      	mov	r3, r2
 800cbec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800cbee:	79fb      	ldrb	r3, [r7, #7]
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	d001      	beq.n	800cbf8 <AUDIO_AudioCmd_FS+0x18>
 800cbf4:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800cbf6:	e000      	b.n	800cbfa <AUDIO_AudioCmd_FS+0x1a>
    break;
 800cbf8:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800cbfa:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3714      	adds	r7, #20
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr

0800cc08 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b083      	sub	sp, #12
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	4603      	mov	r3, r0
 800cc10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 800cc12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	370c      	adds	r7, #12
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr

0800cc20 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b083      	sub	sp, #12
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	4603      	mov	r3, r0
 800cc28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 800cc2a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	370c      	adds	r7, #12
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr

0800cc38 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	4613      	mov	r3, r2
 800cc44:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800cc46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3714      	adds	r7, #20
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr

0800cc54 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800cc54:	b480      	push	{r7}
 800cc56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800cc58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	6039      	str	r1, [r7, #0]
 800cc6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	2212      	movs	r2, #18
 800cc74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cc76:	4b03      	ldr	r3, [pc, #12]	; (800cc84 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	370c      	adds	r7, #12
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr
 800cc84:	20000240 	.word	0x20000240

0800cc88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b083      	sub	sp, #12
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	4603      	mov	r3, r0
 800cc90:	6039      	str	r1, [r7, #0]
 800cc92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	2204      	movs	r2, #4
 800cc98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cc9a:	4b03      	ldr	r3, [pc, #12]	; (800cca8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr
 800cca8:	20000254 	.word	0x20000254

0800ccac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	6039      	str	r1, [r7, #0]
 800ccb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccb8:	79fb      	ldrb	r3, [r7, #7]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d105      	bne.n	800ccca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ccbe:	683a      	ldr	r2, [r7, #0]
 800ccc0:	4907      	ldr	r1, [pc, #28]	; (800cce0 <USBD_FS_ProductStrDescriptor+0x34>)
 800ccc2:	4808      	ldr	r0, [pc, #32]	; (800cce4 <USBD_FS_ProductStrDescriptor+0x38>)
 800ccc4:	f7ff fe53 	bl	800c96e <USBD_GetString>
 800ccc8:	e004      	b.n	800ccd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ccca:	683a      	ldr	r2, [r7, #0]
 800cccc:	4904      	ldr	r1, [pc, #16]	; (800cce0 <USBD_FS_ProductStrDescriptor+0x34>)
 800ccce:	4805      	ldr	r0, [pc, #20]	; (800cce4 <USBD_FS_ProductStrDescriptor+0x38>)
 800ccd0:	f7ff fe4d 	bl	800c96e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccd4:	4b02      	ldr	r3, [pc, #8]	; (800cce0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	20000cec 	.word	0x20000cec
 800cce4:	0800d9e8 	.word	0x0800d9e8

0800cce8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	4603      	mov	r3, r0
 800ccf0:	6039      	str	r1, [r7, #0]
 800ccf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ccf4:	683a      	ldr	r2, [r7, #0]
 800ccf6:	4904      	ldr	r1, [pc, #16]	; (800cd08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ccf8:	4804      	ldr	r0, [pc, #16]	; (800cd0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ccfa:	f7ff fe38 	bl	800c96e <USBD_GetString>
  return USBD_StrDesc;
 800ccfe:	4b02      	ldr	r3, [pc, #8]	; (800cd08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3708      	adds	r7, #8
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	20000cec 	.word	0x20000cec
 800cd0c:	0800d9e8 	.word	0x0800d9e8

0800cd10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	4603      	mov	r3, r0
 800cd18:	6039      	str	r1, [r7, #0]
 800cd1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	221a      	movs	r2, #26
 800cd20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cd22:	f000 f843 	bl	800cdac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cd26:	4b02      	ldr	r3, [pc, #8]	; (800cd30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3708      	adds	r7, #8
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}
 800cd30:	20000258 	.word	0x20000258

0800cd34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	6039      	str	r1, [r7, #0]
 800cd3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cd40:	79fb      	ldrb	r3, [r7, #7]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d105      	bne.n	800cd52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd46:	683a      	ldr	r2, [r7, #0]
 800cd48:	4907      	ldr	r1, [pc, #28]	; (800cd68 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd4a:	4808      	ldr	r0, [pc, #32]	; (800cd6c <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd4c:	f7ff fe0f 	bl	800c96e <USBD_GetString>
 800cd50:	e004      	b.n	800cd5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd52:	683a      	ldr	r2, [r7, #0]
 800cd54:	4904      	ldr	r1, [pc, #16]	; (800cd68 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd56:	4805      	ldr	r0, [pc, #20]	; (800cd6c <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd58:	f7ff fe09 	bl	800c96e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd5c:	4b02      	ldr	r3, [pc, #8]	; (800cd68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3708      	adds	r7, #8
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}
 800cd66:	bf00      	nop
 800cd68:	20000cec 	.word	0x20000cec
 800cd6c:	0800d9fc 	.word	0x0800d9fc

0800cd70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	4603      	mov	r3, r0
 800cd78:	6039      	str	r1, [r7, #0]
 800cd7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd7c:	79fb      	ldrb	r3, [r7, #7]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d105      	bne.n	800cd8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd82:	683a      	ldr	r2, [r7, #0]
 800cd84:	4907      	ldr	r1, [pc, #28]	; (800cda4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd86:	4808      	ldr	r0, [pc, #32]	; (800cda8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd88:	f7ff fdf1 	bl	800c96e <USBD_GetString>
 800cd8c:	e004      	b.n	800cd98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd8e:	683a      	ldr	r2, [r7, #0]
 800cd90:	4904      	ldr	r1, [pc, #16]	; (800cda4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd92:	4805      	ldr	r0, [pc, #20]	; (800cda8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd94:	f7ff fdeb 	bl	800c96e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd98:	4b02      	ldr	r3, [pc, #8]	; (800cda4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3708      	adds	r7, #8
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	20000cec 	.word	0x20000cec
 800cda8:	0800da14 	.word	0x0800da14

0800cdac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cdb2:	4b0f      	ldr	r3, [pc, #60]	; (800cdf0 <Get_SerialNum+0x44>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cdb8:	4b0e      	ldr	r3, [pc, #56]	; (800cdf4 <Get_SerialNum+0x48>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cdbe:	4b0e      	ldr	r3, [pc, #56]	; (800cdf8 <Get_SerialNum+0x4c>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cdc4:	68fa      	ldr	r2, [r7, #12]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	4413      	add	r3, r2
 800cdca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d009      	beq.n	800cde6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cdd2:	2208      	movs	r2, #8
 800cdd4:	4909      	ldr	r1, [pc, #36]	; (800cdfc <Get_SerialNum+0x50>)
 800cdd6:	68f8      	ldr	r0, [r7, #12]
 800cdd8:	f000 f814 	bl	800ce04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cddc:	2204      	movs	r2, #4
 800cdde:	4908      	ldr	r1, [pc, #32]	; (800ce00 <Get_SerialNum+0x54>)
 800cde0:	68b8      	ldr	r0, [r7, #8]
 800cde2:	f000 f80f 	bl	800ce04 <IntToUnicode>
  }
}
 800cde6:	bf00      	nop
 800cde8:	3710      	adds	r7, #16
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	1fff7a10 	.word	0x1fff7a10
 800cdf4:	1fff7a14 	.word	0x1fff7a14
 800cdf8:	1fff7a18 	.word	0x1fff7a18
 800cdfc:	2000025a 	.word	0x2000025a
 800ce00:	2000026a 	.word	0x2000026a

0800ce04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b087      	sub	sp, #28
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	4613      	mov	r3, r2
 800ce10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ce12:	2300      	movs	r3, #0
 800ce14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ce16:	2300      	movs	r3, #0
 800ce18:	75fb      	strb	r3, [r7, #23]
 800ce1a:	e027      	b.n	800ce6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	0f1b      	lsrs	r3, r3, #28
 800ce20:	2b09      	cmp	r3, #9
 800ce22:	d80b      	bhi.n	800ce3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	0f1b      	lsrs	r3, r3, #28
 800ce28:	b2da      	uxtb	r2, r3
 800ce2a:	7dfb      	ldrb	r3, [r7, #23]
 800ce2c:	005b      	lsls	r3, r3, #1
 800ce2e:	4619      	mov	r1, r3
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	440b      	add	r3, r1
 800ce34:	3230      	adds	r2, #48	; 0x30
 800ce36:	b2d2      	uxtb	r2, r2
 800ce38:	701a      	strb	r2, [r3, #0]
 800ce3a:	e00a      	b.n	800ce52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	0f1b      	lsrs	r3, r3, #28
 800ce40:	b2da      	uxtb	r2, r3
 800ce42:	7dfb      	ldrb	r3, [r7, #23]
 800ce44:	005b      	lsls	r3, r3, #1
 800ce46:	4619      	mov	r1, r3
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	440b      	add	r3, r1
 800ce4c:	3237      	adds	r2, #55	; 0x37
 800ce4e:	b2d2      	uxtb	r2, r2
 800ce50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	011b      	lsls	r3, r3, #4
 800ce56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ce58:	7dfb      	ldrb	r3, [r7, #23]
 800ce5a:	005b      	lsls	r3, r3, #1
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	68ba      	ldr	r2, [r7, #8]
 800ce60:	4413      	add	r3, r2
 800ce62:	2200      	movs	r2, #0
 800ce64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ce66:	7dfb      	ldrb	r3, [r7, #23]
 800ce68:	3301      	adds	r3, #1
 800ce6a:	75fb      	strb	r3, [r7, #23]
 800ce6c:	7dfa      	ldrb	r2, [r7, #23]
 800ce6e:	79fb      	ldrb	r3, [r7, #7]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d3d3      	bcc.n	800ce1c <IntToUnicode+0x18>
  }
}
 800ce74:	bf00      	nop
 800ce76:	371c      	adds	r7, #28
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr

0800ce80 <MIDI_DataRx>:
};

uint8_t flag_sendMidi = 0;

uint16_t MIDI_DataRx(uint8_t *msg, uint16_t length)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	460b      	mov	r3, r1
 800ce8a:	807b      	strh	r3, [r7, #2]
  //uint8_t chan = msg[0] & 0x0F;
  uint8_t msgtype = msg[0] & 0xF0;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	f023 030f 	bic.w	r3, r3, #15
 800ce94:	73fb      	strb	r3, [r7, #15]
  uint8_t b1 =  msg[2];
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	789b      	ldrb	r3, [r3, #2]
 800ce9a:	73bb      	strb	r3, [r7, #14]
  uint8_t b2 =  msg[3];
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	78db      	ldrb	r3, [r3, #3]
 800cea0:	737b      	strb	r3, [r7, #13]
 // uint16_t b = ((b2 & 0x7F) << 7) | (b1 & 0x7F);
 
  switch (msgtype)
 800cea2:	7bfb      	ldrb	r3, [r7, #15]
 800cea4:	2bb0      	cmp	r3, #176	; 0xb0
 800cea6:	d01c      	beq.n	800cee2 <MIDI_DataRx+0x62>
 800cea8:	2bb0      	cmp	r3, #176	; 0xb0
 800ceaa:	dc05      	bgt.n	800ceb8 <MIDI_DataRx+0x38>
 800ceac:	2b90      	cmp	r3, #144	; 0x90
 800ceae:	d01a      	beq.n	800cee6 <MIDI_DataRx+0x66>
 800ceb0:	2ba0      	cmp	r3, #160	; 0xa0
 800ceb2:	d01a      	beq.n	800ceea <MIDI_DataRx+0x6a>
 800ceb4:	2b80      	cmp	r3, #128	; 0x80
	  //key = b1;
	  //velocity = b2;
	  //notepos = key - 8 + transpose;
	  //stop_note(notepos);
	  //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7); //blink LED
	  break;
 800ceb6:	e01f      	b.n	800cef8 <MIDI_DataRx+0x78>
  switch (msgtype)
 800ceb8:	2bd0      	cmp	r3, #208	; 0xd0
 800ceba:	d018      	beq.n	800ceee <MIDI_DataRx+0x6e>
 800cebc:	2bd0      	cmp	r3, #208	; 0xd0
 800cebe:	dc01      	bgt.n	800cec4 <MIDI_DataRx+0x44>
 800cec0:	2bc0      	cmp	r3, #192	; 0xc0
							break;
					}*/
	  break;
  case 0xC0:
	  //data = b1;
	  break;
 800cec2:	e019      	b.n	800cef8 <MIDI_DataRx+0x78>
  switch (msgtype)
 800cec4:	2be0      	cmp	r3, #224	; 0xe0
 800cec6:	d014      	beq.n	800cef2 <MIDI_DataRx+0x72>
 800cec8:	2bf0      	cmp	r3, #240	; 0xf0
 800ceca:	d115      	bne.n	800cef8 <MIDI_DataRx+0x78>
  case 0xE0:
	  //data = b2;
	  //		bend = data;
	  break;
  case 0xF0: {
	  if((b1 == 0x7E) && (b2 == 0x7F)) {
 800cecc:	7bbb      	ldrb	r3, [r7, #14]
 800cece:	2b7e      	cmp	r3, #126	; 0x7e
 800ced0:	d111      	bne.n	800cef6 <MIDI_DataRx+0x76>
 800ced2:	7b7b      	ldrb	r3, [r7, #13]
 800ced4:	2b7f      	cmp	r3, #127	; 0x7f
 800ced6:	d10e      	bne.n	800cef6 <MIDI_DataRx+0x76>
		  MIDI_DataTx(SysexID, 15);
 800ced8:	210f      	movs	r1, #15
 800ceda:	480a      	ldr	r0, [pc, #40]	; (800cf04 <MIDI_DataRx+0x84>)
 800cedc:	f000 f814 	bl	800cf08 <MIDI_DataTx>
	  }
	  break;
 800cee0:	e009      	b.n	800cef6 <MIDI_DataRx+0x76>
	  break;
 800cee2:	bf00      	nop
 800cee4:	e008      	b.n	800cef8 <MIDI_DataRx+0x78>
	  break;
 800cee6:	bf00      	nop
 800cee8:	e006      	b.n	800cef8 <MIDI_DataRx+0x78>
	  break;
 800ceea:	bf00      	nop
 800ceec:	e004      	b.n	800cef8 <MIDI_DataRx+0x78>
	  break;
 800ceee:	bf00      	nop
 800cef0:	e002      	b.n	800cef8 <MIDI_DataRx+0x78>
	  break;
 800cef2:	bf00      	nop
 800cef4:	e000      	b.n	800cef8 <MIDI_DataRx+0x78>
	  break;
 800cef6:	bf00      	nop
  }
  }
  return 0;
 800cef8:	2300      	movs	r3, #0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3710      	adds	r7, #16
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	20000274 	.word	0x20000274

0800cf08 <MIDI_DataTx>:

uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	460b      	mov	r3, r1
 800cf12:	807b      	strh	r3, [r7, #2]
  uint32_t i = 0;
 800cf14:	2300      	movs	r3, #0
 800cf16:	60fb      	str	r3, [r7, #12]
  while (i < length) {
 800cf18:	e017      	b.n	800cf4a <MIDI_DataTx+0x42>
    APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	441a      	add	r2, r3
 800cf20:	4b0f      	ldr	r3, [pc, #60]	; (800cf60 <MIDI_DataTx+0x58>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	7811      	ldrb	r1, [r2, #0]
 800cf26:	4a0f      	ldr	r2, [pc, #60]	; (800cf64 <MIDI_DataTx+0x5c>)
 800cf28:	54d1      	strb	r1, [r2, r3]
    APP_Rx_ptr_in++;
 800cf2a:	4b0d      	ldr	r3, [pc, #52]	; (800cf60 <MIDI_DataTx+0x58>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	3301      	adds	r3, #1
 800cf30:	4a0b      	ldr	r2, [pc, #44]	; (800cf60 <MIDI_DataTx+0x58>)
 800cf32:	6013      	str	r3, [r2, #0]
    i++;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	3301      	adds	r3, #1
 800cf38:	60fb      	str	r3, [r7, #12]
    if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 800cf3a:	4b09      	ldr	r3, [pc, #36]	; (800cf60 <MIDI_DataTx+0x58>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf42:	d102      	bne.n	800cf4a <MIDI_DataTx+0x42>
      APP_Rx_ptr_in = 0;
 800cf44:	4b06      	ldr	r3, [pc, #24]	; (800cf60 <MIDI_DataTx+0x58>)
 800cf46:	2200      	movs	r2, #0
 800cf48:	601a      	str	r2, [r3, #0]
  while (i < length) {
 800cf4a:	887b      	ldrh	r3, [r7, #2]
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d3e3      	bcc.n	800cf1a <MIDI_DataTx+0x12>
    }
  }
  USBD_MIDI_SendPacket();
 800cf52:	f7fe fc51 	bl	800b7f8 <USBD_MIDI_SendPacket>
  return USBD_OK;
 800cf56:	2300      	movs	r3, #0
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3710      	adds	r7, #16
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	200003c0 	.word	0x200003c0
 800cf64:	2000091c 	.word	0x2000091c

0800cf68 <MIDI_SendBuffer>:

uint16_t MIDI_SendBuffer(uint8_t *msg, uint16_t length){
 800cf68:	b480      	push	{r7}
 800cf6a:	b085      	sub	sp, #20
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	460b      	mov	r3, r1
 800cf72:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800cf74:	2300      	movs	r3, #0
 800cf76:	60fb      	str	r3, [r7, #12]
	while (i < length) {
 800cf78:	e017      	b.n	800cfaa <MIDI_SendBuffer+0x42>
		APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 800cf7a:	687a      	ldr	r2, [r7, #4]
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	441a      	add	r2, r3
 800cf80:	4b11      	ldr	r3, [pc, #68]	; (800cfc8 <MIDI_SendBuffer+0x60>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	7811      	ldrb	r1, [r2, #0]
 800cf86:	4a11      	ldr	r2, [pc, #68]	; (800cfcc <MIDI_SendBuffer+0x64>)
 800cf88:	54d1      	strb	r1, [r2, r3]
		APP_Rx_ptr_in++;
 800cf8a:	4b0f      	ldr	r3, [pc, #60]	; (800cfc8 <MIDI_SendBuffer+0x60>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	3301      	adds	r3, #1
 800cf90:	4a0d      	ldr	r2, [pc, #52]	; (800cfc8 <MIDI_SendBuffer+0x60>)
 800cf92:	6013      	str	r3, [r2, #0]
		i++;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	3301      	adds	r3, #1
 800cf98:	60fb      	str	r3, [r7, #12]
		if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 800cf9a:	4b0b      	ldr	r3, [pc, #44]	; (800cfc8 <MIDI_SendBuffer+0x60>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfa2:	d102      	bne.n	800cfaa <MIDI_SendBuffer+0x42>
			APP_Rx_ptr_in = 0;
 800cfa4:	4b08      	ldr	r3, [pc, #32]	; (800cfc8 <MIDI_SendBuffer+0x60>)
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	601a      	str	r2, [r3, #0]
	while (i < length) {
 800cfaa:	887b      	ldrh	r3, [r7, #2]
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d3e3      	bcc.n	800cf7a <MIDI_SendBuffer+0x12>
		}
	}
	flag_sendMidi = 1;
 800cfb2:	4b07      	ldr	r3, [pc, #28]	; (800cfd0 <MIDI_SendBuffer+0x68>)
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 800cfb8:	2300      	movs	r3, #0
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3714      	adds	r7, #20
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr
 800cfc6:	bf00      	nop
 800cfc8:	200003c0 	.word	0x200003c0
 800cfcc:	2000091c 	.word	0x2000091c
 800cfd0:	200003ce 	.word	0x200003ce

0800cfd4 <MIDI_SendCheck>:

void MIDI_SendCheck(void){
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	af00      	add	r7, sp, #0
	if (flag_sendMidi != 0){
 800cfd8:	4b07      	ldr	r3, [pc, #28]	; (800cff8 <MIDI_SendCheck+0x24>)
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d008      	beq.n	800cff2 <MIDI_SendCheck+0x1e>
		if (USB_Tx_State == 0){
 800cfe0:	4b06      	ldr	r3, [pc, #24]	; (800cffc <MIDI_SendCheck+0x28>)
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d104      	bne.n	800cff2 <MIDI_SendCheck+0x1e>
			USBD_MIDI_SendPacket();
 800cfe8:	f7fe fc06 	bl	800b7f8 <USBD_MIDI_SendPacket>
			flag_sendMidi = 0;
 800cfec:	4b02      	ldr	r3, [pc, #8]	; (800cff8 <MIDI_SendCheck+0x24>)
 800cfee:	2200      	movs	r2, #0
 800cff0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800cff2:	bf00      	nop
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	200003ce 	.word	0x200003ce
 800cffc:	200003cc 	.word	0x200003cc

0800d000 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b08a      	sub	sp, #40	; 0x28
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d008:	f107 0314 	add.w	r3, r7, #20
 800d00c:	2200      	movs	r2, #0
 800d00e:	601a      	str	r2, [r3, #0]
 800d010:	605a      	str	r2, [r3, #4]
 800d012:	609a      	str	r2, [r3, #8]
 800d014:	60da      	str	r2, [r3, #12]
 800d016:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d020:	d13a      	bne.n	800d098 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d022:	2300      	movs	r3, #0
 800d024:	613b      	str	r3, [r7, #16]
 800d026:	4b1e      	ldr	r3, [pc, #120]	; (800d0a0 <HAL_PCD_MspInit+0xa0>)
 800d028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d02a:	4a1d      	ldr	r2, [pc, #116]	; (800d0a0 <HAL_PCD_MspInit+0xa0>)
 800d02c:	f043 0301 	orr.w	r3, r3, #1
 800d030:	6313      	str	r3, [r2, #48]	; 0x30
 800d032:	4b1b      	ldr	r3, [pc, #108]	; (800d0a0 <HAL_PCD_MspInit+0xa0>)
 800d034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d036:	f003 0301 	and.w	r3, r3, #1
 800d03a:	613b      	str	r3, [r7, #16]
 800d03c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d03e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d044:	2302      	movs	r3, #2
 800d046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d048:	2300      	movs	r3, #0
 800d04a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d04c:	2303      	movs	r3, #3
 800d04e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d050:	230a      	movs	r3, #10
 800d052:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d054:	f107 0314 	add.w	r3, r7, #20
 800d058:	4619      	mov	r1, r3
 800d05a:	4812      	ldr	r0, [pc, #72]	; (800d0a4 <HAL_PCD_MspInit+0xa4>)
 800d05c:	f7f6 fdb4 	bl	8003bc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d060:	4b0f      	ldr	r3, [pc, #60]	; (800d0a0 <HAL_PCD_MspInit+0xa0>)
 800d062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d064:	4a0e      	ldr	r2, [pc, #56]	; (800d0a0 <HAL_PCD_MspInit+0xa0>)
 800d066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d06a:	6353      	str	r3, [r2, #52]	; 0x34
 800d06c:	2300      	movs	r3, #0
 800d06e:	60fb      	str	r3, [r7, #12]
 800d070:	4b0b      	ldr	r3, [pc, #44]	; (800d0a0 <HAL_PCD_MspInit+0xa0>)
 800d072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d074:	4a0a      	ldr	r2, [pc, #40]	; (800d0a0 <HAL_PCD_MspInit+0xa0>)
 800d076:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d07a:	6453      	str	r3, [r2, #68]	; 0x44
 800d07c:	4b08      	ldr	r3, [pc, #32]	; (800d0a0 <HAL_PCD_MspInit+0xa0>)
 800d07e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d084:	60fb      	str	r3, [r7, #12]
 800d086:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d088:	2200      	movs	r2, #0
 800d08a:	2100      	movs	r1, #0
 800d08c:	2043      	movs	r0, #67	; 0x43
 800d08e:	f7f6 fc2c 	bl	80038ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d092:	2043      	movs	r0, #67	; 0x43
 800d094:	f7f6 fc45 	bl	8003922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d098:	bf00      	nop
 800d09a:	3728      	adds	r7, #40	; 0x28
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	40023800 	.word	0x40023800
 800d0a4:	40020000 	.word	0x40020000

0800d0a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d0bc:	4619      	mov	r1, r3
 800d0be:	4610      	mov	r0, r2
 800d0c0:	f7fe fcd3 	bl	800ba6a <USBD_LL_SetupStage>
}
 800d0c4:	bf00      	nop
 800d0c6:	3708      	adds	r7, #8
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d0de:	78fa      	ldrb	r2, [r7, #3]
 800d0e0:	6879      	ldr	r1, [r7, #4]
 800d0e2:	4613      	mov	r3, r2
 800d0e4:	00db      	lsls	r3, r3, #3
 800d0e6:	1a9b      	subs	r3, r3, r2
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	440b      	add	r3, r1
 800d0ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	78fb      	ldrb	r3, [r7, #3]
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	f7fe fd0b 	bl	800bb10 <USBD_LL_DataOutStage>
}
 800d0fa:	bf00      	nop
 800d0fc:	3708      	adds	r7, #8
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d102:	b580      	push	{r7, lr}
 800d104:	b082      	sub	sp, #8
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
 800d10a:	460b      	mov	r3, r1
 800d10c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d114:	78fa      	ldrb	r2, [r7, #3]
 800d116:	6879      	ldr	r1, [r7, #4]
 800d118:	4613      	mov	r3, r2
 800d11a:	00db      	lsls	r3, r3, #3
 800d11c:	1a9b      	subs	r3, r3, r2
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	440b      	add	r3, r1
 800d122:	3348      	adds	r3, #72	; 0x48
 800d124:	681a      	ldr	r2, [r3, #0]
 800d126:	78fb      	ldrb	r3, [r7, #3]
 800d128:	4619      	mov	r1, r3
 800d12a:	f7fe fd54 	bl	800bbd6 <USBD_LL_DataInStage>
}
 800d12e:	bf00      	nop
 800d130:	3708      	adds	r7, #8
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}

0800d136 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d136:	b580      	push	{r7, lr}
 800d138:	b082      	sub	sp, #8
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d144:	4618      	mov	r0, r3
 800d146:	f7fe fe58 	bl	800bdfa <USBD_LL_SOF>
}
 800d14a:	bf00      	nop
 800d14c:	3708      	adds	r7, #8
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}

0800d152 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d152:	b580      	push	{r7, lr}
 800d154:	b084      	sub	sp, #16
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d15a:	2301      	movs	r3, #1
 800d15c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d102      	bne.n	800d16c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d166:	2300      	movs	r3, #0
 800d168:	73fb      	strb	r3, [r7, #15]
 800d16a:	e008      	b.n	800d17e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	2b02      	cmp	r3, #2
 800d172:	d102      	bne.n	800d17a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d174:	2301      	movs	r3, #1
 800d176:	73fb      	strb	r3, [r7, #15]
 800d178:	e001      	b.n	800d17e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d17a:	f7f5 f817 	bl	80021ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d184:	7bfa      	ldrb	r2, [r7, #15]
 800d186:	4611      	mov	r1, r2
 800d188:	4618      	mov	r0, r3
 800d18a:	f7fe fdfb 	bl	800bd84 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d194:	4618      	mov	r0, r3
 800d196:	f7fe fdb4 	bl	800bd02 <USBD_LL_Reset>
}
 800d19a:	bf00      	nop
 800d19c:	3710      	adds	r7, #16
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
	...

0800d1a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7fe fdf6 	bl	800bda4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	6812      	ldr	r2, [r2, #0]
 800d1c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d1ca:	f043 0301 	orr.w	r3, r3, #1
 800d1ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6a1b      	ldr	r3, [r3, #32]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d005      	beq.n	800d1e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1d8:	4b04      	ldr	r3, [pc, #16]	; (800d1ec <HAL_PCD_SuspendCallback+0x48>)
 800d1da:	691b      	ldr	r3, [r3, #16]
 800d1dc:	4a03      	ldr	r2, [pc, #12]	; (800d1ec <HAL_PCD_SuspendCallback+0x48>)
 800d1de:	f043 0306 	orr.w	r3, r3, #6
 800d1e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d1e4:	bf00      	nop
 800d1e6:	3708      	adds	r7, #8
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}
 800d1ec:	e000ed00 	.word	0xe000ed00

0800d1f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7fe fde5 	bl	800bdce <USBD_LL_Resume>
}
 800d204:	bf00      	nop
 800d206:	3708      	adds	r7, #8
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}

0800d20c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b082      	sub	sp, #8
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	460b      	mov	r3, r1
 800d216:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d21e:	78fa      	ldrb	r2, [r7, #3]
 800d220:	4611      	mov	r1, r2
 800d222:	4618      	mov	r0, r3
 800d224:	f7fe fe10 	bl	800be48 <USBD_LL_IsoOUTIncomplete>
}
 800d228:	bf00      	nop
 800d22a:	3708      	adds	r7, #8
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	460b      	mov	r3, r1
 800d23a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d242:	78fa      	ldrb	r2, [r7, #3]
 800d244:	4611      	mov	r1, r2
 800d246:	4618      	mov	r0, r3
 800d248:	f7fe fdf1 	bl	800be2e <USBD_LL_IsoINIncomplete>
}
 800d24c:	bf00      	nop
 800d24e:	3708      	adds	r7, #8
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d262:	4618      	mov	r0, r3
 800d264:	f7fe fdfd 	bl	800be62 <USBD_LL_DevConnected>
}
 800d268:	bf00      	nop
 800d26a:	3708      	adds	r7, #8
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fe fdfa 	bl	800be78 <USBD_LL_DevDisconnected>
}
 800d284:	bf00      	nop
 800d286:	3708      	adds	r7, #8
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d13c      	bne.n	800d316 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d29c:	4a20      	ldr	r2, [pc, #128]	; (800d320 <USBD_LL_Init+0x94>)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	4a1e      	ldr	r2, [pc, #120]	; (800d320 <USBD_LL_Init+0x94>)
 800d2a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d2ac:	4b1c      	ldr	r3, [pc, #112]	; (800d320 <USBD_LL_Init+0x94>)
 800d2ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d2b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d2b4:	4b1a      	ldr	r3, [pc, #104]	; (800d320 <USBD_LL_Init+0x94>)
 800d2b6:	2204      	movs	r2, #4
 800d2b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d2ba:	4b19      	ldr	r3, [pc, #100]	; (800d320 <USBD_LL_Init+0x94>)
 800d2bc:	2202      	movs	r2, #2
 800d2be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d2c0:	4b17      	ldr	r3, [pc, #92]	; (800d320 <USBD_LL_Init+0x94>)
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d2c6:	4b16      	ldr	r3, [pc, #88]	; (800d320 <USBD_LL_Init+0x94>)
 800d2c8:	2202      	movs	r2, #2
 800d2ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d2cc:	4b14      	ldr	r3, [pc, #80]	; (800d320 <USBD_LL_Init+0x94>)
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d2d2:	4b13      	ldr	r3, [pc, #76]	; (800d320 <USBD_LL_Init+0x94>)
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d2d8:	4b11      	ldr	r3, [pc, #68]	; (800d320 <USBD_LL_Init+0x94>)
 800d2da:	2200      	movs	r2, #0
 800d2dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d2de:	4b10      	ldr	r3, [pc, #64]	; (800d320 <USBD_LL_Init+0x94>)
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d2e4:	4b0e      	ldr	r3, [pc, #56]	; (800d320 <USBD_LL_Init+0x94>)
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d2ea:	480d      	ldr	r0, [pc, #52]	; (800d320 <USBD_LL_Init+0x94>)
 800d2ec:	f7f9 f805 	bl	80062fa <HAL_PCD_Init>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d001      	beq.n	800d2fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d2f6:	f7f4 ff59 	bl	80021ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d2fa:	2180      	movs	r1, #128	; 0x80
 800d2fc:	4808      	ldr	r0, [pc, #32]	; (800d320 <USBD_LL_Init+0x94>)
 800d2fe:	f7fa f962 	bl	80075c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d302:	2240      	movs	r2, #64	; 0x40
 800d304:	2100      	movs	r1, #0
 800d306:	4806      	ldr	r0, [pc, #24]	; (800d320 <USBD_LL_Init+0x94>)
 800d308:	f7fa f916 	bl	8007538 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d30c:	2280      	movs	r2, #128	; 0x80
 800d30e:	2101      	movs	r1, #1
 800d310:	4803      	ldr	r0, [pc, #12]	; (800d320 <USBD_LL_Init+0x94>)
 800d312:	f7fa f911 	bl	8007538 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d316:	2300      	movs	r3, #0
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3708      	adds	r7, #8
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	20000eec 	.word	0x20000eec

0800d324 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b084      	sub	sp, #16
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d32c:	2300      	movs	r3, #0
 800d32e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d330:	2300      	movs	r3, #0
 800d332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7f9 f8fa 	bl	8006534 <HAL_PCD_Start>
 800d340:	4603      	mov	r3, r0
 800d342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d344:	7bfb      	ldrb	r3, [r7, #15]
 800d346:	4618      	mov	r0, r3
 800d348:	f000 f92a 	bl	800d5a0 <USBD_Get_USB_Status>
 800d34c:	4603      	mov	r3, r0
 800d34e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d350:	7bbb      	ldrb	r3, [r7, #14]
}
 800d352:	4618      	mov	r0, r3
 800d354:	3710      	adds	r7, #16
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}

0800d35a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d35a:	b580      	push	{r7, lr}
 800d35c:	b084      	sub	sp, #16
 800d35e:	af00      	add	r7, sp, #0
 800d360:	6078      	str	r0, [r7, #4]
 800d362:	4608      	mov	r0, r1
 800d364:	4611      	mov	r1, r2
 800d366:	461a      	mov	r2, r3
 800d368:	4603      	mov	r3, r0
 800d36a:	70fb      	strb	r3, [r7, #3]
 800d36c:	460b      	mov	r3, r1
 800d36e:	70bb      	strb	r3, [r7, #2]
 800d370:	4613      	mov	r3, r2
 800d372:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d374:	2300      	movs	r3, #0
 800d376:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d378:	2300      	movs	r3, #0
 800d37a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d382:	78bb      	ldrb	r3, [r7, #2]
 800d384:	883a      	ldrh	r2, [r7, #0]
 800d386:	78f9      	ldrb	r1, [r7, #3]
 800d388:	f7f9 fcde 	bl	8006d48 <HAL_PCD_EP_Open>
 800d38c:	4603      	mov	r3, r0
 800d38e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d390:	7bfb      	ldrb	r3, [r7, #15]
 800d392:	4618      	mov	r0, r3
 800d394:	f000 f904 	bl	800d5a0 <USBD_Get_USB_Status>
 800d398:	4603      	mov	r3, r0
 800d39a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d39c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3710      	adds	r7, #16
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}

0800d3a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b084      	sub	sp, #16
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
 800d3ae:	460b      	mov	r3, r1
 800d3b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d3c0:	78fa      	ldrb	r2, [r7, #3]
 800d3c2:	4611      	mov	r1, r2
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7f9 fd27 	bl	8006e18 <HAL_PCD_EP_Close>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3ce:	7bfb      	ldrb	r3, [r7, #15]
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f000 f8e5 	bl	800d5a0 <USBD_Get_USB_Status>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3da:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3710      	adds	r7, #16
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b084      	sub	sp, #16
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	460b      	mov	r3, r1
 800d3ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d3fe:	78fa      	ldrb	r2, [r7, #3]
 800d400:	4611      	mov	r1, r2
 800d402:	4618      	mov	r0, r3
 800d404:	f7f9 fdff 	bl	8007006 <HAL_PCD_EP_SetStall>
 800d408:	4603      	mov	r3, r0
 800d40a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d40c:	7bfb      	ldrb	r3, [r7, #15]
 800d40e:	4618      	mov	r0, r3
 800d410:	f000 f8c6 	bl	800d5a0 <USBD_Get_USB_Status>
 800d414:	4603      	mov	r3, r0
 800d416:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d418:	7bbb      	ldrb	r3, [r7, #14]
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3710      	adds	r7, #16
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b084      	sub	sp, #16
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
 800d42a:	460b      	mov	r3, r1
 800d42c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d42e:	2300      	movs	r3, #0
 800d430:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d432:	2300      	movs	r3, #0
 800d434:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d43c:	78fa      	ldrb	r2, [r7, #3]
 800d43e:	4611      	mov	r1, r2
 800d440:	4618      	mov	r0, r3
 800d442:	f7f9 fe44 	bl	80070ce <HAL_PCD_EP_ClrStall>
 800d446:	4603      	mov	r3, r0
 800d448:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d44a:	7bfb      	ldrb	r3, [r7, #15]
 800d44c:	4618      	mov	r0, r3
 800d44e:	f000 f8a7 	bl	800d5a0 <USBD_Get_USB_Status>
 800d452:	4603      	mov	r3, r0
 800d454:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d456:	7bbb      	ldrb	r3, [r7, #14]
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3710      	adds	r7, #16
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d460:	b480      	push	{r7}
 800d462:	b085      	sub	sp, #20
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	460b      	mov	r3, r1
 800d46a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d472:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d474:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	da0b      	bge.n	800d494 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d47c:	78fb      	ldrb	r3, [r7, #3]
 800d47e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d482:	68f9      	ldr	r1, [r7, #12]
 800d484:	4613      	mov	r3, r2
 800d486:	00db      	lsls	r3, r3, #3
 800d488:	1a9b      	subs	r3, r3, r2
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	440b      	add	r3, r1
 800d48e:	333e      	adds	r3, #62	; 0x3e
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	e00b      	b.n	800d4ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d494:	78fb      	ldrb	r3, [r7, #3]
 800d496:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d49a:	68f9      	ldr	r1, [r7, #12]
 800d49c:	4613      	mov	r3, r2
 800d49e:	00db      	lsls	r3, r3, #3
 800d4a0:	1a9b      	subs	r3, r3, r2
 800d4a2:	009b      	lsls	r3, r3, #2
 800d4a4:	440b      	add	r3, r1
 800d4a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d4aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3714      	adds	r7, #20
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr

0800d4b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b084      	sub	sp, #16
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	460b      	mov	r3, r1
 800d4c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d4d2:	78fa      	ldrb	r2, [r7, #3]
 800d4d4:	4611      	mov	r1, r2
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7f9 fc11 	bl	8006cfe <HAL_PCD_SetAddress>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4e0:	7bfb      	ldrb	r3, [r7, #15]
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f000 f85c 	bl	800d5a0 <USBD_Get_USB_Status>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3710      	adds	r7, #16
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}

0800d4f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d4f6:	b580      	push	{r7, lr}
 800d4f8:	b086      	sub	sp, #24
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	60f8      	str	r0, [r7, #12]
 800d4fe:	607a      	str	r2, [r7, #4]
 800d500:	603b      	str	r3, [r7, #0]
 800d502:	460b      	mov	r3, r1
 800d504:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d506:	2300      	movs	r3, #0
 800d508:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d50a:	2300      	movs	r3, #0
 800d50c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d514:	7af9      	ldrb	r1, [r7, #11]
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	687a      	ldr	r2, [r7, #4]
 800d51a:	f7f9 fd2a 	bl	8006f72 <HAL_PCD_EP_Transmit>
 800d51e:	4603      	mov	r3, r0
 800d520:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d522:	7dfb      	ldrb	r3, [r7, #23]
 800d524:	4618      	mov	r0, r3
 800d526:	f000 f83b 	bl	800d5a0 <USBD_Get_USB_Status>
 800d52a:	4603      	mov	r3, r0
 800d52c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d52e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d530:	4618      	mov	r0, r3
 800d532:	3718      	adds	r7, #24
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b086      	sub	sp, #24
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	607a      	str	r2, [r7, #4]
 800d542:	603b      	str	r3, [r7, #0]
 800d544:	460b      	mov	r3, r1
 800d546:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d548:	2300      	movs	r3, #0
 800d54a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d54c:	2300      	movs	r3, #0
 800d54e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d556:	7af9      	ldrb	r1, [r7, #11]
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	687a      	ldr	r2, [r7, #4]
 800d55c:	f7f9 fca6 	bl	8006eac <HAL_PCD_EP_Receive>
 800d560:	4603      	mov	r3, r0
 800d562:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d564:	7dfb      	ldrb	r3, [r7, #23]
 800d566:	4618      	mov	r0, r3
 800d568:	f000 f81a 	bl	800d5a0 <USBD_Get_USB_Status>
 800d56c:	4603      	mov	r3, r0
 800d56e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d570:	7dbb      	ldrb	r3, [r7, #22]
}
 800d572:	4618      	mov	r0, r3
 800d574:	3718      	adds	r7, #24
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}

0800d57a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d57a:	b580      	push	{r7, lr}
 800d57c:	b082      	sub	sp, #8
 800d57e:	af00      	add	r7, sp, #0
 800d580:	6078      	str	r0, [r7, #4]
 800d582:	460b      	mov	r3, r1
 800d584:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d58c:	78fa      	ldrb	r2, [r7, #3]
 800d58e:	4611      	mov	r1, r2
 800d590:	4618      	mov	r0, r3
 800d592:	f7f9 fcd6 	bl	8006f42 <HAL_PCD_EP_GetRxCount>
 800d596:	4603      	mov	r3, r0
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3708      	adds	r7, #8
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b085      	sub	sp, #20
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d5ae:	79fb      	ldrb	r3, [r7, #7]
 800d5b0:	2b03      	cmp	r3, #3
 800d5b2:	d817      	bhi.n	800d5e4 <USBD_Get_USB_Status+0x44>
 800d5b4:	a201      	add	r2, pc, #4	; (adr r2, 800d5bc <USBD_Get_USB_Status+0x1c>)
 800d5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ba:	bf00      	nop
 800d5bc:	0800d5cd 	.word	0x0800d5cd
 800d5c0:	0800d5d3 	.word	0x0800d5d3
 800d5c4:	0800d5d9 	.word	0x0800d5d9
 800d5c8:	0800d5df 	.word	0x0800d5df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d5d0:	e00b      	b.n	800d5ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5d2:	2303      	movs	r3, #3
 800d5d4:	73fb      	strb	r3, [r7, #15]
    break;
 800d5d6:	e008      	b.n	800d5ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	73fb      	strb	r3, [r7, #15]
    break;
 800d5dc:	e005      	b.n	800d5ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d5de:	2303      	movs	r3, #3
 800d5e0:	73fb      	strb	r3, [r7, #15]
    break;
 800d5e2:	e002      	b.n	800d5ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d5e4:	2303      	movs	r3, #3
 800d5e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d5e8:	bf00      	nop
  }
  return usb_status;
 800d5ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3714      	adds	r7, #20
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr

0800d5f8 <__errno>:
 800d5f8:	4b01      	ldr	r3, [pc, #4]	; (800d600 <__errno+0x8>)
 800d5fa:	6818      	ldr	r0, [r3, #0]
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	2000028c 	.word	0x2000028c

0800d604 <__libc_init_array>:
 800d604:	b570      	push	{r4, r5, r6, lr}
 800d606:	4e0d      	ldr	r6, [pc, #52]	; (800d63c <__libc_init_array+0x38>)
 800d608:	4c0d      	ldr	r4, [pc, #52]	; (800d640 <__libc_init_array+0x3c>)
 800d60a:	1ba4      	subs	r4, r4, r6
 800d60c:	10a4      	asrs	r4, r4, #2
 800d60e:	2500      	movs	r5, #0
 800d610:	42a5      	cmp	r5, r4
 800d612:	d109      	bne.n	800d628 <__libc_init_array+0x24>
 800d614:	4e0b      	ldr	r6, [pc, #44]	; (800d644 <__libc_init_array+0x40>)
 800d616:	4c0c      	ldr	r4, [pc, #48]	; (800d648 <__libc_init_array+0x44>)
 800d618:	f000 f8ea 	bl	800d7f0 <_init>
 800d61c:	1ba4      	subs	r4, r4, r6
 800d61e:	10a4      	asrs	r4, r4, #2
 800d620:	2500      	movs	r5, #0
 800d622:	42a5      	cmp	r5, r4
 800d624:	d105      	bne.n	800d632 <__libc_init_array+0x2e>
 800d626:	bd70      	pop	{r4, r5, r6, pc}
 800d628:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d62c:	4798      	blx	r3
 800d62e:	3501      	adds	r5, #1
 800d630:	e7ee      	b.n	800d610 <__libc_init_array+0xc>
 800d632:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d636:	4798      	blx	r3
 800d638:	3501      	adds	r5, #1
 800d63a:	e7f2      	b.n	800d622 <__libc_init_array+0x1e>
 800d63c:	08041730 	.word	0x08041730
 800d640:	08041730 	.word	0x08041730
 800d644:	08041730 	.word	0x08041730
 800d648:	08041734 	.word	0x08041734

0800d64c <malloc>:
 800d64c:	4b02      	ldr	r3, [pc, #8]	; (800d658 <malloc+0xc>)
 800d64e:	4601      	mov	r1, r0
 800d650:	6818      	ldr	r0, [r3, #0]
 800d652:	f000 b861 	b.w	800d718 <_malloc_r>
 800d656:	bf00      	nop
 800d658:	2000028c 	.word	0x2000028c

0800d65c <free>:
 800d65c:	4b02      	ldr	r3, [pc, #8]	; (800d668 <free+0xc>)
 800d65e:	4601      	mov	r1, r0
 800d660:	6818      	ldr	r0, [r3, #0]
 800d662:	f000 b80b 	b.w	800d67c <_free_r>
 800d666:	bf00      	nop
 800d668:	2000028c 	.word	0x2000028c

0800d66c <memset>:
 800d66c:	4402      	add	r2, r0
 800d66e:	4603      	mov	r3, r0
 800d670:	4293      	cmp	r3, r2
 800d672:	d100      	bne.n	800d676 <memset+0xa>
 800d674:	4770      	bx	lr
 800d676:	f803 1b01 	strb.w	r1, [r3], #1
 800d67a:	e7f9      	b.n	800d670 <memset+0x4>

0800d67c <_free_r>:
 800d67c:	b538      	push	{r3, r4, r5, lr}
 800d67e:	4605      	mov	r5, r0
 800d680:	2900      	cmp	r1, #0
 800d682:	d045      	beq.n	800d710 <_free_r+0x94>
 800d684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d688:	1f0c      	subs	r4, r1, #4
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	bfb8      	it	lt
 800d68e:	18e4      	addlt	r4, r4, r3
 800d690:	f000 f8ac 	bl	800d7ec <__malloc_lock>
 800d694:	4a1f      	ldr	r2, [pc, #124]	; (800d714 <_free_r+0x98>)
 800d696:	6813      	ldr	r3, [r2, #0]
 800d698:	4610      	mov	r0, r2
 800d69a:	b933      	cbnz	r3, 800d6aa <_free_r+0x2e>
 800d69c:	6063      	str	r3, [r4, #4]
 800d69e:	6014      	str	r4, [r2, #0]
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6a6:	f000 b8a2 	b.w	800d7ee <__malloc_unlock>
 800d6aa:	42a3      	cmp	r3, r4
 800d6ac:	d90c      	bls.n	800d6c8 <_free_r+0x4c>
 800d6ae:	6821      	ldr	r1, [r4, #0]
 800d6b0:	1862      	adds	r2, r4, r1
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	bf04      	itt	eq
 800d6b6:	681a      	ldreq	r2, [r3, #0]
 800d6b8:	685b      	ldreq	r3, [r3, #4]
 800d6ba:	6063      	str	r3, [r4, #4]
 800d6bc:	bf04      	itt	eq
 800d6be:	1852      	addeq	r2, r2, r1
 800d6c0:	6022      	streq	r2, [r4, #0]
 800d6c2:	6004      	str	r4, [r0, #0]
 800d6c4:	e7ec      	b.n	800d6a0 <_free_r+0x24>
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	685a      	ldr	r2, [r3, #4]
 800d6ca:	b10a      	cbz	r2, 800d6d0 <_free_r+0x54>
 800d6cc:	42a2      	cmp	r2, r4
 800d6ce:	d9fa      	bls.n	800d6c6 <_free_r+0x4a>
 800d6d0:	6819      	ldr	r1, [r3, #0]
 800d6d2:	1858      	adds	r0, r3, r1
 800d6d4:	42a0      	cmp	r0, r4
 800d6d6:	d10b      	bne.n	800d6f0 <_free_r+0x74>
 800d6d8:	6820      	ldr	r0, [r4, #0]
 800d6da:	4401      	add	r1, r0
 800d6dc:	1858      	adds	r0, r3, r1
 800d6de:	4282      	cmp	r2, r0
 800d6e0:	6019      	str	r1, [r3, #0]
 800d6e2:	d1dd      	bne.n	800d6a0 <_free_r+0x24>
 800d6e4:	6810      	ldr	r0, [r2, #0]
 800d6e6:	6852      	ldr	r2, [r2, #4]
 800d6e8:	605a      	str	r2, [r3, #4]
 800d6ea:	4401      	add	r1, r0
 800d6ec:	6019      	str	r1, [r3, #0]
 800d6ee:	e7d7      	b.n	800d6a0 <_free_r+0x24>
 800d6f0:	d902      	bls.n	800d6f8 <_free_r+0x7c>
 800d6f2:	230c      	movs	r3, #12
 800d6f4:	602b      	str	r3, [r5, #0]
 800d6f6:	e7d3      	b.n	800d6a0 <_free_r+0x24>
 800d6f8:	6820      	ldr	r0, [r4, #0]
 800d6fa:	1821      	adds	r1, r4, r0
 800d6fc:	428a      	cmp	r2, r1
 800d6fe:	bf04      	itt	eq
 800d700:	6811      	ldreq	r1, [r2, #0]
 800d702:	6852      	ldreq	r2, [r2, #4]
 800d704:	6062      	str	r2, [r4, #4]
 800d706:	bf04      	itt	eq
 800d708:	1809      	addeq	r1, r1, r0
 800d70a:	6021      	streq	r1, [r4, #0]
 800d70c:	605c      	str	r4, [r3, #4]
 800d70e:	e7c7      	b.n	800d6a0 <_free_r+0x24>
 800d710:	bd38      	pop	{r3, r4, r5, pc}
 800d712:	bf00      	nop
 800d714:	200003d0 	.word	0x200003d0

0800d718 <_malloc_r>:
 800d718:	b570      	push	{r4, r5, r6, lr}
 800d71a:	1ccd      	adds	r5, r1, #3
 800d71c:	f025 0503 	bic.w	r5, r5, #3
 800d720:	3508      	adds	r5, #8
 800d722:	2d0c      	cmp	r5, #12
 800d724:	bf38      	it	cc
 800d726:	250c      	movcc	r5, #12
 800d728:	2d00      	cmp	r5, #0
 800d72a:	4606      	mov	r6, r0
 800d72c:	db01      	blt.n	800d732 <_malloc_r+0x1a>
 800d72e:	42a9      	cmp	r1, r5
 800d730:	d903      	bls.n	800d73a <_malloc_r+0x22>
 800d732:	230c      	movs	r3, #12
 800d734:	6033      	str	r3, [r6, #0]
 800d736:	2000      	movs	r0, #0
 800d738:	bd70      	pop	{r4, r5, r6, pc}
 800d73a:	f000 f857 	bl	800d7ec <__malloc_lock>
 800d73e:	4a21      	ldr	r2, [pc, #132]	; (800d7c4 <_malloc_r+0xac>)
 800d740:	6814      	ldr	r4, [r2, #0]
 800d742:	4621      	mov	r1, r4
 800d744:	b991      	cbnz	r1, 800d76c <_malloc_r+0x54>
 800d746:	4c20      	ldr	r4, [pc, #128]	; (800d7c8 <_malloc_r+0xb0>)
 800d748:	6823      	ldr	r3, [r4, #0]
 800d74a:	b91b      	cbnz	r3, 800d754 <_malloc_r+0x3c>
 800d74c:	4630      	mov	r0, r6
 800d74e:	f000 f83d 	bl	800d7cc <_sbrk_r>
 800d752:	6020      	str	r0, [r4, #0]
 800d754:	4629      	mov	r1, r5
 800d756:	4630      	mov	r0, r6
 800d758:	f000 f838 	bl	800d7cc <_sbrk_r>
 800d75c:	1c43      	adds	r3, r0, #1
 800d75e:	d124      	bne.n	800d7aa <_malloc_r+0x92>
 800d760:	230c      	movs	r3, #12
 800d762:	6033      	str	r3, [r6, #0]
 800d764:	4630      	mov	r0, r6
 800d766:	f000 f842 	bl	800d7ee <__malloc_unlock>
 800d76a:	e7e4      	b.n	800d736 <_malloc_r+0x1e>
 800d76c:	680b      	ldr	r3, [r1, #0]
 800d76e:	1b5b      	subs	r3, r3, r5
 800d770:	d418      	bmi.n	800d7a4 <_malloc_r+0x8c>
 800d772:	2b0b      	cmp	r3, #11
 800d774:	d90f      	bls.n	800d796 <_malloc_r+0x7e>
 800d776:	600b      	str	r3, [r1, #0]
 800d778:	50cd      	str	r5, [r1, r3]
 800d77a:	18cc      	adds	r4, r1, r3
 800d77c:	4630      	mov	r0, r6
 800d77e:	f000 f836 	bl	800d7ee <__malloc_unlock>
 800d782:	f104 000b 	add.w	r0, r4, #11
 800d786:	1d23      	adds	r3, r4, #4
 800d788:	f020 0007 	bic.w	r0, r0, #7
 800d78c:	1ac3      	subs	r3, r0, r3
 800d78e:	d0d3      	beq.n	800d738 <_malloc_r+0x20>
 800d790:	425a      	negs	r2, r3
 800d792:	50e2      	str	r2, [r4, r3]
 800d794:	e7d0      	b.n	800d738 <_malloc_r+0x20>
 800d796:	428c      	cmp	r4, r1
 800d798:	684b      	ldr	r3, [r1, #4]
 800d79a:	bf16      	itet	ne
 800d79c:	6063      	strne	r3, [r4, #4]
 800d79e:	6013      	streq	r3, [r2, #0]
 800d7a0:	460c      	movne	r4, r1
 800d7a2:	e7eb      	b.n	800d77c <_malloc_r+0x64>
 800d7a4:	460c      	mov	r4, r1
 800d7a6:	6849      	ldr	r1, [r1, #4]
 800d7a8:	e7cc      	b.n	800d744 <_malloc_r+0x2c>
 800d7aa:	1cc4      	adds	r4, r0, #3
 800d7ac:	f024 0403 	bic.w	r4, r4, #3
 800d7b0:	42a0      	cmp	r0, r4
 800d7b2:	d005      	beq.n	800d7c0 <_malloc_r+0xa8>
 800d7b4:	1a21      	subs	r1, r4, r0
 800d7b6:	4630      	mov	r0, r6
 800d7b8:	f000 f808 	bl	800d7cc <_sbrk_r>
 800d7bc:	3001      	adds	r0, #1
 800d7be:	d0cf      	beq.n	800d760 <_malloc_r+0x48>
 800d7c0:	6025      	str	r5, [r4, #0]
 800d7c2:	e7db      	b.n	800d77c <_malloc_r+0x64>
 800d7c4:	200003d0 	.word	0x200003d0
 800d7c8:	200003d4 	.word	0x200003d4

0800d7cc <_sbrk_r>:
 800d7cc:	b538      	push	{r3, r4, r5, lr}
 800d7ce:	4c06      	ldr	r4, [pc, #24]	; (800d7e8 <_sbrk_r+0x1c>)
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	4605      	mov	r5, r0
 800d7d4:	4608      	mov	r0, r1
 800d7d6:	6023      	str	r3, [r4, #0]
 800d7d8:	f7f5 f802 	bl	80027e0 <_sbrk>
 800d7dc:	1c43      	adds	r3, r0, #1
 800d7de:	d102      	bne.n	800d7e6 <_sbrk_r+0x1a>
 800d7e0:	6823      	ldr	r3, [r4, #0]
 800d7e2:	b103      	cbz	r3, 800d7e6 <_sbrk_r+0x1a>
 800d7e4:	602b      	str	r3, [r5, #0]
 800d7e6:	bd38      	pop	{r3, r4, r5, pc}
 800d7e8:	200012f4 	.word	0x200012f4

0800d7ec <__malloc_lock>:
 800d7ec:	4770      	bx	lr

0800d7ee <__malloc_unlock>:
 800d7ee:	4770      	bx	lr

0800d7f0 <_init>:
 800d7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7f2:	bf00      	nop
 800d7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7f6:	bc08      	pop	{r3}
 800d7f8:	469e      	mov	lr, r3
 800d7fa:	4770      	bx	lr

0800d7fc <_fini>:
 800d7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7fe:	bf00      	nop
 800d800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d802:	bc08      	pop	{r3}
 800d804:	469e      	mov	lr, r3
 800d806:	4770      	bx	lr
